package hmcdesgstrct.model.services;


import adf.utils.ebiz.EbizParams;

import adf.utils.model.ADFModelUtils;

import hmcdesgstrct.model.services.common.HCMDesgStructAM;

import java.sql.SQLException;

import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import hmcdesgstrct.model.views.DesignationVORowImpl;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;


import oracle.jbo.server.ViewObjectImpl;

import org.apache.myfaces.trinidad.context.RequestContext;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Sep 10 16:59:39 PDT 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class HCMDesgStructAMImpl extends ApplicationModuleImpl implements HCMDesgStructAM {
    /**
     * This is the default constructor (do not remove).
     */
    public HCMDesgStructAMImpl() {

    }


    public void setBindVarOnPageLoad() {
        System.out.println("Setting param");

        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String orgId = EbizParams.GLBL_APP_USR_ORG();

        RequestContext.getCurrentInstance().getPageFlowScope().put("ADD_EDIT_MODE", "D");
        this.getDepartments().setNamedWhereClauseParam("cldIdBindVar", cldId);
        this.getDepartments().setNamedWhereClauseParam("slocIdBindVar", slocId);
        this.getDepartments().setNamedWhereClauseParam("hoOrgIdBindVar", hoOrgId);
        this.getDepartments().setNamedWhereClauseParam("orgIdBindVar", orgId);
        this.getDepartments().executeQuery();
        this.getLovAppDepart1().setNamedWhereClauseParam("cldIdBindVar", cldId);
        this.getLovAppDepart1().setNamedWhereClauseParam("slocIdBindVar", slocId);
        this.getLovAppDepart1().setNamedWhereClauseParam("hoOrgIdBindVar", hoOrgId);
        this.getLovAppDepart1().setNamedWhereClauseParam("orgIdBindVar", orgId);
        this.getLovAppDepart1().executeQuery();

    }

    public ViewObjectImpl getDummy() {
        return (ViewObjectImpl) findViewObject("Dummy");
    }

    /**
     * Container's getter for Departments.
     * @return Departments
     */
    public ViewObjectImpl getDepartments() {
        return (ViewObjectImpl) findViewObject("Departments");
    }

    /**
     * Container's getter for Designation.
     * @return Designation
     */
    public ViewObjectImpl getDesignation() {
        return (ViewObjectImpl) findViewObject("Designation");
    }


    /**
     * Container's getter for DepartmentsVL1.
     * @return DepartmentsVL1
     */
    public ViewLinkImpl getDepartmentsVL1() {
        return (ViewLinkImpl) findViewLink("DepartmentsVL1");
    }


    public void searchDepartment(String depttId) {
        ViewObjectImpl voi = this.getDepartments();
        voi.setNamedWhereClauseParam("BindDeparttId", depttId);
        voi.executeQuery();

    }

    public void searchDepartmentNM(String deptNM) {
        ViewObjectImpl voi = this.getDepartments();
        voi.setNamedWhereClauseParam("BindDepartName", deptNM);
        voi.executeQuery();
    }


    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String msg = valueExp.getValue(elContext).toString();
        return msg;
    }

    public void resetDepartment() {
        ViewObjectImpl voi = this.getDepartments();
        voi.setNamedWhereClauseParam("BindDeparttId", null); //BindDeparttId
        voi.setNamedWhereClauseParam("BindDepartName", null); //BindDepartName
        voi.executeQuery();

    }


    public void generateStructId() {
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        Integer userId = EbizParams.GLBL_APP_USR();

        ViewObjectImpl desVO = this.getDesignation();
        String structId =
            (String) ADFModelUtils.callFunction(this, new StringBuilder("FN_HCM_GET_PRF_ID (?,?,?,?,?,?,?)"), new Object[] {
                                                slocId, cldId, hoOrgId, orgId, 28508, 0, "HCM$DESG$PRF"
        }, Types.VARCHAR);

        /* String structId = (String) (callStoredFunction(Types.VARCHAR, "FN_HCM_GET_PRF_ID (?,?,?,?,?,?,?)", new Object[]
        {
            slocId, cldId, hoOrgId, orgId, 28508, 0, "HCM$DESG$PRF"
        })); */
        System.out.println("StrucutId=" + structId);
        desVO.getCurrentRow().setAttribute("StructId", structId);
    }

    public void generateDocId() {
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        Integer userId = EbizParams.GLBL_APP_USR();
        ViewObjectImpl desVO = this.getDesignation();
        ViewObjectImpl orgDesig = this.getOrgDesignation1();
        String docId = (String) ADFModelUtils.callFunction(this, new StringBuilder("app.get_txn_id (?,?,?,?,?,?)"), new Object[] {
                                                           cldId, slocId, orgId, userId, 28508, 0
        }, Types.VARCHAR);

        /*  String docId = (String) (callStoredFunction(Types.VARCHAR, "app.get_txn_id (?,?,?,?,?,?)", new Object[]
        {
            cldId, slocId, orgId, userId, 28508, 0
        })); */
        System.out.println("DocId=" + docId);
        desVO.getCurrentRow().setAttribute("DocId", docId);
    }

    /**
     * Container's getter for OrgDesignation1.
     * @return OrgDesignation1
     */
    public ViewObjectImpl getOrgDesignation1() {
        return (ViewObjectImpl) findViewObject("OrgDesignation1");
    }

    /**
     * Container's getter for OrganizationVL1.
     * @return OrganizationVL1
     */
    public ViewLinkImpl getOrganizationVL1() {
        return (ViewLinkImpl) findViewLink("OrganizationVL1");
    }

    public String chkDesigAvalInOrg(String orgID, String DeptId, String reprtId, String DesgId)
        //if 0==no department ,1== no designation,2==no reporting designation.




        {
        RowQualifier rq = null;
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        System.out.println(this.getAppDept().getEstimatedRowCount());
        rq = new RowQualifier(this.getAppDept());
        rq.setWhereClause("CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId + "' and OrgId='" +
                          orgID + "'  and DeptId='" + DeptId + "'");
        System.out.println("Query =" + rq.getExprStr());
        Row frDept[] = this.getAppDept().getFilteredRows(rq);
        System.out.println("Total no. rows for department =" + frDept.length);
        if (frDept.length > 0) {
            rq = new RowQualifier(this.getOrgHcmSetup());
            rq.setWhereClause("CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId +
                              "' and OrgId='" + orgID + "'  and ParamId='" + DesgId + "'");
            System.out.println("Query=" + rq.getExprStr());
            Row frDesig[] = this.getOrgHcmSetup().getFilteredRows(rq);
            System.out.println("Total no. rows for disgnation =" + frDesig.length);
            if (frDesig.length > 0) {
                if (reprtId != null && reprtId != "") {
                    rq = new RowQualifier(this.getOrgHcmSetup());
                    rq.setWhereClause("CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId +
                                      "' and OrgId='" + orgID + "'  and ParamId='" + reprtId + "'");
                    System.out.println("Query=" + rq.getExprStr());
                    Row frreportDesig[] = this.getOrgHcmSetup().getFilteredRows(rq);
                    System.out.println("Total no. rows for disgnation =" + frreportDesig.length);
                    if (frreportDesig.length > 0) {

                    } else {
                        return "2";
                    }
                }


            } else {
                return "1";
            }
        } else {
            return "0";
        }
        return "Y";
    }

    public String chkDuplicateOrgID(String orgID) {
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        RowQualifier rq = new RowQualifier(this.getOrgDesignation1());
        rq.setWhereClause("CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId + "' and OrgId='" +
                          orgID + "'  and DocId='" + this.getOrgDesignation1().getCurrentRow().getAttribute("DocId") +
                          "'");
        System.out.println("Query=" + rq.getExprStr());
        Row fr[] = this.getOrgDesignation1().getFilteredRows(rq);
        System.out.println("Total no. of same rows=" + fr.length);
        for (Row r : fr) {
            System.out.println("Row=" + r + " and current row=" + this.getOrgDesignation1().getCurrentRow());
            if (!(r.equals(this.getOrgDesignation1().getCurrentRow())))
                return "Y";
        }
        return "N";
    }

    public String chkDuplicateDeptStructre(String DeptId, String reprtId, String DesgId) {
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        System.out.println("Depaartment id = " + DeptId + "Reporting id =" + reprtId + "Designation id = " + DesgId);
        RowQualifier rq = new RowQualifier(this.getDesignation());
        rq.setWhereClause("DesgId='" + DesgId + "' and " + "RptgDesgId='" + reprtId + "' and " + "CldId='" + cldId +
                          "' and " + "SlocId=" + slocId + " and " + "HoOrgId='" + hoOrgId + "' and " + "DeptId='" +
                          DeptId + "'");
        System.out.println("Query=" + rq.getExprStr());
        Row fr[] = this.getDesignation().getFilteredRows(rq);
        System.out.println("Total no. of same rows=" + fr.length);
        for (Row r : fr) {
            System.out.println("Row=" + r + " and current row=" + this.getDesignation().getCurrentRow());
            if (!(r.equals(this.getDesignation().getCurrentRow())))
                return "Y";
        }
        return "N";
    }

    public String getStructLinkWithOrgReslt() {
        String result = "";
        ViewObjectImpl hcmDesigVo = this.getDesignation();
        ViewObjectImpl hcmOrgDesigVo = this.getOrgDesignation1();
        String DocId = (String) hcmDesigVo.getCurrentRow().getAttribute("DocId");
        String QryfrOrgDesigVo = "DocId='" + DocId + "'";
        System.out.println("querry from OrgDesigVo" + QryfrOrgDesigVo);
        RowQualifier rowQualif = new RowQualifier(hcmOrgDesigVo);
        rowQualif.setWhereClause(QryfrOrgDesigVo);
        Row newRw[] = hcmOrgDesigVo.getFilteredRows(rowQualif);
        System.out.println(newRw.length);
        if (newRw.length > 0) {
            result = "true";
        } else {
            result = "false";
        }
        return result;
    }

    public String getDesigUsageInEmpPrf() {

        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String result = "false";
        ViewObjectImpl hcmDesigVo = this.getDesignation();
        ViewObjectImpl OrgDesigVo = this.getOrgDesignation1();
        String orgId = (String) OrgDesigVo.getCurrentRow().getAttribute("OrgId");
        if (orgId != null && orgId != "") {
            ViewObjectImpl OrgHcmEmpPrfVo = this.getOrgHcmEmpPrf();
            OrgHcmEmpPrfVo.executeQuery();
            String DeptId = (String) hcmDesigVo.getCurrentRow().getAttribute("DeptId");
            String DesigId = (String) hcmDesigVo.getCurrentRow().getAttribute("DesgId");
            String QryfrOrgHcmEmpPrf =
                "EmpDesgId='" + DesigId + "' and " + "CldId='" + cldId + "' and " + "SlocId=" + slocId + " and " +
                "HoOrgId='" + hoOrgId + "' and " + "EmpDeptId='" + DeptId + "' and " + "OrgId='" + orgId + "'";
            System.out.println("querry from OrgDesigVo" + QryfrOrgHcmEmpPrf);
            RowQualifier rowQualif = new RowQualifier(OrgHcmEmpPrfVo);
            rowQualif.setWhereClause(QryfrOrgHcmEmpPrf);
            Row newRw[] = OrgHcmEmpPrfVo.getFilteredRows(rowQualif);
            System.out.println(newRw.length);
            if (newRw.length > 0) {
                result = "true";
            } else {
                result = "false";
            }
        }

        return result;
    }

    /**
     * Container's getter for LovAppDepart1.
     * @return LovAppDepart1
     */
    public ViewObjectImpl getLovAppDepart1() {
        return (ViewObjectImpl) findViewObject("LovAppDepart1");
    }


    public String chkStructValidStrtdt(Timestamp strtDt) {

        Timestamp deptStrtDt = (Timestamp) this.getDepartments().getCurrentRow().getAttribute("ValidStrtDt");
        Timestamp desgNmStrtDt = null;
        Timestamp rptDesgStrtDt = null;
        if (this.getDesignation().getCurrentRow().getAttribute("DesgId") != null) {
            this.getLovDesignationNm().setNamedWhereClauseParam("bindCld_Id",
                                                                this.getDepartments().getCurrentRow().getAttribute("CldId"));
            this.getLovDesignationNm().setNamedWhereClauseParam("bindHoOrgId",
                                                                this.getDepartments().getCurrentRow().getAttribute("HoOrgId"));
            this.getLovDesignationNm().setNamedWhereClauseParam("bindOrgId",
                                                                this.getDepartments().getCurrentRow().getAttribute("HoOrgId"));
            this.getLovDesignationNm().setNamedWhereClauseParam("bindSloc_Id",
                                                                this.getDepartments().getCurrentRow().getAttribute("SlocId"));
            this.getLovDesignationNm().executeQuery();
            Row[] fr =
                this.getLovDesignationNm().getFilteredRows("ParamId",
                                                           this.getDesignation().getCurrentRow().getAttribute("DesgId"));
            if (fr.length > 0)
                desgNmStrtDt = (Timestamp) fr[0].getAttribute("ParamStartDt");
        }

        if (this.getDesignation().getCurrentRow().getAttribute("RptgDesgId") != null) {
            this.getLovReportingDesig().setNamedWhereClauseParam("bindCld_Id",
                                                                 this.getDepartments().getCurrentRow().getAttribute("CldId"));
            this.getLovReportingDesig().setNamedWhereClauseParam("bindHoOrgId",
                                                                 this.getDepartments().getCurrentRow().getAttribute("HoOrgId"));
            this.getLovReportingDesig().setNamedWhereClauseParam("bindOrgId",
                                                                 this.getDepartments().getCurrentRow().getAttribute("HoOrgId"));
            this.getLovReportingDesig().setNamedWhereClauseParam("bindSloc_Id",
                                                                 this.getDepartments().getCurrentRow().getAttribute("SlocId"));
            //this.getLovReportingDesig().setNamedWhereClauseParam("paramIdBindVar",
            //this.getDesignation().getCurrentRow().getAttribute("DesgId"));
            this.getLovReportingDesig().executeQuery();
            Row[] fr =
                this.getLovReportingDesig().getFilteredRows("ParamId",
                                                            this.getDesignation().getCurrentRow().getAttribute("RptgDesgId"));
            System.out.println("No. of Filtered Rows=" + fr.length);
            if (fr.length > 0)
                rptDesgStrtDt = (Timestamp) fr[0].getAttribute("ParamStartDt");
        }

        if (deptStrtDt != null && desgNmStrtDt != null && rptDesgStrtDt != null) {
            //  Timestamp paramStrtDt = null;
            java.sql.Date dt1 = null;
            java.sql.Date dt2 = null;
            java.sql.Date dt3 = null;
            java.sql.Date maxDt = null;

            try {
                dt1 = deptStrtDt.dateValue();
                dt2 = desgNmStrtDt.dateValue();
                dt3 = rptDesgStrtDt.dateValue();
            } catch (SQLException e) {
                System.out.println(e.getStackTrace());
            }

            if (dt1.compareTo(dt2) > 0)
                maxDt = dt1;
            else
                maxDt = dt2;

            if (maxDt.compareTo(dt3) > 0) {
            } else
                maxDt = dt3;

            System.out.println("Maximum Date = " + maxDt);
            if (strtDt != null && strtDt.toString().length() > 0) {
                java.sql.Date strt = null;
                java.sql.Date end = null;
                if (maxDt != null) {
                    try {
                        strt = maxDt;
                        end = strtDt.dateValue();
                    } catch (SQLException e) {
                        System.out.println(e.getStackTrace());
                    }
                    if (strt.compareTo(end) > 0) {
                        if (strt.toString().equals(end.toString())) {
                        } else {
                            return "N";
                        }
                    }
                }
            }
        }
        return "Y";
    }


    /**
     * Container's getter for LovDesignationNm1.
     * @return LovDesignationNm1
     */
    public ViewObjectImpl getLovDesignationNm() {
        return (ViewObjectImpl) findViewObject("LovDesignationNm");
    }

    /**
     * Container's getter for LovReportingDesig1.
     * @return LovReportingDesig1
     */
    public ViewObjectImpl getLovReportingDesig() {
        return (ViewObjectImpl) findViewObject("LovReportingDesig");
    }

    /**
     * Container's getter for OrgHcmSetup1.
     * @return OrgHcmSetup1
     */
    public ViewObjectImpl getOrgHcmSetup() {
        return (ViewObjectImpl) findViewObject("OrgHcmSetup");
    }

    /**
     * Container's getter for AppDept1.
     * @return AppDept1
     */
    public ViewObjectImpl getAppDept() {
        return (ViewObjectImpl) findViewObject("AppDept");
    }


    public void executeCurrentRowLov() {
        if (this.getDesignation().getCurrentRow() != null) {
            System.out.println("Trans mode in amimpl=" +
                               this.getDesignation().getCurrentRow().getAttribute("TransMode"));
            DesignationVORowImpl impl = (DesignationVORowImpl) this.getDesignation().getCurrentRow();
            impl.getLovDesignationNmVO1().executeQuery();
            impl.getLovReportingDesigVO1().executeQuery();
        }
        System.out.println("exiting current row lov in amimpl");
    }

    public void chkDesigEndDt() {
        Row crntRwOfDesigStruct = this.getDesignation().getCurrentRow();
        ViewObjectImpl orgDesigVo = this.getOrgDesignation1();
        if (crntRwOfDesigStruct != null) {
            DesignationVORowImpl rowImpl = (DesignationVORowImpl) crntRwOfDesigStruct;
            Timestamp dt = rowImpl.getValidEndDt();
            if (dt != null) {
                orgDesigVo.getCurrentRow().setAttribute("ValidEndDt", dt);
            }
        }
    }


    /*  public String chkActvDesgNm (String desgId)
    {
            String actv ="N";
            this.getLovDesignationNm().setNamedWhereClauseParam("bindCld_Id", this.getDesignation().getCurrentRow().getAttribute("CldId"));
            this.getLovDesignationNm().setNamedWhereClauseParam("bindHoOrgId",this.getDesignation().getCurrentRow().getAttribute("HoOrgId"));
            this.getLovDesignationNm().setNamedWhereClauseParam("bindOrgId", this.getDesignation().getCurrentRow().getAttribute("HoOrgId"));
            this.getLovDesignationNm().setNamedWhereClauseParam("bindSloc_Id",this.getDesignation().getCurrentRow().getAttribute("SlocId"));
            this.getLovDesignationNm().executeQuery();
            Row[] fr = this.getLovDesignationNm().getFilteredRows("ParamId",desgId);
            if(fr.length > 0)
            actv = (String) fr[0].getAttribute("ActvFlg");
            if(actv != null && actv.toString().equals("Y"))
            return "Y";
            else
            return "N";
        } */

    /*  public String chkActvRptDesgNm (String rptDesgId)
    {
            String actv ="N";
            this.getLovReportingDesig().setNamedWhereClauseParam("bindCld_Id", this.getDesignation().getCurrentRow().getAttribute("CldId"));
            this.getLovReportingDesig().setNamedWhereClauseParam("bindHoOrgId",this.getDesignation().getCurrentRow().getAttribute("HoOrgId"));
            this.getLovReportingDesig().setNamedWhereClauseParam("bindOrgId", this.getDesignation().getCurrentRow().getAttribute("HoOrgId"));
            this.getLovReportingDesig().setNamedWhereClauseParam("bindSloc_Id",this.getDesignation().getCurrentRow().getAttribute("SlocId"));
            this.getLovReportingDesig().setNamedWhereClauseParam("paramIdBindVar",this.getDesignation().getCurrentRow().getAttribute("SlocId"));
            this.getLovReportingDesig().executeQuery();
            Row[] fr = this.getLovReportingDesig().getFilteredRows("ParamId",desgId);
            if(fr.length > 0)
            actv = (String) fr[0].getAttribute("ActvFlg");
            if(actv != null && actv.toString().equals("Y"))
            return "Y";
            else
            return "N";
        } */
    public String chkIsBlnkReptgAvl() {
        RowQualifier rQalif = null;
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        ViewObjectImpl desigFrChk = this.getDesignationFrChk();
        ViewObjectImpl desig = this.getDesignation();
        desigFrChk.executeQuery();
        String DocId = (String) desig.getCurrentRow().getAttribute("DocId");
        String DesigId = (String) desig.getCurrentRow().getAttribute("DesgId");
        String reptgDesigId = (String) desig.getCurrentRow().getAttribute("RptgDesgId");
        if (DesigId != null && DesigId != "") {
            if (reptgDesigId != null && reptgDesigId.toString().length() > 0) {
                if (DesigId.equals(reptgDesigId)) {
                    return "Z";
                }

                else {
                    rQalif = new RowQualifier(desigFrChk);
                    String querry =
                        "CldId = '" + cldId + "' and SlocId = " + slocId + " and " + "HoOrgId = '" + hoOrgId +
                        "' and " + "DesgId = '" + reptgDesigId + "' and RptgDesgId = '" + DesigId + "'";
                    System.out.println("querry = " + querry);
                    rQalif.setWhereClause(querry);
                    Row rw[] = desigFrChk.getFilteredRows(rQalif);
                    if (rw.length > 0) {
                        for (Row r : rw) {
                            if (DocId != null)
                                if (!r.getAttribute("DocId").toString().equals(DocId)) {
                                    return "X";
                                }
                        }

                    }
                    return "N";
                }

            }
            rQalif = new RowQualifier(desigFrChk);
            String querry =
                "CldId='" + cldId + "' and " + "SlocId=" + slocId + " and " + "HoOrgId='" + hoOrgId + "' and " +
                "RptgDesgId is null";
            rQalif.setWhereClause(querry);
            Row rw[] = desigFrChk.getFilteredRows(rQalif);
            if (rw.length > 0) {
                for (Row r : rw) {
                    if (!r.getAttribute("DocId").toString().equals(desig.getCurrentRow().getAttribute("DocId").toString())) {
                        return "Y";
                    } else {

                    }
                }
            }
        }
        return "N";
    }

    public String getDeptName() {
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        ViewObjectImpl desigFrChk = this.getDesignationFrChk();
        ViewObjectImpl desig = this.getDesignation();
        String DocId = (String) desig.getCurrentRow().getAttribute("DocId");
        desigFrChk.executeQuery();
        String DesigId = (String) desig.getCurrentRow().getAttribute("DesgId");
        String reptgDesigId = (String) desig.getCurrentRow().getAttribute("RptgDesgId");
        RowQualifier rQalif = new RowQualifier(desig);
        String querry =
            "CldId = '" + cldId + "' and SlocId = " + slocId + " and " + "HoOrgId = '" + hoOrgId + "' and " +
            "DesgId = '" + reptgDesigId + "' and RptgDesgId = '" + DesigId + "'";
        System.out.println("querry = " + querry);
        rQalif.setWhereClause(querry);
        Row rw[] = desigFrChk.getFilteredRows(rQalif);
        if (rw.length > 0) {
            for (Row r : rw) {
                if (DocId != null)
                    if (!r.getAttribute("DocId").toString().equals(DocId)) {
                        String deptId = (String) r.getAttribute("DeptId");
                        rQalif = new RowQualifier(this.getLovAppDepart1());
                        querry = "DeptId = '" + deptId + "'";
                        rQalif.setWhereClause(querry);
                        rw = this.getLovAppDepart1().getFilteredRows(rQalif);
                        if (rw.length > 0) {
                            String deptNm = (String) rw[0].getAttribute("DeptNm");
                            return deptNm;
                        }
                    }

            }
        }
        return "N";
    }

    public String chkNoOfPositn(Integer noOfPos) {
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        ViewObjectImpl hcmDesigVo = this.getDesignation();
        ViewObjectImpl OrgDesigVo = this.getOrgDesignation1();
        String orgId = (String) OrgDesigVo.getCurrentRow().getAttribute("OrgId");
        if (orgId != null && orgId != "") {
            ViewObjectImpl OrgHcmEmpPrfVo = this.getOrgHcmEmpPrf();
            OrgHcmEmpPrfVo.executeQuery();
            String DeptId = (String) hcmDesigVo.getCurrentRow().getAttribute("DeptId");
            String DesigId = (String) hcmDesigVo.getCurrentRow().getAttribute("DesgId");
            String QryfrOrgHcmEmpPrf =
                "EmpDesgId='" + DesigId + "' and " + "CldId='" + cldId + "' and " + "SlocId=" + slocId + " and " +
                "HoOrgId='" + hoOrgId + "' and " + "EmpDeptId='" + DeptId + "' and " + "OrgId='" + orgId + "'";
            System.out.println("querry from OrgDesigVo" + QryfrOrgHcmEmpPrf);
            RowQualifier rowQualif = new RowQualifier(OrgHcmEmpPrfVo);
            rowQualif.setWhereClause(QryfrOrgHcmEmpPrf);
            Row newRw[] = OrgHcmEmpPrfVo.getFilteredRows(rowQualif); //WrkStat
            System.out.println(newRw.length);
            if (newRw.length > 0) {

                int totalemp[] = getResignNoOfEmp(newRw);
                int activeEmp = totalemp[0] - totalemp[2]; // active employe = working+OnHold-resigned
                System.out.println("Total No. of active employee (Working + On Hold) = " +
                                   activeEmp); // Total employee creted
                System.out.println("No. of employee creted with this designation = " +
                                   totalemp[0]); // Total employee creted
                System.out.println("No. of employee status is working = " + totalemp[1]); // status is working
                System.out.println("No. of employee status is resigned = " + totalemp[2]); //status is resigned
                System.out.println("No. of employee status is on Hold = " + totalemp[3]); //status is resigned
                if (noOfPos > totalemp[0]) {

                } else if (noOfPos < totalemp[0]) {
                    if (noOfPos >= activeEmp) {

                    } else {
                        return "Y";
                    }
                }


            }
        }

        return "N";
    }

    public int[] getResignNoOfEmp(Row newRw[]) {
        int resignEmp = 0;
        int workingEmp = 0;
        int onHoldEmpl = 0;
        int totalEmpCreted = 0;
        if (newRw.length > 0) {
            totalEmpCreted = newRw.length;
            for (int i = 0; i < newRw.length; i++) {
                if (newRw[i].getAttribute("WrkStat").toString().equals("31")) //31 RESIGNED
                {
                    resignEmp = ++resignEmp;
                }
                if (newRw[i].getAttribute("WrkStat").toString().equals("32")) //,32 WORKING
                {
                    workingEmp = ++workingEmp;
                }
                if (newRw[i].getAttribute("WrkStat").toString().equals("33")) //30 ON HOLD
                {
                    onHoldEmpl = ++onHoldEmpl;
                }
            }
        }
        int[] totalemp = { totalEmpCreted, workingEmp, resignEmp, onHoldEmpl };
        return totalemp;
    }

    //    public String chkReportingDesg()
    //    {
    //        System.out.println("2.....current row docid=");
    //        if (this.getDesignation().getEstimatedRowCount() > 1)
    //        {
    //            System.out.println(".......3");
    //            if (this.getDesignation().getCurrentRow().getAttribute("RptgDesgId") != null &&
    //                this.getDesignation().getCurrentRow().getAttribute("RptgDesgId").toString().length() > 0)
    //            {
    //                System.out.println(".........4");
    //            }
    //            else
    //            {
    //                Row[] fr = this.getDesignation().getFilteredRows("RptgDesgId", null);
    //                System.out.println("null rptdesg Row count =" + fr.length);
    //                for (Row r : fr)
    //                {
    //                    System.out.println("docId for null=" + r.getAttribute("DocId"));
    //                    if (r.getAttribute("DocId").toString().equals(this.getDesignation().getCurrentRow().getAttribute("DocId").toString()))
    //                    {
    //                    }
    //                    else
    //                        return "N";
    //                }
    //            }
    //        }
    //        return "Y";
    //    }

    /**
     * Container's getter for OrgHcmEmpPrf1.
     * @return OrgHcmEmpPrf1
     */
    public ViewObjectImpl getOrgHcmEmpPrf() {
        return (ViewObjectImpl) findViewObject("OrgHcmEmpPrf");
    }

    /**
     * Container's getter for DesignationFrChk1.
     * @return DesignationFrChk1
     */
    public ViewObjectImpl getDesignationFrChk() {
        return (ViewObjectImpl) findViewObject("DesignationFrChk");
    }

    public String CheckLegacyCodeValidator(String LegacyCode1) {
        System.out.println("LegacyCode1==" + LegacyCode1);
        ViewObjectImpl ln = getDesignation();
        Row currentRow = ln.getCurrentRow();

        RowSetIterator rsi = ln.createRowSetIterator(null);
        while (rsi.hasNext()) {
            Row next = rsi.next();
            if (next != currentRow) {
                if (next.getAttribute("LegacyCode") != null) {
                    if (next.getAttribute("LegacyCode").toString().equalsIgnoreCase(LegacyCode1)) {
                        return "Duplicate Entry!";
                    }
                }
            }

        }

        return "Y";
    }

    /**
     * Container's getter for HcmDesgReffDtl1.
     * @return HcmDesgReffDtl1
     */
    public ViewObjectImpl getHcmDesgReffDtl1() {
        return (ViewObjectImpl) findViewObject("HcmDesgReffDtl1");
    }

    /**
     * Container's getter for HcmDesigToOrgDesigReffDtl1.
     * @return HcmDesigToOrgDesigReffDtl1
     */
    public ViewLinkImpl getHcmDesigToOrgDesigReffDtl1() {
        return (ViewLinkImpl) findViewLink("HcmDesigToOrgDesigReffDtl1");
    }

    /**
     * Container's getter for OrgHcmPrf1.
     * @return OrgHcmPrf1
     */
    public ViewObjectImpl getOrgHcmPrf1() {
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        ViewObjectImpl vo = (ViewObjectImpl) findViewObject("OrgHcmPrf1");
        vo.setNamedWhereClauseParam("BINDCLD_ID", cldId);
        vo.setNamedWhereClauseParam("BINDORG_ID", orgId);
        vo.setNamedWhereClauseParam("BINDSLOC_ID", slocId);
        vo.executeQuery();
        return vo;
        //return (ViewObjectImpl) findViewObject("OrgHcmPrf1");
    }

    public String checkValidaterMinWorkExper(String workexpr) {
        ViewObjectImpl ln = getHcmDesgReffDtl1();
        Row currentRow = ln.getCurrentRow();
        RowSetIterator rsi = ln.createRowSetIterator(null);
        while (rsi.hasNext()) {
            Row next = rsi.next();
            if (next != currentRow) {
                if (next.getAttribute("MinWorkExp") != null) {
                    if (next.getAttribute("MinWorkExp").toString().equalsIgnoreCase(workexpr)) {
                        return "Duplicate exits";
                    }
                    }
                }
            }
        return "Y";
    }
    public String checkValidaterRefamt(String Refamtount) {
        ViewObjectImpl ln = getHcmDesgReffDtl1();
        Row currentRow = ln.getCurrentRow();
        RowSetIterator rsi = ln.createRowSetIterator(null);
        while (rsi.hasNext()) {
            Row next = rsi.next();
            if (next != currentRow) {
                if (next.getAttribute("RefAmt") != null) {
                    if (next.getAttribute("RefAmt").toString().equalsIgnoreCase(Refamtount)) {
                        return "Duplicate exits";
                    }
                    }
                }
            }
        return "Y";
    }
}


