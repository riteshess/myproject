package hcmtimecalendarsetupapp.model.module;

import adf.utils.ebiz.EbizParams;

import adf.utils.model.ADFModelUtils;

import hcmtimecalendarsetupapp.model.module.common.HcmTimeCalendarSetupAppAM;

import hcmtimecalendarsetupapp.model.views.HolidayVORowImpl;

import hcmtimecalendarsetupapp.model.views.OrgVOImpl;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.SQLException;

import java.sql.Types;

import java.util.Calendar;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.context.FacesContext;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Sep 10 16:13:50 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class HcmTimeCalendarSetupAppAMImpl extends ApplicationModuleImpl implements HcmTimeCalendarSetupAppAM {
    /**
     * This is the default constructor (do not remove).
     */
    public HcmTimeCalendarSetupAppAMImpl() {
    }

    /**
     * Container's getter for Holiday1.
     * @return Holiday1
     */
    public ViewObjectImpl getHoliday1() {
        return (ViewObjectImpl) findViewObject("Holiday1");
    }

    /**
     * Container's getter for Search1.
     * @return Search1
     */
    public ViewObjectImpl getSearch1() {
        return (ViewObjectImpl) findViewObject("Search1");
    }

    public Object resolvEl(String data) {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        ELContext elContext = facesContext.getELContext();
        ExpressionFactory expressionFactory = facesContext.getApplication().getExpressionFactory();
        ValueExpression exp = expressionFactory.createValueExpression(elContext, data, Object.class);
        return exp.getValue(elContext);
    }

    /***  Setting Global Parameter Values */

    public void SetHoliDayBindVar() {
        String Cld = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String hoOrg = EbizParams.GLBL_HO_ORG_ID();

        ViewObjectImpl holiday1 = this.getHoliday1();
        holiday1.setNamedWhereClauseParam("BindCldId", Cld);
        holiday1.setNamedWhereClauseParam("BindHoOrgId", hoOrg);
        holiday1.setNamedWhereClauseParam("BindSlocId", slocId);
        holiday1.executeQuery();
    }

    /*** To Search Holiday          */

    public void searchHoliday() {
        ViewObjectImpl srch = this.getSearch1();
        ViewObjectImpl holiday = this.getHoliday1();
        Row currentRow = srch.getCurrentRow();
        if (currentRow.getAttribute("HolidayDesc") != null) {
            holiday.setNamedWhereClauseParam("BindHolidayNm", currentRow.getAttribute("HolidayDesc"));
        } else {
            holiday.setNamedWhereClauseParam("BindHolidayNm", null);
        }

        if (currentRow.getAttribute("HolidayType") != null) {
            holiday.setNamedWhereClauseParam("BindHolidayType", currentRow.getAttribute("HolidayType"));
        } else {
            holiday.setNamedWhereClauseParam("BindHolidayType", null);
        }

        if (currentRow.getAttribute("RecurrPattern") != null) {
            holiday.setNamedWhereClauseParam("BindHolRecur", currentRow.getAttribute("RecurrPattern"));
        } else {
            holiday.setNamedWhereClauseParam("BindHolRecur", null);
        }

        if (currentRow.getAttribute("Year") != null) {
            holiday.setNamedWhereClauseParam("BindYear", currentRow.getAttribute("Year"));
        } else {
            holiday.setNamedWhereClauseParam("BindYear", null);
        }

        if (currentRow.getAttribute("HolidayDate") != null) {
            holiday.setNamedWhereClauseParam("BindRanHolDt", currentRow.getAttribute("HolidayDate"));
        } else {
            holiday.setNamedWhereClauseParam("BindRanHolDt", null);
        }
        holiday.executeQuery();
    }

    /** To Reset Search Panel*/
    public void srchReset() {
        ViewObjectImpl holiday = this.getHoliday1();
        holiday.setNamedWhereClauseParam("BindRanHolDt", null);
        holiday.setNamedWhereClauseParam("BindYear", null);
        holiday.setNamedWhereClauseParam("BindHolRecur", null);
        holiday.setNamedWhereClauseParam("BindHolidayType", null);
        holiday.setNamedWhereClauseParam("BindHolidayNm", null);
        holiday.executeQuery();
        this.getSearch1().executeQuery();
    }

    /** Duplicate Holiday Name Validator */
    public String duplicateHolidayNameValid(String HoliNm) {
        ViewObjectImpl holiday = this.getHoliday1();
        String cld = holiday.getCurrentRow().getAttribute("CldId").toString();
        String hoOrg = holiday.getCurrentRow().getAttribute("HoOrgId").toString();
        //Object orgId = holiday.getCurrentRow().getAttribute("OrgId");
        Object slocId = holiday.getCurrentRow().getAttribute("SlocId");
        Object holType = holiday.getCurrentRow().getAttribute("HolType");
        RowQualifier rq = new RowQualifier(holiday);
        rq.setWhereClause("HolType=" + holType + " AND HoOrgId='" + hoOrg + "' AND upper(HolDesc)=upper('" + HoliNm +
                          "') AND CldId='" + cld + "' AND SlocId=" + slocId);
        Row[] filteredRows = holiday.getFilteredRows(rq);
        if (filteredRows.length > 0) {
            if (filteredRows.length == 1 && filteredRows[0] != holiday.getCurrentRow())
                return "Y";
            else if (filteredRows.length > 1)
                return "Y";
        }
        return "N";
    }

    /**To Validate random holiday date exists in the respected year or not*/
    public String randomHolDateInYearValid(Timestamp randomHolDt, Integer year) {
        //  String chk = null;
        ViewObjectImpl holiday = this.getHoliday1();
        if (holiday.getCurrentRow() != null) {
            Row currentRow = holiday.getCurrentRow();
            if (randomHolDt != null && year != null && year.toString().length() > 0) {


                Integer randomYear = null;
                try {
                    Calendar cl = Calendar.getInstance();
                    cl.setTime(randomHolDt.dateValue());
                    //randomYear = cl.YEAR;
                    randomYear = randomHolDt.dateValue().getYear() + 1900;
                } catch (SQLException e) {
                    System.out.println("Error in cast");
                }
                if (randomYear.toString().equalsIgnoreCase(year.toString())) {
                    return "Y";
                } else
                    return "N";
            }
        }
        return "Y";
    }

    /** Function Call To Generate Holiday Id     */
    public void genHolidayId() {
        System.out.println("inside generating hol Id");
        Row currentRow = this.getHoliday1().getCurrentRow();
        String cld = currentRow.getAttribute("CldId").toString();
        Integer sloc = Integer.parseInt(currentRow.getAttribute("SlocId").toString());
        String hoOrg = currentRow.getAttribute("HoOrgId").toString();
        String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();

        /*  String rslt =
            (String) ADFModelUtils.callFunction((HcmTimeCalendarSetupAppAMImpl) this.getApplicationModule(),
                                                new StringBuilder("FN_HCM_GET_PRF_ID(?,?,?,?,?,?,?)"), new Object[] {
                                                sloc, cld, hoOrg, orgId, 28506, 0, "HCM$HOL$CAL"
        }, Types.VARCHAR); */
        String rslt = (String) callStoredFunction(Types.VARCHAR, "FN_HCM_GET_PRF_ID(?,?,?,?,?,?,?)", new Object[] {
                                                  sloc, cld, hoOrg, orgId, 28506, 0, "HCM$HOL$CAL"
        });
        System.out.println("holiday id generated is---->" + rslt);
        if (rslt != null && rslt.length() > 0) {
            System.out.println("result not null groing to set holiId");
            currentRow.setAttribute("HolId", rslt);
        }
        this.getHoliday1().executeQuery();

    }

    public void refrechRefHoliday() {
        if (getHoliday1().getCurrentRow() != null) {
            HolidayVORowImpl currentRow = (HolidayVORowImpl) getHoliday1().getCurrentRow();
            currentRow.getLovRefHolidayNmVO1().executeQuery();
        }

    }

    public void linkToOrgloc() {

        ViewObjectImpl holiday1 = this.getOrgLocWiseHoliday1();
        ViewObjectImpl dumyy = this.getDumyyForLink1();
        if (dumyy.getCurrentRow().getAttribute("OrgId") != null &&
            dumyy.getCurrentRow().getAttribute("LocId") != null) {
            Row createRow = holiday1.createRow();
            createRow.setAttribute("OrgId", dumyy.getCurrentRow().getAttribute("OrgId"));
            createRow.setAttribute("LocId", dumyy.getCurrentRow().getAttribute("LocId"));
            createRow.setAttribute("HolId", this.getHoliday1().getCurrentRow().getAttribute("HolId"));
            holiday1.insertRow(createRow);
            holiday1.executeQuery();

            this.getOrg1().executeQuery();
            this.getDumyyForLink1().executeQuery();

            this.getDBTransaction().postChanges();
            this.getOrg1().executeQuery();
            this.getDumyyForLink1().executeQuery();
        }
    }


    public BigDecimal replicateAll() {
        Row currentRow = this.getHoliday1().getCurrentRow();
        String cld = currentRow.getAttribute("CldId").toString();
        Integer sloc = Integer.parseInt(currentRow.getAttribute("SlocId").toString());
        Integer usrId = Integer.parseInt(currentRow.getAttribute("UsrIdCreate").toString());
        String hoOrg = currentRow.getAttribute("HoOrgId").toString();
        String holiId = currentRow.getAttribute("HolId").toString();

        BigDecimal rslt =
            (BigDecimal) ADFModelUtils.callFunction(this, new StringBuilder("FN_HCN_RPCT_ORG_HOL(?,?,?,?,?)"), new Object[] {
                                                    cld, sloc, hoOrg, holiId, usrId
        }, Types.NUMERIC);

        /*  BigDecimal rslt = (BigDecimal) callStoredFunction(Types.NUMERIC, "FN_HCN_RPCT_ORG_HOL(?,?,?,?,?)", new Object[]
        {
            cld, sloc, hoOrg, holiId, usrId
        }); */
        this.getDBTransaction().postChanges();
        this.getOrg1().executeQuery();
        return rslt;
    }

    public void refreshTreeTbl() {
        this.getOrgLocWiseHoliday1().executeQuery();
        this.getOrg1().executeQuery();
        this.getHoliday1().executeQuery();
    }

    public String orgLocValidator() {
        ViewObjectImpl orgholiday = this.getOrgLocWiseHoliday2();
        String cld = EbizParams.GLBL_APP_CLD_ID();
        Integer sloc = EbizParams.GLBL_APP_SERV_LOC();
        String hoOrg = EbizParams.GLBL_HO_ORG_ID();


        Object holid = this.getHoliday1().getCurrentRow().getAttribute("HolId");
        Object org = this.getDumyyForLink1().getCurrentRow().getAttribute("OrgId");
        Object loc = this.getDumyyForLink1().getCurrentRow().getAttribute("LocId");

        RowQualifier rq = new RowQualifier(orgholiday);
        rq.setWhereClause("CldId='" + cld + "' AND HolId='" + holid + "' AND HoOrgId='" + hoOrg + "' AND OrgId='" +
                          org + "'AND LocId='" + loc + "' AND SlocId=" + sloc);
        Row[] filteredRows = orgholiday.getFilteredRows(rq);
        if (filteredRows.length == 0) {
            return "N";
        }
        return "Y";
    }

    /**
     * Container's getter for LovRecurPattern1.
     * @return LovRecurPattern1
     */
    public ViewObjectImpl getLovRecurPattern1() {
        return (ViewObjectImpl) findViewObject("LovRecurPattern1");
    }

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            // 1. Create a JDBC CallabledStatement
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            // 2. Register the first bind variable for the return value
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                // 3. Loop over values for the bind variables passed in, if any
                for (int z = 0; z < bindVars.length; z++) {
                    // 4. Set the value of user-supplied bind vars in the stmt
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            // 5. Set the value of user-supplied bind vars in the stmt
            st.executeUpdate();
            // 6. Return the value of the first bind variable
            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    // 7. Close the statement
                    st.close();
                } catch (SQLException e) {
                }
            }
        }
    }

    /**
     * Container's getter for LovRefHolidayNm1.
     * @return LovRefHolidayNm1
     */
    public ViewObjectImpl getLovRefHolidayNm1() {
        return (ViewObjectImpl) findViewObject("LovRefHolidayNm1");
    }


    /**
     * Container's getter for DumyyForLink1.
     * @return DumyyForLink1
     */
    public ViewObjectImpl getDumyyForLink1() {
        return (ViewObjectImpl) findViewObject("DumyyForLink1");
    }

    /**
     * Container's getter for Org1.
     * @return Org1
     */
    public OrgVOImpl getOrg1() {
        return (OrgVOImpl) findViewObject("Org1");
    }

    /**
     * Container's getter for HolCalToORgVL1.
     * @return HolCalToORgVL1
     */
    public ViewLinkImpl getHolCalToORgVL1() {
        return (ViewLinkImpl) findViewLink("HolCalToORgVL1");
    }


    /**
     * Container's getter for OrgLocWiseHoliday1.
     * @return OrgLocWiseHoliday1
     */
    public ViewObjectImpl getOrgLocWiseHoliday1() {
        return (ViewObjectImpl) findViewObject("OrgLocWiseHoliday1");
    }

    /**
     * Container's getter for OrgTOLocationVL1.
     * @return OrgTOLocationVL1
     */
    public ViewLinkImpl getOrgTOLocationVL1() {
        return (ViewLinkImpl) findViewLink("OrgTOLocationVL1");
    }

    /**
     * Container's getter for OrgLocWiseHoliday2.
     * @return OrgLocWiseHoliday2
     */
    public ViewObjectImpl getOrgLocWiseHoliday2() {
        return (ViewObjectImpl) findViewObject("OrgLocWiseHoliday2");
    }

    /**
     * Container's getter for OrgDocVO1.
     * @return OrgDocVO1
     */
    public ViewObjectImpl getOrgDocVO1() {
        return (ViewObjectImpl) findViewObject("OrgDocVO1");
    }

    /**
     * Container's getter for OrgDocTypeVO1.
     * @return OrgDocTypeVO1
     */
    public ViewObjectImpl getOrgDocTypeVO1() {
        return (ViewObjectImpl) findViewObject("OrgDocTypeVO1");
    }

    public boolean chkDocumentInOrg() {
        Object Org = EbizParams.GLBL_APP_USR_ORG();
        String cld = EbizParams.GLBL_APP_CLD_ID();
        Integer sloc = EbizParams.GLBL_APP_SERV_LOC();
        ViewObjectImpl docVO1 = this.getOrgDocVO1();
        docVO1.setNamedWhereClauseParam("Org_id_bind", Org);
        docVO1.setNamedWhereClauseParam("cld_id_bind", cld);
        docVO1.setNamedWhereClauseParam("doc_id_Bind", 28506);
        docVO1.setNamedWhereClauseParam("sloc_id_bind", sloc);
        docVO1.executeQuery();
        if (docVO1.getRowCount() > 0) {
            ViewObjectImpl docTypeVO1 = this.getOrgDocTypeVO1();
            docTypeVO1.setNamedWhereClauseParam("Org_id_bind", Org);
            docTypeVO1.setNamedWhereClauseParam("TYPE_ID_BIND", 0);
            docTypeVO1.setNamedWhereClauseParam("cld_id_bind", cld);
            docTypeVO1.setNamedWhereClauseParam("doc_id_Bind", 28506);
            docTypeVO1.setNamedWhereClauseParam("sloc_id_bind", sloc);
            docTypeVO1.executeQuery();
            if (docTypeVO1.getRowCount() > 0) {
                return true;
            }
        }

        return false;
    }

}

