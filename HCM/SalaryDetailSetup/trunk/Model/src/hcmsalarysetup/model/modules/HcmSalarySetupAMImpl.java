package hcmsalarysetup.model.modules;

import adf.utils.ebiz.EbizParams;
import adf.utils.model.ADFModelUtils;


import hcmsalarysetup.model.modules.common.HcmSalarySetupAM;

import hcmsalarysetup.model.views.OrgHcmSalaryVORowImpl;

import java.sql.SQLException;
import java.sql.Types;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.RowQualifier;

import org.apache.myfaces.trinidad.context.RequestContext;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Sep 04 12:29:51 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class HcmSalarySetupAMImpl extends ApplicationModuleImpl implements HcmSalarySetupAM {
    /**
     * This is the default constructor (do not remove).
     */
    public HcmSalarySetupAMImpl() {
    }

    /**
     * Container's getter for DualSearch1.
     * @return DualSearch1
     */
    public ViewObjectImpl getDualSearch() {
        return (ViewObjectImpl) findViewObject("DualSearch");
    }

    /**
     * Container's getter for OrgHcmSalary1.
     * @return OrgHcmSalary1
     */
    public ViewObjectImpl getOrgHcmSalary() {
        return (ViewObjectImpl) findViewObject("OrgHcmSalary");
    }

    public void setbindVarOnLoad(String hoOrgId, Integer slocId, String orgId, String cldId) {
        RequestContext context = RequestContext.getCurrentInstance();
        context.getPageFlowScope().put("ADD_EDIT_MODE", "V");
        this.getOrgHcmSalary().setNamedWhereClauseParam("cldIdBindVar", cldId);
        this.getOrgHcmSalary().setNamedWhereClauseParam("slocIdBindVar", slocId);
        this.getOrgHcmSalary().setNamedWhereClauseParam("orgIdBindVar", orgId);
        this.getOrgHcmSalary().setNamedWhereClauseParam("hoOrgIdBindVar", hoOrgId);
        this.getOrgHcmSalary().executeQuery();
        this.getLovSalId().setNamedWhereClauseParam("cldIdBindVar", cldId);
        this.getLovSalId().setNamedWhereClauseParam("slocIdBindVar", slocId);
        this.getLovSalId().setNamedWhereClauseParam("orgIdBindVar", orgId);
        this.getLovSalId().setNamedWhereClauseParam("hoOrgIdBindVar", hoOrgId);
        this.getLovSalId().executeQuery();
    }


    public void executeLovSalIdVoOnCrt() {
        OrgHcmSalaryVORowImpl impl = (OrgHcmSalaryVORowImpl) getOrgHcmSalary().getCurrentRow();
        impl.getLovSalIdVO().executeQuery();
    }

    public void searchSalaryComp(String salId, Integer behav, Timestamp frmDt, Timestamp toDt, String isOthrDedChk) {
        if (isOthrDedChk != null)
            if (isOthrDedChk.equals("true"))
                isOthrDedChk = "Y";
            else if (isOthrDedChk.equals("false"))
                isOthrDedChk = "N";
            else if (isOthrDedChk.equals("X"))
                isOthrDedChk = null;
        this.getOrgHcmSalary().setNamedWhereClauseParam("salIdBindVar", salId);
        this.getOrgHcmSalary().setNamedWhereClauseParam("salBehavBindVar", behav);
        this.getOrgHcmSalary().setNamedWhereClauseParam("frmDtbindVar", frmDt);
        this.getOrgHcmSalary().setNamedWhereClauseParam("toDtBindVar", toDt);
        this.getOrgHcmSalary().setNamedWhereClauseParam("isOthrDedChk", isOthrDedChk);
        this.getOrgHcmSalary().executeQuery();
    }

    public String chkDuplicateNotation(String notation) {

        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        RowQualifier rq = new RowQualifier(this.getOrgHcmSalary());
        rq.setWhereClause("CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId + "' and OrgId='" +
                          orgId + "' and SalNotation='" + notation + "'");
        Row[] fr = this.getOrgHcmSalary().getFilteredRows(rq);
        for (Row r : fr) {
            if (!(r.equals(this.getOrgHcmSalary().getCurrentRow())))
                return "N";
        }
        return "Y";
    }

    public void setDefltValuse() {
        Row row = this.getOrgHcmSalary().getCurrentRow();
        if (row != null) {
            ViewObjectImpl vosub = this.getOrgHcmSalSub();
            Row r = vosub.createRow();
            r.setAttribute("SubSalBehav", row.getAttribute("SalBehav"));
            r.setAttribute("SubSalType", row.getAttribute("SalType"));
            vosub.insertRow(r);
            vosub.setCurrentRow(r);
        }

    }

    public String chkSubSalCompAction(String subSalId) {
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();

        RowQualifier rq = new RowQualifier(this.getOrgHcmSalSub());
        String querry =
            "CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId + "' and OrgId='" + orgId +
            "' and SubSalId='" + subSalId + "'";
        rq.setWhereClause(querry);
        Row fr[] = this.getOrgHcmSalSub().getFilteredRows(rq);
        for (Row r : fr) {
            if (!(r.equals(this.getOrgHcmSalSub().getCurrentRow())))
                return "N";
        }

        return "Y";
    }

    public String Checksalcomponentlink() {
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();

        RowQualifier rq = new RowQualifier(this.getLovhcmempsal1());
        rq.setWhereClause("CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId + "' and OrgId='" +
                          orgId + "' and SalId='" + this.getOrgHcmSalary().getCurrentRow().getAttribute("SalId") + "'");
        Row[] fr = this.getLovhcmempsal1().getFilteredRows(rq);
        if (fr.length <= 0) {
            RowQualifier rq1 = new RowQualifier(this.getLOVhcmemprefsal1());
            rq.setWhereClause("CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId +
                              "' and OrgId='" + orgId + "' and RefSalId='" +
                              this.getOrgHcmSalary().getCurrentRow().getAttribute("SalId") + "'");
            Row[] fr1 = this.getLOVhcmemprefsal1().getFilteredRows(rq);
            if (fr1.length > 0) {
                return "Y";
            }
        } else {
            return "Y";
        }
        return "N";


    }

    /**
     * Container's getter for OrgHcmSalary1.
     * @return OrgHcmSalary1
     */
    public ViewObjectImpl getOrgHcmSalary1() {
        return (ViewObjectImpl) findViewObject("OrgHcmSalary1");
    }

    /**
     * Container's getter for LovSalId1.
     * @return LovSalId1
     */
    public ViewObjectImpl getLovSalId() {
        return (ViewObjectImpl) findViewObject("LovSalId");
    }

    public void fieldValueReset() {
        this.getDualSearch().getCurrentRow().setAttribute("TransSalDesc", null);
        this.getDualSearch().getCurrentRow().setAttribute("TransSalId", null);
        this.getDualSearch().getCurrentRow().setAttribute("TransBehaviour", null);
        this.getDualSearch().getCurrentRow().setAttribute("TransValidStrtDt", null);
        this.getDualSearch().getCurrentRow().setAttribute("TransValidEndDt", null);
        this.getDualSearch().getCurrentRow().setAttribute("TransIsOthrDed", null);
        this.getDualSearch().executeQuery();

    }

    /**
     * Container's getter for LovEmpSal1.
     * @return LovEmpSal1
     */
    public ViewObjectImpl getLovEmpSal1() {
        return (ViewObjectImpl) findViewObject("LovEmpSal1");
    }

    public String chkSalIdToDel() {
        RowQualifier rqemp = new RowQualifier(this.getLovEmpSal1());
        rqemp.setWhereClause("CldId='" + this.getOrgHcmSalary().getCurrentRow().getAttribute("CldId") +
                             "' and SlocId=" + this.getOrgHcmSalary().getCurrentRow().getAttribute("SlocId") +
                             " and HoOrgId='" + this.getOrgHcmSalary().getCurrentRow().getAttribute("HoOrgId") +
                             "' and OrgId='" + this.getOrgHcmSalary().getCurrentRow().getAttribute("OrgId") +
                             "' and SalId='" + this.getOrgHcmSalary().getCurrentRow().getAttribute("SalId") + "'");
        Row[] fr = this.getLovEmpSal1().getFilteredRows(rqemp);
        if (fr.length > 0)
            return "N";

        return "Y";
    }

    public String chkValidStrtdt(Timestamp strtDt) {
        this.getLovSalId().setNamedWhereClauseParam("cldIdBindVar",
                                                    this.getOrgHcmSalary().getCurrentRow().getAttribute("CldId"));
        this.getLovSalId().setNamedWhereClauseParam("hoOrgIdBindVar",
                                                    this.getOrgHcmSalary().getCurrentRow().getAttribute("HoOrgId"));
        this.getLovSalId().setNamedWhereClauseParam("orgIdBindVar",
                                                    this.getOrgHcmSalary().getCurrentRow().getAttribute("OrgId"));
        this.getLovSalId().setNamedWhereClauseParam("slocIdBindVar",
                                                    this.getOrgHcmSalary().getCurrentRow().getAttribute("SlocId"));
        this.getLovSalId().executeQuery();
        Row[] fr =
            this.getLovSalId().getFilteredRows("ParamId", this.getOrgHcmSalary().getCurrentRow().getAttribute("SalId"));
        Timestamp salStrtDt = null;
        if (fr.length > 0) {
            salStrtDt = (Timestamp) fr[0].getAttribute("ParamStartDt");
        }

        if (strtDt != null && strtDt.toString().length() > 0) {
            java.sql.Date strt = null;
            java.sql.Date end = null;
            if (salStrtDt != null) {
                try {
                    strt = salStrtDt.dateValue();
                    end = strtDt.dateValue();
                } catch (SQLException e) {
                    System.out.println(e.getStackTrace());
                }
                if (strt.compareTo(end) > 0) {
                    if (strt.toString().equals(end.toString())) {
                    } else {
                        return "N";
                    }
                }
            }
        }
        return "Y";
    }

    public String chkEnddate(Timestamp strtDt) {
        this.getLovSalId().setNamedWhereClauseParam("cldIdBindVar",
                                                    this.getOrgHcmSalary().getCurrentRow().getAttribute("CldId"));
        this.getLovSalId().setNamedWhereClauseParam("hoOrgIdBindVar",
                                                    this.getOrgHcmSalary().getCurrentRow().getAttribute("HoOrgId"));
        this.getLovSalId().setNamedWhereClauseParam("orgIdBindVar",
                                                    this.getOrgHcmSalary().getCurrentRow().getAttribute("OrgId"));
        this.getLovSalId().setNamedWhereClauseParam("slocIdBindVar",
                                                    this.getOrgHcmSalary().getCurrentRow().getAttribute("SlocId"));
        this.getLovSalId().executeQuery();
        Row[] fr =
            this.getLovSalId().getFilteredRows("ParamId", this.getOrgHcmSalary().getCurrentRow().getAttribute("SalId"));
        Timestamp salStrtDt = null;
        if (fr.length > 0) {
            salStrtDt = (Timestamp) fr[0].getAttribute("ParamEndDt");
        }

        if (strtDt != null && strtDt.toString().length() > 0) {
            java.sql.Date strt = null;
            java.sql.Date end = null;
            if (salStrtDt != null) {
                try {
                    strt = salStrtDt.dateValue();
                    end = strtDt.dateValue();
                } catch (SQLException e) {
                    System.out.println(e.getStackTrace());
                }
                if (strt.compareTo(end) < 0) {
                    if (strt.toString().equals(end.toString())) {
                    } else {
                        return "N";
                    }
                }
            }
        }
        return "Y";
    }

    /**To Validate Duplicate Sequence No.*/
    public String chkDuplicateSeqNo(Integer seqNo) {
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        RowQualifier rq = new RowQualifier(this.getOrgHcmSalary());
        rq.setWhereClause("CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId + "' and OrgId='" +
                          orgId + "' and SeqNo=" + seqNo);
        Row[] fr = this.getOrgHcmSalary().getFilteredRows(rq);
        for (Row r : fr) {
            if (!(r.equals(this.getOrgHcmSalary().getCurrentRow())))
                return "Y";
        }
        return "N";
    }

    /**
     * Container's getter for Lovhcmempsal1.
     * @return Lovhcmempsal1
     */
    public ViewObjectImpl getLovhcmempsal1() {
        return (ViewObjectImpl) findViewObject("Lovhcmempsal1");
    }

    /**
     * Container's getter for LOVhcmemprefsal1.
     * @return LOVhcmemprefsal1
     */
    public ViewObjectImpl getLOVhcmemprefsal1() {
        return (ViewObjectImpl) findViewObject("LOVhcmemprefsal1");
    }

    public String isGlLinkined() {
        Object ob = ADFModelUtils.callFunction(this, new StringBuilder("fn_hcm_chk_org_prf(?,?,?,?)"), new Object[] {
                                               getParamCldId(), getParamSlocId(), getParamOrgId(), "GL_CODE_LNK"
        }, Types.VARCHAR);
        /* Object ob = callStoredFunction(Types.VARCHAR, "fn_hcm_chk_org_prf(?,?,?,?)", new Object[]
        {
            getParamCldId(), getParamSlocId(), getParamOrgId(), "GL_CODE_LNK"
        }); */
        if (ob != null)
            return ob.toString();
        return "N";
    }

    public String getParamCldId() {
        return EbizParams.GLBL_APP_CLD_ID();
    }

    public Integer getParamSlocId() {
        return EbizParams.GLBL_APP_SERV_LOC();
    }

    public String getParamOrgId() {
        return EbizParams.GLBL_APP_USR_ORG();
    }

    /**
     * Container's getter for OrgHcmSalSub1.
     * @return OrgHcmSalSub1
     */
    public ViewObjectImpl getOrgHcmSalSub() {
        return (ViewObjectImpl) findViewObject("OrgHcmSalSub");
    }

    /**
     * Container's getter for OrgHcmSalSubVL1.
     * @return OrgHcmSalSubVL1
     */
    public ViewLinkImpl getOrgHcmSalSubVL1() {
        return (ViewLinkImpl) findViewLink("OrgHcmSalSubVL1");
    }

    /**
     * Container's getter for LovSubSalType1.
     * @return LovSubSalType1
     */
    public ViewObjectImpl getLovSubSalType() {
        return (ViewObjectImpl) findViewObject("LovSubSalType");
    }
    
    public String validateLegacyCodeId(String legacyCodeId)     
     {
        System.out.println("legacyCodeId");
           ViewObjectImpl SalVO = getOrgHcmSalary();
           Row currentRow = SalVO.getCurrentRow();
          
               RowSetIterator rsi = SalVO.createRowSetIterator(null);
               while (rsi.hasNext()) {
                   System.out.println("while");
                   Row next = rsi.next();
                   if (next != currentRow) {
                       System.out.println("next != currentRow) ");
                       if (next.getAttribute("LegacyCode") != null) {
                           System.out.println("\"LegacyCode\") != null");
                           if (next.getAttribute("LegacyCode").toString().equalsIgnoreCase(legacyCodeId)) {
                               System.out.println("Duplicate");
                               return "Duplicate  exists";
                           }
                       }
                   }

               }
        return "Y";
    }


    /**
     * Container's getter for cheakOrgHcmPrfVO1.
     * @return cheakOrgHcmPrfVO1
     */
    public ViewObjectImpl getcheakOrgHcmPrfVO1() {
        return (ViewObjectImpl) findViewObject("cheakOrgHcmPrfVO1");
    }
}


