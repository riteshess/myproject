package hcminjuryform.model.views;

import adf.utils.ebiz.EbizParams;

import hcminjuryform.model.entities.HCMInjuryEOImpl;

import hcminjuryform.model.services.HCMInjuryFormAMImpl;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import oracle.jbo.ApplicationModule;
import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.RowSet;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Oct 01 11:17:40 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class HCMInjuryVORowImpl extends ViewRowImpl {
    public static final int ENTITY_HCMINJURYEO = 0;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CldId,
        SlocId,
        HoOrgId,
        OrgId,
        DocId,
        DocDt,
        InjTime,
        EmpDocId,
        EmpCode,
        DispDocId,
        InjType,
        SiteCordName,
        Status,
        InjDtl,
        EmpNmTrans,
        UsrIdCreate,
        UsrIdCreateDt,
        UsrIdMod,
        UsrIdModDt,
        FyId,
        HCMInjuryFromDtlVO,
        LOVActionStatus1,
        LOVInjuryTypeVO1,
        LOVEmployeeDetails1,
        LovUserNameVO1;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int DOCDT = AttributesEnum.DocDt.index();
    public static final int INJTIME = AttributesEnum.InjTime.index();
    public static final int EMPDOCID = AttributesEnum.EmpDocId.index();
    public static final int EMPCODE = AttributesEnum.EmpCode.index();
    public static final int DISPDOCID = AttributesEnum.DispDocId.index();
    public static final int INJTYPE = AttributesEnum.InjType.index();
    public static final int SITECORDNAME = AttributesEnum.SiteCordName.index();
    public static final int STATUS = AttributesEnum.Status.index();
    public static final int INJDTL = AttributesEnum.InjDtl.index();
    public static final int EMPNMTRANS = AttributesEnum.EmpNmTrans.index();
    public static final int USRIDCREATE = AttributesEnum.UsrIdCreate.index();
    public static final int USRIDCREATEDT = AttributesEnum.UsrIdCreateDt.index();
    public static final int USRIDMOD = AttributesEnum.UsrIdMod.index();
    public static final int USRIDMODDT = AttributesEnum.UsrIdModDt.index();
    public static final int FYID = AttributesEnum.FyId.index();
    public static final int HCMINJURYFROMDTLVO = AttributesEnum.HCMInjuryFromDtlVO.index();
    public static final int LOVACTIONSTATUS1 = AttributesEnum.LOVActionStatus1.index();
    public static final int LOVINJURYTYPEVO1 = AttributesEnum.LOVInjuryTypeVO1.index();
    public static final int LOVEMPLOYEEDETAILS1 = AttributesEnum.LOVEmployeeDetails1.index();
    public static final int LOVUSERNAMEVO1 = AttributesEnum.LovUserNameVO1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public HCMInjuryVORowImpl() {
    }

    /**
     * Gets HCMInjuryEO entity object.
     * @return the HCMInjuryEO
     */
    public HCMInjuryEOImpl getHCMInjuryEO() {
        return (HCMInjuryEOImpl) getEntity(ENTITY_HCMINJURYEO);
    }

    /**
     * Gets the attribute value for CLD_ID using the alias name CldId.
     * @return the CLD_ID
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as attribute value for CLD_ID using the alias name CldId.
     * @param value value to set the CLD_ID
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for SLOC_ID using the alias name SlocId.
     * @return the SLOC_ID
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for SLOC_ID using the alias name SlocId.
     * @param value value to set the SLOC_ID
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for HO_ORG_ID using the alias name HoOrgId.
     * @return the HO_ORG_ID
     */
    public String getHoOrgId() {
        return (String) getAttributeInternal(HOORGID);
    }

    /**
     * Sets <code>value</code> as attribute value for HO_ORG_ID using the alias name HoOrgId.
     * @param value value to set the HO_ORG_ID
     */
    public void setHoOrgId(String value) {
        setAttributeInternal(HOORGID, value);
    }

    /**
     * Gets the attribute value for ORG_ID using the alias name OrgId.
     * @return the ORG_ID
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as attribute value for ORG_ID using the alias name OrgId.
     * @param value value to set the ORG_ID
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for DOC_ID using the alias name DocId.
     * @return the DOC_ID
     */
    public String getDocId() {
        return (String) getAttributeInternal(DOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for DOC_ID using the alias name DocId.
     * @param value value to set the DOC_ID
     */
    public void setDocId(String value) {
        setAttributeInternal(DOCID, value);
    }

    /**
     * Gets the attribute value for DOC_DT using the alias name DocDt.
     * @return the DOC_DT
     */
    public Timestamp getDocDt() {
        return (Timestamp) getAttributeInternal(DOCDT);
    }

    /**
     * Sets <code>value</code> as attribute value for DOC_DT using the alias name DocDt.
     * @param value value to set the DOC_DT
     */
    public void setDocDt(Timestamp value) {
        setAttributeInternal(DOCDT, value);
    }

    /**
     * Gets the attribute value for INJ_TIME using the alias name InjTime.
     * @return the INJ_TIME
     */
    public String getInjTime() {
        return (String) getAttributeInternal(INJTIME);
    }

    /**
     * Sets <code>value</code> as attribute value for INJ_TIME using the alias name InjTime.
     * @param value value to set the INJ_TIME
     */
    public void setInjTime(String value) {
        setAttributeInternal(INJTIME, value);
    }

    /**
     * Gets the attribute value for EMP_DOC_ID using the alias name EmpDocId.
     * @return the EMP_DOC_ID
     */
    public String getEmpDocId() {
        return (String) getAttributeInternal(EMPDOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for EMP_DOC_ID using the alias name EmpDocId.
     * @param value value to set the EMP_DOC_ID
     */
    public void setEmpDocId(String value) {
        setAttributeInternal(EMPDOCID, value);
    }

    /**
     * Gets the attribute value for EMP_CODE using the alias name EmpCode.
     * @return the EMP_CODE
     */
    public Integer getEmpCode() {
        return (Integer) getAttributeInternal(EMPCODE);
    }

    /**
     * Sets <code>value</code> as attribute value for EMP_CODE using the alias name EmpCode.
     * @param value value to set the EMP_CODE
     */
    public String GetInjuryIdFromFun() {
       String dispIdFromFum = "0";

       try {
           dispIdFromFum = this.callStoredFunction(Types.VARCHAR, "FN_HCM_GEN_DISP_DOC_ID(?,?,?,?,?,?,?,?,?)", new Object[] {
                                                               EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_USR_ORG(), 29509,
                                                              this.getDocId(), 0, "HCM$INJURY",this.getFyId() , 0
           }).toString();

       } catch (Exception e) {
           e.printStackTrace();
           System.out.println("ERROR IN CALLING FUNCTION at EOImpl:" + e.getMessage());
       }
       System.out.println("===========" + dispIdFromFum);

       return dispIdFromFum;
    }
    public void setEmpCode(Integer value) {
       
        setAttributeInternal(EMPCODE, value);
    }

    /**
     * Gets the attribute value for DISP_DOC_ID using the alias name DispDocId.
     * @return the DISP_DOC_ID
     */
    public String getDispDocId() {
        
        return (String) getAttributeInternal(DISPDOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for DISP_DOC_ID using the alias name DispDocId.
     * @param value value to set the DISP_DOC_ID
     */
    public void setDispDocId(String value) {
        /*  if(value==null && getDocId()!=null){
            System.out.println("DispDocId is ::::: "+GetInjuryIdFromFun());
            value=GetInjuryIdFromFun();
        } */
        setAttributeInternal(DISPDOCID, value);
    }

    /**
     * Gets the attribute value for INJ_TYPE using the alias name InjType.
     * @return the INJ_TYPE
     */
    public Integer getInjType() {
        return (Integer) getAttributeInternal(INJTYPE);
    }

    /**
     * Sets <code>value</code> as attribute value for INJ_TYPE using the alias name InjType.
     * @param value value to set the INJ_TYPE
     */
    public void setInjType(Integer value) {
        
        setAttributeInternal(INJTYPE, value);
    }

    /**
     * Gets the attribute value for SITE_CORD_NAME using the alias name SiteCordName.
     * @return the SITE_CORD_NAME
     */
    public String getSiteCordName() {
        return (String) getAttributeInternal(SITECORDNAME);
    }

    /**
     * Sets <code>value</code> as attribute value for SITE_CORD_NAME using the alias name SiteCordName.
     * @param value value to set the SITE_CORD_NAME
     */
    public void setSiteCordName(String value) {
        setAttributeInternal(SITECORDNAME, value);
    }

    /**
     * Gets the attribute value for STATUS using the alias name Status.
     * @return the STATUS
     */
    public Integer getStatus() {
        return (Integer) getAttributeInternal(STATUS);
    }

    /**
     * Sets <code>value</code> as attribute value for STATUS using the alias name Status.
     * @param value value to set the STATUS
     */
    public void setStatus(Integer value) {
        setAttributeInternal(STATUS, value);
    }

    /**
     * Gets the attribute value for INJ_DTL using the alias name InjDtl.
     * @return the INJ_DTL
     */
    public String getInjDtl() {
        return (String) getAttributeInternal(INJDTL);
    }

    /**
     * Sets <code>value</code> as attribute value for INJ_DTL using the alias name InjDtl.
     * @param value value to set the INJ_DTL
     */
    public void setInjDtl(String value) {
        setAttributeInternal(INJDTL, value);
    }

    /**
     * Gets the attribute value for the calculated attribute EmpNmTrans.
     * @return the EmpNmTrans
     */
    public String getEmpNmTrans() {
        System.out.println("IN EmpTrans :::::::: ");
        String empNm=null;
        if(getAttributeInternal(EMPNMTRANS)==null ){
            System.out.println("IN EmpTrans :::::::: After If");
            HCMInjuryFormAMImpl am = (HCMInjuryFormAMImpl)getApplicationModule();
            ViewObjectImpl empIdVo = am.getLOVEmployeeDetails1();
            empIdVo.setNamedWhereClauseParam("P_CLD_ID", EbizParams.GLBL_APP_CLD_ID());
            empIdVo.setNamedWhereClauseParam("P_SLOC_ID", EbizParams.GLBL_APP_SERV_LOC());
            empIdVo.setNamedWhereClauseParam("P_HO_ORG_ID", EbizParams.GLBL_HO_ORG_ID());
            empIdVo.setNamedWhereClauseParam("P_ORG_ID", EbizParams.GLBL_APP_USR_ORG());
            empIdVo.executeQuery();
            System.out.println("IN EmpTrans :::::::: After Execute");
            System.out.println("EmpCode is ::::::::::::::: "+getEmpCode());
            Row[] filteredRows = empIdVo.getFilteredRows("EmpCode", getEmpCode());
            System.out.println("In EmpTrans :::::::: After Execute"+filteredRows.length);
            if(filteredRows.length>0){
              empNm=  filteredRows[0].getAttribute("EmpNm").toString();
              System.out.println("empNm :::: "+empNm);
            }
            return empNm;
        }
        return (String) getAttributeInternal(EMPNMTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute EmpNmTrans.
     * @param value value to set the  EmpNmTrans
     */
    public void setEmpNmTrans(String value) {
        setAttributeInternal(EMPNMTRANS, value);
    }

    /**
     * Gets the attribute value for USR_ID_CREATE using the alias name UsrIdCreate.
     * @return the USR_ID_CREATE
     */
    public Integer getUsrIdCreate() {
        return (Integer) getAttributeInternal(USRIDCREATE);
    }

    /**
     * Sets <code>value</code> as attribute value for USR_ID_CREATE using the alias name UsrIdCreate.
     * @param value value to set the USR_ID_CREATE
     */
    public void setUsrIdCreate(Integer value) {
        setAttributeInternal(USRIDCREATE, value);
    }

    /**
     * Gets the attribute value for USR_ID_CREATE_DT using the alias name UsrIdCreateDt.
     * @return the USR_ID_CREATE_DT
     */
    public Timestamp getUsrIdCreateDt() {
        return (Timestamp) getAttributeInternal(USRIDCREATEDT);
    }

    /**
     * Sets <code>value</code> as attribute value for USR_ID_CREATE_DT using the alias name UsrIdCreateDt.
     * @param value value to set the USR_ID_CREATE_DT
     */
    public void setUsrIdCreateDt(Timestamp value) {
        setAttributeInternal(USRIDCREATEDT, value);
    }

    /**
     * Gets the attribute value for USR_ID_MOD using the alias name UsrIdMod.
     * @return the USR_ID_MOD
     */
    public Integer getUsrIdMod() {
        return (Integer) getAttributeInternal(USRIDMOD);
    }

    /**
     * Sets <code>value</code> as attribute value for USR_ID_MOD using the alias name UsrIdMod.
     * @param value value to set the USR_ID_MOD
     */
    public void setUsrIdMod(Integer value) {
        setAttributeInternal(USRIDMOD, value);
    }

    /**
     * Gets the attribute value for USR_ID_MOD_DT using the alias name UsrIdModDt.
     * @return the USR_ID_MOD_DT
     */
    public Timestamp getUsrIdModDt() {
        return (Timestamp) getAttributeInternal(USRIDMODDT);
    }

    /**
     * Sets <code>value</code> as attribute value for USR_ID_MOD_DT using the alias name UsrIdModDt.
     * @param value value to set the USR_ID_MOD_DT
     */
    public void setUsrIdModDt(Timestamp value) {
        setAttributeInternal(USRIDMODDT, value);
    }

    /**
     * Gets the attribute value for FY_ID using the alias name FyId.
     * @return the FY_ID
     */
    public Integer getFyId() {
        return (Integer) getAttributeInternal(FYID);
    }

    /**
     * Sets <code>value</code> as attribute value for FY_ID using the alias name FyId.
     * @param value value to set the FY_ID
     */
    public void setFyId(Integer value) {
        setAttributeInternal(FYID, value);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link HCMInjuryFromDtlVO.
     */
    public RowIterator getHCMInjuryFromDtlVO() {
        return (RowIterator) getAttributeInternal(HCMINJURYFROMDTLVO);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LOVActionStatus1.
     */
    public RowSet getLOVActionStatus1() {
        return (RowSet) getAttributeInternal(LOVACTIONSTATUS1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LOVInjuryTypeVO1.
     */
    public RowSet getLOVInjuryTypeVO1() {
        return (RowSet) getAttributeInternal(LOVINJURYTYPEVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LOVEmployeeDetails1.
     */
    public RowSet getLOVEmployeeDetails1() {
        return (RowSet) getAttributeInternal(LOVEMPLOYEEDETAILS1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovUserNameVO1.
     */
    public RowSet getLovUserNameVO1() {
        return (RowSet) getAttributeInternal(LOVUSERNAMEVO1);
    }
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.executeUpdate();
            return st.getObject(1);
        } catch (SQLException e) {
            e.printStackTrace();
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }
}

