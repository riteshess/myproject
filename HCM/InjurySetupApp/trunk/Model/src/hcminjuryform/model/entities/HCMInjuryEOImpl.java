package hcminjuryform.model.entities;

import adf.utils.bean.StaticValue;
import adf.utils.ebiz.EbizParams;

import adf.utils.model.ADFModelUtils;

import hcminjuryform.model.services.HCMInjuryFormAMImpl;

import java.math.BigInteger;

import java.sql.CallableStatement;
import java.sql.SQLException;
import oracle.jbo.domain.Timestamp;

import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.AttributeList;
import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Sep 30 13:32:12 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class HCMInjuryEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CldId,
        SlocId,
        HoOrgId,
        OrgId,
        DocId,
        DocDt,
        InjTime,
        EmpDocId,
        EmpCode,
        DispDocId,
        InjType,
        SiteCordName,
        Status,
        InjDtl,
        UsrIdCreate,
        UsrIdCreateDt,
        UsrIdMod,
        UsrIdModDt,
        FyId,
        HCMInjuryFormDtl;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int DOCDT = AttributesEnum.DocDt.index();
    public static final int INJTIME = AttributesEnum.InjTime.index();
    public static final int EMPDOCID = AttributesEnum.EmpDocId.index();
    public static final int EMPCODE = AttributesEnum.EmpCode.index();
    public static final int DISPDOCID = AttributesEnum.DispDocId.index();
    public static final int INJTYPE = AttributesEnum.InjType.index();
    public static final int SITECORDNAME = AttributesEnum.SiteCordName.index();
    public static final int STATUS = AttributesEnum.Status.index();
    public static final int INJDTL = AttributesEnum.InjDtl.index();
    public static final int USRIDCREATE = AttributesEnum.UsrIdCreate.index();
    public static final int USRIDCREATEDT = AttributesEnum.UsrIdCreateDt.index();
    public static final int USRIDMOD = AttributesEnum.UsrIdMod.index();
    public static final int USRIDMODDT = AttributesEnum.UsrIdModDt.index();
    public static final int FYID = AttributesEnum.FyId.index();
    public static final int HCMINJURYFORMDTL = AttributesEnum.HCMInjuryFormDtl.index();

    /**
     * This is the default constructor (do not remove).
     */
    public HCMInjuryEOImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("hcminjuryform.model.entities.HCMInjuryEO");
    }


    /**
     * Gets the attribute value for CldId, using the alias name CldId.
     * @return the value of CldId
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CldId.
     * @param value value to set the CldId
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for SlocId, using the alias name SlocId.
     * @return the value of SlocId
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for SlocId.
     * @param value value to set the SlocId
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for HoOrgId, using the alias name HoOrgId.
     * @return the value of HoOrgId
     */
    public String getHoOrgId() {
        return (String) getAttributeInternal(HOORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for HoOrgId.
     * @param value value to set the HoOrgId
     */
    public void setHoOrgId(String value) {
        setAttributeInternal(HOORGID, value);
    }

    /**
     * Gets the attribute value for OrgId, using the alias name OrgId.
     * @return the value of OrgId
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for OrgId.
     * @param value value to set the OrgId
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for DocId, using the alias name DocId.
     * @return the value of DocId
     */
    public String getDocId() {
        return (String) getAttributeInternal(DOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for DocId.
     * @param value value to set the DocId
     */
    public void setDocId(String value) {
        setAttributeInternal(DOCID, value);
    }

    /**
     * Gets the attribute value for DocDt, using the alias name DocDt.
     * @return the value of DocDt
     */
    public Timestamp getDocDt() {
        return (Timestamp) getAttributeInternal(DOCDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for DocDt.
     * @param value value to set the DocDt
     */
    public void setDocDt(Timestamp value) {
        setAttributeInternal(DOCDT, value);
    }

    /**
     * Gets the attribute value for InjTime, using the alias name InjTime.
     * @return the value of InjTime
     */
    public String getInjTime() {
        return (String) getAttributeInternal(INJTIME);
    }

    /**
     * Sets <code>value</code> as the attribute value for InjTime.
     * @param value value to set the InjTime
     */
    public void setInjTime(String value) {
        setAttributeInternal(INJTIME, value);
    }

    /**
     * Gets the attribute value for EmpDocId, using the alias name EmpDocId.
     * @return the value of EmpDocId
     */
    public String getEmpDocId() {
        return (String) getAttributeInternal(EMPDOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for EmpDocId.
     * @param value value to set the EmpDocId
     */
    public void setEmpDocId(String value) {
        setAttributeInternal(EMPDOCID, value);
    }

    /**
     * Gets the attribute value for EmpCode, using the alias name EmpCode.
     * @return the value of EmpCode
     */
    public Integer getEmpCode() {
        return (Integer) getAttributeInternal(EMPCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for EmpCode.
     * @param value value to set the EmpCode
     */
    public void setEmpCode(Integer value) {
        setAttributeInternal(EMPCODE, value);
    }

    /**
     * Gets the attribute value for DispDocId, using the alias name DispDocId.
     * @return the value of DispDocId
     */
    public String getDispDocId() {
        return (String) getAttributeInternal(DISPDOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for DispDocId.
     * @param value value to set the DispDocId
     */
    public void setDispDocId(String value) {
        setAttributeInternal(DISPDOCID, value);
    }

    /**
     * Gets the attribute value for InjType, using the alias name InjType.
     * @return the value of InjType
     */
    public Integer getInjType() {
        return (Integer) getAttributeInternal(INJTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for InjType.
     * @param value value to set the InjType
     */
    public void setInjType(Integer value) {
        setAttributeInternal(INJTYPE, value);
    }

    /**
     * Gets the attribute value for SiteCordName, using the alias name SiteCordName.
     * @return the value of SiteCordName
     */
    public String getSiteCordName() {
        return (String) getAttributeInternal(SITECORDNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for SiteCordName.
     * @param value value to set the SiteCordName
     */
    public void setSiteCordName(String value) {
        setAttributeInternal(SITECORDNAME, value);
    }

    /**
     * Gets the attribute value for Status, using the alias name Status.
     * @return the value of Status
     */
    public Integer getStatus() {
        return (Integer) getAttributeInternal(STATUS);
    }

    /**
     * Sets <code>value</code> as the attribute value for Status.
     * @param value value to set the Status
     */
    public void setStatus(Integer value) {
        setAttributeInternal(STATUS, value);
    }

    /**
     * Gets the attribute value for InjDtl, using the alias name InjDtl.
     * @return the value of InjDtl
     */
    public String getInjDtl() {
        return (String) getAttributeInternal(INJDTL);
    }

    /**
     * Sets <code>value</code> as the attribute value for InjDtl.
     * @param value value to set the InjDtl
     */
    public void setInjDtl(String value) {
        setAttributeInternal(INJDTL, value);
    }

    /**
     * Gets the attribute value for UsrIdCreate, using the alias name UsrIdCreate.
     * @return the value of UsrIdCreate
     */
    public Integer getUsrIdCreate() {
        return (Integer) getAttributeInternal(USRIDCREATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdCreate.
     * @param value value to set the UsrIdCreate
     */
    public void setUsrIdCreate(Integer value) {
        setAttributeInternal(USRIDCREATE, value);
    }

    /**
     * Gets the attribute value for UsrIdCreateDt, using the alias name UsrIdCreateDt.
     * @return the value of UsrIdCreateDt
     */
    public Timestamp getUsrIdCreateDt() {
        return (Timestamp) getAttributeInternal(USRIDCREATEDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdCreateDt.
     * @param value value to set the UsrIdCreateDt
     */
    public void setUsrIdCreateDt(Timestamp value) {
        setAttributeInternal(USRIDCREATEDT, value);
    }

    /**
     * Gets the attribute value for UsrIdMod, using the alias name UsrIdMod.
     * @return the value of UsrIdMod
     */
    public Integer getUsrIdMod() {
        return (Integer) getAttributeInternal(USRIDMOD);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdMod.
     * @param value value to set the UsrIdMod
     */
    public void setUsrIdMod(Integer value) {
        setAttributeInternal(USRIDMOD, value);
    }

    /**
     * Gets the attribute value for UsrIdModDt, using the alias name UsrIdModDt.
     * @return the value of UsrIdModDt
     */
    public Timestamp getUsrIdModDt() {
        return (Timestamp) getAttributeInternal(USRIDMODDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdModDt.
     * @param value value to set the UsrIdModDt
     */
    public void setUsrIdModDt(Timestamp value) {
        setAttributeInternal(USRIDMODDT, value);
    }

    /**
     * Gets the attribute value for FyId, using the alias name FyId.
     * @return the value of FyId
     */
    public Integer getFyId() {
        return (Integer) getAttributeInternal(FYID);
    }

    /**
     * Sets <code>value</code> as the attribute value for FyId.
     * @param value value to set the FyId
     */
    public void setFyId(Integer value) {
        setAttributeInternal(FYID, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getHCMInjuryFormDtl() {
        return (RowIterator) getAttributeInternal(HCMINJURYFORMDTL);
    }


    /**
     * @param cldId key constituent
     * @param slocId key constituent
     * @param hoOrgId key constituent
     * @param orgId key constituent
     * @param docId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(String cldId, Integer slocId, String hoOrgId, String orgId, String docId) {
        return new Key(new Object[] { cldId, slocId, hoOrgId, orgId, docId });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    public String GetHexDocNoFromFun() {

        String hexDocIdFromFun = "0";
        try {
            hexDocIdFromFun = this.callStoredFunction(Types.VARCHAR, "APP.GET_TXN_ID(?,?,?,?,?,?)", new Object[] {
                                                      EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_HO_ORG_ID(),
                                                      EbizParams.GLBL_APP_USR(), 29509, 0
            }).toString();

        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("ERROR IN CALLING FUNCTION GET_TXN_ID at EoImpl :" + e.getMessage());
        }
        System.out.println("===========" + hexDocIdFromFun);
        return hexDocIdFromFun;
    }
    protected void create(AttributeList attributeList) {
       
        setCldId(EbizParams.GLBL_APP_CLD_ID());
        setHoOrgId(EbizParams.GLBL_HO_ORG_ID());
        setSlocId(EbizParams.GLBL_APP_SERV_LOC());
        setOrgId(EbizParams.GLBL_APP_USR_ORG());
       this.setDocId(GetHexDocNoFromFun());
        System.out.println(" insda "); 
        this.setFyId((Integer)GetFyIdFromFun());
        this.setStatus(128);
      //  this.setInjType(0);
        setDispDocId(GetInjuryIdFromFun());
        this.setUsrIdCreate(EbizParams.GLBL_APP_USR());           
        this.setUsrIdCreateDt(new oracle.jbo.domain.Timestamp(System.currentTimeMillis()));
        super.create(attributeList);
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
     //   super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        if (operation == DML_UPDATE) {
          
           this.setUsrIdMod(EbizParams.GLBL_APP_USR());
           this.setUsrIdModDt(new Timestamp(System.currentTimeMillis()));
       } else if (operation == DML_INSERT) {
            this.setUsrIdCreate(EbizParams.GLBL_APP_USR());           
            this.setUsrIdCreateDt(new oracle.jbo.domain.Timestamp(System.currentTimeMillis()));
           setDispDocId(GetInjuryIdFromFun());
            
              }
        super.doDML(operation, e);
    }
    /********************    STORED Function    *************************************/

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.executeUpdate();
            return st.getObject(1);
        } catch (SQLException e) {
            e.printStackTrace();
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    /** ---------- To create HexDocId Id -------------**
    
    /** ---------- To create DispSchemeId Id -------------**/

     public String GetInjuryIdFromFun() {
        String dispIdFromFum = "0";

        try {
            dispIdFromFum = this.callStoredFunction(Types.VARCHAR, "FN_HCM_GEN_DISP_DOC_ID(?,?,?,?,?,?,?,?,?)", new Object[] {
                                                                this.getSlocId(), this.getCldId(), this.getOrgId(), 29509,
                                                                this.getDocId(), "HCM$INJURY",getFyId() ,null, 0
            }).toString();

        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("ERROR IN CALLING FUNCTION at EOImpl:" + e.getMessage());
        }
        System.out.println("===========" + dispIdFromFum);

        return dispIdFromFum;
    }
    public Object resolvElDC(String data) {
          FacesContext fc = FacesContext.getCurrentInstance();
          Application app = fc.getApplication();
          ExpressionFactory elFactory = app.getExpressionFactory();
          ELContext elContext = fc.getELContext();
          ValueExpression valueExp =
              elFactory.createValueExpression(elContext, "#{data." + data + ".dataProvider}", Object.class);
          return valueExp.getValue(elContext);
      }
    public HCMInjuryFormAMImpl getAm() {
        HCMInjuryFormAMImpl am = (HCMInjuryFormAMImpl)resolvElDC("HCMInjuryFormAMImplDataControl");
        return am;
    }
    
        public Integer GetFyIdFromFun() {
        
        
            Integer fyIdFromFun = 0;

            try {
               Object o = ADFModelUtils.callFunction(getAm(), new StringBuilder("APP.GET_ORG_FY_ID (?,?,?)"), new Object[] {
                                                      EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_HO_ORG_ID(),
                                                      StaticValue.getTruncatedCurrDt()
                }, Types.INTEGER);
                System.out.println("FYID---- > "+o);
                /*  fyIdFromFun = (Integer) this.callStoredFunction(Types.INTEGER, "APP.GET_FY_ID(?,?,?,?)", new Object[] {
                                                                this.getCldId(), this.getHoOrgId(), new Timestamp(System.currentTimeMillis()), "FY"
                }); */
                if(o!=null){
                    fyIdFromFun=(Integer)o;
                }
                else{
                    System.out.println("There is some error in Function FyId is Null");
                }

            } catch (Exception e) {
                System.out.println("ERROR IN CALLING FUNCTION GET_TXN_ID at AppSchmEoImpl :" + e.getMessage());
            }
            System.out.println("===========" + fyIdFromFun);

            return fyIdFromFun;
        }
}

