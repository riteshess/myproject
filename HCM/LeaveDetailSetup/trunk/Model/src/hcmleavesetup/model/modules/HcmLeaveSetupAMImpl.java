package hcmleavesetup.model.modules;

import adf.utils.ebiz.EbizParams;

import hcmleavesetup.model.modules.common.HcmLeaveSetupAM;


import hcmleavesetup.model.views.OrgHcmLeaveSubVOImpl;

import java.sql.SQLException;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.context.FacesContext;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;


import oracle.jbo.server.ViewObjectImpl;

import org.apache.myfaces.trinidad.context.RequestContext;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Sep 02 12:07:39 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class HcmLeaveSetupAMImpl extends ApplicationModuleImpl implements HcmLeaveSetupAM {
    /**
     * This is the default constructor (do not remove).
     */
    public HcmLeaveSetupAMImpl() {
    }

    /**
     * Container's getter for DualVO.
     * @return DualVO
     */
    public ViewObjectImpl getDualVO() {
        return (ViewObjectImpl) findViewObject("DualVO");
    }

    /**
     * Container's getter for LeaveParam.
     * @return LeaveParam
     */
    public ViewObjectImpl getLeaveParam() {
        return (ViewObjectImpl) findViewObject("LeaveParam");
    }

    /**
     * Container's getter for HcmLeave.
     * @return HcmLeave
     */
    public ViewObjectImpl getHcmLeave() {
        return (ViewObjectImpl) findViewObject("HcmLeave");
    }

    /**
     * Container's getter for HcmLeaveGrp.
     * @return HcmLeaveGrp
     */
    public ViewObjectImpl getHcmLeaveGrp() {
        return (ViewObjectImpl) findViewObject("HcmLeaveGrp");
    }

    /**
     * Container's getter for ParamToHcmLeaveVL1.
     * @return ParamToHcmLeaveVL1
     */
    public ViewLinkImpl getParamToHcmLeaveVL1() {
        return (ViewLinkImpl) findViewLink("ParamToHcmLeaveVL1");
    }

    /**
     * Container's getter for HcmLeaveToGrpVL1.
     * @return HcmLeaveToGrpVL1
     */
    public ViewLinkImpl getHcmLeaveToGrpVL1() {
        return (ViewLinkImpl) findViewLink("HcmLeaveToGrpVL1");
    }


    public Object resolvEl(String data) {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        ELContext elContext = facesContext.getELContext();
        ExpressionFactory expressionFactory = facesContext.getApplication().getExpressionFactory();
        ValueExpression exp = expressionFactory.createValueExpression(elContext, data, Object.class);
        return exp.getValue(elContext);
    }

    public void bindVarPageLoad(String cldId, String hoOrgId, Integer slocId, String orgId) {
        RequestContext.getCurrentInstance().getPageFlowScope().put("ADD_EDIT_MODE", "V");
        this.getLeaveParam().setNamedWhereClauseParam("cldIdBindVar", cldId);
        this.getLeaveParam().setNamedWhereClauseParam("slocIdBindVar", slocId);
        this.getLeaveParam().setNamedWhereClauseParam("orgIdBindVar", orgId);
        this.getLeaveParam().setNamedWhereClauseParam("hoOrgIdBindVar", hoOrgId);
        this.getLeaveParam().executeQuery();

        this.getLovGrpId().setNamedWhereClauseParam("cldIdBindVar", cldId);
        this.getLovGrpId().setNamedWhereClauseParam("slocIdBindVar", slocId);
        this.getLovGrpId().setNamedWhereClauseParam("orgIdBindVar", orgId);
        this.getLovGrpId().setNamedWhereClauseParam("hoOrgIdBindVar", hoOrgId);
        this.getLovGrpId().executeQuery();
    }

    public void searchLeaveName(String leaveDesc) {
        this.getLeaveParam().setNamedWhereClauseParam("leaveDescBindVar", leaveDesc);
        this.getLeaveParam().executeQuery();

    }

    public void resetSearchMethod() {
        this.getDualVO().getCurrentRow().setAttribute("TransLeaveDesc", null);
        this.getLeaveParam().setNamedWhereClauseParam("leaveDescBindVar", null);
        this.getLeaveParam().executeQuery();
    }

    public String chkDuplicateNotation(String notation) {

        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String orgId = EbizParams.GLBL_APP_USR_ORG();

        RowQualifier rq = new RowQualifier(this.getHcmLeave1());
        rq.setWhereClause("CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId + "' and OrgId='" +
                          orgId + "' and upper(LeaveNotation)='" + notation.toUpperCase() + "'");
        Row[] fr = this.getHcmLeave1().getFilteredRows(rq);
        for (Row r : fr) {
            if (this.getHcmLeave().getCurrentRow().getAttribute("LeaveId") != null)
                if (!(r.getAttribute("LeaveId").toString().equals(this.getHcmLeave().getCurrentRow().getAttribute("LeaveId").toString())))
                    return "N";
        }
        return "Y";
    }

    public String chkDuplicateGrpName(String grpName) {

        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        // Integer UsrId = EbizParams.GLBL_APP_USR();
        //Get Grp Id
        String grpId = null;
        this.getLovGrpId().setNamedWhereClauseParam("cldIdBindVar", cldId);
        this.getLovGrpId().setNamedWhereClauseParam("slocIdBindVar", slocId);
        this.getLovGrpId().setNamedWhereClauseParam("hoOrgIdBindVar", hoOrgId);
        this.getLovGrpId().setNamedWhereClauseParam("orgIdBindVar", orgId);
        this.getLovGrpId().executeQuery();
        Row[] frGrp = this.getLovGrpId().getFilteredRows("ParamDesc", grpName);
        if (frGrp.length > 0)
            grpId = (String) frGrp[0].getAttribute("ParamId");

        RowQualifier rq = new RowQualifier(this.getHcmLeaveGrp());
        rq.setWhereClause("CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId + "' and OrgId='" +
                          orgId + "' and LeaveId='" + this.getHcmLeave().getCurrentRow().getAttribute("LeaveId") +
                          "' and GrpId='" + grpId + "'");
        Row[] fr = this.getHcmLeaveGrp().getFilteredRows(rq);
        for (Row r : fr) {
            if (!(r.equals(this.getHcmLeaveGrp().getCurrentRow())))
                return "N";
        }
        return "Y";
    }


    public String chkLeaveValidityAtEdit() {
        if (getHcmLeaveGrp().getCurrentRow() != null) {
            System.out.println("leave id at edit is---" + getHcmLeaveGrp().getCurrentRow().getAttribute("LeaveId"));
            if (getHcmLeaveGrp().getCurrentRow().getAttribute("LeaveId") != null) {
                String cldId = EbizParams.GLBL_APP_CLD_ID();
                Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
                String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
                String orgId = EbizParams.GLBL_APP_USR_ORG();

                String leaveId = getHcmLeaveGrp().getCurrentRow().getAttribute("LeaveId").toString();
                getHcmEmpLeave1().setNamedWhereClauseParam("BindCldId", cldId);
                getHcmEmpLeave1().setNamedWhereClauseParam("BindHoOrgId", hoOrgId);
                getHcmEmpLeave1().setNamedWhereClauseParam("BindOrgId", orgId);
                getHcmEmpLeave1().setNamedWhereClauseParam("BindSlocId", slocId);
                getHcmEmpLeave1().executeQuery();

                Row[] filteredRows = getHcmEmpLeave1().getFilteredRows("LeaveId", leaveId);
                System.out.println("filterd rows -->" + filteredRows.length);
                if (filteredRows.length > 0) {
                    return "Y";
                }
                return "N";
            }
            return "N";
        }

        return "Y";
    }

    /**
     * Container's getter for LovGrpId1.
     * @return LovGrpId1
     */
    public ViewObjectImpl getLovGrpId() {
        return (ViewObjectImpl) findViewObject("LovGrpId");
    }

    /**
     * Container's getter for HcmLeave1.
     * @return HcmLeave1
     */
    public ViewObjectImpl getHcmLeave1() {
        return (ViewObjectImpl) findViewObject("HcmLeave1");
    }

    /**
     * Container's getter for HcmEmpLeave1.
     * @return HcmEmpLeave1
     */
    public ViewObjectImpl getHcmEmpLeave1() {
        return (ViewObjectImpl) findViewObject("HcmEmpLeave1");
    }

    public String chkStrtDateWithLeaveAdnGrpStDt(java.sql.Date structDt) {
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String orgId = EbizParams.GLBL_APP_USR_ORG();

        java.sql.Date lvStDt = null;
        java.sql.Date lvEnDt = null;
        java.sql.Date grpStDt = null;
        java.sql.Date grpEnDt = null;
        java.sql.Date chkDt = structDt;
        RowQualifier rqleave = new RowQualifier(this.getLeaveParam());
        rqleave.setWhereClause("CldId='" + cldId + "' and SlocId=" + slocId + " and OrgId='" + orgId +
                               "' and HoOrgId='" + hoOrgId + "' and ParamId='" +
                               this.getHcmLeave().getCurrentRow().getAttribute("LeaveId") + "'");
        Row[] frLeave = this.getLeaveParam().getFilteredRows(rqleave);
        if (frLeave.length > 0) {
            try {
                lvStDt = ((Timestamp) frLeave[0].getAttribute("ParamStartDt")).dateValue();
                if (frLeave[0].getAttribute("ParamEndDt") != null)
                    lvEnDt = ((Timestamp) frLeave[0].getAttribute("ParamEndDt")).dateValue();
            } catch (SQLException e) {
            }
        }

        if (this.getHcmLeaveGrp().getCurrentRow().getAttribute("GrpId") != null) {
            RowQualifier rqgrp = new RowQualifier(this.getLovGrpId());
            rqgrp.setWhereClause("CldId='" + cldId + "' and SlocId=" + slocId + " and OrgId='" + orgId +
                                 "' and HoOrgId='" + hoOrgId + "' and ParamId='" +
                                 this.getHcmLeaveGrp().getCurrentRow().getAttribute("GrpId") + "'");
            Row[] frGrp = this.getLovGrpId().getFilteredRows(rqgrp);
            if (frGrp.length > 0) {
                try {
                    grpStDt = ((Timestamp) frGrp[0].getAttribute("ParamStartDt")).dateValue();
                    if (frGrp[0].getAttribute("ParamEndDt") != null)
                        grpEnDt = ((Timestamp) frGrp[0].getAttribute("ParamEndDt")).dateValue();
                } catch (SQLException e) {
                }
            }
        }

        if (lvStDt != null) {
            if (lvStDt.compareTo(structDt) > 0) {
                if (lvStDt.toString().equals(structDt.toString())) {

                } else {
                    return "L";
                }
            }
        }

        if (lvEnDt != null) {
            if (structDt.compareTo(lvEnDt) > 0) {
                if (structDt.toString().equals(lvEnDt.toString())) {

                } else {
                    return "L";
                }
            }
        }

        if (grpStDt != null) {
            if (grpStDt.compareTo(structDt) > 0) {
                if (grpStDt.toString().equals(structDt.toString())) {

                } else {
                    return "G";
                }
            }
        }

        if (grpEnDt != null) {
            if (structDt.compareTo(grpStDt) > 0) {
                if (structDt.toString().equals(grpStDt.toString())) {

                } else {
                    return "G";
                }
            }
        }

        return "Y";
    }

    /**To Validate comp off check box*/
    public String chkCompOff(Boolean chkVal) {

        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        if (chkVal.equals(true)) {
            RowQualifier rq = new RowQualifier(getHcmLeave1());
            rq.setWhereClause("CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId +
                              "' and OrgId='" + orgId + "'");
            Row[] fr = this.getHcmLeave1().getFilteredRows(rq);
            System.out.println("filtered rows length---" + fr.length);
            for (Row r : fr) {
                System.out.println("row r--->" + r + "  current row---" + getHcmLeave().getCurrentRow());
                if (r.getAttribute("LeaveId") != (getHcmLeave().getCurrentRow().getAttribute("LeaveId"))) {
                    if (r.getAttribute("CompOffChk") != null) {
                        System.out.println("comp off not null---->" + r.getAttribute("CompOffChk"));
                        if (r.getAttribute("CompOffChk").toString().equalsIgnoreCase("Y")) {
                            return "Y";
                        }
                    }
                }
            }
        } // else if (chkVal.equals(false)) {
        /*  if (getHcmLeaveGrp().getEstimatedRowCount() > 0) {

                getGroupCompOffRuleVO1().setNamedWhereClauseParam("cldIdBindVar", cldId);
                getGroupCompOffRuleVO1().setNamedWhereClauseParam("slocIdBindVar", slocId);
                getGroupCompOffRuleVO1().setNamedWhereClauseParam("orgIdBindVar", orgId);
                getGroupCompOffRuleVO1().setNamedWhereClauseParam("hoOrgIdBindVar", hoOrgId);
                getGroupCompOffRuleVO1().executeQuery();
                RowSetIterator leavGrpItr = getHcmLeaveGrp().createRowSetIterator(null);
                while (leavGrpItr.hasNext()) {
                    Row next = leavGrpItr.next();
                    Row[] filteredRows = getGroupCompOffRuleVO1().getFilteredRows("GrpId", next.getAttribute("GrpId"));
                    if (filteredRows.length > 0) {
                        return "K";
                    }
                }
            }*/
        //}
        return "N";
    }

    /**Sequence No. Validator*/
    public String chkduplicateSequenceNo(Integer seqNo) {
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        RowQualifier rq = new RowQualifier(getHcmLeave1());

        rq.setWhereClause("CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId + "' and OrgId='" +
                          orgId + "' and SeqNo=" + seqNo);
        Row[] fr = getHcmLeave1().getFilteredRows(rq);
        if (fr.length > 1) {
            return "Y";
        }
        return "N";
    }


    /**
     * Container's getter for LovHolidayLocWiseVO1.
     * @return LovHolidayLocWiseVO1
     */
    public ViewObjectImpl getLovHolidayLocWiseVO1() {
        return (ViewObjectImpl) findViewObject("LovHolidayLocWiseVO1");
    }

    /**
     * Container's getter for GroupCompOffRuleVO1.
     * @return GroupCompOffRuleVO1
     */
    public ViewObjectImpl getGroupCompOffRuleVO1() {
        return (ViewObjectImpl) findViewObject("GroupCompOffRuleVO1");
    }

    /**
     * Container's getter for ChekLeaveCoaApplicableVO1.
     * @return ChekLeaveCoaApplicableVO1
     */
    public ViewObjectImpl getChekLeaveCoaApplicableVO1() {
        return (ViewObjectImpl) findViewObject("ChekLeaveCoaApplicableVO1");
    }
    
    
    /*** popup Code****/
    
     public void showpopdata() {
    
    }


    /**
     * Container's getter for LOVLeaveNameVO2.
     * @return LOVLeaveNameVO2
     */
    public ViewObjectImpl getLOVLeaveNameVO2() {
        return (ViewObjectImpl) findViewObject("LOVLeaveNameVO2");
    }
    
    public String chkDuplicateLeave(String LeaveId) {
        System.out.println("******* check duplicate leave in am********* "+LeaveId);


        Row currentRow = this.getHcmLeave().getCurrentRow();
        Object Subleavename = currentRow.getAttribute("LeaveId");
        System.out.println("trans leave name is::::::::"+ Subleavename);

        if(Subleavename.equals(LeaveId)) 
        {
            System.out.println("in if:::::::::");
            return "Y";
        }
        
        return "N"; 
    }


    /**
     * Container's getter for OrgHcmLeaveSubVO1.
     * @return OrgHcmLeaveSubVO1
     */
    public OrgHcmLeaveSubVOImpl getOrgHcmLeaveSubVO1() {
        return (OrgHcmLeaveSubVOImpl) findViewObject("OrgHcmLeaveSubVO1");
    }

    /**
     * Container's getter for HcmLeaveGrpToOrgHcmLeaveSubVL1.
     * @return HcmLeaveGrpToOrgHcmLeaveSubVL1
     */
    public ViewLinkImpl getHcmLeaveGrpToOrgHcmLeaveSubVL1() {
        return (ViewLinkImpl) findViewLink("HcmLeaveGrpToOrgHcmLeaveSubVL1");
    }
}

