package hcmattsalperiodapp.model.service;

import adf.utils.bean.StaticValue;
import adf.utils.ebiz.EbizParams;
import adf.utils.model.ADFModelUtils;

import hcmattsalperiodapp.model.service.common.HCMAttSalPeriodAppAM;

import java.util.Date;

import javax.el.ELContext;

import javax.el.ExpressionFactory;

import javax.el.ValueExpression;

import javax.faces.application.FacesMessage;

import javax.faces.context.FacesContext;

import oracle.jbo.Row;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Sep 22 18:25:49 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class HCMAttSalPeriodAppAMImpl extends ApplicationModuleImpl  {
    /**
     * This is the default constructor (do not remove).
     */
    public HCMAttSalPeriodAppAMImpl() {
    }

    /**
     * Container's getter for Temp1.
     * @return Temp1
     */
    public ViewObjectImpl getTemp1() {
        return (ViewObjectImpl) findViewObject("Temp1");
    }

    /**
     * Container's getter for HcmAttenSalPeriod1.
     * @return HcmAttenSalPeriod1
     */
    public ViewObjectImpl getHcmAttenSalPeriod1() {
        return (ViewObjectImpl) findViewObject("HcmAttenSalPeriod1");
    }
    /**
     * Method to add Salary Period
     * @return
     * 1 - Attendance Perdiod From is not defined
     * 2 - Attendance Period To is not defined
     * 3 - Salary Period From is not defined
     * 4 - Salary Period To is not defined
     * 5 - Attendance From Period is less than Attendance To Period
     * 6 - Salary Period From Period is less than Salary Period To 
     */
    public Integer addSalPeriod(){
        Integer i = 0;
        Row tempRow = getTemp1().getCurrentRow();
        Object attPrdToTransO = tempRow.getAttribute("AttendancePrdToTrans");
        Object attPrdFromTransO = tempRow.getAttribute("AttendancePrdFromTrans");
        Object salPrdToTransO = tempRow.getAttribute("SalProcessingPrdToTrans");
        Object salPrdFromTransO = tempRow.getAttribute("SalProcessingPrdFromTrans");
        // Object grpIdtransO    = tempRow.getAttribute("grpIdTrans");
        Timestamp  attPrdToTrans = (attPrdToTransO == null ? null :StaticValue.getTruncatedDt((Timestamp)attPrdToTransO));
        Timestamp  attPrdFromTrans = (attPrdFromTransO == null ? null :StaticValue.getTruncatedDt((Timestamp)attPrdFromTransO));
        Timestamp  salPrdToTrans = (salPrdToTransO == null ? null :StaticValue.getTruncatedDt((Timestamp)salPrdToTransO));
        Timestamp  salPrdFromTrans = (salPrdFromTransO == null ? null :StaticValue.getTruncatedDt((Timestamp)salPrdFromTransO));

      //System.out.println("Grp Id In AM--=="+grpIdtransO);
        
         //if(grpIdtransO ==null){
          //   i=1;
        //}else 
        if(salPrdFromTrans == null){
            i = 1;
        }else if(salPrdToTrans == null){
            i = 2;
        } else if(attPrdFromTrans == null){
            i = 3;
        }else if(attPrdToTrans == null){
            i = 4;
        }else if(salPrdFromTrans.compareTo(salPrdToTrans) > 0){
            i = 5;
        }else if(attPrdFromTrans.compareTo(attPrdToTrans) > 0){
             i = 6;
         }
      
       else{
            ViewObjectImpl hcmVo = getHcmAttenSalPeriod1();
            Row row = hcmVo.createRow();
            row.setAttribute("AttenFrmDt", attPrdFromTrans);
            row.setAttribute("AttenToDt", attPrdToTrans);
            row.setAttribute("SalFrmDt", salPrdFromTrans);
            row.setAttribute("SalToDt", salPrdToTrans);
          //  row.setAttribute ("GrpId",grpIdtransO);
            hcmVo.insertRow(row);
            getDBTransaction().commit();
            hcmVo.executeQuery();
        
        
        }
        
         

        return i;
    }
    /**
     * Method to save period Record.
     * @return
     */
    public Integer saveRecord(){
        Integer i = 0;
        try {
           getDBTransaction().commit();
            ADFModelUtils.showFormattedFacesMessage("Saved Successfully.", "Records Saved Successfully.", FacesMessage.SEVERITY_INFO);
        } catch (Exception e) {
            ADFModelUtils.showFormattedFacesMessage("There have been some on save.", e.getMessage(), FacesMessage.SEVERITY_FATAL);
            e.printStackTrace();
            i = -1;
        }
        return i;
    }
    /**
     *  Method for performing Organisation and Ho wise initial filter
     */
    public void initalFilter(){
        ViewObjectImpl hcmVo = getHcmAttenSalPeriod1();
        hcmVo.setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
        hcmVo.setNamedWhereClauseParam("OrgIdBind", EbizParams.GLBL_APP_USR_ORG());
        hcmVo.setNamedWhereClauseParam("HoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
        hcmVo.setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
        hcmVo.executeQuery();
    }

    public Object resolvEl(String data)
       {
           FacesContext facesContext = FacesContext.getCurrentInstance();
           ELContext elContext = facesContext.getELContext();
           ExpressionFactory expressionFactory = facesContext.getApplication().getExpressionFactory();
           ValueExpression exp = expressionFactory.createValueExpression(elContext, data, Object.class);
           return exp.getValue(elContext);
       }

public String chkDuplictAttenFrmDt(String attenFrmDt, String slyPrcsFrmDt1)
{ 
               String hoOrgId = (String) resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
               String cldId = (String) resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
               Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
               String orgId = (String) resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
            // ViewObjectImpl hcmVo = getHcmAttenSalPeriod1();
          //  Timestamp frmDt= (Timestamp)getTemp1().getCurrentRow().getAttribute("AttendancePrdFromTrans");
              System.out.println("Attendance From date--"+attenFrmDt);
              System.out.println("SalpcsPrdDt In atten Check--="+slyPrcsFrmDt1);
                 int ln= attenFrmDt.compareTo(slyPrcsFrmDt1);
                 System.out.println("value of date comparision ln=="+ln);
              
                 
                  
              RowQualifier rq = new RowQualifier(getHcmAttenSalPeriod1());
              String query = "CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId + "' and OrgId='" + orgId +
                              "' and AttenFrmDt = '" + attenFrmDt + "'";
              System.out.println("Query value---"+ query);
              rq.setWhereClause(query);
             //  System.out.println("filtered rows----->"+);
              Row[] fr = getHcmAttenSalPeriod1().getFilteredRows(rq);
              System.out.println("filtered rows----->"+fr.length); 
              System.out.println("---1---");
                if(ln>0)
                  {
                  return "Z";
                } else if(fr.length>0)
                       {
                              System.out.println("---4---");
                               return "Y";     
                           }
                       
                    
              
           
    return "N";
        

}




    public String chkDuplictSlyPrcsFrmDt( String slyPrcsFrmDt)
    { 
                   String hoOrgId = (String) resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
                   String cldId = (String) resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
                   Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
                   String orgId = (String) resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        // ViewObjectImpl hcmVo = getHcmAttenSalPeriod1();
         //Timestamp frmDt= (Timestamp)getTemp1().getCurrentRow().getAttribute("SalProcessingPrdFromTrans");
         System.out.println("SalaryProcessingprd From date--"+slyPrcsFrmDt);
         RowQualifier rq = new RowQualifier(getHcmAttenSalPeriod1());
        
         
           String query = "CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId + "' and OrgId='" + orgId +
                         "' and SalFrmDt = '" + slyPrcsFrmDt + "'";
         
            System.out.println("Query value---"+ query);
            rq.setWhereClause(query);
          //  System.out.println("filtered rows----->"+);
            Row[] fr = getHcmAttenSalPeriod1().getFilteredRows(rq);
            System.out.println("filtered rows----->"+fr.length); 
            System.out.println("---1---");
           if(fr.length>0)
              {
                System.out.println("---4---");
                return "Y";     
              } 
        return "N";
    }
      












    
    public void showFacesMsg(String msgHdr, String msgDtl, javax.faces.application.FacesMessage.Severity msgSeverity,
                                String msgMode)
       {

           FacesMessage msg = new FacesMessage(msgHdr);
           msg.setDetail(msgDtl);
           msg.setSeverity(msgSeverity);
           FacesContext.getCurrentInstance().addMessage(null, msg);

       }


    /**
     * Container's getter for grp1.
     * @return grp1
     */
    public ViewObjectImpl getgrp1() {
        return (ViewObjectImpl) findViewObject("grp1");
    }
}

