package hcmsalaryprocessingapp.model.module;
/** Please Don't alter the contents of this class without the permission of project manager!!
 * All comments by-Manish Kumar(Developer Of this Application)*/
import adf.utils.ebiz.EbizParams;
import adf.utils.model.ADFModelUtils;

import appexcelimpexpapp.model.util.UpdatedData;

import hcmsalaryprocessingapp.model.module.common.HcmSalaryProcessingAppAM;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.text.SimpleDateFormat;

import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.context.FacesContext;

import oracle.adf.share.ADFContext;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.apache.myfaces.trinidad.context.RequestContext;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Sep 19 15:53:58 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class HcmSalaryProcessingAppAMImpl extends ApplicationModuleImpl implements HcmSalaryProcessingAppAM
{
    /**
     * This is the default constructor (do not remove).
     */
    public HcmSalaryProcessingAppAMImpl()
    {
    }
    private Object extraTime = null;
    private Object leave = null;
    private Object lwp = null;
    private Object inTime = null;
    private Object outTime = null;
    private Object transInTime = null;
    private Object transOutTime = null;
    private String isRowExist = "N";

    /**
     * Container's getter for Dummy1.
     * @return Dummy1
     */
    public ViewObjectImpl getDummy1()
    {
        return (ViewObjectImpl) findViewObject("Dummy1");
    }

    /**
     * Container's getter for Emp1.
     * @return Emp1
     */
    public ViewObjectImpl getEmp1()
    {
        return (ViewObjectImpl) findViewObject("Emp1");
    }

    /**
     * Container's getter for EmpGroupPrf1.
     * @return EmpGroupPrf1
     */
    public ViewObjectImpl getEmpGroupPrf1()
    {
        return (ViewObjectImpl) findViewObject("EmpGroupPrf1");
    }

    /**
     * Container's getter for OrgHcmProfile1.
     * @return OrgHcmProfile1
     */
    public ViewObjectImpl getOrgHcmProfile1()
    {
        return (ViewObjectImpl) findViewObject("OrgHcmProfile1");
    }

    public Object resolvEl(String data)
    {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        ELContext elContext = facesContext.getELContext();
        ExpressionFactory expressionFactory = facesContext.getApplication().getExpressionFactory();
        ValueExpression exp = expressionFactory.createValueExpression(elContext, data, Object.class);
        return exp.getValue(elContext);
    }

    public Object resolvElO(String data)
    {
        ADFContext adfCtx = ADFContext.getCurrent();
        ELContext elContext = adfCtx.getELContext();
        ValueExpression valueExp = adfCtx.getExpressionFactory().createValueExpression(elContext, data, Object.class);
        Object Message = valueExp.getValue(elContext);
        return Message;
        //  return valueExp.getValue(elContext);
    }


    /**To Set Initial variables on page load in various view objetcs */
    public void setBindVarOnPageLoad()
    {
        String org = EbizParams.GLBL_APP_USR_ORG();
        ;
        String cld = EbizParams.GLBL_APP_CLD_ID();
        Integer sloc = EbizParams.GLBL_APP_SERV_LOC();
        String hoOrg = EbizParams.GLBL_HO_ORG_ID();
        // getDummy1().executeQuery();
        getLeaveBalanceVO1().setNamedWhereClauseParam("bindOrgId", org);
        getLeaveBalanceVO1().setNamedWhereClauseParam("bindCldId", cld);
        getLeaveBalanceVO1().setNamedWhereClauseParam("bindSlocId", sloc);
        getLeaveBalanceVO1().setNamedWhereClauseParam("bindHoOrgId", hoOrg);

        this.getEmpGroupPrf1().setNamedWhereClauseParam("BindOrgId", org);
        this.getEmpGroupPrf1().setNamedWhereClauseParam("BindCldId", cld);
        this.getEmpGroupPrf1().setNamedWhereClauseParam("BindSlocId", sloc);
        this.getEmpGroupPrf1().setNamedWhereClauseParam("BindHoOrgId", hoOrg);

        this.getEmp1().setNamedWhereClauseParam("BindOrgId", org);
        this.getEmp1().setNamedWhereClauseParam("BindCldId", cld);
        this.getEmp1().setNamedWhereClauseParam("BindSlocId", sloc);
        this.getEmp1().setNamedWhereClauseParam("BindHoOrgId", hoOrg);


        getLeaveBalanceVO1().executeQuery();
        getEmpGroupPrf1().executeQuery();
        getEmp1().executeQuery();
        //getDummy1().executeQuery();
    }

    public void setBindVarOnViewSalTF()
    {
        System.out.println("goning To view salary");
        String org = EbizParams.GLBL_APP_USR_ORG();
        ;
        String cld = EbizParams.GLBL_APP_CLD_ID();
        Integer sloc = EbizParams.GLBL_APP_SERV_LOC();
        String hoOrg = EbizParams.GLBL_HO_ORG_ID();


        getEmp3().setNamedWhereClauseParam("BindOrgId", org);
        getEmp3().setNamedWhereClauseParam("BindCldId", cld);
        getEmp3().setNamedWhereClauseParam("BindSlocId", sloc);
        getEmp3().setNamedWhereClauseParam("BindHoOrgId", hoOrg);

        getHcmSalProc1().setNamedWhereClauseParam("BindCldId", cld);
        getHcmSalProc1().setNamedWhereClauseParam("BindOrgId", org);
        getHcmSalProc1().setNamedWhereClauseParam("BindSlocId", sloc);
        getHcmSalProc1().setNamedWhereClauseParam("BindHoOrgId", hoOrg);
        getEmp3().executeQuery();
        getHcmSalProc1().executeQuery();
        filterSalProc();
        chkSalaryStatusInSalProc();
    }

    /** To Filter SalProc by TxnDocID */
    public void filterSalProc()
    {
        String org = EbizParams.GLBL_APP_USR_ORG();
        ;
        String cld = EbizParams.GLBL_APP_CLD_ID();
        Integer sloc = EbizParams.GLBL_APP_SERV_LOC();
        String hoOrg = EbizParams.GLBL_HO_ORG_ID();


        if (resolvEl("#{pageFlowScope.PARAM_DOC_TXN_ID}") != null)
        {
            String doc = resolvEl("#{pageFlowScope.PARAM_DOC_TXN_ID}").toString();
            System.out.println("at filter sal proc doc is---" + doc + "cld--" + cld + "sloc--" + sloc + "ho-" + hoOrg +
                               "org-" + org);
            getHcmSalProc1().setNamedWhereClauseParam("BindDocTxnId", doc);

            getHcmSalProc1().setNamedWhereClauseParam("BindCldId", cld);
            getHcmSalProc1().setNamedWhereClauseParam("BindOrgId", org);
            getHcmSalProc1().setNamedWhereClauseParam("BindSlocId", sloc);
            getHcmSalProc1().setNamedWhereClauseParam("BindHoOrgId", hoOrg);
            getHcmSalProc1().setNamedWhereClauseParam("BindSalStatus", null);
            getHcmSalProc1().executeQuery();
        }
    }

    /**  To Set Bind variables in Master*/
    public void setBindVarInMasterVO()
    {
        String org = EbizParams.GLBL_APP_USR_ORG();
        ;
        String cld = EbizParams.GLBL_APP_CLD_ID();
        Integer sloc = EbizParams.GLBL_APP_SERV_LOC();
        String hoOrg = EbizParams.GLBL_HO_ORG_ID();
        ViewObjectImpl editVo = this.getHcmTimeMoveEdit1();
        editVo.setNamedWhereClauseParam("BindCldId", cld);
        editVo.setNamedWhereClauseParam("BindSlocId", sloc);
        editVo.setNamedWhereClauseParam("BindHoOrgId", hoOrg);
        editVo.setNamedWhereClauseParam("BindOrgId", org);
        editVo.executeQuery();

    }

    /**To Insert New Row in Master Vo at Enter New*/
    public void enterNewInHeader()
    {
        System.out.println("enterNewInHeader");
        ViewObjectImpl dummy1 = this.getDummy1();
        ViewObjectImpl timeMoveVo = this.getHcmTimeMoveEdit1();
        Row createRow = timeMoveVo.createRow();
        createRow.setAttribute("TimeCrt", dummy1.getCurrentRow().getAttribute("Critaria"));
        createRow.setAttribute("CrtVal", dummy1.getCurrentRow().getAttribute("CritariaValueId"));
        createRow.setAttribute("TimeFreq", dummy1.getCurrentRow().getAttribute("Frequency"));
        createRow.setAttribute("ProcFrmDt", dummy1.getCurrentRow().getAttribute("Fromdt"));
        createRow.setAttribute("ProcToDt", dummy1.getCurrentRow().getAttribute("ToDt"));
        timeMoveVo.insertRow(createRow);
        timeMoveVo.setCurrentRow(createRow);
        filterEmp();
    }

    /**To Filter Employee Table According To Selected Criteria*/
    public void filterEmp()
    {
        System.out.println("filterEmp");
        String org = EbizParams.GLBL_APP_USR_ORG();
        ;
        String cld = EbizParams.GLBL_APP_CLD_ID();
        Integer sloc = EbizParams.GLBL_APP_SERV_LOC();
        String hoOrg = EbizParams.GLBL_HO_ORG_ID();

        System.out.println("inside filter emp");
        ViewObjectImpl emp = this.getEmp2();
        ViewObjectImpl dummy1 = this.getDummy1();
        Row currentRow = dummy1.getCurrentRow();

        emp.setNamedWhereClauseParam("BindOrgId", org);
        emp.setNamedWhereClauseParam("BindCldId", cld);
        emp.setNamedWhereClauseParam("BindSlocId", sloc);
        emp.setNamedWhereClauseParam("BindHoOrgId", hoOrg);

        if (currentRow.getAttribute("Critaria").equals(51))
        {
            System.out.println("inside loc wise filter-" + dummy1.getCurrentRow().getAttribute("CritariaValueId"));
            emp.setNamedWhereClauseParam("BindLocId", dummy1.getCurrentRow().getAttribute("CritariaValueId"));
        }
        else
            emp.setNamedWhereClauseParam("BindLocId", null);
        if (currentRow.getAttribute("Critaria").equals(52))
        {
            emp.setNamedWhereClauseParam("BindDeptId", dummy1.getCurrentRow().getAttribute("CritariaValueId"));
        }
        else
            emp.setNamedWhereClauseParam("BindDeptId", null);
        if (currentRow.getAttribute("Critaria").equals(53))
        {
            emp.setNamedWhereClauseParam("BindGrpId", dummy1.getCurrentRow().getAttribute("CritariaValueId"));
        }
        else
            emp.setNamedWhereClauseParam("BindGrpId", null);
        if (currentRow.getAttribute("Critaria").equals(54))
        {
            emp.setNamedWhereClauseParam("BindDocId", dummy1.getCurrentRow().getAttribute("CritariaValueId"));
        }
        else
            emp.setNamedWhereClauseParam("BindDocId", null);

        emp.executeQuery();
        System.out.println("aft filter row count- " + emp.getEstimatedRowCount());

    }

    public void filterAllEmp()
    {
        String org = EbizParams.GLBL_APP_USR_ORG();
        String cld = EbizParams.GLBL_APP_CLD_ID();
        Integer sloc = EbizParams.GLBL_APP_SERV_LOC();
        String hoOrg = EbizParams.GLBL_HO_ORG_ID();

        ViewObjectImpl allemp = this.getLovAllEmpNm();
        allemp.executeQuery();
        allemp.setNamedWhereClauseParam("BindOrgId", org);
        allemp.setNamedWhereClauseParam("BindCldId", cld);
        allemp.setNamedWhereClauseParam("BindSlocId", sloc);
        allemp.setNamedWhereClauseParam("BindHoOrgId", hoOrg);
        allemp.executeQuery();
    }

    public void fltrTimeEditMultAttVo()
    {
        System.out.println("fltrTimeEditMultAttVo");
        searchMultiAttVo(null, null, null, null);
        Row currentRow = this.getDummy1().getCurrentRow();
        ViewObjectImpl emp = this.getHcmTimeMoveEditDtlFrMultAtt();
        String org = EbizParams.GLBL_APP_USR_ORG();
        String cld = EbizParams.GLBL_APP_CLD_ID();
        Integer sloc = EbizParams.GLBL_APP_SERV_LOC();
        String hoOrg = EbizParams.GLBL_HO_ORG_ID();
        emp.setNamedWhereClauseParam("BindOrgId", org);
        emp.setNamedWhereClauseParam("BindCldId", cld);
        emp.setNamedWhereClauseParam("BindSlocId", sloc);
        emp.setNamedWhereClauseParam("BindHoOrgId", hoOrg);
        emp.setNamedWhereClauseParam("bindFrmDt", currentRow.getAttribute("TransSalaryAttfrom"));
        emp.setNamedWhereClauseParam("bindToDt", currentRow.getAttribute("TransSalaryAttTo"));
        if (currentRow.getAttribute("Critaria").equals(51)) //location
        {
            emp.setNamedWhereClauseParam("bindEmpLocId", currentRow.getAttribute("CritariaValueId"));
            emp.setNamedWhereClauseParam("bindEmpDeptId", null);
            emp.setNamedWhereClauseParam("bindEmpGrpId", null);
        }
        if (currentRow.getAttribute("Critaria").equals(52)) //department
        {
            emp.setNamedWhereClauseParam("bindEmpDeptId", currentRow.getAttribute("CritariaValueId"));
            emp.setNamedWhereClauseParam("bindEmpGrpId", null);
            emp.setNamedWhereClauseParam("bindEmpLocId", null);
        }
        if (currentRow.getAttribute("Critaria").equals(53)) //grp
        {
            emp.setNamedWhereClauseParam("bindEmpGrpId", currentRow.getAttribute("CritariaValueId"));
            emp.setNamedWhereClauseParam("bindEmpDeptId", null);
            emp.setNamedWhereClauseParam("bindEmpLocId", null);
            System.out.println("row count afetr filter--" + emp.getEstimatedRowCount());
        }
        emp.executeQuery();
    }

    public void fltrMonSalComptVo()
    {
        System.out.println("fltrMonSalComptVo");
        searchTempCompVo(null, null, null);
        Row currentRow = this.getDummy1().getCurrentRow();
        ViewObjectImpl emp = this.getHcmEmpMonSalComp();
        String org = EbizParams.GLBL_APP_USR_ORG();
        String cld = EbizParams.GLBL_APP_CLD_ID();
        Integer sloc = EbizParams.GLBL_APP_SERV_LOC();
        String hoOrg = EbizParams.GLBL_HO_ORG_ID();
        emp.setNamedWhereClauseParam("BindOrgId", org);
        emp.setNamedWhereClauseParam("BindCldId", cld);
        emp.setNamedWhereClauseParam("BindSlocId", sloc);
        emp.setNamedWhereClauseParam("BindHoOrgId", hoOrg);
        emp.setNamedWhereClauseParam("bindFrmDt", currentRow.getAttribute("Fromdt"));
        emp.setNamedWhereClauseParam("bindToDt", currentRow.getAttribute("ToDt"));
        if (currentRow.getAttribute("Critaria").equals(51)) //location
        {
            emp.setNamedWhereClauseParam("bindEmpLocId", currentRow.getAttribute("CritariaValueId"));
            emp.setNamedWhereClauseParam("bindEmpDeptId", null);
            emp.setNamedWhereClauseParam("bindEmpGrpId", null);
        }
        if (currentRow.getAttribute("Critaria").equals(52)) //department
        {
            emp.setNamedWhereClauseParam("bindEmpDeptId", currentRow.getAttribute("CritariaValueId"));
            emp.setNamedWhereClauseParam("bindEmpGrpId", null);
            emp.setNamedWhereClauseParam("bindEmpLocId", null);
        }
        if (currentRow.getAttribute("Critaria").equals(53)) //grp
        {
            emp.setNamedWhereClauseParam("bindEmpGrpId", currentRow.getAttribute("CritariaValueId"));
            emp.setNamedWhereClauseParam("bindEmpDeptId", null);
            emp.setNamedWhereClauseParam("bindEmpLocId", null);
        }
        emp.executeQuery();
    }

    public void setCriteriaValues()
    {
        System.out.println("setCriteriaValues");
        ViewObjectImpl dummy1 = this.getDummy1();
        ViewObjectImpl multiAttVo = this.getHcmTimeMoveEditDtlFrMultAtt();

        Row crntRowfrDumy = dummy1.getCurrentRow();
        Row crntRowFrMultAtt = multiAttVo.getCurrentRow();
        if (crntRowfrDumy.getAttribute("Critaria").equals(51)) //location
        {
            crntRowFrMultAtt.setAttribute("EmpLocId", crntRowfrDumy.getAttribute("CritariaValueId"));
        }
        if (crntRowfrDumy.getAttribute("Critaria").equals(52)) //department
        {
            crntRowFrMultAtt.setAttribute("EmpDeptId", crntRowfrDumy.getAttribute("CritariaValueId"));
        }
        if (crntRowfrDumy.getAttribute("Critaria").equals(53)) //grp
        {
            crntRowFrMultAtt.setAttribute("EmpGrpId", crntRowfrDumy.getAttribute("CritariaValueId"));
        }
    }

    public void setNumberOfDays(String fromDt, String ToDt)
    {

        System.out.println("from date is" + fromDt + " to date is " + ToDt);
        HcmSalaryProcessingAppAMImpl am = (HcmSalaryProcessingAppAMImpl) this.getApplicationModule();
        ViewObjectImpl dummyVo1 = this.getMultipleAttendenceEntryDummy1();
        ViewObjectImpl dummyVoFrDates = this.getGetMultipleHolidayDates();
        if (fromDt != null && ToDt != null)
        {
            dummyVoFrDates.setNamedWhereClauseParam("p_PRD_START_DT", fromDt);
            dummyVoFrDates.setNamedWhereClauseParam("P_PRD_END_DT", ToDt);
            dummyVoFrDates.executeQuery();
            int i = 0;
            RowSetIterator crt = dummyVoFrDates.createRowSetIterator(null);
            while (crt.hasNext())
            {
                crt.next();
                i = i + 1;
            }
            System.out.println("Length is :::: " + i);
            if (i > 0)
            {
                System.out.println("Number of days are" + i);
                dummyVo1.getCurrentRow().setAttribute("transNumberOfDays", i);
            }

        }
    }

    public String insertMultipleAttenceRow(String fromDt, String ToDt)
    {
        String org = EbizParams.GLBL_APP_USR_ORG();
        String cld = EbizParams.GLBL_APP_CLD_ID();
        Integer sloc = EbizParams.GLBL_APP_SERV_LOC();
        String hoOrg = EbizParams.GLBL_HO_ORG_ID();
        Integer userId = EbizParams.GLBL_APP_USR();
        String WkOffChk = null;
        String HlfdayLeaveChk = null;
        Row currentRow = this.getMultipleAttendenceEntryDummy1().getCurrentRow();
        validateDateAndDeleteAlreadyExistsRow();
        ViewObjectImpl dummyVoFrDates = this.getGetMultipleHolidayDates();
        if (fromDt != null && ToDt != null)
        {
            dummyVoFrDates.setNamedWhereClauseParam("p_PRD_START_DT", fromDt);
            dummyVoFrDates.setNamedWhereClauseParam("P_PRD_END_DT", ToDt);
            dummyVoFrDates.executeQuery();
            int i = 0;
            RowSetIterator crt = dummyVoFrDates.createRowSetIterator(null);
            while (crt.hasNext())
            {
                if (currentRow != null)
                {
                    try
                    {
                        String doc_id = (String) currentRow.getAttribute("EmpDocId");
                        String DedCh = (String) currentRow.getAttribute("DedCh");
                        String EmpId = (String) currentRow.getAttribute("EmpId");
                        String EmpDeptId = (String) currentRow.getAttribute("EmpDeptId");
                        System.out.println("EmpDeptId is " + EmpDeptId);
                        String EmpLocId = (String) currentRow.getAttribute("EmpLocId");
                        String EmpGrpId = (String) currentRow.getAttribute("EmpGrpId");
                        if (currentRow.getAttribute("HlfdayLeaveChk") != null)
                        {
                            HlfdayLeaveChk = (String) currentRow.getAttribute("HlfdayLeaveChk");
                        }
                        else
                        {
                            HlfdayLeaveChk = "N";
                        }

                        String LeaveId = (String) currentRow.getAttribute("LeaveId");
                        if (currentRow.getAttribute("WkOffChk") != null)
                        {
                            WkOffChk = (String) currentRow.getAttribute("WkOffChk");
                        }
                        else
                        {
                            WkOffChk = "N";
                        }
                        Row r = this.getHcmTimeMoveEditDtlFrMultAtt().createRow();
                        r.setAttribute("CldId", cld);
                        r.setAttribute("SlocId", sloc);
                        r.setAttribute("HoOrgId", hoOrg);
                        r.setAttribute("OrgId", org);
                        r.setAttribute("EmpDocId", doc_id);
                        r.setAttribute("DedCh", DedCh);
                        r.setAttribute("UsrIdCreate", userId);
                        r.setAttribute("UsrIdCreateDt", (new Timestamp(System.currentTimeMillis())).dateValue());
                        r.setAttribute("EmpId", EmpId);
                        r.setAttribute("AttenDt", crt.next().getAttribute("Dates"));
                        r.setAttribute("HlfdayLeaveChk", HlfdayLeaveChk);
                        r.setAttribute("LeaveId", LeaveId);
                        r.setAttribute("WkOffChk", WkOffChk);
                        r.setAttribute("EmpDeptId", EmpDeptId);
                        r.setAttribute("EmpLocId", EmpLocId);
                        r.setAttribute("EmpGrpId", EmpGrpId);
                        r.setAttribute("ExtraTimeHr", currentRow.getAttribute("ExtraTimeHr"));
                        r.setAttribute("InTime", currentRow.getAttribute("InTime"));
                        r.setAttribute("OutTime", currentRow.getAttribute("OutTime"));

                    }
                    catch (Exception ex) {
                        ex.printStackTrace();
                    }
                    i = i + 1;
                }

            }

            if (i > 0)
            {
                return "Y";
            }
        }
        return "N";
    }


    public void setCriteriaValuesInDummyMultiAtt()
    {

        ViewObjectImpl dummyVo1 = this.getMultipleAttendenceEntryDummy1();
        dummyVo1.getCurrentRow().setAttribute("transNumberOfDays", 0);
        System.out.println("setCriteriaValuesInDummyMultiAtt");
        ViewObjectImpl dummy1 = this.getDummy1();
        ViewObjectImpl multiAttDummyVo = this.getMultipleAttendenceEntryDummy1();

        Row crntRowfrDumy = dummy1.getCurrentRow();
        Row crntRowFrMultAttDummy = multiAttDummyVo.getCurrentRow();
        if (crntRowFrMultAttDummy != null)
        {
            System.out.println("setting criteria vaalues for dummy");
            if (crntRowfrDumy.getAttribute("Critaria").equals(51)) //location
            {
                crntRowFrMultAttDummy.setAttribute("EmpLocId", crntRowfrDumy.getAttribute("CritariaValueId"));
            }
            if (crntRowfrDumy.getAttribute("Critaria").equals(52)) //department
            {
                crntRowFrMultAttDummy.setAttribute("EmpDeptId", crntRowfrDumy.getAttribute("CritariaValueId"));
            }
            if (crntRowfrDumy.getAttribute("Critaria").equals(53)) //grp
            {
                crntRowFrMultAttDummy.setAttribute("EmpGrpId", crntRowfrDumy.getAttribute("CritariaValueId"));
            }
        }

    }

    public void setCriteriaValuesInEmpMonSal()
    {
        System.out.println("setCriteriaValuesInEmpMonSal");
        String org = EbizParams.GLBL_APP_USR_ORG();
        String cld = EbizParams.GLBL_APP_CLD_ID();
        Integer sloc = EbizParams.GLBL_APP_SERV_LOC();
        Integer usr = EbizParams.GLBL_APP_USR();
        StringBuilder sbul = new StringBuilder("APP.get_txn_id(?,?,?,?,?,?)");
        Object[] obj =
        {
            cld, sloc, org, usr, 29502, 0
        };
        String doc_id = (String) ADFModelUtils.callFunction(this, sbul, obj, Types.VARCHAR);
        ViewObjectImpl dummy1 = this.getDummy1();
        ViewObjectImpl TempCompVo = this.getHcmEmpMonSalComp();

        Row crntRowfrDumy = dummy1.getCurrentRow();
        Row crntRowFrTempSalComp = TempCompVo.getCurrentRow();
        if (crntRowfrDumy.getAttribute("Critaria").equals(51)) //location
        {
            crntRowFrTempSalComp.setAttribute("EmpLocId", crntRowfrDumy.getAttribute("CritariaValueId"));
        }
        if (crntRowfrDumy.getAttribute("Critaria").equals(52)) //department
        {
            crntRowFrTempSalComp.setAttribute("EmpDeptId", crntRowfrDumy.getAttribute("CritariaValueId"));
        }
        if (crntRowfrDumy.getAttribute("Critaria").equals(53)) //grp
        {
            crntRowFrTempSalComp.setAttribute("EmpGrpId", crntRowfrDumy.getAttribute("CritariaValueId"));
        }
        crntRowFrTempSalComp.setAttribute("ProcFrmDt", crntRowfrDumy.getAttribute("Fromdt"));
        crntRowFrTempSalComp.setAttribute("ProcToDt", crntRowfrDumy.getAttribute("ToDt"));

        crntRowFrTempSalComp.setAttribute("DocId", doc_id);
    }

    /**Reset Search Panel And Result*/
    public void resetFilterEmp()
    {
        System.out.println("resetFilterEmp");
        ViewObjectImpl emp = this.getEmp2();
        ViewObjectImpl dummy1 = this.getDummy1();
        ViewObjectImpl edit1 = this.getHcmTimeMoveEdit1();
        emp.setNamedWhereClauseParam("BindOrgId", "^");
        edit1.setNamedWhereClauseParam("BindOrgId", "^");
        emp.executeQuery();
        dummy1.executeQuery();
        edit1.executeQuery();
        //getTimeCalendarEditorDetail1().executeQuery();
    }

    /**** Edit Calendar for an employee-------------*/
    public void editEmpCalendar(Row empCurrentRo, Timestamp attenDt)
    {
        if (empCurrentRo != null && attenDt != null)
        {
            System.out.println("Inside AM param not null");
            System.out.println("date is ---" + attenDt);
            System.out.println("doc Id in pop is--" + empCurrentRo.getAttribute("DocId"));
            ViewObjectImpl detail = this.getTimeCalendarEditorDetail1();
            Row current = detail.getCurrentRow();
            System.out.println("current row in editor detail is --" + current);
            current.setAttribute("EmpDocId", empCurrentRo.getAttribute("DocId"));
            current.setAttribute("AttenDt", attenDt);
            System.out.println("current row in editor detail is --" + current);
            //detail.executeQuery();
        }
    }

    /** Function Call to Populate Data in View(Calendar) Employee wise */
    public BigDecimal filterCalOnEmpTblSelection(String docId)
    {
        System.out.println("filterCalOnEmpTblSelection");
        BigDecimal rslt = null;
        if (docId != null && docId.length() > 0)
        {
            Timestamp frmDt = null;
            Timestamp toDt = null;
            ViewObjectImpl dummy1 = this.getDummy1();
            if (dummy1.getCurrentRow().getAttribute("Fromdt") != null)
            {
                frmDt = (Timestamp) dummy1.getCurrentRow().getAttribute("Fromdt");
            }
            if (dummy1.getCurrentRow().getAttribute("ToDt") != null)
            {
                toDt = (Timestamp) dummy1.getCurrentRow().getAttribute("ToDt");
            }
            String org = EbizParams.GLBL_APP_USR_ORG();
            ;
            String cld = EbizParams.GLBL_APP_CLD_ID();
            Integer sloc = EbizParams.GLBL_APP_SERV_LOC();
            String hoOrg = EbizParams.GLBL_HO_ORG_ID();

            rslt =
                (BigDecimal) ADFModelUtils.callFunction(this, new StringBuilder("FN_HCM_TIME_EDIT(?,?,?,?,?,?,?)"),
                                                        new Object[]
            {
                cld, sloc, hoOrg, org, docId, frmDt, toDt
            }, Types.NUMERIC);

            /* rslt = (BigDecimal) callStoredFunction(Types.NUMERIC, "FN_HCM_TIME_EDIT(?,?,?,?,?,?,?)", new Object[] {
                                                   cld, sloc, hoOrg, org, docId, frmDt, toDt
            }); */
            System.out.println("result for calendar data is --" + rslt);
            if (rslt.toString().equalsIgnoreCase("2"))
            {
                System.out.println("result is not zero---" + rslt);
                getCalendar1().setNamedWhereClauseParam("BindOrgId", org);
                getCalendar1().setNamedWhereClauseParam("BindCldId", cld);
                getCalendar1().setNamedWhereClauseParam("BindSlocId", sloc);
                getCalendar1().setNamedWhereClauseParam("BindHoOrgId", hoOrg);
                getCalendar1().executeQuery();
            }
            else
            {
                System.out.println("result is  zero---" + rslt);
                getCalendar1().setNamedWhereClauseParam("BindOrgId", "^");
                getCalendar1().setNamedWhereClauseParam("BindCldId", cld);
                getCalendar1().setNamedWhereClauseParam("BindSlocId", sloc);
                getCalendar1().setNamedWhereClauseParam("BindHoOrgId", hoOrg);
                getCalendar1().executeQuery();
                return rslt;
            }
        }
        return rslt;
    }


    public BigDecimal filterCalOnEmpFrMultAtt(String docId)
    {
        System.out.println("filterCalOnEmpFrMultAtt");
        BigDecimal rslt = null;
        if (docId != null && docId.length() > 0)
        {
            Timestamp frmDt = null;
            Timestamp toDt = null;
            ViewObjectImpl dummy1 = this.getDummy1();
            if (dummy1.getCurrentRow().getAttribute("Fromdt") != null)
            {
                frmDt = (Timestamp) dummy1.getCurrentRow().getAttribute("Fromdt");
            }
            if (dummy1.getCurrentRow().getAttribute("ToDt") != null)
            {
                toDt = (Timestamp) dummy1.getCurrentRow().getAttribute("ToDt");
            }
            String org = EbizParams.GLBL_APP_USR_ORG();
            ;
            String cld = EbizParams.GLBL_APP_CLD_ID();
            Integer sloc = EbizParams.GLBL_APP_SERV_LOC();
            String hoOrg = EbizParams.GLBL_HO_ORG_ID();
            rslt =
                (BigDecimal) ADFModelUtils.callFunction(this, new StringBuilder("FN_HCM_TIME_EDIT(?,?,?,?,?,?,?)"),
                                                        new Object[]
            {
                cld, sloc, hoOrg, org, docId, frmDt, toDt
            }, Types.NUMERIC);

            /*  rslt = (BigDecimal) callStoredFunction(Types.NUMERIC, "FN_HCM_TIME_EDIT(?,?,?,?,?,?,?)", new Object[] {
                                                   cld, sloc, hoOrg, org, docId, frmDt, toDt
            });  */
        }
        return rslt;
    }

    /**To Check group for attendance upload */
    public String chkGrpForAttenUpload()
    {
        System.out.println("chkGrpForAttenUpload");
        Row currentRow = getDummy1().getCurrentRow();
        Row[] filteredRows = getEmpGroupPrf1().getFilteredRows("GrpId", currentRow.getAttribute("CritariaValueId"));
        if (filteredRows.length > 0)
        {
            String chk = filteredRows[0].getAttribute("AttenUploadCh").toString();
            String skipChk = filteredRows[0].getAttribute("AttenSkipCh").toString();

            if (chk.equalsIgnoreCase("Y") && skipChk.equalsIgnoreCase("N"))
            {
                return "Y";
            }
            return "N";
        }
        return "N";
    }

    public String checkSkipAttenForEmp()
    {
        if (getEmp2().getCurrentRow().getAttribute("EmpGrpId") != null)
        {
            String empGrpId = getEmp2().getCurrentRow().getAttribute("EmpGrpId").toString();
            Row[] filteredRows = getEmpGroupPrf1().getFilteredRows("GrpId", empGrpId);
            if (filteredRows.length > 0)
            {
                String skipChk = filteredRows[0].getAttribute("AttenSkipCh").toString();
                if (skipChk.equalsIgnoreCase("Y"))
                {
                    return "Y";
                }
                return "N";
            }
            return "N";
        }
        return "N";
    }

    /**To Reset/blank Calendar on save and cancel */
    public void resetCalendarData()
    {
        getCalendar1().setNamedWhereClauseParam("BindOrgId", "");
        getCalendar1().executeQuery();
    }

    /**Check For Row in Detail Vo before popup open on calendar*/
    public String chkBeforePopOpen(Timestamp selectedDate)
    {
        if (this.getEmp2().getCurrentRow() != null /*&&
            this.getHcmTimeMoveEdit1().getCurrentRow().getAttribute("DocId") != null*/)
        {

            String doc = this.getEmp2().getCurrentRow().getAttribute("DocId").toString();
            // String hDoc = this.getHcmTimeMoveEdit1().getCurrentRow().getAttribute("DocId").toString();
            ViewObjectImpl detail1 = this.getTimeCalendarEditorDetail1();
            RowQualifier rq = new RowQualifier(detail1);
            System.out.println("date in side filter -->>" + selectedDate);
            //rq.setWhereClause("AttenDt='" + selectedDate + "' AND EmpDocId='" + doc + "' AND DocId='" + hDoc + "'");
            rq.setWhereClause("AttenDt='" + selectedDate + "' AND EmpDocId='" + doc + "'");
            Row[] filteredRows = detail1.getFilteredRows(rq);
            System.out.println("filtered rows length--" + filteredRows.length);
            if (filteredRows.length > 0)
            {
                extraTime = filteredRows[0].getAttribute("ExtraTimeHr");
                inTime = filteredRows[0].getAttribute("InTime");
                outTime = filteredRows[0].getAttribute("OutTime");
                transInTime = filteredRows[0].getAttribute("TransInTime");
                transOutTime = filteredRows[0].getAttribute("TransoutTime");
                leave = filteredRows[0].getAttribute("LeaveId");
                lwp = filteredRows[0].getAttribute("DedCh");
                getTimeCalendarEditorDetail1().setCurrentRow(filteredRows[0]);
                isRowExist = "Y";
                System.out.println("at popup open row found or not--" + isRowExist);
                return "Y";
            }
            else
            {
                isRowExist = "N";
                return "N";
            }
        }
        isRowExist = "N";
        return "N";
    }

    /**To check for Row at popup cancel event and to reset values*/
    public void chkOnCancelPop()
    {
        System.out.println("row found at cancel --" + isRowExist);
        if (isRowExist.equalsIgnoreCase("Y"))
        {
            System.out.println("row found settting previous value");
            ViewObjectImpl detail1 = this.getTimeCalendarEditorDetail1();
            detail1.getCurrentRow().setAttribute("ExtraTimeHr", extraTime);
            System.out.println("inTime at cancel--" + inTime);
            detail1.getCurrentRow().setAttribute("InTime", inTime);
            detail1.getCurrentRow().setAttribute("OutTime", outTime);
            detail1.getCurrentRow().setAttribute("TransInTime", transInTime);
            detail1.getCurrentRow().setAttribute("TransoutTime", transOutTime);
            detail1.getCurrentRow().setAttribute("LeaveId", leave);
            detail1.getCurrentRow().setAttribute("DedCh", lwp);
        }
        else if (isRowExist.equalsIgnoreCase("N"))
        {
            System.out.println("removing row at cancel");
            getTimeCalendarEditorDetail1().getCurrentRow().remove();
            getTimeCalendarEditorDetail1().executeQuery();
        }
    }

    /**To Filter Master Vo(TimeMovEditVo) while click on Edit Existing*/
    public String filterHeaderVo()
    {
        System.out.println("filterHeaderVo");
        ViewObjectImpl headerVo = this.getHcmTimeMoveEdit1();
        Row currentRow = this.getDummy1().getCurrentRow();
        RowQualifier rq = new RowQualifier(headerVo);
        rq.setWhereClause("ProcFrmDt='" + currentRow.getAttribute("Fromdt") + "' AND ProcToDt='" +
                          currentRow.getAttribute("ToDt") + "' AND CrtVal='" +
                          currentRow.getAttribute("CritariaValueId") + "'");
        Row[] filteredRows = headerVo.getFilteredRows(rq);

        if (filteredRows.length > 0)
        {
            headerVo.setCurrentRow(filteredRows[0]);
            System.out.println("Doc id for existing--" + filteredRows[0].getAttribute("DocId"));
            return "Y";
        }
        return "N";
    }

    /** To set in/out Time entered by user in detail table */
    public void setInOutTime()
    {
        Row currentRow = this.getTimeCalendarEditorDetail1().getCurrentRow();
        if (currentRow.getAttribute("TransInTime") != null && currentRow.getAttribute("TransoutTime") != null)
        {
            if (currentRow.getAttribute("TransInTime").equals("00:00"))
            {
                System.out.println("intime 0 found");
                currentRow.setAttribute("InTime", null);
            }
            else
            {
                Object in =
                    ADFModelUtils.callFunction(this, new StringBuilder("APP.fn_get_timestamp(?,?,?)"), new Object[]
                {
                    currentRow.getAttribute("AttenDt"), currentRow.getAttribute("TransInTime"), 0
                }, Types.TIMESTAMP);

                /*  Object in = callStoredFunction(Types.TIMESTAMP, "APP.fn_get_timestamp(?,?,?)", new Object[] {
                                               currentRow.getAttribute("AttenDt"),
                                               currentRow.getAttribute("TransInTime"), 0
                }); */
                System.out.println("Intime to set --" + in);
                currentRow.setAttribute("InTime", in);
            }
            if (currentRow.getAttribute("TransoutTime").equals("00:00"))
            {
                System.out.println("outtime 0 found");
                currentRow.setAttribute("OutTime", null);
            }
            else
            {
                Object out =
                    ADFModelUtils.callFunction(this, new StringBuilder("APP.fn_get_timestamp(?,?,?)"), new Object[]
                {
                    currentRow.getAttribute("AttenDt"), currentRow.getAttribute("TransoutTime"), 0
                }, Types.TIMESTAMP);

                /*   Object out = callStoredFunction(Types.TIMESTAMP, "APP.fn_get_timestamp(?,?,?)", new Object[] {
                                                currentRow.getAttribute("AttenDt"),
                                                currentRow.getAttribute("TransoutTime"), 0
                }); */
                System.out.println("outTime to set --" + out);
                currentRow.setAttribute("OutTime", out);
            }
        }
    }

    public void setInOutTimefrMultAtt() // setting in out time for multipple attendence.
    {
        Row currentRow = this.getHcmTimeMoveEditDtlFrMultAtt().getCurrentRow();
        if (currentRow.getAttribute("TransInTime") != null && currentRow.getAttribute("TransoutTime") != null)
        {
            if (currentRow.getAttribute("TransInTime").equals("00:00"))
            {
                System.out.println("intime 0 found");
                currentRow.setAttribute("InTime", null);
            }
            else
            {
                Object in =
                    ADFModelUtils.callFunction(this, new StringBuilder("APP.fn_get_timestamp(?,?,?)"), new Object[]
                {
                    currentRow.getAttribute("AttenDt"), currentRow.getAttribute("TransInTime"), 0
                }, Types.TIMESTAMP);

                /*  Object in = callStoredFunction(Types.TIMESTAMP, "APP.fn_get_timestamp(?,?,?)", new Object[] {
                                               currentRow.getAttribute("AttenDt"),
                                               currentRow.getAttribute("TransInTime"), 0
                }); */
                System.out.println("Intime to set --" + in);
                currentRow.setAttribute("InTime", in);
            }
            if (currentRow.getAttribute("TransoutTime").equals("00:00"))
            {
                System.out.println("outtime 0 found");
                currentRow.setAttribute("OutTime", null);
            }
            else
            {
                Object out =
                    ADFModelUtils.callFunction(this, new StringBuilder("APP.fn_get_timestamp(?,?,?)"), new Object[]
                {
                    currentRow.getAttribute("AttenDt"), currentRow.getAttribute("TransoutTime"), 0
                }, Types.TIMESTAMP);

                /* Object out = callStoredFunction(Types.TIMESTAMP, "APP.fn_get_timestamp(?,?,?)", new Object[] {
                                                currentRow.getAttribute("AttenDt"),
                                                currentRow.getAttribute("TransoutTime"), 0
                }); */
                System.out.println("outTime to set --" + out);
                currentRow.setAttribute("OutTime", out);
            }
        }
    }


    /**To calculate Extra Time on Pop Up */

    public Number calcExtraTime(String newInTime, String newOutTime)
    {
        Number extTime = new Number(0);
        if (newInTime != null && newOutTime != null)
        {
            Row currentRow = this.getTimeCalendarEditorDetail1().getCurrentRow();
            Object empDoc = currentRow.getAttribute("EmpDocId");
            Object attDate = currentRow.getAttribute("AttenDt");
            Object inTime = newInTime;
            Object in = ADFModelUtils.callFunction(this, new StringBuilder("APP.fn_get_timestamp(?,?,?)"), new Object[]
            {
                attDate, inTime, 0
            }, Types.TIMESTAMP);

            /*  Object in = callStoredFunction(Types.TIMESTAMP, "APP.fn_get_timestamp(?,?,?)", new Object[] {
                                           attDate, inTime, 0
            }); */
            Timestamp intym = new Timestamp(in.toString());
            Object outTime = newOutTime;
            Object out = ADFModelUtils.callFunction(this, new StringBuilder("APP.fn_get_timestamp(?,?,?)"), new Object[]
            {
                attDate, outTime, 0
            }, Types.TIMESTAMP);

            /* Object out = callStoredFunction(Types.TIMESTAMP,
             *                                 "APP.fn_get_timestamp(?,?,?)",
             *                                 new Object[] { attDate, outTime, 0
            }); */
            Timestamp outtym = new Timestamp(out.toString());


            System.out.println("in time for extra calc--" + in);
            System.out.println("out time for extra calc--" + out);
            BigDecimal rslt =
                (BigDecimal) ADFModelUtils.callFunction(this, new StringBuilder("FN_HCM_CALC_EXT_TM(?,?,?)"),
                                                        new Object[]
            {
                empDoc, intym, outtym
            }, Types.NUMERIC);
            /* BigDecimal rslt = (BigDecimal) callStoredFunction(Types.NUMERIC, "FN_HCM_CALC_EXT_TM(?,?,?)", new Object[] {
                                                              empDoc, intym, outtym
            }); */
            System.out.println("extra Time is---" + extraTime);
            //currentRow.setAttribute("ExtraTimeHr", extraTime);

            try
            {
                extTime = new Number(rslt);
            }
            catch (SQLException e) {
            }
            return extTime;
        }
        return extTime;
    }

    public Number calcExtraTimeFrMultiAtt(String newInTime, String newOutTime)
    {
        Number extTime = new Number(0);
        if (newInTime != null && newOutTime != null)
        {
            Row currentRow = this.getHcmTimeMoveEditDtlFrMultAtt().getCurrentRow();
            Object empDoc = currentRow.getAttribute("EmpDocId");
            Object attDate = currentRow.getAttribute("AttenDt");
            Object inTime = newInTime;
            Object in = ADFModelUtils.callFunction(this, new StringBuilder("APP.fn_get_timestamp(?,?,?)"), new Object[]
            {
                attDate, inTime, 0
            }, Types.TIMESTAMP);

            /*   Object in = callStoredFunction(Types.TIMESTAMP, "APP.fn_get_timestamp(?,?,?)", new Object[] {
                                           attDate, inTime, 0
            }); */
            Timestamp intym = new Timestamp(in.toString());
            Object outTime = newOutTime;
            Object out = ADFModelUtils.callFunction(this, new StringBuilder("APP.fn_get_timestamp(?,?,?)"), new Object[]
            {
                attDate, outTime, 0
            }, Types.TIMESTAMP);

            /* Object out = callStoredFunction(Types.TIMESTAMP, "APP.fn_get_timestamp(?,?,?)", new Object[] {
                                            attDate, outTime, 0
            }) */;
            Timestamp outtym = new Timestamp(out.toString());


            System.out.println("in time for extra calc--" + in);
            System.out.println("out time for extra calc--" + out);
            BigDecimal rslt =
                (BigDecimal) ADFModelUtils.callFunction(this, new StringBuilder("FN_HCM_CALC_EXT_TM(?,?,?)"),
                                                        new Object[]
            {
                empDoc, intym, outtym
            }, Types.NUMERIC);

            /* BigDecimal rslt = (BigDecimal) callStoredFunction(Types.NUMERIC, "FN_HCM_CALC_EXT_TM(?,?,?)", new Object[] {
                                                              empDoc, intym, outtym
            }); */
            System.out.println("extra Time is---" + extraTime);
            //currentRow.setAttribute("ExtraTimeHr", extraTime);

            try
            {
                extTime = new Number(rslt);
            }
            catch (SQLException e) {
            }
            return extTime;
        }
        return extTime;
    }

    /** FUNCTION CALL TO CHECK LAST PROCESSED SALARY AND STATUS*/
    public BigDecimal chkSalProcStatus()
    {
        System.out.println("chkSalProcStatus");
        ViewObjectImpl dummy1 = this.getDummy1();
        String docCrtId = null;
        Timestamp frmDt = null;
        Timestamp toDt = null;
        String org = EbizParams.GLBL_APP_USR_ORG();
        ;
        String cld = EbizParams.GLBL_APP_CLD_ID();
        Integer sloc = EbizParams.GLBL_APP_SERV_LOC();
        String hoOrg = EbizParams.GLBL_HO_ORG_ID();
        if (dummy1.getCurrentRow().getAttribute("CritariaValueId") != null)
        {
            docCrtId = dummy1.getCurrentRow().getAttribute("CritariaValueId").toString();
        }
        if (dummy1.getCurrentRow().getAttribute("Fromdt") != null)
        {
            frmDt = (Timestamp) dummy1.getCurrentRow().getAttribute("Fromdt");
        }
        if (dummy1.getCurrentRow().getAttribute("ToDt") != null)
        {
            toDt = (Timestamp) dummy1.getCurrentRow().getAttribute("ToDt");
        }
        //HcmSalaryProcessingAppAMImpl am = (HcmSalaryProcessingAppAMImpl) this.getRootApplicationModule();
        StringBuilder sbul = new StringBuilder("HCM.FN_HCM_SAL_CHK(?,?,?,?,?,?)");
        Object[] obj =
        {
            cld, sloc, hoOrg, org, docCrtId, frmDt
        };
        BigDecimal rslt = (BigDecimal) ADFModelUtils.callFunction(this, sbul, obj, Types.NUMERIC);

        /*   BigDecimal rslt = (BigDecimal) callStoredFunction(Types.NUMERIC, "HCM.FN_HCM_SAL_CHK(?,?,?,?,?,?)", new Object[] {
                                                          cld, sloc, hoOrg, org, docCrtId, frmDt
        }); */

        System.out.println("salpRocStaus CHk Result is--" + rslt);
        return rslt;
        //return new BigDecimal(1);

    }

    /** Function Call To Process Salary */
    public BigDecimal salaryProcess()
    {
        System.out.println("salaryProcess");
        Timestamp frmDt = null;
        Timestamp toDt = null;
        String docCrtId = null;
        String doc = null;
        ViewObjectImpl dummy1 = this.getDummy1();
        Integer crt = Integer.parseInt(dummy1.getCurrentRow().getAttribute("Critaria").toString());
        if (dummy1.getCurrentRow().getAttribute("Fromdt") != null)
        {
            frmDt = (Timestamp) dummy1.getCurrentRow().getAttribute("Fromdt");
        }
        if (dummy1.getCurrentRow().getAttribute("ToDt") != null)
        {
            toDt = (Timestamp) dummy1.getCurrentRow().getAttribute("ToDt");
        }
        if (dummy1.getCurrentRow().getAttribute("CritariaValueId") != null)
        {
            docCrtId = dummy1.getCurrentRow().getAttribute("CritariaValueId").toString();
        }
        String org = EbizParams.GLBL_APP_USR_ORG();
        String cld = EbizParams.GLBL_APP_CLD_ID();
        Integer sloc = EbizParams.GLBL_APP_SERV_LOC();
        String hoOrg = EbizParams.GLBL_HO_ORG_ID();
        Integer usr = EbizParams.GLBL_APP_USR();


        if (crt == 54)
        {
            getHcmSalProc1().setNamedWhereClauseParam("BindCldId", cld);
            getHcmSalProc1().setNamedWhereClauseParam("BindOrgId", org);
            getHcmSalProc1().setNamedWhereClauseParam("BindSlocId", sloc);
            getHcmSalProc1().setNamedWhereClauseParam("BindHoOrgId", hoOrg);
            getHcmSalProc1().executeQuery();

            RowQualifier rq = new RowQualifier(getHcmSalProc1());
            rq.setWhereClause("ProcFrmDt='" + frmDt + "' AND ProcToDt='" + toDt + "' AND EmpDocId='" + docCrtId);

            Row[] filteredRows = getHcmSalProc1().getFilteredRows(rq);
            System.out.println("for an employee going to process salary rows in sal proc-->" + filteredRows.length);
            if (filteredRows.length > 0)
            {
                // doc = filteredRows[0].getAttribute("DocId").toString();
                // HcmSalaryProcessingAppAMImpl am = (HcmSalaryProcessingAppAMImpl) this.getRootApplicationModule();
                StringBuilder sbul = new StringBuilder("APP.get_txn_id(?,?,?,?,?,?)");
                Object[] obj =
                {
                    cld, sloc, org, usr, 29502, 0
                };
                doc =
                    (String) ADFModelUtils.callFunction(this, sbul, obj, Types.VARCHAR); //setCriteriaValuesInEmpMonSal
                /*  doc = (String) callStoredFunction(Types.VARCHAR, "APP.get_txn_id(?,?,?,?,?,?)", new Object[] {
                                                  cld, sloc, org, usr, 29502, 0
                }); */
                System.out.println("row found for an employee old doc is--->" + doc);
            }

            else
            {
                System.out.println("for emp in sal proc row count is zero new doc will pass");
                //HcmSalaryProcessingAppAMImpl am = (HcmSalaryProcessingAppAMImpl) this.getRootApplicationModule();
                StringBuilder sbul = new StringBuilder("APP.get_txn_id(?,?,?,?,?,?)");
                Object[] obj =
                {
                    cld, sloc, org, usr, 29502, 0
                };
                doc = (String) ADFModelUtils.callFunction(this, sbul, obj, Types.VARCHAR);
                /* doc = (String) callStoredFunction(Types.VARCHAR, "APP.get_txn_id(?,?,?,?,?,?)", new Object[] {
                                                  cld, sloc, org, usr, 29502, 0
                }); */
            }

        }
        else
        {
            //HcmSalaryProcessingAppAMImpl am = (HcmSalaryProcessingAppAMImpl) this.getRootApplicationModule();
            StringBuilder sbul = new StringBuilder("APP.get_txn_id(?,?,?,?,?,?)");
            Object[] obj =
            {
                cld, sloc, org, usr, 29502, 0
            };
            doc = (String) ADFModelUtils.callFunction(this, sbul, obj, Types.VARCHAR);

            /*  doc = (String) callStoredFunction(Types.VARCHAR, "APP.get_txn_id(?,?,?,?,?,?)", new Object[] {
                                              cld, sloc, org, usr, 29502, 0
            }); */
        }
        System.out.println("criteria value in function---" + docCrtId);
        System.out.println("from date in function--" + frmDt);
        System.out.println("To date in function--" + toDt);
        System.out.println("doc id passing in salry processs---" + doc);
        System.out.println("criteria passing in salry processs function---" + crt);

        //HcmSalaryProcessingAppAMImpl am = (HcmSalaryProcessingAppAMImpl) this.getRootApplicationModule();
        StringBuilder sbul = new StringBuilder("HCM.FN_HCM_PROC_SAL(?,?,?,?,?,?,?,?,?,?)");
        Object[] obj =
        {
            cld, sloc, hoOrg, org, docCrtId, frmDt, toDt, doc, crt, usr
        };
        BigDecimal rslt = (BigDecimal) ADFModelUtils.callFunction(this, sbul, obj, Types.NUMERIC);

        /*   BigDecimal rslt = (BigDecimal) callStoredFunction(Types.NUMERIC, "HCM.FN_HCM_PROC_SAL(?,?,?,?,?,?,?,?,?)", new Object[] {
                                                          cld, sloc, hoOrg, org, docCrtId, frmDt, toDt, doc, crt
        }); */
        System.out.println("Salary Process Result is--" + rslt);
        return rslt;
    }


    public String checkValidEmpId(String empId)
    {
        String org_id = EbizParams.GLBL_APP_USR_ORG();
        ;
        String cld_id = EbizParams.GLBL_APP_CLD_ID();
        Integer sloc_id = EbizParams.GLBL_APP_SERV_LOC();
        String ho_org_id = EbizParams.GLBL_HO_ORG_ID();
        //get empdocid from empid
        this.getEmp2().setNamedWhereClauseParam("BindOrgId", org_id);
        this.getEmp2().setNamedWhereClauseParam("BindSlocId", sloc_id);
        this.getEmp2().setNamedWhereClauseParam("BindHoOrgId", ho_org_id);
        this.getEmp2().setNamedWhereClauseParam("BindCldId", cld_id);
        this.getEmp2().executeQuery();
        Row[] fr = this.getEmp2().getFilteredRows("EmpId", empId);
        if (fr.length > 0)
            return "Y";
        else
            return "N";
    }


    public String checkValidAttnDt(String attnDt)
    {
        System.out.println("checkValidAttnDt");
        java.util.Date atdt = null;
        SimpleDateFormat format = new SimpleDateFormat("dd-MMM-yyyy");
        String flg = "Y";
        try
        {
            atdt = format.parse(attnDt);
            java.sql.Date strtDt = ((Timestamp) this.getDummy1().getCurrentRow().getAttribute("Fromdt")).dateValue();
            java.sql.Date endDt = ((Timestamp) this.getDummy1().getCurrentRow().getAttribute("ToDt")).dateValue();
            //--------code start
            if (strtDt.compareTo(atdt) > 0)
            {
                if (strtDt.toString().equals(atdt.toString()))
                {
                }
                else
                {
                    flg = "N";
                }
            }
            else if (atdt.compareTo(endDt) > 0)
            {
                if (atdt.toString().equals(endDt.toString()))
                {
                }
                else
                {
                    flg = "N";
                }
            }
            //--------code end
        }
        catch (Exception e) {
            System.out.println("Error during parse");
            e.printStackTrace();
            return "N";
        }
        return flg;
    }


    public String checkValidLeaveNm(String leaveNm)
    {
        if (leaveNm != null && leaveNm.toString().length() > 0)
        {
            String org_id = EbizParams.GLBL_APP_USR_ORG();
            ;
            String cld_id = EbizParams.GLBL_APP_CLD_ID();
            Integer sloc_id = EbizParams.GLBL_APP_SERV_LOC();
            String ho_org_id = EbizParams.GLBL_HO_ORG_ID();

            //get Leave  Id
            this.getLovLeave().setNamedWhereClauseParam("BindCldId", cld_id);
            this.getLovLeave().setNamedWhereClauseParam("BindEmpDocId", null);
            this.getLovLeave().setNamedWhereClauseParam("BindAttenDate", null);
            this.getLovLeave().setNamedWhereClauseParam("BindHoOrgId", ho_org_id);
            this.getLovLeave().setNamedWhereClauseParam("BindOrgId", org_id);
            this.getLovLeave().setNamedWhereClauseParam("BindSlocId", sloc_id);
            this.getLovLeave().executeQuery();
            Row frleave[] = this.getLovLeave().getFilteredRows("LeaveNm", leaveNm);
            System.out.println("No. of filtered Rows =" + frleave.length);
            if (frleave.length > 0)
                return "Y";
            else
                return "N";
        }
        else
            return "Y";
    }

    public String checkValidInTime(String inTime)
    {
        Object object = null;
        if (inTime != null)
        {
            //System.out.println("current Date get value at in time----" + new Timestamp(System.currentTimeMillis()));
            object = ADFModelUtils.callFunction(this, new StringBuilder("APP.fn_get_timestamp(?,?,?)"), new Object[]
            {
                new Timestamp(System.currentTimeMillis()), inTime, 0
            }, Types.TIMESTAMP);


            /*  object = callStoredFunction(Types.TIMESTAMP, "APP.fn_get_timestamp(?,?,?)", new Object[] {
                                        new Timestamp(System.currentTimeMillis()), inTime, 0
            }); */
            try
            {
                Timestamp t = new Timestamp(object.toString());
            }
            catch (Exception e) {
                return "N";
            }
        }
        return "Y";
    }

    public String checkValidOutTime(String outTime)
    {
        Object object = null;
        if (outTime != null)
        {

            object = ADFModelUtils.callFunction(this, new StringBuilder("APP.fn_get_timestamp(?,?,?)"), new Object[]
            {
                new Timestamp(System.currentTimeMillis()), outTime, 0
            }, Types.TIMESTAMP);

            /* object = callStoredFunction(Types.TIMESTAMP, "APP.fn_get_timestamp(?,?,?)", new Object[] {
                                        new Timestamp(System.currentTimeMillis()), outTime, 0
            }); */
            try
            {
                Timestamp t = new Timestamp(object.toString());
            }
            catch (Exception e) {
                return "N";
            }
        }
        return "Y";
    }

    public String checkValidExtraTime(Number extraTimeHr)
    {
        return "Y";
    }

    public void addEntryInDBFromExcel(String empId, Date attDt, String leaveNm, String inTime, String outTime,
                                      Number extHr)
    {

        System.out.println("Entry in VO for empid==>" + empId);
        String org_id = EbizParams.GLBL_APP_USR_ORG();
        Timestamp atenDt = null;
        String cld_id = EbizParams.GLBL_APP_CLD_ID();
        Integer sloc_id = EbizParams.GLBL_APP_SERV_LOC();
        String ho_org_id = EbizParams.GLBL_HO_ORG_ID();

        String userid = resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString();
        //String docId = (String) this.getHcmTimeMoveEdit1().getCurrentRow().getAttribute("DocId");

        Row r = this.getHcmTimeMoveFlat1().createRow();
        r.setAttribute("CldId", cld_id);
        r.setAttribute("SlocId", sloc_id);
        r.setAttribute("HoOrgId", ho_org_id);
        r.setAttribute("OrgId", org_id);
        Row row = this.getTimeCalendarEditorDetail1().createRow();
        row.setAttribute("CldId", cld_id);
        row.setAttribute("SlocId", sloc_id);
        row.setAttribute("HoOrgId", ho_org_id);
        row.setAttribute("OrgId", org_id);

        // r.setAttribute("DocId", docId);
        //System.out.println("Entry in VO docid==>" + docId);

        //get empdocid from empid
        this.getEmp2().setNamedWhereClauseParam("BindOrgId", org_id);
        this.getEmp2().setNamedWhereClauseParam("BindSlocId", sloc_id);
        this.getEmp2().setNamedWhereClauseParam("BindHoOrgId", ho_org_id);
        this.getEmp2().setNamedWhereClauseParam("BindCldId", cld_id);
        this.getEmp2().executeQuery();
        Row[] fr = this.getEmp2().getFilteredRows("EmpId", empId);
        if (fr.length > 0)
        {
            r.setAttribute("EmpDocId", fr[0].getAttribute("DocId"));
            r.setAttribute("EmpGrpId", fr[0].getAttribute("EmpGrpId"));
            r.setAttribute("EmpDeptId", fr[0].getAttribute("EmpDeptId"));
            r.setAttribute("EmpLocId", fr[0].getAttribute("EmpLocId"));
            r.setAttribute("EmpId", empId);

            row.setAttribute("EmpDocId", fr[0].getAttribute("DocId"));
            row.setAttribute("EmpGrpId", fr[0].getAttribute("EmpGrpId"));
            row.setAttribute("EmpDeptId", fr[0].getAttribute("EmpDeptId"));
            row.setAttribute("EmpLocId", fr[0].getAttribute("EmpLocId"));
            row.setAttribute("EmpId", empId);


        }
        else
        {
            r.setAttribute("EmpDocId", null);
            row.setAttribute("EmpDocId", null);
        }

        //get Leave  Id
        this.getLovLeave().setNamedWhereClauseParam("BindCldId", cld_id);
        this.getLovLeave().setNamedWhereClauseParam("BindEmpDocId", fr[0].getAttribute("DocId"));
        this.getLovLeave().setNamedWhereClauseParam("BindAttenDate", null);
        this.getLovLeave().setNamedWhereClauseParam("BindHoOrgId", ho_org_id);
        this.getLovLeave().setNamedWhereClauseParam("BindOrgId", org_id);
        this.getLovLeave().setNamedWhereClauseParam("BindSlocId", sloc_id);
        this.getLovLeave().executeQuery();
        Row frleave[] = this.getLovLeave().getFilteredRows("LeaveNm", leaveNm);
        if (frleave.length > 0)
        {
            r.setAttribute("LeaveId", frleave[0].getAttribute("LeaveId"));
            row.setAttribute("LeaveId", frleave[0].getAttribute("LeaveId"));
        }
        else
        {
            r.setAttribute("LeaveId", null);
            row.setAttribute("LeaveId", null);
        }
        atenDt = new Timestamp(attDt);
        System.out.println("att date to set with in/out time--->" + atenDt);
        r.setAttribute("AttenDt", attDt);
        r.setAttribute("ExtraTimeHr", extHr);
        r.setAttribute("UsrIdCreate", userid);
        r.setAttribute("UsrIdCreateDt", new Timestamp(System.currentTimeMillis()));

        row.setAttribute("AttenDt", attDt);
        row.setAttribute("ExtraTimeHr", extHr);
        row.setAttribute("UsrIdCreate", userid);
        row.setAttribute("UsrIdCreateDt", new Timestamp(System.currentTimeMillis()));

        if (inTime != null)
        {

            Object object =
                ADFModelUtils.callFunction(this, new StringBuilder("APP.fn_get_timestamp(?,?,?)"), new Object[]
            {
                atenDt, inTime, 0
            }, Types.TIMESTAMP);

            /* Object object = callStoredFunction(Types.TIMESTAMP, "APP.fn_get_timestamp(?,?,?)", new Object[] {
                                               new Timestamp(System.currentTimeMillis()), inTime, 0
            }); */
            r.setAttribute("InTime", object);
            row.setAttribute("InTime", object);
        }
        else
        {
            r.setAttribute("InTime", null);
            row.setAttribute("InTime", null);
        }


        if (outTime != null)
        {
            Object object =
                ADFModelUtils.callFunction(this, new StringBuilder("APP.fn_get_timestamp(?,?,?)"), new Object[]
            {
                atenDt, outTime, 0
            }, Types.TIMESTAMP);

            /*
            Object object = callStoredFunction(Types.TIMESTAMP, "APP.fn_get_timestamp(?,?,?)", new Object[] {
                                               new Timestamp(System.currentTimeMillis()), outTime, 0
            }); */
            r.setAttribute("OutTime", object);
            row.setAttribute("OutTime", object);
        }
        else
        {
            r.setAttribute("OutTime", null);
            row.setAttribute("OutTime", null);
        }
        this.getTimeCalendarEditorDetail1().insertRow(row);
        this.getHcmTimeMoveFlat1().insertRow(r);
        System.out.println(":Inserted Row=" + r.getAttribute("EmpDocId") + " " + r.getAttribute("LeaveId") + " " +
                           r.getAttribute("AttenDt") + " " + r.getAttribute("InTime") + " " +
                           r.getAttribute("OutTime") + " " + r.getAttribute("ExtraTimeHr"));
    }

    public String fltrHcmTimeEditMultAttVo()
    {
        fltrTimeEditMultAttVo();
        filterAllEmp();
        this.getMultipleAttendenceEntryDummy1().executeQuery();
        this.getGetMultipleHolidayDates().executeQuery();
        return "Y";
    }

    public String fltrHcmEmpMonSalComptVo()
    {
        fltrMonSalComptVo();
        filterAllEmp();
        return "Y";
    }

    public String filterSalProcTxn()
    {
        System.out.println("filterSalProcTxn");
        String org = EbizParams.GLBL_APP_USR_ORG();
        String cld = EbizParams.GLBL_APP_CLD_ID();
        Integer sloc = EbizParams.GLBL_APP_SERV_LOC();
        String hoOrg = EbizParams.GLBL_HO_ORG_ID();
        getHcmSalProcTxn1().setNamedWhereClauseParam("BindCldId", cld);
        getHcmSalProcTxn1().setNamedWhereClauseParam("BindOrgId", org);
        getHcmSalProcTxn1().setNamedWhereClauseParam("BindSlocId", sloc);
        getHcmSalProcTxn1().setNamedWhereClauseParam("BindHoOrgId", hoOrg);
        getHcmSalProcTxn1().executeQuery();

        Row currentRow = getDummy1().getCurrentRow();
        Object crt = currentRow.getAttribute("Critaria");
        RowQualifier rq = new RowQualifier(getHcmSalProcTxn1());
        rq.setWhereClause("ProcFrmDt='" + currentRow.getAttribute("Fromdt") + "' AND ProcToDt='" +
                          currentRow.getAttribute("ToDt") + "' AND ProcCrtVal='" +
                          currentRow.getAttribute("CritariaValueId") + "'And ProcCrt='" + crt);

        Row[] filteredRows = getHcmSalProcTxn1().getFilteredRows(rq);
        System.out.println("lenght in salproctxn---" + filteredRows.length);
        if (filteredRows.length > 0)
        {
            String docTxn = filteredRows[0].getAttribute("DocId").toString();
            System.out.println("doc txn in salproctxn is--" + docTxn);
            return docTxn;
        }
        return "N";
    }


    public String getUsrName(Integer usrId)
    {
        Integer sloc = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        this.getAppSecUsr1().setNamedWhereClauseParam("BindSlocId", sloc);
        getAppSecUsr1().executeQuery();
        Row[] r = this.getAppSecUsr1().getFilteredRows("UsrId", usrId);
        if (r.length > 0)
            return (String) r[0].getAttribute("UsrName");
        else
            return null;
    }


    //------------------------WF Methods--------------------------
    private static int INTEGER = Types.NUMERIC;
    private static int DATE = Types.DATE;
    private static int STRING = Types.VARCHAR;
    private static int NUMBER = Types.NUMERIC;

    public String getWfNo(Integer sloc_id, String cld_id, String org_id, Integer doc_no)
    {

        System.out.println("Sloc=" + sloc_id + " and cld_id=" + cld_id + "and org_id=" + org_id + " and doc_no=" +
                           doc_no);
        Object obj = ADFModelUtils.callFunction(this, new StringBuilder("APP.WF_GET_ID(?,?,?,?,?)"), new Object[]
        {
            sloc_id, cld_id, org_id, doc_no, 0
        }, Types.VARCHAR);

        /* Object obj = callStoredFunction(Types.VARCHAR, "APP.WF_GET_ID(?,?,?,?,?)", new Object[] {
                                        sloc_id, cld_id, org_id, doc_no, 0
        }); */
        if(obj!=null)
        {
            return obj.toString();
        }
        else
        {
            return null;
        }
        
    }

    public Integer pendingCheck(Integer SlocId, String CldId, String OrgId, Integer DocNo)
    {
        System.out.println("inside pending check method");
        Row curr = this.getHcmSalProc1().getCurrentRow();
        String docIdTxn = curr.getAttribute("DocId").toString();
        System.out.println("DOCIDTXN--" + docIdTxn);
        Object obj = ADFModelUtils.callFunction(this, new StringBuilder("APP.WF_GET_CUR_USR(?,?,?,?,?,?)"), new Object[]
        {
            SlocId, CldId, OrgId, DocNo, docIdTxn, 0
        }, NUMBER);

        /*  Object obj = callStoredFunction(NUMBER, "APP.WF_GET_CUR_USR(?,?,?,?,?,?)", new Object[] {
                                        SlocId, CldId, OrgId, DocNo, docIdTxn, 0
        }); */
        Integer usrId = null;
        if (obj != null)
        {
            usrId = Integer.parseInt(obj.toString());
        }
        System.out.println("User id pending in impl--" + usrId);
        return usrId;
    }

    public Integer pendingCheckEncash(Integer SlocId, String CldId, String OrgId, Integer DocNo)
    {
        System.out.println("inside pending check method");
        Row curr = this.getHcmEmpLeaveEncsh1().getCurrentRow();
        String docIdTxn = curr.getAttribute("DocId").toString();
        System.out.println("DOCIDTXN--" + docIdTxn);
        Object obj = ADFModelUtils.callFunction(this, new StringBuilder("APP.WF_GET_CUR_USR(?,?,?,?,?,?)"), new Object[]
        {
            SlocId, CldId, OrgId, DocNo, docIdTxn, 0
        }, NUMBER);

        /*  Object obj = callStoredFunction(NUMBER, "APP.WF_GET_CUR_USR(?,?,?,?,?,?)", new Object[] {
                                        SlocId, CldId, OrgId, DocNo, docIdTxn, 0
        }); */
        Integer usrId = null;
        if (obj != null)
        {
            usrId = Integer.parseInt(obj.toString());
        }
        System.out.println("User id pending in impl--" + usrId);
        return usrId;
    }


    public Integer getUsrLvl(Integer SlocId, String CldId, String OrgId, Integer usr_id, String WfNum, String DocNo)
    {

        return Integer.parseInt(ADFModelUtils.callFunction(this,
                                                           new StringBuilder("APP.WF_GET_USR_LEVEL(?,?,?,?,?,?,?)"),
                                                           new Object[]
    {
        SlocId, CldId, OrgId, usr_id, WfNum, DocNo, 0
    }, NUMBER).toString());

        /*      return Integer.parseInt(callStoredFunction(NUMBER, "APP.WF_GET_USR_LEVEL(?,?,?,?,?,?,?)", new Object[] {
                                                   SlocId, CldId, OrgId, usr_id, WfNum, DocNo, 0
    }).toString()); */


    }

    public String[] chkFixSalAmount()
    {
        String org = EbizParams.GLBL_APP_USR_ORG();
        String cld = EbizParams.GLBL_APP_CLD_ID();
        Integer sloc = EbizParams.GLBL_APP_SERV_LOC();
        String hoOrg = EbizParams.GLBL_HO_ORG_ID();
        ViewObjectImpl monCompVo = this.getHcmEmpMonSalComp();
        String result[] = new String[3];
        Row monSalCurrentRow = monCompVo.getCurrentRow();
        if (monSalCurrentRow != null)
        {
            String doc_id = (String) monSalCurrentRow.getAttribute("EmpDocId");
            BigDecimal totalDed = new BigDecimal(0);
            BigDecimal totalEmpSalAmnt = new BigDecimal(0);
            RowQualifier rowQual = new RowQualifier(monCompVo);
            rowQual.setWhereClause("DocId = '" + doc_id + "' and SalBehav = 10");
            Row[] filteredRows = monCompVo.getFilteredRows(rowQual);
            if (filteredRows != null)
                if (filteredRows.length > 0)
                {
                    for (Row r : filteredRows)
                    {
                        BigDecimal amnt = new BigDecimal(r.getAttribute("SalAmt").toString());
                        totalDed = totalDed.add(amnt);
                    }
                }
            System.out.println("total temporary deduction will be" + totalDed.toString());
            ViewObjectImpl empSalVo = this.getHcmEmpSal();
            empSalVo.setNamedWhereClauseParam("bindCldId", cld);
            empSalVo.setNamedWhereClauseParam("bindHoOrgId", hoOrg);
            empSalVo.setNamedWhereClauseParam("bindOrgId", org);
            empSalVo.setNamedWhereClauseParam("bindSlocId", sloc);
            empSalVo.setNamedWhereClauseParam("bindDocId", doc_id);
            empSalVo.executeQuery();
            RowQualifier rowQualfrEmpSal = new RowQualifier(empSalVo);
            Row[] filteredEmpSalRows = empSalVo.getFilteredRows(rowQualfrEmpSal);
            System.out.println("filtered  rows" + filteredEmpSalRows.length);
            if (filteredEmpSalRows.length > 0)
            {
                for (Row r : filteredEmpSalRows)
                {
                    BigDecimal empSalAmnt = new BigDecimal(r.getAttribute("SalAmt").toString());
                    totalEmpSalAmnt = totalEmpSalAmnt.add(empSalAmnt);
                }
            }
            System.out.println("total employee salary amount will be" + totalEmpSalAmnt.toString());
            if ((totalDed.compareTo(totalEmpSalAmnt) == +1) || (totalDed.compareTo(totalEmpSalAmnt) == 0))
            {
                result[0] = "N";
                result[1] = totalDed.toString();
                result[2] = totalEmpSalAmnt.toString();
                return result;
            }
        }

        result[0] = "Y";
        return result;
    }

    public Integer insIntoTxn(Integer sloc_id, String cld_id, String pOrgId, Integer DOC_NO, String WfNum,
                              Integer usr_idFrm, Integer usr_idTo, Integer levelTo, Integer levelFrm, String action,
                              String remark, Number amount, String post)
    {
        Row curr = this.getHcmSalProc1().getCurrentRow();
        //String docIdTxn = curr.getAttribute("DocId").toString();
        String docIdTxn = resolvEl("#{pageFlowScope.PARAM_DOC_TXN_ID}").toString();
        return Integer.parseInt(ADFModelUtils.callFunction(this,
                                                           new StringBuilder("APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"),
                                                           new Object[]
    {
        sloc_id, cld_id, pOrgId, DOC_NO, 0, WfNum, docIdTxn, usr_idFrm, usr_idTo, levelFrm, levelTo, action, remark,
        amount, post
    }, NUMBER).toString());

        /*
        return Integer.parseInt(callStoredFunction(NUMBER, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                   sloc_id, cld_id, pOrgId, DOC_NO, 0, WfNum, docIdTxn, usr_idFrm,
                                                   usr_idTo, levelFrm, levelTo, action, remark, amount, post
    }).toString());*/

    }

    public Integer insIntoTxnEncash(Integer sloc_id, String cld_id, String pOrgId, Integer DOC_NO, String WfNum,
                                    Integer usr_idFrm, Integer usr_idTo, Integer levelTo, Integer levelFrm,
                                    String action, String remark, Number amount, String post)
    {

        Row curr = this.getHcmEmpLeaveEncsh1().getCurrentRow();
        String docIdTxn = curr.getAttribute("DocId").toString();
        RequestContext.getCurrentInstance().getPageFlowScope().put("PARAM_DOC_TXN_ID", docIdTxn);
        return Integer.parseInt(ADFModelUtils.callFunction(this,
                                                           new StringBuilder("APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"),
                                                           new Object[]
    {
        sloc_id, cld_id, pOrgId, DOC_NO, 0, WfNum, docIdTxn, usr_idFrm, usr_idTo, levelFrm, levelTo, action, remark,
        amount, post
    }, NUMBER).toString());

        /*
        return Integer.parseInt(callStoredFunction(NUMBER, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                   sloc_id, cld_id, pOrgId, DOC_NO, 0, WfNum, docIdTxn, usr_idFrm,
                                                   usr_idTo, levelFrm, levelTo, action, remark, amount, post
    }).toString());*/

    }

    public void wfAction(String ret)
    {
        System.out.println("return from Wf = " + ret);
        if (ret != null)
        {
            String docIdTxn = resolvEl("#{pageFlowScope.PARAM_DOC_TXN_ID}").toString();
            Row[] filteredRows = this.getHcmSalProcTxn1().getFilteredRows("DocId", docIdTxn);
            System.out.println("current row in salProcTxn---" + filteredRows[0]);
            getHcmSalProcTxn1().setCurrentRow(filteredRows[0]);
            Row curr = getHcmSalProcTxn1().getCurrentRow();
            if (ret.equals("F"))
            {
                curr.setAttribute("SalStatus", "P");
            }
            else if (ret.equals("R"))
            {
                curr.setAttribute("SalStatus", "P");
            }
            if (ret.equals("V"))
            {
                curr.setAttribute("SalStatus", "P");
            }
            else if (ret.equals("A"))
            {
                curr.setAttribute("SalStatus", "A");
                System.out.println("Approved--");
                String cld = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
                Integer sloc = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
                String org = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
                String hoOrg = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
                String txndoc = curr.getAttribute("DocId").toString();
                String crtVal = curr.getAttribute("ProcCrtVal").toString();
                Timestamp frmDt = (Timestamp) curr.getAttribute("ProcFrmDt");
                Timestamp toDt = (Timestamp) curr.getAttribute("ProcToDt");
                Integer usr = EbizParams.GLBL_APP_USR();
                Object rslt =
                    ADFModelUtils.callFunction(this, new StringBuilder("FN_HCM_PROC_LEAVE_BAL(?,?,?,?,?,?,?,?,?)"),
                                               new Object[]
                {
                    cld, sloc, hoOrg, org, crtVal, frmDt, toDt, txndoc, usr
                }, Types.NUMERIC);

                /* Object rslt = callStoredFunction(Types.NUMERIC, "FN_HCM_PROC_LEAVE_BAL(?,?,?,?,?,?,?,?)", new Object[] {
                                                 cld, sloc, hoOrg, org, crtVal, frmDt, toDt, txndoc
                }); */


                Object salUpdateResult =
                    ADFModelUtils.callFunction(this, new StringBuilder("FN_HCM_UPDT_SAL_STRT(?,?,?,?,?)"), new Object[]
                {
                    cld, sloc, hoOrg, org, txndoc
                }, Types.NUMERIC);

                /*  Object salUpdateResult = callStoredFunction(Types.NUMERIC, "FN_HCM_UPDT_SAL_STRT(?,?,?,?,?)", new Object[] {
                                                            cld, sloc, hoOrg, org, txndoc
                }); */

                getOrgHcmProfile1().setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
                getOrgHcmProfile1().setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
                getOrgHcmProfile1().setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
                getOrgHcmProfile1().executeQuery();
                Row[] row = getOrgHcmProfile1().getFilteredRows("OrgId", EbizParams.GLBL_APP_USR_ORG());
                String glChk = row[0].getAttribute("GlCodeLnk").toString();
                if (glChk.equalsIgnoreCase("Y"))
                {
                    Object vouPostRslt =
                        ADFModelUtils.callFunction(this, new StringBuilder("FN_HCM_INS_GL_POST(?,?,?,?,?,?,?,?)"),
                                                   new Object[]
                    {
                        cld, sloc, hoOrg, org, txndoc, frmDt, toDt, EbizParams.GLBL_APP_USR()
                    }, Types.NUMERIC);
                    System.out.println("result for finace entry---->" + vouPostRslt);

                    /* Object reslt =
                        ADFModelUtils.callFunction(this, new StringBuilder("FN_HCM_INS_GL_EMP(?,?,?,?,?,?,?,?)"), new Object[] {
                                                   cld, sloc, hoOrg, org, txndoc, frmDt, toDt, EbizParams.GLBL_APP_USR()
                    }, Types.NUMERIC); */
                    //System.out.println("result for finace entry---->" + vouPostRslt);
                }
            }
            this.getDBTransaction().commit();
            chkSalaryStatusInSalProc();
        }
    }

    public void wfActionEncash(String ret)
    {
        System.out.println("return from Wf = " + ret);
        if (ret != null)
        {
            String docIdTxn = resolvEl("#{pageFlowScope.PARAM_DOC_TXN_ID}").toString();
            Row[] filteredRows = this.getHcmEmpLeaveEncsh1().getFilteredRows("DocId", docIdTxn);
            System.out.println("current row in salProcTxn---" + filteredRows[0]);
            getHcmEmpLeaveEncsh1().setCurrentRow(filteredRows[0]);
            Row curr = getHcmEmpLeaveEncsh1().getCurrentRow();
            if (ret.equals("F"))
            {
                curr.setAttribute("EncshStatus", "P");
            }
            else if (ret.equals("R"))
            {
                curr.setAttribute("EncshStatus", "P");
            }
            if (ret.equals("V"))
            {
                curr.setAttribute("EncshStatus", "P");
            }
            else if (ret.equals("A"))
            {
                curr.setAttribute("EncshStatus", "A");
                System.out.println("Approved--");
                String cld = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
                Integer sloc = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
                String org = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
                String hoOrg = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
                String txndoc = curr.getAttribute("DocId").toString();
                String empId = curr.getAttribute("EmpDocId").toString();
                Integer usr = EbizParams.GLBL_APP_USR();
                Object rslt =
                    ADFModelUtils.callFunction(this, new StringBuilder("FN_HCM_UPDT_ENCASH_LEAVE_BAL(?,?,?,?,?,?)"),
                                               new Object[]
                {
                    cld, sloc, hoOrg, org, txndoc, usr
                }, Types.NUMERIC);
                System.out.println("Final Result Found : " + rslt);
            }
            this.getDBTransaction().commit();
        }
    }

    /**
     * Container's getter for HcmTimeMoveEdit1.
     * @return HcmTimeMoveEdit1
     */
    public ViewObjectImpl getHcmTimeMoveEdit1()
    {
        return (ViewObjectImpl) findViewObject("HcmTimeMoveEdit1");
    }


    /**
     * Container's getter for Test1.
     * @return Test1
     */
    public ViewObjectImpl getTest1()
    {
        return (ViewObjectImpl) findViewObject("Test1");
    }

    /**
     * Container's getter for Calendar1.
     * @return Calendar1
     */
    public ViewObjectImpl getCalendar1()
    {
        return (ViewObjectImpl) findViewObject("Calendar1");
    }

    /**
     * Container's getter for Emp2.
     * @return Emp2
     */
    public ViewObjectImpl getEmp2()
    {
        return (ViewObjectImpl) findViewObject("Emp2");
    }


    /**
     * Container's getter for LovLeave1.
     * @return LovLeave1
     */
    public ViewObjectImpl getLovLeave()
    {
        return (ViewObjectImpl) findViewObject("LovLeave");
    }

    /**
     * Container's getter for TimeCalendarEditorDetail1.
     * @return TimeCalendarEditorDetail1
     */
    public ViewObjectImpl getTimeCalendarEditorDetail1()
    {
        return (ViewObjectImpl) findViewObject("TimeCalendarEditorDetail1");
    }


    /**
     * Container's getter for Emp3.
     * @return Emp3
     */
    public ViewObjectImpl getEmp3()
    {
        return (ViewObjectImpl) findViewObject("Emp3");
    }

    /**
     * Container's getter for LovCritaira1.
     * @return LovCritaira1
     */
    public ViewObjectImpl getLovCritaira1()
    {
        return (ViewObjectImpl) findViewObject("LovCritaira1");
    }

    /**
     * Container's getter for LovLocations1.
     * @return LovLocations1
     */
    public ViewObjectImpl getLovLocations1()
    {
        return (ViewObjectImpl) findViewObject("LovLocations1");
    }

    /**
     * Container's getter for LovDepartment1.
     * @return LovDepartment1
     */
    public ViewObjectImpl getLovDepartment1()
    {
        return (ViewObjectImpl) findViewObject("LovDepartment1");
    }

    /**
     * Container's getter for LovEmpGroup1.
     * @return LovEmpGroup1
     */
    public ViewObjectImpl getLovEmpGroup1()
    {
        return (ViewObjectImpl) findViewObject("LovEmpGroup1");
    }

    /**
     * Container's getter for LovEmpName1.
     * @return LovEmpName1
     */
    public ViewObjectImpl getLovEmpName1()
    {
        return (ViewObjectImpl) findViewObject("LovEmpName1");
    }


    /**
     * Container's getter for HcmSalProc1.
     * @return HcmSalProc1
     */
    public ViewObjectImpl getHcmSalProc1()
    {
        return (ViewObjectImpl) findViewObject("HcmSalProc1");
    }

    /**
     * Container's getter for HcmSalProcTxn1.
     * @return HcmSalProcTxn1
     */
    public ViewObjectImpl getHcmSalProcTxn1()
    {
        return (ViewObjectImpl) findViewObject("HcmSalProcTxn1");
    }

    /**
     * Container's getter for AppSecUsr1.
     * @return AppSecUsr1
     */
    public ViewObjectImpl getAppSecUsr1()
    {
        return (ViewObjectImpl) findViewObject("AppSecUsr1");
    }

    public void chkSalaryStatusInSalProc()
    {
        String txnStatus = null;
        if (resolvEl("#{pageFlowScope.PARAM_DOC_TXN_ID}") != null)
        {
            String doc = resolvEl("#{pageFlowScope.PARAM_DOC_TXN_ID}").toString();
            Row[] filteredRows = getHcmSalProcTxn1().getFilteredRows("DocId", doc);
            if (filteredRows.length > 0)
            {
                txnStatus = (String) filteredRows[0].getAttribute("SalStatus");
            }

            if (txnStatus != null && txnStatus.equals("A"))
            {
                String org = EbizParams.GLBL_APP_USR_ORG();
                ;
                String cld = EbizParams.GLBL_APP_CLD_ID();
                Integer sloc = EbizParams.GLBL_APP_SERV_LOC();
                String hoOrg = EbizParams.GLBL_HO_ORG_ID();

                System.out.println("at filter sal proc doc is---" + doc + "cld--" + cld + "sloc--" + sloc + "ho-" +
                                   hoOrg + "org-" + org);
                getHcmSalProc1().setNamedWhereClauseParam("BindDocTxnId", doc);

                getHcmSalProc1().setNamedWhereClauseParam("BindCldId", cld);
                getHcmSalProc1().setNamedWhereClauseParam("BindOrgId", org);
                getHcmSalProc1().setNamedWhereClauseParam("BindSlocId", sloc);
                getHcmSalProc1().setNamedWhereClauseParam("BindHoOrgId", hoOrg);
                getHcmSalProc1().setNamedWhereClauseParam("BindSalStatus", 56);
                getHcmSalProc1().executeQuery();
                System.out.println("in side if count is salproc--" + getHcmSalProc1().getEstimatedRowCount());
            }
            System.out.println("out side if count is salproc--" + getHcmSalProc1().getEstimatedRowCount());
        }
    }


    public void searchMultiAttVo(String empDocId, String leaveId, Timestamp attendenceDt, String lwpId)
    {
        ViewObjectImpl multiAttVo = this.getHcmTimeMoveEditDtlFrMultAtt();
        multiAttVo.setNamedWhereClauseParam("bindEmpDocId", empDocId);
        multiAttVo.setNamedWhereClauseParam("bindAttDt", attendenceDt);
        multiAttVo.setNamedWhereClauseParam("bindLeaveId", leaveId);
        multiAttVo.setNamedWhereClauseParam("bindLwpId", lwpId);
        multiAttVo.executeQuery();
    }

    public String searchMultAttAction()
    {
        Row currentRow = this.getDummySrchMultAtt().getCurrentRow();
        String empDocId = (String) currentRow.getAttribute("transEmpDocId");
        String leaveId = (String) currentRow.getAttribute("leaveNm");
        Timestamp attendenceDt = (Timestamp) currentRow.getAttribute("transAttDt");
        String lwpId = (String) currentRow.getAttribute("LwpType");
        if (empDocId != null || leaveId != null || attendenceDt != null | lwpId != null)
            searchMultiAttVo(empDocId, leaveId, attendenceDt, lwpId);
        return "Y";
    }

    public String searchTempCompAction()
    {
        Row currentRow = this.getDummySrchMultAtt().getCurrentRow();
        String empDocId = (String) currentRow.getAttribute("transEmpDocId");
        String salId = (String) currentRow.getAttribute("transSalComp");
        Integer salBehav = (Integer) currentRow.getAttribute("transSalBehav");
        if (empDocId != null || salId != null || salBehav != null)
            searchTempCompVo(empDocId, salId, salBehav);
        return "Y";
    }

    public void searchTempCompVo(String empDocId, String salId, Integer salBehav)
    {
        ViewObjectImpl monSalCompVo = this.getHcmEmpMonSalComp();
        monSalCompVo.setNamedWhereClauseParam("bindEmpDocId", empDocId);
        monSalCompVo.setNamedWhereClauseParam("bindSalId", salId);
        monSalCompVo.setNamedWhereClauseParam("bindSalType", salBehav);
        monSalCompVo.executeQuery();
    }


    public void multpleEmpAttendencAction(ArrayList empList)
    {
        String empDocId = "";
        if (empList.size() > 0)
        {
            Iterator it = empList.iterator();
            while (it.hasNext())
            {
                empDocId = (String) it.next();
                System.out.println("employee docId=" + empDocId);

            }
        }
    }

    public String resetMultAttVo()
    {
        resetAttSearchVo();
        searchMultiAttVo(null, null, null, null);
        this.getMultipleAttendenceEntryDummy1().executeQuery();
        return "Y";
    }

    public void resetAttSearchVo()
    {
        this.getDummySrchMultAtt().getCurrentRow().setAttribute("transEmpDocId", "");
        this.getDummySrchMultAtt().getCurrentRow().setAttribute("transEmpNm", "");
        this.getDummySrchMultAtt().getCurrentRow().setAttribute("leaveNm", "");
        this.getDummySrchMultAtt().getCurrentRow().setAttribute("transAttDt", "");
        this.getDummySrchMultAtt().executeQuery();
    }

    public void resetMonTempSalSearchVo()
    {
        this.getDummySrchMultAtt().getCurrentRow().setAttribute("transEmpDocId", null);
        this.getDummySrchMultAtt().getCurrentRow().setAttribute("transIsSubSalComp", null);
        this.getDummySrchMultAtt().getCurrentRow().setAttribute("transSalComp", null);
        this.getDummySrchMultAtt().getCurrentRow().setAttribute("transSalBehav", null);
        this.getDummySrchMultAtt().executeQuery();
    }

    public String resetMonTemComVo()
    {
        resetMonTempSalSearchVo();
        searchTempCompVo(null, null, null);
        return "Y";
    }

    /** To Check Leave Balance on PopUp*/
    public String chkLeaveBalOnPop(String leaveId, String empDoc)
    {
        System.out.println("chkLeaveBalOnPop");
        if (leaveId != null && empDoc != null)
        {
            getOrgHcmLeaveVO1().setNamedWhereClauseParam("bindCldId", EbizParams.GLBL_APP_CLD_ID());
            getOrgHcmLeaveVO1().setNamedWhereClauseParam("bindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
            getOrgHcmLeaveVO1().setNamedWhereClauseParam("bindOrgId", EbizParams.GLBL_APP_USR_ORG());
            getOrgHcmLeaveVO1().setNamedWhereClauseParam("bindSlocId", EbizParams.GLBL_APP_SERV_LOC());
            getOrgHcmLeaveVO1().executeQuery();

            getLovAllEmpNm().setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
            getLovAllEmpNm().setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
            getLovAllEmpNm().setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
            getLovAllEmpNm().setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
            getLovAllEmpNm().executeQuery();

            Row[] empRows = getLovAllEmpNm().getFilteredRows("DocId", empDoc);
            Object empGrpId = empRows[0].getAttribute("EmpGrpId");

            getHCMLeaveGroup1().setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
            getHCMLeaveGroup1().setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
            getHCMLeaveGroup1().setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
            getHCMLeaveGroup1().setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
            getHCMLeaveGroup1().executeQuery();
            RowQualifier grpRq = new RowQualifier(getHCMLeaveGroup1());
            grpRq.setWhereClause("GrpId='" + empGrpId + "' AND LeaveId='" + leaveId + "'");
            Row[] levGrpRows = getHCMLeaveGroup1().getFilteredRows(grpRq);
            Double avlLimit = new Double(0);
            if (levGrpRows.length > 0)
            {
                if (levGrpRows[0].getAttribute("MonAvlLimit") != null)
                {
                    avlLimit = (Double) levGrpRows[0].getAttribute("MonAvlLimit");
                }
            }
            Row[] fr = getOrgHcmLeaveVO1().getFilteredRows("LeaveId", leaveId);
            if (fr.length > 0)
            {
                if (fr[0].getAttribute("AbsentDedChk") != null)
                {
                    String dedChk = fr[0].getAttribute("AbsentDedChk").toString();
                    System.out.println("ded chk value for leave---" + dedChk);
                    if (dedChk.equalsIgnoreCase("N"))
                    {

                        Double leaveBal = new Double(0);
                        Double count = new Double(0);
                        Object frmDt = getDummy1().getCurrentRow().getAttribute("Fromdt");
                        Object toDt = getDummy1().getCurrentRow().getAttribute("ToDt");
                        //String empDoc = getTimeCalendarEditorDetail1().getCurrentRow().getAttribute("EmpDocId").toString();

                        RowQualifier lq = new RowQualifier(getLeaveBalanceVO1());
                        lq.setWhereClause("DocId='" + empDoc + "' AND LeaveId='" + leaveId + "'");
                        Row[] rows = getLeaveBalanceVO1().getFilteredRows(lq);
                        System.out.println("leave bal row count-->" + rows.length);
                        if (rows.length > 0)
                        {
                            leaveBal = (Double) rows[0].getAttribute("LeaveBal");
                            System.out.println("leavebal found is--" + leaveBal);
                        }

                        System.out.println("In Leave Balance Validator in AMIMPL");
                        System.out.println("fromdt-->" + frmDt + "toDt--->" + toDt + "empDoc--->" + empDoc +
                                           "leavId--->" + leaveId);

                        RowQualifier rq = new RowQualifier(getTimeCalendarEditorDetail1());
                        //rq.setWhereClause("AttenDt between '" + frmDt + "' AND '" + toDt + "'  AND ( EmpDocId='" + empDoc +
                        //                "' AND LeaveId='" + leaveId + "' )");

                        rq.setWhereClause("EmpDocId='" + empDoc + "' AND LeaveId='" + leaveId + "'");
                        System.out.println("query is -->" + rq.getExprStr());
                        Row[] filteredRows = getTimeCalendarEditorDetail1().getFilteredRows(rq);
                        System.out.println("leave rows for emp exists in detail--->" + filteredRows.length);
                        if (filteredRows.length > 0)
                        {

                            for (Row r : filteredRows)
                            {
                                if (((Timestamp) r.getAttribute("AttenDt")).compareTo(frmDt) >= 0 &&
                                    ((Timestamp) r.getAttribute("AttenDt")).compareTo(toDt) <= 0)
                                {
                                    if (r.getAttribute("HlfdayLeaveChk") != null &&
                                        r.getAttribute("HlfdayLeaveChk").equals("Y"))
                                    {
                                        count = count + 0.5;
                                    }
                                    else if (r.getAttribute("QtrLeaveChk") != null &&
                                             r.getAttribute("QtrLeaveChk").equals("Y"))
                                    {
                                        count = count + 0.25;
                                    }
                                    else
                                    {
                                        count++;
                                    }

                                }
                            }
                        }
                        System.out.println("leave taken count in detail--->" + count);
                        //Integer count = filteredRows.length;
                        if (count <= leaveBal && count <= avlLimit)
                        {
                            return "N";
                        }
                        else
                            return "Y"; // Validation Message will be displayed.
                    }
                }
            }
        }
        return "N";
    }

    /**To Check Week Off Type(Random/Fixed) For Employee*/
    public String chkWkOffTyp(String empDoc)
    {
        if (empDoc != null)
        {
            Row[] filteredRows = getEmp2().getFilteredRows("DocId", empDoc);

            Object grpId = filteredRows[0].getAttribute("EmpGrpId");
            Row[] fRow = getEmpGroupPrf1().getFilteredRows("GrpId", grpId);

            Integer wkOffType = (Integer) fRow[0].getAttribute("WkOffType");
            if (wkOffType.compareTo(68) == 0)
            {
                return "Y"; // 68=fixed weekoff validation msg will be displayed
            }
            return "N";
        }
        return "N";
    }

    /**To Check Comp Off */

    public String chkNotation(String empDoc)
    {
        if (empDoc != null)
        {
            Object attDt = getTimeCalendarEditorDetail1().getCurrentRow().getAttribute("AttenDt");
            RowQualifier rq = new RowQualifier(getCalendar1());
            rq.setWhereClause("DocId='" + empDoc + "' and Fromdate = '" + attDt + "'");
            Row fr[] = getCalendar1().getFilteredRows(rq);
            System.out.println("calendar notetion row count--" + fr.length);
            if (fr.length > 0)
            {
                String notation = fr[0].getAttribute("TimeNotation").toString();
                System.out.println("notation is --->" + notation);
                if (notation.equalsIgnoreCase("W"))
                {
                    return "W";
                }
                else if (notation.equalsIgnoreCase("NH"))
                {
                    return "NH";
                }
                else if (notation.equalsIgnoreCase("PH"))
                {
                    return "PH";
                }
                else if (notation.equalsIgnoreCase("P"))
                {
                    return "P";
                }
                else
                    return "Y";
            }
        }
        return "N";
    }


    public String validateAttDt(java.sql.Date attnDt, oracle.jbo.domain.Timestamp fullattDt)
    {
        System.out.println("validateAttDt");
        String empDoc = "";
        ViewObjectImpl vo = this.getHcmTimeMoveEditDtlFrMultAtt();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        ;
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        SimpleDateFormat format = new SimpleDateFormat("dd-MMM-yyyy");
        try
        {
            java.sql.Date strtDt = ((Timestamp) this.getDummy1().getCurrentRow().getAttribute("TransSalaryAttfrom")).dateValue();
            java.sql.Date endDt = ((Timestamp) this.getDummy1().getCurrentRow().getAttribute("TransSalaryAttTo")).dateValue();
            if (strtDt.compareTo(attnDt) > 0)
            {
                if (strtDt.toString().equals(attnDt.toString()))
                {
                }
                else
                {
                    return "Y";
                }
            }
            else if (attnDt.compareTo(endDt) > 0)
            {
                if (attnDt.toString().equals(endDt.toString()))
                {
                }
                else
                {
                    return "Y";
                }
            }
            if (this.getHcmTimeMoveEditDtlFrMultAtt().getCurrentRow().getAttribute("EmpDocId") != null)
            {
                empDoc = this.getHcmTimeMoveEditDtlFrMultAtt().getCurrentRow().getAttribute("EmpDocId").toString();
                RowQualifier rq = new RowQualifier(this.getHcmTimeMoveEditDtlFrMultAtt());
                rq.setWhereClause("CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId +
                                  "' and OrgId='" + orgId + "'  and EmpDocId='" + empDoc + "' and AttenDt = '" +
                                  fullattDt + "'");

                Row fr[] = this.getHcmTimeMoveEditDtlFrMultAtt().getFilteredRows(rq);
                for (Row r : fr)
                {
                    if (!(r.equals(this.getHcmTimeMoveEditDtlFrMultAtt().getCurrentRow())))
                    {
                        return "X";
                    }
                }
            }
        }
        catch (Exception ex) {
            ex.printStackTrace();
        }

        return "N";
    }


    public String validateAttFromNdToDt(java.sql.Date attnDt)
    {
        System.out.println("validateAttFromDt");
        try
        {
            java.sql.Date strtDt = ((Timestamp) this.getDummy1().getCurrentRow().getAttribute("TransSalaryAttfrom")).dateValue();
            java.sql.Date endDt = ((Timestamp) this.getDummy1().getCurrentRow().getAttribute("TransSalaryAttTo")).dateValue();
            if (strtDt.compareTo(attnDt) > 0)
            {
                if (strtDt.toString().equals(attnDt.toString()))
                {
                }
                else
                {
                    return "Y";
                }
            }
            else if (attnDt.compareTo(endDt) > 0)
            {
                if (attnDt.toString().equals(endDt.toString()))
                {
                }
                else
                {
                    return "Y";
                }
            }

        }
        catch (Exception ex) {
            ex.printStackTrace();
        }

        return "N";
    }


    public String validateDateAndDeleteAlreadyExistsRow()
    {
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        ViewObjectImpl dummyVoFrDates = this.getGetMultipleHolidayDates();
        RowSetIterator crt = dummyVoFrDates.createRowSetIterator(null);
        String doc_id = (String) this.getMultipleAttendenceEntryDummy1().getCurrentRow().getAttribute("EmpDocId");
        while (crt.hasNext())
        {
            Timestamp attdate = (Timestamp) crt.next().getAttribute("Dates");
            try
            {
                if (doc_id != null)
                {
                    RowQualifier rq = new RowQualifier(this.getHcmTimeMoveEditDtlFrMultAtt());
                    String querry =
                        "CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId + "' and OrgId='" +
                        orgId + "'  and EmpDocId='" + doc_id + "' and AttenDt = '" + attdate + "'";
                    rq.setWhereClause(querry);
                    Row fr[] = this.getHcmTimeMoveEditDtlFrMultAtt().getFilteredRows(rq);
                    if (fr != null && fr.length > 0)
                    {
                        for (Row r : fr)
                        {
                            r.remove();
                            System.out.println("Delete status is yes : date is " + attdate);
                        }
                    }
                    System.out.println("Delete status is yes : date is " + attdate);

                }
            }
            catch (Exception ex) {
                ex.printStackTrace();
            }
        }


        return "N";
    }


    public void DeleteMultiAttVoRow()
    {
        ViewObjectImpl vo = this.getHcmTimeMoveEditDtlFrMultAtt();
        Row currentRow = vo.getCurrentRow();
        currentRow.remove();
        vo.executeQuery();
    }

    public String calTotalSubDedAmnt()
    {
        ViewObjectImpl empSubSal = this.getOrgHcmEmpSalSub1();
        BigDecimal myamnt = BigDecimal.ZERO;
        RowQualifier rq = new RowQualifier(empSubSal);
        Row currentRow = this.getOrgHcmEmpSalSub1().getCurrentRow();
        if (currentRow != null)
        {
            String SalId = (String) currentRow.getAttribute("SalId");
            String docId = (String) currentRow.getAttribute("DocId");
            rq.setWhereClause("SalId = '" + SalId + "' and DocId = '" + docId + "'");
            Row[] refRow = empSubSal.getFilteredRows(rq);
            if (refRow.length > 0)
            {
                for (Row r : refRow)
                {
                    BigDecimal amnt = new BigDecimal(r.getAttribute("SubSalAmt").toString());
                    myamnt = myamnt.add(amnt);
                }
            }
        }
        this.getHcmEmpMonSalComp().getCurrentRow().setAttribute("SalVal", myamnt);
        this.getHcmEmpMonSalComp().getCurrentRow().setAttribute("SalAmt", myamnt);
        return "Y";
    }

    public String chkSubSalCompAction(String subSalId)
    {
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();

        String DocId = (String) this.getOrgHcmEmpSalSub1().getCurrentRow().getAttribute("DocId");

        RowQualifier rq = new RowQualifier(this.getOrgHcmEmpSalSub1());
        String querry =
            "CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId + "' and OrgId='" + orgId +
            "' and SubSalId='" + subSalId + "' and DocId = '" + DocId + "'";
        rq.setWhereClause(querry);
        Row fr[] = this.getOrgHcmEmpSalSub1().getFilteredRows(rq);
        for (Row r : fr)
        {
            if (!(r.equals(this.getOrgHcmEmpSalSub1().getCurrentRow())))
                return "N";
        }

        return "Y";
    }

    public String chkSalIdAction(String salId)
    {
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        ;
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();

        String EmpDocId = (String) this.getHcmEmpMonSalComp().getCurrentRow().getAttribute("EmpDocId");

        RowQualifier rq = new RowQualifier(this.getHcmEmpMonSalComp());
        String querry =
            "CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId + "' and OrgId='" + orgId +
            "' and SalId='" + salId + "' and EmpDocId = '" + EmpDocId + "'";
        rq.setWhereClause(querry);
        Row fr[] = this.getHcmEmpMonSalComp().getFilteredRows(rq);
        for (Row r : fr)
        {
            if (!(r.equals(this.getHcmEmpMonSalComp().getCurrentRow())))
                return "N";
        }

        return "Y";
    }

    public String chkIsTempCompEditable()
    {
        String org = EbizParams.GLBL_APP_USR_ORG();
        String cld = EbizParams.GLBL_APP_CLD_ID();
        Integer sloc = EbizParams.GLBL_APP_SERV_LOC();
        String hoOrg = EbizParams.GLBL_HO_ORG_ID();
        String result = "";
        ViewObjectImpl comp = this.getHcmEmpMonSalComp();
        Row currentRow = comp.getCurrentRow();
        if (currentRow != null)
        {
            String empDocId = (String) currentRow.getAttribute("EmpDocId");
            Timestamp frmDt = (Timestamp) currentRow.getAttribute("ProcFrmDt");
            Timestamp toDt = (Timestamp) currentRow.getAttribute("ProcToDt");
            BigDecimal rslt =
                (BigDecimal) ADFModelUtils.callFunction(this, new StringBuilder("FN_HCM_SAL_STATUS_CHK(?,?,?,?,?,?,?)"),
                                                        new Object[]
            {
                cld, sloc, hoOrg, org, empDocId, frmDt, toDt
            }, Types.NUMERIC);
            if (rslt != null)
            {
                result = rslt.toString();
            }
        }
        return result;
    }

    public String chkIsMultiAttEditable()
    {
        System.out.println("chkIsMultiAttEditable");
        String org = EbizParams.GLBL_APP_USR_ORG();
        String cld = EbizParams.GLBL_APP_CLD_ID();
        Integer sloc = EbizParams.GLBL_APP_SERV_LOC();
        String hoOrg = EbizParams.GLBL_HO_ORG_ID();
        String result = "";
        ViewObjectImpl dummyVo = this.getDummy1();
        ViewObjectImpl multiAttVo = this.getHcmTimeMoveEditDtlFrMultAtt();

        Row currentRow = multiAttVo.getCurrentRow();
        Row currentRowfrDummy = dummyVo.getCurrentRow();
        if (currentRow != null && currentRowfrDummy != null)
        {
            String empDocId = (String) currentRow.getAttribute("EmpDocId");
            Timestamp frmDt = (Timestamp) currentRowfrDummy.getAttribute("Fromdt");
            Timestamp toDt = (Timestamp) currentRowfrDummy.getAttribute("ToDt");
            BigDecimal rslt =
                (BigDecimal) ADFModelUtils.callFunction(this, new StringBuilder("FN_HCM_SAL_STATUS_CHK(?,?,?,?,?,?,?)"),
                                                        new Object[]
            {
                cld, sloc, hoOrg, org, empDocId, frmDt, toDt
            }, Types.NUMERIC);
            if (rslt != null)
            {
                result = rslt.toString();
            }
        }
        return result;
    }


    public String chkIsDummyMultiAttEditable()
    {
        System.out.println("chkIsDummyMultiAttEditable");
        String org = EbizParams.GLBL_APP_USR_ORG();
        String cld = EbizParams.GLBL_APP_CLD_ID();
        Integer sloc = EbizParams.GLBL_APP_SERV_LOC();
        String hoOrg = EbizParams.GLBL_HO_ORG_ID();
        String result = "";
        ViewObjectImpl dummyVo = this.getDummy1();
        ViewObjectImpl multiAttVo = this.getMultipleAttendenceEntryDummy1();

        Row currentRow = multiAttVo.getCurrentRow();
        Row currentRowfrDummy = dummyVo.getCurrentRow();
        if (currentRow != null && currentRowfrDummy != null)
        {
            String empDocId = (String) currentRow.getAttribute("EmpDocId");
            Timestamp frmDt = (Timestamp) currentRowfrDummy.getAttribute("Fromdt");
            Timestamp toDt = (Timestamp) currentRowfrDummy.getAttribute("ToDt");
            BigDecimal rslt =
                (BigDecimal) ADFModelUtils.callFunction(this, new StringBuilder("FN_HCM_SAL_STATUS_CHK(?,?,?,?,?,?,?)"),
                                                        new Object[]
            {
                cld, sloc, hoOrg, org, empDocId, frmDt, toDt
            }, Types.NUMERIC);
            if (rslt != null)
            {
                result = rslt.toString();
            }
        }
        return result;
    }

    /**
     * Container's getter for LeaveBalanceVO1.
     * @return LeaveBalanceVO1
     */
    public ViewObjectImpl getLeaveBalanceVO1()
    {
        return (ViewObjectImpl) findViewObject("LeaveBalanceVO1");
    }

    /**
     * Container's getter for HcmTimeMoveEditDtlFrMultAtt1.
     * @return HcmTimeMoveEditDtlFrMultAtt1
     */
    public ViewObjectImpl getHcmTimeMoveEditDtlFrMultAtt()
    {
        return (ViewObjectImpl) findViewObject("HcmTimeMoveEditDtlFrMultAtt");
    }

    /**
     * Container's getter for LovEmpNameFrmEmpDocId1.
     * @return LovEmpNameFrmEmpDocId1
     */
    public ViewObjectImpl getLovEmpNameFrmEmpDocId()
    {
        return (ViewObjectImpl) findViewObject("LovEmpNameFrmEmpDocId");
    }


    /**
     * Container's getter for LovAllEmpNm1.
     * @return LovAllEmpNm1
     */
    public ViewObjectImpl getLovAllEmpNm()
    {
        return (ViewObjectImpl) findViewObject("LovAllEmpNm");
    }


    /**
     * Container's getter for DummySrchMultAtt1.
     * @return DummySrchMultAtt1
     */
    public ViewObjectImpl getDummySrchMultAtt()
    {
        return (ViewObjectImpl) findViewObject("DummySrchMultAtt");
    }

    /**
     * Container's getter for HcmEmpMonSalComp1.
     * @return HcmEmpMonSalComp1
     */
    public ViewObjectImpl getHcmEmpMonSalComp()
    {
        return (ViewObjectImpl) findViewObject("HcmEmpMonSalComp");
    }

    /**
     * Container's getter for LovSalId1.
     * @return LovSalId1
     */
    public ViewObjectImpl getLovSalId()
    {
        return (ViewObjectImpl) findViewObject("LovSalId");
    }

    /**
     * Container's getter for OrgHcmEmpSalSub1.
     * @return OrgHcmEmpSalSub1
     */
    public ViewObjectImpl getOrgHcmEmpSalSub1()
    {
        return (ViewObjectImpl) findViewObject("OrgHcmEmpSalSub1");
    }

    /**
     * Container's getter for OrgHcmEmpSalSubVL1.
     * @return OrgHcmEmpSalSubVL1
     */
    public ViewLinkImpl getOrgHcmEmpSalSubVL1()
    {
        return (ViewLinkImpl) findViewLink("OrgHcmEmpSalSubVL1");
    }

    /**
     * Container's getter for LovSubSalType1.
     * @return LovSubSalType1
     */
    public ViewObjectImpl getLovSubSalType1()
    {
        return (ViewObjectImpl) findViewObject("LovSubSalType1");
    }

    /**
     * Container's getter for SalBehvType1.
     * @return SalBehvType1
     */
    public ViewObjectImpl getSalBehvType1()
    {
        return (ViewObjectImpl) findViewObject("SalBehvType1");
    }

    /**
     * Container's getter for HcmEmpSal1.
     * @return HcmEmpSal1
     */
    public ViewObjectImpl getHcmEmpSal()
    {
        return (ViewObjectImpl) findViewObject("HcmEmpSal");
    }

    public void insertIntoMonSal(List list)
    {
        if (list != null)
            System.out.println("List values=" + list.size());
        Object insertData = this.resolvEl("#{pageFlowScope.IMP_DATA_LIST}");
        System.out.println("Inserted data is: " + insertData);

        if (insertData != null)
        {
            System.out.println("el is not null");
            List data = (List) insertData;
            ListIterator<List> iterator = data.listIterator();
            int i = 1;

            while (iterator.hasNext())
            {

                System.out.println("Itr count=" + i);
                List row = (List) iterator.next();
                System.out.println("Length of row=" + row.size() + "and list is " + row);
                if (row.get(19) != null && row.get(19).toString().equals("N"))
                {
                    Row newRow = this.getHcmEmpMonSalComp().createRow();
                    newRow.setAttribute("CldId", row.get(0));
                    newRow.setAttribute("SlocId", row.get(1));
                    newRow.setAttribute("HoOrgId", row.get(2));
                    newRow.setAttribute("OrgId", row.get(3));
                    newRow.setAttribute("DocId", row.get(4));
                    newRow.setAttribute("EmpCode", row.get(5));
                    newRow.setAttribute("SalId", row.get(6));
                    newRow.setAttribute("SalVal", row.get(9));
                    newRow.setAttribute("SalBehav", row.get(8));
                    newRow.setAttribute("SalAmt", row.get(9));
                    newRow.setAttribute("EmpDeptId", row.get(10));
                    newRow.setAttribute("EmpLocId", row.get(11));
                    newRow.setAttribute("EmpGrpId", row.get(12));
                    newRow.setAttribute("ProcFrmDt", getDateInDbFormate((String) row.get(13)));
                    newRow.setAttribute("ProcToDt", getDateInDbFormate((String) row.get(14)));
                    newRow.setAttribute("UsrIdCreate", row.get(15));
                    newRow.setAttribute("UsrIdCreateDt", row.get(16));
                    newRow.setAttribute("UsrIdMod", row.get(17));
                    newRow.setAttribute("UsrIdModDt", row.get(18));
                    newRow.setAttribute("OthrDedChk", row.get(19));
                    newRow.setAttribute("EmpDocId", row.get(20));
                    this.getHcmEmpMonSalComp().insertRow(newRow);
                }
                else
                {
                    System.out.println("this component is other deduction type component and Is Having Sub Components value " +
                                       row.get(19).toString());
                }

                i++;
            }
            System.out.println("Data is inserting for " + i + "employees");
        }
        updateMonSal();
        this.getDBTransaction().commit();
        this.getHcmEmpMonSalComp().executeQuery();


    }

    public void updateMonSal()
    {
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        Integer userId = EbizParams.GLBL_APP_USR();
        System.out.println("In Update data.......");
        Object updatedRows = resolvElO("#{pageFlowScope.IMP_UPDATE_DATA_LIST}");
        System.out.println("row :" + updatedRows);

        if (updatedRows != null)
        {
            System.out.println("rows are not null");
            List<UpdatedData> list = (List<UpdatedData>) updatedRows;
            System.out.println("updated data length is  " + list.size());
            Iterator<UpdatedData> iterator = list.iterator();
            while (iterator.hasNext())
            {
                System.out.println("inside  updated iterator  ");
                UpdatedData data = iterator.next();
                Map Pkeys = data.getPrimaryKeys();
                Map column = data.getUpdatedColumn();
                System.out.println("Primary keys are: " + Pkeys);
                System.out.println("Column data are: " + column);
                ViewObjectImpl empMonSalVo = this.getHcmEmpMonSalComp();

                RowQualifier rq = new RowQualifier(empMonSalVo);
                String querry =
                    "CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId + "' and OrgId='" +
                    orgId + "' and SalId='" + Pkeys.get("SalId") + "' and DocId = '" + Pkeys.get("DocId") + "' " +
                    " and ProcFrmDt = '" + getDateInTimeStmpFormate((String) Pkeys.get("ProcFrmDt")) +
                    "' and ProcToDt = '" + getDateInTimeStmpFormate((String) Pkeys.get("ProcToDt")) + "'";
                System.out.println("querry=" + querry);
                rq.setWhereClause(querry);
                String exprStr = rq.getExprStr();
                System.out.println("Expression is: " + exprStr);
                Row[] filteredRows = empMonSalVo.getFilteredRows(rq);
                if (filteredRows.length > 0)
                {
                    for (Row r : filteredRows)
                    {
                        r.setAttribute("SalVal", column.get("SalVal"));
                        r.setAttribute("SalAmt", column.get("SalVal"));
                        r.setAttribute("UsrIdMod", userId);
                        r.setAttribute("UsrIdModDt", new oracle.jbo.domain.Timestamp(System.currentTimeMillis()));
                        r.setAttribute("OthrDedChk", "N");
                    }
                }
            }

        }

    }


    public void insertIntoHcmTimeMove(List list)
    {
        if (list != null)
            System.out.println("List values=" + list.size());
        Object insertData = this.resolvEl("#{pageFlowScope.IMP_DATA_LIST}");
        System.out.println("Inserted data is: " + insertData);
        ;

        if (insertData != null)
        {
            System.out.println("el is not null");
            List data = (List) insertData;
            ListIterator<List> iterator = data.listIterator();
            int i = 1;
            while (iterator.hasNext())
            {

                System.out.println("Itr count=" + i);
                List row = (List) iterator.next();
                System.out.println("Length of row=" + row.size() + "and list is " + row);
                if (row.get(5) != null && row.get(5) != "")
                {
                    if (row.get(12) != null)
                    {
                        inTime = getDateInDbFormate((String) row.get(12));
                    }
                    if (row.get(13) != null)
                    {
                        outTime = getDateInDbFormate((String) row.get(13));
                    }
                    Row newRow = this.getHcmTimeMoveEditDtlFrMultAtt().createRow();
                    newRow.setAttribute("CldId", row.get(0));
                    newRow.setAttribute("SlocId", row.get(1));
                    newRow.setAttribute("HoOrgId", row.get(2));
                    newRow.setAttribute("OrgId", row.get(3));
                    newRow.setAttribute("EmpDocId", row.get(4));
                    newRow.setAttribute("AttenDt", getDateInDbFormate((String) row.get(5)));
                    newRow.setAttribute("LeaveId", row.get(6));
                    newRow.setAttribute("ExtraTimeHr", row.get(7));
                    newRow.setAttribute("UsrIdCreate", row.get(8));
                    newRow.setAttribute("UsrIdCreateDt", row.get(9));
                    newRow.setAttribute("UsrIdMod", row.get(10));
                    newRow.setAttribute("UsrIdModDt", row.get(11));
                    newRow.setAttribute("InTime", inTime);
                    newRow.setAttribute("OutTime", outTime);
                    newRow.setAttribute("DedCh", row.get(14));
                    newRow.setAttribute("HlfdayLeaveChk", row.get(15));
                    newRow.setAttribute("EmpDeptId", row.get(16));
                    newRow.setAttribute("EmpGrpId", row.get(17));
                    newRow.setAttribute("EmpLocId", row.get(18));
                    newRow.setAttribute("EmpId", row.get(19));
                    newRow.setAttribute("AddCompLeaveChk", row.get(20));
                    this.getHcmTimeMoveEditDtlFrMultAtt().insertRow(newRow);
                }
                i++;
            }
            System.out.println("Data is inserting for " + i + "employees");
        }
        updateMonSal();
        this.getDBTransaction().commit();
        this.getHcmEmpMonSalComp().executeQuery();


    }

    public void updateHcmTimeMove()
    {
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        Integer userId = EbizParams.GLBL_APP_USR();
        System.out.println("In Update data.......");
        Object updatedRows = resolvElO("#{pageFlowScope.IMP_UPDATE_DATA_LIST}");
        System.out.println("row :" + updatedRows);

        if (updatedRows != null)
        {
            System.out.println("rows are not null");
            List<UpdatedData> list = (List<UpdatedData>) updatedRows;
            System.out.println("updated data length is  " + list.size());
            Iterator<UpdatedData> iterator = list.iterator();
            while (iterator.hasNext())
            {
                System.out.println("inside  updated iterator  ");
                UpdatedData data = iterator.next();
                Map Pkeys = data.getPrimaryKeys();
                Map column = data.getUpdatedColumn();
                System.out.println("Primary keys are: " + Pkeys);
                System.out.println("Column data are: " + column);
                ViewObjectImpl empMonSalVo = this.getHcmEmpMonSalComp();

                RowQualifier rq = new RowQualifier(empMonSalVo);
                String querry =
                    "CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId + "' and OrgId='" +
                    orgId + "' and SalId='" + Pkeys.get("SalId") + "' and DocId = '" + Pkeys.get("DocId") + "' " +
                    " and ProcFrmDt = '" + getDateInTimeStmpFormate((String) Pkeys.get("ProcFrmDt")) +
                    "' and ProcToDt = '" + getDateInTimeStmpFormate((String) Pkeys.get("ProcToDt")) + "'";
                System.out.println("querry=" + querry);
                rq.setWhereClause(querry);
                String exprStr = rq.getExprStr();
                System.out.println("Expression is: " + exprStr);
                Row[] filteredRows = empMonSalVo.getFilteredRows(rq);
                if (filteredRows.length > 0)
                {
                    for (Row r : filteredRows)
                    {
                        r.setAttribute("SalVal", column.get("SalVal"));
                        r.setAttribute("SalAmt", column.get("SalVal"));
                        r.setAttribute("UsrIdMod", userId);
                        r.setAttribute("UsrIdModDt", new oracle.jbo.domain.Timestamp(System.currentTimeMillis()));
                        r.setAttribute("OthrDedChk", "N");
                    }
                }
            }

        }

    }

    public java.util.Date getDateInDbFormate(String dt)
    {
        java.util.Date date = null;
        SimpleDateFormat format = new SimpleDateFormat("dd-MMM-yyyy");
        try
        {
            date = format.parse(dt);
            System.out.println("Date parsed=" + date);
        }
        catch (Exception e) {
            System.out.println("Error during parse");
            e.printStackTrace();
        }
        return date;
    }

    public oracle.jbo.domain.Timestamp getDateInTimeStmpFormate(String dt)
    {
        java.util.Date date = null;
        Timestamp ts_dt = null;
        SimpleDateFormat format = new SimpleDateFormat("dd-MMM-yyyy");
        try
        {
            date = format.parse(dt);
            System.out.println("Date parsed=" + date);
            ts_dt = new Timestamp(date.getTime());
        }
        catch (Exception e) {
            System.out.println("Error during parse");
            e.printStackTrace();
        }
        return ts_dt;
    }

    /**Function Call to Validate COA Linking if GL Code Linking Applicable */

    public Integer chkGLCodeLnkValidation()
    {
        getOrgHcmProfile1().setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        getOrgHcmProfile1().setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        getOrgHcmProfile1().setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        getOrgHcmProfile1().executeQuery();
        Row[] row = getOrgHcmProfile1().getFilteredRows("OrgId", EbizParams.GLBL_APP_USR_ORG());
        String glChk = row[0].getAttribute("GlCodeLnk").toString();
        if (glChk.equalsIgnoreCase("Y"))
        {
            String org = EbizParams.GLBL_APP_USR_ORG();
            String cld = EbizParams.GLBL_APP_CLD_ID();
            Integer sloc = EbizParams.GLBL_APP_SERV_LOC();
            String hoOrg = EbizParams.GLBL_HO_ORG_ID();
            Object rslt = callStoredFunction(Types.NUMERIC, "HCM.FN_HCM_NULL_COA_CHK(?,?,?,?)", new Object[]
            {
                cld, sloc, hoOrg, org
            });
            Integer result = Integer.parseInt(rslt.toString());
            System.out.println("COA CHECK RESULT IS------->" + result);
            return result;
        }
        System.out.println("GL Code linking not enabled--");
        return 0;
    }

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars)
    {
        CallableStatement st = null;
        try
        {
            // 1. Create a JDBC CallabledStatement
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            // 2. Register the first bind variable for the return value
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null)
            {
                // 3. Loop over values for the bind variables passed in, if any
                for (int z = 0; z < bindVars.length; z++)
                {
                    // 4. Set the value of user-supplied bind vars in the stmt
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            // 5. Set the value of user-supplied bind vars in the stmt
            st.executeUpdate();
            // 6. Return the value of the first bind variable
            return st.getObject(1);
        }
        catch (SQLException e) {
            throw new JboException(e);
        }
        finally
        {
            if (st != null)
            {
                try
                {
                    // 7. Close the statement
                    st.close();
                }
                catch (SQLException e) {
                }
            }
        }
    }

    /**
     * Container's getter for MultipleAttendenceEntryDummy1.
     * @return MultipleAttendenceEntryDummy1
     */
    public ViewObjectImpl getMultipleAttendenceEntryDummy1()
    {
        return (ViewObjectImpl) findViewObject("MultipleAttendenceEntryDummy1");
    }

    /**
     * Container's getter for GetMultipleHolidayDates1.
     * @return GetMultipleHolidayDates1
     */
    public ViewObjectImpl getGetMultipleHolidayDates()
    {
        return (ViewObjectImpl) findViewObject("GetMultipleHolidayDates");
    }

    /**
     * Container's getter for OrgHcmLeaveVO1.
     * @return OrgHcmLeaveVO1
     */
    public ViewObjectImpl getOrgHcmLeaveVO1()
    {
        return (ViewObjectImpl) findViewObject("OrgHcmLeaveVO1");
    }

    public void setBindVarOnViewEncshLeaveTF()
    {
        System.out.println("Employee Encash Leave");
        String org = EbizParams.GLBL_APP_USR_ORG();
        String cld = EbizParams.GLBL_APP_CLD_ID();
        Integer sloc = EbizParams.GLBL_APP_SERV_LOC();
        String hoOrg = EbizParams.GLBL_HO_ORG_ID();
        try
        {
            String docId = resolvEl("#{pageFlowScope.PARAM_DOC_TXN_ID}").toString();
            if (docId != null)
            {
                ViewObjectImpl dtl1 = this.getHcmEmpLeaveEncsh1();
                ViewCriteria vc = dtl1.getViewCriteria("HcmEmpLeaveEncshVOCriteria1");
                dtl1.applyViewCriteria(vc);
                dtl1.setNamedWhereClauseParam("BindCldId", cld);
                dtl1.setNamedWhereClauseParam("BindHoId", hoOrg);
                dtl1.setNamedWhereClauseParam("BindSlocId", sloc);
                dtl1.setNamedWhereClauseParam("BindOrgId", org);
                dtl1.setNamedWhereClauseParam("BindDocId", docId);
                dtl1.executeQuery();
            }
        }
        catch (Exception e) {
            System.out.println("Doc Id Null");
        }
    }

    public String searchEmpEncashLeaveAction()
    {
        Row currentRow = this.getDummyEmpEncshLeaveVO1().getCurrentRow();
        String empId = (String) currentRow.getAttribute("TransEmpId");
        String deptId = (String) currentRow.getAttribute("TransDeptId");
        String grpId = (String) currentRow.getAttribute("TransGrpId");
        String locId = (String) currentRow.getAttribute("TransLocId");
        if (empId != null || deptId != null || grpId != null || locId != null)
        {
            searchEmpEncshLeaveVo(empId, deptId, grpId, locId);
        }
        return "Y";
    }

    public String resetEmpEncashLeaveAction()
    {
        resetEncashLeaveSearchVo();
        searchEmpEncshLeaveVo(null, null, null, null);
        return "Y";
    }

    public void searchEmpEncshLeaveVo(String empId, String deptId, String grpId, String locID)
    {
        ViewObjectImpl encshLeaveVo = this.getHcmEmpLeaveEncsh1();
        ViewCriteria vc = encshLeaveVo.getViewCriteria("HcmEmpLeaveEncshVOCriteria");
        encshLeaveVo.applyViewCriteria(vc);
        System.out.println("row count before search->>" + encshLeaveVo.getRowCount());
        System.out.println("Employee Id : " + empId);
        encshLeaveVo.setNamedWhereClauseParam("BindEmpId", empId);
        encshLeaveVo.setNamedWhereClauseParam("BindDeptId", deptId);
        encshLeaveVo.setNamedWhereClauseParam("BindGrpId", grpId);
        encshLeaveVo.setNamedWhereClauseParam("BindLocId", locID);
        encshLeaveVo.executeQuery();
        System.out.println("row count after search->>" + encshLeaveVo.getRowCount());
    }

    public void resetEncashLeaveSearchVo()
    {
        this.getDummyEmpEncshLeaveVO1().getCurrentRow().setAttribute("TransEmpId", null);
        this.getDummyEmpEncshLeaveVO1().getCurrentRow().setAttribute("TransDeptId", null);
        this.getDummyEmpEncshLeaveVO1().getCurrentRow().setAttribute("TransGrpId", null);
        this.getDummyEmpEncshLeaveVO1().getCurrentRow().setAttribute("TransLocId", null);
        this.getDummyEmpEncshLeaveVO1().executeQuery();
    }

    /**
     * Container's getter for DummyEmpEncshLeaveVO1.
     * @return DummyEmpEncshLeaveVO1
     */
    public ViewObjectImpl getDummyEmpEncshLeaveVO1()
    {
        return (ViewObjectImpl) findViewObject("DummyEmpEncshLeaveVO1");
    }


    //    public int totEncashLeave() {
    //        String docId = (String) this.getHcmEmpLeaveEncshVO1().getCurrentRow().getAttribute("EmpDocId");
    //        System.out.println("Employee Doc Id : " + docId);
    //        String org = EbizParams.GLBL_APP_USR_ORG();
    //        String cld = EbizParams.GLBL_APP_CLD_ID();
    //        Integer sloc = EbizParams.GLBL_APP_SERV_LOC();
    //        String hoOrg = EbizParams.GLBL_HO_ORG_ID();
    //        System.out.println(org + " " + cld + " " + sloc + " " + hoOrg);
    //        Object rslt = callStoredFunction(Types.NUMERIC, "HCM.FN_HCM_EMP_ENCASH_LEAVE_BAL(?,?,?,?,?)", new Object[] {
    //                                         cld, sloc, hoOrg, org, docId
    //        });
    //        Integer val = new Integer(rslt.toString());
    //        System.out.println("Total leave Found : " + val);
    //        this.getHcmEmpLeaveEncshVO1().getCurrentRow().setAttribute("AvlLeaveBal", val);
    //        return 0;
    //    }

    public String chkPrevPendingDocStratus()
    {
        String emp_docId = (String) this.getHcmEmpLeaveEncsh1().getCurrentRow().getAttribute("EmpDocId");
        String lvEncshStatus = "P";
        System.out.println("Employee Doc Id : " + emp_docId);
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        String querry =
            "CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId + "' and OrgId='" + orgId +
            "'  and EmpDocId='" + emp_docId + "' and EncshStatus = '" + lvEncshStatus + "' ";
        RowQualifier rq = new RowQualifier(this.getHcmEmpLeaveEncsh1());
        System.out.println("querry=" + querry);
        rq.setWhereClause(querry);
        Row fr[] = this.getHcmEmpLeaveEncsh1().getFilteredRows(rq);
        for (Row r : fr)
        {
            if (!(r.getAttribute("DocId").toString().equals(this.getHcmEmpLeaveEncsh1().getCurrentRow().getAttribute("DocId").toString())))
            {
                return "Y";
            }
            else
            {

            }

        }
        return "N";
    }

    /**
     * Container's getter for HCMLeaveGroup1.
     * @return HCMLeaveGroup1
     */
    public ViewObjectImpl getHCMLeaveGroup1()
    {
        return (ViewObjectImpl) findViewObject("HCMLeaveGroup1");
    }

    /**
     * Container's getter for HcmTimeMoveFlat1.
     * @return HcmTimeMoveFlat1
     */
    public ViewObjectImpl getHcmTimeMoveFlat1()
    {
        return (ViewObjectImpl) findViewObject("HcmTimeMoveFlat1");
    }

    /**
     * Container's getter for HcmEmpLeaveEncsh1.
     * @return HcmEmpLeaveEncsh1
     */
    public ViewObjectImpl getHcmEmpLeaveEncsh1()
    {
        return (ViewObjectImpl) findViewObject("HcmEmpLeaveEncsh1");
    }

    /**
     * Container's getter for HcmEmpLeaveEncshDtl1.
     * @return HcmEmpLeaveEncshDtl1
     */
    public ViewObjectImpl getHcmEmpLeaveEncshDtl1()
    {
        return (ViewObjectImpl) findViewObject("HcmEmpLeaveEncshDtl1");
    }

    /**
     * Container's getter for ViewLinkVL1.
     * @return ViewLinkVL1
     */
    public ViewLinkImpl getViewLinkVL1()
    {
        return (ViewLinkImpl) findViewLink("ViewLinkVL1");
    }

    /**
     * Container's getter for EncashAmount1.
     * @return EncashAmount1
     */
    public ViewObjectImpl getEncashAmount1()
    {
        return (ViewObjectImpl) findViewObject("EncashAmount1");
    }

    public void totSalaryAmt(String days)
    {
        try
        {
            ViewObjectImpl amount1 = this.getEncashAmount1();
            Row cRow = this.getHcmEmpLeaveEncshDtl1().getCurrentRow();
            Number lop = (Number) cRow.getAttribute("LeaveOp");
            Number day = new Number(days);
            System.out.println("Leave Op : " + lop + "  " + day);
            Number bal = lop.subtract(day);
            System.out.println("Bal : " + bal);
            amount1.setNamedWhereClauseParam("BindCldId", cRow.getAttribute("CldId"));
            amount1.setNamedWhereClauseParam("BindDocId", cRow.getAttribute("EmpDocId"));
            amount1.setNamedWhereClauseParam("BindGrpId", cRow.getAttribute("TransGrpId"));
            amount1.setNamedWhereClauseParam("BindHoId", cRow.getAttribute("HoOrgId"));
            amount1.setNamedWhereClauseParam("BindOrgId", cRow.getAttribute("OrgId"));
            amount1.setNamedWhereClauseParam("BindSlocId", cRow.getAttribute("SlocId"));
            amount1.executeQuery();
            Row[] rs = amount1.getAllRowsInRange();
            System.out.println("Length : " + rs.length);
            if (rs.length > 0)
            {
                Number oneDaySal = (Number) rs[0].getAttribute("Salary");
                Number tot = day.multiply(oneDaySal);
                cRow.setAttribute("EncshAmt", tot);
                cRow.setAttribute("LeaveBal", bal);
            }
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void insertTotAmt(Number val)
    {
        Row currentRow = this.getHcmEmpLeaveEncsh1().getCurrentRow();
        currentRow.setAttribute("EncshAmt", val);
    }

    public String salaryAttendenceDateRangeAM(oracle.jbo.domain.Timestamp dt, oracle.jbo.domain.Timestamp dateforManual)
    {
        System.out.println("IN AM");
        System.out.println("Start date==" + dt);
        System.out.println("endDate=" + dateforManual);
        ViewObjectImpl DummyVO = this.getDummy1();
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();

        ViewObjectImpl AttendenceVO = this.getAttendence1();
        AttendenceVO.setNamedWhereClauseParam("BIND_CLD_ID", cldId);
        AttendenceVO.setNamedWhereClauseParam("BIND_SLOC_ID", slocId);
        AttendenceVO.setNamedWhereClauseParam("BIND_HO_ORG_ID", hoOrgId);
        AttendenceVO.setNamedWhereClauseParam("BIND_ORG_ID", orgId);
        AttendenceVO.setNamedWhereClauseParam("BIND_SAL_FRM_DT", dt);
        AttendenceVO.setNamedWhereClauseParam("BIND_SAL_TO_DT", dateforManual);
        AttendenceVO.executeQuery();
        System.out.println("estimated row cout" + AttendenceVO.getEstimatedRowCount());
        RowQualifier rq = new RowQualifier(AttendenceVO);
        String query = ("SalFrmDt='" + dt + "' OR SalToDt='" + dateforManual + "'");

        rq.setWhereClause(query);
        Row[] row = AttendenceVO.getFilteredRows(rq);
        System.out.println("row==" + row.length);
        if (row.length > 0)
        {
            DummyVO.getCurrentRow().setAttribute("TransSalaryAttfrom", row[0].getAttribute("AttenFrmDt"));
            DummyVO.getCurrentRow().setAttribute("TransSalaryAttTo", row[0].getAttribute("AttenToDt"));
            return "Y";

        }

        return "N";
    }

    /**
     * Container's getter for Attendence1.
     * @return Attendence1
     */
    public ViewObjectImpl getAttendence1()
    {
        return (ViewObjectImpl) findViewObject("Attendence1");
    }
}


