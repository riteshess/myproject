package hcmsalaryprocessingapp.model.views;

import hcmsalaryprocessingapp.model.module.HcmSalaryProcessingAppAMImpl;

import oracle.jbo.domain.Timestamp;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.context.FacesContext;

import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Feb 25 14:42:43 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DummySrchMultAttVORowImpl extends ViewRowImpl
{
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum
    {
        Selectobjects0,
        transAttDt,
        transEmpNm,
        OrgId,
        CldId,
        SlocId,
        HoOrgId,
        EmpDeptId,
        EmpLocId,
        EmpGrpId,
        leaveNm,
        LwpType,
        transEmpDocId,
        transSalBehav,
        transIsSubSalComp,
        transSalComp,
        LovEmpNameFrmEmpDocIdVO1,
        AllLeaveNmVO1,
        LwpTypeVo1,
        SalBehvTypeVO1,
        LovSalIdVO1;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index()
        {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex()
        {
            return firstIndex;
        }

        public static int count()
        {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues()
        {
            if (vals == null)
            {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int SELECTOBJECTS0 = AttributesEnum.Selectobjects0.index();
    public static final int TRANSATTDT = AttributesEnum.transAttDt.index();
    public static final int TRANSEMPNM = AttributesEnum.transEmpNm.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int EMPDEPTID = AttributesEnum.EmpDeptId.index();
    public static final int EMPLOCID = AttributesEnum.EmpLocId.index();
    public static final int EMPGRPID = AttributesEnum.EmpGrpId.index();
    public static final int LEAVENM = AttributesEnum.leaveNm.index();
    public static final int LWPTYPE = AttributesEnum.LwpType.index();
    public static final int TRANSEMPDOCID = AttributesEnum.transEmpDocId.index();
    public static final int TRANSSALBEHAV = AttributesEnum.transSalBehav.index();
    public static final int TRANSISSUBSALCOMP = AttributesEnum.transIsSubSalComp.index();
    public static final int TRANSSALCOMP = AttributesEnum.transSalComp.index();
    public static final int LOVEMPNAMEFRMEMPDOCIDVO1 = AttributesEnum.LovEmpNameFrmEmpDocIdVO1.index();
    public static final int ALLLEAVENMVO1 = AttributesEnum.AllLeaveNmVO1.index();
    public static final int LWPTYPEVO1 = AttributesEnum.LwpTypeVo1.index();
    public static final int SALBEHVTYPEVO1 = AttributesEnum.SalBehvTypeVO1.index();
    public static final int LOVSALIDVO1 = AttributesEnum.LovSalIdVO1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public DummySrchMultAttVORowImpl()
    {
    }

    /**
     * Gets the attribute value for the calculated attribute Selectobjects0.
     * @return the Selectobjects0
     */
    public String getSelectobjects0()
    {
        return (String) getAttributeInternal(SELECTOBJECTS0);
    }

    /**
     * Gets the attribute value for the calculated attribute transfrromDate.
     * @return the transfrromDate
     */
    public Timestamp gettransAttDt()
    {
        return (Timestamp) getAttributeInternal(TRANSATTDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute transfrromDate.
     * @param value value to set the  transfrromDate
     */
    public void settransAttDt(Timestamp value)
    {
        setAttributeInternal(TRANSATTDT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute transEmpNm.
     * @return the transEmpNm
     */
    public String gettransEmpNm()
    {
        return (String) getAttributeInternal(TRANSEMPNM);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute transEmpNm.
     * @param value value to set the  transEmpNm
     */
    public void settransEmpNm(String value)
    {
        setAttributeInternal(TRANSEMPNM, value);
    }

    /**
     * Gets the attribute value for the calculated attribute OrgId.
     * @return the OrgId
     */
    public String getOrgId()
    {
        return resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        //return (String) getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute OrgId.
     * @param value value to set the  OrgId
     */
    public void setOrgId(String value)
    {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CldId.
     * @return the CldId
     */
    public String getCldId()
    {
        return (resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
        //return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CldId.
     * @param value value to set the  CldId
     */
    public void setCldId(String value)
    {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute SlocId.
     * @return the SlocId
     */
    public Integer getSlocId()
    {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        //return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute SlocId.
     * @param value value to set the  SlocId
     */
    public void setSlocId(Integer value)
    {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute HoOrgId.
     * @return the HoOrgId
     */
    public String getHoOrgId()
    {
        return resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        //return (String) getAttributeInternal(HOORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute HoOrgId.
     * @param value value to set the  HoOrgId
     */
    public void setHoOrgId(String value)
    {
        setAttributeInternal(HOORGID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute EmpDeptId.
     * @return the EmpDeptId
     */
    public String getEmpDeptId()
    {
        System.out.println("getEmpDeptId"); 
        HcmSalaryProcessingAppAMImpl  am =  (HcmSalaryProcessingAppAMImpl)this.getApplicationModule();
        Row currentRow = am.getDummy1().getCurrentRow();
        if (currentRow!=null&&currentRow.getAttribute("Critaria").equals(52))//department
        { 
           return (String) currentRow.getAttribute("CritariaValueId");
        }
        return (String) getAttributeInternal(EMPDEPTID);
        
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute EmpDeptId.
     * @param value value to set the  EmpDeptId
     */
    public void setEmpDeptId(String value)
    {
        setAttributeInternal(EMPDEPTID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute EmpLocId.
     * @return the EmpLocId
     */
    public String getEmpLocId()
    {
        System.out.println("getEmpLocId");
        HcmSalaryProcessingAppAMImpl  am =  (HcmSalaryProcessingAppAMImpl)this.getApplicationModule();
        Row currentRow = am.getDummy1().getCurrentRow();
        if (currentRow!=null&&currentRow.getAttribute("Critaria").equals(51))//location
        { 
            return (String) currentRow.getAttribute("CritariaValueId");
        } 
        return (String) getAttributeInternal(EMPLOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute EmpLocId.
     * @param value value to set the  EmpLocId
     */
    public void setEmpLocId(String value)
    {
        setAttributeInternal(EMPLOCID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute EmpGrpId.
     * @return the EmpGrpId
     */
    public String getEmpGrpId()
    {
        System.out.println("getEmpGrpId");
        HcmSalaryProcessingAppAMImpl  am =  (HcmSalaryProcessingAppAMImpl)this.getApplicationModule();
        Row currentRow = am.getDummy1().getCurrentRow();
        if (currentRow!=null&& currentRow.getAttribute("Critaria").equals(53))//grp
        { 
            return (String) currentRow.getAttribute("CritariaValueId");
        } 
        return (String) getAttributeInternal(EMPGRPID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute EmpGrpId.
     * @param value value to set the  EmpGrpId
     */
    public void setEmpGrpId(String value)
    {
        setAttributeInternal(EMPGRPID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute leaveNm.
     * @return the leaveNm
     */
    public String getleaveNm()
    {
        return (String) getAttributeInternal(LEAVENM);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute leaveNm.
     * @param value value to set the  leaveNm
     */
    public void setleaveNm(String value)
    {
        setAttributeInternal(LEAVENM, value);
    }

    /**
     * Gets the attribute value for the calculated attribute LwpType.
     * @return the LwpType
     */
    public String getLwpType()
    {
        return (String) getAttributeInternal(LWPTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute LwpType.
     * @param value value to set the  LwpType
     */
    public void setLwpType(String value)
    {
        setAttributeInternal(LWPTYPE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute transEmpDocId.
     * @return the transEmpDocId
     */
    public String gettransEmpDocId()
    {
        return (String) getAttributeInternal(TRANSEMPDOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute transEmpDocId.
     * @param value value to set the  transEmpDocId
     */
    public void settransEmpDocId(String value)
    {
        setAttributeInternal(TRANSEMPDOCID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute transSalBehav.
     * @return the transSalBehav
     */
    public Integer gettransSalBehav()
    {
        return (Integer) getAttributeInternal(TRANSSALBEHAV);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute transSalBehav.
     * @param value value to set the  transSalBehav
     */
    public void settransSalBehav(Integer value)
    {
        setAttributeInternal(TRANSSALBEHAV, value);
    }

    /**
     * Gets the attribute value for the calculated attribute transIsSubSalComp.
     * @return the transIsSubSalComp
     */
    public String gettransIsSubSalComp()
    {
        return (String) getAttributeInternal(TRANSISSUBSALCOMP);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute transIsSubSalComp.
     * @param value value to set the  transIsSubSalComp
     */
    public void settransIsSubSalComp(String value)
    {
        setAttributeInternal(TRANSISSUBSALCOMP, value);
    }

    /**
     * Gets the attribute value for the calculated attribute transSalComp.
     * @return the transSalComp
     */
    public String gettransSalComp()
    {
        return (String) getAttributeInternal(TRANSSALCOMP);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute transSalComp.
     * @param value value to set the  transSalComp
     */
    public void settransSalComp(String value)
    {
        setAttributeInternal(TRANSSALCOMP, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovEmpNameFrmEmpDocIdVO1.
     */
    public RowSet getLovEmpNameFrmEmpDocIdVO1()
    {
        return (RowSet) getAttributeInternal(LOVEMPNAMEFRMEMPDOCIDVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> AllLeaveNmVO1.
     */
    public RowSet getAllLeaveNmVO1()
    {
        return (RowSet) getAttributeInternal(ALLLEAVENMVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LwpTypeVo1.
     */
    public RowSet getLwpTypeVo1()
    {
        return (RowSet) getAttributeInternal(LWPTYPEVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> SalBehvTypeVO1.
     */
    public RowSet getSalBehvTypeVO1()
    {
        return (RowSet) getAttributeInternal(SALBEHVTYPEVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovSalIdVO1.
     */
    public RowSet getLovSalIdVO1()
    {
        return (RowSet) getAttributeInternal(LOVSALIDVO1);
    }

    public Object resolvEl(String data) {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        ELContext elContext = facesContext.getELContext();
        ExpressionFactory expressionFactory = facesContext.getApplication().getExpressionFactory();
        ValueExpression exp = expressionFactory.createValueExpression(elContext, data, Object.class);
        return exp.getValue(elContext);
    }
}

