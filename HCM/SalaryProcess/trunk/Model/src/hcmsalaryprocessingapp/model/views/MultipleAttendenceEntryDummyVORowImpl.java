package hcmsalaryprocessingapp.model.views;

import hcmsalaryprocessingapp.model.module.HcmSalaryProcessingAppAMImpl;

import java.sql.SQLException;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.context.FacesContext;

import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri May 29 18:20:40 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MultipleAttendenceEntryDummyVORowImpl extends ViewRowImpl
{
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum
    {
        EmpDocId,
        HoOrgId,
        OrgId,
        SlocId,
        CldId,
        DedCh,
        EmpId,
        ExtraTimeHr,
        HlfdayLeaveChk,
        InTime,
        LeaveId,
        OutTime,
        WkOffChk,
        transEmpNm,
        TransInTime,
        TransoutTime,
        EmpDeptId,
        EmpLocId,
        EmpGrpId,
        TransFromDt,
        TransToDt,
        transNumberOfDays,
        TransCriteria,
        LovEmpNameFrmEmpDocIdVO1,
        LwpTypeVo1,
        LovLeaveVO1,
        LovLeaveWithAbsentVO1;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index()
        {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex()
        {
            return firstIndex;
        }

        public static int count()
        {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues()
        {
            if (vals == null)
            {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int EMPDOCID = AttributesEnum.EmpDocId.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int DEDCH = AttributesEnum.DedCh.index();
    public static final int EMPID = AttributesEnum.EmpId.index();
    public static final int EXTRATIMEHR = AttributesEnum.ExtraTimeHr.index();
    public static final int HLFDAYLEAVECHK = AttributesEnum.HlfdayLeaveChk.index();
    public static final int INTIME = AttributesEnum.InTime.index();
    public static final int LEAVEID = AttributesEnum.LeaveId.index();
    public static final int OUTTIME = AttributesEnum.OutTime.index();
    public static final int WKOFFCHK = AttributesEnum.WkOffChk.index();
    public static final int TRANSEMPNM = AttributesEnum.transEmpNm.index();
    public static final int TRANSINTIME = AttributesEnum.TransInTime.index();
    public static final int TRANSOUTTIME = AttributesEnum.TransoutTime.index();
    public static final int EMPDEPTID = AttributesEnum.EmpDeptId.index();
    public static final int EMPLOCID = AttributesEnum.EmpLocId.index();
    public static final int EMPGRPID = AttributesEnum.EmpGrpId.index();
    public static final int TRANSFROMDT = AttributesEnum.TransFromDt.index();
    public static final int TRANSTODT = AttributesEnum.TransToDt.index();
    public static final int TRANSNUMBEROFDAYS = AttributesEnum.transNumberOfDays.index();
    public static final int TRANSCRITERIA = AttributesEnum.TransCriteria.index();
    public static final int LOVEMPNAMEFRMEMPDOCIDVO1 = AttributesEnum.LovEmpNameFrmEmpDocIdVO1.index();
    public static final int LWPTYPEVO1 = AttributesEnum.LwpTypeVo1.index();
    public static final int LOVLEAVEVO1 = AttributesEnum.LovLeaveVO1.index();
    public static final int LOVLEAVEWITHABSENTVO1 = AttributesEnum.LovLeaveWithAbsentVO1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public MultipleAttendenceEntryDummyVORowImpl()
    {
    }

    /**
     * Gets the attribute value for the calculated attribute EmpDocId.
     * @return the EmpDocId
     */
    public String getEmpDocId()
    {
        return (String) getAttributeInternal(EMPDOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute EmpDocId.
     * @param value value to set the  EmpDocId
     */
    public void setEmpDocId(String value)
    {
        setAttributeInternal(EMPDOCID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute HoOrgId.
     * @return the HoOrgId
     */
    public String getHoOrgId()
    {
        return resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        //return (String) getAttributeInternal(HOORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute HoOrgId.
     * @param value value to set the  HoOrgId
     */
    public void setHoOrgId(String value)
    {
        setAttributeInternal(HOORGID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute OrgId.
     * @return the OrgId
     */
    public String getOrgId()
    {
        return resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        //return (String) getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute OrgId.
     * @param value value to set the  OrgId
     */
    public void setOrgId(String value)
    {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute SlocId.
     * @return the SlocId
     */
    public Integer getSlocId()
    {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        // return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute SlocId.
     * @param value value to set the  SlocId
     */
    public void setSlocId(Integer value)
    {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CldId.
     * @return the CldId
     */
    public String getCldId()
    {
        return (resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
        //return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CldId.
     * @param value value to set the  CldId
     */
    public void setCldId(String value)
    {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute DedCh.
     * @return the DedCh
     */
    public String getDedCh()
    {
        return (String) getAttributeInternal(DEDCH);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute DedCh.
     * @param value value to set the  DedCh
     */
    public void setDedCh(String value)
    {
        setAttributeInternal(DEDCH, value);
    }

    /**
     * Gets the attribute value for the calculated attribute EmpId.
     * @return the EmpId
     */
    public String getEmpId()
    {
        return (String) getAttributeInternal(EMPID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute EmpId.
     * @param value value to set the  EmpId
     */
    public void setEmpId(String value)
    {
        setAttributeInternal(EMPID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ExtraTimeHr.
     * @return the ExtraTimeHr
     */
    public Number getExtraTimeHr()
    {
        return (Number) getAttributeInternal(EXTRATIMEHR);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ExtraTimeHr.
     * @param value value to set the  ExtraTimeHr
     */
    public void setExtraTimeHr(Number value)
    {
        setAttributeInternal(EXTRATIMEHR, value);
    }

    /**
     * Gets the attribute value for the calculated attribute HlfdayLeaveChk.
     * @return the HlfdayLeaveChk
     */
    public String getHlfdayLeaveChk()
    {
        return (String) getAttributeInternal(HLFDAYLEAVECHK);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute HlfdayLeaveChk.
     * @param value value to set the  HlfdayLeaveChk
     */
    public void setHlfdayLeaveChk(String value)
    {
        setAttributeInternal(HLFDAYLEAVECHK, value);
    }

    /**
     * Gets the attribute value for the calculated attribute InTime.
     * @return the InTime
     */
    public Timestamp getInTime()
    {
        return (Timestamp) getAttributeInternal(INTIME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute InTime.
     * @param value value to set the  InTime
     */
    public void setInTime(Timestamp value)
    {
        setAttributeInternal(INTIME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute LeaveId.
     * @return the LeaveId
     */
    public String getLeaveId()
    {
        return (String) getAttributeInternal(LEAVEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute LeaveId.
     * @param value value to set the  LeaveId
     */
    public void setLeaveId(String value)
    {
        setAttributeInternal(LEAVEID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute OutTime.
     * @return the OutTime
     */
    public Timestamp getOutTime()
    {
        return (Timestamp) getAttributeInternal(OUTTIME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute OutTime.
     * @param value value to set the  OutTime
     */
    public void setOutTime(Timestamp value)
    {
        setAttributeInternal(OUTTIME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute WkOffChk.
     * @return the WkOffChk
     */
    public String getWkOffChk()
    {
        return (String) getAttributeInternal(WKOFFCHK);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute WkOffChk.
     * @param value value to set the  WkOffChk
     */
    public void setWkOffChk(String value)
    {
        setAttributeInternal(WKOFFCHK, value);
    }

    /**
     * Gets the attribute value for the calculated attribute transEmpNm.
     * @return the transEmpNm
     */
    public String gettransEmpNm()
    {
        HcmSalaryProcessingAppAMImpl am = (HcmSalaryProcessingAppAMImpl) this.getApplicationModule();
        String empNM = "";
        ViewObjectImpl vo = am.getLovAllEmpNm();
        Row[] r = vo.getFilteredRows("DocId", this.getEmpDocId());
        if (r.length > 0)
        {
            empNM = (String) r[0].getAttribute("EmpNm");
        }
        System.out.println("employee name=" + empNM + " and emp docid = " + this.getEmpDocId());
        return empNM;

        //return (String) getAttributeInternal(TRANSEMPNM);

    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute transEmpNm.
     * @param value value to set the  transEmpNm
     */
    public void settransEmpNm(String value)
    {
        setAttributeInternal(TRANSEMPNM, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransInTime.
     * @return the TransInTime
     */
    public String getTransInTime()
    {
        if (getAttributeInternal(TRANSINTIME) != null)
        {
            System.out.println("trans internal not null");
            return (String) getAttributeInternal(TRANSINTIME);

        }
        else
        {
            System.out.println("inside trans in time getter in else");
            if (getInTime() != null && ((getInTime().toString().length()) > 0))
            {

                String inTime = null;
                Date dt = null;
                try
                {
                    dt = new Date(getInTime().dateValue());
                }
                catch (SQLException e)
                {
                }
                inTime = dt.toString();

                inTime = inTime.substring(11, 16);
                System.out.println("get in time not null in getter");
                System.out.println("in time is--" + inTime);
                return inTime;
            }
        }

        return (String) getAttributeInternal(TRANSINTIME);

    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransInTime.
     * @param value value to set the  TransInTime
     */
    public void setTransInTime(String value)
    {
        setAttributeInternal(TRANSINTIME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransoutTime.
     * @return the TransoutTime
     */
    public String getTransoutTime()
    {
        if (getAttributeInternal(TRANSOUTTIME) != null)
        {
            return (String) getAttributeInternal(TRANSOUTTIME);
        }
        else
        {
            if (getOutTime() != null && ((getOutTime().toString().length()) > 0))
            {
                String outTime = null;
                Date dt = null;
                try
                {
                    dt = new Date(getOutTime().dateValue());
                }
                catch (SQLException e)
                {
                }
                outTime = dt.toString();

                outTime = outTime.substring(11, 16);
                System.out.println("OutTime is--" + outTime);
                return outTime;
            }
        }
        return (String) getAttributeInternal(TRANSOUTTIME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransoutTime.
     * @param value value to set the  TransoutTime
     */
    public void setTransoutTime(String value)
    {
        setAttributeInternal(TRANSOUTTIME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute EmpDeptId.
     * @return the EmpDeptId
     */
    public String getEmpDeptId()
    {
        return (String) getAttributeInternal(EMPDEPTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute EmpDeptId.
     * @param value value to set the  EmpDeptId
     */
    public void setEmpDeptId(String value)
    {
        setAttributeInternal(EMPDEPTID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute EmpLocId.
     * @return the EmpLocId
     */
    public String getEmpLocId()
    {
        return (String) getAttributeInternal(EMPLOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute EmpLocId.
     * @param value value to set the  EmpLocId
     */
    public void setEmpLocId(String value)
    {
        setAttributeInternal(EMPLOCID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute EmpGrpId.
     * @return the EmpGrpId
     */
    public String getEmpGrpId()
    {
        return (String) getAttributeInternal(EMPGRPID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute EmpGrpId.
     * @param value value to set the  EmpGrpId
     */
    public void setEmpGrpId(String value)
    {
        setAttributeInternal(EMPGRPID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransFromDt.
     * @return the TransFromDt
     */
    public Timestamp getTransFromDt()
    {
        return (Timestamp) getAttributeInternal(TRANSFROMDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransFromDt.
     * @param value value to set the  TransFromDt
     */
    public void setTransFromDt(Timestamp value)
    {
        setAttributeInternal(TRANSFROMDT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransToDt.
     * @return the TransToDt
     */
    public Timestamp getTransToDt()
    {
        return (Timestamp) getAttributeInternal(TRANSTODT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransToDt.
     * @param value value to set the  TransToDt
     */
    public void setTransToDt(Timestamp value)
    {
        setAttributeInternal(TRANSTODT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute transNumberOfDays.
     * @return the transNumberOfDays
     */
    public Integer gettransNumberOfDays()
    {
        return (Integer) getAttributeInternal(TRANSNUMBEROFDAYS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute transNumberOfDays.
     * @param value value to set the  transNumberOfDays
     */
    public void settransNumberOfDays(Integer value)
    {
        setAttributeInternal(TRANSNUMBEROFDAYS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransCriteria.
     * @return the TransCriteria
     */
    public Integer getTransCriteria()
    {
        HcmSalaryProcessingAppAMImpl am = (HcmSalaryProcessingAppAMImpl) this.getApplicationModule();
        return (Integer) am.getDummy1().getCurrentRow().getAttribute("Critaria");
        //return (Integer) getAttributeInternal(TRANSCRITERIA);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransCriteria.
     * @param value value to set the  TransCriteria
     */
    public void setTransCriteria(Integer value)
    {
        setAttributeInternal(TRANSCRITERIA, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovEmpNameFrmEmpDocIdVO1.
     */
    public RowSet getLovEmpNameFrmEmpDocIdVO1()
    {
        return (RowSet) getAttributeInternal(LOVEMPNAMEFRMEMPDOCIDVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LwpTypeVo1.
     */
    public RowSet getLwpTypeVo1()
    {
        return (RowSet) getAttributeInternal(LWPTYPEVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovLeaveVO1.
     */
    public RowSet getLovLeaveVO1()
    {
        return (RowSet) getAttributeInternal(LOVLEAVEVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovLeaveWithAbsentVO1.
     */
    public RowSet getLovLeaveWithAbsentVO1()
    {
        return (RowSet) getAttributeInternal(LOVLEAVEWITHABSENTVO1);
    }

    public RowSet getLovEmpNameFrmEmpDocIdVO()
    {
        HcmSalaryProcessingAppAMImpl am = (HcmSalaryProcessingAppAMImpl) this.getApplicationModule();
        String cld = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer sloc = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String hoOrg = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        String org = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();

        System.out.println("inside filter emp");
        ViewObjectImpl dummy1 = am.getDummy1();
        Row currentRow = dummy1.getCurrentRow();

        ((RowSet) getAttributeInternal(LOVEMPNAMEFRMEMPDOCIDVO1)).setNamedWhereClauseParam("BindOrgId", org);
        ((RowSet) getAttributeInternal(LOVEMPNAMEFRMEMPDOCIDVO1)).setNamedWhereClauseParam("BindCldId", cld);
        ((RowSet) getAttributeInternal(LOVEMPNAMEFRMEMPDOCIDVO1)).setNamedWhereClauseParam("BindSlocId", sloc);
        ((RowSet) getAttributeInternal(LOVEMPNAMEFRMEMPDOCIDVO1)).setNamedWhereClauseParam("BindHoOrgId", hoOrg);

        if (currentRow.getAttribute("Critaria").equals(51))
        {
            System.out.println("inside loc wise filter-" + dummy1.getCurrentRow().getAttribute("CritariaValueId"));
            ((RowSet) getAttributeInternal(LOVEMPNAMEFRMEMPDOCIDVO1)).setNamedWhereClauseParam("BindLocId",
                                                                                               dummy1.getCurrentRow().getAttribute("CritariaValueId"));
        }
        else
            ((RowSet) getAttributeInternal(LOVEMPNAMEFRMEMPDOCIDVO1)).setNamedWhereClauseParam("BindLocId", null);
        if (currentRow.getAttribute("Critaria").equals(52))
        {
            ((RowSet) getAttributeInternal(LOVEMPNAMEFRMEMPDOCIDVO1)).setNamedWhereClauseParam("BindDeptId",
                                                                                               dummy1.getCurrentRow().getAttribute("CritariaValueId"));
        }
        else
            ((RowSet) getAttributeInternal(LOVEMPNAMEFRMEMPDOCIDVO1)).setNamedWhereClauseParam("BindDeptId", null);
        if (currentRow.getAttribute("Critaria").equals(53))
        {
            ((RowSet) getAttributeInternal(LOVEMPNAMEFRMEMPDOCIDVO1)).setNamedWhereClauseParam("BindGrpId",
                                                                                               dummy1.getCurrentRow().getAttribute("CritariaValueId"));
        }
        else
            ((RowSet) getAttributeInternal(LOVEMPNAMEFRMEMPDOCIDVO1)).setNamedWhereClauseParam("BindGrpId", null);

        //((RowSet)getAttributeInternal(LOVEMPNAMEFRMEMPDOCIDVO)).executeQuery();
        System.out.println("aft filter row count- " +
                           ((RowSet) getAttributeInternal(LOVEMPNAMEFRMEMPDOCIDVO1)).getEstimatedRowCount());
        return (RowSet) getAttributeInternal(LOVEMPNAMEFRMEMPDOCIDVO1);
    }

    public Object resolvEl(String data)
    {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        ELContext elContext = facesContext.getELContext();
        ExpressionFactory expressionFactory = facesContext.getApplication().getExpressionFactory();
        ValueExpression exp = expressionFactory.createValueExpression(elContext, data, Object.class);
        return exp.getValue(elContext);
    }


}

