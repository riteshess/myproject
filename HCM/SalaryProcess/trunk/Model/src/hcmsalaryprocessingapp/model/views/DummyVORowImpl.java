package hcmsalaryprocessingapp.model.views;

import hcmsalaryprocessingapp.model.module.HcmSalaryProcessingAppAMImpl;

import oracle.jbo.domain.Timestamp;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.context.FacesContext;

import oracle.jbo.Row;
import oracle.jbo.RowSet;


import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Sep 18 09:50:26 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DummyVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        Dummy,
        Critaria,
        OrgId,
        EmpCode,
        CldId,
        SlocId,
        HoOrgId,
        CritariaValueId,
        CitariaValueNm,
        switchLov,
        Frequency,
        Fromdt,
        ToDt,
        TransLabel,
        NoOfDays,
        TransSalaryAttfrom,
        TransSalaryAttTo,
        LovLocationsVO1,
        LovCritairaVO1,
        LovEmpGroupVO1,
        LovDepartmentVO1,
        LovEmpNameVO1,
        LovFrequencyVO1;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int DUMMY = AttributesEnum.Dummy.index();
    public static final int CRITARIA = AttributesEnum.Critaria.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int EMPCODE = AttributesEnum.EmpCode.index();
    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int CRITARIAVALUEID = AttributesEnum.CritariaValueId.index();
    public static final int CITARIAVALUENM = AttributesEnum.CitariaValueNm.index();
    public static final int SWITCHLOV = AttributesEnum.switchLov.index();
    public static final int FREQUENCY = AttributesEnum.Frequency.index();
    public static final int FROMDT = AttributesEnum.Fromdt.index();
    public static final int TODT = AttributesEnum.ToDt.index();
    public static final int TRANSLABEL = AttributesEnum.TransLabel.index();
    public static final int NOOFDAYS = AttributesEnum.NoOfDays.index();
    public static final int TRANSSALARYATTFROM = AttributesEnum.TransSalaryAttfrom.index();
    public static final int TRANSSALARYATTTO = AttributesEnum.TransSalaryAttTo.index();
    public static final int LOVLOCATIONSVO1 = AttributesEnum.LovLocationsVO1.index();
    public static final int LOVCRITAIRAVO1 = AttributesEnum.LovCritairaVO1.index();
    public static final int LOVEMPGROUPVO1 = AttributesEnum.LovEmpGroupVO1.index();
    public static final int LOVDEPARTMENTVO1 = AttributesEnum.LovDepartmentVO1.index();
    public static final int LOVEMPNAMEVO1 = AttributesEnum.LovEmpNameVO1.index();
    public static final int LOVFREQUENCYVO1 = AttributesEnum.LovFrequencyVO1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public DummyVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute Dummy.
     * @return the Dummy
     */
    public String getDummy() {
        return (String) getAttributeInternal(DUMMY);
    }

    /**
     * Gets the attribute value for the calculated attribute Critaria.
     * @return the Critaria
     */
    public Integer getCritaria() {
        // System.out.println("inside get critaria---");
        /* HcmSalaryProcessingAppAMImpl am = (HcmSalaryProcessingAppAMImpl) this.getApplicationModule();
        am.getOrgHcmProfile1().setNamedWhereClauseParam("BindOrgId", getOrgId());
        am.getOrgHcmProfile1().setNamedWhereClauseParam("BindCldId", getCldId());
        am.getOrgHcmProfile1().setNamedWhereClauseParam("BindSlocId", getSlocId());
        am.getOrgHcmProfile1().executeQuery();
        Integer crt;
        Row[] rows = am.getOrgHcmProfile1().getFilteredRows("OrgId", getOrgId());
        //System.out.println("filter row crt lenght--" + rows.length);
        if (rows.length > 0) {
            crt = Integer.parseInt(rows[0].getAttribute("SalProcCrt").toString());
            //System.out.println("critaria is---" + crt);
            return crt;
        }*/
        return (Integer) getAttributeInternal(CRITARIA);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Critaria.
     * @param value value to set the  Critaria
     */
    public void setCritaria(Integer value) {
        setAttributeInternal(CRITARIA, value);
    }


    public Object resolvEl(String data) {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        ELContext elContext = facesContext.getELContext();
        ExpressionFactory expressionFactory = facesContext.getApplication().getExpressionFactory();
        ValueExpression exp = expressionFactory.createValueExpression(elContext, data, Object.class);
        return exp.getValue(elContext);
    }

    /**
     * Gets the attribute value for the calculated attribute OrgId.
     * @return the OrgId
     */
    public String getOrgId() {
        return resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        //    return (String) getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute OrgId.
     * @param value value to set the  OrgId
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute EmpCode.
     * @return the EmpCode
     */
    public oracle.jbo.domain.Number getEmpCode() {
        return (oracle.jbo.domain.Number) getAttributeInternal(EMPCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute EmpCode.
     * @param value value to set the  EmpCode
     */
    public void setEmpCode(oracle.jbo.domain.Number value) {
        setAttributeInternal(EMPCODE, value);
    }


    /**
     * Gets the attribute value for the calculated attribute CldId.
     * @return the CldId
     */
    public String getCldId() {
        return (resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
        //return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CldId.
     * @param value value to set the  CldId
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute SlocId.
     * @return the SlocId
     */
    public Integer getSlocId() 
    {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        //return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute SlocId.
     * @param value value to set the  SlocId
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute HoOrgId.
     * @return the HoOrgId
     */
    public String getHoOrgId() {
        return resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        //return (String) getAttributeInternal(HOORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute HoOrgId.
     * @param value value to set the  HoOrgId
     */
    public void setHoOrgId(String value) {
        setAttributeInternal(HOORGID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CritariaValueId.
     * @return the CritariaValueId
     */
    public String getCritariaValueId() {
        return (String) getAttributeInternal(CRITARIAVALUEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CritariaValueId.
     * @param value value to set the  CritariaValueId
     */
    public void setCritariaValueId(String value) {
        setAttributeInternal(CRITARIAVALUEID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CitariaValueNm.
     * @return the CitariaValueNm
     */
    public String getCitariaValueNm() {
        return (String) getAttributeInternal(CITARIAVALUENM);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CitariaValueNm.
     * @param value value to set the  CitariaValueNm
     */
    public void setCitariaValueNm(String value) {
        setAttributeInternal(CITARIAVALUENM, value);
    }

    /**
     * Gets the attribute value for the calculated attribute switchLov.
     * @return the switchLov
     */
    public String getswitchLov() {
        return (String) getAttributeInternal(SWITCHLOV);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute switchLov.
     * @param value value to set the  switchLov
     */
    public void setswitchLov(String value) {
        setAttributeInternal(SWITCHLOV, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Frequency.
     * @return the Frequency
     */
    public Integer getFrequency() {
        //System.out.println("inside get frequency-----");
        // System.out.println("criteria is --" + getCritaria());
        if (getCritaria() != null) {
            Integer freq;
            HcmSalaryProcessingAppAMImpl am = (HcmSalaryProcessingAppAMImpl) this.getApplicationModule();
            am.getOrgHcmProfile1().setNamedWhereClauseParam("BindOrgId", getOrgId());
            am.getOrgHcmProfile1().setNamedWhereClauseParam("BindCldId", getCldId());
            am.getOrgHcmProfile1().setNamedWhereClauseParam("BindSlocId", getSlocId());
            am.getOrgHcmProfile1().executeQuery();
            am.getEmpGroupPrf1().setNamedWhereClauseParam("BindOrgId", getOrgId());
            am.getEmpGroupPrf1().setNamedWhereClauseParam("BindCldId", getCldId());
            am.getEmpGroupPrf1().setNamedWhereClauseParam("BindSlocId", getSlocId());
            am.getEmpGroupPrf1().setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
            am.getEmpGroupPrf1().executeQuery();
            am.getEmp1().setNamedWhereClauseParam("BindOrgId", getOrgId());
            am.getEmp1().setNamedWhereClauseParam("BindCldId", getCldId());
            am.getEmp1().setNamedWhereClauseParam("BindSlocId", getSlocId());
            am.getEmp1().setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
            am.getEmp1().executeQuery();
            Row[] rows = am.getOrgHcmProfile1().getFilteredRows("OrgId", getOrgId());
            if (rows.length > 0) {
                //  Integer crt = Integer.parseInt(rows[0].getAttribute("SalProcCrt").toString());
                if (getCritaria() == 51) {
                    //freq = 7;
                    freq = Integer.parseInt(rows[0].getAttribute("SalProcFreqLoc").toString());
                    //System.out.println("frequency is in loc " + freq);
                    return freq;
                } else if (getCritaria() == 52) {
                    freq = Integer.parseInt(rows[0].getAttribute("SalProcFreqDept").toString());
                    //System.out.println("frequency is in dept--" + freq);
                    return freq;
                } else if (getCritaria() == 53 && getCritariaValueId() != null) {

                    Row[] filteredRows = am.getEmpGroupPrf1().getFilteredRows("GrpId", getCritariaValueId());
                    if (filteredRows.length > 0) {
                        freq = Integer.parseInt(filteredRows[0].getAttribute("SalProcFreq").toString());
                        // System.out.println("frequency is in grp--" + freq);
                        return freq;
                    }
                } else if (getCritaria() == 54 && getCritariaValueId() != null) {
                    Row[] filteredRows = am.getEmp1().getFilteredRows("DocId", getCritariaValueId());
                    if (filteredRows.length > 0) {
                        Object grpId = filteredRows[0].getAttribute("EmpGrpId");
                        //  System.out.println("grp id-" + grpId);
                        Row[] grpRows = am.getEmpGroupPrf1().getFilteredRows("GrpId", grpId);
                        if (grpRows.length > 0) {
                            freq = Integer.parseInt(grpRows[0].getAttribute("SalProcFreq").toString());
                            //  System.out.println("frequency is in emp--" + freq);
                            return freq;
                        }
                    }
                }
            }
        }
        return (Integer) getAttributeInternal(FREQUENCY);
    }


    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Frequency.
     * @param value value to set the  Frequency
     */
    public void setFrequency(Integer value) {
        setAttributeInternal(FREQUENCY, value);
    }

    /**
     * Gets the attribute value for the calculated attribute StartDt.
     * @return the StartDt
     */
    public Timestamp getFromdt() {
        return (Timestamp) getAttributeInternal(FROMDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute StartDt.
     * @param value value to set the  StartDt
     */
    public void setFromdt(Timestamp value) {
        setAttributeInternal(FROMDT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute EndDt.
     * @return the EndDt
     */
    public Timestamp getToDt() {
        return (Timestamp) getAttributeInternal(TODT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute EndDt.
     * @param value value to set the  EndDt
     */
    public void setToDt(Timestamp value) {
        setAttributeInternal(TODT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransLabel.
     * @return the TransLabel
     */
    public String getTransLabel() {
        if (getCritaria() != null) {
            String label = null;
            Row[] filteredRows = this.getLovCritairaVO1().getFilteredRows("AttId", getCritaria());
            if (filteredRows.length > 0) {
                label = filteredRows[0].getAttribute("AttNm").toString();
                return label;
            }
        }
        return (String) getAttributeInternal(TRANSLABEL);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransLabel.
     * @param value value to set the  TransLabel
     */
    public void setTransLabel(String value) {
        setAttributeInternal(TRANSLABEL, value);
    }

    /**
     * Gets the attribute value for the calculated attribute NoOfDays.
     * @return the NoOfDays
     */
    public Integer getNoOfDays() {
        if (getFrequency() != null && getFrequency() == 9) {
            HcmSalaryProcessingAppAMImpl am = (HcmSalaryProcessingAppAMImpl) this.getApplicationModule();
            if (getCritaria() == 53 && getCritariaValueId() != null) {
                int days = 0;
                Row[] filteredRows = am.getEmpGroupPrf1().getFilteredRows("GrpId", getCritariaValueId());
                if (filteredRows.length > 0) {
                    if (filteredRows[0].getAttribute("FreqDays") != null) {
                        days = Integer.parseInt(filteredRows[0].getAttribute("FreqDays").toString());
                    }
                    //System.out.println("No.of days is in grp--" + days);
                    return days;
                }
            }

            else if (getCritaria() == 54 && getCritariaValueId() != null) {
                Row[] filteredRows = am.getEmp1().getFilteredRows("DocId", getCritariaValueId());
                if (filteredRows.length > 0) {
                    Object grpId = filteredRows[0].getAttribute("EmpGrpId");
                    //  System.out.println("grp id-" + grpId);
                    Row[] grpRows = am.getEmpGroupPrf1().getFilteredRows("GrpId", grpId);
                    if (grpRows.length > 0) {
                        int days = Integer.parseInt(grpRows[0].getAttribute("FreqDays").toString());
                        //System.out.println("days is in emp--" + days);
                        return days;
                    }
                }
            }

            else if (getCritaria() == 51 && getCritariaValueId() != null) {
                Row[] rows = am.getOrgHcmProfile1().getFilteredRows("OrgId", getOrgId());
                if (rows.length > 0) {
                    Integer days = Integer.parseInt(rows[0].getAttribute("FreqDayLoc").toString());
                    return days;
                }
            }

            else if (getCritaria() == 52 && getCritariaValueId() != null) {
                Row[] rows = am.getOrgHcmProfile1().getFilteredRows("OrgId", getOrgId());
                if (rows.length > 0) {
                    Integer days = Integer.parseInt(rows[0].getAttribute("FreqDayDept").toString());
                    return days;
                }
            }
        }
        return (Integer) getAttributeInternal(NOOFDAYS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute NoOfDays.
     * @param value value to set the  NoOfDays
     */
    public void setNoOfDays(Integer value) {
        setAttributeInternal(NOOFDAYS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransSalaryAttfrom.
     * @return the TransSalaryAttfrom
     */
    public oracle.jbo.domain.Timestamp getTransSalaryAttfrom() {
        return (oracle.jbo.domain.Timestamp) getAttributeInternal(TRANSSALARYATTFROM);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransSalaryAttfrom.
     * @param value value to set the  TransSalaryAttfrom
     */
    public void setTransSalaryAttfrom(Timestamp value) {
        setAttributeInternal(TRANSSALARYATTFROM, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransSalaryAttTo.
     * @return the TransSalaryAttTo
     */
    public oracle.jbo.domain.Timestamp getTransSalaryAttTo() {
        return (oracle.jbo.domain.Timestamp) getAttributeInternal(TRANSSALARYATTTO);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransSalaryAttTo.
     * @param value value to set the  TransSalaryAttTo
     */
    public void setTransSalaryAttTo(Timestamp value) {
        setAttributeInternal(TRANSSALARYATTTO, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovLocationsVO1.
     */
    public RowSet getLovLocationsVO1() {
        return (RowSet) getAttributeInternal(LOVLOCATIONSVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovCritairaVO1.
     */
    public RowSet getLovCritairaVO1() {
        return (RowSet) getAttributeInternal(LOVCRITAIRAVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovEmpGroupVO1.
     */
    public RowSet getLovEmpGroupVO1() {
        return (RowSet) getAttributeInternal(LOVEMPGROUPVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovDepartmentVO1.
     */
    public RowSet getLovDepartmentVO1() {
        return (RowSet) getAttributeInternal(LOVDEPARTMENTVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovEmpNameVO1.
     */
    public RowSet getLovEmpNameVO1() {
        return (RowSet) getAttributeInternal(LOVEMPNAMEVO1);
    }


    /**
     * Gets the view accessor <code>RowSet</code> LovFrequencyVO1.
     */
    public RowSet getLovFrequencyVO1() {
        return (RowSet) getAttributeInternal(LOVFREQUENCYVO1);
    }
}

