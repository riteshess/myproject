package hcmsalaryprocessingapp.model.entities;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import oracle.jbo.RowIterator;
import oracle.jbo.domain.Timestamp;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.context.FacesContext;

import oracle.jbo.AttributeList;
import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.domain.Number;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Jul 06 15:24:26 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class HcmEmpLeaveEncshEOImpl extends EntityImpl {
    /**
     * Add locking logic here.
     */
    public void lock() {
        //super.lock();
    }

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CldId,
        SlocId,
        HoOrgId,
        OrgId,
        DocId,
        DocDt,
        EmpDocId,
        EmpDeptId,
        EmpLocId,
        EmpGrpId,
        EncshAmt,
        UsrIdCreate,
        UsrIdCreateDt,
        UsrIdMod,
        UsrIdModDt,
        EncshStatus,
        HcmEmpLeaveEncshDtl;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int DOCDT = AttributesEnum.DocDt.index();
    public static final int EMPDOCID = AttributesEnum.EmpDocId.index();
    public static final int EMPDEPTID = AttributesEnum.EmpDeptId.index();
    public static final int EMPLOCID = AttributesEnum.EmpLocId.index();
    public static final int EMPGRPID = AttributesEnum.EmpGrpId.index();
    public static final int ENCSHAMT = AttributesEnum.EncshAmt.index();
    public static final int USRIDCREATE = AttributesEnum.UsrIdCreate.index();
    public static final int USRIDCREATEDT = AttributesEnum.UsrIdCreateDt.index();
    public static final int USRIDMOD = AttributesEnum.UsrIdMod.index();
    public static final int USRIDMODDT = AttributesEnum.UsrIdModDt.index();
    public static final int ENCSHSTATUS = AttributesEnum.EncshStatus.index();
    public static final int HCMEMPLEAVEENCSHDTL = AttributesEnum.HcmEmpLeaveEncshDtl.index();

    /**
     * This is the default constructor (do not remove).
     */
    public HcmEmpLeaveEncshEOImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("hcmsalaryprocessingapp.model.entities.HcmEmpLeaveEncshEO");
    }


    /**
     * Gets the attribute value for CldId, using the alias name CldId.
     * @return the value of CldId
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CldId.
     * @param value value to set the CldId
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for SlocId, using the alias name SlocId.
     * @return the value of SlocId
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for SlocId.
     * @param value value to set the SlocId
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for HoOrgId, using the alias name HoOrgId.
     * @return the value of HoOrgId
     */
    public String getHoOrgId() {
        return (String) getAttributeInternal(HOORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for HoOrgId.
     * @param value value to set the HoOrgId
     */
    public void setHoOrgId(String value) {
        setAttributeInternal(HOORGID, value);
    }

    /**
     * Gets the attribute value for OrgId, using the alias name OrgId.
     * @return the value of OrgId
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for OrgId.
     * @param value value to set the OrgId
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for DocId, using the alias name DocId.
     * @return the value of DocId
     */
    public String getDocId() {
        return (String) getAttributeInternal(DOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for DocId.
     * @param value value to set the DocId
     */
    public void setDocId(String value) {
        setAttributeInternal(DOCID, value);
    }

    /**
     * Gets the attribute value for EmpDocId, using the alias name EmpDocId.
     * @return the value of EmpDocId
     */
    public String getEmpDocId() {
        return (String) getAttributeInternal(EMPDOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for EmpDocId.
     * @param value value to set the EmpDocId
     */
    public void setEmpDocId(String value) {
        setAttributeInternal(EMPDOCID, value);
    }


    /**
     * Gets the attribute value for EmpDeptId, using the alias name EmpDeptId.
     * @return the value of EmpDeptId
     */
    public String getEmpDeptId() {
        return (String) getAttributeInternal(EMPDEPTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for EmpDeptId.
     * @param value value to set the EmpDeptId
     */
    public void setEmpDeptId(String value) {
        setAttributeInternal(EMPDEPTID, value);
    }

    /**
     * Gets the attribute value for EmpLocId, using the alias name EmpLocId.
     * @return the value of EmpLocId
     */
    public String getEmpLocId() {
        return (String) getAttributeInternal(EMPLOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for EmpLocId.
     * @param value value to set the EmpLocId
     */
    public void setEmpLocId(String value) {
        setAttributeInternal(EMPLOCID, value);
    }

    /**
     * Gets the attribute value for EmpGrpId, using the alias name EmpGrpId.
     * @return the value of EmpGrpId
     */
    public String getEmpGrpId() {
        return (String) getAttributeInternal(EMPGRPID);
    }

    /**
     * Sets <code>value</code> as the attribute value for EmpGrpId.
     * @param value value to set the EmpGrpId
     */
    public void setEmpGrpId(String value) {
        setAttributeInternal(EMPGRPID, value);
    }

    /**
     * Gets the attribute value for UsrIdCreate, using the alias name UsrIdCreate.
     * @return the value of UsrIdCreate
     */
    public Integer getUsrIdCreate() {
        return (Integer) getAttributeInternal(USRIDCREATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdCreate.
     * @param value value to set the UsrIdCreate
     */
    public void setUsrIdCreate(Integer value) {
        setAttributeInternal(USRIDCREATE, value);
    }

    /**
     * Gets the attribute value for UsrIdCreateDt, using the alias name UsrIdCreateDt.
     * @return the value of UsrIdCreateDt
     */
    public Timestamp getUsrIdCreateDt() {
        return (Timestamp) getAttributeInternal(USRIDCREATEDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdCreateDt.
     * @param value value to set the UsrIdCreateDt
     */
    public void setUsrIdCreateDt(Timestamp value) {
        setAttributeInternal(USRIDCREATEDT, value);
    }

    /**
     * Gets the attribute value for UsrIdMod, using the alias name UsrIdMod.
     * @return the value of UsrIdMod
     */
    public Integer getUsrIdMod() {
        return (Integer) getAttributeInternal(USRIDMOD);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdMod.
     * @param value value to set the UsrIdMod
     */
    public void setUsrIdMod(Integer value) {
        setAttributeInternal(USRIDMOD, value);
    }

    /**
     * Gets the attribute value for UsrIdModDt, using the alias name UsrIdModDt.
     * @return the value of UsrIdModDt
     */
    public Timestamp getUsrIdModDt() {
        return (Timestamp) getAttributeInternal(USRIDMODDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdModDt.
     * @param value value to set the UsrIdModDt
     */
    public void setUsrIdModDt(Timestamp value) {
        setAttributeInternal(USRIDMODDT, value);
    }


    /**
     * Gets the attribute value for EncshStatus, using the alias name EncshStatus.
     * @return the value of EncshStatus
     */
    public String getEncshStatus() {
        return (String) getAttributeInternal(ENCSHSTATUS);
    }

    /**
     * Sets <code>value</code> as the attribute value for EncshStatus.
     * @param value value to set the EncshStatus
     */
    public void setEncshStatus(String value) {
        setAttributeInternal(ENCSHSTATUS, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getHcmEmpLeaveEncshDtl() {
        return (RowIterator) getAttributeInternal(HCMEMPLEAVEENCSHDTL);
    }


    /**
     * @param cldId key constituent
     * @param slocId key constituent
     * @param hoOrgId key constituent
     * @param orgId key constituent
     * @param docId key constituent
     * @param empDocId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(String cldId, Integer slocId, String hoOrgId, String orgId, String docId,
                                       String empDocId) {
        return new Key(new Object[] { cldId, slocId, hoOrgId, orgId, docId, empDocId });
    }

    /**
     * Gets the attribute value for DocDt, using the alias name DocDt.
     * @return the value of DocDt
     */
    public Timestamp getDocDt() {
        return (Timestamp) getAttributeInternal(DOCDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for DocDt.
     * @param value value to set the DocDt
     */
    public void setDocDt(Timestamp value) {
        setAttributeInternal(DOCDT, value);
    }

    /**
     * Gets the attribute value for EncshAmt, using the alias name EncshAmt.
     * @return the value of EncshAmt
     */
    public Number getEncshAmt() {
        return (Number) getAttributeInternal(ENCSHAMT);
    }

    /**
     * Sets <code>value</code> as the attribute value for EncshAmt.
     * @param value value to set the EncshAmt
     */
    public void setEncshAmt(Number value) {
        setAttributeInternal(ENCSHAMT, value);
    }


    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);

        String cld = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer sloc = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String org = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        Integer usr = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        setCldId(cld);
        setSlocId(sloc);
        setOrgId(org);
        setHoOrgId(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString());
        setUsrIdCreate(usr);
        setUsrIdCreateDt(new Timestamp(System.currentTimeMillis()));
        String rslt = (String) callStoredFunction(Types.VARCHAR, "APP.get_txn_id(?,?,?,?,?,?)", new Object[] {
                                                  cld, sloc, org, usr, 29506, 0
        });
        System.out.println("doc id for header is- >>" + rslt);
        setDocId(rslt);
        setEncshStatus("P");
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
        if (operation == DML_UPDATE) {
            setUsrIdMod(Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString()));
            setUsrIdModDt(new Timestamp(System.currentTimeMillis()));
        }
    }

    public Object resolvEl(String data) {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        ELContext elContext = facesContext.getELContext();
        ExpressionFactory expressionFactory = facesContext.getApplication().getExpressionFactory();
        ValueExpression exp = expressionFactory.createValueExpression(elContext, data, Object.class);
        return exp.getValue(elContext);
    }
    
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.executeUpdate();

            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    throw new JboException(e);
                }
            }
        }
    }
}

