package candidateprofilesetup.model.service;

import adf.utils.ebiz.EbizParams;

import adf.utils.model.ADFModelUtils;

import candidateprofilesetup.model.service.common.CandidateProfileAM;

import java.sql.Types;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Aug 05 16:28:44 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CandidateProfileAMImpl extends ApplicationModuleImpl implements CandidateProfileAM {
    /**
     * This is the default constructor (do not remove).
     */
    public CandidateProfileAMImpl() {
    }
    Integer docId = 28511;

    public void setBindVarOnPageLoad(String org, String cld, Integer sloc, String hoOrg) {

        System.out.println("On page load values are cld=" + cld + "sloc=" + sloc + "hoOrg=" + hoOrg + "org=" + org);
        getOrgHcmCndtProfVo1().setNamedWhereClauseParam("BIND_ORG_ID", org);
        getOrgHcmCndtProfVo1().setNamedWhereClauseParam("BIND_CLD_ID", cld);
        getOrgHcmCndtProfVo1().setNamedWhereClauseParam("BIND_SLOC_ID", sloc);
        getOrgHcmCndtProfVo1().setNamedWhereClauseParam("BIND_HO_ORG_ID", hoOrg);
        getOrgHcmCndtProfVo1().executeQuery();


    }

    public void setDocId() {
        String OrgId = EbizParams.GLBL_APP_USR_ORG();
        Integer UsrId = EbizParams.GLBL_APP_USR();
        String HoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String CldId = EbizParams.GLBL_APP_CLD_ID();
        Integer SlocId = EbizParams.GLBL_APP_SERV_LOC();
        ViewObjectImpl cndtVo = this.getOrgHcmCndtProfVo1();
        StringBuilder sbul = new StringBuilder("app.get_txn_id (?,?,?,?,?,?)");
        Object[] obj = { CldId, SlocId, OrgId, UsrId, docId, 0 };
        String docId = (String) ADFModelUtils.callFunction(this, sbul, obj, Types.VARCHAR);

        StringBuilder sbulfrCndtCode = new StringBuilder("app.GET_EO_ID (?,?,?)");
        Object[] obj1 = { CldId, SlocId, HoOrgId, };
        Object max = ADFModelUtils.callFunction(this, sbulfrCndtCode, obj1, Types.NUMERIC);
        cndtVo.getCurrentRow().setAttribute("DocId", docId);
        cndtVo.getCurrentRow().setAttribute("CndtCode", max);
    }

    public void searchCandidate() {
        ViewObjectImpl vo = getOrgHcmCndtProfVo1();
        ViewObjectImpl dummy1 = this.getDual1();
        Row currentRow = dummy1.getCurrentRow();
        if (currentRow.getAttribute("transCandiDocId") != null) {
            String candDocId = (String) currentRow.getAttribute("transCandiDocId");
            ViewCriteria vc = vo.getViewCriteria("searchCandidateVOCriteria");
            vo.applyViewCriteria(vc);
            vo.setNamedWhereClauseParam("BIND_DOC_ID", candDocId);
            vo.executeQuery();
        }
    }

    public void resetCandidate() {
        ViewObjectImpl vo = getOrgHcmCndtProfVo1();
        ViewObjectImpl dummy1 = this.getDual1();
        Row currentRow = dummy1.getCurrentRow();
        currentRow.setAttribute("transCandidateNm", "");
        currentRow.setAttribute("transCandiDocId", null);
        ViewCriteria vc = vo.getViewCriteria("searchCandidateVOCriteria");
        vo.applyViewCriteria(vc);
        vo.setNamedWhereClauseParam("BIND_DOC_ID", null);
        vo.executeQuery();

    }

    public String chkDupliaceLanguage(String cndtLangNm) {

        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        Integer userId = EbizParams.GLBL_APP_USR();
        ViewObjectImpl cndtLangVo1 = this.getHcmCndtLangVo1();
        Row currentRow = cndtLangVo1.getCurrentRow();
        if (currentRow != null) {

            String cndLangId = cndtLangNm;
            if (cndLangId != null && cndLangId.toString().length() > 0) {
                Row[] filteredRows = this.getLovLanguageName1().getFilteredRows("ParamDesc", cndtLangNm);
                if (filteredRows.length > 0) {
                    cndLangId = filteredRows[0].getAttribute("ParamId").toString();
                }
            }
            if (cndLangId != "" && cndLangId != null) {
                String docId = (String) currentRow.getAttribute("DocId");
                String cndtCode = (String) currentRow.getAttribute("CndtCode");
                RowQualifier rq = new RowQualifier(this.getHcmCndtLangVo1());
                String querry =
                    "CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId + "' and OrgId='" +
                    orgId + "'  and CndtCode = '" + cndtCode + "' and CndtLangId = '" + cndLangId + "' and DocId = '" +
                    docId + "'";
                System.out.println(querry);
                rq.setWhereClause(querry);
                Row fr[] = this.getHcmCndtLangVo1().getFilteredRows(rq);
                System.out.println("Total no. of same rows=" + fr.length);
                for (Row r : fr) {
                    System.out.println("Row=" + r + " and current row=" + this.getHcmCndtLangVo1().getCurrentRow());
                    if (!(r.equals(this.getHcmCndtLangVo1().getCurrentRow())))
                        return "Y";
                }
            }


        }


        return "N";
    }

    public String chkDupliaceSkills(String cndtSkillNm) {
        System.out.println("cndtSkillNm" + cndtSkillNm);
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        Integer userId = EbizParams.GLBL_APP_USR();
        ViewObjectImpl cndtSkillVo1 = this.getHcmCndtSkillsVo1();
        Row currentRow = cndtSkillVo1.getCurrentRow();
        if (currentRow != null) {

            String cndSkillId = "";
            if (cndtSkillNm != null && cndtSkillNm.toString().length() > 0) {
                System.out.println("cndtSkillNm" + cndtSkillNm);
                Row[] filteredRows = this.getLovSkillNm1().getFilteredRows("ParamDesc", cndtSkillNm);
                if (filteredRows.length > 0) {
                    cndSkillId = filteredRows[0].getAttribute("ParamId").toString();
                }
            }
            if (cndSkillId != "" && cndSkillId != null) {
                String docId = (String) currentRow.getAttribute("DocId");
                String cndtCode = (String) currentRow.getAttribute("CndtCode");
                RowQualifier rq = new RowQualifier(this.getHcmCndtSkillsVo1());
                String querry =
                    "CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId + "' and OrgId='" +
                    orgId + "'  and CndtCode = '" + cndtCode + "' and SkilId = '" + cndSkillId + "' and DocId = '" +
                    docId + "'";
                System.out.println(querry);
                rq.setWhereClause(querry);
                Row fr[] = this.getHcmCndtSkillsVo1().getFilteredRows(rq);
                System.out.println("Total no. of same rows=" + fr.length);
                for (Row r : fr) {
                    System.out.println("Row=" + r + " and current row=" + this.getHcmCndtSkillsVo1().getCurrentRow());
                    if (!(r.equals(this.getHcmCndtSkillsVo1().getCurrentRow())))
                        return "Y";
                }
            }

        }
        return "N";
    }

    public String chkDupliaceCource(String cndtCourceId) {
        System.out.println(" in chkDupliaceCource cndtCourceId" + cndtCourceId);

        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        Integer userId = EbizParams.GLBL_APP_USR();
        System.out.println("cndCourceId 1" + cndtCourceId);
        ViewObjectImpl cndtQualVo1 = this.getHcmCndtQualVo1();
        Row currentRow = cndtQualVo1.getCurrentRow();
        if (currentRow != null) {
            String cndCourceIdAm = "";

            System.out.println("cndCourceId  2" + cndtCourceId);
            if (cndtCourceId != null && cndtCourceId.toString().length() > 0) {
                Row[] filteredRows = this.getLovCourcesNm1().getFilteredRows("ParamId", cndtCourceId);
                if (filteredRows.length > 0) {
                    cndCourceIdAm = filteredRows[0].getAttribute("ParamId").toString();
                    System.out.println("cndCourceIdAm" + cndCourceIdAm);
                }
            }
            if (cndCourceIdAm != "" && cndCourceIdAm != null) {
                System.out.println("if (cndCourceIdAm3)" + cndCourceIdAm);
                String docId = (String) currentRow.getAttribute("DocId");
                String cndtCode = (String) currentRow.getAttribute("CndtCode");
                RowQualifier rq = new RowQualifier(this.getHcmCndtQualVo1());
                String querry =
                    "CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId + "' and OrgId='" +
                    orgId + "'  and CndtCode = '" + cndtCode + "' and SkilId = '" + cndtCourceId + "' and DocId = '" +
                    docId + "'";
                System.out.println(querry);
                rq.setWhereClause(querry);
                Row fr[] = this.getHcmCndtQualVo1().getFilteredRows(rq);
                System.out.println("Total no. of same rows=" + fr.length);
                for (Row r : fr) {
                    System.out.println("Row=" + r + " and current row=" + this.getHcmCndtQualVo1().getCurrentRow());
                    if (!(r.equals(this.getHcmCndtQualVo1().getCurrentRow())))
                        return "Y";
                }
            }

        }
        return "N";
    }
    public String chkDupliaceCompanyName(String cndtCompName) {
        ViewObjectImpl ln = getHcmCndtExpVo1();
                Row currentRow = ln.getCurrentRow();
                if (currentRow!=null) {
                    RowSetIterator rsi = ln.createRowSetIterator(null);
                    while (rsi.hasNext()) {
                        Row next = rsi.next();
                        if (next != currentRow) {
                            if (next.getAttribute("CndtOrgNm") != null) {
                                if (next.getAttribute("CndtOrgNm").toString().equalsIgnoreCase(cndtCompName)) {
                                    return "Y";
                                }
                            }
                        }

                    }
                }
                 return "N";
            }
       
    
    /**
     * Container's getter for Dual1.
     * @return Dual1
     */
    public ViewObjectImpl getDual1() {
        return (ViewObjectImpl) findViewObject("Dual1");
    }

    /**
     * Container's getter for LovLocationNm1.
     * @return LovLocationNm1
     */
    public ViewObjectImpl getLovLocationNm1() {
        String OrgId = EbizParams.GLBL_APP_USR_ORG();
        String HoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String CldId = EbizParams.GLBL_APP_CLD_ID();
        Integer SlocId = EbizParams.GLBL_APP_SERV_LOC();
        ViewObjectImpl vo = (ViewObjectImpl) findViewObject("LovLocationNm1");
        vo.setNamedWhereClauseParam("BIND_CLD_ID", CldId);
        vo.setNamedWhereClauseParam("BIND_HO_ORG_ID", HoOrgId);
        vo.setNamedWhereClauseParam("BIND_ORG_ID", OrgId);
        vo.setNamedWhereClauseParam("BIND_SLOC_ID", SlocId);
        vo.executeQuery();
        return vo;
        //return (ViewObjectImpl) findViewObject("LovLocationNm1");
    }

    /**
     * Container's getter for LovGrpNm1.
     * @return LovGrpNm1
     */
    public ViewObjectImpl getLovGrpNm1() {
        String OrgId = EbizParams.GLBL_APP_USR_ORG();
        String HoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String CldId = EbizParams.GLBL_APP_CLD_ID();
        Integer SlocId = EbizParams.GLBL_APP_SERV_LOC();
        ViewObjectImpl vo = (ViewObjectImpl) findViewObject("LovGrpNm1");
        vo.setNamedWhereClauseParam("BIND_CLD_ID", CldId);
        vo.setNamedWhereClauseParam("BIND_HO_ORG_ID", HoOrgId);
        vo.setNamedWhereClauseParam("BIND_ORG_ID", OrgId);
        vo.setNamedWhereClauseParam("BIND_SLOC_ID", SlocId);
        vo.executeQuery();
        return vo;
        //return (ViewObjectImpl) findViewObject("LovGrpNm1");
    }

    /**
     * Container's getter for LovDesigNm1.
     * @return LovDesigNm1
     */
    public ViewObjectImpl getLovDesigNm1() {
        String OrgId = EbizParams.GLBL_APP_USR_ORG();
        String HoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String CldId = EbizParams.GLBL_APP_CLD_ID();
        Integer SlocId = EbizParams.GLBL_APP_SERV_LOC();
        ViewObjectImpl vo = (ViewObjectImpl) findViewObject("LovDesigNm1");
        vo.setNamedWhereClauseParam("BIND_CLD_ID", CldId);
        vo.setNamedWhereClauseParam("BIND_HO_ORG_ID", HoOrgId);
        vo.setNamedWhereClauseParam("BIND_ORG_ID", OrgId);
        vo.setNamedWhereClauseParam("BIND_SLOC_ID", SlocId);
        vo.executeQuery();
        return vo;
        //return (ViewObjectImpl) findViewObject("LovDesigNm1");
    }

    /**
     * Container's getter for LovDeptName1.
     * @return LovDeptName1
     */
    public ViewObjectImpl getLovDeptName1() {
        String OrgId = EbizParams.GLBL_APP_USR_ORG();
        String HoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String CldId = EbizParams.GLBL_APP_CLD_ID();
        Integer SlocId = EbizParams.GLBL_APP_SERV_LOC();
        ViewObjectImpl vo = (ViewObjectImpl) findViewObject("LovDeptName1");
        vo.setNamedWhereClauseParam("BIND_CLD_ID", CldId);
        vo.setNamedWhereClauseParam("BIND_HO_ORG_ID", HoOrgId);
        vo.setNamedWhereClauseParam("BIND_ORG_ID", OrgId);
        vo.setNamedWhereClauseParam("BIND_SLOC_ID", SlocId);
        vo.executeQuery();
        return vo;
        //return (ViewObjectImpl) findViewObject("LovDeptName1");
    }

    /**
     * Container's getter for LovLanguageName1.
     * @return LovLanguageName1
     */
    public ViewObjectImpl getLovLanguageName1() {
        String OrgId = EbizParams.GLBL_APP_USR_ORG();
        String HoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String CldId = EbizParams.GLBL_APP_CLD_ID();
        Integer SlocId = EbizParams.GLBL_APP_SERV_LOC();
        ViewObjectImpl vo = (ViewObjectImpl) findViewObject("LovLanguageName1");
        vo.setNamedWhereClauseParam("BIND_CLD_ID", CldId);
        vo.setNamedWhereClauseParam("BIND_HO_ORG_ID", HoOrgId);
        vo.setNamedWhereClauseParam("BIND_ORG_ID", OrgId);
        vo.setNamedWhereClauseParam("BIND_SLOC_ID", SlocId);
        vo.executeQuery();
        return vo;
        //return (ViewObjectImpl) findViewObject("LovLanguageName1");
    }

    /**
     * Container's getter for LovSkillNm1.
     * @return LovSkillNm1
     */
    public ViewObjectImpl getLovSkillNm1() {
        String OrgId = EbizParams.GLBL_APP_USR_ORG();
        String HoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String CldId = EbizParams.GLBL_APP_CLD_ID();
        Integer SlocId = EbizParams.GLBL_APP_SERV_LOC();
        ViewObjectImpl vo = (ViewObjectImpl) findViewObject("LovSkillNm1");
        vo.setNamedWhereClauseParam("BIND_CLD_ID", CldId);
        vo.setNamedWhereClauseParam("BIND_HO_ORG_ID", HoOrgId);
        vo.setNamedWhereClauseParam("BIND_ORG_ID", OrgId);
        vo.setNamedWhereClauseParam("BIND_SLOC_ID", SlocId);
        vo.executeQuery();
        return vo;
        // return (ViewObjectImpl) findViewObject("LovSkillNm1");
    }

    /**
     * Container's getter for LovQualificationsNm1.
     * @return LovQualificationsNm1
     */
    public ViewObjectImpl getLovQualificationsNm1() {
        return (ViewObjectImpl) findViewObject("LovQualificationsNm1");
    }


    /**
     * Container's getter for OrgHcmCndtProf1.
     * @return OrgHcmCndtProf1
     */
    public ViewObjectImpl getOrgHcmCndtProfVo1() {
        return (ViewObjectImpl) findViewObject("OrgHcmCndtProfVo1");
    }

    /**
     * Container's getter for HcmCndtExp1.
     * @return HcmCndtExp1
     */
    public ViewObjectImpl getHcmCndtExpVo1() {
        return (ViewObjectImpl) findViewObject("HcmCndtExpVo1");
    }

    /**
     * Container's getter for OrgHcmCndtProfToCndtExpVL1.
     * @return OrgHcmCndtProfToCndtExpVL1
     */
    public ViewLinkImpl getOrgHcmCndtProfToCndtExpVL1() {
        return (ViewLinkImpl) findViewLink("OrgHcmCndtProfToCndtExpVL1");
    }

    /**
     * Container's getter for HcmCndtLangVo1.
     * @return HcmCndtLangVo1
     */
    public ViewObjectImpl getHcmCndtLangVo1() {
        return (ViewObjectImpl) findViewObject("HcmCndtLangVo1");
    }

    /**
     * Container's getter for OrgHcmCndtProfToCndtLangVL1.
     * @return OrgHcmCndtProfToCndtLangVL1
     */
    public ViewLinkImpl getOrgHcmCndtProfToCndtLangVL1() {
        return (ViewLinkImpl) findViewLink("OrgHcmCndtProfToCndtLangVL1");
    }

    /**
     * Container's getter for HcmCndtQual1.
     * @return HcmCndtQual1
     */
    public ViewObjectImpl getHcmCndtQualVo1() {
        return (ViewObjectImpl) findViewObject("HcmCndtQualVo1");
    }

    /**
     * Container's getter for OrgHcmCndtProfToCndtQualVL1.
     * @return OrgHcmCndtProfToCndtQualVL1
     */
    public ViewLinkImpl getOrgHcmCndtProfToCndtQualVL1() {
        return (ViewLinkImpl) findViewLink("OrgHcmCndtProfToCndtQualVL1");
    }

    /**
     * Container's getter for HcmCndtSkills1.
     * @return HcmCndtSkills1
     */
    public ViewObjectImpl getHcmCndtSkillsVo1() {
        return (ViewObjectImpl) findViewObject("HcmCndtSkillsVo1");
    }

    /**
     * Container's getter for OrgHcmCndtProfToCndtSkillsVL1.
     * @return OrgHcmCndtProfToCndtSkillsVL1
     */
    public ViewLinkImpl getOrgHcmCndtProfToCndtSkillsVL1() {
        return (ViewLinkImpl) findViewLink("OrgHcmCndtProfToCndtSkillsVL1");
    }

    /**
     * Container's getter for LovCourcesNm1.
     * @return LovCourcesNm1
     */
    public ViewObjectImpl getLovCourcesNm1() {
        return (ViewObjectImpl) findViewObject("LovCourcesNm1");
    }
    public String chkDupliMailId(String mailId) {
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        Integer userId = EbizParams.GLBL_APP_USR();   
        RowQualifier rq = new RowQualifier(this.getOrgHcmCndtProfVo1());
        rq.setWhereClause("CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId + "' and OrgId='" +
                          orgId + "'  and EmpEmail='" + mailId + "' and ActvFlg='Y'");
        System.out.println("Query=" + rq.getExprStr());
        Row fr[] = this.getOrgHcmCndtProfVo1().getFilteredRows(rq);
        // System.out.println("Total no. of same rows="+fr.length);
        for (Row r : fr) {
            //     System.out.println("Row="+r+" and current row="+this.getOrgHcmEmpPrf().getCurrentRow());
            if (!((r.getAttribute("DocId").toString()).equals(this.getOrgHcmCndtProfVo1().getCurrentRow().getAttribute("DocId").toString())))
                return "Y";
        }
        return "N";
    }
   
}