package hcmsalaryreportapp.model.modules;

import adf.utils.ebiz.EbizParams;

import adf.utils.model.ADFModelUtils;

import hcmsalaryreportapp.model.modules.common.HcmSalaryReportAM;

import hcmsalaryreportapp.model.views.HcmAttLinkVOImpl;

import hcmsalaryreportapp.model.views.HcmAttLinkVORowImpl;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.ListIterator;
import java.util.Map;
import java.util.Properties;
import java.util.Set;

import javax.activation.DataHandler;
import javax.activation.DataSource;
import javax.activation.FileDataSource;

import javax.mail.Authenticator;
import javax.mail.BodyPart;
import javax.mail.Message;
import javax.mail.Multipart;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;

import javax.naming.Context;
import javax.naming.InitialContext;

import javax.servlet.ServletException;

import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRExporter;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.export.JRPdfExporter;
import net.sf.jasperreports.engine.xml.JRXmlLoader;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewObjectImpl;

import org.apache.xmlbeans.impl.xb.xsdschema.Public;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon May 04 18:04:47 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class HcmSalaryReportAMImpl extends ApplicationModuleImpl implements HcmSalaryReportAM {
    /**
     * This is the default constructor (do not remove).
     */
    public HcmSalaryReportAMImpl() {
    }

    /**
     * Container's getter for ParameterDummy.
     * @return ParameterDummy
     */
    public ViewObjectImpl getParameterDummy() {
        return (ViewObjectImpl) findViewObject("ParameterDummy");
    }

    /*  public void setDate(){
    Calendar now = Calendar.getInstance();
    System.out.println("Current Year is : " + now.get(Calendar.YEAR));
    System.out.println("Current Month is : " + (now.get(Calendar.MONTH) + 1));
    System.out.println("Current Date is : " + now.get(Calendar.DATE));
    Calendar frmDt = Calendar.getInstance();
    frmDt.set(now.get(Calendar.YEAR), now.get(Calendar.MONTH), 1);
    Calendar toDt = Calendar.getInstance();
    toDt.set(now.get(Calendar.YEAR), now.get(Calendar.MONTH),now.getActualMaximum(Calendar.DATE));
    Timestamp from=new Timestamp(frmDt.getTime());
    Timestamp to=new Timestamp(toDt.getTime());
    ViewObjectImpl vo = this.getParameterDummy();
    vo.getCurrentRow().setAttribute("TransFrmDt", from);
    vo.getCurrentRow().setAttribute("TransToDate", to);
    vo.executeQuery();
    } */

    public String setCriteraValuesInLov() {
        String org = EbizParams.GLBL_APP_USR_ORG();
        String cld = EbizParams.GLBL_APP_CLD_ID();
        Integer sloc = EbizParams.GLBL_APP_SERV_LOC();
        String hoOrg = EbizParams.GLBL_HO_ORG_ID();

        ViewObjectImpl empFrMailvo = this.getAllEmpNmForMail1();
        ViewObjectImpl paramDumyVo = this.getParameterDummy();
        Integer CriteiraId = (Integer) paramDumyVo.getCurrentRow().getAttribute("TransCriteiraId");
        String CrtValId = (String) paramDumyVo.getCurrentRow().getAttribute("TransCrtValId");

        empFrMailvo.setNamedWhereClauseParam("BindOrgId", org);
        empFrMailvo.setNamedWhereClauseParam("BindCldId", cld);
        empFrMailvo.setNamedWhereClauseParam("BindSlocId", sloc);
        empFrMailvo.setNamedWhereClauseParam("BindHoOrgId", hoOrg);

        if (CriteiraId != null) {
            if (CriteiraId.equals(51)) {
                empFrMailvo.setNamedWhereClauseParam("BindLocId", CrtValId);
            }
            if (CriteiraId.equals(52)) {
                empFrMailvo.setNamedWhereClauseParam("BindDeptId", CrtValId);
            }
            if (CriteiraId.equals(53)) {
                empFrMailvo.setNamedWhereClauseParam("BindGrpId", CrtValId);
            }
            if (CriteiraId.equals(54)) {
                if (CrtValId != null)
                    empFrMailvo.setNamedWhereClauseParam("BindEmpDocId", CrtValId);
            }
            empFrMailvo.executeQuery();
        }


        return "Y";
    }

    public String clearEmployeMailList() {
        ViewObjectImpl empFrMailvo = this.getAllEmpNmForMail1();
        empFrMailvo.setNamedWhereClauseParam("BindOrgId", null);
        empFrMailvo.setNamedWhereClauseParam("BindCldId", null);
        empFrMailvo.setNamedWhereClauseParam("BindSlocId", null);
        empFrMailvo.setNamedWhereClauseParam("BindHoOrgId", null);
        empFrMailvo.setNamedWhereClauseParam("BindLocId", null);
        empFrMailvo.setNamedWhereClauseParam("BindDeptId", null);
        empFrMailvo.setNamedWhereClauseParam("BindGrpId", null);
        empFrMailvo.setNamedWhereClauseParam("BindEmpDocId", null);
        empFrMailvo.executeQuery();
        return "Y";
    }


    public HashMap<String, ArrayList> sendMailToEmployee(ArrayList empCodeList) {
        System.out.println("sendMailToEmployee");
        HashMap<String, ArrayList> empDetail = new HashMap<String, ArrayList>();
        ArrayList successResult = new ArrayList();
        ArrayList failureResult = new ArrayList();
        ViewObjectImpl allEmpNmForMail1 = this.getAllEmpNmForMail1();
        RowQualifier rq = new RowQualifier(allEmpNmForMail1);
        StringBuffer sb = new StringBuffer("EmpCode in (");
        Set<String> reciptants = new HashSet<String>();
        if (empCodeList != null && empCodeList.size() > 0) {
            ListIterator li = empCodeList.listIterator();
            while (li.hasNext()) {
                sb.append(li.next() + ",");
            }
            sb.toString().lastIndexOf(",");
            sb.deleteCharAt(sb.toString().lastIndexOf(","));
            sb.append(")");
            System.out.println("querry is" + sb);
            rq.setWhereClause(sb.toString());
            Row[] rw = this.getAllEmpNmForMail1().getFilteredRows(rq);
            if (rw != null)
                if (rw.length > 0) {
                    for (Row r : rw) {
                        reciptants.add((String) r.getAttribute("EmpEmail"));
                        if (reciptants.size() > 0) {
                            String docId = (String) r.getAttribute("DocId");
                            Integer empCode = (Integer) r.getAttribute("EmpCode");
                            String emNm = (String) r.getAttribute("EmpNm");
                            String result = "";
                            if (r.getAttribute("EmpEmail") != null && r.getAttribute("EmpEmail") != "") {
                                String email_id = (String) r.getAttribute("EmpEmail");
                                result = chkForSalaryProcAndApprov(docId);
                                if (result.equals("Y")) {
                                    generateReport(docId, empCode, emNm);
                                    sendEmail(email_id, empCode, emNm);
                                    successResult.add(emNm);
                                }
                            } else {
                                result = "N";
                            }
                            if (result.equals("N")) {
                                failureResult.add(emNm);
                            }

                            reciptants.remove(r.getAttribute("EmpEmail"));
                        }
                    }
                    empDetail.put("success", successResult);
                    empDetail.put("fail", failureResult);
                }
            System.out.println(empDetail);
        }

        return empDetail;
    }

    public String getSenderInfo() {
        System.out.println("getSenderInfo");
        String sender = null;
        Integer sloc = EbizParams.GLBL_APP_SERV_LOC();
        Integer user_id = EbizParams.GLBL_APP_USR();
        ViewObjectImpl usrvo = this.getUser1();
        RowQualifier rq = new RowQualifier(usrvo);
        rq.setWhereClause("SlocId = " + sloc + " AND UsrId = " + user_id +
                          " AND UsrMailIdDef = 'Y' AND UsrMailIdActv = 'Y'");
        Row rows[] = usrvo.getFilteredRows(rq);
        if (rows != null && rows.length == 1) {
            sender = (String) rows[0].getAttribute("UsrMailId");
        }
        return sender;

    }

    public String chkForSalaryProcAndApprov(String Emp_docId) {
        ViewObjectImpl paramDumyVo = this.getParameterDummy();
        ViewObjectImpl hcmSalProcTxnVo = this.getHcmSalProcTxn1();
        ViewObjectImpl hcmSalProcVo = this.getHcmSalProc1();
        RowQualifier rqFrSalProc = new RowQualifier(hcmSalProcVo);

        Object stDt = null;
        String fromDate = null;
        Object edDt = null;
        String toDate = null;

        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd"); //yyyy-MM-dd HH:mm:SS a
        stDt = paramDumyVo.getCurrentRow().getAttribute("TransFrmDt");
        edDt = paramDumyVo.getCurrentRow().getAttribute("TransToDate");
        java.util.Date dt;
        dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        try {
            edDt = paramDumyVo.getCurrentRow().getAttribute("TransToDate");
            dt = dateFormat.parse(edDt.toString());
            toDate = dateFormat.format(dt);

            dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            stDt = paramDumyVo.getCurrentRow().getAttribute("TransFrmDt");
            dt = dateFormat.parse(stDt.toString());
            fromDate = dateFormat.format(dt);

        } catch (ParseException e) {
        }
        String querry =
            "EmpDocId = '" + Emp_docId + "' and ProcToDt = '" + toDate + " " + "00:00:00.0" + "' " + "and ProcFrmDt='" +
            fromDate + " " + "00:00:00.0" + "'  and SalStatus = 56 ";
        System.out.println("querry for check" + querry);
        rqFrSalProc.setWhereClause(querry);
        Row[] rw = hcmSalProcVo.getFilteredRows(rqFrSalProc);
        if (rw != null)
            if (rw.length > 0) {
                String salProcDocId = (String) rw[0].getAttribute("DocId");
                if (salProcDocId != null) {
                    RowQualifier rqFrSalProcTxn = new RowQualifier(hcmSalProcTxnVo);
                    querry = "DocId = '" + salProcDocId + "'";
                    rqFrSalProcTxn.setWhereClause(querry);
                    Row[] rw1 = hcmSalProcTxnVo.getFilteredRows(rqFrSalProcTxn);
                    if (rw1 != null)
                        if (rw1.length > 0) {
                            //String salProcTxnDocId = (String) rw[0].getAttribute("DocId");
                            String salStatus = (String) rw1[0].getAttribute("SalStatus");
                            if (salStatus != null && salStatus.equals("A"))
                                return "Y";
                        }
                }
            }
        return "N";
    }

    public String generateReport(String empDocId, Integer empCode, String emNm) {
        System.out.println("generateReport");
        String reportResult = "success";
        String filePath = "D:\\send\\";
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        ViewObjectImpl paramDumyVo = this.getParameterDummy();
        Connection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String reportName = null;
        try {
            Context ctx = new InitialContext();
            javax.sql.DataSource ds = (javax.sql.DataSource) ctx.lookup("java:comp/env/jdbc/HCMDS");
            conn = ds.getConnection();
            System.out.println("Conn=" + conn);

            ps = conn.prepareStatement("select distinct srvr_Loc_As_Rpt_Path from APP.App$Servr$Loc");
            rs = ps.executeQuery();
            InputStream input =
                new FileInputStream(new File("D:/DeployMent/Report/HCM/Salary_Slip.jrxml")); //DeployMent\Report\HCM
            JasperDesign design = JRXmlLoader.load(input);
            JasperReport report = JasperCompileManager.compileReport(design);
            String path = null;
            while (rs.next()) {
                path = rs.getString(1);
            }
            path = path + "HCM/";
            reportName = "Salary_Slip";
            String reportType = null;
            String check = null; // For csv or pdf format
            Object stDt = null;
            String fromDate = null;
            Object edDt = null;
            String toDate = null;
            Integer crt = 54;
            String crtVal = empDocId;


            DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd"); //yyyy-MM-dd HH:mm:SS a
            edDt = paramDumyVo.getCurrentRow().getAttribute("TransToDate");
            java.util.Date dt = dateFormat.parse(edDt.toString());
            toDate = dateFormat.format(dt);

            dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            stDt = paramDumyVo.getCurrentRow().getAttribute("TransFrmDt");
            dt = dateFormat.parse(stDt.toString());
            fromDate = dateFormat.format(dt);
            reportType = "pdf";
            System.out.println("Path " + path + " reportName " + reportName + " Actual Report name is :" + report +
                               " stdt " + fromDate + " edDt " + toDate + " cld " + cldId + " Hoorg " + hoOrgId +
                               " org " + orgId + " sloc " + slocId + " empDocId " + empDocId + " crt= " + crt +
                               "  crtVal= " + crtVal);

            Map parameters = new HashMap();
            parameters.put("cldId", cldId);
            parameters.put("slocId", slocId);
            parameters.put("hoOrgId", hoOrgId);
            parameters.put("orgId", orgId);
            parameters.put("FromDate", fromDate);
            parameters.put("ToDate", toDate);
            parameters.put("ReportType", check);
            parameters.put("Path", path);
            parameters.put("crtValue", crtVal);
            parameters.put("empDocId", empDocId);

            JasperPrint jasperPrint = JasperFillManager.fillReport(report, parameters, conn);

            JRExporter exporter = null;
            String fileName = emNm + "_" + empCode + ".pdf";
            File pdfFile = new File(filePath + fileName);
            if ("pdf".equalsIgnoreCase(reportType)) {
                exporter = new JRPdfExporter();
                exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
                exporter.setParameter(JRExporterParameter.OUTPUT_FILE, pdfFile);
                System.out.println(" System.out.println(exporter);" + exporter);
            }
            try {
                System.out.println(" System.out.println(exporter);" + exporter);
                exporter.exportReport();
            } catch (JRException e) {
                reportResult = "failure";
                throw new ServletException(e);

            } catch (Exception ex) {
                reportResult = "failure";
                ex.printStackTrace();
            } finally {
                if (conn != null && ps != null && rs != null) {

                    conn.close();
                    ps.close();
                    rs.close();
                }
            }
        } catch (Exception ex) {
            reportResult = "failure";
            ex.printStackTrace();
        }
        return reportResult;
    }


    private HashMap<String, String> getConfig(String stmt) throws Exception {
        System.out.println("getConfig");
        try {
            Integer user_id = EbizParams.GLBL_APP_USR();
            HashMap<String, String> map = new HashMap<>();
            CallableStatement stForSet = this.getDBTransaction().createCallableStatement("begin  " + stmt + ";end;", 0);
            stForSet.setObject(1, null);
            stForSet.registerOutParameter(2, Types.VARCHAR);
            stForSet.registerOutParameter(3, Types.VARCHAR);
            stForSet.registerOutParameter(4, Types.VARCHAR);
            stForSet.registerOutParameter(5, Types.VARCHAR);
            stForSet.registerOutParameter(6, Types.VARCHAR);
            stForSet.execute();
            map.put("Domain", stForSet.getString(2));
            map.put("Port", stForSet.getString(3));
            map.put("Security", stForSet.getString(4));
            map.put("From", stForSet.getString(5));
            map.put("Password", stForSet.getString(6));
            return map;
        } catch (SQLException e) {
            e.printStackTrace();
            throw new JboException(e.getMessage());
        }
    }

    public void sendEmail(String toAddress, Integer empCode, String emNm) {
        System.out.println("sendEmail");
        String filename = emNm + "_" + empCode + ".pdf";
        String path = "D:\\send\\";
        File pdfFile = new File(path + filename);
        try {
            HashMap<String, String> config = this.getConfig("app.PR_ALRT_GET_MAIL_CFG (?,?,?,?,?,?)");
            String host = config.get("Domain");
            final String userName = config.get("From");
            final String password = config.get("Password");
            final String port = config.get("Port");
            Properties properties = new Properties();
            properties.put("mail.smtp.host", host);
            properties.put("mail.smtp.port", port);
            properties.put("mail.smtp.auth", "true");
            properties.put("mail.smtp.starttls.enable", "true");
            Authenticator auth = new Authenticator() {
                public PasswordAuthentication getPasswordAuthentication() {
                    return new PasswordAuthentication(userName, password);
                }
            };

            Session session = Session.getInstance(properties, auth);
            Message msg = new MimeMessage(session);

            msg.setFrom(new InternetAddress(userName));
            InternetAddress[] toAddresses = { new InternetAddress(toAddress) };
            msg.setRecipients(Message.RecipientType.TO, toAddresses);
            String subject = "Employee Salary Slip ";
            msg.setSubject(subject);
            msg.setSentDate(new Date());
            String message =
                "This is your salary slip generated by EBIZFRAME-10,kindly do not reply.\n" + "\n" + "\n" +
                "Thanks and Regards\n" + "HR Team";
            msg.setContent(message, "text/html");
            Multipart multipart = new MimeMultipart();
            BodyPart part1 = new MimeBodyPart();
            part1.setText(message);
            BodyPart messageBodyPart = new MimeBodyPart();
            messageBodyPart = new MimeBodyPart();
            DataSource source = new FileDataSource(path + filename);
            messageBodyPart.setDataHandler(new DataHandler(source));
            messageBodyPart.setFileName(filename);
            multipart.addBodyPart(messageBodyPart);
            multipart.addBodyPart(part1);
            msg.setContent(multipart);
            Transport.send(msg);
            pdfFile.delete();

        } catch (Exception ex) {
            System.out.println(ex);
        }
    }

    /**
     * Container's getter for AllEmpNmForMail1.
     * @return AllEmpNmForMail1
     */
    public ViewObjectImpl getAllEmpNmForMail1() {
        return (ViewObjectImpl) findViewObject("AllEmpNmForMail1");
    }


    /**
     * Container's getter for HcmSalProc1.
     * @return HcmSalProc1
     */
    public ViewObjectImpl getHcmSalProc1() {
        String org = EbizParams.GLBL_APP_USR_ORG();
        String cld = EbizParams.GLBL_APP_CLD_ID();
        Integer sloc = EbizParams.GLBL_APP_SERV_LOC();
        String hoOrg = EbizParams.GLBL_HO_ORG_ID();
        ViewObjectImpl salProcVo = (ViewObjectImpl) findViewObject("HcmSalProc1");
        salProcVo.setNamedWhereClauseParam("BINDORG_ID", org);
        salProcVo.setNamedWhereClauseParam("BINDCLD_ID", cld);
        salProcVo.setNamedWhereClauseParam("BIND_SLOC_ID", sloc);
        salProcVo.setNamedWhereClauseParam("BINDHO_ORG_ID", hoOrg);
        salProcVo.executeQuery();
        return salProcVo;
        //return (ViewObjectImpl) findViewObject("HcmSalProc1");
    }

    /**
     * Container's getter for HcmSalProcTxn1.
     * @return HcmSalProcTxn1
     */
    public ViewObjectImpl getHcmSalProcTxn1() {
        String org = EbizParams.GLBL_APP_USR_ORG();
        String cld = EbizParams.GLBL_APP_CLD_ID();
        Integer sloc = EbizParams.GLBL_APP_SERV_LOC();
        String hoOrg = EbizParams.GLBL_HO_ORG_ID();
        ViewObjectImpl salProcTxnVo = (ViewObjectImpl) findViewObject("HcmSalProcTxn1");
        salProcTxnVo.setNamedWhereClauseParam("BINDORG_ID", org);
        salProcTxnVo.setNamedWhereClauseParam("BINDCLD_ID", cld);
        salProcTxnVo.setNamedWhereClauseParam("BIND_SLOC_ID", sloc);
        salProcTxnVo.setNamedWhereClauseParam("BINDHO_ORG_ID", hoOrg);
        salProcTxnVo.executeQuery();
        return salProcTxnVo;
        //return (ViewObjectImpl) findViewObject("HcmSalProcTxn1");
    }

    public Boolean[] checkBox() {
        String org = EbizParams.GLBL_APP_USR_ORG();
        String cld = EbizParams.GLBL_APP_CLD_ID();
        Integer sloc = EbizParams.GLBL_APP_SERV_LOC();
        String hoOrg = EbizParams.GLBL_HO_ORG_ID();
        HcmAttLinkVOImpl ri = this.getHcmAttLinkVO1();
        ri.setCldIdBind(cld);
        ri.setOrgIdBind(org);
        ri.setHoOrgIdBind(hoOrg);
        ri.setSlocIdBind(sloc);
        System.out.println("before execute query");
        ri.executeQuery();
        System.out.println("after execute");
        //HcmAttLinkVORowImpl r = (HcmAttLinkVORowImpl)this.getHcmAttLinkVO1().getCurrentRow();
        HcmAttLinkVOImpl attLinkVO1 = this.getHcmAttLinkVO1();
        RowSetIterator crt = attLinkVO1.createRowSetIterator(null);
        //        Boolean pf=false;
        //        Boolean esi=false;
        //        Boolean nhif=false;
        //        Boolean nssf=false;
        Boolean report[] = new Boolean[10];
        while (crt.hasNext()) {
            Row next = crt.next();
            if (next.getAttribute("AttId") != null) {
                String att = next.getAttribute("AttId").toString();
                String attOrg = next.getAttribute("OrgId").toString();
                System.out.println("att values " + att + " attOrg " + attOrg);
                if (att.equals("66")) {
                    report[0] = true;
                } else if (att.equals("67") && attOrg.equals(org)) {
                    report[1] = true;
                } else if (att.equals("88") && attOrg.equals(org)) {
                    report[2] = true;
                } else if (att.equals("89") && attOrg.equals(org)) {
                    report[3] = true;
                } else if (att.equals("90") && attOrg.equals(org)) {
                    report[4] = true;
                } else if (att.equals("42") && attOrg.equals(org)) {
                    report[5] = true;
                } else if (att.equals("64") && attOrg.equals(org)) {
                    report[6] = true;
                }
            }


        }
        return report;
    }

    /**
     * Container's getter for UserVo1.
     * @return UserVo1
     */
    public ViewObjectImpl getUser1() {
        return (ViewObjectImpl) findViewObject("User1");
    }

    /**
     * Container's getter for HcmAttLinkVO1.
     * @return HcmAttLinkVO1
     */
    public HcmAttLinkVOImpl getHcmAttLinkVO1() {
        return (HcmAttLinkVOImpl) findViewObject("HcmAttLinkVO1");
    }


    public String chkDaiyHoursDetail() {

        RowSetIterator itr = getHcmAttLinkVO1().createRowSetIterator(null);
        while (itr.hasNext()) {
            Row next = itr.next();
            if (!next.equals(gethcmEmpPanShft1().getCurrentRow())) {

                return "Y";

            }
        }
        return "N";


    }


    public String insertDataByDailyHoursLink() {
        if (getParameterDummy().getCurrentRow().getAttribute("TransCrtValId") != null) {
            if (getParameterDummy().getCurrentRow().getAttribute("TransFrmDt") != null &&
                getParameterDummy().getCurrentRow().getAttribute("TransToDate") != null) {
                System.out.println("inside am call function");
                Object stDt = getParameterDummy().getCurrentRow().getAttribute("TransFrmDt");
                Object toDt = getParameterDummy().getCurrentRow().getAttribute("TransToDate");


                String crtVal = getParameterDummy().getCurrentRow().getAttribute("TransCrtValId").toString();
                System.out.println("crt value at fn call-->"+crtVal);
                System.out.println("start date at fn call-->"+stDt);
                System.out.println("to date at fn call-->"+toDt);
                Object callFunction = null;
                callFunction =
                    ADFModelUtils.callFunction(this, new StringBuilder("HCM.FN_HCM_EMP_SHFT_RPOT(?,?,?,?,?,?,?,?)"), new Object[] {
                                               EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                               EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(), crtVal, stDt,
                                               toDt, EbizParams.GLBL_APP_USR()
                }, Types.VARCHAR);

                System.out.println("result at function call ---->" + callFunction);
                this.getDBTransaction().commit();
                System.out.println("Data in ShiftTime VO--->"+getHcmEmpShftTime1().getRowCount());
            }
        }
        return null;
    }


    /**
     * Container's getter for hcmEmpPanShft1.
     * @return hcmEmpPanShft1
     */
    public ViewObjectImpl gethcmEmpPanShft1() {
        return (ViewObjectImpl) findViewObject("hcmEmpPanShft1");
    
    }


    /**
     * Container's getter for HcmEmpShftTime1.
     * @return HcmEmpShftTime1
     */
    public ViewObjectImpl getHcmEmpShftTime1() {
        return (ViewObjectImpl) findViewObject("HcmEmpShftTime1");
    }
}

