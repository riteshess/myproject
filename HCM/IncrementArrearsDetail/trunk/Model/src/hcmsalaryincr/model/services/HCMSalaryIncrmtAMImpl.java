package hcmsalaryincr.model.services;

import adf.utils.ebiz.EbizParams;

import adf.utils.model.ADFModelUtils;


import hcmsalaryincr.model.views.HcmIncrEmpVOImpl;

import java.math.BigDecimal;

import java.sql.SQLException;

import java.sql.Types;


import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import hcmsalaryincr.model.services.common.HCMSalaryIncrmtAM;


import java.util.Calendar;


import javax.faces.application.FacesMessage;

import javax.faces.validator.ValidatorException;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;


import oracle.jbo.server.ViewObjectImpl;

import org.apache.myfaces.trinidad.context.RequestContext;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Sep 15 17:05:54 PDT 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class HCMSalaryIncrmtAMImpl extends ApplicationModuleImpl implements HCMSalaryIncrmtAM
{
    /**
     * This is the default constructor (do not remove).
     */

    public HCMSalaryIncrmtAMImpl()
    {
    }

    public void setBindVarOnPageLoad()
    {
        /* After Approval GLBL_CHK_MODE  is a mode who check that is
        any data available in history table for current increment (GLBL_CHK_MODE = H in history record  avaiable)
        (GLBL_CHK_MODE = E in history table no record  avaiable)*/

        String modefrChk = resolvEl("#{pageFlowScope.GLBL_CHK_MODE}");
        this.getHCMIncrement().setNamedWhereClauseParam("BindGlbl_Doc_Id", null);
        this.getHCMIncrement().executeQuery();
        this.getHCMIncrement().setNamedWhereClauseParam("BindGlbl_Doc_Id",
                                                        resolvEl("#{pageFlowScope.GLBL_GET_DOC_ID}"));
        this.getHCMIncrement().executeQuery();
        Row[] fr = this.getHCMIncrement().getFilteredRows("DocId", resolvEl("#{pageFlowScope.GLBL_GET_DOC_ID}"));
        if (fr.length > 0)
        {
            String empdocid = (String) fr[0].getAttribute("EmpDocId");
            String incrCriteria = (String) fr[0].getAttribute("IncrCritera");
            String incrDocId = (String) fr[0].getAttribute("DocId");
            String grpid = (String) fr[0].getAttribute("GrpId");
            if (modefrChk != null)
            {
                if (incrCriteria != null)
                {
                    if (empdocid != null && incrCriteria.equals("E")) //for single employee increment
                    {
                        /* setting previous data  for single employee increment in getDummyPrevSalComponentVo */
                        setPreviousSalStrucCritForEmployee(incrDocId, empdocid, grpid, modefrChk);
                    }
                    if (empdocid == null && incrCriteria.equals("G")) //for whole group increment
                    {
                        /* setting previous data  for whole  group increment in getDummyGrpSalaryCompVo */
                        setPreviousSalStrucCritForGroup(grpid, modefrChk);
                    }
                }
                else
                {
                    /* very New increment  */
                }


            }


        }
    }

    public void setBindVarOnPageLoadForGrpSum(String cldid, Integer slocid, String orgid, String hoorgid,
                                              String IncrDocId)
    {
        /* For group increment just to filter the IncrgrupSumTable with increment
         * doc id and set grpId in Global Variable*/
        this.getHCMIncrement().setNamedWhereClauseParam("BindGlbl_Doc_Id", IncrDocId);
        this.getHCMIncrement().executeQuery();
        Row[] fr = this.getHCMIncrement().getFilteredRows("DocId", resolvEl("#{pageFlowScope.GLBL_GET_DOC_ID}"));
        if (fr.length > 0)
        {
            String grpid = (String) fr[0].getAttribute("GrpId");
            Integer IncrStat = (Integer) fr[0].getAttribute("IncrStat");
            RequestContext.getCurrentInstance().getPageFlowScope().put("GLBL_GET_GRP_ID", grpid);
            RequestContext.getCurrentInstance().getPageFlowScope().put("ADD_EDIT_MODE", "D");
            RequestContext.getCurrentInstance().getPageFlowScope().put("GLBL_GET_INCR_STAT", IncrStat);
        }

        this.getHCMIncrementGrpSum().setNamedWhereClauseParam("BindGlbl_Doc_Id", IncrDocId);
        this.getHCMIncrementGrpSum().setNamedWhereClauseParam("BindCldId", cldid);
        this.getHCMIncrementGrpSum().setNamedWhereClauseParam("BindSlocId", slocid);
        this.getHCMIncrementGrpSum().setNamedWhereClauseParam("BindHoOrgId", hoorgid);
        this.getHCMIncrementGrpSum().setNamedWhereClauseParam("BindOrgId", orgid);
        ;
        this.getHCMIncrementGrpSum().executeQuery();

    }

    public void setPreviousSalStrucCritForEmployee(String incrDocId, String empdocid, String grpid, String modefrChk)
    {
        if (modefrChk.equals("E"))
        {
            this.getDummyPrevSalComponent().setNamedWhereClauseParam("empCodeBindVar", empdocid);
            this.getDummyPrevSalComponent().setNamedWhereClauseParam("grpIdBindVar", grpid);
            this.getDummyPrevSalComponent().executeQuery();
        }
        if (modefrChk.equals("H"))
        {
            this.getDummyPrevSalComponentHist().setNamedWhereClauseParam("empCodeBindVar", empdocid);
            this.getDummyPrevSalComponentHist().setNamedWhereClauseParam("grpIdBindVar", grpid);
            this.getDummyPrevSalComponentHist().setNamedWhereClauseParam("BindIncrDocId", incrDocId);
            this.getDummyPrevSalComponentHist().executeQuery();
        }
    }

    public void setPreviousSalStrucCritForGroup(String grpid, String modefrChk)
    {
        if (modefrChk.equals("E"))
        {
            this.getDummyGrpSalaryComp().setNamedWhereClauseParam("BIND_GRP_ID", grpid);
            this.getDummyGrpSalaryComp().executeQuery();
            RequestContext.getCurrentInstance().getPageFlowScope().put("GLBL_CHK_MODE", "E");
        }
        if (modefrChk.equals("H"))
        {

        }
    }


    public void filterIncrmtSrchVoBySetVarOnPgLoad(String cldid, Integer slocid, String orgid, String hoorgid)
    {
        System.out.println("filterIncrmt Srch Vo BySetVarOnPgLoad");
        this.getHCMIncementSrchRslt().setNamedWhereClauseParam("cldIdBindVar", cldid);
        this.getHCMIncementSrchRslt().setNamedWhereClauseParam("slocIdBindVar", slocid);
        this.getHCMIncementSrchRslt().setNamedWhereClauseParam("hoOrgIdBindVar", hoorgid);
        this.getHCMIncementSrchRslt().setNamedWhereClauseParam("orgIdBindVar", orgid);
        this.getHCMIncementSrchRslt().setNamedWhereClauseParam("bindWorkStatus", "Working");
         this.getHCMIncementSrchRslt().setNamedWhereClauseParam("bindIncrCriterea", "A");
        RequestContext.getCurrentInstance().getPageFlowScope().put("ADD_EDIT_MODE", "D");
        this.getHCMIncementSrchRslt().executeQuery();
    }

    public void getPreviousSlryCmponent()
    {
        System.out.println("getPreviousSlryCmponent");
        ViewObjectImpl voi = this.getHCMIncrement();
        Integer empCode = (Integer) voi.getCurrentRow().getAttribute("EmpCode");
        String grpiD = (String) voi.getCurrentRow().getAttribute("GrpId");
        this.getDummyPrevSalComponent().setNamedWhereClauseParam("empCodeBindVar", empCode);
        this.getDummyPrevSalComponent().setNamedWhereClauseParam("grpIdBindVar", grpiD);
        this.getDummyPrevSalComponent().executeQuery();

    }

    /**
     * Container's getter for HCMIncrement1.
     * @return HCMIncrement1
     */
    public ViewObjectImpl getHCMIncrement()
    {
        return (ViewObjectImpl) findViewObject("HCMIncrement");
    }

    public String resolvEl(String data)
    {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String msg = valueExp.getValue(elContext).toString();
        return msg;
    }

    public void searchIncrDetails(String empGrp, String empNM, String incrmntDt, String applicblDT, String incrmntDtnew,
                                  String applicblDTnew)
    {

        System.out.println("searchIncrDetails");
        ViewObjectImpl voi = this.getHCMIncementSrchRslt();
        ViewObjectImpl dummyvoi = this.getDummySearch();
        String Wrkstatus = "";
        String incrCriteria = "";
        incrCriteria = (String) dummyvoi.getCurrentRow().getAttribute("transIncrCriterea");
        Wrkstatus = (String) dummyvoi.getCurrentRow().getAttribute("transWrkStat");
        if (Wrkstatus != null)
        {
            if (Wrkstatus.equals("All"))
                Wrkstatus = null;
        }
        if (incrCriteria == null || incrCriteria == "")
        {
            incrCriteria = "E";
        }


        voi.setNamedWhereClauseParam("bindGrpID", empGrp);
        voi.setNamedWhereClauseParam("bindEmpNm", dummyvoi.getCurrentRow().getAttribute("transEmpNm"));
        voi.setNamedWhereClauseParam("bindIncrDt", incrmntDt);
        voi.setNamedWhereClauseParam("bindApplDt", applicblDT);
        voi.setNamedWhereClauseParam("bindIncrDtNew", incrmntDtnew);
        voi.setNamedWhereClauseParam("bindApplDtNew", applicblDTnew);
        voi.setNamedWhereClauseParam("bindWorkStatus", Wrkstatus);
        voi.setNamedWhereClauseParam("bindIncrCriterea", incrCriteria);
        voi.executeQuery();

    }

    public void FiltrArrearWithCurrentEmp(String empGrp, String empNM, String incrmntDt, String applicblDT)
    {
        System.out.println("FiltrArrearWithCurrentEmp");
        String incrCriteria = "";
        ViewObjectImpl incrVo = this.getHCMIncrement();
        incrCriteria = (String) incrVo.getCurrentRow().getAttribute("IncrCritera");
        String docId = (String) incrVo.getCurrentRow().getAttribute("DocId");
        ViewObjectImpl voi = this.getIncrArrer();
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        voi.setNamedWhereClauseParam("bindDocID", docId);
        voi.setNamedWhereClauseParam("bindCloudId", cldId);
        voi.setNamedWhereClauseParam("bindSlocId", slocId);
        voi.setNamedWhereClauseParam("binndHoOrgId", hoOrgId);
        voi.setNamedWhereClauseParam("binndOrgId", orgId);
        voi.setNamedWhereClauseParam("bindIncrCriterea", incrCriteria);
        voi.executeQuery();

    }

    public void searchArrDetails(String empGrp, String empNM, String incrmntDt, String applicblDT, String incrmntDtnew,
                                 String applicblDTnew)
    {

        System.out.println("searchArrDetails");
        ViewObjectImpl voi = this.getIncrArrer();
        ViewObjectImpl dummyvoi = this.getDummyArrSearch();
        String incrCriteria = "";
        String Wrkstatus = "";
        incrCriteria = (String) dummyvoi.getCurrentRow().getAttribute("transIncrCriteria");
        if (incrCriteria == null || incrCriteria == "")
        {
            incrCriteria = "E";
        }


        Wrkstatus = (String) dummyvoi.getCurrentRow().getAttribute("transWrkStat");
        if (Wrkstatus != null)
        {
            if (Wrkstatus.equals("All"))
                Wrkstatus = null;
        }
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();

        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        if (empGrp != null && empGrp.toString().length() > 0)
            voi.setNamedWhereClauseParam("bindGrpID", empGrp);
        else
            voi.setNamedWhereClauseParam("bindGrpID", null);
        voi.setNamedWhereClauseParam("bindEmpNm", dummyvoi.getCurrentRow().getAttribute("transEmpNm"));
        voi.setNamedWhereClauseParam("bindIncrDt", incrmntDt);
        voi.setNamedWhereClauseParam("bindApplDt", applicblDT);
        voi.setNamedWhereClauseParam("bindIncrDtNew", incrmntDtnew);
        voi.setNamedWhereClauseParam("bindApplDtNew", applicblDTnew);
        voi.setNamedWhereClauseParam("bindCloudId", cldId);
        voi.setNamedWhereClauseParam("bindSlocId", slocId);
        voi.setNamedWhereClauseParam("binndHoOrgId", hoOrgId);
        voi.setNamedWhereClauseParam("binndOrgId", orgId);
        voi.setNamedWhereClauseParam("bindDocID", null);
        voi.setNamedWhereClauseParam("bindWrkStat", Wrkstatus);
        voi.setNamedWhereClauseParam("bindIncrCriterea", incrCriteria);


        voi.executeQuery();

    }

    public void resetArrDetailsAllFields(String empGrp, String empNM, String incrmntDt, String applicblDT)
    {
        System.out.println("resetArrDetailsAllFields");
        ViewObjectImpl voi = this.getIncrArrer();
        ViewObjectImpl dummyvoi = this.getDummyArrSearch();
        dummyvoi.getCurrentRow().setAttribute("transEmpNm", "");
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();

        voi.setNamedWhereClauseParam("bindGrpID", null);
        voi.setNamedWhereClauseParam("bindEmpNm", null);
        voi.setNamedWhereClauseParam("bindIncrDt", null);
        voi.setNamedWhereClauseParam("bindApplDt", null);
        voi.setNamedWhereClauseParam("bindIncrDtNew", null);
        voi.setNamedWhereClauseParam("bindApplDtNew", null);
        voi.setNamedWhereClauseParam("bindCloudId", cldId);
        voi.setNamedWhereClauseParam("bindSlocId", slocId);
        voi.setNamedWhereClauseParam("binndHoOrgId", hoOrgId);
        voi.setNamedWhereClauseParam("binndOrgId", orgId);
        voi.setNamedWhereClauseParam("bindDocID", null);
        voi.setNamedWhereClauseParam("bindWrkStat", "Working");
        voi.setNamedWhereClauseParam("bindIncrCriterea", "E");
        voi.executeQuery();

    }

    public void showArrearDetails()
    {

        System.out.println("showArrearDetails");
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        ;
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        this.getDummyArrSearch().executeQuery();
        ViewObjectImpl voi = this.getIncrArrer();
        voi.setNamedWhereClauseParam("bindGrpID", null);
        voi.setNamedWhereClauseParam("bindEmpNm", null);
        voi.setNamedWhereClauseParam("bindIncrDt", null);
        voi.setNamedWhereClauseParam("bindApplDt", null);
        voi.setNamedWhereClauseParam("bindIncrDtNew", null);
        voi.setNamedWhereClauseParam("bindApplDtNew", null);
        voi.setNamedWhereClauseParam("bindCloudId", cldId);
        voi.setNamedWhereClauseParam("bindSlocId", slocId);
        voi.setNamedWhereClauseParam("binndHoOrgId", hoOrgId);
        voi.setNamedWhereClauseParam("binndOrgId", orgId);
        voi.setNamedWhereClauseParam("bindDocID", null);
        voi.setNamedWhereClauseParam("bindWrkStat", "Working");
        System.out.println(voi.getQuery());
        voi.executeQuery();

    }

    public void resetAllFields()
    {
        System.out.println("resetAllFields");
        ViewObjectImpl voi = this.getHCMIncementSrchRslt();
        ViewObjectImpl dummyvoi = this.getDummySearch();
        dummyvoi.getCurrentRow().setAttribute("transEmpNm", "");

        voi.setNamedWhereClauseParam("bindGrpID", null);
        voi.setNamedWhereClauseParam("bindEmpNm", null);
        voi.setNamedWhereClauseParam("bindIncrDt", null);
        voi.setNamedWhereClauseParam("bindApplDt", null);
        voi.setNamedWhereClauseParam("bindIncrDtNew", null);
        voi.setNamedWhereClauseParam("bindApplDtNew", null);
        voi.setNamedWhereClauseParam("bindWorkStatus", "Working");
        voi.setNamedWhereClauseParam("bindIncrCriterea", "A");
        voi.executeQuery();

    }


    public void generateDocId()
    {
        System.out.println("generateDocId");
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        ViewObjectImpl desVO = this.getHCMIncrement();
        StringBuilder sbul = new StringBuilder("app.get_txn_id (?,?,?,?,?,?)");
        Object[] obj =
        {
            cldId, slocId, orgId, userId, 28511, 0
        };
        //String docId = (String) ADFModelUtils.callFunctionFrmId(this, 85898, obj, Types.VARCHAR);
        String docId = (String) ADFModelUtils.callFunction(this, sbul, obj, Types.VARCHAR);


        // String docId = (String) (callStoredFunction(Types.VARCHAR, "app.get_txn_id (?,?,?,?,?,?)", new Object[]{cldId, slocId, orgId, userId, 28511, 0}));
        desVO.getCurrentRow().setAttribute("DocId", docId);
        RequestContext.getCurrentInstance().getPageFlowScope().put("GLBL_GET_DOC_ID", docId);
    }

    public String generateNewDocId()
    {
        System.out.println("generateNewDocId");
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        ;
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        ViewObjectImpl desVO = this.getHCMIncrement();

        StringBuilder sbul = new StringBuilder("app.get_txn_id (?,?,?,?,?,?)");
        Object[] obj =
        {
            cldId, slocId, orgId, userId, 28511, 0
        };
        //String docId = (String) ADFModelUtils.callFunctionFrmId(this, 85898, obj, Types.VARCHAR);
        String docId = (String) ADFModelUtils.callFunction(this, sbul, obj, Types.VARCHAR);
        //        String docId = (String) (callStoredFunction(Types.VARCHAR, "app.get_txn_id (?,?,?,?,?,?)", new Object[]
        //        {
        //            cldId, slocId, orgId, userId, 28511, 0
        //        }));
        desVO.getCurrentRow().setAttribute("DocId", docId);
        return docId;
    }

    public void generateIncrId()
    {
        System.out.println("generateIncrId");
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        ViewObjectImpl desVO = this.getHCMIncrement();
        StringBuilder sbul = new StringBuilder("FN_HCM_GET_PRF_ID (?,?,?,?,?,?,?)");
        Object[] obj =
        {
            slocId, cldId, hoOrgId, orgId, 28511, 0, "HCM$INCR"
        };
        String IncrId = (String) ADFModelUtils.callFunctionFrmId(this, 86494, obj, Types.VARCHAR);
        desVO.getCurrentRow().setAttribute("IncrId", IncrId);
    }

    public String chkIncrId()
    {
        System.out.println("chkIncrId");
        String chkStatus = "notexist";
        ViewObjectImpl desVO = this.getHCMIncrement();
        String incrrId = (String) desVO.getCurrentRow().getAttribute("IncrId");
        if (incrrId != " " && incrrId != null && incrrId.toString().length() > 0)
        {
            chkStatus = "exist";
        }
        return chkStatus;
    }

    public void setDocId()
    {
        ViewObjectImpl desVO = this.getHCMIncementSrchRslt();
        String docId = (String) desVO.getCurrentRow().getAttribute("DocId");
        RequestContext.getCurrentInstance().getPageFlowScope().put("GLBL_GET_DOC_ID", docId);
    }

    public String chkIncrStatus()
    {
        String status = "";
        ViewObjectImpl desVO = this.getHCMIncementSrchRslt();
        Integer incrStatus = (Integer) desVO.getCurrentRow().getAttribute("IncrStat");
        if (incrStatus != null)
            status = status + incrStatus;
        return status;
    }

    public String chkDataInHistTable()
    {
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        ViewObjectImpl desVO = this.getHCMIncementSrchRslt();
        String EmpDocId = (String) desVO.getCurrentRow().getAttribute("EmpDocId");
        String incrDocId = (String) desVO.getCurrentRow().getAttribute("DocId");
        ViewObjectImpl empSalHist = this.getDummyHcmEmpSalHistFrCheck();
        empSalHist.setNamedWhereClauseParam("BindEmpDocId", null);
        empSalHist.setNamedWhereClauseParam("BindIncrdDocId", null);
        empSalHist.executeQuery();
        empSalHist.setNamedWhereClauseParam("BindEmpDocId", EmpDocId);
        empSalHist.setNamedWhereClauseParam("BindIncrdDocId", incrDocId);
        empSalHist.executeQuery();
        RowQualifier rowQualifierFrHist = new RowQualifier(empSalHist);
        String querry =
            ("CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId + "' and OrgId='" + orgId + "'");
        rowQualifierFrHist.setWhereClause(querry);
        Row row[] = empSalHist.getFilteredRows(rowQualifierFrHist);
        if (row.length > 0)
        {
            return "true";
        }
        else
        {

        }

        return "false";
    }

    public void calIncrmntAmnt()
    {
        System.out.println("calIncrmntAmnt");
        Object amt = null;
        //Object incrmntamnt = null;
        BigDecimal incrmntamnt = BigDecimal.ZERO;
        BigDecimal totlInrmntAmnt = BigDecimal.ZERO;
        BigDecimal zeroVal = BigDecimal.ZERO;
        ViewObjectImpl hcminmntVo = this.getHCMIncrement();
        ViewObjectImpl hcminmntSummVo = this.getHCMIncrmntSumm();
        String EmpDocId = (String) hcminmntVo.getCurrentRow().getAttribute("EmpDocId");
        String DocId = (String) hcminmntVo.getCurrentRow().getAttribute("DocId");
        ViewObjectImpl reffVO = this.getHCMIncrementRef();
        RowSetIterator createRowSetIterator = reffVO.createRowSetIterator(null);
        String salId = (String) hcminmntSummVo.getCurrentRow().getAttribute("SalId");
        while (createRowSetIterator.hasNext())
        {
            Row row = createRowSetIterator.next();
            BigDecimal incrPerc = new BigDecimal(row.getAttribute("IncrValue").toString());
            String refsalId = (String) row.getAttribute("RefSalId");
            BigDecimal inrmntFrmEmpSal = getSalaryAmount(refsalId, EmpDocId, incrPerc, DocId);
            totlInrmntAmnt = totlInrmntAmnt.add(inrmntFrmEmpSal);
        }
        amt = totlInrmntAmnt;
        BigDecimal prevSlryAmnt = getPrevSlrAmnt(salId, EmpDocId);
        incrmntamnt = totlInrmntAmnt.subtract(prevSlryAmnt);
        if (totlInrmntAmnt.compareTo(prevSlryAmnt) == -1)
        {
            hcminmntSummVo.getCurrentRow().setAttribute("DecrFlag", "Y");
        }
        if (totlInrmntAmnt.compareTo(prevSlryAmnt) == +1 || totlInrmntAmnt.compareTo(prevSlryAmnt) == 0)
        {
            hcminmntSummVo.getCurrentRow().setAttribute("DecrFlag", "N");
        }
        if (incrmntamnt.compareTo(zeroVal) == -1)
        {
            incrmntamnt = zeroVal.subtract(incrmntamnt);
        }
        incrmntamnt = incrmntamnt.setScale(2, BigDecimal.ROUND_HALF_UP);
        totlInrmntAmnt = totlInrmntAmnt.setScale(2, BigDecimal.ROUND_HALF_UP);
        hcminmntSummVo.getCurrentRow().setAttribute("IncrAmt", incrmntamnt);
        hcminmntSummVo.getCurrentRow().setAttribute("SalAmt", totlInrmntAmnt);

    }

    public void filtrOrgHcmEmpPrf()
    {
        Integer wrkStat = new Integer(32);
        this.getLovOrgHCMEmpProfVO1().setNamedWhereClauseParam("bindWrkStat", wrkStat);
        this.getLovOrgHCMEmpProfVO1().executeQuery();
    }

    public String getStatusIsIncrOrDecr()
    {
        System.out.println("getStatusIsIncrOrDecr");
        BigDecimal prvSal = BigDecimal.ZERO;
        BigDecimal newsal = BigDecimal.ZERO;
        RowQualifier rw = null;
        Row[] r = null;
        ViewObjectImpl voprev = this.getDummyPrevSalComponent();
        ViewObjectImpl vosum = this.getHCMIncrmntSumm();
        rw = new RowQualifier(voprev);
        r = voprev.getFilteredRows(rw);
        if (r.length > 0)
        {
            for (Row rn : r)
            {
                prvSal = prvSal.add(new BigDecimal(rn.getAttribute("SalAmt").toString()));
            }
        }
        RowSetIterator createRowSetIterator = vosum.createRowSetIterator(null);
        while (createRowSetIterator.hasNext())
        {
            Row row = createRowSetIterator.next();
            newsal = newsal.add(new BigDecimal(row.getAttribute("SalAmt").toString()));
        }
        if (newsal.compareTo(prvSal) == +1 || newsal.compareTo(prvSal) == 0)
        {
            this.getHCMIncrement().getCurrentRow().setAttribute("ArrDecrFlg", "N");
            return "N";
        }
        else if (newsal.compareTo(prvSal) == -1)
        {
            this.getHCMIncrement().getCurrentRow().setAttribute("ArrDecrFlg", "Y");
            return "Y";
        }
        return "Y";
    }

    public void ExecuteVoSummndReff()
    {
        this.getHCMIncrementRef().executeQuery();
        this.getHCMIncrmntSumm().executeQuery();
    }

    public BigDecimal getSalaryAmount(String salId, String EmpDocId, BigDecimal incrPerc, String DocId)
    {
        System.out.println("getSalaryAmount");
        BigDecimal salAmnt = BigDecimal.ZERO;
        BigDecimal prevSlry = BigDecimal.ZERO;
        boolean result = false;
        ViewObjectImpl voiSumm = this.getHCMIncrmntSumm();
        RowQualifier rowQualifierFrSumm = new RowQualifier(voiSumm);
        String querryfrSumm = "SalId='" + salId + "' AND DocId='" + DocId + "'";
        rowQualifierFrSumm.setWhereClause(querryfrSumm);
        Row rowfrmSumm[] = voiSumm.getFilteredRows(rowQualifierFrSumm);
        if (rowfrmSumm.length > 0)
        {
            prevSlry = new BigDecimal(rowfrmSumm[0].getAttribute("SalAmt").toString());

        }
        else
        {
            ViewObjectImpl voi = this.getHCMEmpSal();
            RowQualifier rowQualifier = new RowQualifier(voi);
            String querry = "SalId='" + salId + "' AND DocId='" + EmpDocId + "'";
            rowQualifier.setWhereClause(querry);
            Row row[] = voi.getFilteredRows(rowQualifier);
            if (row.length > 0)
            {
                prevSlry = new BigDecimal(row[0].getAttribute("SalAmt").toString());

            }
        }
        salAmnt =
            (incrPerc.multiply(prevSlry)).divide(new BigDecimal(100)); //System.out.println(x + " % of " + y + " is " + result);
        return salAmnt;
    }

    public BigDecimal getPrevSlrAmnt(String salId, String EmpDocId)
    {
        System.out.println("getPrevSlrAmnt");
        BigDecimal prevSlry = BigDecimal.ZERO;
        ViewObjectImpl voi = this.getHCMEmpSal();
        RowQualifier rowQualifier = new RowQualifier(voi);
        String querry = "SalId='" + salId + "' AND DocId='" + EmpDocId + "'";
        rowQualifier.setWhereClause(querry);
        Row row[] = voi.getFilteredRows(rowQualifier);
        if (row.length > 0)
        {
            prevSlry = new BigDecimal(row[0].getAttribute("SalAmt").toString());
        }
        return prevSlry;
    }

    public String delFromReffChild()
    {
        System.out.println("delFromReffChild");
        String result = "";
        ViewObjectImpl hcminmntVo = this.getHCMIncrement();
        ViewObjectImpl hcminmntSummVo = this.getHCMIncrmntSumm();
        String DocId = (String) hcminmntVo.getCurrentRow().getAttribute("DocId");
        String salId = (String) hcminmntSummVo.getCurrentRow().getAttribute("SalId");
        ViewObjectImpl reffSaliDVO = this.getHCMIncrementRef1();
        RowQualifier rowQualifierfrReff = new RowQualifier(reffSaliDVO);
        String QryfrRefComponent = "RefSalId='" + salId + "' AND DocId='" + DocId + "'";
        rowQualifierfrReff.setWhereClause(QryfrRefComponent);
        Row newRwfrReff[] = reffSaliDVO.getFilteredRows(rowQualifierfrReff);
        System.out.println("no of rows during delete=" + newRwfrReff.length);
        if (newRwfrReff.length > 0)
        {
            result = "true";
            reffSaliDVO.executeQuery();
        }
        else
        {
            ViewObjectImpl reffVO = this.getHCMIncrementRef();
            String Qry = "SalId='" + salId + "' AND DocId='" + DocId + "'"; //RefSalId
            rowQualifierfrReff.setWhereClause(Qry);
            Row newRw[] = reffVO.getFilteredRows(rowQualifierfrReff);
            if (newRw.length > 0)
            {
                for (int i = 0; i < newRw.length; i++)
                {
                    newRw[i].remove();
                }
            }
            result = "false";
            reffVO.executeQuery();
        }
        return result;

    }


    public String chkPrevSalaryAmount(BigDecimal amount)
    {

        System.out.println("chkPrevSalaryAmount");
        ViewObjectImpl hcminmntSummVo = this.getHCMIncrmntSumm();
        String decFlag = (String) hcminmntSummVo.getCurrentRow().getAttribute("DecrFlag");
        if (decFlag.equals("Y"))
        {
            ViewObjectImpl hcminmntVo = this.getHCMIncrement();
            String EmpDocId = (String) hcminmntVo.getCurrentRow().getAttribute("EmpDocId");
            BigDecimal zero = BigDecimal.ZERO;
            BigDecimal totlInrmntAmnt = BigDecimal.ZERO;
            String salId = (String) hcminmntSummVo.getCurrentRow().getAttribute("SalId");
            BigDecimal prevSlry = BigDecimal.ZERO;
            ViewObjectImpl voi = this.getHCMEmpSal();
            RowQualifier rowQualifier = new RowQualifier(voi);
            String querry = "SalId='" + salId + "' and DocId='" + EmpDocId + "'";
            rowQualifier.setWhereClause(querry);
            Row row[] = voi.getFilteredRows(rowQualifier);
            if (row.length > 0)
            {
                prevSlry = new BigDecimal(row[0].getAttribute("SalAmt").toString());
            }
            //            if((prevSlry.compareTo(zero) == 0))
            //            {
            //                return "X";
            //            }
            totlInrmntAmnt = prevSlry.subtract(amount);
            if ((totlInrmntAmnt.compareTo(zero) == 0 || (totlInrmntAmnt.compareTo(zero) == -1)))
            {
                return "N";
            }
        }
        return "Y";
    }

    public String chkNewSalaryComponent()
    {
        System.out.println("chkNewSalaryComponent");
        ViewObjectImpl hcminmntSummVo = this.getHCMIncrmntSumm();
        ViewObjectImpl hcminmntVo = this.getHCMIncrement();
        String EmpDocId = (String) hcminmntVo.getCurrentRow().getAttribute("EmpDocId");
        BigDecimal zero = BigDecimal.ZERO;
        BigDecimal totlInrmntAmnt = BigDecimal.ZERO;
        String salId = (String) hcminmntSummVo.getCurrentRow().getAttribute("SalId");
        BigDecimal prevSlry = BigDecimal.ZERO;
        ViewObjectImpl voi = this.getHCMEmpSal();
        RowQualifier rowQualifier = new RowQualifier(voi);
        String querry = "SalId='" + salId + "' and DocId='" + EmpDocId + "'";
        rowQualifier.setWhereClause(querry);
        Row row[] = voi.getFilteredRows(rowQualifier);
        if (row.length > 0)
        {
            prevSlry = new BigDecimal(row[0].getAttribute("SalAmt").toString());
        }
        if ((prevSlry.compareTo(zero) == 0))
        {
            return "N";
        }
        return "Y";
    }


    public void calculateNewSlryAmnt(BigDecimal amount)
    {
        System.out.println("calculateNewSlryAmnt"); //incrmntAmntFrSumm
        ViewObjectImpl hcminmntVo = this.getHCMIncrement();
        ViewObjectImpl hcminmntSummVo = this.getHCMIncrmntSumm();
        String EmpDocId = (String) hcminmntVo.getCurrentRow().getAttribute("EmpDocId");
        String DocId = (String) hcminmntVo.getCurrentRow().getAttribute("DocId");
        BigDecimal zero = BigDecimal.ZERO;
        BigDecimal totlInrmntAmnt = BigDecimal.ZERO;
        String salId = (String) hcminmntSummVo.getCurrentRow().getAttribute("SalId");
        String decFlag = (String) hcminmntSummVo.getCurrentRow().getAttribute("DecrFlag");
        BigDecimal prevSlry = BigDecimal.ZERO;
        ViewObjectImpl voi = this.getHCMEmpSal();
        RowQualifier rowQualifier = new RowQualifier(voi);
        String querry = "SalId='" + salId + "' AND DocId='" + EmpDocId + "'";
        rowQualifier.setWhereClause(querry);
        Row row[] = voi.getFilteredRows(rowQualifier);
        if (row.length > 0)
        {
            prevSlry = new BigDecimal(row[0].getAttribute("SalAmt").toString());
        }
        if (decFlag.equals("Y"))
        {
            totlInrmntAmnt = prevSlry.subtract(amount);
        }
        else
        {
            totlInrmntAmnt = prevSlry.add(amount);
        }
        hcminmntSummVo.getCurrentRow().setAttribute("SalAmt", totlInrmntAmnt);


        // calulating percentage on all refrence component//


        ViewObjectImpl reffVO = this.getHCMIncrementRef1();
        RowQualifier rowQualifierfrReff = new RowQualifier(reffVO);
        String Qry = "RefSalId='" + salId + "' AND DocId='" + DocId + "'"; //RefSalId
        rowQualifierfrReff.setWhereClause(Qry);
        Row newRw[] = reffVO.getFilteredRows(rowQualifierfrReff);
        if (newRw.length > 0)
        {
            for (int i = 0; i < newRw.length; i++)
            {
                BigDecimal incrPerc = new BigDecimal(newRw[i].getAttribute("IncrValue").toString());
                String salIdFrmReff = (String) newRw[i].getAttribute("SalId");
                BigDecimal inrmntFrmEmpSal = calulateSalary(salIdFrmReff, EmpDocId, incrPerc, DocId, totlInrmntAmnt);
            }
        }
    }

    public BigDecimal calulateSalary(String salId, String EmpDocId, BigDecimal incrPerc, String DocId,
                                     BigDecimal totlInrmntAmnt)
    {
        System.out.println("calulateSalary");
        BigDecimal salAmnt = BigDecimal.ZERO;
        BigDecimal zeroVal = BigDecimal.ZERO;
        BigDecimal prevSlry = BigDecimal.ZERO;
        BigDecimal diffSlry = BigDecimal.ZERO;
        salAmnt = (incrPerc.multiply(totlInrmntAmnt)).divide(new BigDecimal(100));


        ViewObjectImpl voiSumm = this.getHCMIncrmntSumm();
        RowQualifier rowQualifierFrSumm = new RowQualifier(voiSumm);
        String querryfrSumm = "SalId='" + salId + "' AND DocId='" + DocId + "'";
        rowQualifierFrSumm.setWhereClause(querryfrSumm);
        Row rowfrmSumm[] = voiSumm.getFilteredRows(rowQualifierFrSumm);
        if (rowfrmSumm.length > 0)
        {
            for (int i = 0; i < rowfrmSumm.length; i++)
            {
                BigDecimal prevSlryAmnt = getPrevSlrAmnt(salId, EmpDocId);
                diffSlry = salAmnt.subtract(prevSlryAmnt);

                salAmnt = salAmnt.setScale(2, BigDecimal.ROUND_HALF_UP);
                diffSlry = diffSlry.setScale(2, BigDecimal.ROUND_HALF_UP);
                if (diffSlry.compareTo(zeroVal) == -1)
                {
                    diffSlry = zeroVal.subtract(diffSlry);
                }
                if (salAmnt.compareTo(prevSlryAmnt) == -1)
                {
                    rowfrmSumm[i].setAttribute("SalAmt", salAmnt);
                    rowfrmSumm[i].setAttribute("IncrAmt", diffSlry);
                    rowfrmSumm[i].setAttribute("DecrFlag", "Y");

                }
                if (salAmnt.compareTo(prevSlryAmnt) == +1 || salAmnt.compareTo(prevSlryAmnt) == 0)
                {
                    rowfrmSumm[i].setAttribute("SalAmt", salAmnt);
                    rowfrmSumm[i].setAttribute("IncrAmt", diffSlry);
                    rowfrmSumm[i].setAttribute("DecrFlag", "N");
                }

            }
            this.getHCMIncrmntSumm().executeQuery();

        }
        return salAmnt;
    }

    public void applyPostChanges()
    {
        this.getDBTransaction().postChanges();
    }


    /**
     * Container's getter for DummySearch2.
     * @return DummySearch2
     */
    public ViewObjectImpl getDummySearch()
    {
        return (ViewObjectImpl) findViewObject("DummySearch");
    }

    /**
     * Container's getter for HCMIncementSrchRslt1.
     * @return HCMIncementSrchRslt1
     */
    public ViewObjectImpl getHCMIncementSrchRslt()
    {
        return (ViewObjectImpl) findViewObject("HCMIncementSrchRslt");
    }


    /**
     * Container's getter for DummyIncrmntType2.
     * @return DummyIncrmntType2
     */
    public ViewObjectImpl getDummyIncrmntType()
    {
        return (ViewObjectImpl) findViewObject("DummyIncrmntType");
    }

    /**
     * Container's getter for DummyPrevSalComponent1.
     * @return DummyPrevSalComponent1
     */
    public ViewObjectImpl getDummyPrevSalComponent()
    {
        return (ViewObjectImpl) findViewObject("DummyPrevSalComponent");
    }

    public void goBckToSrchPg()
    {

        this.getHCMIncementSrchRslt().executeQuery();

    }

    /**
     * Container's getter for DummyArrSearch1.
     * @return DummyArrSearch1
     */
    public ViewObjectImpl getDummyArrSearch()
    {
        return (ViewObjectImpl) findViewObject("DummyArrSearch");
    }

    /**
     * Container's getter for HCMSalryIncrArr1.
     * @return HCMSalryIncrArr1
     */
    public ViewObjectImpl getHCMSalryIncrArr()
    {
        return (ViewObjectImpl) findViewObject("HCMSalryIncrArr");
    }

    /**
     * Container's getter for HCMIncrmntSumm1.
     * @return HCMIncrmntSumm1
     */
    public ViewObjectImpl getHCMIncrmntSumm()
    {
        return (ViewObjectImpl) findViewObject("HCMIncrmntSumm");
    }

    /**
     * Container's getter for HCMIncrmntSummVL1.
     * @return HCMIncrmntSummVL1
     */
    public ViewLinkImpl getHCMIncrmntSummVL1()
    {
        return (ViewLinkImpl) findViewLink("HCMIncrmntSummVL1");
    }

    /**
     * Container's getter for HCMIncrementRef1.
     * @return HCMIncrementRef1
     */
    public ViewObjectImpl getHCMIncrementRef()
    {
        return (ViewObjectImpl) findViewObject("HCMIncrementRef");
    }

    /**
     * Container's getter for HCMSalryIncrmntReffVL1.
     * @return HCMSalryIncrmntReffVL1
     */
    public ViewLinkImpl getHCMSalryIncrmntReffVL1()
    {
        return (ViewLinkImpl) findViewLink("HCMSalryIncrmntReffVL1");
    }

    /**
     * Container's getter for HCMEmpSal1.
     * @return HCMEmpSal1
     */
    public ViewObjectImpl getHCMEmpSal()
    {
        return (ViewObjectImpl) findViewObject("HCMEmpSal");
    }

    public String chkDuplCmponentStatus(String salId)
    {
        System.out.println("chkDuplCmponentStatus");
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        ;
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        RowQualifier rq = new RowQualifier(this.getHCMIncrmntSumm());
        rq.setWhereClause("CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId + "' and OrgId='" +
                          orgId + "'  and DocId='" + this.getHCMIncrmntSumm().getCurrentRow().getAttribute("DocId") +
                          "' " + "and SalId='" + salId + "'");
        Row fr[] = this.getHCMIncrmntSumm().getFilteredRows(rq);
        for (Row r : fr)
        {
            if (!(r.equals(this.getHCMIncrmntSumm().getCurrentRow())))
            {
                System.out.println("rows are different ");
                return "Y";
            }
        }
        return "N";
    }


    public String chkDuplReffCmponentStatus(String RefSalId, String SalId)
    {
        System.out.println("chkDuplReffCmponentStatus");
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        RowQualifier rq = new RowQualifier(this.getHCMIncrementRef());
        rq.setWhereClause("CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId + "' and OrgId='" +
                          orgId + "'  and DocId='" + this.getHCMIncrementRef().getCurrentRow().getAttribute("DocId") +
                          "' " + "and RefSalId='" + RefSalId + "'" + "and SalId='" + SalId + "'");
        System.out.println("Query=" + rq.getExprStr());
        Row fr[] = this.getHCMIncrementRef().getFilteredRows(rq);
        System.out.println("Total no. of same rows=" + fr.length);
        for (Row r : fr)
        {
            System.out.println("data bse Row=" + r + " and current row is =" +
                               this.getHCMIncrmntSumm().getCurrentRow());
            if (!(r.equals(this.getHCMIncrementRef().getCurrentRow())))
            {
                System.out.println("rows are different ");
                return "Y";
            }
        }
        return "N";
    }

    public String chkDuplicateCompFrGroup(String salId)
    {
        System.out.println("chkDuplicateCompFrGroup");
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        String grpId = (String) this.getHCMIncrementGrpSum().getCurrentRow().getAttribute("GrpId");
        String doc_id = (String) this.getHCMIncrementGrpSum().getCurrentRow().getAttribute("DocId");
        RowQualifier rq = new RowQualifier(this.getHCMIncrementGrpSum());
        String querry =
            "CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId + "' and OrgId='" + orgId +
            "'  and DocId='" + doc_id + "' " + "and GrpId='" + grpId + "'" + "and SalId='" + salId + "'";

        rq.setWhereClause(querry);
        Row fr[] = this.getHCMIncrementGrpSum().getFilteredRows(rq);
        for (Row r : fr)
        {
            System.out.println("data bse Row=" + r + " and current row is =" +
                               this.getHCMIncrementGrpSum().getCurrentRow());
            if (!(r.equals(this.getHCMIncrementGrpSum().getCurrentRow())))
            {
                return "Y";
            }
        }
        return "N";
    }

    public String chkDuplicateCompFrGroupFromName(String salComNm)
    {
        System.out.println("chkDuplicateCompFrGroupFromName");
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        String grpId = (String) this.getHCMIncrementGrpSum().getCurrentRow().getAttribute("GrpId");
        String doc_id = (String) this.getHCMIncrementGrpSum().getCurrentRow().getAttribute("DocId");
        String salId = null;
        ViewObjectImpl vo = this.getLovOrgHcmSalary1();
        vo.setNamedWhereClauseParam("bindCldId", cldId);
        vo.setNamedWhereClauseParam("bindHoOrgId", hoOrgId);
        vo.setNamedWhereClauseParam("BindOrgId", orgId);
        vo.setNamedWhereClauseParam("bindSlocId", slocId);
        vo.executeQuery();
        Row[] r1 = vo.getFilteredRows("ParamDesc", salComNm);
        if (r1 != null)
            if (r1.length > 0)
            {
                salId = (String) r1[0].getAttribute("SalId");
            }
        RowQualifier rq = new RowQualifier(this.getHCMIncrementGrpSum());
        String querry =
            "CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId + "' and OrgId='" + orgId +
            "'  and DocId='" + doc_id + "' " + "and GrpId='" + grpId + "'" + "and SalId='" + salId + "'";

        rq.setWhereClause(querry);
        Row fr[] = this.getHCMIncrementGrpSum().getFilteredRows(rq);
        for (Row r : fr)
        {
            System.out.println("data bse Row=" + r + " and current row is =" +
                               this.getHCMIncrementGrpSum().getCurrentRow());
            if (!(r.equals(this.getHCMIncrementGrpSum().getCurrentRow())))
            {
                return "Y";
            }
        }
        return "N";
    }

    public String chkDuplicateReffComp(String RefSalId, String SalId)
    {
        System.out.println("chkDuplicateReffComp");
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        RowQualifier rq = new RowQualifier(this.getHcmIncrGrpSummReff());
        rq.setWhereClause("CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId + "' and OrgId='" +
                          orgId + "'  and DocId='" +
                          this.getHcmIncrGrpSummReff().getCurrentRow().getAttribute("DocId") + "' " + "and RefSalId='" +
                          RefSalId + "'" + "and SalId='" + SalId + "'");
        Row fr[] = this.getHcmIncrGrpSummReff().getFilteredRows(rq);
        for (Row r : fr)
        {
            System.out.println("data bse Row=" + r + " and current row is =" +
                               this.getHCMIncrmntSumm().getCurrentRow());
            if (!(r.equals(this.getHcmIncrGrpSummReff().getCurrentRow())))
            {
                return "Y";
            }
        }
        return "N";
    }

    public String setIncrDateInEndOrStartDate(boolean deleteFlag)
    {
        Object IncrDate = "";
        Row[] fr = this.getHCMIncrement().getFilteredRows("DocId", resolvEl("#{pageFlowScope.GLBL_GET_DOC_ID}"));
        if (fr.length > 0)
        {
            IncrDate = fr[0].getAttribute("IncrDt");
            if (deleteFlag)
            {
                this.getHCMIncrementGrpSum().getCurrentRow().setAttribute("ValidStrtDt", null);
                this.getHCMIncrementGrpSum().getCurrentRow().setAttribute("ValidEndDt", IncrDate);
                return "Y";
            }
            else
            {
                this.getHCMIncrementGrpSum().getCurrentRow().setAttribute("ValidStrtDt", IncrDate);
                this.getHCMIncrementGrpSum().getCurrentRow().setAttribute("ValidEndDt", null);
                return "Y";
            }
        }
        return "N";
    }

    public void setAllIncrmntDataIntoTble()
    {
        System.out.println("setAllIncrmntDataIntoTble");
        ViewObjectImpl hcminmntVo = this.getHCMIncrement();
        String incrCriteraVal = (String) hcminmntVo.getCurrentRow().getAttribute("IncrCritera");
        if (incrCriteraVal != null)
            if (incrCriteraVal.equals("E"))
            {
                setDataForIndividualEmployee();
            }
            else if (incrCriteraVal.equals("G"))
            {
                setDataForIndividualGroup();
            }

    }

    public void setDataForIndividualEmployee()
    {
        System.out.println("setDataForIndividualEmployee");
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        ViewObjectImpl hcminmntVo = this.getHCMIncrement();
        String incrCriteraVal = (String) hcminmntVo.getCurrentRow().getAttribute("IncrCritera");
        if (incrCriteraVal != null)
            if (incrCriteraVal.equals("G"))
            {

            }
        String EmpDocId = (String) hcminmntVo.getCurrentRow().getAttribute("EmpDocId");
        BigDecimal incrAmnt = BigDecimal.ZERO;
        String DocId = (String) hcminmntVo.getCurrentRow().getAttribute("DocId");
        RowQualifier rq = new RowQualifier(this.getDummyPrevSalComponent());
        RowQualifier rqFrReff = new RowQualifier(this.getDummyHcmEmpSalRef1());
        Row rwFrSumm[] = this.getDummyPrevSalComponent().getFilteredRows(rq);
        try
        {
            if (rwFrSumm.length > 0)
            {
                for (Row rs : rwFrSumm)
                {
                    Row r = this.getHCMIncrmntSumm().createRow();
                    r.setAttribute("CldId", cldId);
                    r.setAttribute("SlocId", slocId);
                    r.setAttribute("HoOrgId", hoOrgId);
                    r.setAttribute("OrgId", orgId);
                    r.setAttribute("DocId", DocId);
                    r.setAttribute("EmpCode", rs.getAttribute("EmpCode"));
                    r.setAttribute("SalId", rs.getAttribute("SalId"));
                    r.setAttribute("UsrIdCreate", userId);
                    r.setAttribute("UsrIdCreateDt", (new Timestamp(System.currentTimeMillis())).dateValue());
                    if (rs.getAttribute("SalType").equals("PERCENT"))
                        r.setAttribute("IncrType", "P");
                    if (rs.getAttribute("SalType").equals("AMOUNT"))
                        r.setAttribute("IncrType", "A");
                    r.setAttribute("DecrFlag", "N");
                    r.setAttribute("SalAmt", rs.getAttribute("SalAmt"));
                    r.setAttribute("IncrAmt", incrAmnt);
                    if (rs.getAttribute("SalType").equals("PERCENT"))
                    {
                        Row rowfrReff = this.getHCMIncrementRef().createRow();
                        String querry =
                            ("CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId +
                             "' and OrgId='" + orgId + "' and SalId = '" + rs.getAttribute("SalId") +
                             "' and DocId = '" + EmpDocId + "'");
                        System.out.println(querry);
                        rqFrReff.setWhereClause(querry);
                        Row rwfrReff[] = this.getDummyHcmEmpSalRef1().getFilteredRows(rqFrReff);
                        if (rwfrReff.length > 0)
                        {
                            for (Row rf : rwfrReff)
                            {
                                rowfrReff.setAttribute("CldId", cldId);
                                rowfrReff.setAttribute("SlocId", slocId);
                                rowfrReff.setAttribute("HoOrgId", hoOrgId);
                                rowfrReff.setAttribute("OrgId", orgId);
                                rowfrReff.setAttribute("DocId", DocId);
                                rowfrReff.setAttribute("EmpCode", rs.getAttribute("EmpCode"));
                                rowfrReff.setAttribute("SalId", rf.getAttribute("SalId"));
                                rowfrReff.setAttribute("RefSalId", rf.getAttribute("RefSalId"));
                                rowfrReff.setAttribute("IncrValue", rf.getAttribute("SalPercVal"));
                                rowfrReff.setAttribute("UsrIdCreate", userId);
                                rowfrReff.setAttribute("UsrIdCreateDt",
                                                       (new Timestamp(System.currentTimeMillis())).dateValue());
                            }


                        }

                    }
                }

            }
        }
        catch (SQLException ex) {
            ex.printStackTrace();
        }

        //        callStoredFunction(Types.VARCHAR, "INS_EMP_INCR (?,?,?,?,?,?,?)", new Object[]
        //        {
        //            cldId, slocId, hoOrgId, orgId, DocId, EmpDocId, userId
        //        });

        this.getHCMIncrmntSumm1().executeQuery();
        this.getHCMIncrmntSumm().executeQuery();
        this.getHCMIncrementRef().executeQuery();
        this.getHCMIncrementRef1().executeQuery();
    }

    public void setDataForIndividualGroup()
    {
        System.out.println("setDataForIndividualGroup");
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        ViewObjectImpl hcminmntVo = this.getHCMIncrement();
        String GrpId = (String) hcminmntVo.getCurrentRow().getAttribute("GrpId");
        BigDecimal incrAmnt = BigDecimal.ZERO;
        String DocId = (String) hcminmntVo.getCurrentRow().getAttribute("DocId");
        RowQualifier rq = new RowQualifier(this.getDummyGrpSalaryComp());
        Row rwFrSumm[] = this.getDummyGrpSalaryComp().getFilteredRows(rq);
        try
        {
            if (rwFrSumm.length > 0)
            {
                for (Row rs : rwFrSumm)
                {
                    Row r = this.getHCMIncrmntSumm().createRow();
                    r.setAttribute("CldId", cldId);
                    r.setAttribute("SlocId", slocId);
                    r.setAttribute("HoOrgId", hoOrgId);
                    r.setAttribute("OrgId", orgId);
                    r.setAttribute("DocId", DocId);
                    r.setAttribute("EmpCode", null);
                    r.setAttribute("GrpId", GrpId);
                    r.setAttribute("SalId", rs.getAttribute("ParamId"));
                    r.setAttribute("UsrIdCreate", userId);
                    r.setAttribute("UsrIdCreateDt", (new Timestamp(System.currentTimeMillis())).dateValue());
                    r.setAttribute("IncrType", "A");
                    r.setAttribute("DecrFlag", "N");
                    r.setAttribute("SalAmt", incrAmnt);
                    r.setAttribute("IncrAmt", incrAmnt);
                }
            }
        }
        catch (SQLException ex) {
            ex.printStackTrace();
        }

        this.getHCMIncrmntSumm1().executeQuery();
        this.getHCMIncrmntSumm().executeQuery();
        this.getHCMIncrementRef().executeQuery();
        this.getHCMIncrementRef1().executeQuery();
    }

    public String chkSalaryComponent()
    {
        System.out.println("chkSalaryComponent");
        String result = "Y";
        ViewObjectImpl hcminmntSummVo = this.getHCMIncrmntSumm();
        String salId = (String) hcminmntSummVo.getCurrentRow().getAttribute("SalId");
        hcminmntSummVo.executeQuery();
        if (salId == null || salId == "" || salId.length() == 0)
        {
            result = "F";
        }
        return result;
    }

    /**
     * Container's getter for IncrArrer1.
     * @return IncrArrer1
     */
    public ViewObjectImpl getIncrArrer()
    {
        return (ViewObjectImpl) findViewObject("IncrArrer");
    }

    public void getSlryAmntAftrChngIncrmntTyp(String IncrmntTyp)
    {
        System.out.println("getSlryAmntAftrChngIncrmntTyp");
        if (IncrmntTyp != null || IncrmntTyp != "" || IncrmntTyp.length() != 0)
        {
            ViewObjectImpl hcminmntSummVo = this.getHCMIncrmntSumm();
            Number numzero = new Number(0);
            Object numObj = hcminmntSummVo.getCurrentRow().getAttribute("IncrAmt");
            Number inc_amnt = (Number) hcminmntSummVo.getCurrentRow().getAttribute("IncrAmt");
            BigDecimal prevAmnt = BigDecimal.ZERO;
            BigDecimal zeroVal = BigDecimal.ZERO;
            BigDecimal amnt = BigDecimal.ZERO;
            if (inc_amnt == null || numObj.equals("") || inc_amnt == numzero)
            {
                System.out.println("increment amount is zero during chhange");
                hcminmntSummVo.getCurrentRow().setAttribute("IncrAmt", 0);
                hcminmntSummVo.getCurrentRow().setAttribute("SalAmt", prevAmnt);
            }
            else
            {

                amnt = new BigDecimal(hcminmntSummVo.getCurrentRow().getAttribute("IncrAmt").toString());
                BigDecimal updatedSlry = BigDecimal.ZERO;
                updatedSlry = new BigDecimal(hcminmntSummVo.getCurrentRow().getAttribute("SalAmt").toString());
                prevAmnt = updatedSlry.subtract(amnt);
                hcminmntSummVo.getCurrentRow().setAttribute("IncrAmt", 0);

                if (prevAmnt.compareTo(zeroVal) == -1)
                {
                    prevAmnt = zeroVal.subtract(prevAmnt);
                }
                hcminmntSummVo.getCurrentRow().setAttribute("SalAmt", prevAmnt);
            }


        }

    }

    public String getStatusIsAmntFieldAvlbl(String IncrmntTyp)
    {
        System.out.println("getStatusIsAmntFieldAvlbl");
        if (IncrmntTyp != null || IncrmntTyp != "" || IncrmntTyp.length() != 0)
        {

            if (IncrmntTyp.equals("A"))
            {
                return "true";
            }
            else
            {
                ViewObjectImpl hcminmntVo = this.getHCMIncrement();
                ViewObjectImpl hcminmntSummVo = this.getHCMIncrmntSumm();
                String DocId = (String) hcminmntVo.getCurrentRow().getAttribute("DocId");
                System.out.println("sumerry estimated rows===" + hcminmntSummVo.getEstimatedRowCount());
                RowQualifier rowQualifierfrSumm = new RowQualifier(hcminmntSummVo);
                String QryfrmSummComponent = "IncrType='A' AND DocId='" + DocId + "'";
                rowQualifierfrSumm.setWhereClause(QryfrmSummComponent);
                Row newRwfrSumm[] = hcminmntSummVo.getFilteredRows(rowQualifierfrSumm);
                if (newRwfrSumm.length > 0)
                {

                    for (Row r : newRwfrSumm)
                    {
                        if (!(r.equals(this.getHCMIncrmntSumm().getCurrentRow())))
                        {
                            return "true";
                        }
                    }

                }

            }
        }
        return "false";
    }

    public String getUsrName(Integer usrId)
    {
        System.out.println("getUsrName");
        Row[] r = this.getAppSecUser().getFilteredRows("UsrId", usrId);
        if (r.length > 0)
            return (String) r[0].getAttribute("UsrName");
        else
            return null;
    }


    //------------------------WF Methods--------------------------
    private static int INTEGER = Types.NUMERIC;
    private static int DATE = Types.DATE;
    private static int STRING = Types.VARCHAR;
    private static int NUMBER = Types.NUMERIC;

    public String getWfNo(Integer sloc_id, String cld_id, String org_id, Integer doc_no)
    {

        StringBuilder sbul = new StringBuilder("APP.WF_GET_ID(?,?,?,?,?)");
        Object[] obj =
        {
            sloc_id, cld_id, org_id, doc_no, 0
        };
        //Object objret = (String) ADFModelUtils.callFunctionFrmId(this, 85915, obj, Types.VARCHAR);
        Object objret = ADFModelUtils.callFunction(this, sbul, obj, Types.VARCHAR);
        //        Object obj = callStoredFunction(Types.VARCHAR, "APP.WF_GET_ID(?,?,?,?,?)", new Object[]
        //        {
        //            sloc_id, cld_id, org_id, doc_no, 0
        //        });

        return objret.toString();
    }

    public Integer pendingCheck(Integer SlocId, String CldId, String OrgId, Integer DocNo)
    {
        System.out.println("pendingCheck");
        Row curr = this.getHCMIncrement().getCurrentRow();
        String docIdTxn = curr.getAttribute("DocId").toString();
        StringBuilder sbul = new StringBuilder("APP.WF_GET_CUR_USR(?,?,?,?,?,?)");
        Object[] Myobj =
        {
            SlocId, CldId, OrgId, DocNo, docIdTxn, 0
        };
        //Object obj = ADFModelUtils.callFunctionFrmId(this, 85913, Myobj, Types.VARCHAR);
        Object obj = ADFModelUtils.callFunction(this, sbul, Myobj, NUMBER);
        //        Object obj = callStoredFunction(NUMBER, "APP.WF_GET_CUR_USR(?,?,?,?,?,?)", new Object[]
        //        {
        //            SlocId, CldId, OrgId, DocNo, docIdTxn, 0
        //        });
        Integer usrId = null;
        if (obj != null)
        {
            usrId = Integer.parseInt(obj.toString());
        }
        return usrId;
    }


    public Integer getUsrLvl(Integer SlocId, String CldId, String OrgId, Integer usr_id, String WfNum, String DocNo)
    {
        StringBuilder sbul = new StringBuilder("APP.WF_GET_USR_LEVEL(?,?,?,?,?,?,?)");
        Object[] Myobj =
        {
            SlocId, CldId, OrgId, usr_id, WfNum, DocNo, 0
        };
        //return Integer.parseInt(ADFModelUtils.callFunctionFrmId(this, 85927, Myobj, NUMBER).toString());
        return Integer.parseInt(ADFModelUtils.callFunction(this, sbul, Myobj, NUMBER).toString());

        //return Integer.parseInt(callStoredFunction(NUMBER, "APP.WF_GET_USR_LEVEL(?,?,?,?,?,?,?)", new Object[]
        //    {
        //        SlocId, CldId, OrgId, usr_id, WfNum, DocNo, 0
        //    }).toString());


    }

    public Integer insIntoTxn(Integer sloc_id, String cld_id, String pOrgId, Integer DOC_NO, String WfNum,
                              Integer usr_idFrm, Integer usr_idTo, Integer levelTo, Integer levelFrm, String action,
                              String remark, Number amount, String post)
    {

        Row curr = this.getHCMIncrement().getCurrentRow();
        String docIdTxn = curr.getAttribute("DocId").toString();
        StringBuilder sbul = new StringBuilder("APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
        Object[] Myobj =
        {
            sloc_id, cld_id, pOrgId, DOC_NO, 0, WfNum, docIdTxn, usr_idFrm, usr_idTo, levelFrm, levelTo, action, remark,
            amount, post
        };
        //return Integer.parseInt(ADFModelUtils.callFunctionFrmId(this, 85929, Myobj, NUMBER).toString());
        return Integer.parseInt(ADFModelUtils.callFunction(this, sbul, Myobj, NUMBER).toString());

        //        return Integer.parseInt(callStoredFunction(NUMBER, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[]
        //    {
        //        sloc_id, cld_id, pOrgId, DOC_NO, 0, WfNum, docIdTxn, usr_idFrm, usr_idTo, levelFrm, levelTo, action, remark,
        //        amount, post
        //    }).toString());

    }

    /**
     * Container's getter for AppSecUser1.
     * @return AppSecUser1
     */
    public ViewObjectImpl getAppSecUser()
    {
        return (ViewObjectImpl) findViewObject("AppSecUser");
    }


    public void wfAction(String ret)
    {
        System.out.println("wfAction");
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        ;
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        if (ret != null)
        {
            Row curr = this.getHCMIncrement().getCurrentRow();
            if (ret.equals("F"))
            {
                curr.setAttribute("IncrStat", 46);
            }
            else if (ret.equals("R"))
            {
                curr.setAttribute("IncrStat", 45);
            }
            if (ret.equals("V"))
            {
                curr.setAttribute("IncrStat", 45);
            }
            else if (ret.equals("A"))
            {
                curr.setAttribute("IncrStat", 47);
                this.getDBTransaction().commit();
                // FN_HCM_GEN_ARREAR(V_EMP_CODE NUMBER,V_EMP_DOC_ID VARCHAR2,V_APPL_DATE DATE,V_INCR_DT DATE)
                String incrCriteria = (String) curr.getAttribute("IncrCritera");
                if (incrCriteria.equals("E"))
                {
                    String result = ChkFunctionForSingleEmployeeCallOrNot();
                    if (result.equals("Y"))
                    {
                        StringBuilder sbul = new StringBuilder("HCM.FN_HCM_GEN_ARREAR(?,?,?,?,?,?,?,?,?)");
                        Object[] Myobj =
                        {
                            cldId, slocId, hoOrgId, orgId, null, curr.getAttribute("EmpDocId"),
                            curr.getAttribute("DocId"), null, null
                        };
                        //Integer val =
                        //Integer.parseInt(ADFModelUtils.callFunctionFrmId(this, 86493, Myobj, NUMBER).toString());
                        Integer val =
                            Integer.parseInt(ADFModelUtils.callFunction(this, sbul, Myobj, NUMBER).toString());

                        /*  Integer val =
                        Integer.parseInt(callStoredFunction(NUMBER, "HCM.FN_HCM_GEN_ARREAR(?,?,?,?,?,?,?,?,?)",
                                                                new Object[]
                        {
                            cldId, slocId, hoOrgId, orgId, null, curr.getAttribute("EmpDocId"), curr.getAttribute("DocId"),
                            null, null
                        }).toString()); */
                    }
                }
                if (incrCriteria.equals("G"))
                {
                    StringBuilder sbul = new StringBuilder("HCM.FN_HCM_GRP_SAL_UPDT(?,?,?,?,?)");
                    Object[] Myobj =
                    {
                        cldId, slocId, hoOrgId, orgId, curr.getAttribute("DocId")
                    };
                    Integer val = Integer.parseInt(ADFModelUtils.callFunction(this, sbul, Myobj, NUMBER).toString());
                    System.out.println("Group Increment has been process" + "return value is  " + val);
                }


            }
            this.getDBTransaction().commit();
        }
    }

    public String ChkFunctionForSingleEmployeeCallOrNot() //getLastSalaryProcessDate
    {
        System.out.println("ChkFunctionForSingleEmployeeCallOrNot");
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();

        java.sql.Date AppliDt = null;
        oracle.jbo.domain.Timestamp lastSalProcDate = null;
        java.sql.Date lastProccessingdate = null;
        oracle.jbo.domain.Timestamp applicabledate = null;
        String empDoc = null;
        Integer userId = EbizParams.GLBL_APP_USR();
        if (this.getHCMIncrement().getCurrentRow().getAttribute("EmpDocId") != null)
            empDoc = this.getHCMIncrement().getCurrentRow().getAttribute("EmpDocId").toString();

        this.getHCMSalProc().setNamedWhereClauseParam("bindCldId", cldId);
        this.getHCMSalProc().setNamedWhereClauseParam("bindSlocId", slocId);
        this.getHCMSalProc().setNamedWhereClauseParam("bindHoOrgId", hoOrgId);
        this.getHCMSalProc().setNamedWhereClauseParam("bindOrgId", orgId);
        this.getHCMSalProc().setNamedWhereClauseParam("bindEmpDocId", empDoc);
        this.getHCMSalProc().executeQuery();
        Row fr[] = this.getHCMSalProc().getAllRowsInRange();
        applicabledate = (Timestamp) this.getHCMIncrement().getCurrentRow().getAttribute("AppliDt");
        if (fr.length > 0)
        {
            lastSalProcDate = (Timestamp) fr[0].getAttribute("MaxDate");
        }
        else
        {
            String message = "Salary has never been processed for this Employee.";
            showFacesMessage(message, "I", false, "F");
            return "N";
        }
        try
        {
            AppliDt = applicabledate.dateValue();
            lastProccessingdate = lastSalProcDate.dateValue();
        }
        catch (SQLException e) {
            System.out.println("Error on Cast");
        }


        if (lastProccessingdate.compareTo(AppliDt) >
            0) //lastsallaryprocessing more than applicable && applicable date less than lastsallaryprocessing
        {
            return "Y";

        }
        else
        {
            String message = "No arrear will be calculated as Applicable Date is after Last Salary Processing Date.";
            showFacesMessage(message, "I", false, "F");
            return "N";
        }


    }

    /**
     * Container's getter for HCMIncrementRef1.
     * @return HCMIncrementRef1
     */
    public ViewObjectImpl getHCMIncrementRef1()
    {
        return (ViewObjectImpl) findViewObject("HCMIncrementRef1");
    }

    /**
     * Container's getter for HCMIncrmntSumm1.
     * @return HCMIncrmntSumm1
     */
    public ViewObjectImpl getHCMIncrmntSumm1()
    {
        return (ViewObjectImpl) findViewObject("HCMIncrmntSumm1");
    }

    public String chkJoiningDate(java.sql.Date incrDt)
    {
        System.out.println("chkJoiningDate");
        oracle.jbo.domain.Timestamp doj = null;
        String empDoc = null;
        if (this.getHCMIncrement().getCurrentRow().getAttribute("EmpDocId") != null)
            empDoc = this.getHCMIncrement().getCurrentRow().getAttribute("EmpDocId").toString();
        java.sql.Date dateOfJoin = null;
        Row[] fr = this.getLovOrgHCMEmpProfVO1().getFilteredRows("DocId", empDoc);
        if (fr.length > 0)
        {
            doj = (Timestamp) fr[0].getAttribute("EmpDoj");
        }
        try
        {
            dateOfJoin = doj.dateValue();
        }
        catch (SQLException e) {
            System.out.println("Error on Cast");
        }

        if (dateOfJoin.compareTo(incrDt) > 0)
        {
            if (dateOfJoin.toString().equals(incrDt.toString()))
            {
            }
            else
            {
                return "N";
            }
        }


        try
        {
            Calendar calforCurrent = Calendar.getInstance();
            calforCurrent.setTime(incrDt);
            int yearforcurrentIncr = calforCurrent.get(Calendar.YEAR);
            int monthforcurrentIncr = calforCurrent.get(Calendar.MONTH);

            Calendar calforPreviouus = Calendar.getInstance();
            calforPreviouus.setTime(dateOfJoin);
            int yearFrDoj = calforPreviouus.get(Calendar.YEAR);
            int monthFrDoj = calforPreviouus.get(Calendar.MONTH);

            if (yearforcurrentIncr == yearFrDoj)
            {
                if (monthforcurrentIncr == monthFrDoj)
                {
                    return "M";
                }
                else
                {

                }
            }
            else
            {

            }
        }
        catch (Exception e) {
            System.out.println("Error on chk");
        }

        return "Y";
    }

    public String chkEmpWrkStatus()
    {
        Integer WrkStat = new Integer(0);
        String rslt = "";
        String empdocid = (String) this.getHCMIncrement().getCurrentRow().getAttribute("EmpDocId");
        Row[] fr = this.getLovOrgHCMEmpProfVO1().getFilteredRows("DocId", empdocid);
        if (fr.length > 0)
        {
            WrkStat = (Integer) fr[0].getAttribute("WrkStat");
            rslt = rslt + WrkStat;
        }
        return rslt;
    }

    public void SetPrevSlryCompInDummyVo(String type)
    {

        if (type.equals("employee"))
        {
            // for clearing dummy salary component vo for single emmployee
            String empdocid = (String) this.getHCMIncrement().getCurrentRow().getAttribute("EmpDocId");
            String grpid = (String) this.getHCMIncrement().getCurrentRow().getAttribute("GrpId");
            this.getDummyPrevSalComponent().setNamedWhereClauseParam("empCodeBindVar", empdocid);
            this.getDummyPrevSalComponent().setNamedWhereClauseParam("grpIdBindVar", grpid);
            this.getDummyPrevSalComponent().executeQuery();
            // for clearing dummy salary component vo for whole group

            this.getDummyGrpSalaryComp().setNamedWhereClauseParam("BIND_GRP_ID", grpid);
            this.getDummyGrpSalaryComp().executeQuery();

            RequestContext.getCurrentInstance().getPageFlowScope().put("GLBL_CHK_MODE", "E");
        }
        if (type.equals("cancel") || type.equals("new"))
        {
            RequestContext.getCurrentInstance().getPageFlowScope().put("GLBL_CHK_MODE", "E");
            //for clearingg employee  previous sal component from dummy table//
            this.getDummyPrevSalComponent().setNamedWhereClauseParam("empCodeBindVar", null);
            this.getDummyPrevSalComponent().setNamedWhereClauseParam("grpIdBindVar", null);
            this.getDummyPrevSalComponent().executeQuery();
            //for clearingg employee  previous sal component from history table//
            this.getDummyPrevSalComponentHist().setNamedWhereClauseParam("empCodeBindVar", null);
            this.getDummyPrevSalComponentHist().setNamedWhereClauseParam("grpIdBindVar", null);
            this.getDummyPrevSalComponentHist().setNamedWhereClauseParam("BindIncrDocId", null);
            this.getDummyPrevSalComponentHist().executeQuery();
            //for clearingg grp previous sal component from dummy table//
            this.getDummyGrpSalaryComp().setNamedWhereClauseParam("BIND_GRP_ID", null);
            this.getDummyGrpSalaryComp().executeQuery();
        }
    }

    public void SetSlryCompInGrpDummyVo(String type)
    {
        if (type.equals("employee"))
        {
            String grpid = (String) this.getHCMIncrement().getCurrentRow().getAttribute("GrpId");
            this.getDummyGrpSalaryComp().setNamedWhereClauseParam("BIND_GRP_ID", grpid);
            this.getDummyGrpSalaryComp().executeQuery();
            RequestContext.getCurrentInstance().getPageFlowScope().put("GLBL_CHK_MODE", "E");
        }
    }

    public String getLastSalaryProcessDate(java.sql.Date incrDt) //chkLastSalryProc
    {
        System.out.println("getLastSalaryProcessDate");
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        ;
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();

        String result = "";
        String empDoc = null;
        Integer userId = EbizParams.GLBL_APP_USR();


        if (this.getHCMIncrement().getCurrentRow().getAttribute("EmpDocId") != null)
            empDoc = this.getHCMIncrement().getCurrentRow().getAttribute("EmpDocId").toString();

        this.getHCMSalProc().setNamedWhereClauseParam("bindCldId", cldId);
        this.getHCMSalProc().setNamedWhereClauseParam("bindSlocId", slocId);
        this.getHCMSalProc().setNamedWhereClauseParam("bindHoOrgId", hoOrgId);
        this.getHCMSalProc().setNamedWhereClauseParam("bindOrgId", orgId);
        this.getHCMSalProc().setNamedWhereClauseParam("bindEmpDocId", empDoc);
        this.getHCMSalProc().executeQuery();
        Row fr[] = this.getHCMSalProc().getAllRowsInRange();
        oracle.jbo.domain.Timestamp lastSalProcDate = null;
        java.sql.Date lastProccessingdate = null;
        if (fr.length > 0)
        {
            lastSalProcDate = (Timestamp) fr[0].getAttribute("MaxDate");
        }
        try
        {
            lastProccessingdate = lastSalProcDate.dateValue();
            result = lastProccessingdate + result;
            String[] d1 = result.split("-");
            result = d1[2] + "-" + d1[1] + "-" + d1[0];
        }
        catch (SQLException e) {
            System.out.println("Error on Cast");
        }
        return result + "";
    }

    public String chkLastSalryProc(java.sql.Date incrDt) //getLastSalaryProcessDate
    {
        System.out.println("chkLastSalryProc");
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        ;
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();

        String empDoc = null;
        Integer userId = EbizParams.GLBL_APP_USR();


        if (this.getHCMIncrement().getCurrentRow().getAttribute("EmpDocId") != null)
            empDoc = this.getHCMIncrement().getCurrentRow().getAttribute("EmpDocId").toString();

        this.getHCMSalProc().setNamedWhereClauseParam("bindCldId", cldId);
        this.getHCMSalProc().setNamedWhereClauseParam("bindSlocId", slocId);
        this.getHCMSalProc().setNamedWhereClauseParam("bindHoOrgId", hoOrgId);
        this.getHCMSalProc().setNamedWhereClauseParam("bindOrgId", orgId);
        this.getHCMSalProc().setNamedWhereClauseParam("bindEmpDocId", empDoc);
        this.getHCMSalProc().executeQuery();
        Row fr[] = this.getHCMSalProc().getAllRowsInRange();
        oracle.jbo.domain.Timestamp lastSalProcDate = null;
        java.sql.Date lastProccessingdate = null;
        if (fr.length > 0)
        {
            lastSalProcDate = (Timestamp) fr[0].getAttribute("MaxDate");
        }
        else
        {
            return "Y";
        }
        try
        {
            lastProccessingdate = lastSalProcDate.dateValue();
        }
        catch (SQLException e) {
            System.out.println("Error on Cast");
        }

        if (lastProccessingdate.compareTo(incrDt) > 0)
        { ///lastsallaryprocessing badii and incrdate choti
            if (lastProccessingdate.toString().equals(incrDt.toString()))
            {
            }
            else
            {
                return "N";
            }
        }
        return "Y";
    }

    public String getJoiningDate()
    {
        System.out.println("getJoiningDate");
        String result = "";
        oracle.jbo.domain.Timestamp doj = null;
        String empDoc = null;
        if (this.getHCMIncrement().getCurrentRow().getAttribute("EmpDocId") != null)
            empDoc = this.getHCMIncrement().getCurrentRow().getAttribute("EmpDocId").toString();
        java.sql.Date dateOfJoin = null;
        Row[] fr = this.getLovOrgHCMEmpProfVO1().getFilteredRows("DocId", empDoc);
        if (fr.length > 0)
        {
            doj = (Timestamp) fr[0].getAttribute("EmpDoj");
        }
        try
        {

            dateOfJoin = doj.dateValue();
            result = dateOfJoin + result;
            String[] d1 = result.split("-");
            result = d1[2] + "-" + d1[1] + "-" + d1[0];
        }
        catch (SQLException e) {
            System.out.println("Error on Cast");
        }

        return result;
    }

    public String getPreviousIncrmntReslt(java.sql.Date incrDt)
    {
        System.out.println("getPreviousIncrmntReslt");
        oracle.jbo.domain.Timestamp doi = null;
        java.sql.Date dateOfpreIncr = null;
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        String empDoc = null;
        if (this.getHCMIncrement().getCurrentRow().getAttribute("EmpDocId") != null)
        {
            empDoc = this.getHCMIncrement().getCurrentRow().getAttribute("EmpDocId").toString();
            RowQualifier rq = new RowQualifier(this.getHCMIncrement1());
            rq.setWhereClause("CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId +
                              "' and OrgId='" + orgId + "'  and EmpDocId='" + empDoc + "'");

            Row fr[] = this.getHCMIncrement1().getFilteredRows(rq);
            for (Row r : fr)
            {
                if (!(r.getAttribute("DocId").toString().equals(this.getHCMIncrement().getCurrentRow().getAttribute("DocId").toString())))
                {
                    try
                    {
                        Calendar calforCurrent = Calendar.getInstance();
                        calforCurrent.setTime(incrDt);
                        int yearforcurrent = calforCurrent.get(Calendar.YEAR);
                        int monthforcurrent = calforCurrent.get(Calendar.MONTH);

                        doi = (Timestamp) r.getAttribute("IncrDt");
                        dateOfpreIncr = doi.dateValue();
                        Calendar calforPreviouus = Calendar.getInstance();
                        calforPreviouus.setTime(dateOfpreIncr);
                        int yearFrPrev = calforPreviouus.get(Calendar.YEAR);
                        int monthFrPrev = calforPreviouus.get(Calendar.MONTH);
                        if (yearforcurrent == yearFrPrev)
                        {
                            if (monthforcurrent == monthFrPrev)
                            {
                                return "N";
                            }
                            else
                            {

                            }
                        }
                        else
                        {

                        }
                    }
                    catch (SQLException e) {
                        System.out.println("Error on Cast");
                    }
                }
                else
                {

                }

            }
        }

        return "Y";
    }

    public String chkLastIncrAppldate(java.sql.Date applDt)
    {
        System.out.println("chkLastIncrAppldate");
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();

        String empDoc = null;
        if (this.getHCMIncrement().getCurrentRow().getAttribute("EmpDocId") != null)
        {
            empDoc = this.getHCMIncrement().getCurrentRow().getAttribute("EmpDocId").toString();
            RowQualifier rq = new RowQualifier(this.getHCMIncrement1());
            rq.setWhereClause("CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId +
                              "' and OrgId='" + orgId + "'  and EmpDocId='" + empDoc + "'");

            Row fr[] = this.getHCMIncrement1().getFilteredRows(rq);
            for (Row r : fr)
            {
                if (!(r.getAttribute("DocId").toString().equals(this.getHCMIncrement().getCurrentRow().getAttribute("DocId").toString())))
                {
                    Timestamp applDate = (Timestamp) r.getAttribute("AppliDt");
                    java.sql.Date newAppldt = null;
                    try
                    {
                        newAppldt = applDate.dateValue();
                        if (newAppldt.toString().equals(applDt.toString()))
                        {
                            return "N";
                        }
                    }
                    catch (SQLException e) {
                        e.printStackTrace();
                    }
                }
            }
        }
        return "Y";
    }

    public String chkLastIncrdateForGrpIncr(java.sql.Date grpincrDt)
    {
        System.out.println("chkLastIncrdateForGrpIncr");
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        String incrCriteria = (String) this.getHCMIncrement().getCurrentRow().getAttribute("IncrCritera");
        String grpId = null;
        if (incrCriteria.equals("G"))
        {
            grpId = this.getHCMIncrement().getCurrentRow().getAttribute("GrpId").toString();
            RowQualifier rq = new RowQualifier(this.getHCMIncrement1());
            rq.setWhereClause("CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId +
                              "' and OrgId='" + orgId + "'  and GrpId='" + grpId + "' and IncrCritera = '" +
                              incrCriteria + "'");

            Row fr[] = this.getHCMIncrement1().getFilteredRows(rq);
            for (Row r : fr)
            {
                if (!(r.getAttribute("DocId").toString().equals(this.getHCMIncrement().getCurrentRow().getAttribute("DocId").toString())))
                {
                    Timestamp grpIncrDate = (Timestamp) r.getAttribute("IncrDt");
                    java.sql.Date newgrpIncrldt = null;
                    try
                    {
                        newgrpIncrldt = grpIncrDate.dateValue();

                        Calendar calforCurrent = Calendar.getInstance();
                        calforCurrent.setTime(grpincrDt);
                        int yearforcurrentIncr = calforCurrent.get(Calendar.YEAR);
                        int monthforcurrentIncr = calforCurrent.get(Calendar.MONTH);

                        Calendar calforPreviouus = Calendar.getInstance();
                        calforPreviouus.setTime(newgrpIncrldt);
                        int yearFrDoj = calforPreviouus.get(Calendar.YEAR);
                        int monthFrDoj = calforPreviouus.get(Calendar.MONTH);

                        if (yearforcurrentIncr == yearFrDoj)
                        {
                            if (monthforcurrentIncr == monthFrDoj)
                            {
                                return "N";
                            }
                            else
                            {

                            }
                        }
                    }


                    catch (SQLException e) {
                        e.printStackTrace();
                    }

                }
            }
        }
        return "Y";
    }




    /**
     * Container's getter for HCMIncrement1.
     * @return HCMIncrement1
     */
    public ViewObjectImpl getHCMIncrement1()
    {
        return (ViewObjectImpl) findViewObject("HCMIncrement1");
    }

    public String getPrevIncrStatus()
    {
        System.out.println("getPrevIncrStatus");
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        String empDoc = null;
        String grpId = null;
        String querry = null;
        String IncrCriteria = (String) this.getHCMIncrement().getCurrentRow().getAttribute("IncrCritera");
        if (IncrCriteria.equals("E"))
        {
            if (this.getHCMIncrement().getCurrentRow().getAttribute("EmpDocId") != null)
            {
                empDoc = this.getHCMIncrement().getCurrentRow().getAttribute("EmpDocId").toString();
                querry =
                    "CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId + "' and OrgId='" +
                    orgId + "'  and EmpDocId='" + empDoc + "' and IncrStat = 45 and IncrCritera = '" + IncrCriteria +
                    "' ";
            }

        }
        else if (IncrCriteria.equals("G"))
        {
            if (this.getHCMIncrement().getCurrentRow().getAttribute("GrpId") != null)
            {
                grpId = this.getHCMIncrement().getCurrentRow().getAttribute("GrpId").toString();
                querry =
                    "CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId + "' and OrgId='" +
                    orgId + "'  and GrpId='" + grpId + "' and IncrStat = 45 and IncrCritera = '" + IncrCriteria + "' ";
            }
        }
        RowQualifier rq = new RowQualifier(this.getHCMIncrement1());
        System.out.println("querry=" + querry);
        rq.setWhereClause(querry);

        Row fr[] = this.getHCMIncrement1().getFilteredRows(rq);
        for (Row r : fr)
        {
            if (!(r.getAttribute("DocId").toString().equals(this.getHCMIncrement().getCurrentRow().getAttribute("DocId").toString())))
            {
                return "N";
            }
            else
            {

            }

        }

        return "Y";
    }

    /**
     * Container's getter for LovOrgHcmSalary1.
     * @return LovOrgHcmSalary1
     */
    public ViewObjectImpl getLovOrgHcmSalary1()
    {
        return (ViewObjectImpl) findViewObject("LovOrgHcmSalary1");
    }

    /**
     * Container's getter for HCMSalProc1.
     * @return HCMSalProc1
     */
    public ViewObjectImpl getHCMSalProc()
    {
        return (ViewObjectImpl) findViewObject("HCMSalProc");
    }

    public void showFacesMessage(String mesg, String sev, Boolean chk, String typFlg)
    {
        FacesMessage message = new FacesMessage(mesg);
        if (chk == true)
        {
            String msg = (String) resolvEl("#{bundle['" + mesg + "']}");
            message = new FacesMessage(msg);
        }
        if (sev.equalsIgnoreCase("E"))
        {
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
        }
        else if (sev.equalsIgnoreCase("W"))
        {
            message.setSeverity(FacesMessage.SEVERITY_WARN);
        }
        else if (sev.equalsIgnoreCase("I"))
        {
            message.setSeverity(FacesMessage.SEVERITY_INFO);
        }
        else
        {
            message.setSeverity(FacesMessage.SEVERITY_INFO);
        }
        if (typFlg.equals("F"))
        {
            FacesContext.getCurrentInstance().addMessage(null, message);
        }
        else if (typFlg.equals("V"))
        {
            throw new ValidatorException(message);
        }
    }


    /**
     * Container's getter for DummyHcmEmpSalRef1.
     * @return DummyHcmEmpSalRef1
     */
    public ViewObjectImpl getDummyHcmEmpSalRef()
    {
        return (ViewObjectImpl) findViewObject("DummyHcmEmpSalRef");
    }

    /**
     * Container's getter for HCMEmpSalRefVL1.
     * @return HCMEmpSalRefVL1
     */
    public ViewLinkImpl getHCMEmpSalRefVL()
    {
        return (ViewLinkImpl) findViewLink("HCMEmpSalRefVL");
    }

    /**
     * Container's getter for DummyPrevSalComponentHist1.
     * @return DummyPrevSalComponentHist1
     */
    public ViewObjectImpl getDummyPrevSalComponentHist()
    {
        return (ViewObjectImpl) findViewObject("DummyPrevSalComponentHist");
    }

    /**
     * Container's getter for DummyHcmEmpSalRefHist1.
     * @return DummyHcmEmpSalRefHist1
     */
    public ViewObjectImpl getDummyHcmEmpSalRefHist()
    {
        return (ViewObjectImpl) findViewObject("DummyHcmEmpSalRefHist");
    }

    /**
     * Container's getter for HcmEmpSalRefHistVL1.
     * @return HcmEmpSalRefHistVL1
     */
    public ViewLinkImpl getHcmEmpSalRefHistVL1()
    {
        return (ViewLinkImpl) findViewLink("HcmEmpSalRefHistVL1");
    }

    /**
     * Container's getter for DummyHcmEmpSalHistFrCheck1.
     * @return DummyHcmEmpSalHistFrCheck1
     */
    public ViewObjectImpl getDummyHcmEmpSalHistFrCheck()
    {
        return (ViewObjectImpl) findViewObject("DummyHcmEmpSalHistFrCheck");
    }

    /**
     * Container's getter for DummyHcmEmpSalRef1.
     * @return DummyHcmEmpSalRef1
     */
    public ViewObjectImpl getDummyHcmEmpSalRef1()
    {
        return (ViewObjectImpl) findViewObject("DummyHcmEmpSalRef1");
    }


    /**
     * Container's getter for DummyGrpSalaryComp1.
     * @return DummyGrpSalaryComp1
     */
    public ViewObjectImpl getDummyGrpSalaryComp()
    {
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String OrgId = EbizParams.GLBL_APP_USR_ORG();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        ViewObjectImpl vo = (ViewObjectImpl) findViewObject("DummyGrpSalaryComp");
        vo.setNamedWhereClauseParam("BIND_CLD_D", cldId);
        vo.setNamedWhereClauseParam("BIND_SLOC_ID", slocId);
        vo.setNamedWhereClauseParam("BIND_HOORG_ID", hoOrgId);
        vo.setNamedWhereClauseParam("BIND_ORG_ID", OrgId);
        return vo;
        //return (ViewObjectImpl) findViewObject("DummyGrpSalaryComp");
    }

    public String copySameIncrementInAll()
    {

        ViewObjectImpl grpAlldummyVo = this.getDummyIncrmntFrGroupCopyToAll();
        String IncrType = (String) grpAlldummyVo.getCurrentRow().getAttribute("transIncrType");
        Object incrAmt = grpAlldummyVo.getCurrentRow().getAttribute("transIncrAmount");
        if (IncrType != null && !IncrType.equals("") && incrAmt != null && !incrAmt.toString().equals(""))
        {
            ViewObjectImpl hcminmntVo = this.getHCMIncrement();
            String DocId = (String) hcminmntVo.getCurrentRow().getAttribute("DocId");
            String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
            String cldId = EbizParams.GLBL_APP_CLD_ID();
            Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
            String orgId = EbizParams.GLBL_APP_USR_ORG();
            ViewObjectImpl hcminmntSummVo = this.getHCMIncrmntSumm();
            RowQualifier rowQualSum = new RowQualifier(hcminmntSummVo);
            String querry =
                ("CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId + "' and OrgId='" + orgId +
                 "' AND DocId='" + DocId + "'");
            rowQualSum.setWhereClause(querry);
            Row rwfrSumm[] = hcminmntSummVo.getFilteredRows(rowQualSum);
            if (rwfrSumm != null && rwfrSumm.length > 0)
            {
                for (Row r : rwfrSumm)
                {
                    r.setAttribute("SalAmt", incrAmt);
                    r.setAttribute("IncrAmt", incrAmt);
                    r.setAttribute("IncrType", IncrType);
                }
                grpAlldummyVo.executeQuery();
                return "Y";

            }
        }
        grpAlldummyVo.executeQuery();
        return "N";
    }

    /**
     * Container's getter for DummyIncrmntFrGroupCopyToAll1.
     * @return DummyIncrmntFrGroupCopyToAll1
     */
    public ViewObjectImpl getDummyIncrmntFrGroupCopyToAll()
    {
        return (ViewObjectImpl) findViewObject("DummyIncrmntFrGroupCopyToAll");
    }

    /**
     * Container's getter for HCMIncrementGrpSum1.
     * @return HCMIncrementGrpSum1
     */
    public ViewObjectImpl getHCMIncrementGrpSum()
    {
        return (ViewObjectImpl) findViewObject("HCMIncrementGrpSum");
    }

    /**
     * Container's getter for HCMGrpCompForDelete1.
     * @return HCMGrpCompForDelete1
     */
    public ViewObjectImpl getHCMGrpCompForDelete()
    {
        return (ViewObjectImpl) findViewObject("HCMGrpCompForDelete");
    }

    /**
     * Container's getter for HcmGrpComponentForAdd1.
     * @return HcmGrpComponentForAdd1
     */
    public ViewObjectImpl getHcmGrpComponentForAdd()
    {
        return (ViewObjectImpl) findViewObject("HcmGrpComponentForAdd");
    }


    /**
     * Container's getter for HcmIncrGrpSummReff1.
     * @return HcmIncrGrpSummReff1
     */
    public ViewObjectImpl getHcmIncrGrpSummReff()
    {
        return (ViewObjectImpl) findViewObject("HcmIncrGrpSummReff");
    }

    /**
     * Container's getter for HCMIncrGrpSummReffVL1.
     * @return HCMIncrGrpSummReffVL1
     */
    public ViewLinkImpl getHCMIncrGrpSummReffVL1()
    {
        return (ViewLinkImpl) findViewLink("HCMIncrGrpSummReffVL1");
    }


    /**
     * Container's getter for HCMIncrementVO1.
     * @return HCMIncrementVO1
     */
    public ViewObjectImpl getHCMIncrementVO1() {
        return (ViewObjectImpl) findViewObject("HCMIncrementVO1");
    }


    /**
     * Container's getter for lovGrpIDEmpNmVO1.
     * @return lovGrpIDEmpNmVO1
     */
    public ViewObjectImpl getlovGrpIDEmpNmVO1() {
        return (ViewObjectImpl) findViewObject("lovGrpIDEmpNmVO1");
    }

    /**
     * Container's getter for LovOrgHCMEmpProfVO1.
     * @return LovOrgHCMEmpProfVO1
     */
    public ViewObjectImpl getLovOrgHCMEmpProfVO1() {
        return (ViewObjectImpl) findViewObject("LovOrgHCMEmpProfVO1");
    }

    /**
     * Container's getter for OrgHcmSalaryFrReffVO1.
     * @return OrgHcmSalaryFrReffVO1
     */
    public ViewObjectImpl getOrgHcmSalaryFrReffVO1() {
        return (ViewObjectImpl) findViewObject("OrgHcmSalaryFrReffVO1");
    }

    /**
     * Container's getter for LovHcmSetupVO1.
     * @return LovHcmSetupVO1
     */
    public ViewObjectImpl getLovHcmSetupVO1() {
        return (ViewObjectImpl) findViewObject("LovHcmSetupVO1");
    }

    /**
     * Container's getter for HcmIncrEmp1.
     * @return HcmIncrEmp1
     */
    public HcmIncrEmpVOImpl getHcmIncrEmpVO1()
    {
        return (HcmIncrEmpVOImpl) findViewObject("HcmIncrEmpVO1");
    }

    /**
     * Container's getter for hcmIncrTOhcmIncrEmpVL1.
     * @return hcmIncrTOhcmIncrEmpVL1
     */
    public ViewLinkImpl gethcmIncrTOhcmIncrEmpVL1()
    {
        return (ViewLinkImpl) findViewLink("hcmIncrTOhcmIncrEmpVL1");
    }
    public String validateEmplId(String Employee) 
    {
           ViewObjectImpl ln = getHcmIncrEmpVO1();
           Row currentRow = ln.getCurrentRow();
               RowSetIterator rsi = ln.createRowSetIterator(null);
               while (rsi.hasNext()) 
               {
                   Row next = rsi.next();
                   if (next != currentRow) 
                   {
                       if (next.getAttribute("TransEmpNm") != null) 
                       {
                           if (next.getAttribute("TransEmpNm").toString().equalsIgnoreCase(Employee)) 
                           {
                               return "Duplicate Employee Name exists";
                           }
                       }
                   }
              }
               return "Y";

    }       
}