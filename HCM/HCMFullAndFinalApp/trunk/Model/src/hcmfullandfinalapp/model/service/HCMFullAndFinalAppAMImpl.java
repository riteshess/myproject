package hcmfullandfinalapp.model.service;

import adf.utils.ebiz.EbizParams;

import adf.utils.model.ADFModelUtils;

import hcmfullandfinalapp.model.service.common.HCMFullAndFinalAppAM;

import java.sql.SQLException;
import java.sql.Types;

import java.text.ParseException;
import java.text.SimpleDateFormat;

import java.util.Date;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import oracle.jbo.Row;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.apache.myfaces.trinidad.context.RequestContext;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Jul 02 14:30:37 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class HCMFullAndFinalAppAMImpl extends ApplicationModuleImpl implements HCMFullAndFinalAppAM {
    /**
     * This is the default constructor (do not remove).
     */
    public HCMFullAndFinalAppAMImpl() {
    }

    /**
     * Container's getter for HcmEmpFnf1.
     * @return HcmEmpFnf1
     */
    public ViewObjectImpl getHcmEmpFnf1() {
        return (ViewObjectImpl) findViewObject("HcmEmpFnf1");
    }

    /** To Set Initial Variables on page load */
    public void setInitialVars() {
        String mode = resolvEl("#{pageFlowScope.GLBL_MODE}").toString();
        String docId = resolvEl("#{pageFlowScope.PARAM_DOC_TXN_ID}").toString();

        this.getHcmEmpFnf1().setNamedWhereClauseParam("BindDocId", null);
        getHcmEmpFnf1().setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        getHcmEmpFnf1().setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        getHcmEmpFnf1().setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        getHcmEmpFnf1().setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        getHcmEmpFnf1().executeQuery();


        this.getHcmEmpFnf1().setNamedWhereClauseParam("BindDocId", docId);


        getHcmEmpFnf1().setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        getHcmEmpFnf1().setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        getHcmEmpFnf1().setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        getHcmEmpFnf1().setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        getHcmEmpFnf1().executeQuery();

        getHcmEmpFnfDtl1().setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        getHcmEmpFnfDtl1().setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        getHcmEmpFnfDtl1().setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        getHcmEmpFnfDtl1().setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        getHcmEmpFnfDtl1().executeQuery();

        getFnFDeductionDetail1().setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        getFnFDeductionDetail1().setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        getFnFDeductionDetail1().setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        getFnFDeductionDetail1().setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        getFnFDeductionDetail1().executeQuery();

        getExitInterveiwQues1().setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        getExitInterveiwQues1().setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        getExitInterveiwQues1().setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        getExitInterveiwQues1().setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        getExitInterveiwQues1().executeQuery();
    }

    /**To Generate DocId*/
    public void insertIntoFNFandgGenrateDocId() {
        StringBuilder sbul = new StringBuilder("APP.get_txn_id(?,?,?,?,?,?)");
        Object[] obj = {
            EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_USR_ORG(),
            EbizParams.GLBL_APP_USR(), 29504, 0
        };
        String doc_id = (String) ADFModelUtils.callFunction(this, sbul, obj, Types.VARCHAR);
        if (doc_id != null) {
            RequestContext.getCurrentInstance().getPageFlowScope().put("PARAM_DOC_TXN_ID", doc_id);
            Row newRow = getHcmEmpFnf1().getCurrentRow();
            newRow.setAttribute("DocId", doc_id);

        }
    }

    public void setDocId() {
        ViewObjectImpl fnf = this.getFnfSearchResult1();
        String docId = (String) fnf.getCurrentRow().getAttribute("DocId");

        RequestContext.getCurrentInstance().getPageFlowScope().put("PARAM_DOC_TXN_ID", docId);
    }

    public void searchFnf() {
        ViewObjectImpl srch = this.getSearchDual1();
        ViewObjectImpl fnf = this.getFnfSearchResult1();
        Row currentRow = srch.getCurrentRow();
        if (currentRow.getAttribute("TransEmpDoc") != null) {
            fnf.setNamedWhereClauseParam("BindEmpDocId", currentRow.getAttribute("TransEmpDoc"));
        } else {
            fnf.setNamedWhereClauseParam("BindEmpDocId", null);
        }

        if (currentRow.getAttribute("TransEmpDeptId") != null) {
            fnf.setNamedWhereClauseParam("BindDeptId", currentRow.getAttribute("TransEmpDeptId"));
        } else {
            fnf.setNamedWhereClauseParam("BindDeptId", null);
        }

        if (currentRow.getAttribute("TransRelFrmDt") != null) {
            fnf.setNamedWhereClauseParam("BindDolFromDt", currentRow.getAttribute("TransRelFrmDt"));
        } else {
            fnf.setNamedWhereClauseParam("BindDolFromDt", null);
        }

        if (currentRow.getAttribute("TransRelvToDt") != null) {
            fnf.setNamedWhereClauseParam("BindDolToDt", currentRow.getAttribute("TransRelvToDt"));
        } else {
            fnf.setNamedWhereClauseParam("BindDolToDt", null);
        }

        if (currentRow.getAttribute("TransEmpGrpId") != null) {
            fnf.setNamedWhereClauseParam("BindGrpId", currentRow.getAttribute("TransEmpGrpId"));
        } else {
            fnf.setNamedWhereClauseParam("BindGrpId", null);
        }

        if (currentRow.getAttribute("TransEmpLocId") != null) {
            fnf.setNamedWhereClauseParam("BindLocId", currentRow.getAttribute("TransEmpLocId"));
        } else {
            fnf.setNamedWhereClauseParam("BindLocId", null);
        }

        fnf.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        fnf.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        fnf.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        fnf.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());

        fnf.executeQuery();
    }

    /** To Reset Search Panel*/
    public void srchReset() {
        ViewObjectImpl fnf = this.getFnfSearchResult1();
        fnf.setNamedWhereClauseParam("BindLocId", null);
        fnf.setNamedWhereClauseParam("BindGrpId", null);
        fnf.setNamedWhereClauseParam("BindDolToDt", null);
        fnf.setNamedWhereClauseParam("BindDolFromDt", null);
        fnf.setNamedWhereClauseParam("BindDeptId", null);
        fnf.setNamedWhereClauseParam("BindEmpDocId", null);
        fnf.setNamedWhereClauseParam("BindCldId", null);
        fnf.setNamedWhereClauseParam("BindHoOrgId", null);
        fnf.setNamedWhereClauseParam("BindOrgId", null);
        fnf.setNamedWhereClauseParam("BindSlocId", null);
        fnf.executeQuery();
        this.getSearchDual1().executeQuery();
    }

    /**To Calculate Relieving Date*/
    public Timestamp calcRelvngDate(Integer days, Date resDt) {

        this.getRelievingDtCalcDual1().setNamedWhereClauseParam("DAYS", days);
        this.getRelievingDtCalcDual1().setNamedWhereClauseParam("RES_DT", resDt);

        this.getRelievingDtCalcDual1().executeQuery();
        Row row = this.getRelievingDtCalcDual1().getRowAtRangeIndex(0);
        Timestamp relvngDate = (Timestamp) row.getAttribute("Newdt");
        return relvngDate;
    }

    /**To Validate Employee for FNF*/
    public String validateEmpForFnF(String docIdEmp) {
        if (docIdEmp != null) {
            getHCMSalProc1().setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
            getHCMSalProc1().setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
            getHCMSalProc1().setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
            getHCMSalProc1().setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
            getHCMSalProc1().executeQuery();

            Row[] filteredRows = getHCMSalProc1().getFilteredRows("EmpDocId", docIdEmp);
            if (filteredRows.length > 0) {
                return "N";
            } else {
                return "Y";
            }
        }
        return "N";
    }


    /**To Process Full and Final Settlement*/
    public String processFnf() {
        this.getDBTransaction().postChanges();
        Row currentRow = this.getHcmEmpFnf1().getCurrentRow();
        String docId = currentRow.getAttribute("DocId").toString();
        String empDoc = currentRow.getAttribute("EmpDocId").toString();
        Object relDt = currentRow.getAttribute("EmpDol");
        Object leaveBal = currentRow.getAttribute("EmpLeaveBal");

        System.out.println("params are--" + docId + "  EmpDoc--" + empDoc + " rele date---" + relDt +
                           " leaveBalance--" + leaveBal);
        StringBuilder fnName = new StringBuilder("HCM.FN_HCM_PROC_FNF(?,?,?,?,?,?,?,?,?)");
        Object[] params = {
            EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_HO_ORG_ID(),
            EbizParams.GLBL_APP_USR_ORG(), empDoc, relDt, leaveBal, docId, EbizParams.GLBL_APP_USR()
        };
        Object rslt = ADFModelUtils.callFunction(this, fnName, params, Types.NUMERIC);
        System.out.println("result at processing fNf--->" + rslt);
        if (rslt != null) {
            /* Integer result = (Integer) rslt;
             if (result.compareTo(new Integer(0)) == 0) {
                System.out.println("result found zero---" + result);
                FacesMessage msg = new FacesMessage("Current Employee is not eligible for Full and Final Settlement!");
                msg.setSeverity(FacesMessage.SEVERITY_WARN);
                FacesContext context = FacesContext.getCurrentInstance();
                context.addMessage(null, msg);
                return "N";
            } */
            this.getHcmEmpFnf1().setNamedWhereClauseParam("BindDocId", docId);
            this.getHcmEmpFnf1().executeQuery();
            ViewObjectImpl dtl1 = getHcmEmpFnfDtl1();
            dtl1.executeQuery();
            getFnFDeductionDetail1().setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
            getFnFDeductionDetail1().setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
            getFnFDeductionDetail1().setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
            getFnFDeductionDetail1().setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
            getFnFDeductionDetail1().executeQuery();
        }
        return null;
    }

    /**TO Check Duplicate Task*/
    public String chkDuplicateTask(String taskId) {
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        Object docId = this.getHcmEmpFnf1().getCurrentRow().getAttribute("DocId");
        System.out.println("doc id = " + docId + "task id =" + taskId);
        RowQualifier rq = new RowQualifier(this.getHcmEmpFnfTask1());
        rq.setWhereClause("DocId='" + docId + "' and " + "ParamId='" + taskId + "' and " + "CldId='" + cldId +
                          "' and " + "SlocId=" + slocId + " and " + "HoOrgId='" + hoOrgId + "' and " + "OrgId='" +
                          EbizParams.GLBL_APP_USR_ORG() + "'");
        System.out.println("Query=" + rq.getExprStr());
        Row fr[] = this.getHcmEmpFnfTask1().getFilteredRows(rq);
        System.out.println("Total no. of same rows=" + fr.length);
        for (Row r : fr) {
            if (!(r.equals(this.getHcmEmpFnfTask1().getCurrentRow())))
                return "Y";
        }
        return "N";
    }

    /**To Check Duplicate Question and Insert in table*/
    public String chkDuplicateQuesAndInsert() {
        ViewObjectImpl v1 = this.getHcmEmpFnfExitQues1();
        ViewObject v2 = this.getHcmEmpFnf1();
        Row curr = v2.getCurrentRow();
        String quesId = this.getExitInterveiwQues1().getCurrentRow().getAttribute("ParamId").toString();
        System.out.println("ques=" + quesId);
        System.out.println("docId in exit --" + curr.getAttribute("DocId"));
        RowQualifier rq = new RowQualifier(v1);
        rq.setWhereClause("CldId='" + EbizParams.GLBL_APP_CLD_ID() + "' and SlocId=" + EbizParams.GLBL_APP_SERV_LOC() +
                          " and OrgId='" + EbizParams.GLBL_APP_USR_ORG() + "' and DocId='" +
                          curr.getAttribute("DocId") + "' and ParamId= '" + quesId + "'");
        Row fr[] = v1.getFilteredRows(rq);
        if (fr.length > 0) {

            FacesMessage message = new FacesMessage(ADFModelUtils.resolvRsrc("MSG.2642"));   // Duplicate question not allowed        //Duplicate Record Exist.
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext fc = FacesContext.getCurrentInstance();
            fc.addMessage(null, message);
            return "N";
        } else {

            Row r = this.getHcmEmpFnfExitQues1().createRow();
            r.setAttribute("CldId", EbizParams.GLBL_APP_CLD_ID());
            r.setAttribute("SlocId", EbizParams.GLBL_APP_SERV_LOC());
            r.setAttribute("OrgId", EbizParams.GLBL_APP_USR_ORG());
            r.setAttribute("DocId", curr.getAttribute("DocId"));
            r.setAttribute("ParamId", quesId);
            r.setAttribute("UsrIdCreate", EbizParams.GLBL_APP_USR());
            System.out.println("Inserting row key=" + r.getKey());
            this.getHcmEmpFnfExitQues1().insertRow(r);
            this.getHcmEmpFnfExitQues1().executeQuery();
            return "Y";
        }
    }

    //------------------------WF Methods--------------------------
    private static int INTEGER = Types.NUMERIC;
    private static int DATE = Types.DATE;
    private static int STRING = Types.VARCHAR;
    private static int NUMBER = Types.NUMERIC;

    public String getWfNo(Integer sloc_id, String cld_id, String org_id, Integer doc_no) {

        System.out.println("Sloc=" + sloc_id + " and cld_id=" + cld_id + "and org_id=" + org_id + " and doc_no=" +
                           doc_no);
        Object obj = ADFModelUtils.callFunction(this, new StringBuilder("APP.WF_GET_ID(?,?,?,?,?)"), new Object[] {
                                                sloc_id, cld_id, org_id, doc_no, 0
        }, Types.VARCHAR);

        /* Object obj = callStoredFunction(Types.VARCHAR, "APP.WF_GET_ID(?,?,?,?,?)", new Object[] {
                                        sloc_id, cld_id, org_id, doc_no, 0
        }); */
        System.out.println("WFNO in AMimpl:" + obj.toString());
        return obj.toString();
    }

    public String getUsrName(Integer usrId) {
        Integer sloc = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        this.getAppSecUsr1().setNamedWhereClauseParam("BindSlocId", sloc);
        getAppSecUsr1().executeQuery();
        Row[] r = this.getAppSecUsr1().getFilteredRows("UsrId", usrId);
        //System.out.println("pending user name is -->" + r[0].getAttribute("UsrName"));
        if (r.length > 0)
            return (String) r[0].getAttribute("UsrName");
        else
            return null;
    }

    public Integer pendingCheck(Integer SlocId, String CldId, String OrgId, Integer DocNo) {
        Row curr = this.getHcmEmpFnf1().getCurrentRow();
        String docIdTxn = curr.getAttribute("DocId").toString();
        System.out.println("DOCIDTXN--" + docIdTxn);
        Object obj = ADFModelUtils.callFunction(this, new StringBuilder("APP.WF_GET_CUR_USR(?,?,?,?,?,?)"), new Object[] {
                                                SlocId, CldId, OrgId, DocNo, docIdTxn, 0
        }, NUMBER);

        /*  Object obj = callStoredFunction(NUMBER, "APP.WF_GET_CUR_USR(?,?,?,?,?,?)", new Object[] {
                                        SlocId, CldId, OrgId, DocNo, docIdTxn, 0
        }); */
        Integer usrId = null;
        if (obj != null) {
            usrId = Integer.parseInt(obj.toString());
        }
        System.out.println("User id pending in impl--" + usrId);
        return usrId;
    }


    public Integer getUsrLvl(Integer SlocId, String CldId, String OrgId, Integer usr_id, String WfNum, String DocNo) {

        return Integer.parseInt(ADFModelUtils.callFunction(this,
                                                           new StringBuilder("APP.WF_GET_USR_LEVEL(?,?,?,?,?,?,?)"), new Object[] {
                                                           SlocId, CldId, OrgId, usr_id, WfNum, DocNo, 0
    }, NUMBER).toString());

        /*      return Integer.parseInt(callStoredFunction(NUMBER, "APP.WF_GET_USR_LEVEL(?,?,?,?,?,?,?)", new Object[] {
                                                   SlocId, CldId, OrgId, usr_id, WfNum, DocNo, 0
    }).toString()); */


    }

    public Integer insIntoTxn(Integer sloc_id, String cld_id, String pOrgId, Integer DOC_NO, String WfNum,
                              Integer usr_idFrm, Integer usr_idTo, Integer levelTo, Integer levelFrm, String action,
                              String remark, Number amount, String post) {
        Row curr = this.getHcmEmpFnf1().getCurrentRow();
        //String docIdTxn = curr.getAttribute("DocId").toString();
        String docIdTxn = resolvEl("#{pageFlowScope.PARAM_DOC_TXN_ID}").toString();
        return Integer.parseInt(ADFModelUtils.callFunction(this,
                                                           new StringBuilder("APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"), new Object[] {
                                                           sloc_id, cld_id, pOrgId, DOC_NO, 0, WfNum, docIdTxn,
                                                           usr_idFrm, usr_idTo, levelFrm, levelTo, action, remark,
                                                           amount, post
    }, NUMBER).toString());

        /*
        return Integer.parseInt(callStoredFunction(NUMBER, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                   sloc_id, cld_id, pOrgId, DOC_NO, 0, WfNum, docIdTxn, usr_idFrm,
                                                   usr_idTo, levelFrm, levelTo, action, remark, amount, post
    }).toString());*/

    }

    public void wfAction(String ret) {
        System.out.println("return from Wf = " + ret);
        if (ret != null) {
            String docIdTxn = resolvEl("#{pageFlowScope.PARAM_DOC_TXN_ID}").toString();
            Row[] filteredRows = this.getHcmEmpFnf1().getFilteredRows("DocId", docIdTxn);
            System.out.println("current row in salProcTxn---" + filteredRows[0]);
            getHcmEmpFnf1().setCurrentRow(filteredRows[0]);
            Row curr = getHcmEmpFnf1().getCurrentRow();
            if (ret.equals("F")) {
                curr.setAttribute("FnfStatus", "P");
            } else if (ret.equals("R")) {
                curr.setAttribute("FnfStatus", "P");
            }
            if (ret.equals("V")) {
                curr.setAttribute("FnfStatus", "P");
            } else if (ret.equals("A")) {
                curr.setAttribute("FnfStatus", "A");
                System.out.println("Approved--");
                String cld = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
                Integer sloc = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
                String org = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
                String hoOrg = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
                String txndoc = curr.getAttribute("DocId").toString();

            }
        }
        this.getDBTransaction().commit();
    }


    /**
     * Container's getter for TotYrWorked1.
     * @return TotYrWorked1
     */
    public ViewObjectImpl getTotYrWorked1() {
        return (ViewObjectImpl) findViewObject("TotYrWorked1");
    }

    /**
     * Container's getter for EncashLeaveBal1.
     * @return EncashLeaveBal1
     */
    public ViewObjectImpl getEncashLeaveBal1() {
        return (ViewObjectImpl) findViewObject("EncashLeaveBal1");
    }

    public Object resolvEl(String data) {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        ELContext elContext = facesContext.getELContext();
        ExpressionFactory expressionFactory = facesContext.getApplication().getExpressionFactory();
        ValueExpression exp = expressionFactory.createValueExpression(elContext, data, Object.class);
        return exp.getValue(elContext);
    }

    /**
     * Container's getter for AppSecUsr1.
     * @return AppSecUsr1
     */
    public ViewObjectImpl getAppSecUsr1() {
        return (ViewObjectImpl) findViewObject("AppSecUsr1");
    }

    /**
     * Container's getter for LovDeptNm1.
     * @return LovDeptNm1
     */
    public ViewObjectImpl getLovDeptNm1() {
        return (ViewObjectImpl) findViewObject("LovDeptNm1");
    }

    /**
     * Container's getter for LovGroupNm1.
     * @return LovGroupNm1
     */
    public ViewObjectImpl getLovGroupNm1() {
        return (ViewObjectImpl) findViewObject("LovGroupNm1");
    }

    /**
     * Container's getter for LovLocations1.
     * @return LovLocations1
     */
    public ViewObjectImpl getLovLocations1() {
        return (ViewObjectImpl) findViewObject("LovLocations1");
    }

    /**
     * Container's getter for LovEmployeeDtl1.
     * @return LovEmployeeDtl1
     */
    public ViewObjectImpl getLovEmployeeDtl1() {
        return (ViewObjectImpl) findViewObject("LovEmployeeDtl1");
    }

    /**
     * Container's getter for SearchDual1.
     * @return SearchDual1
     */
    public ViewObjectImpl getSearchDual1() {
        return (ViewObjectImpl) findViewObject("SearchDual1");
    }

    /**
     * Container's getter for FnfSearchResult1.
     * @return FnfSearchResult1
     */
    public ViewObjectImpl getFnfSearchResult1() {
        return (ViewObjectImpl) findViewObject("FnfSearchResult1");
    }

    /**
     * Container's getter for AllEmpName1.
     * @return AllEmpName1
     */
    public ViewObjectImpl getAllEmpName1() {
        return (ViewObjectImpl) findViewObject("AllEmpName1");
    }

    /**
     * Container's getter for LovSalCompName1.
     * @return LovSalCompName1
     */
    public ViewObjectImpl getLovSalCompName1() {
        return (ViewObjectImpl) findViewObject("LovSalCompName1");
    }

    /**
     * Container's getter for HcmEmpFnfDtl1.
     * @return HcmEmpFnfDtl1
     */
    public ViewObjectImpl getHcmEmpFnfDtl1() {
        return (ViewObjectImpl) findViewObject("HcmEmpFnfDtl1");
    }

    /**
     * Container's getter for FnfToFnfDtlVL1.
     * @return FnfToFnfDtlVL1
     */
    public ViewLinkImpl getFnfToFnfDtlVL1() {
        return (ViewLinkImpl) findViewLink("FnfToFnfDtlVL1");
    }

    /**
     * Container's getter for RelievingDtCalcDual1.
     * @return RelievingDtCalcDual1
     */
    public ViewObjectImpl getRelievingDtCalcDual1() {
        return (ViewObjectImpl) findViewObject("RelievingDtCalcDual1");
    }

    /**
     * Container's getter for FnFDeductionDetail1.
     * @return FnFDeductionDetail1
     */
    public ViewObjectImpl getFnFDeductionDetail1() {
        return (ViewObjectImpl) findViewObject("FnFDeductionDetail1");
    }

    /**
     * Container's getter for EmpFnFTODeductionVL1.
     * @return EmpFnFTODeductionVL1
     */
    public ViewLinkImpl getEmpFnFTODeductionVL1() {
        return (ViewLinkImpl) findViewLink("EmpFnFTODeductionVL1");
    }

    /**
     * Container's getter for HCMSalProc1.
     * @return HCMSalProc1
     */
    public ViewObjectImpl getHCMSalProc1() {
        return (ViewObjectImpl) findViewObject("HCMSalProc1");
    }

    /**
     * Container's getter for HcmEmpFnfTask1.
     * @return HcmEmpFnfTask1
     */
    public ViewObjectImpl getHcmEmpFnfTask1() {
        return (ViewObjectImpl) findViewObject("HcmEmpFnfTask1");
    }

    /**
     * Container's getter for EmpFnfToFnfPendingTaskVL1.
     * @return EmpFnfToFnfPendingTaskVL1
     */
    public ViewLinkImpl getEmpFnfToFnfPendingTaskVL1() {
        return (ViewLinkImpl) findViewLink("EmpFnfToFnfPendingTaskVL1");
    }

    /**
     * Container's getter for HcmProfile1.
     * @return HcmProfile1
     */
    public ViewObjectImpl getHcmProfile1() {
        return (ViewObjectImpl) findViewObject("HcmProfile1");
    }

    /**
     * Container's getter for HcmEmpFnfExitQues1.
     * @return HcmEmpFnfExitQues1
     */
    public ViewObjectImpl getHcmEmpFnfExitQues1() {
        return (ViewObjectImpl) findViewObject("HcmEmpFnfExitQues1");
    }

    /**
     * Container's getter for EmpFnFToFnFExitQuesVL1.
     * @return EmpFnFToFnFExitQuesVL1
     */
    public ViewLinkImpl getEmpFnFToFnFExitQuesVL1() {
        return (ViewLinkImpl) findViewLink("EmpFnFToFnFExitQuesVL1");
    }

    /**
     * Container's getter for ExitInterveiwQues1.
     * @return ExitInterveiwQues1
     */
    public ViewObjectImpl getExitInterveiwQues1() {
        return (ViewObjectImpl) findViewObject("ExitInterveiwQues1");
    }
}

