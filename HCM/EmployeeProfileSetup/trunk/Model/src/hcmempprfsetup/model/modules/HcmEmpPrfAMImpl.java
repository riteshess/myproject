package hcmempprfsetup.model.modules;

import adf.utils.ebiz.EbizParams;
import adf.utils.model.ADFModelUtils;

import appCostCenterSevice.model.service.AppCostCenterServiceAMImpl;

import hcmempprfsetup.model.modules.common.HcmEmpPrfAM;

import hcmempprfsetup.model.views.HcmEmpSalRefVOImpl;

import hcmempprfsetup.model.views.HcmEmpSalVOImpl;

import hcmempprfsetup.model.views.LovEmpNmAutoSuggstVOImpl;
import hcmempprfsetup.model.views.OrgHcmEmpPrfVORowImpl;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import java.io.OutputStream;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.Date;
import java.sql.SQLException;

import java.sql.Types;

import java.text.SimpleDateFormat;

//import java.util.Date;

import java.util.List;

import java.util.ListIterator;

import javax.el.ELContext;
import javax.el.ExpressionFactory;

import javax.el.ValueExpression;

import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import oracle.adf.model.BindingContext;
import oracle.adf.model.binding.DCBindingContainer;
import oracle.adf.model.binding.DCIteratorBinding;

import oracle.binding.OperationBinding;

import oracle.jbo.ApplicationModule;
import oracle.jbo.AttributeDef;
import oracle.jbo.domain.Number;
import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewObject;
import oracle.jbo.client.Configuration;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;


import oracle.jbo.server.ViewObjectImpl;

import oracle.sql.NUMBER;

import org.apache.myfaces.trinidad.context.RequestContext;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Sep 08 12:15:14 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class HcmEmpPrfAMImpl extends ApplicationModuleImpl implements HcmEmpPrfAM
{
    /**
     * This is the default constructor (do not remove).
     */
    public HcmEmpPrfAMImpl()
    {
    }


    Integer DocNo = 28509;
    Integer DocType = 0;
    String eo_nm = null;

    /**
     * Container's getter for LovEmpIdVo.
     * @return LovEmpIdVo
     */
    public ViewObjectImpl getLovEmpIdVo()
    {
        return (ViewObjectImpl) findViewObject("LovEmpIdVo");
    }


    /**
     * Container's getter for DualForSearch1.
     * @return DualForSearch1
     */
    public ViewObjectImpl getDualForSearch()
    {
        return (ViewObjectImpl) findViewObject("DualForSearch");
    }


    public void searchEmployee(String cldId, Integer slocId, String hoOrgId, String empNm, String empId, String orgId)
    {
        this.getOrgHcmEmpPrf().setNamedWhereClauseParam("orgIdBindVar", orgId);
        this.getOrgHcmEmpPrf().setNamedWhereClauseParam("cldIdBindVar", cldId);
        this.getOrgHcmEmpPrf().setNamedWhereClauseParam("slocIdBindVar", slocId);
        this.getOrgHcmEmpPrf().setNamedWhereClauseParam("hoOrgIdBindVar", hoOrgId);
        this.getOrgHcmEmpPrf().setNamedWhereClauseParam("eoNmBindVar", empNm);
        this.getOrgHcmEmpPrf().setNamedWhereClauseParam("empIdBindVar", empId);
        this.getOrgHcmEmpPrf().executeQuery();
    }

    public void applyCriteriaOnPageLoad(String cldId, Integer slocId, String hoOrgId, String orgId)
    {
        String OrgId = (String) resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        Integer UsrId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        String HoOrgId = (String) resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String CldId = (String) resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        this.getOrgHcmEmpPrf().setNamedWhereClauseParam("cldIdBindVar", cldId);
        this.getOrgHcmEmpPrf().setNamedWhereClauseParam("slocIdBindVar", slocId);
        this.getOrgHcmEmpPrf().setNamedWhereClauseParam("hoOrgIdBindVar", hoOrgId);
        this.getOrgHcmEmpPrf().setNamedWhereClauseParam("orgIdBindVar", orgId);
        this.getOrgHcmEmpPrf().executeQuery();
        this.getLovEmpNmAutoSuggst().setNamedWhereClauseParam("cldIdBind", CldId);
        this.getLovEmpNmAutoSuggst().setNamedWhereClauseParam("slocIdBind", SlocId);
        this.getLovEmpNmAutoSuggst().setNamedWhereClauseParam("hoOrgIdBind", HoOrgId);
        this.getLovEmpNmAutoSuggst().setNamedWhereClauseParam("orgIdBind", OrgId);
        this.getLovEmpNmAutoSuggst().executeQuery();
    }


    public Object resolvEl(String data)
    {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        ELContext elContext = facesContext.getELContext();
        ExpressionFactory expressionFactory = facesContext.getApplication().getExpressionFactory();
        ValueExpression exp = expressionFactory.createValueExpression(elContext, data, Object.class);
        return exp.getValue(elContext);
    }

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars)
    {
        CallableStatement st = null;
        try
        {

            // 1. Create a JDBC CallabledStatement
            st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            // 2. Register the first bind variable for the return value
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null)
            {
                // 3. Loop over values for the bind variables passed in, if any
                for (int z = 0; z < bindVars.length; z++)
                {
                    // 4. Set the value of user-supplied bind vars in the stmt
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            // 5. Set the value of user-supplied bind vars in the stmt
            st.executeUpdate();
            // 6. Return the value of the first bind variable
            return st.getObject(1);
        }
        catch (SQLException e) {
            throw new JboException(e);
        }
        finally
        {
            if (st != null)
            {
                try
                {
                    // 7. Close the statement
                    st.close();
                }
                catch (SQLException e) {
                    System.out.println(e);
                }
            }
        }
    }


    private static int STRING = Types.VARCHAR;

    public String pathGetFrmDb()
    {
        return (String) callStoredFunction(STRING, "APP.fn_get_app_img_path()", new Object[]
    { });

    }

    public String imageIdGenerate()
    {
        String img = null;
        if (this.getHcmEmpImg().getCurrentRow() != null)
        {
            if (this.getHcmEmpImg().getCurrentRow().getAttribute("ImgId") != null)
                img = (String) this.getHcmEmpImg().getCurrentRow().getAttribute("ImgId");
        }
        if (img == null)
        {
            String OrgId = (String) resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
            Integer UsrId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
            String HoOrgId = (String) resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
            String CldId = (String) resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
            Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
            img = (String) (callStoredFunction(Types.VARCHAR, "FN_HCM_GET_PRF_ID (?,?,?,?,?,?,?)", new Object[]
            {
                SlocId, CldId, HoOrgId, OrgId, DocNo, DocType, "HCM$EMP$IMG"
            }));
        }
        return img;
    }

    public void imgAttSetter(String fileType, String imgPath, String imgId)
    {
        if (this.getHcmEmpImg().getCurrentRow() != null)
        {
            this.getHcmEmpImg().getCurrentRow().setAttribute("ImgId", imgId);
            this.getHcmEmpImg().getCurrentRow().setAttribute("ImgFileType", fileType);
            this.getHcmEmpImg().getCurrentRow().setAttribute("ImgPath", imgPath);
        }
        else
        {
            String OrgId = (String) resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
            Integer UsrId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
            String HoOrgId = (String) resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
            String CldId = (String) resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
            Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
            Row r = this.getHcmEmpImg().createRow();
            //      String txnId =(String)(callStoredFunction(Types.VARCHAR, "app.get_txn_id (?,?,?,?,?,?)", new Object[] {CldId,SlocId,OrgId,UsrId,new Integer(18511),0}));
            r.setAttribute("CldId", CldId);
            r.setAttribute("SlocId", SlocId);
            r.setAttribute("HoOrgId", HoOrgId);
            r.setAttribute("OrgId", OrgId);
            r.setAttribute("DocId", this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("DocId"));
            r.setAttribute("EmpCode", this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("EmpCode"));
            r.setAttribute("ImgId", imgId);
            r.setAttribute("ImgFileType", fileType);
            r.setAttribute("ImgPath", imgPath);
            r.setAttribute("ImgFileNm", this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("EmpCode"));
            this.getHcmEmpImg().insertRow(r);
        }
    }

    public String calTotalSubDedAmnt()
    {
        ViewObjectImpl empSubSal = this.getHcmEmpSubSal();
        BigDecimal myamnt = BigDecimal.ZERO;
        RowQualifier rq = new RowQualifier(empSubSal);
        String SalId = (String) this.getHcmEmpSal().getCurrentRow().getAttribute("SalId");
        String docId = (String) this.getHcmEmpSal().getCurrentRow().getAttribute("DocId");
        rq.setWhereClause("SalId = '" + SalId + "' and DocId = '" + docId + "'");
        Row[] refRow = empSubSal.getFilteredRows(rq);
        if (refRow.length > 0)
        {
            for (Row r : refRow)
            {
                BigDecimal amnt = new BigDecimal(r.getAttribute("SubSalAmt").toString());
                myamnt = myamnt.add(amnt);
            }
        }
        this.getHcmEmpSal().getCurrentRow().setAttribute("SalAmt", myamnt);
        return "Y";
    }

    public void addEditOfficialDetail()
    {
        String OrgId = (String) resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        Integer UsrId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        String HoOrgId = (String) resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String CldId = (String) resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        Row r = this.getOrgHcmEmpPrf().createRow();
        r.setAttribute("CldId", CldId);
        r.setAttribute("SlocId", SlocId);
        r.setAttribute("HoOrgId", HoOrgId);
        r.setAttribute("OrgId", OrgId);
        String DocId = (String) (callStoredFunction(Types.VARCHAR, "app.get_txn_id (?,?,?,?,?,?)", new Object[]
        {
            CldId, SlocId, OrgId, UsrId, DocNo, DocType
        }));
        r.setAttribute("DocId", DocId);
        this.getOrgHcmEmpPrf().insertRow(r);

    }

    public String chkResignitionDate(Timestamp resgDt)
    {
        getMaxSalProc1().setNamedWhereClauseParam("bindCldId", EbizParams.GLBL_APP_CLD_ID());
        getMaxSalProc1().setNamedWhereClauseParam("bindEmpDocId", EbizParams.GLBL_APP_CLD_ID());
        getMaxSalProc1().setNamedWhereClauseParam("bindHoOrgId", EbizParams.GLBL_APP_CLD_ID());
        getMaxSalProc1().setNamedWhereClauseParam("bindOrgId", EbizParams.GLBL_APP_CLD_ID());
        getMaxSalProc1().setNamedWhereClauseParam("bindSlocId", EbizParams.GLBL_APP_CLD_ID());
        getMaxSalProc1().executeQuery();
        Row[] filteredRows =
            getMaxSalProc1().getFilteredRows("EmpDocId", getOrgHcmEmpPrf().getCurrentRow().getAttribute("DocId"));
        if (filteredRows.length > 0)
        {
            Timestamp maxDt = (Timestamp) filteredRows[0].getAttribute("MaxDate");
            try
            {
                if (resgDt.dateValue().compareTo(maxDt.dateValue()) <= 0)
                {
                    return "Y";
                }
            }
            catch (SQLException e) {
                System.out.println("exception aya ");
            }
        }
        return "N";
    }

    /**
     * Container's getter for LovGrp1.
     * @return LovGrp1
     */
    public ViewObjectImpl getLovGrp()
    {
        return (ViewObjectImpl) findViewObject("LovGrp");
    }

    /**
     * Container's getter for LovBankId1.
     * @return LovBankId1
     */
    public ViewObjectImpl getLovBankId()
    {
        return (ViewObjectImpl) findViewObject("LovBankId");
    }

    /**
     * Container's getter for LovBnkBrnchId1.
     * @return LovBnkBrnchId1
     */
    public ViewObjectImpl getLovBnkBrnchId()
    {
        return (ViewObjectImpl) findViewObject("LovBnkBrnchId");
    }

    public String chkForNullField()
    {
        Row r = this.getOrgHcmEmpPrf().getCurrentRow();
        if (r.getAttribute("EmpNm") != null && r.getAttribute("EmpId") != null && r.getAttribute("EmpDeptId") != null &&
            r.getAttribute("EmpDesgId") != null && r.getAttribute("EmpDob") != null &&
            r.getAttribute("EmpType") != null && r.getAttribute("EmpDoj") != null &&
            r.getAttribute("EmpLocId") != null && r.getAttribute("EmpGen") != null &&
            r.getAttribute("EmpGrpId") != null && r.getAttribute("WrkStat") != null &&
            r.getAttribute("WrkStatDt") != null && r.getAttribute("EmpNotice") != null &&
            r.getAttribute("EmpNm").toString().length() > 0 && r.getAttribute("EmpId").toString().length() > 0)
        {
            if (r.getAttribute("EmpCurrAdd") != null && r.getAttribute("EmpPermAdd") != null &&
                //   r.getAttribute("EmpEmail") != null && r.getAttribute("EmpPhone1") != null &&
                r.getAttribute("EmpCurrAdd").toString().length() > 0 &&
                r.getAttribute("EmpPermAdd").toString().length() > 0 &&
                //   r.getAttribute("EmpEmail").toString().length() > 0 &&
                //   r.getAttribute("EmpPhone1").toString().length() > 0 &&
                r.getAttribute("EmpGuardNm") != null && r.getAttribute("EmpGuardNm").toString().length() > 0)
            {
                if (r.getAttribute("EmpPayMode") != null)
                {
                    if (((Integer) r.getAttribute("EmpPayMode")).compareTo(42) == 0 &&
                        r.getAttribute("EmpBnkId") != null && r.getAttribute("BnkBrnchId") != null &&
                        r.getAttribute("AccType") != null && r.getAttribute("AccNo") != null)
                    {
                    }
                    else if (((Integer) r.getAttribute("EmpPayMode")).compareTo(42) != 0)
                    {
                    }
                    else
                        return "BD";
                }
                else
                    return "BD";
            }
            else
                return "PD";

        }
        else
            return "OD";
        return "OK";
    }


    public void bindVarSetForTimeCal(String cldId, String orgId, String hoOrgId, Integer slocId, String docId,
                                     Integer empCode)
    {
        System.out.println("Values in bind var=" + docId + " " + empCode + " ");
        this.getShiftView().setNamedWhereClauseParam("cldIdBindVar", cldId);
        this.getShiftView().setNamedWhereClauseParam("slocIdBindVar", slocId);
        this.getShiftView().setNamedWhereClauseParam("orgIdBindVar", orgId);
        this.getShiftView().setNamedWhereClauseParam("hoOrgIdBindVar", hoOrgId);
        Row[] r = this.getOrgHcmEmpPrf().getFilteredRows("DocId", docId);
        if (r.length > 0)
        {
            this.getShiftView().setNamedWhereClauseParam("grpIdBindVar", r[0].getAttribute("EmpGrpId"));
        }
        this.getShiftView().executeQuery();
        this.getHcmEmpShiftTmp().executeQuery();
    }

    public void bindVarSetForCtcDetails(String cldId, String orgId, String hoOrgId, Integer slocId, String docId,
                                        Integer empCode)
    {
        System.out.println("Values in bind ctc var=" + docId + " " + empCode + " ");
        this.getHcmEmpCtcVO1().setNamedWhereClauseParam("cldIdBindVar", cldId);
        this.getHcmEmpCtcVO1().setNamedWhereClauseParam("slocIdBindVar", slocId);
        this.getHcmEmpCtcVO1().setNamedWhereClauseParam("orgIdBindVar", orgId);
        this.getHcmEmpCtcVO1().setNamedWhereClauseParam("hoOrgIdBindVar", hoOrgId);
        this.getHcmEmpCtcVO1().setNamedWhereClauseParam("docIdBindVar", docId);

        this.getHcmEmpCtcVO1().setNamedWhereClauseParam("empCodeBindVar", empCode);

        this.getHcmEmpCtcVO1().executeQuery();

    }

    /**
     * Container's getter for ShiftView1.
     * @return ShiftView1
     */
    public ViewObjectImpl getShiftView()
    {
        return (ViewObjectImpl) findViewObject("ShiftView");
    }


    public Integer nextSeqNoGen()
    {
        Row[] row =
            this.getHcmEmpShift().getFilteredRows("DocId", (resolvEl("#{pageFlowScope.emp_doc_id}").toString()));
        int ret = 0;
        int zero = 0;
        for (Row r : row)
        {
            Integer seq = 0;
            if (r.getAttribute("ShiftSeq") != null)
                seq = (Integer) r.getAttribute("ShiftSeq");
            if (seq > ret)
                ret = seq;
        }
        String OrgId = (String) resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String HoOrgId = (String) resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String CldId = (String) resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String empdocId = (String) resolvEl("#{pageFlowScope.emp_doc_id}");
        this.getHcmEmpShift().getCurrentRow().setAttribute("CldId", CldId);
        this.getHcmEmpShift().getCurrentRow().setAttribute("SlocId", SlocId);
        this.getHcmEmpShift().getCurrentRow().setAttribute("HoOrgId", HoOrgId);
        this.getHcmEmpShift().getCurrentRow().setAttribute("OrgId", OrgId);
        this.getHcmEmpShift().getCurrentRow().setAttribute("DocId", empdocId);
        this.getHcmEmpShift().getCurrentRow().setAttribute("ShiftSeq", ret + 1);
        // this.getHcmEmpShift().getCurrentRow().setAttribute("ShiftDays", new Number(30));
        if (ret == zero)
            this.getHcmEmpShift().getCurrentRow().setAttribute("ValidStrtDt",
                                                               new Timestamp(System.currentTimeMillis()));

        return ret + 1;
    }

    public void updateShiftSeq(String act)
    {
        Integer currShift = (Integer) this.getHcmEmpShift().getCurrentRow().getAttribute("ShiftSeq");

        if (act.equals("U"))
        {
            //code for shifting up
            Row[] row = this.getHcmEmpShift().getFilteredRows("ShiftSeq", currShift - 1);
            if (row.length > 0)
            {
                row[0].setAttribute("ShiftSeq", currShift);

                this.getHcmEmpShift().getCurrentRow().setAttribute("ShiftSeq", currShift - 1);
            }

        }
        else if (act.equals("D"))
        {
            //code for down
            Row[] row = this.getHcmEmpShift().getFilteredRows("ShiftSeq", currShift + 1);
            if (row.length > 0)
            {
                row[0].setAttribute("ShiftSeq", currShift);
                this.getHcmEmpShift().getCurrentRow().setAttribute("ShiftSeq", currShift + 1);
            }
        }

        // this.getHcmEmpShift().addOrderByClause("Shift_Seq"); this.getHcmEmpShift().executeQuery();
    }

    public void updtSalAmt()
    {
        System.out.println("Update sal amt");
        String docId = (String) this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("DocId");
        String salId = (String) this.getHcmEmpSal().getCurrentRow().getAttribute("SalId");
        RowQualifier rq = new RowQualifier(this.getHcmEmpSalRef());
        rq.setWhereClause("DocId = '" + docId + "' and SalId = '" + salId + "'");
        Row[] refRow = this.getHcmEmpSalRef().getFilteredRows(rq);
        if (refRow.length > 0)
        {
            BigDecimal sumOfAmt = BigDecimal.ZERO;
            for (Row r : refRow)
            {
                BigDecimal amt = BigDecimal.ZERO;
                BigDecimal perc = BigDecimal.ZERO;

                String refSalId = (String) r.getAttribute("RefSalId");
                perc = new BigDecimal(r.getAttribute("SalPercVal").toString());
                RowQualifier rqsal = new RowQualifier(this.getHcmEmpSal());
                rqsal.setWhereClause("DocId = '" + docId + "' and SalId = '" + refSalId + "'");
                Row[] salRow = this.getHcmEmpSal().getFilteredRows(rqsal);
                if (salRow.length > 0)
                    amt = new BigDecimal(salRow[0].getAttribute("SalAmt").toString());

                sumOfAmt = sumOfAmt.add((amt.multiply(perc)).divide(new BigDecimal(100)));
            }


            this.getHcmEmpSal().getCurrentRow().setAttribute("SalAmt", Math.round(sumOfAmt.doubleValue()));
        }
    }


    public void changeSalaryAmt(Number newAmt)
    {
        System.out.println("New Amt = " + newAmt);
        if (newAmt != null)
        {
            //this.getHcmEmpSal().getCurrentRow().setAttribute("SalVal", Math.round(newAmt.doubleValue()));
            this.getHcmEmpSal().getCurrentRow().setAttribute("SalAmt", Math.round(newAmt.doubleValue()));
        }
        else
        {
            this.getHcmEmpSal().getCurrentRow().setAttribute("SalAmt", new Number(0));
        }
    }

    public void colorSetInTable(String red, String green, String blue)
    {
        String color = red + "," + green + "," + blue;
        this.getHcmEmpShift().getCurrentRow().setAttribute("ShiftClrCd", color);
    }

    public String clrGetFromAtt()
    {
        if (this.getHcmEmpShift().getCurrentRow() != null)
            return (String) this.getHcmEmpShift().getCurrentRow().getAttribute("ShiftClrCd");
        else
            return null;
    }


    public void searchFromPopup()
    {
        String deptId = null;
        String grpId = null;
        String locId = null;
        String desgId = null;
        String empNm = null;
        String empId = null;
        if (this.getDualForSearch().getCurrentRow().getAttribute("TransDeptId") != null)
            deptId = (String) this.getDualForSearch().getCurrentRow().getAttribute("TransDeptId");
        if (this.getDualForSearch().getCurrentRow().getAttribute("TransGrpId") != null)
            grpId = (String) this.getDualForSearch().getCurrentRow().getAttribute("TransGrpId");
        if (this.getDualForSearch().getCurrentRow().getAttribute("TransLocId") != null)
            locId = (String) this.getDualForSearch().getCurrentRow().getAttribute("TransLocId");
        if (this.getDualForSearch().getCurrentRow().getAttribute("TransDesgId") != null)
            desgId = (String) this.getDualForSearch().getCurrentRow().getAttribute("TransDesgId");
        if (this.getDualForSearch().getCurrentRow().getAttribute("TransEmpNm") != null)
            empNm = (String) this.getDualForSearch().getCurrentRow().getAttribute("TransEmpNm");
        if (this.getDualForSearch().getCurrentRow().getAttribute("TransEmpId") != null)
            empId = (String) this.getDualForSearch().getCurrentRow().getAttribute("TransEmpId");
        String OrgId = (String) resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        Integer UsrId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        String HoOrgId = (String) resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String CldId = (String) resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        this.getOrgHcmEmpPrf().setNamedWhereClauseParam("cldIdBindVar", CldId);
        this.getOrgHcmEmpPrf().setNamedWhereClauseParam("slocIdBindVar", SlocId);
        this.getOrgHcmEmpPrf().setNamedWhereClauseParam("hoOrgIdBindVar", HoOrgId);
        this.getOrgHcmEmpPrf().setNamedWhereClauseParam("orgIdBindVar", OrgId);
        this.getOrgHcmEmpPrf().setNamedWhereClauseParam("eoNmBindVar", empNm);
        this.getOrgHcmEmpPrf().setNamedWhereClauseParam("empIdBindVar", empId);
        this.getOrgHcmEmpPrf().setNamedWhereClauseParam("empDeptIdBindVar", deptId);
        this.getOrgHcmEmpPrf().setNamedWhereClauseParam("empDesgIdBindVar", desgId);
        this.getOrgHcmEmpPrf().setNamedWhereClauseParam("empGrpIdBindVar", grpId);
        this.getOrgHcmEmpPrf().setNamedWhereClauseParam("empLocIdBindVar", locId);
        this.getOrgHcmEmpPrf().executeQuery();
    }

    public String chkDupliSalaryId(String salId)
    {
        String OrgId = (String) resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        Integer UsrId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        String HoOrgId = (String) resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String CldId = (String) resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        RowQualifier rq = new RowQualifier(this.getHcmEmpSal());
        rq.setWhereClause("CldId='" + CldId + "' and SlocId=" + SlocId + " and HoOrgId='" + HoOrgId + "' and OrgId='" +
                          OrgId + "' and DocId='" + this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("DocId") +
                          "' and SalId='" + salId + "'");
        System.out.println("Query=" + rq.getExprStr());
        Row fr[] = this.getHcmEmpSal().getFilteredRows(rq);
        System.out.println("Total no. of same rows=" + fr.length);
        for (Row r : fr)
        {
            System.out.println("Row=" + r + " and current row=" + this.getHcmEmpSal().getCurrentRow());
            if (!(r.equals(this.getHcmEmpSal().getCurrentRow())))
                return "Y";
        }
        return "N";
    }


    public String chkDupliLeaveId(String leaveId)
    {
        String OrgId = (String) resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        Integer UsrId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        String HoOrgId = (String) resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String CldId = (String) resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        RowQualifier rq = new RowQualifier(this.getHcmEmpLeave());
        rq.setWhereClause("CldId='" + CldId + "' and SlocId=" + SlocId + " and HoOrgId='" + HoOrgId + "' and OrgId='" +
                          OrgId + "' and DocId='" + this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("DocId") +
                          "' and LeaveId='" + leaveId + "'");
        System.out.println("Query=" + rq.getExprStr());
        Row fr[] = this.getHcmEmpLeave().getFilteredRows(rq);
        System.out.println("Total no. of same rows=" + fr.length);
        for (Row r : fr)
        {
            System.out.println("Row=" + r + " and current row=" + this.getHcmEmpLeave().getCurrentRow());
            if (!(r.equals(this.getHcmEmpLeave().getCurrentRow())))
                return "Y";
        }
        return "N";
    }

    public String chkDupliRefSalaryId(String refSalId)
    {
        String OrgId = (String) resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        Integer UsrId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        String HoOrgId = (String) resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String CldId = (String) resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        RowQualifier rq = new RowQualifier(this.getHcmEmpSalRef());
        rq.setWhereClause("CldId='" + CldId + "' and SlocId=" + SlocId + " and HoOrgId='" + HoOrgId + "' and OrgId='" +
                          OrgId + "' and DocId='" + this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("DocId") +
                          "' and SalId='" + this.getHcmEmpSal().getCurrentRow().getAttribute("SalId") +
                          "' and RefSalId='" + refSalId + "'");
        System.out.println("Query=" + rq.getExprStr());
        Row fr[] = this.getHcmEmpSalRef().getFilteredRows(rq);
        System.out.println("Total no. of same rows=" + fr.length);
        for (Row r : fr)
        {
            System.out.println("Row=" + r + " and current row=" + this.getHcmEmpSalRef().getCurrentRow());
            if (!(r.equals(this.getHcmEmpSalRef().getCurrentRow())))
                return "Y";
        }
        return "N";
    }


    public void callFuncForCalendar(Boolean flg)
    {
        String cldId = (String) this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("CldId");
        Integer slocId = Integer.parseInt(this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("SlocId").toString());
        String orgId = (String) this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("OrgId");
        String hoOrgId = (String) this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("HoOrgId");
        String docId = (String) this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("DocId");
        Timestamp strtDt = (Timestamp) this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("TransStrtDtShiftDisp");
        Timestamp endDt = (Timestamp) this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("TransEndDtShiftDisp");
        if (flg != null && flg.equals(true))
        {
            this.getDBTransaction().postChanges();
        }
        System.out.println("Values are =" + cldId + " " + slocId + " " + orgId + " " + hoOrgId + " " + docId + " " +
                           strtDt + " " + endDt);
        Object ret = callStoredFunction(Types.NUMERIC, "FN_INS_HCM_EMP_SHIFT_TMP (?,?,?,?,?,?,?)", new Object[]
        {
            cldId, slocId, hoOrgId, orgId, docId, strtDt, endDt
        });
        System.out.println("function returns=" + ret);
        /* this.getHcmEmpShiftTmp().setNamedWhereClauseParam("bindOrgId", orgId);
            this.getHcmEmpShiftTmp().setNamedWhereClauseParam("bindDocId", docId);*/
        this.getHcmEmpShiftTmp().executeQuery();

    }

    public String chkDupliEmpId(String empId)
    {
        if (empId != null && empId != "")
            empId = empId.trim();
        String OrgId = (String) resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        Integer UsrId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        String HoOrgId = (String) resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String CldId = (String) resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        getOrgHcmEmpPrf1().setNamedWhereClauseParam("cldIdBindVar", CldId);
        getOrgHcmEmpPrf1().setNamedWhereClauseParam("hoOrgIdBindVar", HoOrgId);
        getOrgHcmEmpPrf1().setNamedWhereClauseParam("orgIdBindVar", OrgId);
        getOrgHcmEmpPrf1().setNamedWhereClauseParam("slocIdBindVar", SlocId);
        getOrgHcmEmpPrf1().executeQuery();

        System.out.println("before filter row in empid validator--->" + getOrgHcmEmpPrf1().getRowCount());
        RowQualifier rq = new RowQualifier(this.getOrgHcmEmpPrf1());

        rq.setWhereClause("CldId='" + CldId + "' and SlocId=" + SlocId + " and HoOrgId='" + HoOrgId + "' and EmpId='" +
                          empId + "'  and ActvFlg='Y'");
        System.out.println("Query=" + rq.getExprStr());
        Row fr[] = this.getOrgHcmEmpPrf1().getFilteredRows(rq);
        System.out.println("Total no. of same rows=" + fr.length);
        for (Row r : fr)
        {
            System.out.println("Row=" + r + " and current row=" + this.getOrgHcmEmpPrf().getCurrentRow());
            if (!((r.getAttribute("DocId").toString()).equals(this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("DocId").toString())))
                return "Y";
        }
        return "N";
    }

    public String chkDupliMailId(String mailId)
    {
        String OrgId = (String) resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        Integer UsrId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        String HoOrgId = (String) resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String CldId = (String) resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        RowQualifier rq = new RowQualifier(this.getOrgHcmEmpPrf1());
        rq.setWhereClause("CldId='" + CldId + "' and SlocId=" + SlocId + " and HoOrgId='" + HoOrgId + "' and OrgId='" +
                          OrgId + "'  and EmpEmail='" + mailId + "' and ActvFlg='Y'");
        System.out.println("Query=" + rq.getExprStr());
        Row fr[] = this.getOrgHcmEmpPrf1().getFilteredRows(rq);
        // System.out.println("Total no. of same rows="+fr.length);
        for (Row r : fr)
        {
            //     System.out.println("Row="+r+" and current row="+this.getOrgHcmEmpPrf().getCurrentRow());
            if (!((r.getAttribute("DocId").toString()).equals(this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("DocId").toString())))
                return "Y";
        }
        return "N";
    }


    public String chkDupliAccNo(String accNo)
    {

        String OrgId = (String) resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        Integer UsrId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        String HoOrgId = (String) resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String CldId = (String) resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        RowQualifier rq = new RowQualifier(this.getOrgHcmEmpPrf1());
        rq.setWhereClause("CldId='" + CldId + "' and SlocId=" + SlocId + " and HoOrgId='" + HoOrgId + "' and OrgId='" +
                          OrgId + "'  and AccNo='" + accNo + "' and ActvFlg='Y'");
        System.out.println("Query=" + rq.getExprStr());
        Row fr[] = this.getOrgHcmEmpPrf1().getFilteredRows(rq);
        // System.out.println("Total no. of same rows="+fr.length);
        for (Row r : fr)
        {
            //    System.out.println("Row="+r+" and current row="+this.getOrgHcmEmpPrf().getCurrentRow());
            if (!((r.getAttribute("DocId").toString()).equals(this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("DocId").toString())))
                return "Y";
        }
        return "N";
    }


    public String chkDupliEmpCard(String empCardNo)
    {
        String OrgId = (String) resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        Integer UsrId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        String HoOrgId = (String) resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String CldId = (String) resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        RowQualifier rq = new RowQualifier(this.getOrgHcmEmpPrf1());
        rq.setWhereClause("CldId='" + CldId + "' and SlocId=" + SlocId + " and HoOrgId='" + HoOrgId + "' and OrgId='" +
                          OrgId + "'  and EmpCardNo='" + empCardNo + "' and ActvFlg='Y'");
        System.out.println("Query=" + rq.getExprStr());
        Row fr[] = this.getOrgHcmEmpPrf1().getFilteredRows(rq);
        // System.out.println("Total no. of same rows="+fr.length);
        for (Row r : fr)
        {
            //  System.out.println("Row="+r+" and current row="+this.getOrgHcmEmpPrf().getCurrentRow());
            if (!((r.getAttribute("DocId").toString()).equals(this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("DocId").toString())))
                return "Y";
        }
        return "N";
    }

    public String chkDupliPanNo(String empPanNo)
    {
        String OrgId = (String) resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        Integer UsrId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        String HoOrgId = (String) resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String CldId = (String) resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        RowQualifier rq = new RowQualifier(this.getOrgHcmEmpPrf1());
        rq.setWhereClause("CldId='" + CldId + "' and SlocId=" + SlocId + " and HoOrgId='" + HoOrgId + "' and OrgId='" +
                          OrgId + "'  and EmpPanNo='" + empPanNo + "' and ActvFlg='Y'");
        System.out.println("Query=" + rq.getExprStr());
        Row fr[] = this.getOrgHcmEmpPrf1().getFilteredRows(rq);
        //  System.out.println("Total no. of same rows="+fr.length);
        for (Row r : fr)
        {
            // System.out.println("Row="+r+" and current row="+this.getOrgHcmEmpPrf().getCurrentRow());
            if (!((r.getAttribute("DocId").toString()).equals(this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("DocId").toString())))
                return "Y";
        }
        return "N";
    }

    public void genCalendarForCurrMonth(Boolean flg)
    {
        if (this.getOrgHcmEmpPrf().getCurrentRow() != null)
        {
            String cldId = (String) this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("CldId");
            Integer slocId = Integer.parseInt(this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("SlocId").toString());
            String orgId = (String) this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("OrgId");
            String hoOrgId = (String) this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("HoOrgId");
            String docId = (String) this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("DocId");
            Timestamp strtDt = (Timestamp) this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("TransStrtDtTimeCal");
            Timestamp endDt = (Timestamp) this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("TransEndDtTimeCal");
            String valid = "Y";
            java.sql.Date monthStDt = null;
            java.sql.Date calStDt = null;
            java.sql.Date monthEndDt = null;
            try
            {
                if (strtDt.dateValue() != null)
                {
                    //get shift start date
                    monthStDt = strtDt.dateValue();
                    calStDt = null;
                    monthEndDt = endDt.dateValue();
                    System.out.println("No. of Rows=" + this.getHcmEmpShift1().getEstimatedRowCount());

                    if (this.getHcmEmpShift1().getEstimatedRowCount() > 0)
                    {
                        String OrgId = (String) resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
                        String HoOrgId = (String) resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
                        String CldId = (String) resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
                        Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
                        String empdocId = (String) resolvEl("#{pageFlowScope.emp_doc_id}");
                        RowQualifier rq = new RowQualifier(this.getHcmEmpShift1());
                        rq.setWhereClause("CldId='" + CldId + "' and SlocId =" + SlocId + " and HoOrgId='" + HoOrgId +
                                          "' and OrgId='" + OrgId + "' and DocId='" +
                                          this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("DocId") +
                                          "' and ShiftSeq= 1");
                        Row[] fr = this.getHcmEmpShift1().getFilteredRows(rq);
                        System.out.println("filtered rows=" + fr.length);
                        if (fr.length > 0)
                        {
                            System.out.println("Applicable Dt in shift=" + fr[0].getAttribute("ValidStrtDt"));

                            java.sql.Date strtDtshift = null;
                            try
                            {
                                strtDtshift = ((Timestamp) fr[0].getAttribute("ValidStrtDt")).dateValue();
                            }
                            catch (SQLException e) {
                                System.out.println("Error in cast date");
                            }
                            if (strtDtshift.compareTo(monthStDt) > 0)
                            {
                                if (strtDtshift.toString().equals(monthStDt.toString()))
                                {
                                    calStDt = monthStDt;
                                }
                                else
                                {

                                    if (strtDtshift.compareTo(monthEndDt) > 0)
                                    {
                                        if (strtDtshift.toString().equals(monthEndDt.toString()))
                                        {
                                            calStDt = monthEndDt;
                                        }
                                        else
                                        {
                                            calStDt = null;
                                        }
                                    }
                                    else
                                    {
                                        calStDt = strtDtshift;
                                    }
                                }
                            }
                            else
                            {
                                calStDt = monthStDt;
                            }
                        }
                    }

                    //
                }
            }
            catch (SQLException e) {
                System.out.println("Error raised");
            }


            /* try {
                if (strtDt.dateValue() != null)
                    valid = chkPrevStDtValid(strtDt.dateValue());
            } catch (SQLException e) {
                System.out.println("Error raised");
            } */
            if (calStDt != null)
            {
                if (flg != null && flg.equals(true))
                {
                    this.getDBTransaction().postChanges();
                }
                Timestamp t = new Timestamp(calStDt);
                System.out.println("T is: " + t);
                System.out.println("Values are cld=" + cldId + " sloc=" + slocId + " org=" + orgId + " hoorg=" +
                                   hoOrgId + " docid=" + docId + " strtdt=" + calStDt + " enddt=" + endDt);
                Object ret = callStoredFunction(Types.NUMERIC, "FN_INS_HCM_EMP_SHIFT_TMP (?,?,?,?,?,?,?)", new Object[]
                {
                    cldId, slocId, hoOrgId, orgId, docId, t, endDt
                });
                System.out.println("Return value =" + ret);
                /*this.getHcmEmpShiftTmp().setNamedWhereClauseParam("bindOrgId", orgId);
                this.getHcmEmpShiftTmp().setNamedWhereClauseParam("bindDocId", docId);*/
                this.getHcmEmpShiftTmp().executeQuery();
            }
            else
            {
                System.out.println("No shift is Define for current month.");
            }
        }
    }


    /**
     * Container's getter for OrgHcmEmpPrf1.
     * @return OrgHcmEmpPrf1
     */
    public ViewObjectImpl getOrgHcmEmpPrf1()
    {
        return (ViewObjectImpl) findViewObject("OrgHcmEmpPrf1");
    }

    //code to delete reference salary component and sal component
    public String deleteSalComp()
    {
        if (this.getHcmEmpSal().getCurrentRow() != null &&
            this.getHcmEmpSal().getCurrentRow().getAttribute("SalId") != null)
        {

            //Check if Sal Comp has references on others or not, If Reference exist then can not delete.
            RowQualifier rqSal = new RowQualifier(this.getHcmEmpSalRef1());
            rqSal.setWhereClause("   CldId='" + this.getHcmEmpSal().getCurrentRow().getAttribute("CldId") +
                                 "' and OrgId='" + this.getHcmEmpSal().getCurrentRow().getAttribute("OrgId") +
                                 "' and SlocId=" + this.getHcmEmpSal().getCurrentRow().getAttribute("SlocId") +
                                 " and HoOrgId='" + this.getHcmEmpSal().getCurrentRow().getAttribute("HoOrgId") +
                                 "' and DocId='" + this.getHcmEmpSal().getCurrentRow().getAttribute("DocId") +
                                 "' and RefSalId='" + this.getHcmEmpSal().getCurrentRow().getAttribute("SalId") + "'");
            Row frSal[] = this.getHcmEmpSalRef1().getFilteredRows(rqSal);
            if (frSal.length > 0)
                return "N";

            //check if this Sal Type is percent then delete all of its rows from SalRef Table
            if (this.getHcmEmpSal().getCurrentRow().getAttribute("SalType") != null &&
                this.getHcmEmpSal().getCurrentRow().getAttribute("SalType").toString().equals("P"))
            {
                RowQualifier rqSalRef = new RowQualifier(this.getHcmEmpSalRef());
                rqSalRef.setWhereClause("   CldId='" + this.getHcmEmpSal().getCurrentRow().getAttribute("CldId") +
                                        "' and OrgId='" + this.getHcmEmpSal().getCurrentRow().getAttribute("OrgId") +
                                        "' and SlocId=" + this.getHcmEmpSal().getCurrentRow().getAttribute("SlocId") +
                                        " and HoOrgId='" + this.getHcmEmpSal().getCurrentRow().getAttribute("HoOrgId") +
                                        "' and DocId='" + this.getHcmEmpSal().getCurrentRow().getAttribute("DocId") +
                                        "' and SalId='" + this.getHcmEmpSal().getCurrentRow().getAttribute("SalId") +
                                        "'");
                Row fr[] = this.getHcmEmpSalRef().getFilteredRows(rqSalRef);
                for (Row r : fr)
                    r.remove();
            }

        }
        return "Y";
    }


    /**
     * Container's getter for HcmEmpSalRef1.
     * @return HcmEmpSalRef1
     */
    public HcmEmpSalRefVOImpl getHcmEmpSalRef1()
    {
        return (HcmEmpSalRefVOImpl) findViewObject("HcmEmpSalRef1");
    }

    /**
     * Container's getter for OrgHcmEmpPrf2.
     * @return OrgHcmEmpPrf2
     */
    public ViewObjectImpl getOrgHcmEmpPrf()
    {
        return (ViewObjectImpl) findViewObject("OrgHcmEmpPrf");
    }

    /**
     * Container's getter for EmployeeDeduction1.
     * @return EmployeeDeduction1
     */
    public ViewObjectImpl getEmployeeDeduction()
    {
        return (ViewObjectImpl) findViewObject("EmployeeDeduction");
    }

    /**
     * Container's getter for EmpPrfToEmpDedVL2.
     * @return EmpPrfToEmpDedVL2
     */
    public ViewLinkImpl getEmpPrfToEmpDedVL1()
    {
        return (ViewLinkImpl) findViewLink("EmpPrfToEmpDedVL1");
    }

    /**
     * Container's getter for HcmEmpCalOff1.
     * @return HcmEmpCalOff1
     */
    public ViewObjectImpl getHcmEmpCalOff()
    {
        return (ViewObjectImpl) findViewObject("HcmEmpCalOff");
    }

    /**
     * Container's getter for EmpPrfToCalOffVL2.
     * @return EmpPrfToCalOffVL2
     */
    public ViewLinkImpl getEmpPrfToCalOffVL1()
    {
        return (ViewLinkImpl) findViewLink("EmpPrfToCalOffVL1");
    }

    /**
     * Container's getter for HcmEmpImg1.
     * @return HcmEmpImg1
     */
    public ViewObjectImpl getHcmEmpImg()
    {
        return (ViewObjectImpl) findViewObject("HcmEmpImg");
    }

    /**
     * Container's getter for EmpPrfToImgVL2.
     * @return EmpPrfToImgVL2
     */
    public ViewLinkImpl getEmpPrfToImgVL1()
    {
        return (ViewLinkImpl) findViewLink("EmpPrfToImgVL1");
    }

    /**
     * Container's getter for HcmEmpLeave1.
     * @return HcmEmpLeave1
     */
    public ViewObjectImpl getHcmEmpLeave()
    {
        return (ViewObjectImpl) findViewObject("HcmEmpLeave");
    }

    /**
     * Container's getter for EmpPrfToEmpLeaveVL2.
     * @return EmpPrfToEmpLeaveVL2
     */
    public ViewLinkImpl getEmpPrfToEmpLeaveVL1()
    {
        return (ViewLinkImpl) findViewLink("EmpPrfToEmpLeaveVL1");
    }

    /**
     * Container's getter for HcmEmpSal1.
     * @return HcmEmpSal1
     */
    public HcmEmpSalVOImpl getHcmEmpSal()
    {
        return (HcmEmpSalVOImpl) findViewObject("HcmEmpSal");
    }

    /**
     * Container's getter for EmpPrfToEmpSalVL2.
     * @return EmpPrfToEmpSalVL2
     */
    public ViewLinkImpl getEmpPrfToEmpSalVL1()
    {
        return (ViewLinkImpl) findViewLink("EmpPrfToEmpSalVL1");
    }

    /**
     * Container's getter for HcmEmpShiftTmp1.
     * @return HcmEmpShiftTmp1
     */
    public ViewObjectImpl getHcmEmpShiftTmp()
    {
        return (ViewObjectImpl) findViewObject("HcmEmpShiftTmp");
    }

    /**
     * Container's getter for EmpPrfToShiftTmpVL2.
     * @return EmpPrfToShiftTmpVL2
     */
    public ViewLinkImpl getEmpPrfToShiftTmpVL1()
    {
        return (ViewLinkImpl) findViewLink("EmpPrfToShiftTmpVL1");
    }

    /**
     * Container's getter for HcmEmpShift1.
     * @return HcmEmpShift1
     */
    public ViewObjectImpl getHcmEmpShift()
    {
        return (ViewObjectImpl) findViewObject("HcmEmpShift");
    }

    /**
     * Container's getter for EmpPrfToShiftVL2.
     * @return EmpPrfToShiftVL2
     */
    public ViewLinkImpl getEmpPrfToShiftVL1()
    {
        return (ViewLinkImpl) findViewLink("EmpPrfToShiftVL1");
    }

    /**
     * Container's getter for HcmEmpSalRef2.
     * @return HcmEmpSalRef2
     */
    public HcmEmpSalRefVOImpl getHcmEmpSalRef()
    {
        return (HcmEmpSalRefVOImpl) findViewObject("HcmEmpSalRef");
    }

    /**
     * Container's getter for EmpSalToSalRefVL2.
     * @return EmpSalToSalRefVL2
     */
    public ViewLinkImpl getEmpSalToSalRefVL1()
    {
        return (ViewLinkImpl) findViewLink("EmpSalToSalRefVL1");
    }

    public String chkNoOfPositions(String desgId)
    {
        this.getLovDesgId().setNamedWhereClauseParam("cldIdBindVar",
                                                     this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("CldId"));
        this.getLovDesgId().setNamedWhereClauseParam("deptIdBindVar",
                                                     this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("EmpDeptId"));
        this.getLovDesgId().setNamedWhereClauseParam("hoOrgIdBindVar",
                                                     this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("HoOrgId"));
        this.getLovDesgId().setNamedWhereClauseParam("orgIdBindVar",
                                                     this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("OrgId"));
        this.getLovDesgId().setNamedWhereClauseParam("slocIdBindVar",
                                                     this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("SlocId"));
        this.getLovDesgId().executeQuery();
        Row[] fr = this.getLovDesgId().getFilteredRows("DesgId", desgId);
        Integer pos = new Integer(0);
        if (fr.length > 0 && fr[0].getAttribute("NoPosn") != null)
            pos = (Integer) fr[0].getAttribute("NoPosn");
        System.out.println("Total No. of positions in Desg=" + pos);
        RowQualifier rq = new RowQualifier(this.getOrgHcmEmpPrf1());
        String querry =
            "CldId='" + this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("CldId") + "' and HoOrgId='" +
            this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("HoOrgId") + "' and OrgId='" +
            this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("OrgId") + "' and EmpDeptId='" +
            this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("EmpDeptId") + "' and EmpDesgId='" + desgId +
            "' and SlocId =" + this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("SlocId") + " and WrkStat != 31";
        System.out.println("Query for chkNo Of Pos=" + querry);
        rq.setWhereClause(querry);
        Row[] totRow = this.getOrgHcmEmpPrf1().getFilteredRows(rq);


        System.out.println("Total Employee Added on this Position=" + totRow.length);
        Integer existPos = new Integer(0);
        for (Row row : totRow)
        {
            if (row.getAttribute("DocId").toString().equals(this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("DocId").toString()))
            {
            }
            else
            {
                existPos = existPos + 1;
            }
        }
        if (existPos <= pos - 1)
            return "Y";
        return "N";
    }


    public String chkIsDesigLinkWithGradeInOrg(String desgId)
    {

        ViewObjectImpl chkFroGrdDesigLinkingVo = this.getLovChkFroGrdDesigLinking1();
        String cld_id = EbizParams.GLBL_APP_CLD_ID();
        Integer sloc_id = EbizParams.GLBL_APP_SERV_LOC();
        String ho_org_id = EbizParams.GLBL_HO_ORG_ID();
        String org_id = EbizParams.GLBL_APP_USR_ORG();
        chkFroGrdDesigLinkingVo.setNamedWhereClauseParam("BIND_CLD_ID", cld_id);
        chkFroGrdDesigLinkingVo.setNamedWhereClauseParam("BIND_SLOC_ID", sloc_id);
        chkFroGrdDesigLinkingVo.setNamedWhereClauseParam("BIND_HO_ORG_ID", ho_org_id);
        chkFroGrdDesigLinkingVo.setNamedWhereClauseParam("BIND_ORG_ID", org_id);
        chkFroGrdDesigLinkingVo.setNamedWhereClauseParam("BIND_DESG_ID", desgId);
        chkFroGrdDesigLinkingVo.executeQuery();

        Row[] r = chkFroGrdDesigLinkingVo.getFilteredRows("DesgId", desgId);
        if (r.length > 0)
        {
            if (r[0].getAttribute("GrdId") != null && r[0].getAttribute("GrdId") != "")
            {
                String grd_id = (String) r[0].getAttribute("GrdId");
                this.getOrgHcmEmpPrf().getCurrentRow().setAttribute("GrdId", grd_id);
                return "Y";
            }
        }


        return "N";
    }

    public String setEmployeeGrade(String desgId)
    {

        String result = insertGrdStructData(desgId);


        return "N";
    }

    public String setEmpNoticePrdNDProbPrd(String empType)
    {

        String cld_id = EbizParams.GLBL_APP_CLD_ID();
        Integer sloc_id = EbizParams.GLBL_APP_SERV_LOC();
        String org_id = EbizParams.GLBL_APP_USR_ORG();
        RowQualifier rqhcmprf = new RowQualifier(this.getOrgHcmPrf());
        rqhcmprf.setWhereClause("CldId='" + cld_id + "' and SlocId=" + sloc_id + " and OrgId='" + org_id +
                                "' and FreezePrf='Y'");
        Row[] frhcmprf = this.getOrgHcmPrf().getFilteredRows(rqhcmprf);
        if (frhcmprf.length > 0)
        {
            String NoticePeriodChk = (String) frhcmprf[0].getAttribute("NoticePeriodChk");
            if (NoticePeriodChk.equals("Y"))
            {
                RowQualifier rqEmpNtcDtl = new RowQualifier(this.getOrgHcmEmpNoticePrdDtl1());
                rqEmpNtcDtl.setWhereClause("CldId='" + cld_id + "' and SlocId=" + sloc_id + " and OrgId='" + org_id +
                                           "' and EmpType=" + empType + "");
                Row[] frhcmEmpNtcDtl = this.getOrgHcmEmpNoticePrdDtl1().getFilteredRows(rqEmpNtcDtl);
                if (frhcmEmpNtcDtl.length > 0)
                {
                    Integer empNotice = (Integer) frhcmEmpNtcDtl[0].getAttribute("EmpNotice");
                    Integer empProb = (Integer) frhcmEmpNtcDtl[0].getAttribute("EmpProb");

                    System.out.println("employee nnotice prd=" + empNotice + "employee prob period=" + empProb);

                    this.getOrgHcmEmpPrf().getCurrentRow().setAttribute("EmpProbation", empProb);
                    this.getOrgHcmEmpPrf().getCurrentRow().setAttribute("EmpNotice", empNotice);
                    return "Y";
                }
            }

        }


        return "N";
    }

    public String insertGrdStructData(String desig_Id)
    {
        String cld_id = EbizParams.GLBL_APP_CLD_ID();
        Integer sloc_id = EbizParams.GLBL_APP_SERV_LOC();
        String ho_org_id = EbizParams.GLBL_HO_ORG_ID();
        String org_id = EbizParams.GLBL_APP_USR_ORG();
        Integer UsrId = EbizParams.GLBL_APP_USR();
        ViewObjectImpl grdSalVo = this.getGrdSal1();
        String emp_doc_id = (String) this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("DocId");
        String grd_id = (String) this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("GrdId");
        ViewObjectImpl grdReffSalVo = this.getGrdSalReff1();

        grdSalVo.setNamedWhereClauseParam("BIND_CLD_ID", cld_id);
        grdSalVo.setNamedWhereClauseParam("BIND_SLOC_ID", sloc_id);
        grdSalVo.setNamedWhereClauseParam("BIND_HO_ORG_ID", ho_org_id);
        grdSalVo.setNamedWhereClauseParam("BIND_ORG_ID", org_id);
        grdSalVo.setNamedWhereClauseParam("BIND_DESG_ID", desig_Id);
        grdSalVo.setNamedWhereClauseParam("BIND_GRD_ID", grd_id);
        grdSalVo.executeQuery();

        grdReffSalVo.setNamedWhereClauseParam("BIND_CLD_ID", cld_id);
        grdReffSalVo.setNamedWhereClauseParam("BIND_SLOC_ID", sloc_id);
        grdReffSalVo.setNamedWhereClauseParam("BIND_HO_ORG_ID", ho_org_id);
        grdReffSalVo.setNamedWhereClauseParam("BIND_ORG_ID", org_id);
        grdReffSalVo.setNamedWhereClauseParam("BIND_DESG_ID", desig_Id);
        grdReffSalVo.setNamedWhereClauseParam("BIND_GRD_ID", grd_id);
        grdReffSalVo.executeQuery();

        RowQualifier rqFrSal = new RowQualifier(grdSalVo);
        RowQualifier rqFrSalReff = new RowQualifier(grdReffSalVo);
        Row rwFrSal[] = grdSalVo.getFilteredRows(rqFrSal);
        Row rwFrSalReff[] = grdReffSalVo.getFilteredRows(rqFrSalReff);
        try
        {
            if (rwFrSal.length > 0)
            {
                for (Row rs : rwFrSal)
                {
                    Row r = this.getHcmEmpSal().createRow();
                    r.setAttribute("CldId", cld_id);
                    r.setAttribute("SlocId", sloc_id);
                    r.setAttribute("HoOrgId", ho_org_id);
                    r.setAttribute("OrgId", org_id);
                    r.setAttribute("DocId", emp_doc_id);
                    r.setAttribute("SalId", rs.getAttribute("SalId"));
                    r.setAttribute("SalType", rs.getAttribute("SalType"));
                    r.setAttribute("SalAmt", rs.getAttribute("SalAmt"));
                    r.setAttribute("SalVal", rs.getAttribute("SalAmt"));
                    r.setAttribute("ValidStrtDt", rs.getAttribute("ValidStrtDt"));
                    r.setAttribute("ValidEndDt", rs.getAttribute("ValidEndDt"));
                    r.setAttribute("UsrIdCreate", UsrId);
                    r.setAttribute("UsrIdCreateDt", (new Timestamp(System.currentTimeMillis())).dateValue());

                }

                if (rwFrSalReff.length > 0)
                {
                    for (Row rf : rwFrSalReff)
                    {
                        Row rowfrReff = this.getHcmEmpSalRef().createRow();
                        rowfrReff.setAttribute("CldId", cld_id);
                        rowfrReff.setAttribute("SlocId", sloc_id);
                        rowfrReff.setAttribute("HoOrgId", ho_org_id);
                        rowfrReff.setAttribute("OrgId", org_id);
                        rowfrReff.setAttribute("DocId", emp_doc_id);
                        rowfrReff.setAttribute("SalId", rf.getAttribute("SalId"));
                        rowfrReff.setAttribute("RefSalId", rf.getAttribute("RefSalId"));
                        rowfrReff.setAttribute("SalPercVal", rf.getAttribute("SalPercVal"));
                        rowfrReff.setAttribute("UsrIdCreate", UsrId);
                        rowfrReff.setAttribute("UsrIdCreateDt",
                                               (new Timestamp(System.currentTimeMillis())).dateValue());
                        rowfrReff.setAttribute("ValidStrtDt", rf.getAttribute("ValidStrtDt"));
                        rowfrReff.setAttribute("ValidEndDt", rf.getAttribute("ValidEndDt"));
                    }
                }
            }
        }
        catch (Exception ex) {
            return "N";
        }
        return "Y";

    }

    /**
     * Container's getter for LovDesgId1.
     * @return LovDesgId1
     */
    public ViewObjectImpl getLovDesgId()
    {
        return (ViewObjectImpl) findViewObject("LovDesgId");
    }

    /**
     * Container's getter for HcmEmpSkil1.
     * @return HcmEmpSkil1
     */
    public ViewObjectImpl getHcmEmpSkil()
    {
        return (ViewObjectImpl) findViewObject("HcmEmpSkil");
    }

    /**
     * Container's getter for EmpPrfToEmpSkilVL1.
     * @return EmpPrfToEmpSkilVL1
     */
    public ViewLinkImpl getEmpPrfToEmpSkilVL1()
    {
        return (ViewLinkImpl) findViewLink("EmpPrfToEmpSkilVL1");
    }

    public String chkDupliSkilId(String skilId)
    {
        String OrgId = (String) resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        Integer UsrId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        String HoOrgId = (String) resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String CldId = (String) resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        RowQualifier rq = new RowQualifier(this.getHcmEmpSkil());
        rq.setWhereClause("CldId='" + CldId + "' and SlocId=" + SlocId + " and HoOrgId='" + HoOrgId + "' and OrgId='" +
                          OrgId + "' and DocId='" + this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("DocId") +
                          "' and SkilId='" + skilId + "'");
        System.out.println("Query=" + rq.getExprStr());
        Row fr[] = this.getHcmEmpSkil().getFilteredRows(rq);
        System.out.println("Total no. of same rows=" + fr.length);
        for (Row r : fr)
        {
            System.out.println("Row=" + r + " and current row=" + this.getHcmEmpLeave().getCurrentRow());
            if (!(r.equals(this.getHcmEmpSkil().getCurrentRow())))
                return "Y";
        }
        return "N";
    }

    public String genEmpCodeForEmp()
    {
        if (this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("EmpCode") != null)
        {
        }
        else
        {
            String cldId = (String) this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("CldId");
            Integer slocId = (Integer) this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("SlocId");
            String hoOrgId = (String) this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("HoOrgId");
            String orgId = (String) this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("OrgId");
            String docId = (String) this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("DocId");
            Integer UsrId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());


            Object max = callStoredFunction(Types.NUMERIC, "app.GET_EO_ID (?,?,?)", new Object[]
            {
                cldId, slocId, hoOrgId,
            });
            System.out.println("Return value =" + max);


            //--------------call off---------------
            String querry =
                "CldId='" + cldId + "' and HoOrgId='" + hoOrgId + "' and OrgId='" + orgId + "' and SlocId =" + slocId +
                " and DocId='" + docId + "'";
            RowQualifier rqComm = new RowQualifier(this.getHcmEmpCalOff());
            rqComm.setWhereClause(querry);
            Row[] commRow = this.getHcmEmpCalOff().getFilteredRows(rqComm);
            for (Row r : commRow)
                r.setAttribute("EmpCode", max);

            //emp img
            rqComm = new RowQualifier(this.getHcmEmpImg());
            rqComm.setWhereClause(querry);
            commRow = this.getHcmEmpImg().getFilteredRows(rqComm);
            for (Row r : commRow)
            {
                r.setAttribute("EmpCode", max);
                r.setAttribute("ImgFileNm", max);
            }


            //Leave
            rqComm = new RowQualifier(this.getHcmEmpLeave());
            rqComm.setWhereClause(querry);
            commRow = this.getHcmEmpLeave().getFilteredRows(rqComm);
            for (Row r : commRow)
                r.setAttribute("EmpCode", max);


            //EmpPastDetails

            rqComm = new RowQualifier(this.getHcmEmpExpVo1());
            rqComm.setWhereClause(querry);
            commRow = this.getHcmEmpExpVo1().getFilteredRows(rqComm);
            for (Row r : commRow)
                r.setAttribute("EmpCode", max);

            //EmpLanguageDetails

            rqComm = new RowQualifier(this.getHcmEmpLang1());
            rqComm.setWhereClause(querry);
            commRow = this.getHcmEmpLang1().getFilteredRows(rqComm);
            for (Row r : commRow)
                r.setAttribute("EmpCode", max);

            //EmpQualificationDetails

            rqComm = new RowQualifier(this.getHcmEmpQuali1());
            rqComm.setWhereClause(querry);
            commRow = this.getHcmEmpQuali1().getFilteredRows(rqComm);
            for (Row r : commRow)
                r.setAttribute("EmpCode", max);

            //Salary
            rqComm = new RowQualifier(this.getHcmEmpSal());
            rqComm.setWhereClause(querry);
            commRow = this.getHcmEmpSal().getFilteredRows(rqComm);
            for (Row r : commRow)
                r.setAttribute("EmpCode", max);

            //Salary Ref
            rqComm = new RowQualifier(this.getHcmEmpSalRef1());
            rqComm.setWhereClause(querry);
            commRow = this.getHcmEmpSalRef1().getFilteredRows(rqComm);
            for (Row r : commRow)
                r.setAttribute("EmpCode", max);

            //Shift
            rqComm = new RowQualifier(this.getHcmEmpShift());
            rqComm.setWhereClause(querry);
            commRow = this.getHcmEmpShift().getFilteredRows(rqComm);
            for (Row r : commRow)
                r.setAttribute("EmpCode", max);

            //Skill
            rqComm = new RowQualifier(this.getHcmEmpSkil());
            rqComm.setWhereClause(querry);
            System.out.println("query =" + rqComm.getExprStr());
            commRow = this.getHcmEmpSkil().getFilteredRows(rqComm);
            System.out.println("no. of filtered rows in Skil=" + commRow.length);
            for (Row r : commRow)
                r.setAttribute("EmpCode", max);

            //-----------emp prf
            this.getOrgHcmEmpPrf().getCurrentRow().setAttribute("EmpCode", max);

            //get Eo_mst_id from org$hcm$prf
            Integer mstId = null;
            RowQualifier rqhcmprf = new RowQualifier(this.getOrgHcmPrf());
            rqhcmprf.setWhereClause("CldId='" + cldId + "' and SlocId=" + slocId + " and OrgId='" + orgId +
                                    "' and FreezePrf='Y'");
            Row[] frhcmprf = this.getOrgHcmPrf().getFilteredRows(rqhcmprf);
            if (frhcmprf.length > 0 && frhcmprf[0].getAttribute("EoMstId") != null)
            {
                mstId = (Integer) frhcmprf[0].getAttribute("EoMstId");
                System.out.println("EO MST Grp Id=" + mstId);
                System.out.println("cldId=" + cldId + "sloc id=" + slocId + "mst Id=" + mstId + "max=" + max +
                                   this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("EmpNm") + "80" + UsrId);
                //call entity setup to insert record in entity from emp


                /*  Object retu =
                    ADFModelUtils.callFunction(this, new StringBuilder("app.fn_eo_frm_hcm (?,?,?,?,?,?,?,?,?)"), new Object[] {
                                               cldId, slocId, mstId, orgId, max,
                                               this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("EmpNm"), 80, UsrId
                }, Types.VARCHAR); */

                Object retu = callStoredFunction1(Types.VARCHAR, "app.fn_eo_frm_hcm (?,?,?,?,?,?,?,?,?)", new Object[]
                {
                    cldId, slocId, mstId, orgId, max, this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("EmpNm"), 80,
                    UsrId
                });
                System.out.println("Return value =" + retu);
                if (eo_nm != null && eo_nm.length() > 0)
                    this.getOrgHcmEmpPrf().getCurrentRow().setAttribute("EmpEoNm", eo_nm);
            }
            else
                return "N";

        }
        return "Y";
    }


    public String chkDupliShiftId(String shiftId)
    {
        String OrgId = (String) resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        Integer UsrId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        String HoOrgId = (String) resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String CldId = (String) resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        RowQualifier rq = new RowQualifier(this.getHcmEmpShift());
        rq.setWhereClause("CldId='" + CldId + "' and SlocId=" + SlocId + " and HoOrgId='" + HoOrgId + "' and OrgId='" +
                          OrgId + "' and DocId='" + this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("DocId") +
                          "' and ShiftId='" + shiftId + "'");
        System.out.println("Query=" + rq.getExprStr());
        Row fr[] = this.getHcmEmpShift().getFilteredRows(rq);
        System.out.println("Total no. of same rows=" + fr.length);
        for (Row r : fr)
        {
            if (!(r.equals(this.getHcmEmpShift().getCurrentRow())))
                return "Y";
        }
        return "N";
    }

    public String validateShiftStartDate(java.sql.Date shiftDt)
    {
        System.out.println("Date is=" + shiftDt);
        if (shiftDt != null && shiftDt.toString().length() > 0)
        {
            String cldId = (String) this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("CldId");
            Integer slocId = (Integer) this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("SlocId");
            String hoOrgId = (String) this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("HoOrgId");
            String orgId = (String) this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("OrgId");
            java.sql.Date strtDt = null;
            java.sql.Date newEndDt = null;
            System.out.println("date not null");
            try
            {
                strtDt = ((Timestamp) this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("EmpDoj")).dateValue();
            }
            catch (SQLException e) {
                System.out.println("Exception in cast");
            }
            System.out.println("Date of join=" + strtDt);
            System.out.println("shift date=" + shiftDt);
            if (strtDt.compareTo(shiftDt) > 0)
            {
                System.out.println("greater");
                if (strtDt.toString().equals(shiftDt.toString()))
                {
                    System.out.println("Equal");
                }
                else
                {
                    System.out.println("not equal");
                    return "N";
                }
            }
            System.out.println("exit doj chk");
            try
            {
                String shiftId = (String) this.getHcmEmpShift().getCurrentRow().getAttribute("ShiftId");
                String grpId = (String) this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("EmpGrpId");
                if (shiftId != null && shiftId != "")
                {
                    RowQualifier rq = new RowQualifier(this.getHcmGrpShift());
                    rq.setWhereClause("CldId='" + cldId + "' and HoOrgId='" + hoOrgId + "' and OrgId='" + orgId +
                                      "' and GrpId = '" + grpId + "' and SlocId =" + slocId + " and ShiftId='" +
                                      shiftId + "'");

                    Row fr[] = this.getHcmGrpShift().getFilteredRows(rq);
                    if (fr.length > 0)
                    {
                        strtDt = ((Timestamp) fr[0].getAttribute("ValidStrtDt")).dateValue();
                        if (fr[0].getAttribute("ValidEndDt") != null)
                            newEndDt = ((Timestamp) fr[0].getAttribute("ValidEndDt")).dateValue();
                    }
                }

            }
            catch (SQLException e) {
                System.out.println("Exception in cast");
            }
            if (strtDt.compareTo(shiftDt) > 0)
            {
                System.out.println("greater");
                if (strtDt.toString().equals(shiftDt.toString()))
                {
                    System.out.println("Equal");
                }
                else
                {
                    System.out.println("not equal");
                    return "X";
                }
            }
            if (newEndDt != null)
                if (shiftDt.compareTo(newEndDt) > 0) //newEndDt
                {
                    System.out.println("greater");
                    if (shiftDt.toString().equals(newEndDt.toString()))
                    {
                        System.out.println("Equal");
                    }
                    else
                    {
                        System.out.println("not equal");
                        return "X";
                    }
                }
            System.out.println("exit shift");
        }
        System.out.println("Exit final");
        return "Y";
    }


    public String chkDupliWeekoffId(String weekoffId)
    {
        String OrgId = (String) resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        Integer UsrId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        String HoOrgId = (String) resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String CldId = (String) resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        RowQualifier rq = new RowQualifier(this.getHcmEmpCalOff());
        rq.setWhereClause("CldId='" + CldId + "' and SlocId=" + SlocId + " and HoOrgId='" + HoOrgId + "' and OrgId='" +
                          OrgId + "' and DocId='" + this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("DocId") +
                          "' and WeekOff='" + weekoffId + "'");
        System.out.println("Query=" + rq.getExprStr());
        Row fr[] = this.getHcmEmpCalOff().getFilteredRows(rq);
        System.out.println("Total no. of same rows=" + fr.length);
        for (Row r : fr)
        {
            if (!(r.equals(this.getHcmEmpCalOff().getCurrentRow())))
                return "Y";
        }
        return "N";
    }

    /**
     * Container's getter for LovSalId1.
     * @return LovSalId1
     */
    public ViewObjectImpl getLovSalId()
    {
        return (ViewObjectImpl) findViewObject("LovSalId");
    }

    public String chkSalIdItSelf(String refSalId)
    {

        if (this.getHcmEmpSalRef().getCurrentRow().getAttribute("SalId") != null)
            if (refSalId.equals(this.getHcmEmpSalRef().getCurrentRow().getAttribute("SalId").toString()))
                return "Y";
            else
                return "N";


        return "N";
    }

    public String chkIsOtherDeduction(String refSalId)
    {
        String OrgId = (String) resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String HoOrgId = (String) resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String CldId = (String) resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        this.getLovSalId().setNamedWhereClauseParam("cldIdBindVar", CldId);
        this.getLovSalId().setNamedWhereClauseParam("hoOrgIdBindVar", HoOrgId);
        this.getLovSalId().setNamedWhereClauseParam("orgIdBindVar", OrgId);
        this.getLovSalId().setNamedWhereClauseParam("slocIdBindVar", SlocId);
        this.getLovSalId().executeQuery();
        Row[] fr = this.getLovSalId().getFilteredRows("SalId", refSalId);
        if (fr.length > 0)
            return (String) fr[0].getAttribute("OthrDedChk");
        else
        {
            return "N";
        }
    }

    public void chkBlankRowAndRemove()
    {
        Row[] allRow = this.getHcmEmpSalRef().getAllRowsInRange();
        for (Row r : allRow)
        {
            if (r.getAttribute("RefSalId") != null && r.getAttribute("SalPercVal") != null &&
                r.getAttribute("ValidStrtDt") != null)
            {
                System.out.println("Fine Row");
            }
            else
            {
                System.out.println("Removing row");
                r.remove();
            }
        }
        this.updtSalAmt();
    }

    public String isSalaryProcPending()
    {
        if (this.getOrgHcmEmpPrf().getCurrentRow() != null)
        {
            this.getLockEmployee().setNamedWhereClauseParam("cldIdBindVar",
                                                            this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("CldId"));
            this.getLockEmployee().setNamedWhereClauseParam("slocIdBindVar",
                                                            this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("SlocId"));
            this.getLockEmployee().setNamedWhereClauseParam("hoOrgIdBindVar",
                                                            this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("HoOrgId"));
            this.getLockEmployee().setNamedWhereClauseParam("orgIdBindVar",
                                                            this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("OrgId"));
            this.getLockEmployee().setNamedWhereClauseParam("empDocIdBindVar",
                                                            this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("DocId"));
            this.getLockEmployee().executeQuery();
            if (this.getLockEmployee().getEstimatedRowCount() > 0)
                return "Y";
        }
        return "N";
    }


    public String isAnySalaryProcess()
    {
        if (this.getOrgHcmEmpPrf().getCurrentRow() != null)
        {
            this.getHcmEmpSalProc().setNamedWhereClauseParam("cldIdBindVar",
                                                             this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("CldId"));
            this.getHcmEmpSalProc().setNamedWhereClauseParam("slocIdBindVar",
                                                             this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("SlocId"));
            this.getHcmEmpSalProc().setNamedWhereClauseParam("hoOrgIdBindVar",
                                                             this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("HoOrgId"));
            this.getHcmEmpSalProc().setNamedWhereClauseParam("orgIdBindVar",
                                                             this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("OrgId"));
            this.getHcmEmpSalProc().setNamedWhereClauseParam("empDocIdBindVar",
                                                             this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("DocId"));
            this.getHcmEmpSalProc().executeQuery();
            if (this.getHcmEmpSalProc().getEstimatedRowCount() > 0)
                return "Y";
        }
        return "N";
    }

    /**
     * Container's getter for LockEmployee1.
     * @return LockEmployee1
     */
    public ViewObjectImpl getLockEmployee()
    {
        return (ViewObjectImpl) findViewObject("LockEmployee");
    }


    public String chkLevDtValid(java.sql.Date leaveDt)
    {
        if (this.getHcmEmpLeave().getCurrentRow() != null &&
            this.getHcmEmpLeave().getCurrentRow().getAttribute("LeaveId") != null)
        {
            String OrgId = (String) resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
            String HoOrgId = (String) resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
            String CldId = (String) resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
            Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
            this.getLovLeaveId().setNamedWhereClauseParam("cldIdBindVar", CldId);
            this.getLovLeaveId().setNamedWhereClauseParam("grpIdBindVar",
                                                          this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("EmpGrpId"));
            this.getLovLeaveId().setNamedWhereClauseParam("hoOrgIdBindVar", HoOrgId);
            this.getLovLeaveId().setNamedWhereClauseParam("orgIdBindVar", OrgId);
            this.getLovLeaveId().setNamedWhereClauseParam("slocIdBindVar", SlocId);
            this.getLovLeaveId().executeQuery();
            Row[] fr =
                this.getLovLeaveId().getFilteredRows("LeaveId",
                                                     this.getHcmEmpLeave().getCurrentRow().getAttribute("LeaveId"));
            System.out.println("No. of Filtered Rows=" + fr.length);
            if (fr.length > 0)
            {
                System.out.println("Strt Dt in Leave=" + fr[0].getAttribute("ValidStartDt"));
                System.out.println("End Dt in Leave=" + fr[0].getAttribute("ValidEndDt"));

                java.sql.Date strtDt = null;
                java.sql.Date endDt = null;
                try
                {
                    strtDt = ((Timestamp) fr[0].getAttribute("ValidStartDt")).dateValue();
                    if (fr[0].getAttribute("ValidEndDt") != null)
                        endDt = ((Timestamp) fr[0].getAttribute("ValidEndDt")).dateValue();
                }
                catch (SQLException e) {
                    System.out.println("Error in cast date");
                    return "N";
                }
                if (strtDt.compareTo(leaveDt) > 0)
                {
                    if (strtDt.toString().equals(leaveDt.toString()))
                    {
                        //ok
                    }
                    else
                    {
                        return "N";
                    }
                }
                if (endDt != null)
                {
                    if (leaveDt.compareTo(endDt) > 0)
                    {
                        if (leaveDt.toString().equals(endDt.toString()))
                        {
                            //OK
                        }
                        else
                        {
                            return "N";
                        }
                    }
                }
            }
        }
        return "Y";
    }

    /**
     * Container's getter for LovLeaveId1.
     * @return LovLeaveId1
     */
    public ViewObjectImpl getLovLeaveId()
    {
        return (ViewObjectImpl) findViewObject("LovLeaveId");
    }


    public String chkSalDtValid(java.sql.Date salDt)
    {
        if (this.getHcmEmpSal().getCurrentRow() != null &&
            this.getHcmEmpSal().getCurrentRow().getAttribute("SalId") != null)
        {
            String OrgId = (String) resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
            String HoOrgId = (String) resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
            String CldId = (String) resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
            Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
            this.getLovSalId().setNamedWhereClauseParam("cldIdBindVar", CldId);
            this.getLovSalId().setNamedWhereClauseParam("hoOrgIdBindVar", HoOrgId);
            this.getLovSalId().setNamedWhereClauseParam("orgIdBindVar", OrgId);
            this.getLovSalId().setNamedWhereClauseParam("slocIdBindVar", SlocId);
            this.getLovSalId().executeQuery();
            Row[] fr =
                this.getLovSalId().getFilteredRows("SalId", this.getHcmEmpSal().getCurrentRow().getAttribute("SalId"));
            System.out.println("No. of Filtered Rows=" + fr.length);
            if (fr.length > 0)
            {
                System.out.println("Strt Dt in Leave=" + fr[0].getAttribute("ValidStrtDt"));
                System.out.println("End Dt in Leave=" + fr[0].getAttribute("ValidEndDt"));

                java.sql.Date strtDt = null;
                java.sql.Date endDt = null;
                try
                {
                    strtDt = ((Timestamp) fr[0].getAttribute("ValidStrtDt")).dateValue();
                    if (fr[0].getAttribute("ValidEndDt") != null)
                        endDt = ((Timestamp) fr[0].getAttribute("ValidEndDt")).dateValue();
                }
                catch (SQLException e) {
                    System.out.println("Error in cast date");
                    return "N";
                }
                if (strtDt != null && salDt != null)
                    if (strtDt.compareTo(salDt) > 0)
                    {
                        if (strtDt.toString().equals(salDt.toString()))
                        {
                            //ok
                        }
                        else
                        {
                            return "N";
                        }
                    }
                if (endDt != null)
                {
                    if (salDt.compareTo(endDt) > 0)
                    {
                        if (salDt.toString().equals(endDt.toString()))
                        {
                            //OK
                        }
                        else
                        {
                            return "N";
                        }
                    }
                }
            }
        }
        return "Y";
    }

    public String chkSkilDtValid(java.sql.Date skilDt)
    {
        if (this.getHcmEmpSkil().getCurrentRow() != null &&
            this.getHcmEmpSkil().getCurrentRow().getAttribute("SkilId") != null)
        {
            String OrgId = (String) resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
            String HoOrgId = (String) resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
            String CldId = (String) resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
            Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
            this.getLovSkilId().setNamedWhereClauseParam("cldIdBindVar", CldId);
            this.getLovSkilId().setNamedWhereClauseParam("hoOrgIdBindVar", HoOrgId);
            this.getLovSkilId().setNamedWhereClauseParam("orgIdBindVar", OrgId);
            this.getLovSkilId().setNamedWhereClauseParam("slocIdBindVar", SlocId);
            this.getLovSkilId().executeQuery();
            Row[] fr =
                this.getLovSkilId().getFilteredRows("ParamId",
                                                    this.getHcmEmpSkil().getCurrentRow().getAttribute("SkilId"));
            System.out.println("No. of Filtered Rows=" + fr.length);
            if (fr.length > 0)
            {
                System.out.println("Strt Dt in Leave=" + fr[0].getAttribute("ParamStartDt"));
                System.out.println("End Dt in Leave=" + fr[0].getAttribute("ParamEndDt"));

                java.sql.Date strtDt = null;
                java.sql.Date endDt = null;
                try
                {
                    strtDt = ((Timestamp) fr[0].getAttribute("ParamStartDt")).dateValue();
                    if (fr[0].getAttribute("ParamEndDt") != null)
                        endDt = ((Timestamp) fr[0].getAttribute("ParamEndDt")).dateValue();
                }
                catch (SQLException e) {
                    System.out.println("Error in cast date");
                    return "N";
                }
                if (strtDt.compareTo(skilDt) > 0)
                {
                    if (strtDt.toString().equals(skilDt.toString()))
                    {
                        //ok
                    }
                    else
                    {
                        return "N";
                    }
                }
                if (endDt != null)
                {
                    if (skilDt.compareTo(endDt) > 0)
                    {
                        if (skilDt.toString().equals(endDt.toString()))
                        {
                            //OK
                        }
                        else
                        {
                            return "N";
                        }
                    }
                }
            }
        }
        return "Y";
    }

    /**
     * Container's getter for LovSkilId1.
     * @return LovSkilId1
     */
    public ViewObjectImpl getLovSkilId()
    {
        return (ViewObjectImpl) findViewObject("LovSkilId");
    }


    public String chkDupliaceCource(String empCrseId)
    {
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        Integer userId = EbizParams.GLBL_APP_USR();
        System.out.println("cndCourceId 1" + empCrseId);
        ViewObjectImpl empQualif = this.getHcmEmpQuali1();
        Row currentRow = empQualif.getCurrentRow();
        if (currentRow != null)
        {
            if (empCrseId != "" && empCrseId != null)
            {
                String docId = (String) currentRow.getAttribute("DocId");
                // Number empCode = (Number) currentRow.getAttribute("EmpCode");
                RowQualifier rq = new RowQualifier(empQualif);
                String querry =
                    "CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId + "' and OrgId='" +
                    orgId + "'  and CourseId = '" + empCrseId + "' and DocId = '" + docId + "'";
                rq.setWhereClause(querry);
                Row fr[] = empQualif.getFilteredRows(rq);
                System.out.println("Total no. of same rows=" + fr.length);
                for (Row r : fr)
                {
                    System.out.println("Row=" + r + " and current row=" + this.getHcmEmpQuali1().getCurrentRow());
                    if (!(r.equals(this.getHcmEmpQuali1().getCurrentRow())))
                        return "Y";
                }
            }

        }
        return "N";

    }

    public String chkDupliaceCompanyName(String empCompName)
    {
        System.out.println("empCompName==" + empCompName);
        ViewObjectImpl ln = getHcmEmpExpVo1();
        Row currentRow = ln.getCurrentRow();
        RowSetIterator rsi = ln.createRowSetIterator(null);
        if (currentRow != null)
        {
            while (rsi.hasNext())
            {
                Row next = rsi.next();
                if (next != currentRow)
                {
                    if (next.getAttribute("EmpOrgNm") != null)
                    {
                        if (next.getAttribute("EmpOrgNm").toString().equalsIgnoreCase(empCompName))
                        {
                            return "Y";
                        }
                    }
                }
            }
        }
        return "N";
    }


    public String chkDupliaceLanguage(String empLngId)
    {

        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        Integer userId = EbizParams.GLBL_APP_USR();
        ViewObjectImpl empLangVo1 = this.getHcmEmpLang1();
        Row currentRow = empLangVo1.getCurrentRow();
        if (currentRow != null)
        {
            if (empLngId != "" && empLngId != null)
            {
                String docId = (String) currentRow.getAttribute("DocId");
                // Number empCode = (Number) currentRow.getAttribute("EmpCode");
                RowQualifier rq = new RowQualifier(empLangVo1);
                String querry =
                    "CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId + "' and OrgId='" +
                    orgId + "' and EmpLangId = '" + empLngId + "' and DocId = '" + docId + "'";
                System.out.println("lang querry=" + querry);
                rq.setWhereClause(querry);
                Row fr[] = empLangVo1.getFilteredRows(rq);
                System.out.println("Total no. of same rows=" + fr.length);
                for (Row r : fr)
                {
                    if (!(r.equals(this.getHcmEmpLang1().getCurrentRow())))
                        return "Y";
                }
            }


        }


        return "N";
    }


    public String chkPrevStDtValid(java.sql.Date stDt)
    {
        if (this.getHcmEmpShift().getEstimatedRowCount() > 0 && stDt != null)
        {
            String OrgId = (String) resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
            String HoOrgId = (String) resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
            String CldId = (String) resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
            Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
            String empdocId = (String) resolvEl("#{pageFlowScope.emp_doc_id}");
            RowQualifier rq = new RowQualifier(this.getHcmEmpShift());
            rq.setWhereClause("CldId='" + CldId + "' and SlocId =" + SlocId + " and HoOrgId='" + HoOrgId +
                              "' and OrgId='" + OrgId + "' and DocId='" + empdocId + "' and ShiftSeq= 1");
            Row[] fr = this.getHcmEmpShift().getFilteredRows(rq);
            if (fr.length > 0)
            {
                System.out.println("Applicable Dt in shift=" + fr[0].getAttribute("ValidStrtDt"));
            }
            java.sql.Date strtDt = null;
            java.sql.Date endDt = null;
            try
            {
                strtDt = ((Timestamp) fr[0].getAttribute("ValidStrtDt")).dateValue();
                endDt = stDt;
            }
            catch (SQLException e) {
                System.out.println("Error in cast date");
                return "N";
            }
            if (strtDt.compareTo(endDt) > 0)
            {
                if (strtDt.toString().equals(endDt.toString()))
                {
                    //ok
                }
                else
                {
                    return "N";
                }
            }

        }

        return "Y";
    }

    /**
     * Container's getter for HcmEmpShiftVO1.
     * @return HcmEmpShiftVO1
     */
    public ViewObjectImpl getHcmEmpShift1()
    {
        return (ViewObjectImpl) findViewObject("HcmEmpShift1");
    }

    /**
     * Container's getter for LovDeptIdVO1.
     * @return LovDeptIdVO1
     */
    public ViewObjectImpl getLovDeptId()
    {
        return (ViewObjectImpl) findViewObject("LovDeptId");
    }

    /**
     * Container's getter for LovLocationVO1.
     * @return LovLocationVO1
     */
    public ViewObjectImpl getLovLocation()
    {
        return (ViewObjectImpl) findViewObject("LovLocation");
    }

    /**
     * Container's getter for LovGenderVO1.
     * @return LovGenderVO1
     */
    public ViewObjectImpl getLovGender()
    {
        return (ViewObjectImpl) findViewObject("LovGender");
    }

    public void executeLovVoInOffcialDtl()
    {
        if (this.getOrgHcmEmpPrf().getCurrentRow() != null)
        {
            System.out.println("transMode in ofcial dtl =" +
                               this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("TransMode"));
            OrgHcmEmpPrfVORowImpl impl = (OrgHcmEmpPrfVORowImpl) this.getOrgHcmEmpPrf().getCurrentRow();
            impl.getLovDeptIdVO().executeQuery();
            impl.getLovDesgIdVO().executeQuery();
            impl.getLovGrpVO().executeQuery();
            impl.getLovLocationVO().executeQuery();
            impl.getLovGenderVO().executeQuery();
        }
    }


    public String updateEoNmFrmEmpNm(String empNm)
    {
        if (empNm != null && empNm.length() > 0 && empNm.trim().length() > 0)
        {
            String eoNm = null;
            //get name from entity setup

            //check if eo nm is null then set empnm to eonm
            if (eoNm != null && eoNm.length() > 0 && eoNm.trim().length() > 0)
            {
            }
            else
                eoNm = empNm;
            this.getOrgHcmEmpPrf().getCurrentRow().setAttribute("EmpEoNm", eoNm);
            return eoNm;
        }
        return empNm;
    }

    public String chkSubSalCompAction(String subSalId)
    {
        String hoOrgId = (String) resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String cldId = (String) resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String orgId = (String) resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String DocId = (String) this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("DocId");

        RowQualifier rq = new RowQualifier(this.getHcmEmpSubSal());
        String querry =
            "CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId + "' and OrgId='" + orgId +
            "' and SubSalId='" + subSalId + "' and DocId = '" + DocId + "'";
        rq.setWhereClause(querry);
        Row fr[] = this.getHcmEmpSubSal().getFilteredRows(rq);
        for (Row r : fr)
        {
            if (!(r.equals(this.getHcmEmpSubSal().getCurrentRow())))
                return "N";
        }

        return "Y";
    }

    /**
     * Container's getter for OrgHcmPrf1.
     * @return OrgHcmPrf1
     */
    public ViewObjectImpl getOrgHcmPrf()
    {
        return (ViewObjectImpl) findViewObject("OrgHcmPrf");
    }


    /**Code to insert Imported data*/
    public void insertIntoEmpPrf(List list)
    {
        if (list != null)
            System.out.println("List values=" + list.size());
        Object el = this.resolvEl("#{pageFlowScope.IMP_DATA_LIST}");
        System.out.println("El is: " + el);
        String OrgId = (String) resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        Integer UsrId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        String HoOrgId = (String) resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String CldId = (String) resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        if (el != null)
        {
            System.out.println("el is not null");
            List data = (List) el;
            ListIterator<List> iterator = data.listIterator();
            int i = 1;

            while (iterator.hasNext())
            {
                System.out.println("Itr count=" + i);
                List row = (List) iterator.next();
                System.out.println("Length of row=" + row.size());
                Row newRow = this.getOrgHcmEmpPrf().createRow();
                System.out.println("value at index 0=" + row.get(0));
                newRow.setAttribute("CldId", row.get(0));
                System.out.println("value at index 1=" + row.get(1));
                newRow.setAttribute("SlocId", row.get(1));
                System.out.println("value at index 2=" + row.get(2));
                newRow.setAttribute("HoOrgId", row.get(2));
                System.out.println("value at index 3=" + row.get(3));
                newRow.setAttribute("OrgId", row.get(3));
                System.out.println("value at index 4=" + row.get(4));
                newRow.setAttribute("DocId", row.get(4));
                /* System.out.println("value at index 5="+row.get(5));
                        newRow.setAttribute("EmpCode", row.get(5)); */
                Object max = callStoredFunction(Types.NUMERIC, "app.GET_EO_ID (?,?,?)", new Object[]
                {
                    CldId, SlocId, HoOrgId,
                });
                System.out.println("value at index 5=" + max);
                newRow.setAttribute("EmpCode", max);
                System.out.println("value at index 6=" + row.get(6));
                newRow.setAttribute("EmpId", row.get(6));
                System.out.println("value at index 7=" + row.get(7));
                newRow.setAttribute("EmpNm", row.get(7));
                System.out.println("value at index 8=" + row.get(8));
                newRow.setAttribute("EmpNm1", row.get(8));
                System.out.println("value at index 9=" + row.get(9));
                newRow.setAttribute("EmpNm2", row.get(9));
                System.out.println("value at index 10=" + row.get(10));
                newRow.setAttribute("EmpNm3", row.get(10));
                System.out.println("value at index 11=" + row.get(11));
                newRow.setAttribute("EmpNm4", row.get(11));
                System.out.println("value at index 12=" + row.get(12));
                newRow.setAttribute("EmpCardNo", row.get(12));
                System.out.println("value at index 13=" + row.get(13));
                newRow.setAttribute("EmpDob", getConvertDate((String) row.get(13)));
                System.out.println("value at index 14=" + row.get(14));
                newRow.setAttribute("EmpDoj", getConvertDate((String) row.get(14)));
                System.out.println("value at index 15=" + row.get(15));
                newRow.setAttribute("EmpDeptId", row.get(15));
                System.out.println("value at index 16=" + row.get(16));
                newRow.setAttribute("EmpDesgId", row.get(16));
                System.out.println("value at index 17=" + row.get(17));
                newRow.setAttribute("EmpLocId", row.get(17));
                System.out.println("value at index 18=" + row.get(18));
                newRow.setAttribute("EmpGrpId", row.get(18));
                System.out.println("value at index 19=" + row.get(19));
                newRow.setAttribute("WrkStat", row.get(19));
                System.out.println("value at index 20=" + row.get(20));
                newRow.setAttribute("WrkStatDt", getConvertDate((String) row.get(20)));
                System.out.println("value at index 21=" + row.get(21));
                newRow.setAttribute("EmpGen", row.get(21));
                System.out.println("value at index 22=" + row.get(22));
                newRow.setAttribute("EmpDedCh", row.get(22));
                System.out.println("value at index 23=" + row.get(23));
                newRow.setAttribute("EmpPermAdd", row.get(23));
                System.out.println("value at index 24=" + row.get(24));
                newRow.setAttribute("EmpCurrAdd", row.get(24));
                System.out.println("value at index 25=" + row.get(25));
                newRow.setAttribute("EmpEmail", row.get(25));
                System.out.println("value at index 26=" + row.get(26));
                newRow.setAttribute("EmpPhone1", row.get(26));
                System.out.println("value at index 27=" + row.get(27));
                newRow.setAttribute("EmpPhone2", row.get(27));
                System.out.println("value at index 28=" + row.get(28));
                newRow.setAttribute("EmpPayMode", row.get(28));
                System.out.println("value at index 29=" + row.get(29));
                newRow.setAttribute("EmpBnkId", row.get(29));
                System.out.println("value at index 30=" + row.get(30));
                newRow.setAttribute("BnkBrnchId", row.get(30));
                System.out.println("value at index 31=" + row.get(31));
                newRow.setAttribute("AccNo", row.get(31));
                System.out.println("value at index 32=" + row.get(32));
                newRow.setAttribute("AccType", row.get(32));
                System.out.println("value at index 33=" + row.get(33));
                newRow.setAttribute("ActvFlg", row.get(33));
                System.out.println("value at index 34=" + row.get(34));
                newRow.setAttribute("UsrIdCreate", row.get(34));
                System.out.println("value at index 35=" + row.get(35));
                newRow.setAttribute("UsrIdCreateDt", row.get(35));
                System.out.println("value at index 36=" + row.get(36));
                newRow.setAttribute("UsrIdMod", row.get(36));
                System.out.println("value at index 37=" + row.get(37));
                newRow.setAttribute("UsrIdModDt", row.get(37));
                System.out.println("value at index 38=" + row.get(38));
                newRow.setAttribute("IfscCode", row.get(38));
                System.out.println("value at index 39=" + row.get(39));
                newRow.setAttribute("SwiftCode", row.get(39));
                System.out.println("value at index 40=" + row.get(40));
                newRow.setAttribute("EmpPanNo", row.get(40));
                System.out.println("value at index 41=" + row.get(41));
                newRow.setAttribute("EmpEoNm", row.get(41));


                //get Eo_mst_id from org$hcm$prf
                Integer mstId = null;
                RowQualifier rqhcmprf = new RowQualifier(this.getOrgHcmPrf());
                rqhcmprf.setWhereClause("CldId='" + CldId + "' and SlocId=" + SlocId + " and OrgId='" + OrgId +
                                        "' and FreezePrf='Y'");
                Row[] frhcmprf = this.getOrgHcmPrf().getFilteredRows(rqhcmprf);
                if (frhcmprf.length > 0 && frhcmprf[0].getAttribute("EoMstId") != null)
                {
                    mstId = (Integer) frhcmprf[0].getAttribute("EoMstId");
                    System.out.println("EO MST Grp Id=" + mstId);
                    //call entity setup to insert record in entity from emp
                    /* Object retu =
                        ADFModelUtils.callFunction(this, new StringBuilder("app.fn_eo_frm_hcm (?,?,?,?,?,?,?,?,?)"), new Object[] {
                                                   CldId, SlocId, mstId, OrgId, max, row.get(7), 80, UsrId
                    }, Types.VARCHAR); */
                    System.out.println("VALUES DURING INSERT=" + "CLD" + CldId + "SLOC" + SlocId + "MST" + mstId +
                                       OrgId + "MAX" + max + "VALUE" + row.get(7) + 80 + UsrId);
                    Object retu =
                        callStoredFunction1(Types.VARCHAR, "app.fn_eo_frm_hcm (?,?,?,?,?,?,?,?,?)", new Object[]
                    {
                        CldId, SlocId, mstId, OrgId, max, row.get(7), 80, UsrId
                    });
                    System.out.println("Return value =" + retu);
                    newRow.setAttribute("EmpEoNm", eo_nm);
                    this.getOrgHcmEmpPrf().insertRow(newRow);
                }
                else
                {
                    System.out.println("Entity Group not present for Employee Entity No id genrated from fn_eo_frm_hcm.");
                    this.getDBTransaction().rollback();
                    break;
                }
                i++;
            }
        }


        this.getDBTransaction().commit();
        this.getOrgHcmEmpPrf().setNamedWhereClauseParam("cldIdBindVar", CldId);
        this.getOrgHcmEmpPrf().setNamedWhereClauseParam("slocIdBindVar", SlocId);
        this.getOrgHcmEmpPrf().setNamedWhereClauseParam("hoOrgIdBindVar", HoOrgId);
        this.getOrgHcmEmpPrf().setNamedWhereClauseParam("orgIdBindVar", OrgId);
        this.getOrgHcmEmpPrf().executeQuery();


    }

    protected Object callStoredFunction1(int sqlReturnType, String stmt, Object[] bindVars)
    {
        CallableStatement st = null;
        try
        {

            // 1. Create a JDBC CallabledStatement
            st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            // 2. Register the first bind variable for the return value
            st.registerOutParameter(1, sqlReturnType);
            st.registerOutParameter(10, sqlReturnType);
            if (bindVars != null)
            {
                /* // 3. Loop over values for the bind variables passed in, if any
                    for (int z = 0; z < (bindVars.length); z++) {
                        // 4. Set the value of user-supplied bind vars in the stmt
                        st.setObject(z + 2, bindVars[z]);
                    } */
                st.setObject(2, bindVars[0]);
                st.setObject(3, bindVars[1]);
                st.setObject(4, bindVars[2]);
                st.setObject(5, bindVars[3]);
                st.setObject(6, bindVars[4]);
                st.setObject(7, bindVars[5]);
                st.setObject(8, bindVars[6]);
                st.setObject(9, bindVars[7]);


            }
            // 5. Set the value of user-supplied bind vars in the stmt
            st.executeUpdate();
            System.out.println("Out variable value = " + st.getObject(10));
            eo_nm = (String) st.getObject(10);
            // 6. Return the value of the first bind variable
            return st.getObject(1);
        }
        catch (SQLException e) {
            throw new JboException(e);
        }
        finally
        {
            if (st != null)
            {
                try
                {
                    // 7. Close the statement
                    st.close();
                }
                catch (SQLException e) {
                    System.out.println(e);
                }
            }
        }
    }


    private java.util.Date getConvertDate(String str)
    {
        java.util.Date d = null;
        SimpleDateFormat format = new SimpleDateFormat("dd-MMM-yyyy");
        try
        {
            d = format.parse(str);
            System.out.println("Date parsed=" + d);
        }
        catch (Exception e) {
            System.out.println("Error during parse");
            e.printStackTrace();
        }
        return d;
    }

    /**
     * Container's getter for LovEmpNmAutoSuggst1.
     * @return LovEmpNmAutoSuggst1
     */
    public LovEmpNmAutoSuggstVOImpl getLovEmpNmAutoSuggst()
    {
        return (LovEmpNmAutoSuggstVOImpl) findViewObject("LovEmpNmAutoSuggst");
    }

    public void resetValues()
    {
        this.getDualForSearch().getCurrentRow().setAttribute("TransEmpNm", null);
        this.getDualForSearch().getCurrentRow().setAttribute("TransEmpId", null);
    }

    /**
     * @return
     */
    public Boolean exportToExcel()
    {
        return true;
    }


    /**
     * Container's getter for HcmEmpShiftTmpEOVO1.
     * @return HcmEmpShiftTmpEOVO1
     */
    public ViewObjectImpl getHcmEmpShiftTmpEOVO1()
    {
        return (ViewObjectImpl) findViewObject("HcmEmpShiftTmpEOVO1");
    }


    public void deleteView()
    {
        ViewObjectImpl empShiftTmpEoVO1 = this.getHcmEmpShiftTmpEOVO1();
        empShiftTmpEoVO1.executeQuery();
        int count = empShiftTmpEoVO1.getRowCount();
        System.out.println("Row count -- " + count);
        if (count > 0)
        {
            RowSetIterator itr = empShiftTmpEoVO1.createRowSetIterator(null);
            while (itr.hasNext())
            {
                Row next = itr.next();
                next.remove();
            }
            itr.closeRowSetIterator();
            getDBTransaction().postChanges();
            empShiftTmpEoVO1.executeQuery();
            this.getHcmEmpShiftTmp().executeQuery();
            System.out.println("Row count is in vo : " + this.getHcmEmpShiftTmp().getRowCount());
        }
    }

    /**
     * Container's getter for HcmGrpShift1.
     * @return HcmGrpShift1
     */
    public ViewObjectImpl getHcmGrpShift()
    {
        return (ViewObjectImpl) findViewObject("HcmGrpShift");
    }

    /**
     * Container's getter for DummyReqrmntArea1.
     * @return DummyReqrmntArea1
     */
    public ViewObjectImpl getDummyReqrmntArea()
    {
        return (ViewObjectImpl) findViewObject("DummyReqrmntArea");
    }

    public String insrtReqmntAreaInfo()
    {
        BigDecimal valFrCmpare = new BigDecimal(1);
        BigDecimal returnval = new BigDecimal(0);
        ViewObjectImpl rqmtVo = this.getDummyReqrmntArea();
        String empId = (String) this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("EmpId");
        String empname = (String) this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("EmpNm");
        String reqmntAreaNm = "";
        if (empname != null)
        {
            if (empname.length() > 7)
                reqmntAreaNm = empname.substring(0, 5) + empId;
            else
            {
                reqmntAreaNm = empname + empId;
            }
        }
        String WreHouseNm = (String) rqmtVo.getCurrentRow().getAttribute("TransDefltWreHouse");
        String isCostCentre = (String) rqmtVo.getCurrentRow().getAttribute("TransIsCostCentre");
        if (isCostCentre == null || isCostCentre == "")
            isCostCentre = "N";
        String isTempUse = (String) rqmtVo.getCurrentRow().getAttribute("TransIsTempIssueOnly");
        if (isTempUse == null || isTempUse == "")
            isTempUse = "N";
        String addressId = (String) rqmtVo.getCurrentRow().getAttribute("TransAddressId");
        String wreHouseId = (String) rqmtVo.getCurrentRow().getAttribute("TransWreHouseId");
        String addessName = (String) rqmtVo.getCurrentRow().getAttribute("TransAddress");
        String OrgId = (String) resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        Integer UsrId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        String HoOrgId = (String) resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String CldId = (String) resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        BigDecimal rslt =
            (BigDecimal) (callStoredFunction(Types.NUMERIC, "APP.FN_INS_RQMT_AREA (?,?,?,?,?,?,?,?,?,?,?,?,?)",
                                             new Object[]
        {
            CldId, SlocId, OrgId, empId, reqmntAreaNm, addressId, wreHouseId, "N", isCostCentre, isTempUse, "N", UsrId,
            779
        }));
        if (rslt.equals(valFrCmpare))
        {

            return "Y";
        }
        else
        {
            return "N";
        }


    }

    /**
     * Container's getter for RqmtArea1.
     * @return RqmtArea1
     */
    public ViewObjectImpl getRqmtArea()
    {
        return (ViewObjectImpl) findViewObject("RqmtArea");
    }

    /**
     * Container's getter for OrgHcmEmpPfAndRqmtAreaVL1.
     * @return OrgHcmEmpPfAndRqmtAreaVL1
     */
    public ViewLinkImpl getOrgHcmEmpPfAndRqmtAreaVL1()
    {
        return (ViewLinkImpl) findViewLink("OrgHcmEmpPfAndRqmtAreaVL1");
    }

    /**
     * Container's getter for LovAppAddressVo1.
     * @return LovAppAddressVo1
     */
    public ViewObjectImpl getLovAppAddressVo1()
    {
        return (ViewObjectImpl) findViewObject("LovAppAddressVo1");
    }

    public BigDecimal chkReqAreaForDeletion()
    {

        String OrgId = (String) resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String cldId = (String) resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String deptId = getRqmtArea().getCurrentRow().getAttribute("DeptId").toString();


        BigDecimal rslt = (BigDecimal) (callStoredFunction(Types.NUMERIC, "APP.FN_DEL_RQMT_AREA(?,?,?,?)", new Object[]
        {
            cldId, slocId, OrgId, deptId
        }));
        System.out.println("result for reqArea delete-->" + rslt);
        if (rslt != null && rslt.compareTo(new BigDecimal(1)) == 0)
        {
            getOrgHcmEmpPrf().getCurrentRow().setAttribute("ReqAreaFlg", "N");
            //getOrgHcmEmpPrf().executeQuery();
            getRqmtArea().executeQuery();
        }
        return rslt;
    }

    public void refreshAftDeletion()
    {
        getRqmtArea().executeQuery();
        // getOrgDept1().executeQuery();
    }

    public void refreshDummyRqmtVo()
    {
        getDummyReqrmntArea().executeQuery();
    }

    public void refreshEmployeDed()
    {
        getEmployeeDeduction().executeQuery();
    }

    /**Week Off validtion for fix or random */

    public String chkWeekOffType()
    {
        String OrgId = (String) resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String HoOrgId = (String) resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String CldId = (String) resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        getChkweekOffTypeVO1().setNamedWhereClauseParam("bindCldId", CldId);
        getChkweekOffTypeVO1().setNamedWhereClauseParam("bindHoOrgId", HoOrgId);
        getChkweekOffTypeVO1().setNamedWhereClauseParam("bindOrgId", OrgId);
        getChkweekOffTypeVO1().setNamedWhereClauseParam("bindSlocId", SlocId);
        getChkweekOffTypeVO1().executeQuery();
        String grpId = getOrgHcmEmpPrf().getCurrentRow().getAttribute("EmpGrpId").toString();
        Row[] filteredRows = getChkweekOffTypeVO1().getFilteredRows("GrpId", grpId);
        if (filteredRows.length > 0)
        {
            Object wType = filteredRows[0].getAttribute("WkOffType");
            System.out.println("week off type is--" + wType);
            if (((Integer) wType).compareTo(69) == 0)
            {
                return "N";
            }
            return "Y";
        }
        return "Y";
    }

    /**To Calculate Relieving Date*/
    public Timestamp calcRelvngDate(Integer days, java.util.Date resDt)
    {

        this.getRelievingDtCalDualVO1().setNamedWhereClauseParam("DAYS", days);
        this.getRelievingDtCalDualVO1().setNamedWhereClauseParam("RES_DT", resDt);

        this.getRelievingDtCalDualVO1().executeQuery();
        Row row = this.getRelievingDtCalDualVO1().getRowAtRangeIndex(0);
        Timestamp relvngDate = (Timestamp) row.getAttribute("Newdt");
        return relvngDate;
    }

    /** To Validate Document No. in Other Details TAB */
    public String chkDuplicateDocumentNo(String docNo, Integer dtlType)
    {
        if (getOrgHcmEmpOthDtlVO1().getCurrentRow().getAttribute("OthDtlTypId") != null)
        {
            String hoOrgId = (String) resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
            String cldId = (String) resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
            Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
            String orgId = (String) resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");

            String empDoc = getOrgHcmEmpPrf().getCurrentRow().getAttribute("DocId").toString();
            //Object dtlType = getOrgHcmEmpOthDtlVO1().getCurrentRow().getAttribute("OthDtlTypId");
            RowQualifier rq = new RowQualifier(getOrgHcmEmpOthDtlVO1());
            String query =
                "CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId + "' and OrgId='" + orgId +
                "' and EmpDocNo='" + docNo + "' and DocId = '" + empDoc + "' and OthDtlTypId=" + dtlType;
            rq.setWhereClause(query);
            Row[] fr = getOrgHcmEmpOthDtlVO1().getFilteredRows(rq);
            for (Row r : fr)
            {
                System.out.println("Row=" + r + " and current row=" + this.getOrgHcmEmpOthDtlVO1().getCurrentRow());
                if (!(r.equals(getOrgHcmEmpOthDtlVO1().getCurrentRow())))
                    return "Y";
            }
            return "N";
        }
        return "N";
    }

    /** To Validate Document Issue date. in Other Details TAB */
    public String chDockIssuDt(Timestamp newIssueDate, Integer dtlType)
    {
        String hoOrgId = (String) resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String cldId = (String) resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String orgId = (String) resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");

        String empDoc = getOrgHcmEmpPrf().getCurrentRow().getAttribute("DocId").toString();
        Date oldExpdate = null;
        Date newDate = null;
        try
        {
            newDate = newIssueDate.dateValue();
        }
        catch (SQLException e) {
        }
        RowQualifier rq = new RowQualifier(getOrgHcmEmpOthDtlVO1());
        String query =
            "CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId + "' and OrgId='" + orgId +
            "' and DocId = '" + empDoc + "' and OthDtlTypId=" + dtlType;
        rq.setWhereClause(query);
        Row[] fr = getOrgHcmEmpOthDtlVO1().getFilteredRows(rq);
        if (fr.length > 0)
        {
            for (Row r : fr)
            {
                if (!(r.equals(getOrgHcmEmpOthDtlVO1().getCurrentRow())))
                {
                    Timestamp oldExpDt = (Timestamp) r.getAttribute("DocExpDt");
                    try
                    {
                        oldExpdate = oldExpDt.dateValue();
                    }
                    catch (SQLException e) {
                    }
                    if (newDate.compareTo(oldExpdate) <= 0)
                    {
                        return "Y";
                    }
                }
            }
            return "N";
        }
        return "N";

    }


    /**To Check Duplicate Dependent Name*/
    public String chkDuplicateDependentName(String nm)
    {
        String hoOrgId = (String) resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String cldId = (String) resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String orgId = (String) resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");

        String empDoc = getOrgHcmEmpPrf().getCurrentRow().getAttribute("DocId").toString();

        RowQualifier rq = new RowQualifier(getHcmEmpDpndDtlVO1());
        String query =
            "CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId + "' and OrgId='" + orgId +
            "' and DocId = '" + empDoc + "'";
        rq.setWhereClause(query);
        Row[] fr = getHcmEmpDpndDtlVO1().getFilteredRows(rq);
        if (fr.length > 0)
        {
            for (Row r : fr)
            {
                if (!r.equals(getHcmEmpDpndDtlVO1().getCurrentRow()))
                {
                    if (r.getAttribute("MemNm") != null)
                    {
                        String oldNm = r.getAttribute("MemNm").toString();
                        if (oldNm.toUpperCase().equalsIgnoreCase(nm.toUpperCase()))
                        {
                            return "Y";
                        }
                    }
                }
            }
            return "N";
        }
        return "N";
    }

    /**To attch document of emp*/
    public String createAttchmntRow(String cldId, Integer slcId, String hoOrgId, String orgId, String contentTyp,
                                    String fileNm, String extn)
    {

        String path = getUpFilePath(slcId);
        System.out.println("path " + path);

        String fileId = getUpFileId(cldId, slcId, hoOrgId, orgId, null);
        System.out.println("fileId " + fileId);

        Row r = getHcmEmpDocAttchVO1().createRow();

        System.out.println("contentTyp " + contentTyp);
        r.setAttribute("AttchFlExtn", contentTyp);
        r.setAttribute("DispFlNm", fileNm);
        r.setAttribute("AttchFlNm", fileId);
        r.setAttribute("AttchFlPath", path + fileId + extn);

        getHcmEmpDocAttchVO1().insertRow(r);
        // getHcmEmpDocAttchVO1().executeQuery();


        return path + fileId;
    }

    /**
     * Method to get default file location
     * **/
    public String getUpFilePath(Integer slcId)
    {
        Object fnRetVal;

        try
        {
            fnRetVal = callStoredFunction(Types.VARCHAR, "APP.FN_GET_APP_DOC_ATTACH_PATH(?)", new Object[]
            {
                slcId
            });

            if (fnRetVal != null)
            {

                if (fnRetVal.equals(-1))
                {
                    showFacesMsg("Error while fetching file path details", null, FacesMessage.SEVERITY_ERROR, null);
                }

                return fnRetVal.toString();
            }

        }
        catch (Exception e) {

            e.printStackTrace();

        }
        showFacesMsg("Error while fetching file path details", null, FacesMessage.SEVERITY_ERROR, null);

        return null;
    }

    /**
     * Method to get system generated file no
     * **/
    public String getUpFileId(String cldId, Integer slcId, String hoOrgId, String orgId, String tabNm)
    {

        Object fnRetVal;

        try
        {
            fnRetVal = callStoredFunction(Types.VARCHAR, "APP.FN_APP_GEN_FILE_ATTCH_ID(?,?,?,?,?)", new Object[]
            {
                slcId, cldId, hoOrgId, orgId, "HCM$EMP$DOC$ATTCH"
            });

            if (fnRetVal != null)
            {

                if (fnRetVal.equals(-1))
                {
                    showFacesMsg("Error while fetching file Id details", null, FacesMessage.SEVERITY_ERROR, null);
                }

                return fnRetVal.toString();
            }

        }
        catch (Exception e) {

            e.printStackTrace();

        }
        showFacesMsg("Error while fetching file Id details", null, FacesMessage.SEVERITY_ERROR, null);

        return "0";
    }


    /**
     *Method to delete the attached file in the application
     * @param path
     */
    public void deleteAttachFileRow(String path)
    {
        RowSetIterator rowSetIterator = null;
        try
        {
            //System.out.println("File path in AMimpl : " + path);
            String filePath = "";
            String fileNm = "", cldId = "", horgId = "", docId = "";
            int slocId = 1;
            ViewObjectImpl attch1 = this.getHcmEmpDocAttchVO1();
            Row[] rows = attch1.getFilteredRows("AttchFlPath", path);
            System.out.println(rows.length);
            if (rows.length > 0)
            {
                fileNm = (String) rows[0].getAttribute("AttchFlNm");
                cldId = (String) rows[0].getAttribute("CldId");
                horgId = (String) rows[0].getAttribute("HoOrgId");
                slocId = Integer.parseInt(rows[0].getAttribute("SlocId").toString());
                docId = (String) rows[0].getAttribute("DocId");
            }
            rowSetIterator = attch1.getRowSetIterator();
            Key key = new Key(new Object[]
                {
                    fileNm, cldId, docId, horgId, slocId
                });
            Row[] ro = rowSetIterator.findByKey(key, 1);
            //System.out.println("Filtered Row : "+ro.length);
            Row row = rowSetIterator.findByKey(key, 1)[0];
            rowSetIterator.setCurrentRow(row);
            Row r = this.getHcmEmpDocAttchVO1().getCurrentRow();
            filePath = (String) r.getAttribute("AttchFlPath");
            //System.out.println("Current Row File Path : "+filePath);
            filePath = (String) row.getAttribute("AttchFlPath");
            //System.out.println("Row File Path : "+filePath);
            File f = new File(filePath);
            if (f.exists())
            {
                boolean success = f.delete();
                System.out.println("File Deleted");
            }
        }
        catch (Exception x) {

            System.err.format("%s: no such" + " file or directory%n", path);
        }
        rowSetIterator.removeCurrentRow();
    }


    /**To Check Duplicate User Name For Employee*/

    public String checkDuplicateUser(Integer usrId)
    {
        RowSetIterator empItr = getOrgHcmEmpPrf().createRowSetIterator(null);
        while (empItr.hasNext())
        {
            Row next = empItr.next();
            if (!next.equals(getOrgHcmEmpPrf().getCurrentRow()))
            {
                if (next.getAttribute("UsrId") != null && next.getAttribute("UsrId") != " ")
                {
                    if (next.getAttribute("UsrId").equals(usrId))
                    {
                        return "Y";
                    }
                }
            }

        }
        return "N";
    }

    /**To Validate Duplicate medical Issue*/
    public String chkDuplicateMedicalIssue(String issuName)
    {
        String hoOrgId = (String) resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String cldId = (String) resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String orgId = (String) resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");

        String empDoc = getOrgHcmEmpPrf().getCurrentRow().getAttribute("DocId").toString();

        RowQualifier rq = new RowQualifier(getHcmEmpMdclDtlVO1());
        String query =
            "CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId + "' and OrgId='" + orgId +
            "' and DocId = '" + empDoc + "'";
        rq.setWhereClause(query);
        Row[] fr = getHcmEmpMdclDtlVO1().getFilteredRows(rq);
        if (fr.length > 0)
        {
            for (Row r : fr)
            {
                if (!r.equals(getHcmEmpMdclDtlVO1().getCurrentRow()))
                {
                    if (r.getAttribute("MdclIssueNm") != null)
                    {
                        String oldNm = r.getAttribute("MdclIssueNm").toString().trim();
                        if (oldNm.toUpperCase().trim().equalsIgnoreCase(issuName.toUpperCase().trim()))
                        {
                            return "Y";
                        }
                    }
                }
            }
            return "N";
        }
        return "N";
    }

    public void showFacesMsg(String msgHdr, String msgDtl, javax.faces.application.FacesMessage.Severity msgSeverity,
                             String msgMode)
    {

        FacesMessage msg = new FacesMessage(msgHdr);
        msg.setDetail(msgDtl);
        msg.setSeverity(msgSeverity);
        FacesContext.getCurrentInstance().addMessage(null, msg);

    }

    //  for Cost Center Service.....
    public AppCostCenterServiceAMImpl getAppAM()
    {
        String appModuleName = "appCostCenterSevice.model.service.AppCostCenterServiceAM";
        String appModuleConfig = "AppCostCenterServiceAMLocal";
        return (AppCostCenterServiceAMImpl) Configuration.createRootApplicationModule(appModuleName, appModuleConfig);
    }


    public void releaseAppAM(AppCostCenterServiceAMImpl appCostCenter)
    {
        Configuration.releaseRootApplicationModule((ApplicationModule) appCostCenter, true);
    }

    @Override
    protected void finalize() throws Throwable
    {
        releaseAppAM(getAppAM());
        super.finalize();
    }


    /**
     * Method which will let us know whether cost center is applicable for this current document or not
     */
    public Boolean chkCcApplicableOrNot()
    {
        Boolean val = false;

        ViewObjectImpl appCcDoc1 = this.getAppCcDoc1();
        appCcDoc1.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        appCcDoc1.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        appCcDoc1.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        appCcDoc1.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        appCcDoc1.setNamedWhereClauseParam("BindDocId", 28509);
        appCcDoc1.executeQuery();

        Row[] allRowsInRange = appCcDoc1.getAllRowsInRange();
        if (allRowsInRange.length > 0)
        {
            val = true;
        }

        return val;
    }


    /**
     * Method which will set Global Parameter Values and will be called before opening AppCostCenterServicesTF
     */
    public void declareGlblValuesForCC()
    {
        ViewObjectImpl appCcVwVO1 = this.getAppCcVw1();
        appCcVwVO1.setRangeSize(-1);

        appCcVwVO1.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        appCcVwVO1.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        appCcVwVO1.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        appCcVwVO1.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        appCcVwVO1.setNamedWhereClauseParam("BindDocId", 28509);

        Row currentRow = this.getHcmEmpSal().getCurrentRow();
        if (currentRow != null)
        {
            for (int i = 1; i <= 5; i++)
            {
                appCcVwVO1.setNamedWhereClauseParam("BindCcPos", i);
                appCcVwVO1.executeQuery();

                Row[] allRowsInRange = appCcVwVO1.getAllRowsInRange();
                if (allRowsInRange.length > 0)
                {
                    String columnName = null;
                    for (Row r : allRowsInRange)
                    {
                        AttributeDef[] attributeDef = this.getHcmEmpSal().getAttributeDefs();

                        for (int j = 0; j < attributeDef.length; j++)
                        {
                            /*  System.out.println("j value is " + attributeDef[j].getColumnName());
                               System.out.println("------------ null value is " + r.getAttribute("DbobColNm"));
                               System.out.println("attributeDef[j].getColumnName().equalsIgnoreCase(r.getAttribute(\"DbobColNm\").toString()) " +
                                                  attributeDef[j].getColumnName().equals(r.getAttribute("DbobColNm")));
                               */
                            if (attributeDef[j].getColumnName() != null &&
                                attributeDef[j].getColumnName().equals(r.getAttribute("DbobColNm")))
                            {
                                columnName = attributeDef[j].getName();
                            }
                        }
                        System.out.println("Column Name is " + columnName);

                        if (columnName != null)
                        {

                            System.out.println("i is " + i + " Cost center Value is " +
                                               currentRow.getAttribute(columnName));


                            RequestContext.getCurrentInstance().getPageFlowScope().put("P_CC_LEVEL" + i,
                                                                                       currentRow.getAttribute(columnName));
                        }
                    }
                }
                else
                {
                    System.out.println("i is" + i + " cost center value is null");

                    RequestContext.getCurrentInstance().getPageFlowScope().put("P_CC_LEVEL" + i, null);

                }
            }
        }
    }


    /**
     * Method which will be called when user click on generate Cost Ceneter based on header wise
     */
    public void generateCostCenterHeaderWise()
    {
        if (chkCcApplicableOrNot())
        {
            AppCostCenterServiceAMImpl amCC = getAppAM();
            /*
          * @param cldId
          * @param slocId
          * @param hoOrgId
          * @param orgId
          * @param tempId
          * @param tempSrc
          * @param docId
          * @param usrId
          * @param tempCcId
          * @param amount
          * @param pCcLevel1
          * @param pCcLevel2
          * @param pCcLevel3
          * @param pCcLevel4
          * @param pCcLevel5
          */

            Row currentRow = this.getOrgHcmEmpPrf().getCurrentRow();
            if (currentRow != null)
            {
                declareGlblValuesForCC();

                amCC.generateCostCenterApp(EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                           EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                           currentRow.getAttribute("DocId").toString(), "H", 28509,
                                           EbizParams.GLBL_APP_USR(), currentRow.getAttribute("DocId").toString(),
                                           new Number(0), (String) resolvEl("#{pageFlowScope.P_CC_LEVEL1}"),
                                           (String) resolvEl("#{pageFlowScope.P_CC_LEVEL2}"),
                                           (String) resolvEl("#{pageFlowScope.P_CC_LEVEL3}"),
                                           (String) resolvEl("#{pageFlowScope.P_CC_LEVEL4}"),
                                           (String) resolvEl("#{pageFlowScope.P_CC_LEVEL5}"));

            }
        }
    }


    /**
     * Method which will push data of Cost Center from TempCostCenter to HcmEmpCostCenter Table
     */
    public void sendDateFromTempCcToSlsRmaCc()
    {
        System.out.println("in push date in to hcmcostcenter");
        if (chkCcApplicableOrNot())
        {
            Object empDocId = this.getOrgHcmEmpPrf().getCurrentRow().getAttribute("DocId");
            System.out.println(empDocId + " <<< Emp DocId for cost center");
            if (empDocId != null)
            {
                try
                {
                    callStoredFunction(Types.VARCHAR, "APP.FN_SAVE_COST_CENTER(?,?,?,?,?,?,?,?)", new Object[]
                    {
                        EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_HO_ORG_ID(),
                        EbizParams.GLBL_APP_USR_ORG(), 28509, "HCM", "HCM$EMP$COST$CENTER", empDocId
                    });
                }
                catch (Exception e) {

                    e.printStackTrace();
                }
            }
        }
    }


    /**
     * Container's getter for HcmEmpSalProc1.
     * @return HcmEmpSalProc1
     */
    public ViewObjectImpl getHcmEmpSalProc()
    {
        return (ViewObjectImpl) findViewObject("HcmEmpSalProc");
    }

    /**
     * Container's getter for ChkweekOffTypeVO1.
     * @return ChkweekOffTypeVO1
     */
    public ViewObjectImpl getChkweekOffTypeVO1()
    {
        return (ViewObjectImpl) findViewObject("ChkweekOffTypeVO1");
    }

    /**
     * Container's getter for HcmEmpSubSal1.
     * @return HcmEmpSubSal1
     */
    public ViewObjectImpl getHcmEmpSubSal()
    {
        return (ViewObjectImpl) findViewObject("HcmEmpSubSal");
    }

    /**
     * Container's getter for HcmEmpSubSalVL1.
     * @return HcmEmpSubSalVL1
     */
    public ViewLinkImpl getHcmEmpSubSalVL1()
    {
        return (ViewLinkImpl) findViewLink("HcmEmpSubSalVL1");
    }

    /**
     * Container's getter for LovSubSalType1.
     * @return LovSubSalType1
     */
    public ViewObjectImpl getLovSubSalType()
    {
        return (ViewObjectImpl) findViewObject("LovSubSalType");
    }


    /**
     * Container's getter for OrgHcmEmpOthDtlVO1.
     * @return OrgHcmEmpOthDtlVO1
     */
    public ViewObjectImpl getOrgHcmEmpOthDtlVO1()
    {
        return (ViewObjectImpl) findViewObject("OrgHcmEmpOthDtlVO1");
    }

    /**
     * Container's getter for EmpProfileToOtherDetailVL1.
     * @return EmpProfileToOtherDetailVL1
     */
    public ViewLinkImpl getEmpProfileToOtherDetailVL1()
    {
        return (ViewLinkImpl) findViewLink("EmpProfileToOtherDetailVL1");
    }

    /**
     * Container's getter for HcmEmpDocAttchVO1.
     * @return HcmEmpDocAttchVO1
     */
    public ViewObjectImpl getHcmEmpDocAttchVO1()
    {
        return (ViewObjectImpl) findViewObject("HcmEmpDocAttchVO1");
    }

    /**
     * Container's getter for EmpToAttachedDocVL1.
     * @return EmpToAttachedDocVL1
     */
    public ViewLinkImpl getEmpToAttachedDocVL1()
    {
        return (ViewLinkImpl) findViewLink("EmpToAttachedDocVL1");
    }

    /**
     * Container's getter for HcmEmpDpndDtlVO1.
     * @return HcmEmpDpndDtlVO1
     */
    public ViewObjectImpl getHcmEmpDpndDtlVO1()
    {
        return (ViewObjectImpl) findViewObject("HcmEmpDpndDtlVO1");
    }

    /**
     * Container's getter for EmpProfileToEmpDependentDetailVL1.
     * @return EmpProfileToEmpDependentDetailVL1
     */
    public ViewLinkImpl getEmpProfileToEmpDependentDetailVL1()
    {
        return (ViewLinkImpl) findViewLink("EmpProfileToEmpDependentDetailVL1");
    }

    /**
     * Container's getter for OrgCntryVO1.
     * @return OrgCntryVO1
     */
    public ViewObjectImpl getOrgCntryVO1()
    {
        return (ViewObjectImpl) findViewObject("OrgCntryVO1");
    }

    /**
     * Container's getter for HcmEmpMdclDtlVO1.
     * @return HcmEmpMdclDtlVO1
     */
    public ViewObjectImpl getHcmEmpMdclDtlVO1()
    {
        return (ViewObjectImpl) findViewObject("HcmEmpMdclDtlVO1");
    }

    /**
     * Container's getter for EmpTOMedicalDetailVL1.
     * @return EmpTOMedicalDetailVL1
     */
    public ViewLinkImpl getEmpTOMedicalDetailVL1()
    {
        return (ViewLinkImpl) findViewLink("EmpTOMedicalDetailVL1");
    }

    /**
     * Container's getter for RelievingDtCalDualVO1.
     * @return RelievingDtCalDualVO1
     */
    public ViewObjectImpl getRelievingDtCalDualVO1()
    {
        return (ViewObjectImpl) findViewObject("RelievingDtCalDualVO1");
    }

    /**
     * Container's getter for MaxSalProc1.
     * @return MaxSalProc1
     */
    public ViewObjectImpl getMaxSalProc1()
    {
        return (ViewObjectImpl) findViewObject("MaxSalProc1");
    }

    /**
     * Container's getter for LovChkFroGrdDesigLinking1.
     * @return LovChkFroGrdDesigLinking1
     */
    public ViewObjectImpl getLovChkFroGrdDesigLinking1()
    {

        return (ViewObjectImpl) findViewObject("LovChkFroGrdDesigLinking1");
    }

    /**
     * Container's getter for LovGrdNm1.
     * @return LovGrdNm1
     */
    public ViewObjectImpl getLovGrdNm1()
    {
        return (ViewObjectImpl) findViewObject("LovGrdNm1");
    }

    /**
     * Container's getter for GrdSalReff1.
     * @return GrdSalReff1
     */
    public ViewObjectImpl getGrdSalReff1()
    {
        return (ViewObjectImpl) findViewObject("GrdSalReff1");
    }

    /**
     * Container's getter for GrdSal1.
     * @return GrdSal1
     */
    public ViewObjectImpl getGrdSal1()
    {
        return (ViewObjectImpl) findViewObject("GrdSal1");
    }

    /**
     * Container's getter for AppCcVw1.
     * @return AppCcVw1
     */
    public ViewObjectImpl getAppCcVw1()
    {
        return (ViewObjectImpl) findViewObject("AppCcVw1");
    }

    /**
     * Container's getter for AppCcDoc1.
     * @return AppCcDoc1
     */
    public ViewObjectImpl getAppCcDoc1()
    {
        return (ViewObjectImpl) findViewObject("AppCcDoc1");
    }

    /**
     * Container's getter for HcmEmpExpVo1.
     * @return HcmEmpExpVo1
     */
    public ViewObjectImpl getHcmEmpExpVo1()
    {
        return (ViewObjectImpl) findViewObject("HcmEmpExpVo1");
    }

    /**
     * Container's getter for OrgHcmEmpPrfToHcmExp1.
     * @return OrgHcmEmpPrfToHcmExp1
     */
    public ViewLinkImpl getOrgHcmEmpPrfToHcmExp1()
    {
        return (ViewLinkImpl) findViewLink("OrgHcmEmpPrfToHcmExp1");
    }

    /**
     * Container's getter for HcmEmpLang2.
     * @return HcmEmpLang2
     */
    public ViewObjectImpl getHcmEmpLang1()
    {
        return (ViewObjectImpl) findViewObject("HcmEmpLang1");
    }

    /**
     * Container's getter for OrgHcmEmpPrfToHcmLangVL2.
     * @return OrgHcmEmpPrfToHcmLangVL2
     */
    public ViewLinkImpl getOrgHcmEmpPrfToHcmLangVL2()
    {
        return (ViewLinkImpl) findViewLink("OrgHcmEmpPrfToHcmLangVL2");
    }

    /**
     * Container's getter for LovLangNm1.
     * @return LovLangNm1
     */
    public ViewObjectImpl getLovLangNm1()
    {
        String OrgId = EbizParams.GLBL_APP_USR_ORG();
        String HoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String CldId = EbizParams.GLBL_APP_CLD_ID();
        Integer SlocId = EbizParams.GLBL_APP_SERV_LOC();
        ViewObjectImpl vo = (ViewObjectImpl) findViewObject("LovLangNm1");
        vo.setNamedWhereClauseParam("BIND_CLD_ID", CldId);
        vo.setNamedWhereClauseParam("BIND_HO_ORG_ID", HoOrgId);
        vo.setNamedWhereClauseParam("BIND_ORG_ID", OrgId);
        vo.setNamedWhereClauseParam("BIND_SLOC_ID", SlocId);
        vo.executeQuery();
        return vo;
        // return (ViewObjectImpl) findViewObject("LovLangNm1");
    }

    /**
     * Container's getter for HcmEmpQuali1.
     * @return HcmEmpQuali1
     */
    public ViewObjectImpl getHcmEmpQuali1()
    {
        return (ViewObjectImpl) findViewObject("HcmEmpQuali1");
    }

    /**
     * Container's getter for OrgHcmEmpPrfToHcmEmpQualVL1.
     * @return OrgHcmEmpPrfToHcmEmpQualVL1
     */
    public ViewLinkImpl getOrgHcmEmpPrfToHcmEmpQualVL1()
    {
        return (ViewLinkImpl) findViewLink("OrgHcmEmpPrfToHcmEmpQualVL1");
    }

    /**
     * Container's getter for LovCourcesNm1.
     * @return LovCourcesNm1
     */
    public ViewObjectImpl getLovCourcesNm1()
    {
        String OrgId = EbizParams.GLBL_APP_USR_ORG();
        String HoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String CldId = EbizParams.GLBL_APP_CLD_ID();
        Integer SlocId = EbizParams.GLBL_APP_SERV_LOC();
        ViewObjectImpl vo = (ViewObjectImpl) findViewObject("LovCourcesNm1");
        vo.setNamedWhereClauseParam("BIND_CLD_ID", CldId);
        vo.setNamedWhereClauseParam("BIND_HO_ORG_ID", HoOrgId);
        vo.setNamedWhereClauseParam("BIND_ORG_ID", OrgId);
        vo.setNamedWhereClauseParam("BIND_SLOC_ID", SlocId);
        vo.executeQuery();
        return vo;
        //return (ViewObjectImpl) findViewObject("LovCourcesNm1");
    }

    public void setValidStartNdEndDtFrCTC()
    {
        ViewObjectImpl empCtcVo = this.getHcmEmpCtcVO1();
        ViewObjectImpl empSalCtcVo = this.getHcmEmpCtcSalVO1();
        empSalCtcVo.getCurrentRow().setAttribute("ValidStrtDt", empCtcVo.getCurrentRow().getAttribute("ValidStrtDt"));
        empSalCtcVo.getCurrentRow().setAttribute("ValidEndDt", empCtcVo.getCurrentRow().getAttribute("ValidEndDt"));
        this.getDBTransaction().postChanges();
    }

    /**
     * Container's getter for LovEmpNmForReffrance1.
     * @return LovEmpNmForReffrance1
     */
    public ViewObjectImpl getLovEmpNmForReffrance1()
    {
        return (ViewObjectImpl) findViewObject("LovEmpNmForReffrance1");
    }

    /**
     * Container's getter for OrgHcmEmpNoticePrdDtl1.
     * @return OrgHcmEmpNoticePrdDtl1
     */
    public ViewObjectImpl getOrgHcmEmpNoticePrdDtl1()
    {
        return (ViewObjectImpl) findViewObject("OrgHcmEmpNoticePrdDtl1");
    }

    /**
     * Container's getter for HcmEmpCtcVO1.
     * @return HcmEmpCtcVO1
     */
    public ViewObjectImpl getHcmEmpCtcVO1()
    {
        return (ViewObjectImpl) findViewObject("HcmEmpCtcVO1");
    }

    /**
     * Container's getter for HcmEmpCtcSalVO1.
     * @return HcmEmpCtcSalVO1
     */
    public ViewObjectImpl getHcmEmpCtcSalVO1()
    {
        return (ViewObjectImpl) findViewObject("HcmEmpCtcSalVO1");
    }

    /**
     * Container's getter for HcmEmpCtcTOHcmEmpCtcSalVL1.
     * @return HcmEmpCtcTOHcmEmpCtcSalVL1
     */
    public ViewLinkImpl getHcmEmpCtcTOHcmEmpCtcSalVL1()
    {
        return (ViewLinkImpl) findViewLink("HcmEmpCtcTOHcmEmpCtcSalVL1");
    }

    /**
     * Container's getter for HcmEmpCtcSalRefVO1.
     * @return HcmEmpCtcSalRefVO1
     */
    public ViewObjectImpl getHcmEmpCtcSalRefVO1()
    {
        return (ViewObjectImpl) findViewObject("HcmEmpCtcSalRefVO1");
    }

    /**
     * Container's getter for HcmEmpCtcSalTOHcmCtcSalRefVL1.
     * @return HcmEmpCtcSalTOHcmCtcSalRefVL1
     */
    public ViewLinkImpl getHcmEmpCtcSalTOHcmCtcSalRefVL1()
    {
        return (ViewLinkImpl) findViewLink("HcmEmpCtcSalTOHcmCtcSalRefVL1");
    }

    public void calculateNewCTCAmnt(BigDecimal amount)
    {

        String OrgId = EbizParams.GLBL_APP_USR_ORG();
        String HoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String CldId = EbizParams.GLBL_APP_CLD_ID();
        Integer SlocId = EbizParams.GLBL_APP_SERV_LOC();
        ViewObjectImpl hcmCtcSalVO = this.getHcmEmpCtcSalVO1();
        //ViewObjectImpl hcmCtcVO = this.getHcmEmpCtcSalVO1();


        String DocId = (String) hcmCtcSalVO.getCurrentRow().getAttribute("DocId");
        BigDecimal zero = BigDecimal.ZERO;
        BigDecimal totlInrmntAmnt = BigDecimal.ZERO;
        //String salId = (String) hcminmntSummVo.getCurrentRow().getAttribute("SalId");
        // String decFlag = (String) hcminmntSummVo.getCurrentRow().getAttribute("DecrFlag");
        BigDecimal prevSlry = BigDecimal.ZERO;
        ViewObjectImpl hcmCtcVO = this.getHcmEmpCtcSalVO1();
        RowQualifier rq = new RowQualifier(hcmCtcVO);
        String querry =
            "CldId='" + CldId + "' and SlocId=" + SlocId + " and HoOrgId='" + HoOrgId + "' and OrgId='" + OrgId +
            "' and DocId = '" + DocId + "'";
        rq.setWhereClause(querry);
        Row row[] = hcmCtcVO.getFilteredRows(rq);
        if (row.length > 0)
        {
            prevSlry = new BigDecimal(row[0].getAttribute("RemainAmt").toString());
        }
        totlInrmntAmnt = prevSlry.subtract(amount);

        hcmCtcVO.getCurrentRow().setAttribute("RemainAmt", totlInrmntAmnt);


        // calulating percentage on all refrence component//


        //        ViewObjectImpl reffVO = this.getHcmEmpCtcSalRefVO1();
        //        RowQualifier rowQualifierfrReff = new RowQualifier(reffVO);
        //        String Qry =
        //            "CldId='" + CldId + "' and SlocId=" + SlocId + " and HoOrgId='" + HoOrgId + "' and OrgId='" + OrgId +
        //            "' and DocId = '" + DocId + "'"; //RefSalId
        //        rowQualifierfrReff.setWhereClause(Qry);
        //        Row newRw[] = reffVO.getFilteredRows(rowQualifierfrReff);
        //        if (newRw.length > 0) {
        //            for (int i = 0; i < newRw.length; i++) {
        //                BigDecimal incrPerc = new BigDecimal(newRw[i].getAttribute("CompPercVal").toString());
        //                String RemainAmtReff = (String) newRw[i].getAttribute("RemainAmt");
        //                BigDecimal inrmntFrmEmpSal = calulateSalaryCtc(incrPerc, DocId, totlInrmntAmnt);
        //                hcmCtcVO.getCurrentRow().setAttribute("RemainAmt", totlInrmntAmnt);
        //                hcmCtcVO.getCurrentRow().setAttribute("RemainAmt", totlInrmntAmnt);
        //            }
        //        }
        //
        //
        //
        //    }
        //    public BigDecimal calulateSalaryCtc( BigDecimal incrPerc, String DocId,BigDecimal totlInrmntAmnt)
        //    {
        //        System.out.println("calulateSalary");
        //        BigDecimal remainamtper = BigDecimal.ZERO;
        //        remainamtper = (incrPerc.multiply(totlInrmntAmnt)).divide(new BigDecimal(100));
        //        return remainamtper;
        //    }
        //

    }
}
