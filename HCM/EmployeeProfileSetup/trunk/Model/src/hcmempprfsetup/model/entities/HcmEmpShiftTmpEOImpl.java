package hcmempprfsetup.model.entities;

import java.math.BigDecimal;
import java.math.BigInteger;

import java.sql.Timestamp;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Dec 23 11:31:51 PST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class HcmEmpShiftTmpEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CldId,
        SlocId,
        HoOrgId,
        OrgId,
        DocId,
        EmpCode,
        AttenDt,
        ShiftId,
        ShiftNm,
        ShiftStrtTm,
        ShiftEndTm,
        SeqNumber;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int EMPCODE = AttributesEnum.EmpCode.index();
    public static final int ATTENDT = AttributesEnum.AttenDt.index();
    public static final int SHIFTID = AttributesEnum.ShiftId.index();
    public static final int SHIFTNM = AttributesEnum.ShiftNm.index();
    public static final int SHIFTSTRTTM = AttributesEnum.ShiftStrtTm.index();
    public static final int SHIFTENDTM = AttributesEnum.ShiftEndTm.index();
    public static final int SEQNUMBER = AttributesEnum.SeqNumber.index();

    /**
     * This is the default constructor (do not remove).
     */
    public HcmEmpShiftTmpEOImpl() {
    }

    /**
     * Gets the attribute value for CldId, using the alias name CldId.
     * @return the value of CldId
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CldId.
     * @param value value to set the CldId
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for SlocId, using the alias name SlocId.
     * @return the value of SlocId
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for SlocId.
     * @param value value to set the SlocId
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for HoOrgId, using the alias name HoOrgId.
     * @return the value of HoOrgId
     */
    public String getHoOrgId() {
        return (String) getAttributeInternal(HOORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for HoOrgId.
     * @param value value to set the HoOrgId
     */
    public void setHoOrgId(String value) {
        setAttributeInternal(HOORGID, value);
    }

    /**
     * Gets the attribute value for OrgId, using the alias name OrgId.
     * @return the value of OrgId
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for OrgId.
     * @param value value to set the OrgId
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for DocId, using the alias name DocId.
     * @return the value of DocId
     */
    public String getDocId() {
        return (String) getAttributeInternal(DOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for DocId.
     * @param value value to set the DocId
     */
    public void setDocId(String value) {
        setAttributeInternal(DOCID, value);
    }

    /**
     * Gets the attribute value for EmpCode, using the alias name EmpCode.
     * @return the value of EmpCode
     */
    public BigInteger getEmpCode() {
        return (BigInteger) getAttributeInternal(EMPCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for EmpCode.
     * @param value value to set the EmpCode
     */
    public void setEmpCode(BigInteger value) {
        setAttributeInternal(EMPCODE, value);
    }

    /**
     * Gets the attribute value for AttenDt, using the alias name AttenDt.
     * @return the value of AttenDt
     */
    public Timestamp getAttenDt() {
        return (Timestamp) getAttributeInternal(ATTENDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for AttenDt.
     * @param value value to set the AttenDt
     */
    public void setAttenDt(Timestamp value) {
        setAttributeInternal(ATTENDT, value);
    }

    /**
     * Gets the attribute value for ShiftId, using the alias name ShiftId.
     * @return the value of ShiftId
     */
    public String getShiftId() {
        return (String) getAttributeInternal(SHIFTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ShiftId.
     * @param value value to set the ShiftId
     */
    public void setShiftId(String value) {
        setAttributeInternal(SHIFTID, value);
    }

    /**
     * Gets the attribute value for ShiftNm, using the alias name ShiftNm.
     * @return the value of ShiftNm
     */
    public String getShiftNm() {
        return (String) getAttributeInternal(SHIFTNM);
    }

    /**
     * Sets <code>value</code> as the attribute value for ShiftNm.
     * @param value value to set the ShiftNm
     */
    public void setShiftNm(String value) {
        setAttributeInternal(SHIFTNM, value);
    }

    /**
     * Gets the attribute value for ShiftStrtTm, using the alias name ShiftStrtTm.
     * @return the value of ShiftStrtTm
     */
    public Timestamp getShiftStrtTm() {
        return (Timestamp) getAttributeInternal(SHIFTSTRTTM);
    }

    /**
     * Sets <code>value</code> as the attribute value for ShiftStrtTm.
     * @param value value to set the ShiftStrtTm
     */
    public void setShiftStrtTm(Timestamp value) {
        setAttributeInternal(SHIFTSTRTTM, value);
    }

    /**
     * Gets the attribute value for ShiftEndTm, using the alias name ShiftEndTm.
     * @return the value of ShiftEndTm
     */
    public Timestamp getShiftEndTm() {
        return (Timestamp) getAttributeInternal(SHIFTENDTM);
    }

    /**
     * Sets <code>value</code> as the attribute value for ShiftEndTm.
     * @param value value to set the ShiftEndTm
     */
    public void setShiftEndTm(Timestamp value) {
        setAttributeInternal(SHIFTENDTM, value);
    }

    /**
     * Gets the attribute value for SeqNumber, using the alias name SeqNumber.
     * @return the value of SeqNumber
     */
    public BigDecimal getSeqNumber() {
        return (BigDecimal) getAttributeInternal(SEQNUMBER);
    }

    /**
     * Sets <code>value</code> as the attribute value for SeqNumber.
     * @param value value to set the SeqNumber
     */
    public void setSeqNumber(BigDecimal value) {
        setAttributeInternal(SEQNUMBER, value);
    }

    /**
     * @param cldId key constituent
     * @param slocId key constituent
     * @param hoOrgId key constituent
     * @param orgId key constituent
     * @param docId key constituent
     * @param empCode key constituent
     * @param attenDt key constituent
     * @param shiftId key constituent
     * @param shiftNm key constituent
     * @param shiftStrtTm key constituent
     * @param shiftEndTm key constituent
     * @param seqNumber key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(String cldId, Integer slocId, String hoOrgId, String orgId, String docId,
                                       BigInteger empCode, Timestamp attenDt, String shiftId, String shiftNm,
                                       Timestamp shiftStrtTm, Timestamp shiftEndTm, BigDecimal seqNumber) {
        return new Key(new Object[] {
                       cldId, slocId, hoOrgId, orgId, docId, empCode, attenDt, shiftId, shiftNm, shiftStrtTm,
                       shiftEndTm, seqNumber
        });
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("hcmempprfsetup.model.entities.HcmEmpShiftTmpEO");
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
      //  super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
    }
}

