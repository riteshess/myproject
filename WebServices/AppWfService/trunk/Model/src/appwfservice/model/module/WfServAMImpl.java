package appwfservice.model.module;


import appwfservice.model.views.DualUserVOImpl;

import com.google.android.gcm.server.Message;
import com.google.android.gcm.server.Result;

import com.google.android.gcm.server.Sender;

import com.google.gson.Gson;

import java.io.File;

import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.SQLException;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javapns.Push;

import javapns.notification.PushedNotifications;

import oracle.adf.model.BindingContainer;
import oracle.adf.model.BindingContext;
import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.client.Configuration;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Apr 11 17:50:42 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class WfServAMImpl extends ApplicationModuleImpl {
    /**
     * This is the default constructor (do not remove).
     */
    public WfServAMImpl() {
    }
    private static int NUMBER = Types.INTEGER;
    private static int VARCHAR = Types.VARCHAR;
    Map manualData;
    private static final String GOOGLE_SERVER_KEY = "AIzaSyDoEJLL-4QpLdSYYEMOYBBxCwir4TSqo30";
    private static final String MESSAGE_KEY = "message";

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars,WfServAMImpl am) {
        CallableStatement st = null;
        try {
            st = am.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.executeUpdate();
            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                }
            }
        }
    }

    /**
     * Container's getter for LvlUserSelect1.
     * @return LvlUserSelect1
     */
    public ViewObjectImpl getLvlUserSelect1() {
        return (ViewObjectImpl)findViewObject("LvlUserSelect1");
    }

    /**
     * Container's getter for DualUser1.
     * @return DualUser1
     */
    public ViewObjectImpl getDualUser1() {
        return (ViewObjectImpl)findViewObject("DualUser1");
    }


    /**
     * Container's getter for AppSeczUrs1.
     * @return AppSeczUrs1
     */
    public ViewObjectImpl getAppSeczUrs1() {
        return (ViewObjectImpl)findViewObject("AppSeczUrs1");
    }


    public String checkIfUserIsAuthorisedToApprove(int usrId,String cldId,String orgId,int slocId,int docId,
                                                    int docTypId,int amou,WfServAMImpl am)  {
        oracle.jbo.domain.Number amount = new oracle.jbo.domain.Number(amou);
        String lvl="";
            System.out.println("Amount :"+amount);
            lvl =
                callStoredFunction(VARCHAR, "APP.WF_CAN_INT_USR_APRV(?,?,?,?,?,?,?)", new Object[] { slocId, orgId, cldId, docId ,usrId, amount, docTypId},am).toString();
            System.out.println(lvl+"---------------------------------");
        System.out.println("level is : "+lvl);
        if(lvl.equalsIgnoreCase("Y")){
            System.out.println("Returned true");
            return "Y";
        }else{
            return "N";    
        }
        
    }

    /**
     * Container's getter for LovRevertUsr.
     * @return LovRevertUsr
     */
    public ViewObjectImpl getLovRevertUsr() {
        return (ViewObjectImpl)findViewObject("LovRevertUsr");
    }

    //usrAction Approve,Reject,Revert,Forward
    public String docAction(String cldId,String orgId,int slocId,String horgId,String wfId,int docId,
                            int docTypId,String docTxnId,String amount,int usrId,String remark,int usrLvl,
                            int usrIdTo,int usrToLvl,String usrAction,String usr,String module){
        String result=null;
        WfServAMImpl am = getAm();
        if(usr.equals("Top")){
            try {
                if(module.equals("Finance") ){
                    //am.validateTempVouForGl(am, docTxnId, orgId, slocId, horgId, cldId, 1);
                    if(usrAction.equals("Approve")){
                    am.saveAsGL(am, docTxnId, usrId, horgId, cldId, orgId, slocId, 1, docTypId);
                    }
                    result = am.okButton(am,cldId, orgId, slocId, horgId, wfId, docId, docTypId, docTxnId, amount, usrId, remark,
                                usrLvl,usrIdTo, usrToLvl, usrAction);
                    System.out.println(result+"================================Result");
                }else{
                    result = am.okButton(am,cldId, orgId, slocId, horgId, wfId, docId, docTypId, docTxnId, amount, usrId, remark,
                                usrLvl,usrIdTo, usrToLvl, usrAction);
                    System.out.println("result of Workflow entry : "+result);
                    if(module.equals("Sales") && (result.equals("F") || result.equals("A"))){
                        System.out.println("Inner Top Sales");
                        Integer i = -1;
                        Object o = callStoredFunction(Types.INTEGER,"SLS.FN_UPDT_SO_DTLS_AFTR_WF_WS(?,?,?,?,?,?,?)",
                                           new Object[]{slocId,cldId,orgId,horgId,docTxnId,result,usrId}, am);
                        i = (o == null ? -1 : (Integer)o);    
                        System.out.println("Function Return================================================="+i);
                        if(i.equals(1)){
                            am.getDBTransaction().commit();
                        }else{
                            am.getDBTransaction().rollback();
                        }
                    }else{
                        if(result.equals("A")){
                            System.out.println("Inner Top MM");
                            Integer i = -1;
                            System.out.println(cldId+" "+slocId+" "+orgId+" "+docTxnId);
                            Object o = callStoredFunction(Types.INTEGER,"MM.MM_UPDT_PO_STAT_ON_APRV(?,?,?,?)",
                                               new Object[]{cldId,slocId,orgId,docTxnId}, am);
                            i = (o == null ? -1 : (Integer)o);    
                            System.out.println("Function Return================================================="+i);
                            if(i.equals(1)){
                                am.getDBTransaction().commit();
                            }else{
                                am.getDBTransaction().rollback();
                            }
                        }
                    }
                    System.out.println(result+"================================Result");
                }
            } catch (SQLException e) {
                System.out.println(e);
                am.getDBTransaction().rollback();
            }
        }else{
            try {
                if(module.equals("Finance") ){
                    //am.validateTempVouForGl(am, docTxnId, orgId, slocId, horgId, cldId, 1);
                    if(usrAction.equals("Approve")){
                    am.saveAsGL(am, docTxnId, usrId, horgId, cldId, orgId, slocId, 1, docTypId);
                    }
                    result =
                        am.okButtonDwn(am, cldId, orgId, slocId, horgId, wfId, docId, docTypId, docTxnId, amount, usrId,
                                       remark, usrLvl, usrIdTo, usrToLvl, usrAction);
                    System.out.println(result+"================================Result");
                }else{
                    result =
                        am.okButtonDwn(am, cldId, orgId, slocId, horgId, wfId, docId, docTypId, docTxnId, amount, usrId,
                                       remark, usrLvl, usrIdTo, usrToLvl, usrAction);
                    if(module.equals("Sales") && (result.equals("F") || result.equals("A"))){
                        System.out.println("Inner Lower Level");
                        Integer i = -1;
                        Object o = callStoredFunction(Types.INTEGER,"SLS.FN_UPDT_SO_DTLS_AFTR_WF_WS(?,?,?,?,?,?,?)",
                                           new Object[]{slocId,cldId,orgId,horgId,docTxnId,result,usrId}, am);
                        i = (o == null ? -1 : (Integer)o);    
                        if(i.equals(1)){
                            am.getDBTransaction().commit();
                        }else{
                            am.getDBTransaction().rollback();
                        }
                    }else{
                        if(result.equals("A")){
                            System.out.println("Inner Top MM");
                            Integer i = -1;
                            Object o = callStoredFunction(Types.INTEGER,"MM.MM_UPDT_PO_STAT_ON_APRV(?,?,?,?)",
                                               new Object[]{cldId,slocId,orgId,docTxnId}, am);
                            i = (o == null ? -1 : (Integer)o);    
                            System.out.println("Function Return================================================="+i);
                            if(i.equals(1)){
                                am.getDBTransaction().commit();
                            }else{
                                am.getDBTransaction().rollback();
                            }
                        }   
                    }
                    System.out.println(result+"================================Result");
                    //Work on Doc status here.
                }
            } catch (SQLException e) {
            }
        }
        releaseAm(am);
        am = null;
        return result;
    }

    @SuppressWarnings("unchecked")
    public String okButton(WfServAMImpl am,String cld_id,String org_id,int sloc_id,String horg_id,String wf_id,int doc_id,
                           int doc_type_id,String doc_txn_id,String amountt,int usr_id,String remark,
                           int level,int usrIdTo,int lvlTo,String usrAction) throws SQLException {
        String result=null;
        String action = "A";
        oracle.jbo.domain.Number amount =null;
        amount = new  oracle.jbo.domain.Number(amountt);        
        manualData = new HashMap();
        manualData.put("sloc_id", sloc_id);
        manualData.put("cld_id", cld_id);
        manualData.put("org_id", org_id);
        manualData.put("doc_id", doc_id);
        manualData.put("doc_type_id", doc_type_id);
        manualData.put("wf_id", wf_id);
        manualData.put("doc_txn_id", doc_txn_id);
        manualData.put("usr_id", usr_id);
        Integer usr_id_to=usr_id;
        Integer lvl_to=level;
        if (usrAction.equalsIgnoreCase("Approve")) {
            action = "A";
            //approved case
            result = saveOkButtonAction(am,usr_id_to,level,lvl_to,action,remark,amount,manualData);
        } else if (usrAction.equalsIgnoreCase("Reject")) {
            action = "R";
            usr_id_to = getDocCreatorId(sloc_id, cld_id, org_id, doc_id, doc_txn_id, doc_type_id, am);
            lvl_to = getUsrLvl(sloc_id, cld_id, org_id, doc_id, usr_id_to, wf_id, doc_type_id, am);
        } else if (usrAction.equalsIgnoreCase("Revert")) {
            action = "V";
            usr_id_to=usrIdTo;
            lvl_to=lvlTo;
        }
        //Rejected and Revert
           if(action.equals("R") || action.equals("V"))
           {
               //String docNm = (String)callStoredFunction(VARCHAR,"App_Get_Glbl_Doc_Nm(?)" , new Object[]{ doc_id});
                result = saveOkButtonAction(am,usr_id_to,level,lvl_to,action," ",amount,manualData);
           }
         return result;
    }


    @SuppressWarnings("unchecked")
    public String okButtonDwn(WfServAMImpl am,String cld_id,String org_id,int sloc_id,String horg_id,String wf_id,int doc_id,
                              int doc_type_id,String doc_txn_id,String amountt,int usr_id,String remark,
                              int level,int usrIdTo,int lvlTo,String usrAction)throws SQLException {
        String result = null;
        String action = "F";
        oracle.jbo.domain.Number amount =new  oracle.jbo.domain.Number(amountt);
        manualData = new HashMap();
        manualData.put("sloc_id", sloc_id);
        manualData.put("cld_id", cld_id);
        manualData.put("org_id", org_id);
        manualData.put("doc_id", doc_id);
        manualData.put("doc_type_id", doc_type_id);
        manualData.put("wf_id", wf_id);
        manualData.put("doc_txn_id", doc_txn_id);
        manualData.put("usr_id", usr_id);
        String post = "P";
        if (usrAction.equalsIgnoreCase("Revert")) {
            action = "V";
        } else if (usrAction.equalsIgnoreCase("Reject")) {
            action = "R";
        }else if(usrAction.equalsIgnoreCase("Approve")){
                action = "A";
        }else {
            //Forward
            action = "F";
        }
        Integer usr_id_to = usrIdTo;
        Integer level_to = 1;
        if(!action.equalsIgnoreCase("A") && !action.equalsIgnoreCase("V")){
            level_to =lvlTo;
        }else
            if(action.equalsIgnoreCase("V"))
        {
                usr_id_to=usrIdTo;
                level_to=lvlTo;
            }
        //=====================================================================approved case================================================================================
        if(action.equals("A")){
              result = okButtonDwnAction(am,usr_id_to,level,level_to,action,remark,amount,post);
        }
        if(action.equals("F") || action.equals("R") || action.equals("V")){
        Integer usrPend=null;
        Object obj=null;
        if(action.equals("F") && action.equals("V")){
            obj= usrIdTo;
        }else{
            obj=callStoredFunction(NUMBER, "APP.WF_GET_INT_USR(?,?,?,?,?,?)", new Object[] {  sloc_id, cld_id, org_id,doc_id,doc_txn_id,doc_type_id},am);
        }
        //String docNm = (String)callStoredFunction(VARCHAR,"App_Get_Glbl_Doc_Nm(?)" , new Object[]{ doc_id});
        if(obj!=null)
        {
          usrPend = (Integer)obj;
         }
            result = okButtonDwnAction(am,usr_id_to,level,level_to,action,remark,amount,post);
        }
        return result;
    }

    public BindingContainer getBindings() {
        return (BindingContainer) BindingContext.getCurrent().getCurrentBindingsEntry();
    }
 
    public String saveOkButtonAction(WfServAMImpl am,int usr_id_to,int level,int lvl_to,String action,String remark,
                                   oracle.jbo.domain.Number amount,Map manualData){
        System.out.println("in case of : "+action);
        String post = "P";
        String res =
            (callStoredFunction(Types.VARCHAR, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)",
                                                new Object[] {manualData.get("sloc_id"),manualData.get("cld_id") ,manualData.get("org_id") ,
                                                              manualData.get("doc_id") ,manualData.get("doc_type_id"),manualData.get("wf_id") ,manualData.get("doc_txn_id") ,
                                                              manualData.get("usr_id"), usr_id_to, level, lvl_to, action, remark, amount,post },am).toString());
        System.out.println("RES : "+res);
        if(res.equals("1")){
           if(Integer.parseInt(manualData.get("usr_id").toString())!=usr_id_to){
            String docNm = (String)(callStoredFunction(VARCHAR,"App_Get_Glbl_Doc_Nm(?)" , new Object[]{Integer.parseInt(manualData.get("doc_id").toString())},am).toString());
            String msg = "";
                if(action.equals("A")){
                    msg=docNm+" has been approved.";
                }else if(action.equals("F")){
                    msg=docNm+" has been forward.";
                }else if(action.equals("R")){
                    msg=docNm+" has been reject.";
                }else{
                    msg=docNm+" has been revert.";
                }
            Object obj = (callStoredFunction(VARCHAR,"FN_WS_INS_ALRT(?,?,?,?,?,?,?,?,?)" ,
                                new Object[]{manualData.get("cld_id"),manualData.get("sloc_id"),"01",manualData.get("org_id"),usr_id_to,
                                             msg,manualData.get("doc_id") ,manualData.get("doc_type_id"),manualData.get("doc_txn_id")},am).toString());
            int resulte = Integer.parseInt(obj.toString());
            sendNotification(usr_id_to,docNm);
            }
        return action;
        }else{
            return "N";
        }
    }
    
    public String okButtonDwnAction(WfServAMImpl am,int usr_id_to,int level,int level_to,String action,String remark,oracle.jbo.domain.Number amount,String post){
        String res = "";
        if(action.equalsIgnoreCase("A")){
            res =
                (callStoredFunction(Types.VARCHAR, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)",
                                                    new Object[] {manualData.get("sloc_id"),manualData.get("cld_id") ,manualData.get("org_id") ,manualData.get("doc_id") ,manualData.get("doc_type_id"),manualData.get("wf_id") ,manualData.get("doc_txn_id") ,
                                                                  manualData.get("usr_id"), manualData.get("usr_id"), level, level, action, remark, amount,
                                                                   post },am).toString());
            System.out.println("Approved !");    
        }else{
            res =
                (callStoredFunction(Types.VARCHAR, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)",
                                                    new Object[] { manualData.get("sloc_id"),manualData.get("cld_id") ,manualData.get("org_id") ,manualData.get("doc_id") ,manualData.get("doc_type_id"),manualData.get("wf_id") ,manualData.get("doc_txn_id") ,
                                                                  manualData.get("usr_id"), usr_id_to, level, level_to, action, remark, amount,
                                                                   post },am).toString());
                System.out.println("Not in approved block");
            if(res.equals("1")){
                String docNm = (String)(callStoredFunction(VARCHAR,"App_Get_Glbl_Doc_Nm(?)" , new Object[]{Integer.parseInt(manualData.get("doc_id").toString())},am).toString());
                String msg = "";
                if(action.equals("A")){
                    msg=docNm+" has been approved.";
                }else if(action.equals("F")){
                    msg=docNm+" has been forward.";
                }else if(action.equals("R")){
                    msg=docNm+" has been reject.";
                }else{
                    msg=docNm+" has been revert.";
                }
                Object obj = (callStoredFunction(VARCHAR,"FN_WS_INS_ALRT(?,?,?,?,?,?,?,?,?)" ,
                                    new Object[]{manualData.get("cld_id"),manualData.get("sloc_id"),"01",manualData.get("org_id"),usr_id_to,
                                                 msg,manualData.get("doc_id") ,manualData.get("doc_type_id"),manualData.get("doc_txn_id")},am).toString());
                int resulte = Integer.parseInt(obj.toString());
            sendNotification(usr_id_to,docNm);
            //return action;
            }
        }
        System.out.println(res+"----------------------");
        if(res.equals("1")){
        return action;
        }else{
            return "N";
        }
    }

    @SuppressWarnings("unchecked")
    public Map getWorkFlowInfo(String cldId,int slocId,String orgId,String horgId,
                                            int usrId,int docId,int docTypId,String docTxnId,String amount,String wfId){
        File file = new File(".\\Certificates.p12");
        System.out.println(file.getName()+ ": File Object =======================================");
        Map map = new HashMap();
        List forwardUsrList = new ArrayList();
        Map revert;
        Map forward;
        WfServAMImpl am = getAm();
        ViewObjectImpl docLvl1 = am.getDocLvl1();
        docLvl1.setNamedWhereClauseParam("cldId", cldId);
        docLvl1.setNamedWhereClauseParam("slocId", slocId);
        docLvl1.setNamedWhereClauseParam("orgId", orgId);
        docLvl1.setNamedWhereClauseParam("docId", docId);
        docLvl1.executeQuery();
        docLvl1.setRangeSize(-1);
        Row[] allRowsInRange = docLvl1.getAllRowsInRange();
        Map<Integer,Integer> userList = new HashMap<Integer,Integer>();
        if(allRowsInRange.length>0){
            for(Row row : allRowsInRange){
                userList.put(Integer.parseInt(row.getAttribute("UsrId").toString()),Integer.parseInt(row.getAttribute("UsrId").toString()));
            }
        }
        if(userList.containsKey(usrId)){
            //T
            int currWfuserLvl=am.getUsrLvl(slocId, cldId, orgId, docId, usrId, wfId, docTypId, am);
            int docCreatorId=am.getDocCreatorId(slocId, cldId, orgId, docId, docTxnId, docTypId, am);
            if(usrId!=docCreatorId){
            List revertUsrList =am.getRevertUsrList(am, cldId, slocId, orgId, docId, docTypId, docTxnId);
            map.put("rvtUsr",revertUsrList);
            map.put("Revert","Y");
            map.put("Reject","Y");
            }else{
                map.put("Revert","N");
                map.put("Reject","N");
            }
            map.put("Approve","Y");
            map.put("Forward","N");
            map.put("UsrLvl",currWfuserLvl);
            map.put("usr","Top");
        }else{
            //ML
            int docCreator=am.getDocCreatorId(slocId, cldId, orgId, docId, docTxnId, docTypId, am);
            int currWfuserLvl=am.getUsrLvl(slocId, cldId, orgId, docId, usrId, wfId, docTypId, am);
            System.out.println(currWfuserLvl+": Current user Level for this Document.");
            System.out.println(docCreator+": Doc Creator user ID");
            ViewObjectImpl usrSelect = am.getLvlUserSelect1(); // Forward List
            usrSelect.setRangeSize(-1);
            usrSelect.setNamedWhereClauseParam("cldBind", cldId);
            usrSelect.setNamedWhereClauseParam("orgBind", orgId);
            usrSelect.setNamedWhereClauseParam("docIdBind", docId);
            usrSelect.setNamedWhereClauseParam("docIdTypBind", docTypId);
            usrSelect.setNamedWhereClauseParam("wfIdBind", wfId);
            usrSelect.setNamedWhereClauseParam("wfLvlBind", currWfuserLvl);
            Row[] rows = usrSelect.getAllRowsInRange();
            if(rows.length>0){
                for(Row row : rows){
                    forward = new HashMap();
                    forward.put("usrId",row.getAttribute("UsrId"));
                    forward.put("wfLvl",row.getAttribute("WfLvl"));
                    forward.put("name",row.getAttribute("UsrName").toString());
                    forwardUsrList.add(forward);
                }
            }
            if(usrId==docCreator){//L
                map.put("Revert","N");
                map.put("Reject","N");
                map.put("Approve","Y");
                map.put("Forward","Y");
                map.put("UsrLvl",currWfuserLvl);
                map.put("fwdUsr", forwardUsrList);
                map.put("usr","Lower");
            }else{
                map.put("Revert","Y");
                map.put("Reject","Y");
                map.put("Approve","Y");
                map.put("Forward","Y");
                map.put("UsrLvl",currWfuserLvl);
                map.put("fwdUsr", forwardUsrList);
                map.put("usr","Middle");
                List revertUsrList = am.getRevertUsrList(am, cldId, slocId, orgId, docId, docTypId, docTxnId);
                map.put("rvtUsr",revertUsrList);
            }
        }
        releaseAm(am);
        am = null;
        if(map.isEmpty()){
            map.put("status","N");
            map.put("msg","No Data Found.");
            return map;
        }else{
            map.put("status","Y");
            return map;    
        }
    }
    /**
     * Method to release the aquired am.
     * @param am
     */
    public void releaseAm(WfServAMImpl am) {
        Configuration.releaseRootApplicationModule(am, true);
    }

    /**
     * Method to get Am connection.
     * @return
     */
    private WfServAMImpl getAm() {
        String appModuleName = "appwfservice.model.module.WfServAM";
        String appModuleConfig = "WfServAMLocal";
        return (WfServAMImpl) Configuration.createRootApplicationModule(appModuleName, appModuleConfig);
    }

    /**
     * Container's getter for DocLvl1.
     * @return DocLvl1
     */
    public ViewObjectImpl getDocLvl1() {
        return (ViewObjectImpl) findViewObject("DocLvl1");
    }

    @SuppressWarnings("unchecked")
    public List getRevertUsrList(WfServAMImpl am,String cldId,int slocId,String orgId,int docId,int docTypId,String docTxnId){
        System.out.println("In getRevertUsrList Function");
        System.out.println(am+" "+cldId+" "+slocId+" "+orgId+" "+docId+" "+docTypId+" "+docTxnId);
        Map revert;
        List revertUsrList = new ArrayList();
        ViewObjectImpl dualUser1 = am.getLovRevertUsr();
        dualUser1.setNamedWhereClauseParam("cldBind", cldId);
        dualUser1.setNamedWhereClauseParam("slocBind", slocId);
        dualUser1.setNamedWhereClauseParam("orgBind", orgId);
        dualUser1.setNamedWhereClauseParam("docBind", docId);
        dualUser1.setNamedWhereClauseParam("docTypeBind", docTypId);
        dualUser1.setNamedWhereClauseParam("txnBind", docTxnId);
        dualUser1.executeQuery();
        RowSetIterator createRowSetIterator = dualUser1.createRowSetIterator("data");
        while(createRowSetIterator.hasNext()){
           Row row = createRowSetIterator.next();
            revert = new HashMap();
            revert.put("usrId", row.getAttribute("UsrIdBy").toString());
            revert.put("name", row.getAttribute("UsrName").toString());
            revert.put("wfLvl", row.getAttribute("WfLvlFm").toString());
            revertUsrList.add(revert);
        }
        createRowSetIterator.closeRowSetIterator();
        return revertUsrList;
    }
    public int getDocCreatorId(int slocId,String cldId,String orgId,int docId,String docTxnId,int docTypId,WfServAMImpl am){
        int docCreator = Integer.parseInt(callStoredFunction(NUMBER, "APP.WF_GET_INT_USR(?,?,?,?,?,?)", new Object[] {  slocId, 
                                    cldId, orgId,docId,docTxnId,docTypId},am).toString());
        return docCreator;
    }
    public int getUsrLvl(int slocId,String cldId,String orgId,int docId,int usrId,String wfId,int docTypId,WfServAMImpl am){
        int currWfuserLvl = Integer.parseInt(callStoredFunction(NUMBER, "APP.WF_GET_USR_LEVEL(?,?,?,?,?,?,?)", new Object[] { slocId,
                                             cldId,orgId,usrId,wfId,docId, docTypId },am).toString());
        return currWfuserLvl;
    }
    public void saveAsGL(WfServAMImpl am,String id,int usrId,String horgId,String cldId,String orId,int sloId,int insId,int vouTy) {
        String vouId = id;//doc_txn
        Integer userId = usrId;
        String hoOrg_id =horgId;
        String cld_id =  cldId;
        String orgId = orId;
        Integer slocId = sloId;
        Integer instId = insId;//1
        Integer vouTyp = vouTy;//voc tye
        callStoredProcedure("FIN.PROC_TRANSLATE_TO_GL(?,?,?,?,?,?,?)", new Object[] {cld_id, slocId, hoOrg_id, orgId,
                                                                                        instId,vouId, userId},am);
       // String Vocid = (String)callStoredFunction1(VARCHAR,"FIN.FN_GL_DISP_NO(?,?,?,?,?)", new Object[] { slocId, cld_id, orgId,vouId },am);
        //System.out.println("disp_glId --------------------------------------------------------------" + id);
    }
    String disp_glId=null;

    public void setDisp_glId(String disp_glId) {
        this.disp_glId = disp_glId;
    }

    public String getDisp_glId() {
        return disp_glId;
    }

    public void validateTempVouForGl(WfServAMImpl am,String vouId,String orgId,int slocId,String horgId,String cldId,int insId) {
    callStoredProcedure("FIN.PROC_TVOU_VALIDATIONS(?,?,?,?,?,?,?)", new Object[] {cldId,slocId,insId,horgId,orgId,vouId,"F"},am);
    }

    public void callStoredProcedure(String stmt, Object[] bindVars,WfServAMImpl am) {
        PreparedStatement st = null;
        try {
     
            st = am.getDBTransaction().createPreparedStatement("begin " + stmt + "; end;", 0);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 1, bindVars[z]);
                }
            }
            st.executeUpdate();
        } catch (SQLException e) {
     
            System.out.println(e.getMessage() + " " + e);
            int end = e.getMessage().indexOf("\n");
            String message = e.getMessage().substring(11, end);
            System.out.println(message);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    throw new JboException(e.getMessage());
                }
            }
        }
    }
    public void sendNotification(int usrId,String docNm){
        WfServAMImpl am = getAm();
        ViewObjectImpl deviceId1 = am.getdeviceId1();
        deviceId1.setNamedWhereClauseParam("BindUsrId", usrId);
        deviceId1.executeQuery();
        RowSetIterator itr = deviceId1.createRowSetIterator(null);
        while(itr.hasNext()){
            Row next = itr.next();
            if((next.getAttribute("OsId").toString()).equals("Android") && (next.getAttribute("LoginStat").toString()).equals("Y")){
                Result result = null;
                try {
                                Sender sender = new Sender(GOOGLE_SERVER_KEY);
                                Message message = new Message.Builder().timeToLive(30)
                                                .delayWhileIdle(true).addData(MESSAGE_KEY, "New "+docNm+" created").build();
                                result = sender.send(message, next.getAttribute("DvcId").toString(), 1);
                    System.out.println("result : -"+result);
                }catch(Exception e){
                    e.printStackTrace();
                }
            }else if((next.getAttribute("OsId").toString()).equals("iOS") && (next.getAttribute("LoginStat").toString()).equals("Y")){
                try{
                File file = new File(".\\CertificatesProdAPNSKey.p12");
                System.out.println(file.getName()+ ": File Object");
                PushedNotifications alert =
                        Push.alert("New "+docNm+" created", file, "", true,
                                   next.getAttribute("DvcId").toString());
                    System.out.println(alert.getFailedNotifications()+" : FMsg");
                    System.out.println(alert.getSuccessfulNotifications()+" : SMsg");
                }catch(Exception e){
                        e.printStackTrace();
                    }
            }
        }
        releaseAm(am);
        am = null;
    }

    /**
     * Container's getter for deviceId1.
     * @return deviceId1
     */
    public ViewObjectImpl getdeviceId1() {
        return (ViewObjectImpl) findViewObject("deviceId1");
    }
}
