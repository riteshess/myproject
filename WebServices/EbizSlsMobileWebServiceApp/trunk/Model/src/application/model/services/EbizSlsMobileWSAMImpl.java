package application.model.services;

import adf.utils.bean.ADFBeanUtils;
import adf.utils.bean.StaticValue;
import adf.utils.model.ADFModelUtils;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.text.DateFormat;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.client.Configuration;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.DBTransaction;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.domain.Number;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Oct 09 12:51:33 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------

public class EbizSlsMobileWSAMImpl extends ApplicationModuleImpl {

    /**
     * This is the default constructor (do not remove).
     */
    public EbizSlsMobileWSAMImpl() {
    }

    /**
     * Container's getter for LovDiscountBasis1.
     * @return LovDiscountBasis1
     */
    public ViewObjectImpl getLovDiscountBasis1() {
        return (ViewObjectImpl) findViewObject("LovDiscountBasis1");
    }

    /**
     * Container's getter for LovEoCatgId1.
     * @return LovEoCatgId1
     */
    public ViewObjectImpl getLovEoCatgId1() {
        return (ViewObjectImpl) findViewObject("LovEoCatgId1");
    }

    /**
     * Container's getter for DiscountPolicyDtl1.
     * @return DiscountPolicyDtl1
     */
    public ViewObjectImpl getDiscountPolicyDtl1() {
        return (ViewObjectImpl) findViewObject("DiscountPolicyDtl1");
    }

    /**
     * Container's getter for InvWorkflowDtlsVO1.
     * @return InvWorkflowDtlsVO1
     */
    public ViewObjectImpl getInvWorkflowDtlsVO1() {
        return (ViewObjectImpl) findViewObject("InvWorkflowDtlsVO1");
    }

    /**
     * Container's getter for QuotWorkflowDtlsVO1.
     * @return QuotWorkflowDtlsVO1
     */
    public ViewObjectImpl getQuotWorkflowDtlsVO1() {
        return (ViewObjectImpl) findViewObject("QuotWorkflowDtlsVO1");
    }

    /**
     * Container's getter for RmaWorkflowDtlsVO1.
     * @return RmaWorkflowDtlsVO1
     */
    public ViewObjectImpl getRmaWorkflowDtlsVO1() {
        return (ViewObjectImpl) findViewObject("RmaWorkflowDtlsVO1");
    }

    /**
     * Container's getter for SoWorkflowDtlsVO1.
     * @return SoWorkflowDtlsVO1
     */
    public ViewObjectImpl getSoWorkflowDtlsVO1() {
        return (ViewObjectImpl) findViewObject("SoWorkflowDtlsVO1");
    }
    /**
     * Container's getter for SoDtlVO1.
     * @return SoDtlVO1
     */
    public ViewObjectImpl getSoDtlVO1() {
        return (ViewObjectImpl) findViewObject("SoDtlVO1");
    }

    /**
     * Container's getter for SoItmDtlVO1.
     * @return SoItmDtlVO1
     */
    public ViewObjectImpl getSoItmDtlVO1() {
        return (ViewObjectImpl) findViewObject("SoItmDtlVO1");
    }
    /**
     * Method to release the aquired am.
     * @param am
     */
    public void releaseAm(EbizSlsMobileWSAMImpl am) {
        Configuration.releaseRootApplicationModule(am, true);
    }

    /**
     * Method to get Am connection.
     * @return
     */
    private EbizSlsMobileWSAMImpl getAm() {
        String appModuleName = "application.model.services.EbizSlsMobileWSAM";
        String appModuleConfig = "EbizSlsMobileWSAMLocal";
        return (EbizSlsMobileWSAMImpl) Configuration.createRootApplicationModule(appModuleName, appModuleConfig);
    }

    /**
     * Method to get Customer Category and Discount Base list.
     * @return
     */
    @SuppressWarnings({ "unchecked", "oracle.jdeveloper.java.unchecked-conversion-or-cast" })
    public Map getCatgDisBaseList() {
        EbizSlsMobileWSAMImpl aMImpl = getAm();
        Map category = new HashMap();
        HashMap<Object, Object> h;
        List list = new ArrayList();
        ViewObjectImpl catgVO = aMImpl.getLovEoCatgId1();
        ViewObjectImpl discBasisVO = aMImpl.getLovDiscountBasis1();
        RowSetIterator ctr = catgVO.createRowSetIterator(null);
        while (ctr.hasNext()) {
            Row next = ctr.next();
            h = new HashMap<Object, Object>();
            Object CatgIdO = next.getAttribute("CatgId");
            Object CatgNmO = next.getAttribute("CatgNm");
            h.put("CatgId", CatgIdO);
            h.put("CatgNm", CatgNmO);
            list.add(h);
        }
        ctr.closeRowSetIterator();
        HashMap<Object, Object> h1;
        List list1 = new ArrayList();
        RowSetIterator ct = discBasisVO.createRowSetIterator(null);
        while (ct.hasNext()) {
            h1 = new HashMap<Object, Object>();
            Row next = ct.next();
            Object DiscBasisIdO = next.getAttribute("DiscBasisId");
            Object DiscBasisNmO = next.getAttribute("DiscBasisNm");
            h1.put("discBaseId", DiscBasisIdO);
            h1.put("discBaseNm", DiscBasisNmO);
            list1.add(h1);
        }
        ct.closeRowSetIterator();
        if(list.isEmpty()){
            category.put("Categories", list);
            category.put("DiscBase", list1);
            category.put("status","N");
            category.put("msg","No Data Found For Categories");
        }else if(list1.isEmpty()){
            category.put("Categories", list);
            category.put("DiscBase", list1);
            category.put("status","N");
            category.put("msg","No Data Found For Discount");
        }else{
            category.put("Categories", list);
            category.put("DiscBase", list1);
            category.put("status","Y");
        }
        
        releaseAm(aMImpl);
        aMImpl = null;
        return category;
    }

    /**
     * Method to get the discount policy details by filtering tables from given parameters.
     * @param CldId
     * @param OrgId
     * @param HoOrgId
     * @param SlocId
     * @param ItmNmStr
     * @param GrpNmStr
     * @param eoCatg
     * @param EoNmStr
     * @param SalesExecNmStr
     * @param DiscBasis
     * @param RowsUpperLimit
     * @param RowsLowerLimit
     * @return
     */
    @SuppressWarnings("unchecked")
    public Map getDiscPolicyList(String CldId, String OrgId, String HoOrgId, Integer SlocId, String ItmNmStr,
                                 String GrpNmStr, Integer eoCatg, String EoNmStr, String SalesExecNmStr,
                                 Integer DiscBasis, Integer RowsUpperLimit, Integer RowsLowerLimit) {
        EbizSlsMobileWSAMImpl am = getAm();
        Map discPolicy = new HashMap();
        HashMap<Object, Object> h;
        List list = new ArrayList();
        ViewObjectImpl discPolicyVO = am.getDiscountPolicyDtl1();
        discPolicyVO.setNamedWhereClauseParam("CldIdBind", CldId);
        discPolicyVO.setNamedWhereClauseParam("OrgIdBind", OrgId);
        discPolicyVO.setNamedWhereClauseParam("HoOrgIdBind", HoOrgId);
        discPolicyVO.setNamedWhereClauseParam("SlocIdBind", SlocId);
        discPolicyVO.setNamedWhereClauseParam("ItmNmBind", ItmNmStr);
        discPolicyVO.setNamedWhereClauseParam("GrpNmBind", GrpNmStr);
        discPolicyVO.setNamedWhereClauseParam("CatgIdBind", eoCatg);
        discPolicyVO.setNamedWhereClauseParam("EoNmBind", EoNmStr);
        discPolicyVO.setNamedWhereClauseParam("SalesExecNmBind", SalesExecNmStr);
        discPolicyVO.setNamedWhereClauseParam("DiscBasisBind", DiscBasis);
        discPolicyVO.setNamedWhereClauseParam("RowsUpperLimit", RowsUpperLimit);
        discPolicyVO.setNamedWhereClauseParam("RowsLowerLimit", RowsLowerLimit);
        discPolicyVO.executeQuery();

        RowSetIterator ct = discPolicyVO.createRowSetIterator(null);
        while (ct.hasNext()) {
            h = new HashMap<Object, Object>();
            Row next = ct.next();
            h.put("DiscType", next.getAttribute("DiscType"));
            h.put("DiscVal", next.getAttribute("DiscVal"));
            h.put("EffectiveDt",DateFormat.getDateInstance().format(next.getAttribute("EffectiveDt")));
            h.put("ExpiryDt", next.getAttribute("ExpiryDt"));
            h.put("DiscBasis", next.getAttribute("DiscBasis"));
            h.put("DiscountOn", next.getAttribute("DiscountOn"));
            list.add(h);
        }
        ct.closeRowSetIterator();
        if(list.isEmpty()){
            discPolicy.put("DiscPolicy", list);
            discPolicy.put("status","N");
            discPolicy.put("msg","No Data Found.");
        }else{
            discPolicy.put("DiscPolicy", list);
            discPolicy.put("status","Y");
        }
        releaseAm(am);
        am = null;
        return discPolicy;
    }

    /**
     * Get pending Document Count on the basis of Document Type Id and Document pending for Flag,.
     * @param DocTypeId
     * @param CountType
     * @param slocId
     * @param cldId
     * @param orgId
     * @param hoOrgId
     * @param usrId
     * @return
     */
    public Integer getPendingDocumentCount(Integer DocTypeId, String CountType, Integer slocId, String cldId,
                                           String orgId, String hoOrgId, Integer usrId) {
        EbizSlsMobileWSAMImpl aMImpl = getAm();
        Integer count = 0;
        /* sls_doc_wf_cnt(
        p_cld_id varchar2,
        p_sloc_id number,
        p_org_id varchar2,
        p_usr_id number,
        p_doc_id number,
        p_wf_type varchar2 /* O--Pending with others ,M--Pending of my approval,U--Pending for posting
        )
         */
        try {
            Integer s = null;
            //String driver = getdrivername();
            /* if (driver.equalsIgnoreCase("MySQL-AB JDBC Driver")) {
                s = (Integer) ADFModelUtils.callFunction(this, new StringBuilder("CALL SLS_DOC_WF_CNT(?,?,?,?,?,?)"),
                                                            new Object[] {
                                                                    cldId,
                                                                    orgId,
                                                                    hoOrgId,
                                                                    usrId,
                                                                    DocTypeId,
                                                                    CountType.toString()},
                                                            Types.NUMERIC);
            } else { */
            s = (Integer) ADFModelUtils.callFunction(aMImpl, new StringBuilder("SLS_DOC_WF_CNT(?,?,?,?,?,?)"), new Object[] {
                                                     cldId,slocId, orgId, usrId, DocTypeId, CountType.toString()
            }, Types.INTEGER);

            //}
            count = s;
        } catch (Exception e) {
            e.printStackTrace();
        }
        releaseAm(aMImpl);
        aMImpl = null;
        return count;
    }

    /**
     * Method to Return Drive name in case of MySql Database.
     * @return
     */
    public String getdrivername() {
        String drivernme = "";
        //SlsIntimationSlipAMImpl am = (SlsIntimationSlipAMImpl)resolvElDC("SlsIntimationSlipAMDataControl");
        DBTransaction dbTransaction = (DBTransaction) this.getTransaction();
        PreparedStatement prepStatement = dbTransaction.createPreparedStatement("select * from dual", 0);
        try {
            System.out.println("Driver name--" + prepStatement.getConnection().getMetaData().getDriverName());
            drivernme = prepStatement.getConnection().getMetaData().getDriverName();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return drivernme;
    }

    /**
     * @param slocId
     * @param cldId
     * @param orgId
     * @param hoOrgId
     * @param usrId
     * @return
     */
    @SuppressWarnings("unchecked")
    /**
     * Method to get Pending documents for my Approval
     */
    public Map getPendingDocumentForCountMyApproval(Integer slocId, String cldId, String orgId, String hoOrgId,
                                                     Integer usrId) {
        Map map = new HashMap();
        List g = new ArrayList();
        Integer quotationCount = getPendingDocumentCount(21502, "M", slocId, cldId, orgId, hoOrgId, usrId); //Quotation
        Integer invoiceCount = getPendingDocumentCount(21504, "M", slocId, cldId, orgId, hoOrgId, usrId); //Invoice
        Integer salesOrdrCount = getPendingDocumentCount(21503, "M", slocId, cldId, orgId, hoOrgId, usrId); //Order
        Integer rmaCount = getPendingDocumentCount(21510, "M", slocId, cldId, orgId, hoOrgId, usrId); //RMA
        Map h = null;
        //For Quotation
        /* h = new HashMap<>();
         * h.put("docId", 21502);
        h.put("count", quotationCount);
        h.put("docNm", "Sales Quotation");
        g.add(h); */
        //For Invoice
        /* h = new HashMap<Object, Object>();
        h.put("docId", 21504);
        h.put("count", invoiceCount);
        h.put("docNm", "Sales Invoice");
        g.add(h); */
        //For Order
        h = new HashMap<Object, Object>();
        h.put("docId", 21503);
        h.put("count", salesOrdrCount);
        h.put("docNm", "Sales Order");
        g.add(h);
        //For RMA
        /* h = new HashMap<Object, Object>();
        h.put("docId", 21510);
        h.put("count", rmaCount);
        h.put("docNm", "RMA");
        g.add(h); */
        if(g.isEmpty()){
            map.put("docTyp",g);
            map.put("status","N");
            map.put("msg","No Data Found.");
        }else{
            map.put("docTyp",g);
            map.put("status","Y");
        }
        return map;
    }

    /**
     * Method to get list of pending documents.
     * @param SlocId
     * @param CldId
     * @param OrgId
     * @param HoOrgId
     * @param UsrId
     * @param wfTyp "M""U""O"
     * @param DocTypeId
     * @param RowsLowerLimit
     * @param RowsUpperLimit
     * @return
     */
    @SuppressWarnings("unchecked")
    public Map getPendingDocumentList(Integer SlocId, String CldId, String OrgId, String HoOrgId, Integer UsrId,
                                       String wfTyp, Integer DocTypeId, Integer RowsLowerLimit, Integer RowsUpperLimit) {
        Map map = new HashMap();
        List list = new ArrayList();
        EbizSlsMobileWSAMImpl am = getAm();

        switch (DocTypeId) {
        case 21502:
            {
                ViewObjectImpl quotVo = am.getQuotWorkflowDtlsVO1();
                quotVo.setNamedWhereClauseParam("CldIdBind", CldId);
                quotVo.setNamedWhereClauseParam("OrgIdBind", OrgId);
                quotVo.setNamedWhereClauseParam("HoOrgIdBind", HoOrgId);
                quotVo.setNamedWhereClauseParam("SlocIdBind", SlocId);
                quotVo.setNamedWhereClauseParam("WfTypeBind", wfTyp);
                quotVo.setNamedWhereClauseParam("UsrIdBind", UsrId);
                quotVo.setNamedWhereClauseParam("RowsLowerLimit", RowsLowerLimit);
                quotVo.setNamedWhereClauseParam("RowsUpperLimit", RowsUpperLimit);
                quotVo.executeQuery();
                RowSetIterator ctr = quotVo.createRowSetIterator(null);
                list = this.getWfDocDetailsList(ctr, 21502);
                ctr.closeRowSetIterator();
                break;
            }
        case 21504:
            {
                ViewObjectImpl invVo = am.getInvWorkflowDtlsVO1();
                invVo.setNamedWhereClauseParam("CldIdBind", CldId);
                invVo.setNamedWhereClauseParam("OrgIdBind", OrgId);
                invVo.setNamedWhereClauseParam("HoOrgIdBind", HoOrgId);
                invVo.setNamedWhereClauseParam("SlocIdBind", SlocId);
                invVo.setNamedWhereClauseParam("WfTypeBind", wfTyp);
                invVo.setNamedWhereClauseParam("UsrIdBind", UsrId);
                invVo.setNamedWhereClauseParam("RowsLowerLimit", RowsLowerLimit);
                invVo.setNamedWhereClauseParam("RowsUpperLimit", RowsUpperLimit);
                invVo.executeQuery();
                RowSetIterator ctr = invVo.createRowSetIterator(null);
                list = this.getWfDocDetailsList(ctr, 21504);
                ctr.closeRowSetIterator();
                break;
            }
        case 21503:
            {
                ViewObjectImpl soVo = am.getSoWorkflowDtlsVO1();
                soVo.setNamedWhereClauseParam("CldIdBind", CldId);
                soVo.setNamedWhereClauseParam("OrgIdBind", OrgId);
                soVo.setNamedWhereClauseParam("HoOrgIdBind", HoOrgId);
                soVo.setNamedWhereClauseParam("SlocIdBind", SlocId);
                soVo.setNamedWhereClauseParam("WfTypeBind", wfTyp);
                soVo.setNamedWhereClauseParam("UsrIdBind", UsrId);
                soVo.setNamedWhereClauseParam("RowsLowerLimit", RowsLowerLimit);
                soVo.setNamedWhereClauseParam("RowsUpperLimit", RowsUpperLimit);
                soVo.executeQuery();
                RowSetIterator ctr = soVo.createRowSetIterator(null);
                list = this.getWfDocDetailsList(ctr, 21503);
                ctr.closeRowSetIterator();
                break;
            }
        case 21510:
            {
                ViewObjectImpl rmaVo = am.getRmaWorkflowDtlsVO1();
                rmaVo.setNamedWhereClauseParam("CldIdBind", CldId);
                rmaVo.setNamedWhereClauseParam("OrgIdBind", OrgId);
                rmaVo.setNamedWhereClauseParam("HoOrgIdBind", HoOrgId);
                rmaVo.setNamedWhereClauseParam("SlocIdBind", SlocId);
                rmaVo.setNamedWhereClauseParam("WfTypeBind", wfTyp);
                rmaVo.setNamedWhereClauseParam("UsrIdBind", UsrId);
                rmaVo.setNamedWhereClauseParam("RowsLowerLimit", RowsLowerLimit);
                rmaVo.setNamedWhereClauseParam("RowsUpperLimit", RowsUpperLimit);
                rmaVo.executeQuery();
                RowSetIterator ctr = rmaVo.createRowSetIterator(null);
                list = this.getWfDocDetailsList(ctr, 21510);
                ctr.closeRowSetIterator();
                break;
            }
        }
        releaseAm(am);
        am = null;
        if(list.isEmpty()){
        map.put("docList",list);
        map.put("status","N");
        map.put("msg","No Data Found.");
        }else{
            map.put("docList",list);
            map.put("status","Y");
        }
        return map;
    }

    /**
     * Method to get the Workflow document details list by filtering tables from given parameters.
     *
     * @param itr
     * @param docTypId
     * @return
     */
    @SuppressWarnings({ "oracle.jdeveloper.java.unchecked-conversion-or-cast", "unchecked", "unchecked", "unchecked" })
    public List getWfDocDetailsList(RowSetIterator itr, Integer docTypId) {
        HashMap<Object, Object> h;
        List list = new ArrayList();
        RowSetIterator ct = itr;
        //System.out.println("Count : "+itr.getRowCountInRange());
        switch (docTypId) {
        case 21502:
            {
                while (ct.hasNext()) {
                    h = new HashMap<Object, Object>();
                    Row next = ct.next();
                    h.put("Id", next.getAttribute("DocId"));
                    h.put("crtDt",DateFormat.getDateInstance().format(next.getAttribute("DocDt")));
                    h.put("docId", next.getAttribute("QuotId"));
                    h.put("narr", (next.getAttribute("Remarks")==null?"":next.getAttribute("Remarks")));
                    h.put("docTyp","Sales Quotation");
                    h.put("crtBy",next.getAttribute("UsrName"));
                    list.add(h);
                }
                ct.closeRowSetIterator();
                break;
            }
        case 21504:
            {
                while (ct.hasNext()) {
                    h = new HashMap<Object, Object>();
                    Row next = ct.next();
                    h.put("Id", next.getAttribute("DocId"));
                    h.put("crtDt",DateFormat.getDateInstance().format(next.getAttribute("DocDt")));
                    h.put("docId", next.getAttribute("InvId"));
                    h.put("narr", (next.getAttribute("Remarks")==null?"":next.getAttribute("Remarks")));
                    h.put("docTyp","Sales Invoice");
                    h.put("crtBy",next.getAttribute("UsrName"));
                    list.add(h);
                }
                ct.closeRowSetIterator();
                break;
            }
        case 21503:
            {
                while (ct.hasNext()) {
                    h = new HashMap<Object, Object>();
                    Row next = ct.next();
                    h.put("Id", next.getAttribute("DocId"));
                    h.put("crtDt",DateFormat.getDateInstance().format(next.getAttribute("DocDt")));
                    h.put("docId", next.getAttribute("SoId"));
                    h.put("narr",(next.getAttribute("Remarks")==null?"":next.getAttribute("Remarks")));
                    h.put("docTyp",next.getAttribute("OrdrType"));
                    h.put("crtBy",next.getAttribute("UsrName"));
                    list.add(h);
                }
                ct.closeRowSetIterator();
                break;
            }
        case 21510:
            {
                while (ct.hasNext()) {
                    h = new HashMap<Object, Object>();
                    Row next = ct.next();
                    h.put("Id", next.getAttribute("DocId"));
                    h.put("crtDt", DateFormat.getDateInstance().format(next.getAttribute("DocDt")));
                    h.put("docId", next.getAttribute("RmaId"));
                    h.put("narr", (next.getAttribute("Remarks")==null?"":next.getAttribute("Remarks")));
                    h.put("docTyp","RMA");
                    h.put("crtBy",next.getAttribute("UsrName"));
                    list.add(h);
                }
                ct.closeRowSetIterator();
                break;
            }
        }
        //System.out.println("Returned: "+list);
        return list;
    }

    /**
     * Method to get Details of a Particular SalesOrder
     * @param SlocId
     * @param CldId
     * @param OrgId
     * @param HoOrgId
     * @param docId
     * @return
     */
    @SuppressWarnings("unchecked")
    public Map getSalesOrderDetail(Integer SlocId, String CldId, String OrgId, String HoOrgId, String docId,String itmId){
        Map v = new HashMap();
        EbizSlsMobileWSAMImpl am = getAm();
        ViewObjectImpl soDtlVO = am.getSoDtlVO1();
        soDtlVO.setNamedWhereClauseParam("CldIdBind", CldId);
        soDtlVO.setNamedWhereClauseParam("OrgIdBind", OrgId);
        soDtlVO.setNamedWhereClauseParam("HoOrgIdBind", HoOrgId);
        soDtlVO.setNamedWhereClauseParam("SlocIdBind", SlocId);
        soDtlVO.setNamedWhereClauseParam("SoDocIdBind", docId);
        soDtlVO.executeQuery();
        RowSetIterator ctr = soDtlVO.createRowSetIterator(null);
        ArrayList a = null;
        while(ctr.hasNext()){
            a = new ArrayList();
            HashMap h = new HashMap();
            Row row = ctr.next();
            h.put("DocId", row.getAttribute("DocId"));
            h.put("SoId", row.getAttribute("SoId"));
            h.put("DocDt",DateFormat.getDateInstance().format(row.getAttribute("DocDt")));
            h.put("EoId", row.getAttribute("EoId"));
            h.put("EoNm", row.getAttribute("EoNm"));
            h.put("CurrIdSp", row.getAttribute("CurrIdSp"));
            h.put("CurrDesc", row.getAttribute("CurrDesc"));
            h.put("OrderType", row.getAttribute("OrderType"));
            h.put("OrdrTypDesc", row.getAttribute("OrdrTypDesc"));
            h.put("TotAmtSp", row.getAttribute("TotAmtSp").toString());
            h.put("WfId", "W032");
            a.add(h);
        }
        ctr.closeRowSetIterator();
        if(a.isEmpty()){
            v.put("status","N");
            v.put("SoDetail", a);
            v.put("msg","No Data Found.");
        }else{
            v.put("status","Y");
            v.put("SoDetail", a);  
        }
        ViewObjectImpl soItmDtlVO = am.getSoItmDtlVO1();
        soItmDtlVO.setNamedWhereClauseParam("CldIdBind", CldId);
        soItmDtlVO.setNamedWhereClauseParam("OrgIdBind", OrgId);
        soItmDtlVO.setNamedWhereClauseParam("HoOrgIdBind", HoOrgId);
        soItmDtlVO.setNamedWhereClauseParam("SlocIdBind", SlocId);
        soItmDtlVO.setNamedWhereClauseParam("SoDocIdBind", docId);
        soItmDtlVO.executeQuery();
        RowSetIterator ctr1 = soItmDtlVO.createRowSetIterator(null);
        a = new ArrayList();
        while(ctr1.hasNext()){
            if (itmId == null) {
                HashMap h = new HashMap();
                Row row = ctr1.next();
                h.put("SrNo", row.getAttribute("SrNo"));
                h.put("ItmId", row.getAttribute("ItmId"));
                h.put("ItmDesc", row.getAttribute("ItmDesc"));
                h.put("ItmQty", row.getAttribute("ItmQty"));
                h.put("ItmRate", row.getAttribute("ItmRate"));
                h.put("ItmDiscTyp", (row.getAttribute("ItmDiscTyp")==null)?"A":row.getAttribute("ItmDiscTyp"));
                h.put("DiscVal", (row.getAttribute("DiscVal")==null)?0:row.getAttribute("DiscVal"));
                h.put("ItmAmtSp", row.getAttribute("ItmAmtSp").toString());
                a.add(h);
            }else{
                Row row = ctr1.next();
                Object itmIdO = row.getAttribute("ItmId");
                StringBuilder itmIds = (itmIdO == null ? new StringBuilder("") : new StringBuilder(itmIdO.toString()));
                if(itmId.equals(itmIds.toString())){
                    HashMap h = new HashMap();
                    h.put("SrNo", row.getAttribute("SrNo"));
                    h.put("ItmId", row.getAttribute("ItmId"));
                    h.put("ItmDesc", row.getAttribute("ItmDesc"));
                    h.put("ItmQty", row.getAttribute("ItmQty"));
                    h.put("ItmRate", row.getAttribute("ItmRate"));
                    h.put("ItmDiscTyp",(row.getAttribute("ItmDiscTyp")==null)?"A":row.getAttribute("ItmDiscTyp"));
                    h.put("DiscVal",(row.getAttribute("DiscVal")==null)?0:row.getAttribute("DiscVal"));
                    h.put("ItmAmtSp", row.getAttribute("ItmAmtSp").toString());
                    a.add(h);   
                }
            }
        }
        ctr1.closeRowSetIterator();
        v.put("SoItmDetail", a);
        releaseAm(am);
        am = null;
        return v;
    }

    /**
     * Method to update and in return get the updated Sales Order Detail
     * @param SlocId
     * @param CldId
     * @param OrgId
     * @param HoOrgId
     * @param docId
     * @param modifiedData
     * @return
     */
    public Map updateSalesOrderData(Integer SlocId, String CldId, String OrgId, String HoOrgId, String docId,
                                    String itmId,String ItmQty,String DiscVal){
        EbizSlsMobileWSAMImpl am = getAm();
        Boolean itmUpdSucessFul = false;
        Number itmQty = StaticValue.NUMBER_ZERO;
        Number dicVal = StaticValue.NUMBER_ZERO;
        try {
            itmQty = new Number(ItmQty);
            dicVal = new Number(DiscVal);
        } catch (SQLException e) {
        }
        System.out.println("Inner update");
        Map v = new HashMap();
                if(!("".equals(itmId) || itmQty.compareTo(StaticValue.NUMBER_ZERO) <=0 || itmQty.compareTo(StaticValue.NUMBER_ZERO) <=0)){
                    Object callFunction =
                        ADFModelUtils.callFunction(am, new StringBuilder("SLS.FN_UPDT_SO_ITM_DTLS_WS(?,?,?,?,?,?,?,?)"), new Object[] {
                                                   SlocId, CldId, OrgId, HoOrgId, docId, itmId, ItmQty, DiscVal}, Types.INTEGER);
                    Integer f = (callFunction == null ? -1 : (Integer)callFunction);
                    System.out.println("Value of F : "+f);
                    if(f == -1){
                        itmUpdSucessFul = false;
                    }else{
                        itmUpdSucessFul = true;
                    }
                }
            if(itmUpdSucessFul){
                Object callFunction =
                    ADFModelUtils.callFunction(am, new StringBuilder("SLS.FN_UPDT_SO_DTLS_WS(?,?,?,?,?)"), new Object[] {
                                               SlocId, CldId, OrgId, HoOrgId, docId,},Types.INTEGER);
                Integer f = (callFunction == null ? -1 : (Integer)callFunction);
                System.out.println("Value of Second F : "+f);
                if(f == -1){
                    itmUpdSucessFul = false;
                }else{
                    itmUpdSucessFul = true;
                }
            }
            
            if(itmUpdSucessFul){
                am.getDBTransaction().commit();
                v = getSalesOrderDetail(SlocId, CldId, OrgId, HoOrgId, docId, null);
            }else{
                am.getDBTransaction().rollback();
                v = new HashMap();
                v.put("status", "N");
                v.put("msg", "Data Not Update Successfully. Please Try Again");
            }
        releaseAm(am);
        am = null;
        return v;
    }
    public Map getAlertCountWS(String cldId,int slocId,String horgId,String orgId,int usrId){
            Map map = new HashMap();
            EbizSlsMobileWSAMImpl am = getAm();
            ViewObjectImpl impl = am.getnotification1();
            impl.setNamedWhereClauseParam("BindCldID", cldId);
            impl.setNamedWhereClauseParam("BindHorgId", horgId);
            impl.setNamedWhereClauseParam("BindModId", "00306");
            impl.setNamedWhereClauseParam("BindOrgId", orgId);
            impl.setNamedWhereClauseParam("BindSlocId", slocId);
            impl.setNamedWhereClauseParam("BindUsrId", usrId);
            impl.executeQuery();
            Row[] allRowsInRange = impl.getAllRowsInRange();
            Integer salesOrdrCount = getPendingDocumentCount(21503, "M", slocId, cldId, orgId, horgId, usrId); //Order
            if(salesOrdrCount == null){
                        map.put("pendingDocCount",salesOrdrCount);
                        map.put("alertCount", allRowsInRange.length);
                        map.put("status", "N");
                        map.put("msg", "No Data Found.");
                    }else{
                        map.put("status", "Y");
                        map.put("pendingDocCount",salesOrdrCount);
                        map.put("alertCount", allRowsInRange.length);
                    }
            releaseAm(am);
            am=null;
            return map;
        }

    /**
     * Container's getter for notification1.
     * @return notification1
     */
    public ViewObjectImpl getnotification1() {
        return (ViewObjectImpl) findViewObject("notification1");
    }
}
