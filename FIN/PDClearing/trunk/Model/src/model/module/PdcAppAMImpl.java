package model.module;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.util.ArrayList;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import model.views.PdcSearchVOImpl;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Aug 18 14:12:27 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------;
public class PdcAppAMImpl extends ApplicationModuleImpl {
    /**
     * This is the default constructor (do not remove).
     */
    public PdcAppAMImpl() {
    }
    String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
    //  String org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
    //  String hoorg_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
    Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
    Integer usr_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));

    /**
     * Container's getter for pdc1.
     * @return pdc1
     */
    public ViewObjectImpl getpdc1() {
        return (ViewObjectImpl) findViewObject("pdc1");
    }

    public void setBindVar() {
        ViewObjectImpl pdcvo = this.getpdc1();
        pdcvo.setNamedWhereClauseParam("BindCldId", -1);
        pdcvo.setNamedWhereClauseParam("BindSlocId", sloc_id);
        pdcvo.setNamedWhereClauseParam("BindHoOrgId", resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}"));
        pdcvo.setNamedWhereClauseParam("BindOrgId", resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
        pdcvo.executeQuery();
        this.getPdcSearch1().executeQuery();
    }

    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String msg = valueExp.getValue(elContext).toString();
        return msg;
    }

    public void pdcSearch(Integer bank_id, Integer coa_id, String disp_id, String InsNo, Date Strt_dt, Date End_dt,
                          Integer amt_frm, Integer amt_to, Date Voudt_frm, Date Voudt_to, Integer vou_Id) {
        ViewObjectImpl pdcvo = this.getpdc1();
        pdcvo.setNamedWhereClauseParam("BindCldId", cld_id);
        pdcvo.setNamedWhereClauseParam("BindSlocId", sloc_id);
        pdcvo.setNamedWhereClauseParam("BindHoOrgId", resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}"));
        pdcvo.setNamedWhereClauseParam("BindOrgId", resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
        pdcvo.setNamedWhereClauseParam("BindTvouTypId", vou_Id);
        pdcvo.setNamedWhereClauseParam("BindBankId", bank_id);
        pdcvo.setNamedWhereClauseParam("BindCoaId", coa_id);
        pdcvo.setNamedWhereClauseParam("BindDispID", disp_id);
        pdcvo.setNamedWhereClauseParam("BindInsNo", InsNo);
        pdcvo.setNamedWhereClauseParam("BindStartDt", Strt_dt);
        pdcvo.setNamedWhereClauseParam("BindEndDt", End_dt);
        pdcvo.setNamedWhereClauseParam("BindFrmAmt", amt_frm);
        pdcvo.setNamedWhereClauseParam("BindToAmt", amt_to);
        pdcvo.setNamedWhereClauseParam("BindVouFrmDt", Voudt_frm);
        pdcvo.setNamedWhereClauseParam("BindVouToDt", Voudt_to);
        PdcSearchVOImpl impl = getPdcSearch1();
        Row currentRow = impl.getCurrentRow();
        pdcvo.setNamedWhereClauseParam("BindPrjId", currentRow.getAttribute("ProjectIdTrans"));
        pdcvo.executeQuery();

    }

    /**
     * Container's getter for PdcSearch1.
     * @return PdcSearch1
     */
    public PdcSearchVOImpl getPdcSearch1() {
        return (PdcSearchVOImpl) findViewObject("PdcSearch1");
    }

    /**
     * Container's getter for BankLov1.
     * @return BankLov1
     */
    public ViewObjectImpl getBankLov1() {
        return (ViewObjectImpl) findViewObject("BankLov1");
    }

    public Number insSumAmt() {
        oracle.jbo.domain.Number tot = new oracle.jbo.domain.Number(0);
        ViewObjectImpl vo = this.getpdc1();
        RowSetIterator itr = vo.createRowSetIterator(null);
        while (itr.hasNext()) {
            Row rw = itr.next();
            if (rw.getAttribute("InstrumentAmt") != null) {
                tot = tot.add((oracle.jbo.domain.Number) rw.getAttribute("InstrumentAmt"));
            }
        }
        return tot;
    }

    public void postVoucherToGL() {
        String gl_vou_no = null;
        ArrayList ar = new ArrayList();
        System.out.println("ready to post voucher to gl application");
        ViewObjectImpl pdcvo = this.getpdc1();
        Row[] row = pdcvo.getFilteredRows("transPostChk", "Y");

        System.out.println("toatl number of rows after filter is = " + row.length);
        if (row.length > 0) {
            for (Integer i = 0; i < row.length; i++) {
                String voucher_id = row[i].getAttribute("DocTxnId").toString();
                Integer bank_coa_id = Integer.parseInt(row[i].getAttribute("TvouCoaBnkId").toString());
                String instru_no = row[i].getAttribute("TvouInstrmntNo").toString();
                Integer instru_sl_no = Integer.parseInt(row[i].getAttribute("TvouChqSlNo").toString());
                Number intru_amt = (Number) row[i].getAttribute("InstrumentAmt");
                Integer voutyp_id = Integer.parseInt(row[i].getAttribute("TvouTypeId").toString());
                System.out.println("--------->" + cld_id);
                System.out.println("--------->" + sloc_id);
                System.out.println("--------->" + resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}"));
                System.out.println("--------->" + resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
                System.out.println("--------->" + voucher_id);
                System.out.println("--------->" + voutyp_id);
                System.out.println("--------->" + bank_coa_id);
                System.out.println("--------->" + instru_no);
                System.out.println("--------->" + instru_sl_no);
                System.out.println("--------->" + intru_amt);
                System.out.println("--------->" + usr_id);
                System.out.println("---------------------------------------------------------------");

                gl_vou_no = callStoredProcedure("FIN.proc_translate_to_gl_pdc(?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                cld_id, sloc_id, resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}"),
                                                resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"), 1, voucher_id, voutyp_id,
                                                bank_coa_id, instru_no, instru_sl_no, intru_amt, usr_id
                });

                getDBTransaction().commit();
                ar.add(gl_vou_no);
                System.out.println("procedure called succesfullly !!!!!!!!");
            }
            //System.out.println("ttoal voucher is == " + ar);
            StringBuilder message = new StringBuilder("<html><body>");
            message.append("<p><b>successfully translate to GL .</b></p>");
            message.append("<b>Voucher Number: " + ar + "</b>");
            message.append("</body></html>");
            FacesMessage fm = new FacesMessage(message.toString());
            fm.setSeverity(FacesMessage.SEVERITY_INFO);
            FacesContext fc = FacesContext.getCurrentInstance();
            fc.addMessage(null, fm);
        } else {
            FacesMessage message =
                new FacesMessage(resolvElDCMsg("#{bundle['MSG.1318']}").toString()); //Please select Instrument for PDC clearing !
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext fc = FacesContext.getCurrentInstance();
            fc.addMessage(null, message);
        }

        this.getpdc1().executeQuery();
    }

    protected String callStoredProcedure(String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            // 1. Create a JDBC CallableStatement
            st = this.getDBTransaction().createCallableStatement("begin " + stmt + "; end ;", 0);
            // 2. Register the first bind variable for the return value mean index 0
            st.setObject(1, bindVars[0]);
            st.setObject(2, bindVars[1]);
            st.setObject(3, bindVars[2]);
            st.setObject(4, bindVars[3]);
            st.setObject(5, bindVars[4]);
            st.setObject(6, bindVars[5]);
            st.setObject(7, bindVars[6]);
            st.setObject(8, bindVars[7]);
            st.setObject(9, bindVars[8]);
            st.setObject(10, bindVars[9]);
            st.setObject(11, bindVars[10]);
            st.setObject(12, bindVars[11]);


            //st.registerOutParameter(13, Types.NUMERIC);
            st.registerOutParameter(13, Types.VARCHAR);

            // 5. Set the value of user-supplied bind vars in the stmt

            st.executeUpdate();
            /*  try {
        String gl_id=(st.getObject(13)).toString();
        System.out.println("1----------------------"+gl_id);
   } catch (SQLException sqle) {
   sqle.printStackTrace();
   }  */
            return (st.getObject(13)).toString();

        } catch (SQLException e) {
            int end = e.getMessage().indexOf("\n");
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    // 7. Close the statement
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();

                }
            }
        }
    }

    public Object resolvElDCMsg(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        return valueExp.getValue(elContext);
    }
}
