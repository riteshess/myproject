package taxrule.model.module;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Timestamp;
import oracle.jbo.domain.Number;
import java.sql.Types;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import java.util.Set;
import java.util.SortedMap;

import java.util.TreeMap;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.adf.share.ADFContext;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.TransactionEvent;
import oracle.jbo.server.ViewLinkImpl;

import oracle.jbo.server.ViewObjectImpl;

import org.apache.myfaces.trinidad.context.RequestContext;

import taxrule.model.module.common.TaxRuleAM;
import taxrule.model.views.AppTaxRuleLineVOImpl;
import taxrule.model.views.AppTaxRuleVOImpl;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Dec 02 12:27:55 PST 2011
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TaxRuleAMImpl extends ApplicationModuleImpl implements TaxRuleAM {
    /**
     * This is the default constructor (do not remove).
     */
    public TaxRuleAMImpl() {
    }

    /**
     * Container's getter for AppTaxRule.
     * @return AppTaxRule
     */
    public AppTaxRuleVOImpl getAppTaxRule() {
        return (AppTaxRuleVOImpl)findViewObject("AppTaxRule");
    }

    /**
     * Container's getter for AppTaxRuleLine.
     * @return AppTaxRuleLine
     */
    public AppTaxRuleLineVOImpl getAppTaxRuleLine() {
        return (AppTaxRuleLineVOImpl)findViewObject("AppTaxRuleLine");
    }


    /**
     * Container's getter for TaxRuleToTaxRuleLineVL1.
     * @return TaxRuleToTaxRuleLineVL1
     */
    public ViewLinkImpl getTaxRuleToTaxRuleLineVL1() {
        return (ViewLinkImpl)findViewLink("TaxRuleToTaxRuleLineVL1");
    }
    public void setBindvarValue(Integer SlocId,String OrgId,String CloudId){
        AppTaxRuleVOImpl v =getAppTaxRule();
        v.setOrgIdBindVar(OrgId);
        v.setCldIdBindVar(CloudId);
        v.setSlocIdBindVar(SlocId);
        v.executeQuery();
    }
    /*    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String msg = valueExp.getValue(elContext).toString();
        return msg;
    } */
    public Object resolvEl(String data) {

           ADFContext adfCtx = ADFContext.getCurrent();
           ELContext elContext = adfCtx.getELContext();
           ValueExpression valueExp = adfCtx.getExpressionFactory().createValueExpression(elContext, data, Object.class);
           Object Message = valueExp.getValue(elContext).toString();

           return Message;
       }
    public static int VARCHAR = Types.VARCHAR;
    String add_mode = null;
    String edit_mode = null;
    String view_mode = null;
    String del_mode = null;
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars)  {
        CallableStatement st = null;
        try {
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.registerOutParameter(7, VARCHAR);
            st.registerOutParameter(8, VARCHAR);
            st.registerOutParameter(9, VARCHAR);
            st.registerOutParameter(10, VARCHAR);
            st.executeUpdate();
            try {
                setAdd_mode(st.getObject(7).toString());
                setEdit_mode((st.getObject(8).toString()));
                setView_mode(st.getObject(9).toString());
                setDel_mode(st.getObject(10).toString());
            } catch (NullPointerException e) {
                System.out.println(e);
                e.printStackTrace();
            }
            return st.getObject(1);

        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {

                }
            }
        }
    }


    
    public Integer on_load_page()
            {  int count = 0;
            String cld_id =  resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString(); 
            Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString()); 
            String org_id =  resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString(); 
            Integer usr_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString()); 
            callStoredFunction(VARCHAR,"APP.fn_get_usr_doc_access_param(?,?,?,?,?,?,?,?,?)",
                                       new Object[] { cld_id, sloc_id, org_id, 1,usr_id});
            String calledFrom =  resolvEl("#{pageFlowScope.PARAM_PG_CALLED}").toString(); 
            if(add_mode.equalsIgnoreCase("Y") == false && add_mode.equalsIgnoreCase("N") == false)
            {            count = 1;
                }
            else if(edit_mode.equalsIgnoreCase("Y") == false && edit_mode.equalsIgnoreCase("N") == false)
            {
                count = 1;
                }
            else if(view_mode.equalsIgnoreCase("Y") == false && view_mode.equalsIgnoreCase("N") == false)
            {
               count = 1; 
                }
            else if (del_mode.equalsIgnoreCase("Y") == false && del_mode.equalsIgnoreCase("N") == false)
            {
               count = 1; 
                }
             else if(calledFrom.equalsIgnoreCase("P") == false && calledFrom.equalsIgnoreCase("M") == false)
            {
               count = 1; 
                }
            Map paramMap = RequestContext.getCurrentInstance().getPageFlowScope();
            paramMap.put("PARAM_PG_ADD_MD", add_mode); 
            paramMap.put("PARAM_PG_EDIT_MD", edit_mode); 
            paramMap.put("PARAM_PG_VIEW_MD", view_mode); 
            paramMap.put("PARAM_PG_DEL_MD", del_mode); 
            String addMode =  resolvEl("#{pageFlowScope.PARAM_PG_ADD_MD}").toString(); 
             String editMode =  resolvEl("#{pageFlowScope.PARAM_PG_EDIT_MD}").toString(); 
             String viewMode =  resolvEl("#{pageFlowScope.PARAM_PG_VIEW_MD}").toString(); 
             String deleteMode =  resolvEl("#{pageFlowScope.PARAM_PG_DEL_MD}").toString();       
      return count;
        }
    public void setAdd_mode(String add_mode) {
        this.add_mode = add_mode;
    }

    public String getAdd_mode() {
        return add_mode;
    }

    public void setEdit_mode(String edit_mode) {
        this.edit_mode = edit_mode;
    }

    public String getEdit_mode() {
        return edit_mode;
    }

    public void setView_mode(String view_mode) {
        this.view_mode = view_mode;
    }

    public String getView_mode() {
        return view_mode;
    }

    public void setDel_mode(String del_mode) {
        this.del_mode = del_mode;
    }

    public String getDel_mode() {
        return del_mode;
    }

    public void afterCommit(TransactionEvent transactionEvent) {
        super.afterCommit(transactionEvent);
    }

    /**
     * Container's getter for AppTax1.
     * @return AppTax1
     */
    public ViewObjectImpl getAppTax1() {
        return (ViewObjectImpl)findViewObject("AppTax1");
    }

    /**
     * Container's getter for CoaLOV1.
     * @return CoaLOV1
     */
    public ViewObjectImpl getCoaLOV1() {
        return (ViewObjectImpl)findViewObject("CoaLOV1");
    }
    public String finalizeValidation(){
     //   System.out.println("in finalizeValidation");
        AppTaxRuleLineVOImpl line = getAppTaxRuleLine();
        RowSetIterator rsi = line.createRowSetIterator(null);
        Map m=new TreeMap();
        while(rsi.hasNext()){
            Row next = rsi.next();
            Object pr = next.getAttribute("TaxRulePriority");
            m.put(pr, pr);
        }
        rsi.closeRowSetIterator();
        System.out.println("m.size = "+m.size());

        Set entrySet = m.entrySet();
        Iterator it = entrySet.iterator();
        int count=0;
       // System.out.println("initaialize count =0");
        while(it.hasNext()){
            
            Map.Entry next = (Map.Entry) it.next();
          //  System.out.println("next.getKey = "+next.getKey());
            //System.out.println("next.getValue() = "+next.getValue());
            //System.out.println("count  ="+count);
            if(!next.getValue().equals(count)){
                return "N";
            }
            count++;
        }
        return "Y";
    }

    /**
     * Container's getter for AppTaxRuleLineVO1.
     * @return AppTaxRuleLineVO1
     */
    public AppTaxRuleLineVOImpl getAppTaxRuleLineVO() {
        return (AppTaxRuleLineVOImpl) findViewObject("AppTaxRuleLineVO");
    }

    /**
     * Container's getter for TaxRuleToTaxRuleLineVL2.
     * @return TaxRuleToTaxRuleLineVL2
     */
    public ViewLinkImpl getTaxRuleToTaxRuleLineVL2() {
        return (ViewLinkImpl) findViewLink("TaxRuleToTaxRuleLineVL2");
    }

    /**
     * Container's getter for AppTaxRuleLineVO1.
     * @return AppTaxRuleLineVO1
     */
    public AppTaxRuleLineVOImpl getAppTaxRuleLineVO1() {
        return (AppTaxRuleLineVOImpl) findViewObject("AppTaxRuleLineVO1");
    }
    
    public Number getAppliedTaxAmount() {
         Number totaltax=new Number(0);
        AppTaxRuleLineVOImpl appTaxRuleLine = this.getAppTaxRuleLine();
        RowSetIterator itr=appTaxRuleLine.createRowSetIterator(null);
        while(itr.hasNext()) {
            Row row=itr.next();
            if(row.getAttribute("transTaxCalc")!=null)
            totaltax=totaltax.add((Number)row.getAttribute("transTaxCalc"));
            
        }
        System.out.println("total taxx amount is=="+totaltax);
        if(totaltax!=null)
           totaltax=(Number)totaltax.minus(new Number(100));
        System.out.println("total amount except basic is=="+totaltax);
        return  totaltax;
        
       }

    /**
     * Container's getter for AppTaxRulePackg1.
     * @return AppTaxRulePackg1
     */
    public ViewObjectImpl getAppTaxRulePackg1() {
        return (ViewObjectImpl) findViewObject("AppTaxRulePackg1");
    }

    /**
     * Container's getter for TaxRuleToTaxRulePckgVL1.
     * @return TaxRuleToTaxRulePckgVL1
     */
    public ViewLinkImpl getTaxRuleToTaxRulePckgVL1() {
        return (ViewLinkImpl) findViewLink("TaxRuleToTaxRulePckgVL1");
    }

    /**
     * Container's getter for LovPckg1.
     * @return LovPckg1
     */
    public ViewObjectImpl getLovPckg1() {
        return (ViewObjectImpl) findViewObject("LovPckg1");
    }
    public void insertDataIntoPckg(){
        ViewObjectImpl pck = getAppTaxRulePackg1();
        Row[] allRowsInRange = pck.getAllRowsInRange();
        if(allRowsInRange.length==0){
            ViewObjectImpl impl = getLovPckg1();
            RowSetIterator rsi = impl.createRowSetIterator(null);
            while(rsi.hasNext()){
                Row next = rsi.next();
                Row createRow = pck.createRow();
                createRow.setAttribute("TaxRulePackgId", next.getAttribute("GlblAppliStructId"));
                createRow.setAttribute("ApplFlg","Y");
                pck.insertRow(createRow);
            }
            rsi.closeRowSetIterator();
            pck.executeQuery();
            getDBTransaction().commit();
        }
    }

}
