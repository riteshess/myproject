package taxrule.model.views;

import java.math.BigDecimal;

import javax.el.ELContext;
import javax.el.ExpressionFactory;

import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.RowSetIterator;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.NClobDomain;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;

import taxrule.model.entities.AppTaxRuleLineEOImpl;
import taxrule.model.module.TaxRuleAMImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Jan 24 17:40:54 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AppTaxRuleLineVORowImpl extends ViewRowImpl {


    public static final int ENTITY_APPTAXRULELINEEO = 0;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        TaxId {
            public Object get(AppTaxRuleLineVORowImpl obj) {
                return obj.getTaxId();
            }

            public void put(AppTaxRuleLineVORowImpl obj, Object value) {
                obj.setTaxId((Integer) value);
            }
        }
        ,
        TaxRuleCalcRule {
            public Object get(AppTaxRuleLineVORowImpl obj) {
                return obj.getTaxRuleCalcRule();
            }

            public void put(AppTaxRuleLineVORowImpl obj, Object value) {
                obj.setTaxRuleCalcRule((String) value);
            }
        }
        ,
        TaxRuleId {
            public Object get(AppTaxRuleLineVORowImpl obj) {
                return obj.getTaxRuleId();
            }

            public void put(AppTaxRuleLineVORowImpl obj, Object value) {
                obj.setTaxRuleId((Integer) value);
            }
        }
        ,
        TaxCldId {
            public Object get(AppTaxRuleLineVORowImpl obj) {
                return obj.getTaxCldId();
            }

            public void put(AppTaxRuleLineVORowImpl obj, Object value) {
                obj.setTaxCldId((String) value);
            }
        }
        ,
        TaxHoOrgId {
            public Object get(AppTaxRuleLineVORowImpl obj) {
                return obj.getTaxHoOrgId();
            }

            public void put(AppTaxRuleLineVORowImpl obj, Object value) {
                obj.setTaxHoOrgId((String) value);
            }
        }
        ,
        TaxRulePriority {
            public Object get(AppTaxRuleLineVORowImpl obj) {
                return obj.getTaxRulePriority();
            }

            public void put(AppTaxRuleLineVORowImpl obj, Object value) {
                obj.setTaxRulePriority((Integer) value);
            }
        }
        ,
        TaxRuleSlno {
            public Object get(AppTaxRuleLineVORowImpl obj) {
                return obj.getTaxRuleSlno();
            }

            public void put(AppTaxRuleLineVORowImpl obj, Object value) {
                obj.setTaxRuleSlno((Integer) value);
            }
        }
        ,
        TaxRuleSlocId {
            public Object get(AppTaxRuleLineVORowImpl obj) {
                return obj.getTaxRuleSlocId();
            }

            public void put(AppTaxRuleLineVORowImpl obj, Object value) {
                obj.setTaxRuleSlocId((Integer) value);
            }
        }
        ,
        TaxTypeId {
            public Object get(AppTaxRuleLineVORowImpl obj) {
                return obj.getTaxTypeId();
            }

            public void put(AppTaxRuleLineVORowImpl obj, Object value) {
                obj.setTaxTypeId((Integer) value);
            }
        }
        ,
        UsrIdCreate {
            public Object get(AppTaxRuleLineVORowImpl obj) {
                return obj.getUsrIdCreate();
            }

            public void put(AppTaxRuleLineVORowImpl obj, Object value) {
                obj.setUsrIdCreate((Integer) value);
            }
        }
        ,
        UsrIdCreateDt {
            public Object get(AppTaxRuleLineVORowImpl obj) {
                return obj.getUsrIdCreateDt();
            }

            public void put(AppTaxRuleLineVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        UsrIdMod {
            public Object get(AppTaxRuleLineVORowImpl obj) {
                return obj.getUsrIdMod();
            }

            public void put(AppTaxRuleLineVORowImpl obj, Object value) {
                obj.setUsrIdMod((Integer) value);
            }
        }
        ,
        UsrIdModDt {
            public Object get(AppTaxRuleLineVORowImpl obj) {
                return obj.getUsrIdModDt();
            }

            public void put(AppTaxRuleLineVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        TaxRuleCalcType {
            public Object get(AppTaxRuleLineVORowImpl obj) {
                return obj.getTaxRuleCalcType();
            }

            public void put(AppTaxRuleLineVORowImpl obj, Object value) {
                obj.setTaxRuleCalcType((String) value);
            }
        }
        ,
        TaxRuleBalType {
            public Object get(AppTaxRuleLineVORowImpl obj) {
                return obj.getTaxRuleBalType();
            }

            public void put(AppTaxRuleLineVORowImpl obj, Object value) {
                obj.setTaxRuleBalType((String) value);
            }
        }
        ,
        TaxPer {
            public Object get(AppTaxRuleLineVORowImpl obj) {
                return obj.getTaxPer();
            }

            public void put(AppTaxRuleLineVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        Name {
            public Object get(AppTaxRuleLineVORowImpl obj) {
                return obj.getName();
            }

            public void put(AppTaxRuleLineVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        TaxRuleCoaId {
            public Object get(AppTaxRuleLineVORowImpl obj) {
                return obj.getTaxRuleCoaId();
            }

            public void put(AppTaxRuleLineVORowImpl obj, Object value) {
                obj.setTaxRuleCoaId((Integer) value);
            }
        }
        ,
        TaxRuleNaId {
            public Object get(AppTaxRuleLineVORowImpl obj) {
                return obj.getTaxRuleNaId();
            }

            public void put(AppTaxRuleLineVORowImpl obj, Object value) {
                obj.setTaxRuleNaId((Integer) value);
            }
        }
        ,
        TransTaxId {
            public Object get(AppTaxRuleLineVORowImpl obj) {
                return obj.getTransTaxId();
            }

            public void put(AppTaxRuleLineVORowImpl obj, Object value) {
                obj.setTransTaxId((Integer) value);
            }
        }
        ,
        transTaxCalc {
            public Object get(AppTaxRuleLineVORowImpl obj) {
                return obj.gettransTaxCalc();
            }

            public void put(AppTaxRuleLineVORowImpl obj, Object value) {
                obj.settransTaxCalc((Number) value);
            }
        }
        ,
        AppTaxRule {
            public Object get(AppTaxRuleLineVORowImpl obj) {
                return obj.getAppTaxRule();
            }

            public void put(AppTaxRuleLineVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        UserLOV {
            public Object get(AppTaxRuleLineVORowImpl obj) {
                return obj.getUserLOV();
            }

            public void put(AppTaxRuleLineVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        TaxNameLOV {
            public Object get(AppTaxRuleLineVORowImpl obj) {
                return obj.getTaxNameLOV();
            }

            public void put(AppTaxRuleLineVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        CalculationTypeLOV {
            public Object get(AppTaxRuleLineVORowImpl obj) {
                return obj.getCalculationTypeLOV();
            }

            public void put(AppTaxRuleLineVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        BalanceTypeLOV {
            public Object get(AppTaxRuleLineVORowImpl obj) {
                return obj.getBalanceTypeLOV();
            }

            public void put(AppTaxRuleLineVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        CoaLOV {
            public Object get(AppTaxRuleLineVORowImpl obj) {
                return obj.getCoaLOV();
            }

            public void put(AppTaxRuleLineVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        TaxLOV1 {
            public Object get(AppTaxRuleLineVORowImpl obj) {
                return obj.getTaxLOV1();
            }

            public void put(AppTaxRuleLineVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        UserLOV1 {
            public Object get(AppTaxRuleLineVORowImpl obj) {
                return obj.getUserLOV1();
            }

            public void put(AppTaxRuleLineVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        static AttributesEnum[] vals = null;
        ;
        private static int firstIndex = 0;

        public abstract Object get(AppTaxRuleLineVORowImpl object);

        public abstract void put(AppTaxRuleLineVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int TAXID = AttributesEnum.TaxId.index();
    public static final int TAXRULECALCRULE = AttributesEnum.TaxRuleCalcRule.index();
    public static final int TAXRULEID = AttributesEnum.TaxRuleId.index();
    public static final int TAXCLDID = AttributesEnum.TaxCldId.index();
    public static final int TAXHOORGID = AttributesEnum.TaxHoOrgId.index();
    public static final int TAXRULEPRIORITY = AttributesEnum.TaxRulePriority.index();
    public static final int TAXRULESLNO = AttributesEnum.TaxRuleSlno.index();
    public static final int TAXRULESLOCID = AttributesEnum.TaxRuleSlocId.index();
    public static final int TAXTYPEID = AttributesEnum.TaxTypeId.index();
    public static final int USRIDCREATE = AttributesEnum.UsrIdCreate.index();
    public static final int USRIDCREATEDT = AttributesEnum.UsrIdCreateDt.index();
    public static final int USRIDMOD = AttributesEnum.UsrIdMod.index();
    public static final int USRIDMODDT = AttributesEnum.UsrIdModDt.index();
    public static final int TAXRULECALCTYPE = AttributesEnum.TaxRuleCalcType.index();
    public static final int TAXRULEBALTYPE = AttributesEnum.TaxRuleBalType.index();
    public static final int TAXPER = AttributesEnum.TaxPer.index();
    public static final int NAME = AttributesEnum.Name.index();
    public static final int TAXRULECOAID = AttributesEnum.TaxRuleCoaId.index();
    public static final int TAXRULENAID = AttributesEnum.TaxRuleNaId.index();
    public static final int TRANSTAXID = AttributesEnum.TransTaxId.index();
    public static final int TRANSTAXCALC = AttributesEnum.transTaxCalc.index();
    public static final int APPTAXRULE = AttributesEnum.AppTaxRule.index();
    public static final int USERLOV = AttributesEnum.UserLOV.index();
    public static final int TAXNAMELOV = AttributesEnum.TaxNameLOV.index();
    public static final int CALCULATIONTYPELOV = AttributesEnum.CalculationTypeLOV.index();
    public static final int BALANCETYPELOV = AttributesEnum.BalanceTypeLOV.index();
    public static final int COALOV = AttributesEnum.CoaLOV.index();
    public static final int TAXLOV1 = AttributesEnum.TaxLOV1.index();
    public static final int USERLOV1 = AttributesEnum.UserLOV1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public AppTaxRuleLineVORowImpl() {
    }

    /**
     * Gets AppTaxRuleLineEO entity object.
     * @return the AppTaxRuleLineEO
     */
    public AppTaxRuleLineEOImpl getAppTaxRuleLineEO() {
        return (AppTaxRuleLineEOImpl) getEntity(ENTITY_APPTAXRULELINEEO);
    }

    /**
     * Gets the attribute value for TAX_ID using the alias name TaxId.
     * @return the TAX_ID
     */
    public Integer getTaxId() {
        return (Integer) getAttributeInternal(TAXID);
    }

    /**
     * Sets <code>value</code> as attribute value for TAX_ID using the alias name TaxId.
     * @param value value to set the TAX_ID
     */
    public void setTaxId(Integer value) {
        setAttributeInternal(TAXID, value);
    }

    /**
     * Gets the attribute value for TAX_RULE_CALC_RULE using the alias name TaxRuleCalcRule.
     * @return the TAX_RULE_CALC_RULE
     */
    public String getTaxRuleCalcRule() {
        return (String) getAttributeInternal(TAXRULECALCRULE);
    }

    /**
     * Sets <code>value</code> as attribute value for TAX_RULE_CALC_RULE using the alias name TaxRuleCalcRule.
     * @param value value to set the TAX_RULE_CALC_RULE
     */
    public void setTaxRuleCalcRule(String value) {
        setAttributeInternal(TAXRULECALCRULE, value);
    }

    /**
     * Gets the attribute value for TAX_RULE_ID using the alias name TaxRuleId.
     * @return the TAX_RULE_ID
     */
    public Integer getTaxRuleId() {
        return (Integer) getAttributeInternal(TAXRULEID);
    }

    /**
     * Sets <code>value</code> as attribute value for TAX_RULE_ID using the alias name TaxRuleId.
     * @param value value to set the TAX_RULE_ID
     */
    public void setTaxRuleId(Integer value) {
        setAttributeInternal(TAXRULEID, value);
    }

    /**
     * Gets the attribute value for TAX_CLD_ID using the alias name TaxCldId.
     * @return the TAX_CLD_ID
     */
    public String getTaxCldId() {
        return (String) getAttributeInternal(TAXCLDID);
    }

    /**
     * Sets <code>value</code> as attribute value for TAX_CLD_ID using the alias name TaxCldId.
     * @param value value to set the TAX_CLD_ID
     */
    public void setTaxCldId(String value) {
        setAttributeInternal(TAXCLDID, value);
    }

    /**
     * Gets the attribute value for TAX_HO_ORG_ID using the alias name TaxHoOrgId.
     * @return the TAX_HO_ORG_ID
     */
    public String getTaxHoOrgId() {
        return (String) getAttributeInternal(TAXHOORGID);
    }

    /**
     * Sets <code>value</code> as attribute value for TAX_HO_ORG_ID using the alias name TaxHoOrgId.
     * @param value value to set the TAX_HO_ORG_ID
     */
    public void setTaxHoOrgId(String value) {
        setAttributeInternal(TAXHOORGID, value);
    }

    /**
     * Gets the attribute value for TAX_RULE_PRIORITY using the alias name TaxRulePriority.
     * @return the TAX_RULE_PRIORITY
     */
    public Integer getTaxRulePriority() {
        return (Integer) getAttributeInternal(TAXRULEPRIORITY);
    }

    /**
     * Sets <code>value</code> as attribute value for TAX_RULE_PRIORITY using the alias name TaxRulePriority.
     * @param value value to set the TAX_RULE_PRIORITY
     */
    public void setTaxRulePriority(Integer value) {
        setAttributeInternal(TAXRULEPRIORITY, value);
    }

    /**
     * Gets the attribute value for TAX_RULE_SLNO using the alias name TaxRuleSlno.
     * @return the TAX_RULE_SLNO
     */
    public Integer getTaxRuleSlno() {
        return (Integer) getAttributeInternal(TAXRULESLNO);
    }

    /**
     * Sets <code>value</code> as attribute value for TAX_RULE_SLNO using the alias name TaxRuleSlno.
     * @param value value to set the TAX_RULE_SLNO
     */
    public void setTaxRuleSlno(Integer value) {
        setAttributeInternal(TAXRULESLNO, value);
    }

    /**
     * Gets the attribute value for TAX_RULE_SLOC_ID using the alias name TaxRuleSlocId.
     * @return the TAX_RULE_SLOC_ID
     */
    public Integer getTaxRuleSlocId() {
        return (Integer) getAttributeInternal(TAXRULESLOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for TAX_RULE_SLOC_ID using the alias name TaxRuleSlocId.
     * @param value value to set the TAX_RULE_SLOC_ID
     */
    public void setTaxRuleSlocId(Integer value) {
        setAttributeInternal(TAXRULESLOCID, value);
    }

    /**
     * Gets the attribute value for TAX_TYPE_ID using the alias name TaxTypeId.
     * @return the TAX_TYPE_ID
     */
    public Integer getTaxTypeId() {
        return (Integer) getAttributeInternal(TAXTYPEID);
    }

    /**
     * Sets <code>value</code> as attribute value for TAX_TYPE_ID using the alias name TaxTypeId.
     * @param value value to set the TAX_TYPE_ID
     */
    public void setTaxTypeId(Integer value) {
        setAttributeInternal(TAXTYPEID, value);
    }

    /**
     * Gets the attribute value for USR_ID_CREATE using the alias name UsrIdCreate.
     * @return the USR_ID_CREATE
     */
    public Integer getUsrIdCreate() {
        return (Integer) getAttributeInternal(USRIDCREATE);
    }

    /**
     * Sets <code>value</code> as attribute value for USR_ID_CREATE using the alias name UsrIdCreate.
     * @param value value to set the USR_ID_CREATE
     */
    public void setUsrIdCreate(Integer value) {
        setAttributeInternal(USRIDCREATE, value);
    }

    /**
     * Gets the attribute value for USR_ID_CREATE_DT using the alias name UsrIdCreateDt.
     * @return the USR_ID_CREATE_DT
     */
    public Date getUsrIdCreateDt() {
        return (Date) getAttributeInternal(USRIDCREATEDT);
    }


    /**
     * Gets the attribute value for USR_ID_MOD using the alias name UsrIdMod.
     * @return the USR_ID_MOD
     */
    public Integer getUsrIdMod() {
        return (Integer) getAttributeInternal(USRIDMOD);
    }

    /**
     * Sets <code>value</code> as attribute value for USR_ID_MOD using the alias name UsrIdMod.
     * @param value value to set the USR_ID_MOD
     */
    public void setUsrIdMod(Integer value) {
        setAttributeInternal(USRIDMOD, value);
    }

    /**
     * Gets the attribute value for USR_ID_MOD_DT using the alias name UsrIdModDt.
     * @return the USR_ID_MOD_DT
     */
    public Date getUsrIdModDt() {
        return (Date) getAttributeInternal(USRIDMODDT);
    }


    /**
     * Gets the attribute value for TAX_RULE_CALC_TYPE using the alias name TaxRuleCalcType.
     * @return the TAX_RULE_CALC_TYPE
     */
    public String getTaxRuleCalcType() {
        return (String) getAttributeInternal(TAXRULECALCTYPE);
    }

    /**
     * Sets <code>value</code> as attribute value for TAX_RULE_CALC_TYPE using the alias name TaxRuleCalcType.
     * @param value value to set the TAX_RULE_CALC_TYPE
     */
    public void setTaxRuleCalcType(String value) {
        setAttributeInternal(TAXRULECALCTYPE, value);
    }

    /**
     * Gets the attribute value for TAX_RULE_BAL_TYPE using the alias name TaxRuleBalType.
     * @return the TAX_RULE_BAL_TYPE
     */
    public String getTaxRuleBalType() {
        return (String) getAttributeInternal(TAXRULEBALTYPE);
    }

    /**
     * Sets <code>value</code> as attribute value for TAX_RULE_BAL_TYPE using the alias name TaxRuleBalType.
     * @param value value to set the TAX_RULE_BAL_TYPE
     */
    public void setTaxRuleBalType(String value) {
        setAttributeInternal(TAXRULEBALTYPE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TaxPer.
     * @return the TaxPer
     */
    public Number getTaxPer() {
        return (Number) getAttributeInternal(TAXPER);
    }


    /**
     * Gets the attribute value for the calculated attribute Name.
     * @return the Name
     */
    public String getName() {
        return (String) getAttributeInternal(NAME);
    }


    /**
     * Gets the attribute value for TAX_RULE_COA_ID using the alias name TaxRuleCoaId.
     * @return the TAX_RULE_COA_ID
     */
    public Integer getTaxRuleCoaId() {
        return (Integer) getAttributeInternal(TAXRULECOAID);
    }

    /**
     * Sets <code>value</code> as attribute value for TAX_RULE_COA_ID using the alias name TaxRuleCoaId.
     * @param value value to set the TAX_RULE_COA_ID
     */
    public void setTaxRuleCoaId(Integer value) {
        setAttributeInternal(TAXRULECOAID, value);
    }

    /**
     * Gets the attribute value for TAX_RULE_NA_ID using the alias name TaxRuleNaId.
     * @return the TAX_RULE_NA_ID
     */
    public Integer getTaxRuleNaId() {
        return (Integer) getAttributeInternal(TAXRULENAID);
    }

    /**
     * Sets <code>value</code> as attribute value for TAX_RULE_NA_ID using the alias name TaxRuleNaId.
     * @param value value to set the TAX_RULE_NA_ID
     */
    public void setTaxRuleNaId(Integer value) {
        setAttributeInternal(TAXRULENAID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransTaxId.
     * @return the TransTaxId
     */
    public Integer getTransTaxId() {
        Integer retvalue = getTaxId();
        if (getAttributeInternal(TRANSTAXID) == null) {
            return retvalue;
        } else {
            return (Integer) getAttributeInternal(TRANSTAXID);
        }

    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransTaxId.
     * @param value value to set the  TransTaxId
     */
    public void setTransTaxId(Integer value) {
        setAttributeInternal(TRANSTAXID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute transTaxCalc.
     * @return the transTaxCalc
     */
    public Object resolvElDC(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp =
            elFactory.createValueExpression(elContext, "#{data." + data + ".dataProvider}", Object.class);
        return valueExp.getValue(elContext);
    }
    private Number cummulativeTax = new Number(0);

    public Number gettransTaxCalc() {
        Number calc = new Number(0);
        Integer prprioty=0;
         TaxRuleAMImpl am = (TaxRuleAMImpl) resolvElDC("TaxRuleAMDataControl");
        ViewObjectImpl vo = am.getAppTaxRuleLineVO();
        ViewObjectImpl vo1 = am.getAppTaxRuleLine();
        //Row rows[] = vo1.getFilteredRows("TaxRuleSlocId", 1);
        Row rw[] = vo.getFilteredRows("TaxRuleSlocId", 1);
        System.out.println("total number of rows iss===" + rw.length);
        for (Integer i = 0; i < rw.length; i++) {
            if (getTaxId() != null && rw[i].getAttribute("TaxId") != null && getTaxPer() != null) {
                if (Integer.parseInt(rw[i].getAttribute("TaxId").toString()) == getTaxId()) {
                    if (Integer.parseInt(rw[i].getAttribute("TaxRulePriority").toString()) == 0) {
                        calc = new Number(100);
                        return calc;
                    } else {
                        if (rw[i].getAttribute("TaxRuleCalcType").toString().equalsIgnoreCase("I")) 
                        {
                         prprioty = Integer.parseInt(rw[i].getAttribute("TaxRulePriority").toString()) - 1;
                          if (prprioty == 0) {
                                calc = (new Number(100).multiply((getTaxPer()))).divide(100);
                                return calc;
                            } else {
                                 Row[] filteredRows = vo1.getFilteredRows("TaxRulePriority", prprioty);
                                System.out.println("filterd rows length is="+filteredRows.length);
                               for (Integer j = 0; j < filteredRows.length; j++) {
                                    System.out.println("namee iss==="+filteredRows[j].getAttribute("Name"));
                                    System.out.println("calulation is="+filteredRows[j].getAttribute("transTaxCalc"));
                                    calc = calc.add((Number) filteredRows[j].getAttribute("transTaxCalc"));
                                }                                
                                 if (getTaxPer() != null) {
                                    calc = calc.multiply(getTaxPer()).divide(100);
                                    return (calc);
                                }
                            }
                        } 
                    else {
                             for (Integer j = 1; j < rw.length; j++) {
                                if (Integer.parseInt(rw[j].getAttribute("TaxRulePriority").toString()) <
                                    Integer.parseInt(rw[i].getAttribute("TaxRulePriority").toString())) {
                                    if (rw[j].getAttribute("transTaxCalc") != null)                                    
                                    calc = calc.add((Number) rw[j].getAttribute("transTaxCalc"));
                                   
                                }
                            }
                                    if (getTaxPer() != null) {
                                calc = new Number(100).add(calc);
                                calc = calc.multiply(getTaxPer()).divide(100);
                            }
                              return calc;
                        }

                    }
                }
            }
        }
        return (Number) getAttributeInternal(TRANSTAXCALC);

    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute transTaxCalc.
     * @param value value to set the  transTaxCalc
     */
    public void settransTaxCalc(Number value) {
        setAttributeInternal(TRANSTAXCALC, value);
    }


    /**
     * Gets the associated <code>Row</code> using master-detail link AppTaxRule.
     */
    public Row getAppTaxRule() {
        return (Row) getAttributeInternal(APPTAXRULE);
    }

    /**
     * Sets the master-detail link AppTaxRule between this object and <code>value</code>.
     */
    public void setAppTaxRule(Row value) {
        setAttributeInternal(APPTAXRULE, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> UserLOV.
     */
    public RowSet getUserLOV() {
        return (RowSet) getAttributeInternal(USERLOV);
    }

    /**
     * Gets the view accessor <code>RowSet</code> TaxNameLOV.
     */
    public RowSet getTaxNameLOV() {
        return (RowSet) getAttributeInternal(TAXNAMELOV);
    }

    /**
     * Gets the view accessor <code>RowSet</code> CalculationTypeLOV.
     */
    public RowSet getCalculationTypeLOV() {
        return (RowSet) getAttributeInternal(CALCULATIONTYPELOV);
    }

    /**
     * Gets the view accessor <code>RowSet</code> BalanceTypeLOV.
     */
    public RowSet getBalanceTypeLOV() {
        return (RowSet) getAttributeInternal(BALANCETYPELOV);
    }

    /**
     * Gets the view accessor <code>RowSet</code> CoaLOV.
     */
    public RowSet getCoaLOV() {
        return (RowSet) getAttributeInternal(COALOV);
    }

    /**
     * Gets the view accessor <code>RowSet</code> TaxLOV1.
     */
    public RowSet getTaxLOV1() {
        return (RowSet) getAttributeInternal(TAXLOV1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> UserLOV1.
     */
    public RowSet getUserLOV1() {
        return (RowSet) getAttributeInternal(USERLOV1);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
