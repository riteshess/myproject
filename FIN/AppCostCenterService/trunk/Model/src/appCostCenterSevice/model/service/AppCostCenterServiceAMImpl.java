package appCostCenterSevice.model.service;

import adf.utils.ebiz.EbizParams;
import adf.utils.model.ADFModelUtils;

import appCostCenterSevice.model.service.common.AppCostCenterServiceAM;
import appCostCenterSevice.model.views.TempCostCenterVOImpl;

import java.sql.SQLException;

import java.text.DecimalFormat;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import oracle.jbo.AttributeDef;
import oracle.jbo.Row;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewObjectImpl;

import org.apache.myfaces.trinidad.context.RequestContext;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Feb 13 12:18:50 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AppCostCenterServiceAMImpl extends ApplicationModuleImpl implements AppCostCenterServiceAM {
    /**
     * This is the default constructor (do not remove).
     */
    public AppCostCenterServiceAMImpl() {
    }

    /**
     * Container's getter for TempCostCenter.
     * @return TempCostCenter
     */
    public TempCostCenterVOImpl getTempCostCenter() {
        return (TempCostCenterVOImpl) findViewObject("TempCostCenter");
    }

    /**
     * Method which will do post changes
     */
    public void postChangeData() {
        this.getDBTransaction().postChanges();

        //this.getDBTransaction().commit();
    }

    /**
     * Method which will delete all the rows present in cost center table
     */
    //public void deleteCCLines(String cldId, Integer slocId, String hoOrgId, String docId, String ccId)
    public void deleteCCLines(String cldId, Integer slocId, String hoOrgId, String orgId, String tempId, String tempSrc,
                              Integer docId, Integer usrId, String tempCcId, Number amount, String pCcLevel1,
                              String pCcLevel2, String pCcLevel3, String pCcLevel4, String pCcLevel5) {

        if (cldId != null && slocId != null && hoOrgId != null && tempId != null && tempCcId != null) {
            ViewObjectImpl center = this.getTempCostCenter();

            RowQualifier rQ = new RowQualifier(center);
            rQ.setWhereClause("TempCldId ='" + cldId + "' and TempSlocId =" + slocId + " and TempHoOrgId ='" + hoOrgId +
                              "' and TempId ='" + tempId + "' and TempCcId ='" + tempCcId + "' and TempOrgId ='" +
                              orgId + "' and TempDocId =" + docId);
            Row[] filteredRows = center.getFilteredRows(rQ);
            if (filteredRows.length > 0) {
                for (Row r : filteredRows) {
                    r.remove();
                }
                this.getDBTransaction().commit();
            }
        }
    }

    /**
     * Method which will check parameter amount with tempCosstCenter Total amount
     * If both are equal then return true
     * else return false
     */
    private Boolean chkAmtDetails(String cldId, Integer slocId, String hoOrgId, String orgId, String tempId,
                                  String tempSrc, Integer docId, Integer usrId, String tempCcId, Number amount) {
        Boolean val = false;

        if (amount != null) {
            ViewObjectImpl center = this.getTempCostCenter();
            center.setRangeSize(-1);
            center.executeQuery();

            RowQualifier rQ = new RowQualifier(center);
            rQ.setWhereClause("TempCldId ='" + cldId + "' and TempSlocId =" + slocId + " and TempHoOrgId ='" + hoOrgId +
                              "' and TempId ='" + tempId + "' and TempCcId ='" + tempCcId + "' and TempOrgId ='" +
                              orgId + "' and TempDocId =" + docId);
            Row[] filteredRows = center.getFilteredRows(rQ);

            if (filteredRows.length > 0) {
                Number chkVal = new Number(0);

                for (Row r : filteredRows) {
                    chkVal = chkVal.add((Number) r.getAttribute("TempCcAmount"));
                }

                if (amount.compareTo(chkVal) == 0) {
                    val = true;
                }
            }
        }
        return val;
    }


    /**
     * Method which will update related the rows from TempCostCentertable when user change amount or quantity
     */
    public Boolean updateCCAmount(String cldId, Integer slocId, String hoOrgId, String orgId, String tempId,
                                  String tempSrc, Integer docId, Integer usrId, String tempCcId, Number amount,
                                  String pCcLevel1, String pCcLevel2, String pCcLevel3, String pCcLevel4,
                                  String pCcLevel5) {
        Boolean val = true;


        if (cldId != null && slocId != null && hoOrgId != null && tempCcId != null && amount != null) {
            ViewObjectImpl center = this.getTempCostCenter();
            center.setRangeSize(-1);
            center.executeQuery();
            RowQualifier rQ = new RowQualifier(center);
            rQ.setWhereClause("TempCldId ='" + cldId + "' and TempSlocId =" + slocId + " and TempHoOrgId ='" + hoOrgId +
                              "' and TempId ='" + tempId + "' and TempCcId ='" + tempCcId + "' and TempOrgId ='" +
                              orgId + "' and TempDocId =" + docId);
            Row[] filteredRows = center.getFilteredRows(rQ);
            Number equalval = new Number(0);
            /// Will update if rows were available
            if (filteredRows.length > 0) {
                try {
                    for (Row curr : filteredRows) {
                        if (curr.getAttribute("TempAmountType") != null) {
                            String amtType = curr.getAttribute("TempAmountType").toString();
                            if (amtType.equals("E")) {
                                Double db = amount.doubleValue() / filteredRows.length;
                                DecimalFormat df = new DecimalFormat(".000000");
                                String outStr = df.format(db);
                                equalval = new Number(outStr);
                                val = true;
                            } else if (amtType.equals("N")) {
                                val = false;
                            }
                        }
                    }
                    if (val) {
                        /// Will Update the values
                        for (Row r : filteredRows) {
                            r.setAttribute("TempCcAmount", equalval.round(EbizParams.GLBL_AMT_DIGIT()));
                        }
                        this.getDBTransaction().commit();
                    } else { /// Method which will check total cost center amount and parameter amount equal or not
                        //// If equal then it will set val to true
                        ////// else val is set to false

                        val =
                            chkAmtDetails(cldId, slocId, hoOrgId, orgId, tempId, tempSrc, docId, usrId, tempCcId,
                                          amount);
                    }
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            } else { /// Will Insert the rowws into cost center table if rows are not available
                String lineOrgID = EbizParams.GLBL_APP_USR_ORG();
                System.out.println("lineOrgId" +lineOrgID);
                if(lineOrgID != null){
                if(lineOrgID.equals(orgId))
                generateCostCenterApp(cldId, slocId, hoOrgId, orgId, tempId, tempSrc, docId, usrId, tempCcId, amount,
                                      pCcLevel1, pCcLevel2, pCcLevel3, pCcLevel4, pCcLevel5);
            }}
        }
        return val;
    }

    /**
     *Method which will insert data into Temp Cost Center Conditionally based on tempSrc
     *
     * If tempSrc is 'H' then data will be inserted normally
     *
     * If tempSrc is 'I' then data will be checked in TempCostCenter table
     * and if present inside that table values of that rows is fetched
     * and will set it at the time of inserting in TempCostCenter
     *
     * @param cldId
     * @param slocId
     * @param hoOrgId
     * @param orgId
     * @param tempId
     * @param tempSrc
     * @param docId
     * @param usrId
     * @param tempCcId
     * @param amount
     * @param pCcLevel1
     * @param pCcLevel2
     * @param pCcLevel3
     * @param pCcLevel4
     * @param pCcLevel5
     */
    public void generateCostCenterApp(String cldId, Integer slocId, String hoOrgId, String orgId, String tempId,
                                      String tempSrc, Integer docId, Integer usrId, String tempCcId, Number amount,
                                      String pCcLevel1, String pCcLevel2, String pCcLevel3, String pCcLevel4,
                                      String pCcLevel5) {

        if (cldId != null && slocId != null && hoOrgId != null && orgId != null && tempId != null && tempSrc != null &&
            docId != null && usrId != null && tempCcId != null) {

            if (tempSrc.equalsIgnoreCase("H")) {
                insertIntoTempCc(cldId, slocId, hoOrgId, orgId, tempId, tempSrc, docId, usrId, tempCcId, amount,
                                 pCcLevel1, pCcLevel2, pCcLevel3, pCcLevel4, pCcLevel5);

                this.getTempCostCenter().executeQuery();
            } else if (tempSrc.equalsIgnoreCase("L")) {

                TempCostCenterVOImpl center = this.getTempCostCenter();
                center.setRangeSize(-1);
                center.executeQuery();

                RowQualifier rQ = new RowQualifier(center);
                rQ.setWhereClause("TempCldId ='" + cldId + "' and TempSlocId =" + slocId + " and TempHoOrgId ='" +
                                  hoOrgId + "' and TempId ='" + tempId + "' and TempCcId ='" + tempId +
                                  "' and TempSrc ='H' and TempOrgId ='" + orgId + "' and TempDocId =" + docId);
                Row[] filteredRows = center.getFilteredRows(rQ);
                if (filteredRows.length > 0) {

                    String level1 = null;
                    String level2 = null;
                    String level3 = null;
                    String level4 = null;
                    String level5 = null;

                    amount = amount.divide(filteredRows.length);

                    for (Row r : filteredRows) {
                        level1 = pCcLevel1;
                        level2 = pCcLevel2;
                        level3 = pCcLevel3;
                        level4 = pCcLevel4;
                        level5 = pCcLevel5;

                        if (level1 != null) {
                        } else {
                            level1 = (String) r.getAttribute("TempCcidLvl1");
                        }
                        if (level2 != null) {
                        } else {
                            level2 = (String) r.getAttribute("TempCcidLvl2");
                        }
                        if (level3 != null) {
                        } else {
                            level3 = (String) r.getAttribute("TempCcidLvl3");
                        }
                        if (level4 != null) {
                        } else {
                            level4 = (String) r.getAttribute("TempCcidLvl4");
                        }
                        if (level5 != null) {
                        } else {
                            level5 = (String) r.getAttribute("TempCcidLvl5");
                        }
                        insertIntoTempCc(cldId, slocId, hoOrgId, orgId, tempId, tempSrc, docId, usrId, tempCcId, amount,
                                         level1, level2, level3, level4, level5);

                        level1 = null;
                        level2 = null;
                        level3 = null;
                        level4 = null;
                        level5 = null;

                    }
                } else {
                    insertIntoTempCc(cldId, slocId, hoOrgId, orgId, tempId, tempSrc, docId, usrId, tempCcId, amount,
                                     pCcLevel1, pCcLevel2, pCcLevel3, pCcLevel4, pCcLevel5);

                }
            }

            this.getDBTransaction().commit();

        } else {
            FacesMessage message = new FacesMessage(resolvEl("#{bundle['MSG.2345']}")); //Cannot generate Cost Center
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext fc = FacesContext.getCurrentInstance();
            fc.addMessage(null, message);
        }
    }
    
    public String resolvEl(String data) {
            FacesContext fc = FacesContext.getCurrentInstance();
            Application app = fc.getApplication();
            ExpressionFactory elFactory = app.getExpressionFactory();
            ELContext elContext = fc.getELContext();
            ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
            String Message = valueExp.getValue(elContext).toString();
            return Message;
        }

    /**
     *Method which will insert into TempCost Center Table
     * @param cldId
     * @param slocId
     * @param hoOrgId
     * @param orgId
     * @param tempId
     * @param tempSrc
     * @param docId
     * @param usrId
     * @param tempCcId
     * @param amount
     * @param pCcLevel1
     * @param pCcLevel2
     * @param pCcLevel3
     * @param pCcLevel4
     * @param pCcLevel5
     */

    private void insertIntoTempCc(String cldId, Integer slocId, String hoOrgId, String orgId, String tempId,
                                  String tempSrc, Integer docId, Integer usrId, String tempCcId, Number amount,
                                  String pCcLevel1, String pCcLevel2, String pCcLevel3, String pCcLevel4,
                                  String pCcLevel5) {


        ViewObjectImpl center = this.getTempCostCenter();

        RowQualifier rQ = new RowQualifier(center);
        rQ.setWhereClause("TempCldId ='" + cldId + "' and TempSlocId =" + slocId + " and TempHoOrgId ='" + hoOrgId +
                          "' and TempId ='" + tempId + "' and TempCcId ='" + tempCcId +
                          "' and TempSrc ='H' and TempOrgId ='" + orgId + "' and TempDocId =" + docId);
        Row[] filteredRows = center.getFilteredRows(rQ);


        if (filteredRows.length > 0) {
            ///// Data already inserted








        } else { /// Need to insert data into temp cost center table
            Object ccPrfId = null;
            String level1 = null;
            String level2 = null;
            String level3 = null;
            String level4 = null;
            String level5 = null;

            /// Following VO will get PrfId from AppCcDoc VO
            ViewObjectImpl appCcDocVO1 = this.getAppCcDocVO1();

            appCcDocVO1.setNamedWhereClauseParam("BindCldId", cldId);
            appCcDocVO1.setNamedWhereClauseParam("BindSlocId", slocId);
            appCcDocVO1.setNamedWhereClauseParam("BindHoOrgId", hoOrgId);
            appCcDocVO1.setNamedWhereClauseParam("BindOrgId", orgId);
            appCcDocVO1.setNamedWhereClauseParam("BindDocId", docId);

            appCcDocVO1.executeQuery();

            Row[] allRowsInRange = appCcDocVO1.getAllRowsInRange();
            if (allRowsInRange.length > 0) {
                ccPrfId = allRowsInRange[0].getAttribute("CcPrfId");
            }


            if (ccPrfId != null) {
                /// Following VO will filter Default data present for document Id or not
                /// If present then it will fetch default data from that VO and insert into TempcostCenter Table
                //// in Label wise  manner
                ViewObjectImpl appCcDocDefaultDtlVO1 = this.getAppCcDocDefaultDtlVO1();
                appCcDocDefaultDtlVO1.setNamedWhereClauseParam("BindCldId", cldId);
                appCcDocDefaultDtlVO1.setNamedWhereClauseParam("BindSlocId", slocId);
                appCcDocDefaultDtlVO1.setNamedWhereClauseParam("BindHoOrgId", hoOrgId);
                appCcDocDefaultDtlVO1.setNamedWhereClauseParam("BindOrgId", orgId);
                appCcDocDefaultDtlVO1.setNamedWhereClauseParam("BindCcPrfId", ccPrfId);
                appCcDocDefaultDtlVO1.setNamedWhereClauseParam("BindDocId", docId);

                /// Level 1 Value will be obtained
                if (pCcLevel1 != null) {
                    level1 = pCcLevel1;
                } else {
                    appCcDocDefaultDtlVO1.setNamedWhereClauseParam("BindCcPos", 1);
                    appCcDocDefaultDtlVO1.executeQuery();

                    Row[] inRange = appCcDocDefaultDtlVO1.getAllRowsInRange();
                    if (inRange.length > 0) {
                        level1 = (String) inRange[0].getAttribute("CcDefaultColId");
                    } else {
                        level1 = null;
                    }
                }

                //// Level 2 Value will be obtained
                if (pCcLevel2 != null) {
                    level2 = pCcLevel2;
                } else {
                    appCcDocDefaultDtlVO1.setNamedWhereClauseParam("BindCcPos", 2);
                    appCcDocDefaultDtlVO1.executeQuery();

                    Row[] inRange = appCcDocDefaultDtlVO1.getAllRowsInRange();
                    if (inRange.length > 0) {
                        level2 = (String) inRange[0].getAttribute("CcDefaultColId");
                    } else {
                        level2 = null;
                    }
                }


                //// Level 3 value will be obtained
                if (pCcLevel3 != null) {
                    level3 = pCcLevel3;
                } else {
                    appCcDocDefaultDtlVO1.setNamedWhereClauseParam("BindCcPos", 3);
                    appCcDocDefaultDtlVO1.executeQuery();

                    Row[] inRange = appCcDocDefaultDtlVO1.getAllRowsInRange();
                    if (inRange.length > 0) {
                        level3 = (String) inRange[0].getAttribute("CcDefaultColId");
                    } else {
                        level3 = null;
                    }
                }


                //// Level 4 value will be obtained
                if (pCcLevel4 != null) {
                    level4 = pCcLevel4;
                } else {
                    appCcDocDefaultDtlVO1.setNamedWhereClauseParam("BindCcPos", 4);
                    appCcDocDefaultDtlVO1.executeQuery();

                    Row[] inRange = appCcDocDefaultDtlVO1.getAllRowsInRange();
                    if (inRange.length > 0) {
                        level4 = (String) inRange[0].getAttribute("CcDefaultColId");
                    } else {
                        level4 = null;
                    }
                }

                //// Level 5 value will be obtained
                if (pCcLevel5 != null) {
                    level5 = pCcLevel5;
                } else {
                    appCcDocDefaultDtlVO1.setNamedWhereClauseParam("BindCcPos", 5);
                    appCcDocDefaultDtlVO1.executeQuery();

                    Row[] inRange = appCcDocDefaultDtlVO1.getAllRowsInRange();
                    if (inRange.length > 0) {
                        level5 = (String) inRange[0].getAttribute("CcDefaultColId");
                    } else {
                        level5 = null;
                    }
                }
            }

            /// Will check atleastt one level value is present or not If present then it will create a row
            /// Else it won't create any row.
            if (level1 != null || level2 != null || level3 != null || level4 != null || level5 != null) {

                Row createRow = center.createRow();

                createRow.setAttribute("TempCldId", cldId);
                createRow.setAttribute("TempSlocId", slocId);
                createRow.setAttribute("TempHoOrgId", hoOrgId);
                createRow.setAttribute("TempOrgId", orgId);
                createRow.setAttribute("TempDocId", docId);
                createRow.setAttribute("TempApplInstId", 1);
                createRow.setAttribute("TempId", tempId);
                createRow.setAttribute("TempCcSlNo",
                                       getMaxSlNo(cldId, slocId, hoOrgId, orgId, tempId, tempSrc, docId, tempCcId));
                createRow.setAttribute("TempSlNo", 0);
                createRow.setAttribute("TempSrc", tempSrc);
                createRow.setAttribute("TempCcId", tempCcId);

                createRow.setAttribute("UsrIdCreate", usrId);
                //createRow.setAttribute("UsrIdCreateDt", new Timestamp(System.currentTimeMillis()));

                if (level1 != null) {
                    createRow.setAttribute("TempCcidLvl1", level1);
                }
                if (level2 != null) {
                    createRow.setAttribute("TempCcidLvl2", level2);
                }
                if (level3 != null) {
                    createRow.setAttribute("TempCcidLvl3", level3);
                }
                if (level4 != null) {
                    createRow.setAttribute("TempCcidLvl4", level4);
                }
                if (level5 != null) {
                    createRow.setAttribute("TempCcidLvl5", level5);
                }

                if (tempSrc.equalsIgnoreCase("H")) { // For Header cost Center is created

                    createRow.setAttribute("TempAmountType", "E");

                } else { // For Detail Cost center will be created

                    createRow.setAttribute("TempCcAmount", amount);
                    createRow.setAttribute("TempAmountType", "E");

                }

                center.insertRow(createRow);
            }
        }
    }


    public Boolean chkCcApplicableOrNot(Integer docId) {
        Boolean val = false;

        ViewObjectImpl appCcDocVO1 = this.getAppCcDocVO1();
        appCcDocVO1.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        appCcDocVO1.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        appCcDocVO1.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        appCcDocVO1.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        appCcDocVO1.setNamedWhereClauseParam("BindDocId", docId);
        appCcDocVO1.executeQuery();

        Row[] allRowsInRange = appCcDocVO1.getAllRowsInRange();
        if (allRowsInRange.length > 0) {
            val = true;
        }

        return val;
    }


    private Integer getMaxSlNo(String cldId, Integer slocId, String hoOrgId, String orgId, String tempId,
                               String tempSrc, Integer docId, String tempCcId) {

        ViewObjectImpl center = this.getTempCostCenter();
        center.setRangeSize(-1);
        center.executeQuery();

        RowQualifier rQ = new RowQualifier(center);
        rQ.setWhereClause("TempCldId ='" + cldId + "' and TempSlocId =" + slocId + " and TempHoOrgId ='" + hoOrgId +
                          "' and TempOrgId ='" + orgId + "' and TempId ='" + tempId + "' and TempCcId ='" + tempCcId +
                          "' and TempDocId =" + docId + " and tempSrc = 'L'");
        Row[] filteredRows = center.getFilteredRows(rQ);

        int count = filteredRows.length;
        Integer maxNumber = 0;
        Integer val = 0;
        if (count > 0) {
            for (Row rw : filteredRows) {
                val = (Integer) rw.getAttribute("TempCcSlNo");
                if (val > maxNumber) {
                    maxNumber = val;
                }
            }
        }

        return maxNumber + 1;
    }


    /**
     * Container's getter for AppCcDoc1.
     * @return AppCcDoc1
     */
    public ViewObjectImpl getAppCcDocVO1() {
        return (ViewObjectImpl) findViewObject("AppCcDocVO1");
    }

    /**
     * Container's getter for AppCcDocDefaultDtl1.
     * @return AppCcDocDefaultDtl1
     */
    public ViewObjectImpl getAppCcDocDefaultDtlVO1() {
        return (ViewObjectImpl) findViewObject("AppCcDocDefaultDtlVO1");
    }

    /**
     * Container's getter for LOVShowFilteredRows1.
     * @return LOVShowFilteredRows1
     */
    public ViewObjectImpl getLOVShowFilteredRowsVO1() {
        return (ViewObjectImpl) findViewObject("LOVShowFilteredRowsVO1");
    }

    /**
     * Container's getter for Temporary1.
     * @return Temporary1
     */
    public ViewObjectImpl getTemporaryVO1() {
        return (ViewObjectImpl) findViewObject("TemporaryVO1");
    }


    /**
     * To Get Column Id based on Column Name
     */
    public String getColId(String name) {
        String id = null;
        if (name != null) {
            ViewObjectImpl colId1 = this.getGetColId1();
            colId1.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
            colId1.setNamedWhereClauseParam("BindColValue", name);
            colId1.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
            colId1.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_HO_ORG_ID());
            colId1.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
            colId1.executeQuery();
            Row[] allRowsInRange = colId1.getAllRowsInRange();
            if (allRowsInRange.length > 0) {
                id = (String) allRowsInRange[0].getAttribute("ColId");
            }
        }
        return id;
    }


    /**Method to resolve expression- returns String value*/
    public Object resolvElO(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        Object Message = valueExp.getValue(elContext);
        return Message;
    }

    /**
     * Container's getter for GetColId1.
     * @return GetColId1
     */
    public ViewObjectImpl getGetColId1() {
        return (ViewObjectImpl) findViewObject("GetColId1");
    }


    public void generateCostCenterHeaderWise(String txnId, Integer glblDocId, ViewObjectImpl obj) {

        AppCostCenterServiceAMImpl amCC = this;
        /*
            * @param cldId
            * @param slocId
            * @param hoOrgId
            * @param orgId
            * @param tempId
            * @param tempSrc
            * @param docId
            * @param usrId
            * @param tempCcId
            * @param amount
            * @param pCcLevel1
            * @param pCcLevel2
            * @param pCcLevel3
            * @param pCcLevel4
            * @param pCcLevel5
            */


        declareGlblValuesForCC(glblDocId, obj);

        amCC.generateCostCenterApp(EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                   EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(), txnId, "H", 21503,
                                   EbizParams.GLBL_APP_USR(), txnId, new Number(0),
                                   (String) resolvElO("#{pageFlowScope.P_CC_LEVEL1}"),
                                   (String) resolvElO("#{pageFlowScope.P_CC_LEVEL2}"),
                                   (String) resolvElO("#{pageFlowScope.P_CC_LEVEL3}"),
                                   (String) resolvElO("#{pageFlowScope.P_CC_LEVEL4}"),
                                   (String) resolvElO("#{pageFlowScope.P_CC_LEVEL5}"));


    }

    public void declareGlblValuesForCC(Integer glblDocId, ViewObjectImpl vo) {
        ViewObjectImpl appCcVwVO1 = this.getAppCcVw1();
        appCcVwVO1.setRangeSize(-1);

        appCcVwVO1.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        appCcVwVO1.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        appCcVwVO1.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        appCcVwVO1.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        appCcVwVO1.setNamedWhereClauseParam("BindDocId", glblDocId);

        Row currentRow = vo.getCurrentRow();
        if (currentRow != null) {
            for (int i = 1; i <= 5; i++) {
                appCcVwVO1.setNamedWhereClauseParam("BindCcPos", i);
                appCcVwVO1.executeQuery();

                Row[] allRowsInRange = appCcVwVO1.getAllRowsInRange();
                if (allRowsInRange.length > 0) {
                    String columnName = null;
                    for (Row r : allRowsInRange) {
                        AttributeDef[] attributeDef = vo.getAttributeDefs();

                        for (int j = 0; j < attributeDef.length; j++) {
                            /*  System.out.println("j value is " + attributeDef[j].getColumnName());
                                System.out.println("------------ null value is " + r.getAttribute("DbobColNm"));
                                System.out.println("attributeDef[j].getColumnName().equalsIgnoreCase(r.getAttribute(\"DbobColNm\").toString()) " +
                                                   attributeDef[j].getColumnName().equals(r.getAttribute("DbobColNm")));
                                */
                            if (attributeDef[j].getColumnName() != null &&
                                attributeDef[j].getColumnName().equals(r.getAttribute("DbobColNm"))) {
                                columnName = attributeDef[j].getName();
                            }
                        }
                        System.out.println("Column Name is " + columnName);

                        if (columnName != null) {

                            System.out.println("i is " + i + " Cost center Value is " +
                                               currentRow.getAttribute(columnName));


                            RequestContext.getCurrentInstance().getPageFlowScope().put("P_CC_LEVEL" + i,
                                                                                       currentRow.getAttribute(columnName));
                        }
                    }
                } else {
                    System.out.println("i is" + i + " cost center value is null");

                    RequestContext.getCurrentInstance().getPageFlowScope().put("P_CC_LEVEL" + i, null);

                }
            }
        }
    }

    /**
     * Container's getter for AppCcVw1.
     * @return AppCcVw1
     */
    public ViewObjectImpl getAppCcVw1() {
        return (ViewObjectImpl) findViewObject("AppCcVw1");
    }

    /**
     * Container's getter for AppCcStructMan1.
     * @return AppCcStructMan1
     */
    public ViewObjectImpl getAppCcStructMan() {
        return (ViewObjectImpl) findViewObject("AppCcStructMan");
    }


    public Boolean chkLvlPosManForType(Integer lvlPos) {
        Object ccPrfId = null;
        ViewObjectImpl appCcDocVO1 = this.getAppCcDocVO1();

        appCcDocVO1.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        appCcDocVO1.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        appCcDocVO1.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        appCcDocVO1.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        appCcDocVO1.setNamedWhereClauseParam("BindDocId", ADFModelUtils.resolvEl("#{pageFlowScope.DOC_ID}"));
        appCcDocVO1.executeQuery();
        Row[] allRowsInRange = appCcDocVO1.getAllRowsInRange();
        if (allRowsInRange.length > 0) {
            ccPrfId = allRowsInRange[0].getAttribute("CcPrfId");
        }
        System.out.println("Profile Id =" + ccPrfId);
        if (ccPrfId != null) {
            this.getAppCcStructMan().setRangeSize(-1);
            this.getAppCcStructMan().setNamedWhereClauseParam("cldIdBind", EbizParams.GLBL_APP_CLD_ID());
            this.getAppCcStructMan().setNamedWhereClauseParam("slocIdBind", EbizParams.GLBL_APP_SERV_LOC());
            this.getAppCcStructMan().setNamedWhereClauseParam("orgIdBind", EbizParams.GLBL_APP_USR_ORG());
            this.getAppCcStructMan().setNamedWhereClauseParam("hoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
            this.getAppCcStructMan().setNamedWhereClauseParam("prfIdBind", ccPrfId);
            this.getAppCcStructMan().executeQuery();
            RowQualifier rq =
                new RowQualifier("CcPos=" + lvlPos + " and ManType='" +
                                 ADFModelUtils.resolvEl("#{pageFlowScope.P_MAN_TYPE}") + "' and ManVal=" +
                                 ADFModelUtils.resolvEl("#{pageFlowScope.P_MAN_VAL}"));
            Row[] manRow = this.getAppCcStructMan().getFilteredRows(rq);
            if (manRow.length > 0)
                return true;

        }
        return false;
    }
}


