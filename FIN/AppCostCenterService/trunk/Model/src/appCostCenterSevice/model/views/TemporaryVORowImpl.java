package appCostCenterSevice.model.views;

import appCostCenterSevice.model.service.AppCostCenterServiceAMImpl;

import java.sql.SQLException;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.Row;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Jun 06 16:20:50 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TemporaryVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CldId {
            public Object get(TemporaryVORowImpl obj) {
                return obj.getCldId();
            }

            public void put(TemporaryVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        SlocId {
            public Object get(TemporaryVORowImpl obj) {
                return obj.getSlocId();
            }

            public void put(TemporaryVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        HoOrgId {
            public Object get(TemporaryVORowImpl obj) {
                return obj.getHoOrgId();
            }

            public void put(TemporaryVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        OrgId {
            public Object get(TemporaryVORowImpl obj) {
                return obj.getOrgId();
            }

            public void put(TemporaryVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        ActualAmtTrans {
            public Object get(TemporaryVORowImpl obj) {
                return obj.getActualAmtTrans();
            }

            public void put(TemporaryVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        TempCcTotAmtTrans {
            public Object get(TemporaryVORowImpl obj) {
                return obj.getTempCcTotAmtTrans();
            }

            public void put(TemporaryVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        DifferAmtTrans {
            public Object get(TemporaryVORowImpl obj) {
                return obj.getDifferAmtTrans();
            }

            public void put(TemporaryVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        };
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(TemporaryVORowImpl object);

        public abstract void put(TemporaryVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int ACTUALAMTTRANS = AttributesEnum.ActualAmtTrans.index();
    public static final int TEMPCCTOTAMTTRANS = AttributesEnum.TempCcTotAmtTrans.index();
    public static final int DIFFERAMTTRANS = AttributesEnum.DifferAmtTrans.index();

    /**
     * This is the default constructor (do not remove).
     */
    public TemporaryVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute CldId.
     * @return the CldId
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Gets the attribute value for the calculated attribute SlocId.
     * @return the SlocId
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Gets the attribute value for the calculated attribute HoOrgId.
     * @return the HoOrgId
     */
    public String getHoOrgId() {
        return (String) getAttributeInternal(HOORGID);
    }

    /**
     * Gets the attribute value for the calculated attribute OrgId.
     * @return the OrgId
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }


    /**
     * Gets the attribute value for the calculated attribute ActualAmtTrans.
     * @return the ActualAmtTrans
     */
    public Number getActualAmtTrans() {
        if (resolvElO("#{pageFlowScope.TVOU_SRC}") != null &&
            resolvElO("#{pageFlowScope.TVOU_SRC}").toString().equalsIgnoreCase("L")) {
            try {
                return new Number(resolvElO("#{pageFlowScope.AMOUNT_VALUE}").toString());
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        //System.out.println("ActualAmtTrans" +(Number) getAttributeInternal(ACTUALAMTTRANS));
        return (Number) getAttributeInternal(ACTUALAMTTRANS);
    }


    /**
     * Gets the attribute value for the calculated attribute TempCcTotAmtTrans.
     * @return the TempCcTotAmtTrans
     */
    public Number getTempCcTotAmtTrans() {
        if (resolvElO("#{pageFlowScope.TVOU_SRC}") != null &&
            resolvElO("#{pageFlowScope.TVOU_SRC}").toString().equalsIgnoreCase("L")) {
            Number val = new Number(0);
            TempCostCenterVOImpl center = this.getAm().getTempCostCenter();
            Row[] allRowsInRange = center.getAllRowsInRange();
            for (Row r : allRowsInRange) {
                val = val.add((Number) r.getAttribute("TempCcAmount"));
            }
            if (val != null) {
                return val;
            }
        }
        //System.out.println("TempccTotAmt" +(Number) getAttributeInternal(TEMPCCTOTAMTTRANS));
        return (Number) getAttributeInternal(TEMPCCTOTAMTTRANS);
    }

    /**
     * Gets the attribute value for the calculated attribute DifferAmtTrans.
     * @return the DifferAmtTrans
     */
    public Number getDifferAmtTrans() {
        if (resolvElO("#{pageFlowScope.TVOU_SRC}") != null &&
            resolvElO("#{pageFlowScope.TVOU_SRC}").toString().equalsIgnoreCase("L")) {
            if (this.getActualAmtTrans() != null && this.getTempCcTotAmtTrans() != null) {
                Number val = new Number(0);
                val = this.getActualAmtTrans().subtract(this.getTempCcTotAmtTrans());
                if (val != null) {
                    return val;
                }
            }
        }
        return (Number) getAttributeInternal(DIFFERAMTTRANS);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * Method will return Application Module App
     */
    public AppCostCenterServiceAMImpl getAm() {
        AppCostCenterServiceAMImpl am = (AppCostCenterServiceAMImpl) getApplicationModule();
        return am;
    }

    /**Method to resolve expression- returns String value*/
    public Object resolvElO(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        Object Message = valueExp.getValue(elContext);
        return Message;
    }


}

