package batchpayment.model.module;


import adf.utils.ebiz.EbizParams;

import batchpayment.model.module.common.BatchpayAM;
import batchpayment.model.views.ApPayDtlVOImpl;
import batchpayment.model.views.ApPaySumVOImpl;
import batchpayment.model.views.ApPaySumVORowImpl;
import batchpayment.model.views.ApPayVOImpl;
import batchpayment.model.views.AppUserVOImpl;
import batchpayment.model.views.CurrConRateVOImpl;
import batchpayment.model.views.CurrConRateVORowImpl;
import batchpayment.model.views.DualVOImpl;
import batchpayment.model.views.DualVORowImpl;
import batchpayment.model.views.DummyVOImpl;
import batchpayment.model.views.DummyVORowImpl;
import batchpayment.model.views.FinApPayViewVOImpl;

import batchpayment.model.views.FinApPayViewVORowImpl;

import batchpayment.model.views.LOVBatchCOAVOImpl;
import batchpayment.model.views.ParameterVOImpl;
import batchpayment.model.views.ParameterVORowImpl;
import batchpayment.model.views.SearchCOADualVOImpl;

import batchpayment.model.views.SearchCOADualVORowImpl;

import batchpayment.model.views.SystemDateVORowImpl;
import oracle.jbo.domain.Number;


import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Timestamp;

import java.sql.Types;

import java.util.Iterator;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import javax.faces.event.ActionEvent;

import oracle.adf.model.BindingContext;
import oracle.adf.view.rich.context.AdfFacesContext;

import oracle.binding.BindingContainer;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Mar 06 12:06:34 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class BatchpayAMImpl extends ApplicationModuleImpl implements BatchpayAM {
    /**
     * This is the default constructor (do not remove).
     */
    Integer currId=null;
    
    String apPayId=null;
    public BatchpayAMImpl() {
    }

    /**
     * Container's getter for FinApPayView.
     * @return FinApPayView
     */
    public FinApPayViewVOImpl getFinApPayView() {
        return (FinApPayViewVOImpl)findViewObject("FinApPayView");
    }

    /**
     * Container's getter for Dummy.
     * @return Dummy
     */
    public ViewObjectImpl getDummy() {
        return (ViewObjectImpl)findViewObject("Dummy");
    }
    public void callStoredProcedure(String stmt, Object[] bindVars) {
        PreparedStatement st = null;
        try {
            st = getDBTransaction().createPreparedStatement("begin " + stmt + "; end;", 0);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 1, bindVars[z]);
                }
            }
            st.executeUpdate();
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {

            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                }
            }
        }
    }

    public void generate(Integer SlocID, Integer InstID, String OrgID, String hoOrgId , String cldId ,Integer UserID,Timestamp  CreateDate , Integer param1 , Integer param2 , Integer param3 , Integer param4,Integer CoaId) {

    System.out.println("hash code is "+this);
    
     System.out.println("\n----------OrgId Is: "+OrgID+"--------\n");
      /*  callStoredProcedure("FIN.pkg_fin_gl.INS_BATCH_DETAILS(?,?,?,?,?,?,?,?,?,?,?)",
                            new Object[] {SlocID,InstID,OrgID,hoOrgId , cldId ,UserID,CreateDate,param1 ,param2 , param3 ,param4});
        */
        ViewObjectImpl dummy = getDummy();
        Row currentRow = dummy.getCurrentRow();
        String flag="A";
        Number amt = new Number(0);
        if(currentRow != null) {
           
           // this curr id will be used in Apply TDS 
            this.currId=(Integer) currentRow.getAttribute("CurrId");   //line added by MS.
            if(currentRow.getAttribute("specific_curr") != null)
            {
                String str = currentRow.getAttribute("specific_curr").toString();
                if(str.equalsIgnoreCase("Y")) {
                    flag = "S";
                }
            }
            if(currentRow.getAttribute("TransBudget") != null) {
               amt = (Number)currentRow.getAttribute("TransBudget");
            }
        }
        System.out.println("Value  of flag "+flag);
        System.out.println("Parameter For INS is "+cldId +","+SlocID +","+hoOrgId +","+OrgID +","+InstID +","+CoaId +","+UserID +","+flag +","+CreateDate +","+amt +","+param1  +","+param2  +","+ param3  +","+param4);
       System.out.println("currentRow.getAttribute(\"TransProjectId\") = "+currentRow.getAttribute("TransProjectId")+"   currentRow.getAttribute(\"TransAdjstmntType\") = "+currentRow.getAttribute("TransAdjstmntType"));
        try{ 
           callStoredProcedure("FIN.INS_BATCH_DETAILS(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)",
                            new Object[] {cldId ,SlocID,hoOrgId,OrgID,currentRow.getAttribute("TransProjectId"),currentRow.getAttribute("TransAdjstmntType"),InstID,CoaId,UserID,flag,CreateDate,amt,param1 ,param2 , param3 ,param4}); 

          this.getDBTransaction().commit();
       
        }catch(Exception e ){
            
           FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,"Records Exist","There are pendind records in Temporaray Voucher Please process them first"));
           e.printStackTrace();
           return;
        }
        
        ViewObjectImpl dual1 = getDual1();
        if(dual1.getCurrentRow() != null)
        {
            DualVORowImpl ipl = (DualVORowImpl)dual1.getCurrentRow();
            ipl.getLovBatchIdVO1().executeQuery();
           
        }
        
        
    }

    public void batchrefresh() {
        FinApPayViewVOImpl apPayView = getFinApPayView();
        if(apPayView.getCurrentRow() != null){
            FinApPayViewVORowImpl impl = (FinApPayViewVORowImpl)apPayView.getCurrentRow();
            impl.getLovBatchIdVO().executeQuery();
        }
    }

    /**
     * Container's getter for ApPay1.
     * @return ApPay1
     */
    public ApPayVOImpl getApPay1() {
        return (ApPayVOImpl)findViewObject("ApPay1");
    }

    /**
     * Container's getter for ApPayViewToApPayVL1.
     * @return ApPayViewToApPayVL1
     */
    public ViewLinkImpl getApPayViewToApPayVL1() {
        return (ViewLinkImpl)findViewLink("ApPayViewToApPayVL1");
    }

    /**
     * Container's getter for ApPaySum1.
     * @return ApPaySum1
     */
    public ApPaySumVOImpl getApPaySum1() {
        //System.out.println("in getting AP Pay sum vo");
        return (ApPaySumVOImpl)findViewObject("ApPaySum1");
    }

    /**
     * Container's getter for ApPayToApPaySumVL1.
     * @return ApPayToApPaySumVL1
     */
    public ViewLinkImpl getApPayToApPaySumVL1() {
        return (ViewLinkImpl)findViewLink("ApPayToApPaySumVL1");
    }

    /**
     * Container's getter for ApPayDtl1.
     * @return ApPayDtl1
     */
    public ApPayDtlVOImpl getApPayDtl1() {
        return (ApPayDtlVOImpl)findViewObject("ApPayDtl1");
    }

    /**
     * Container's getter for ApPaySumToApPayDtlVL1.
     * @return ApPaySumToApPayDtlVL1
     */
    public ViewLinkImpl getApPaySumToApPayDtlVL1() {
        return (ViewLinkImpl)findViewLink("ApPaySumToApPayDtlVL1");
    }

    /**
     * Container's getter for SystemDate.
     * @return SystemDate
     */
    public ViewObjectImpl getSystemDate() {
        return (ViewObjectImpl)findViewObject("SystemDate");
    }

    /**
     * Container's getter for Parameter.
     * @return Parameter
     */
    public ViewObjectImpl getParameter() {
        return (ViewObjectImpl)findViewObject("Parameter");
    }

    /**
     * Container's getter for LovBatchId.
     * @return LovBatchId
     */
    public ViewObjectImpl getLovBatchId() {
        return (ViewObjectImpl)findViewObject("LovBatchId");
    }


    /**
     * Container's getter for Dual1.
     * @return Dual1
     */
    public DualVOImpl getDual1() {
        return (DualVOImpl) findViewObject("Dual1");
    }
    
    public void batchPageSearch() {

        ViewObjectImpl dual1 = this.getDual1();
        Row currentRow = dual1.getCurrentRow();
        Object coaId = currentRow.getAttribute("CoaId");
        Object payId = currentRow.getAttribute("TxnId");
        Object orgId = currentRow.getAttribute("OrgId");
        Object date = currentRow.getAttribute("UsrCreateDt");
        Object statusId = currentRow.getAttribute("StatId");
        Object TransProjectId = currentRow.getAttribute("TransProjectId");

    //    System.out.println("\n--------Entered Date Is: "+date+"--------------"+((Date)date).dateValue()+"-----\n");
        FinApPayViewVOImpl apPayView = this.getFinApPayView();
        if(apPayView != null)
        {
            Row row = apPayView.getCurrentRow();
            if(row != null) {
                System.out.println("Value of the date is: "+row.getAttribute("UsrIdCreateDt"));
            }
        }
        apPayView.setNamedWhereClauseParam("BankCOABind", coaId);
        apPayView.setNamedWhereClauseParam("BindBatchId", payId);
        apPayView.setNamedWhereClauseParam("BindOrgId", orgId);
        apPayView.setNamedWhereClauseParam("BindCreateDate", date);
        apPayView.setNamedWhereClauseParam("BindStat", statusId);
        apPayView.setNamedWhereClauseParam("stat_bind", null);
        apPayView.setNamedWhereClauseParam("BindPrjId", TransProjectId);

        apPayView.executeQuery();
        
        //System.out.println("\n---Values are \n coaId:"+coaId+"\nTxnId:"+payId+"\norgId:"+orgId+"\ndate:"+date+"\nStatus:"+statusId);
        
    }
    
    public void batchReset() {
        FinApPayViewVOImpl apPayView = this.getFinApPayView();
        apPayView.setNamedWhereClauseParam("BankCOABind", null);
        apPayView.setNamedWhereClauseParam("BindBatchId", null);
        apPayView.setNamedWhereClauseParam("BindOrgId", null);
        apPayView.setNamedWhereClauseParam("BindCreateDate", null);
        apPayView.setNamedWhereClauseParam("BindStat", null);
        apPayView.setNamedWhereClauseParam("stat_bind", null);
        apPayView.setNamedWhereClauseParam("BindPrjId", null);

        apPayView.executeQuery();
        getDual1().executeQuery();

    }

    /**
     * Container's getter for Fin_Coa1.
     * @return Fin_Coa1
     */
    public ViewObjectImpl getFin_Coa1() {
        return (ViewObjectImpl)findViewObject("Fin_Coa1");
    }
    
    public void setBindForBatchPay() {
        Integer inst_id =1;
        
        FinApPayViewVOImpl apPayView = this.getFinApPayView();
        apPayView.setNamedWhereClauseParam("AP_CLD_ID_BIND", this.getCurrentCld());
        apPayView.setNamedWhereClauseParam("AP_SLOC_ID_BIND", this.getCurrentServerLoc());
        apPayView.setNamedWhereClauseParam("AP_HO_ORG_ID_BIND",this.getCurrentHO());
        apPayView.setNamedWhereClauseParam("AP_ORG_ID_BIND", this.getCurrentOrg());
        apPayView.setNamedWhereClauseParam("AP_INST_ID_BIND", inst_id);
        this.getFinApPayView().setBindBatchId(null);
        apPayView.executeQuery();
        
        if(this.getCurrentCld()!=null && this.getCurrentOrg()!=null){
                ViewObjectImpl id1 = getLovOrgId1();
                id1.setNamedWhereClauseParam("cld_id", this.getCurrentCld());
                id1.setNamedWhereClauseParam("org_id_bind", this.getCurrentOrg());
                id1.executeQuery();
        }
        
        DummyVORowImpl dummyRow=(DummyVORowImpl) this.getDummy().first();
        dummyRow.getFin_CoaVO1().executeQuery();
    }
    
    public String resolvEl(String data){
    FacesContext fc = FacesContext.getCurrentInstance();
    Application app = fc.getApplication();
    ExpressionFactory elFactory = app.getExpressionFactory();
    ELContext elContext = fc.getELContext();
    ValueExpression valueExp = elFactory.createValueExpression(elContext, data,
    Object.class);
    String Message=valueExp.getValue(elContext).toString();
    return Message;
    }
    
    public void fileterApPay(String cld_id, Integer sloc_id, String ho_org_id, String org_id, Integer inst_id, String pay_id) {
        ApPayVOImpl apPay1 = this.getApPay1();
        apPay1.setNamedWhereClauseParam("CLD_ID_BIND", cld_id);
        apPay1.setNamedWhereClauseParam("Sloc_id_bind", sloc_id);
        apPay1.setNamedWhereClauseParam("Ho_Org_Id_Bind", ho_org_id);
        apPay1.setNamedWhereClauseParam("org_Id_Bind", org_id);
        apPay1.setNamedWhereClauseParam("Inst_Id_Bind", inst_id);
        apPay1.setNamedWhereClauseParam("Pay_id_Bind", pay_id);
        apPay1.executeQuery();
    }
    
    public void fileterApPaySum(String cld_id, Integer sloc_id, String ho_org_id, String org_id, Integer inst_id, String pay_id) {
        ApPaySumVOImpl apPaySum1 = this.getApPaySum1();
        apPaySum1.setNamedWhereClauseParam("CLD_ID_BIND", cld_id);
        apPaySum1.setNamedWhereClauseParam("SLOC_ID_BIND", sloc_id);
        apPaySum1.setNamedWhereClauseParam("HO_ORG_ID_BIND", ho_org_id);
        apPaySum1.setNamedWhereClauseParam("ORG_ID_BIND", org_id);
        apPaySum1.setNamedWhereClauseParam("INST_ID_BIND", inst_id);
        apPaySum1.setNamedWhereClauseParam("PAY_ID_BIND", pay_id);
        apPaySum1.executeQuery();
    }
    
    public void fileterApPayDt(String cld_id, Integer sloc_id, String ho_org_id, String org_id, Integer inst_id, String pay_id) {
        ViewObjectImpl apPayDtl1 = this.getApPayDtl1();
        apPayDtl1.setNamedWhereClauseParam("CLD_ID_BIND", cld_id);
        apPayDtl1.setNamedWhereClauseParam("SLOC_ID_BIND", sloc_id);
        apPayDtl1.setNamedWhereClauseParam("HO_ORG_ID_BIND", ho_org_id);
        apPayDtl1.setNamedWhereClauseParam("ORG_ID_BIND", org_id);
        apPayDtl1.setNamedWhereClauseParam("INST_ID_BIND", inst_id);
        apPayDtl1.setNamedWhereClauseParam("PAY_ID_BIND", pay_id);
        apPayDtl1.executeQuery();
    }
    
    public void setValueOfOsDays() {
         System.out.println("Came in impl Days method");
        ViewObjectImpl dummy = this.getDummy();
        RowSetIterator itr = dummy.createRowSetIterator(null);
        int count = itr.getRowCount();
        System.out.println("Rows of the Dummy is: ---"+count);
        while(itr.hasNext()) {
            Row next = itr.next();
            next.setAttribute("Param1", new Integer(30));
            next.setAttribute("Param2", new Integer(60));
            next.setAttribute("Param3", new Integer(90));
            next.setAttribute("Param4", new Integer(120));
            next.setAttribute("TransCoaId", null);
            next.setAttribute("CurrId", null);
            next.setAttribute("TransBudget", null);
            System.out.println("----Go from Method-----");
        }
      
           
    }
    public void setBudgetAmt() {
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String ho_org_id=resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        String org_id=resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        Integer inst_id =1;
        
        Integer amt = Integer.parseInt(callStoredFunction(Types.NUMERIC, "FIN.FN_BATCH_BUDGET_AMT(?,?,?,?,?)",
                           new Object[] {cld_id, sloc_id ,ho_org_id, org_id,inst_id  }).toString());
        
        ViewObjectImpl dummy = this.getDummy();
        RowSetIterator itr = dummy.createRowSetIterator(null);
        if(itr.hasNext()) 
        {
            Row currentRow= itr.next();
            currentRow.setAttribute("TransBudget", amt);
            currentRow.setAttribute("TransAdjstmntType", "P");
            currentRow.setAttribute("TransProjectId", resolvEl("#{pageFlowScope.GLBL_ORG_PROJ_ID}"));

        }
    }
    
    public void setDate() {
        
        ViewObjectImpl date = this.getSystemDate();
        ViewObjectImpl impl = this.getParameter();

        RowSetIterator itr1 = date.createRowSetIterator(null);
        RowSetIterator itr = impl.createRowSetIterator(null);
        
            Row next = itr.next();
        Row next_2 = itr1.next();
        
        next.setAttribute("inst_dt", next_2.getAttribute("Sysdate"));
        itr.closeRowSetIterator();
        itr1.closeRowSetIterator();                
    }
    
    public void apPaySumCancel() {
        
        String apPayId=this.getApPaySum1().getCurrentRow().getAttribute("ApPayId").toString();
        
        

        System.out.println("apPay Id is = "+apPayId);
        
      
       System.out.println("Current Count is "+this.getApPay1().getRowCount());      
        
        this.getFinApPayView().setBindBatchId(apPayId);
        
        getDBTransaction().rollback();
         
        ViewObject v1 = this.getApPaySum1();
        v1.setNamedWhereClauseParam("COAIdBind", null);
        v1.setWhereClause(null);
        v1.executeQuery();
        
        ApPayDtlVOImpl dtl = this.getApPayDtl1();
        dtl.setWhereClause(null);
        dtl.executeQuery();
       
    }
    public void ApPayConfirm() {
        String bill = resolvEl("#{pageFlowScope.BatchPaymentBean.billDetails}").toString();
         Integer billDetails = Integer.parseInt(bill);
         
         this.searchCOA("false");
         
        ViewObject v2 = this.getApPaySum1();
                RowSetIterator rit = v2.createRowSetIterator(null);
                while(rit.hasNext())
                {
                    Row row = rit.next();
                    Number conRate=this.getConversionRate();
                    
                    switch(billDetails)
                    {
                    case 1:
                        if(row.getAttribute("ApTdsRuleId")!=null){
                            System.out.println("Rule id is not null");
                            if(((Number)row.getAttribute("ApPaySumAdj1")).compareTo(row.getAttribute("TransAdjmtAmt")) != 0){
                                this.resetTDS(this.getCurrentCld(),this.getCurrentServerLoc(), this.getCurrentHO(), this.getCurrentOrg(), 1 , (String) row.getAttribute("ApPayId"),(Integer) row.getAttribute("ApCoaId"));
                                row.setAttribute("ApPayTdsAmt", new Number(0));
                                row.setAttribute("ApTdsRuleId", null);
                            }
                        }
                            
                        
                        row.setAttribute("ApPaySumAdj1",    row.getAttribute("TransAdjmtAmt"));
                        row.setAttribute("ApPaySumCrAdj1",  row.getAttribute("TransPaySumCrAdj"));
                        row.setAttribute("ApPaySumInmtAdj1",row.getAttribute("TransPaySumInmtAdj"));
                        row.setAttribute("ApPaySumExfAdj1", row.getAttribute("TransPaySumExfAdj"));
                        
                        break; 
                            
                    case 2:
                        
                        if(row.getAttribute("ApTdsRuleId")!=null){
                            System.out.println("Rule id is not null");
                            if(((Number)row.getAttribute("ApPaySumAdj1")).compareTo(row.getAttribute("TransAdjmtAmt")) != 0){
                                this.resetTDS(this.getCurrentCld(),this.getCurrentServerLoc(), this.getCurrentHO(), this.getCurrentOrg(), 1 , (String) row.getAttribute("ApPayId"),(Integer) row.getAttribute("ApCoaId"));
                                row.setAttribute("ApPayTdsAmt", new Number(0));
                                row.setAttribute("ApTdsRuleId", null);                                
                            }
                        }
                            
                            
                        row.setAttribute("ApPaySumAdj2",    row.getAttribute("TransAdjmtAmt"));
                        row.setAttribute("ApPaySumCrAdj2",  row.getAttribute("TransPaySumCrAdj"));
                        row.setAttribute("ApPaySumInmtAdj2",row.getAttribute("TransPaySumInmtAdj"));
                        row.setAttribute("ApPaySumExfAdj2", row.getAttribute("TransPaySumExfAdj"));
                        break;
                                    
                    case 3:
                        
                        if(row.getAttribute("ApTdsRuleId")!=null){
                            System.out.println("Rule id is not null");
                            if(((Number)row.getAttribute("ApPaySumAdj1")).compareTo(row.getAttribute("TransAdjmtAmt")) != 0){
                                this.resetTDS(this.getCurrentCld(),this.getCurrentServerLoc(), this.getCurrentHO(), this.getCurrentOrg(), 1 , (String) row.getAttribute("ApPayId"),(Integer) row.getAttribute("ApCoaId"));
                                row.setAttribute("ApPayTdsAmt", new Number(0));
                                row.setAttribute("ApTdsRuleId", null);
                            }
                        }
                            
                            
                        row.setAttribute("ApPaySumAdj3",    row.getAttribute("TransAdjmtAmt"));
                        row.setAttribute("ApPaySumCrAdj3",  row.getAttribute("TransPaySumCrAdj"));
                        row.setAttribute("ApPaySumInmtAdj3",row.getAttribute("TransPaySumInmtAdj"));
                        row.setAttribute("ApPaySumExfAdj3", row.getAttribute("TransPaySumExfAdj"));
                        break;
                            
                    case 4:
                        
                        if(row.getAttribute("ApTdsRuleId")!=null){
                            System.out.println("Rule id is not null");
                            if(((Number)row.getAttribute("ApPaySumAdj1")).compareTo(row.getAttribute("TransAdjmtAmt")) != 0){
                                this.resetTDS(this.getCurrentCld(),this.getCurrentServerLoc(), this.getCurrentHO(), this.getCurrentOrg(), 1 , (String) row.getAttribute("ApPayId"),(Integer) row.getAttribute("ApCoaId"));
                                row.setAttribute("ApPayTdsAmt", new Number(0));
                                row.setAttribute("ApTdsRuleId", null);
                            }
                        }
                            
                            
                            
                        row.setAttribute("ApPaySumAdj4",    row.getAttribute("TransAdjmtAmt"));
                        row.setAttribute("ApPaySumCrAdj4",  row.getAttribute("TransPaySumCrAdj"));
                        row.setAttribute("ApPaySumInmtAdj4",row.getAttribute("TransPaySumInmtAdj"));
                        row.setAttribute("ApPaySumExfAdj4", row.getAttribute("TransPaySumExfAdj"));
                        break;
                    }
                    
                    
                    
                    Number adj1 = (Number)row.getAttribute("ApPaySumAdj1");  
                    Number adj2 = (Number)row.getAttribute("ApPaySumAdj2");
                    Number adj3 = (Number)row.getAttribute("ApPaySumAdj3");
                    Number adj4 = (Number)row.getAttribute("ApPaySumAdj4");
                    
                    Number totajAdj = adj1.add(adj2).add(adj3).add(adj4);
                    
                    if(((Number)row.getAttribute("ApSumAmtAdj")).compareTo(totajAdj)!=0){
                        String amt_digit=resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}").toString();
                        if(amt_digit == null)
                        {
                            amt_digit="2";
                        }
                        row.setAttribute("ApSumAmtAdj", totajAdj);
                        row.setAttribute("ApPayInstrmntAmt", (totajAdj.divide(conRate)).round(Integer.parseInt(amt_digit)));
                    }
                }
                rit.closeRowSetIterator();
                //v2.executeQuery();
                getDBTransaction().commit();
                
        ViewObject v1 = this.getApPaySum1();
        v1.setWhereClause(null);
        v1.executeQuery();
        
        ApPaySumVOImpl apPaySum1 = getApPaySum1();
        apPaySum1.setNamedWhereClauseParam("COAIdBind", null);
        apPaySum1.executeQuery();
        
        ApPayDtlVOImpl dtl = this.getApPayDtl1();
        dtl.setWhereClause(null);
        dtl.executeQuery();
        
        
    }
    
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
       // BatchpayAMImpl am = (BatchpayAMImpl)resolvElDC("BatchpayAMDataControl");  
        try {
            st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.executeUpdate();
            
            System.out.println(st.getObject(1));
            
            return st.getObject(1);

        } catch (SQLException e) {
            e.printStackTrace();
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    System.out.println(e.getMessage());
                }
            }
        }
    }

    /**
     * Container's getter for SearchCOADual1.
     * @return SearchCOADual1
     */
    public ViewObjectImpl getSearchCOADual1() {
        return (ViewObjectImpl)findViewObject("SearchCOADual1");
    }
    
    public void searchCOA(String Str) {
        if(Str.equalsIgnoreCase("true"))
        {
            ViewObjectImpl aDual1 = this.getSearchCOADual1();
            Object attribute = aDual1.getCurrentRow().getAttribute("Coa");
            ApPaySumVOImpl apPaySum1 = getApPaySum1();
            if(attribute != null)
            {
                apPaySum1.setNamedWhereClauseParam("COAIdBind", Integer.parseInt(attribute.toString()));
                apPaySum1.executeQuery();
            }
            else {
                apPaySum1.setNamedWhereClauseParam("COAIdBind", null);
                apPaySum1.executeQuery();
            }
        }
        else if(Str.equalsIgnoreCase("false"))
        {
            
            ApPaySumVOImpl apPaySum1 = getApPaySum1();
            apPaySum1.setNamedWhereClauseParam("COAIdBind", null);
            apPaySum1.executeQuery();
            
            this.getSearchCOADual1().getCurrentRow().setAttribute("COAName", "");
        }
    }

    /**
     * Container's getter for LOVBatchCOA1.
     * @return LOVBatchCOA1
     */
    public ViewObjectImpl getLOVBatchCOA1() {
        return (ViewObjectImpl)findViewObject("LOVBatchCOA1");
    }


    /**
     * Container's getter for ApPayDtl2.
     * @return ApPayDtl2
     */
    public ApPayDtlVOImpl getApPayDtl2() {
        return (ApPayDtlVOImpl)findViewObject("ApPayDtl2");
    }
    
    public void applyTDS() {
        ApPaySumVOImpl apPaySum1 = this.getApPaySum1();
        if(this.getApPaySum1().getCurrentRow() != null)
        {
           
            System.out.println("-------Came in the row------");
           
            ApPaySumVORowImpl sum  = (ApPaySumVORowImpl)this.getApPaySum1().getCurrentRow();
            
            ViewObjectImpl date = this.getSystemDate();
            RowSetIterator itr = date.createRowSetIterator(null);
            SystemDateVORowImpl r2= (SystemDateVORowImpl)itr.first();
            
            if(sum.getApTdsRuleId() != null) {
                System.out.println("-------Came in the if condition ------rule_id "+sum.getApTdsRuleId());
                String cld_id = sum.getApCldId();
                Integer sloc_id = sum.getApSlocId();
                String ho_org_id = sum.getApHoOrgId();
                String org_id = sum.getApOrgId();
                Integer inst_id = sum.getApApplInstId();
                String vou_id = sum.getApPayId();
                Date vou_dt = (Date)r2.getSysdate();
                Integer slNo = 1;
                Integer tds_id = sum.getApTdsRuleId();
                Number inst_amt = sum.getApSumAmtAdj();
                Integer curr_id =(sum.getApPayCurrIdBnk()).intValue();
                Integer user_id = Integer.parseInt(resolvEl("#{pageFlowScope. GLBL_APP_USR}").toString());
                Integer coa_id = sum.getApCoaId();
                
                //                                  0000        1        0a         0a       1  0000.01.0a.0001.03Vm.00.1UFAgpYOoH  2014-07-21 18:13:42.01     1            1000         73          1          2014-07-21 18:13:42.01

                System.out.println(" parameters are :"+cld_id+" "+ sloc_id +" "+ho_org_id+" "+ org_id+" "+ inst_id+ " "+vou_id+" "+ vou_dt+" "+ slNo+" "+ tds_id+ " "+inst_amt+ " "+curr_id+ " "+user_id+ " "+vou_dt+" " + coa_id);
                
                    try
                    {
                        BigDecimal tax = (BigDecimal)callStoredFunction(Types.NUMERIC, "FIN.INS_TDS_FOR_BATCH(?,?,?,?,?,?,?,?,?,?,?,?,?,?)",
                                           new Object[] {cld_id,sloc_id,ho_org_id,org_id,inst_id,vou_id,vou_dt,slNo, tds_id,inst_amt,curr_id,user_id,vou_dt,coa_id});                
                  
                        this.getDBTransaction().commit(); 

                    
                    Number tax_amt = new Number(tax);
                    tax_amt = (Number)tax_amt.round(2);
                    System.out.println("TAx value is........."+tax_amt);
                    sum.setApPayTdsAmt(tax_amt);
                    System.out.println("-----now tds is:      "+sum.getApPayTdsAmt());
                    sum.setApPayInstrmntAmt((sum.getApSumAmtAdj().subtract(sum.getApPayTdsAmt())).divide(this.getConversionRate()));
        
                    this.getDBTransaction().commit();    
                }
                catch(Exception e) {
                    System.out.println("Exception is occuring...........");
                    e.printStackTrace();
                }
            }
            else {
                System.out.println("------Came in else Condition----------------");
                sum.setApPayTdsAmt(new Number(0));
            }
        }
    }

    /**
     * Container's getter for LovOrgId1.
     * @return LovOrgId1
     */
    public ViewObjectImpl getLovOrgId1() {
        return (ViewObjectImpl)findViewObject("LovOrgId1");
    }

    /**
     * Container's getter for LOCCurr1.
     * @return LOCCurr1
     */
    public ViewObjectImpl getLOCCurr1() {
        return (ViewObjectImpl)findViewObject("LOCCurr1");
    }
    
    public void selectCurrId() {
   
        ViewObjectImpl dummy = this.getDummy();
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String ho_org_id=resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        if(dummy.getCurrentRow() != null) {
            DummyVORowImpl row = (DummyVORowImpl)dummy.getCurrentRow();
            Integer coaId = row.getTransCoaId();
            BigDecimal currency =
                        (BigDecimal)callStoredFunction(Types.NUMERIC, "FIN.FN_COA_CURR(?,?,?,?)", new Object[] { cld_id, sloc_id, ho_org_id, coaId });
            Integer curr_id=null;
            if (currency!= null) {
                curr_id = currency.intValue();
            }
            row.setCurrId(curr_id);
        }
    }
    
    public Object resolvElDCMsg(String data) {
           FacesContext fc = FacesContext.getCurrentInstance();
           Application app = fc.getApplication();
           ExpressionFactory elFactory = app.getExpressionFactory();
           ELContext elContext = fc.getELContext();
           ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
           return valueExp.getValue(elContext);
       } 
    
    /**
     * Method used to call work flow function.
     * calls db functions APP.WF_GET_USR_LEVEL & APP.WF_INS_TXN
     * Created on 03-06-2014 by priyank Khare
     * **/
     private static int NUMBER = Types.INTEGER;
     private static int NUMERIC = Types.NUMERIC;
     private static int VARCHAR = Types.VARCHAR;

   
    public String callWfFunctions(String cldId, Integer slcId, String orgId, Integer usrId, String batchTxnId,
                                  Integer docId, Integer docTypId) {

        System.out.println("callWfFunctions--- slcId " + slcId + " cldId " + cldId + "  " + " orgId " + orgId +
                           " docId " + docId + " batchtxnid " + batchTxnId + " docTypId " + docTypId);

        //get the work flow for the document 13502
        String wfId = getWfId(cldId, slcId, orgId, docId, docTypId);
        //String action = "I";
        //String remark = "A";
        //Number amount11 = new Number(0);
        Object level;
        try {
            level =
                    callStoredFunction(NUMBER, "APP.WF_GET_USR_LEVEL(?,?,?,?,?,?,?)", new Object[] { slcId, cldId, orgId,
                                                                                                     usrId, wfId,
                                                                                                     docId,
                                                                                                     docTypId });
            
            System.out.println("Level is "+level.toString() + "wfID="+wfId);
            //getDBTransaction().commit();
            callStoredFunction(NUMBER, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?)",
                               new Object[] { slcId, cldId, orgId, docId, docTypId, wfId, batchTxnId, usrId, usrId, level,
                                              level, "I", "A", new Number(0) });
          //  getDBTransaction().commit();

        } catch (Exception nfe) {

            showFacesMsg(resolvElDCMsg("#{bundle['MSG.1113']}").toString(), null, FacesMessage.SEVERITY_ERROR, null);

            nfe.printStackTrace();
        }

        return null;
    }

    /**
     * Method used to get the Work flow id for a document.
     * Created by Priyank Khare on 30-05-2014.
     * **/

    public String getWfId(String cldId, Integer slcId, String orgId, Integer docId, Integer docTypId) {
        System.out.println("getWfId--- slcId " + slcId + " cldId " + cldId + "  " + " orgId " + orgId + " docId " +
                           docId + " docTypId " + docTypId);
        try {
            return callStoredFunction(VARCHAR, "APP.WF_GET_ID(?,?,?,?,?)",
                                      new Object[] { slcId, cldId, orgId, docId, docTypId }).toString();
        } catch (Exception e) {
            e.printStackTrace();

            StringBuilder saveMsg =
                new StringBuilder("<html><body><p><b>Error in getting Work Flow Details. </b></p>");

            saveMsg.append("</body></html>");

            showFacesMsg(saveMsg.toString(), null, FacesMessage.SEVERITY_ERROR, null);

        }
        return null;
    }

    /**
     * Generalized method used to display the facesmessages.
     * Created by Priyank Khare on 03-06-2014.
     * @param msgHdr is to set the header for message dialog
     * @param msgDtl is to set if further detail information is required.
     * @param msgSeverity is to set severity mode.
     * @param msgMode is kept to incorporate conditional activities.
     * **/
    public void showFacesMsg(String msgHdr, String msgDtl, javax.faces.application.FacesMessage.Severity msgSeverity,
                             String msgMode) {

        FacesMessage msg = new FacesMessage(msgHdr);
        msg.setDetail(msgDtl);
        msg.setSeverity(msgSeverity);
        FacesContext.getCurrentInstance().addMessage(null, msg);

    }

    /**
     * Method created to call DB fucntion to get the user at which the document is pending
     * Created by Priyank Khare on 04-06-2014
     *
     * **/

    public Integer getDocUsrFromWF(String cldId, Integer slcId, String orgId, String batchTxnId,
                                   Integer docId, Integer docTypId) {
        Object fnRetVal;

        System.out.println("getDocUsrFromWF--- slcId " + slcId + " cldId " + cldId + "  " + " orgId " + orgId +
                           " docId " + docId + " batchTxnId " + batchTxnId + " docTypId " + docTypId);
        try {
            fnRetVal =
                    callStoredFunction(NUMBER, "APP.WF_GET_CUR_USR(?,?,?,?,?,?)", new Object[] { slcId, cldId, orgId,
                                                                                                 docId, batchTxnId,
                                                                                                 docTypId });

            if (fnRetVal != null) {



                return Integer.parseInt(fnRetVal.toString());
            }

        } catch (Exception e) {

            e.printStackTrace();

        }
        showFacesMsg("Error while fetching user work flow details", null, FacesMessage.SEVERITY_ERROR, null);
        return 0;
    }
    
 /*Created By Mayank Shukla  to get Level of Current USer 
  * */
    
    public String getUserLevel(String cldId, Integer slcId, String orgId, Integer usrId,
                                  Integer docId, Integer docTypId) {

        System.out.println("callWfFunctions--- slcId " + slcId + " cldId " + cldId + "  " + " orgId " + orgId +
                           " docId " + docId + " docTypId " + docTypId);

        //get the work flow for the document 13502
        String wfId = getWfId(cldId, slcId, orgId, docId, docTypId);
        //String action = "I";
        //String remark = "A";
        //Number amount11 = new Number(0);
        Object level=null;
        try {
            level =
                    callStoredFunction(NUMBER, "APP.WF_GET_USR_LEVEL(?,?,?,?,?,?,?)", new Object[] { slcId, cldId, orgId,
                                                                                                     usrId, wfId,
                                                                                                     docId,
                                                                                                     docTypId });
            
            System.out.println("Level is "+level.toString() + "wfID="+wfId);

        } catch (Exception nfe) {

            showFacesMsg(resolvElDCMsg("#{bundle['MSG.1113']}").toString(), null, FacesMessage.SEVERITY_ERROR, null);

            nfe.printStackTrace();
        }
        
        return level.toString();
    }
    
    /*Created By Mayank Shukla to check whether user is in workFlow or not. 
     * */
 
    public Boolean isInWF(){
        Boolean result=false;
        String level=this.getUserLevel(this.getCurrentCld(), this.getCurrentServerLoc(),this.getCurrentOrg(), this.getCurrentUser(), 13502, 0);
        try{
            Integer lev=Integer.parseInt(level);
            if(lev>0)
                result=true;
            else
                result=false;
                    
        }catch(Exception e){
            e.printStackTrace();
        }
        return result; 
    }
 
 
/*
 * There is Four Mode 
 * Add---All are Allowed in add Button
 * Edit ---at starting author and after Cuurent user in workflow(Go To Pay) 
 * Delete---at starting author and after Cuurent user in workflow 
 * view----All are Allowed
 */
    
    public String varifyUser(String mode,String batchTxnId){
        String result="N";
         // to get current doc User ---this will return 1 if doc is pending at no one 
          Integer docUser=this.getDocUsrFromWF(  this. getCurrentCld(), this. getCurrentServerLoc(),  this.getCurrentOrg(),  batchTxnId,13502, 0);
          
          if(docUser.equals(new Integer(-1))){
          System.out.println("Currently not entered in workflow");
              result=varifyUserCreated(mode);
          }else{
              System.out.println("has entered in workflow");
              if(mode.equals("D"))
                result=  varifyUserToDelete( docUser);
              else
                 result=  varifyUserToEdit(docUser);
          }
          
        return result;
    }
    
    
    public String varifyUserCreated(String mode){
        if(this.getCurrentUser().equals(this.getFinApPayView().getCurrentRow().getAttribute("UsrIdCreate"))){
            return "Y";
        }else{
            AppUserVOImpl user=(AppUserVOImpl)this.getAppUser1();
            user.setSlocBind(this.getCurrentServerLoc());
            user.setBindUserId((Integer)this.getFinApPayView().getCurrentRow().getAttribute("UsrIdCreate"));
            user.executeQuery();
            String name=(String)user.first().getAttribute("UsrName");
            if(mode.equals("D"))
                return "C"+name;
            else
                return "P"+name;
        }  
            
    }
    
    public String varifyUserToDelete( Integer docUser){
        
        String result="N";
           
        System.out.println("Trying to delete");
        if(docUser.equals(this.getCurrentUser())){
        
            System.out.println("doc is pending at current user");
            if(this.getCurrentUser().equals(this.getFinApPayView().getCurrentRow().getAttribute("UsrIdCreate"))){
                System.out.println("Currebt user is author of doc.");
               result="Y"; 
            }else{
                
                AppUserVOImpl user=(AppUserVOImpl)this.getAppUser1();
                user.setSlocBind(this.getCurrentServerLoc());
                user.setBindUserId((Integer)this.getFinApPayView().getCurrentRow().getAttribute("UsrIdCreate"));
                user.executeQuery();
                String name=(String)user.first().getAttribute("UsrName");
       
                System.out.println(name +" is author of doc.");
                result= "C"+name;
            }
        }else{
            
            AppUserVOImpl user=(AppUserVOImpl)this.getAppUser1();
            user.setSlocBind(this.getCurrentServerLoc());
            user.setBindUserId(docUser);
            user.executeQuery();
            String name=(String)user.first().getAttribute("UsrName");
            
            System.out.println("doc is pending at "+name);
            result ="P"+name;
        }
        return result;
    }
    
    public String varifyUserToEdit(Integer docUser){
        String result="N";
        
        System.out.println("Trying to edit");
       
        if(docUser.equals(this.getCurrentUser())){
            result= "Y";
            System.out.println("Currebt user is  of doc owner.");
        }else{
            AppUserVOImpl user=(AppUserVOImpl)this.getAppUser1();
            user.setSlocBind(this.getCurrentServerLoc());
            user.setBindUserId(docUser);
            user.executeQuery();
            String name=(String)user.first().getAttribute("UsrName");
            System.out.println("Currebt user is  of doc owner.");
            
            result ="P"+name;
        }
           
        
        return result;
    }
    
    public BindingContainer getBindings() {
        return BindingContext.getCurrent().getCurrentBindingsEntry();
    }   
    public Integer saveBatch() {
       
       System.out.println("In Save Batch");
        Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope. GLBL_APP_SERV_LOC}").toString());
        String org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        String ho_org_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();

        BatchpayAMImpl am = this;

        String flag = "N";

        ApPayVOImpl apPaySum1 = am.getApPay1();
        Row currentRow = apPaySum1.getCurrentRow();
        if (currentRow != null) {
            if (currentRow.getAttribute("ApPayId") != null) {
                String pay_id = currentRow.getAttribute("ApPayId").toString();
                
                
                try{
                   
                  String isValid= callStoredFunction(Types.VARCHAR, "FIN.fn_chk_batch_valdty(?,?,?,?,?,?)", new Object[] { cld_id, sloc_id, ho_org_id, org_id,1,pay_id
                                                                                                      }).toString();
                                       
                   System.out.println("Is In vslid " +isValid );
                    
                 }catch(Exception e){
                    FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,"Stop",this.getSqlMessage(e.getMessage()))); 
                   
                    return 0;
                }
                
                
                    try {
                    flag =
                    callStoredFunction(Types.VARCHAR, "FIN.FN_SAVE_BATCH(?,?,?,?,?,?)", new Object[] { cld_id, sloc_id, ho_org_id, org_id,
                                                                                   1, pay_id }).toString();
               
                    this.getDBTransaction().commit();
                    System.out.println("Bacth Saved SuccessFuly");
                } catch (Exception e) {
                    System.out.println("--------------------------Error occur during the calling fo fn save batch function---------------------------------");
                    FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,"Error","Error Occured During Saving of Batch"));
                    e.printStackTrace();
                }

            }
        }
        System.out.println("flag value------" + flag);
        String msg;
        if (flag.equals("Y")) {
           this.getDBTransaction().commit();

            String message = resolvElDCMsg("#{bundle['MSG.818']}").toString();
            //  msg = "Record Saved Successfully";
            msg = message;

            return 1;
        } else {


            String message = resolvElDCMsg("#{bundle['MSG.1151']}").toString();

            //      msg = "Record did not save successfully";
            msg = message;
            /* FacesMessage message2 = new FacesMessage(msg);
            message2.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext fc = FacesContext.getCurrentInstance();
            fc.addMessage(null, message2); */
            return 0;
        }
        // am.getApPaySum1().executeQuery();
        //return 0;
    }
    
    
    
    public Integer getCurrentUser(){
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
    }

    public Integer getCurrentServerLoc(){
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
    }
    
    public String getCurrentCld(){
        return resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
    }
    public String getCurrentOrg(){
        return resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
    }
    
    public String getCurrentHO(){
        return resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
    }
    
    /**
     * Container's getter for AppUser1.
     * @return AppUser1
     */
    public ViewObjectImpl getAppUser1() {
        return (ViewObjectImpl)findViewObject("AppUser1");
    }
    
    
    private void genarateVoucher() throws Exception{

        Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope. GLBL_APP_SERV_LOC}").toString());
        String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        Integer usrId = Integer.parseInt(resolvEl("#{pageFlowScope. GLBL_APP_USR}").toString());
        String ho_org_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();

        BatchpayAMImpl am = this;
        ViewObjectImpl sum = am.getApPaySum1();
        ViewObjectImpl impl = am.getParameter();


        int check=-1;
        if (impl.getCurrentRow() != null) {

         //   par = (ParameterVORowImpl)impl.getCurrentRow();

            ViewObjectImpl par1 = getParameter();
            Row currentRow = par1.getCurrentRow();
            Object inst_no = currentRow.getAttribute("inst_no");
            
            Row row1 = sum.getCurrentRow();
            String pay_id = row1.getAttribute("ApPayId").toString();
            Date dt = (Date)row1.getAttribute("ApPayInstrmntDt");
            System.out.println(pay_id + "---" + SlocId + "----" + orgId + "-----" + ho_org_id + "-----" + cld_id +
                               "---" + usrId + "----" + dt);

            System.out.println("par is "+inst_no);
            
            try {
              
              System.out.println("Trying to call bp batch--BEFORE");
                Integer n =
                    (Integer)callStoredFunction(NUMBER, "FIN.fn_bp_batch(?,?,?,?,?,?,?,?,?)", new Object[] { cld_id,
                                                                                                                SlocId,
                                                                                                                ho_org_id,
                                                                                                                orgId,
                                                                                                                1,
                                                                                                                pay_id,
                                                                                                                usrId,
                                                                                                                dt,
                                                                                                                inst_no });
              
                System.out.println("Trying to call bp batch--AFTER  Integr " +n);
               check = n.intValue();

                if (check == 1) {
                    am.getDBTransaction().commit();
                   
                    //am.getDBTransaction().rollback();
                    
                    FacesMessage msg = new FacesMessage(resolvElDCMsg("#{bundle['MSG.1114']}").toString());
                    msg.setSeverity(FacesMessage.SEVERITY_INFO);
                    FacesContext.getCurrentInstance().addMessage(null, msg);
                   
                    am.getApPay1().executeQuery();
                   
                    am.getApPaySum1().executeQuery();
                    am.getFinApPayView().executeQuery();

                } else if (check == -1) {
                    FacesMessage msg = new FacesMessage(resolvElDCMsg("#{bundle['MSG.1115']}").toString());
                    msg.setSeverity(FacesMessage.SEVERITY_ERROR);
                    FacesContext.getCurrentInstance().addMessage(null, msg);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            if(check == -1){
                throw new Exception();
            }
        }
    }

    public void afteWorkFlow(String wfReturn) {
        
        System.out.println("Return from workFlow is"+wfReturn);
        if (wfReturn.equals("A")) {
           
            if( this.saveBatch().equals(new Integer(1))){
            try{
               this.genarateVoucher();
             //  this.getDBTransaction().commit();
                FacesMessage msg = new FacesMessage("Record Approved Successfully");
                msg.setSeverity(FacesMessage.SEVERITY_INFO);
                FacesContext.getCurrentInstance().addMessage(null, msg);
            } catch(Exception e){
                
                   this.getDBTransaction().rollback();
                   e.printStackTrace();
                    FacesMessage  msg = new FacesMessage("Error in generating Bank Payments");
                    msg.setSeverity(FacesMessage.SEVERITY_ERROR);
                    FacesContext.getCurrentInstance().addMessage(null, msg); 
                }
          }
        } else {
            if(wfReturn.equals("F")){
                
                try{
                       this.getFinApPayView().setBindBatchId(this.apPayId);
                       this.getFinApPayView().executeQuery();
                       this.getFinApPayView().first().setAttribute("ApPayStat", 460);
                       this.getApPay1().first().setAttribute("ApPayStat", 460);
                       this.getDBTransaction().commit();
                }catch(Exception e){
                    e.printStackTrace();
                }
                        FacesMessage msg = new FacesMessage("Record Forwared Succesfully");
                        msg.setSeverity(FacesMessage.SEVERITY_INFO);
                        FacesContext.getCurrentInstance().addMessage(null, msg);
            }else if(wfReturn.equals("R")){
                FacesMessage msg = new FacesMessage("Record Rejected Succesfully");
                msg.setSeverity(FacesMessage.SEVERITY_INFO);
                FacesContext.getCurrentInstance().addMessage(null, msg);
            }else if(wfReturn.equals("V")){
                FacesMessage msg = new FacesMessage("Record Reverted Succesfully");
                msg.setSeverity(FacesMessage.SEVERITY_INFO);
                FacesContext.getCurrentInstance().addMessage(null, msg);
            }
        }
    }


    public String addAllow(){
        String result="Y";
         FinApPayViewVOImpl vo =this.getFinApPayView();
          RowSetIterator itr=vo.createRowSetIterator(null);   
           
          while(itr.hasNext()){
              Row r=itr.next();
              if((Integer)r.getAttribute("ApPayStat")==193||(Integer)r.getAttribute("ApPayStat")==460){
                  return "N";
              }
               
          }
        
        return result;
    }


    /**
     * Container's getter for LovAppliedTDS1.
     * @return LovAppliedTDS1
     */
    public ViewObjectImpl getLovAppliedTDS1() {
        return (ViewObjectImpl)findViewObject("LovAppliedTDS1");
    }
    
    
    public String resetTDS(String cldId,Integer slocId,String hoOrgId,String orgId,Integer instId,String payId,Integer coaId){
        
       System.out.println("current Coa Id for reset "+coaId);
      
        try{ 
              callStoredProcedure("FIN.proc_reset_tds_rule_in_batch(?,?,?,?,?,?,?)",
                                new Object[] { cldId, slocId, hoOrgId, orgId, instId, payId, coaId });
             
                this.getApPaySum1().getCurrentRow().setAttribute("ApTdsRuleId", null);
                this.getApPaySum1().getCurrentRow().setAttribute("ApPayTdsAmt", new Number(0));
                this.getApPaySum1().getCurrentRow().setAttribute("ApPayInstrmntAmt",((Number) this.getApPaySum1().getCurrentRow().getAttribute("ApSumAmtAdj")).divide(this.getConversionRate()));
             
                this.getDBTransaction().commit();
        
        }catch(Exception e){
            e.printStackTrace();;
        }
    return null;
    }
    
    public void refereshTDS(){
        
        this.getApPaySum1().getCurrentRow().setAttribute("ApTdsRuleId", null);
        this.getApPaySum1().getCurrentRow().setAttribute("ApPayTdsAmt", new Number(0));
        
        resetTDS(this.getCurrentCld(),this.getCurrentServerLoc(),this.getCurrentHO(),this.getCurrentOrg(),1,this.getApPaySum1().getCurrentRow().getAttribute("ApPayId").toString(),(Integer) this.getApPaySum1().getCurrentRow().getAttribute("ApCoaId"));
    
    }

    public void setApPayId() {
        this.apPayId = (String) this.getApPay1().getCurrentRow().getAttribute("ApPayId");
    }
    
    public String validateInstrument(Integer bankCoa,String instrumentNumber){
        String result="N";
        try{
            result=(String) this.callStoredFunction(Types.VARCHAR, "fn_bt_chk_dupli_chq_no(?,?,?,?,?,?,?,?,?)", new Object[]{
                                                                                                                                this.getCurrentCld(),
                                                                                                                                this.getCurrentServerLoc(),
                                                                                                                                this.getCurrentHO(),
                                                                                                                                this.getCurrentOrg(),
                                                                                                                                1,
                                                                                                                                this.getApPay1().first().getAttribute("ApPayId").toString(),
                                                                                                                                bankCoa,
                                                                                                                                111,
                                                                                                                                instrumentNumber
                                                                                                                            });
        }catch(Exception e){
            e.printStackTrace();
        }
        return result;
    }

    public String getSqlMessage(String s){
        String message=(String) s.subSequence(s.indexOf("msg=ORA-") + 14, s.indexOf("\n"));
        System.out.println(message);
        return message;
    }

    /**
     * Container's getter for CurrConRate1.
     * @return CurrConRate1
     */
    public CurrConRateVOImpl getCurrConRate1() {
        return (CurrConRateVOImpl)findViewObject("CurrConRate1");
    }
    
    public Number getConversionRate(){
        Number conRate=new Number(1);
        //to get Conversion rate
        Row row=this.getApPay1().getCurrentRow();
        System.out.println("VO is "+this.getCurrConRate1());
        System.out.println("Attr is "+row.getAttribute("ApPayOrgCurrIdBs"));
        
        this.getCurrConRate1().setBindVou((Integer)row.getAttribute("ApPayOrgCurrIdBs"));
        this.getCurrConRate1().setBindTxn((Integer) row.getAttribute("ApPayBnkCurrId"));
        this.getCurrConRate1().setBindOrgId(EbizParams.GLBL_APP_USR_ORG());
        this.getCurrConRate1().setBindCldId(EbizParams.GLBL_APP_CLD_ID());
        this.getCurrConRate1().setBindHoOrg(EbizParams.GLBL_HO_ORG_ID());
        this.getCurrConRate1().executeQuery();
        if(this.getCurrConRate1().first()!=null){
           CurrConRateVORowImpl curRow=(CurrConRateVORowImpl) this.getCurrConRate1().first();
            conRate=new Number(curRow.getCcBuy());
        }
//        }else{
//            this.getCurrConRate1().setBindVou((Integer)row.getAttribute("ApPayBnkCurrId"));
//            
//            this.getCurrConRate1().setBindTxn((Integer) row.getAttribute("ApPayOrgCurrIdBs"));
////            this.getCurrConRate1().setBindCldId(this.getCurrentCld());
////            this.getCurrConRate1().setBindHoOrg(this.getCurrentHO());
//            this.getCurrConRate1().executeQuery();
//            if(this.getCurrConRate1().first()!=null){
//               CurrConRateVORowImpl curRow=(CurrConRateVORowImpl) this.getCurrConRate1().first();
//                    try {
//                        conRate=new Number(curRow.getCcBuy());
//                    } catch (SQLException e) {
//                    }
//            }else{
//               conRate=new Number(1);
//            }   
//        }
        return conRate;
    }
    public String projectWise(){
        ViewObjectImpl dummy = getDummy();
        Row currentRow = dummy.getCurrentRow();
        if(currentRow.getAttribute("TransAdjstmntType")!=null){
            if(currentRow.getAttribute("TransAdjstmntType").toString().equalsIgnoreCase("P")){
                currentRow.setAttribute("TransProjectId", resolvEl("#{pageFlowScope.GLBL_ORG_PROJ_ID}"));
            }else{
                currentRow.setAttribute("TransProjectId", "PROJ0000");
            }
        }
        return null;
    }
}
