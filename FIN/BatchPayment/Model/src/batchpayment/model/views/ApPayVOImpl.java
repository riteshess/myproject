package batchpayment.model.views;

import java.sql.PreparedStatement;
import java.sql.ResultSet;

import java.sql.SQLException;

import oracle.jbo.server.QueryCollection;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.ViewRowSetImpl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import oracle.jbo.ViewCriteria;
import oracle.jbo.server.SQLBuilder;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Mar 07 14:46:25 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ApPayVOImpl extends ViewObjectImpl {
    /**
     * This is the default constructor (do not remove).
     */
    public ApPayVOImpl() {
    }

    /**
     * Returns the variable value for Sloc_id_bind.
     * @return variable value for Sloc_id_bind
     */
    public Integer getSloc_id_bind() {
        return (Integer)ensureVariableManager().getVariableValue("Sloc_id_bind");
    }

    /**
     * Sets <code>value</code> for variable Sloc_id_bind.
     * @param value value to bind as Sloc_id_bind
     */
    public void setSloc_id_bind(Integer value) {
        ensureVariableManager().setVariableValue("Sloc_id_bind", value);
    }

    /**
     * Returns the variable value for org_Id_Bind.
     * @return variable value for org_Id_Bind
     */
    public String getorg_Id_Bind() {
        return (String)ensureVariableManager().getVariableValue("org_Id_Bind");
    }

    /**
     * Sets <code>value</code> for variable org_Id_Bind.
     * @param value value to bind as org_Id_Bind
     */
    public void setorg_Id_Bind(String value) {
        ensureVariableManager().setVariableValue("org_Id_Bind", value);
    }

    /**
     * Returns the variable value for Pay_id_Bind.
     * @return variable value for Pay_id_Bind
     */
    public String getPay_id_Bind() {
        return (String)ensureVariableManager().getVariableValue("Pay_id_Bind");
    }

    /**
     * Sets <code>value</code> for variable Pay_id_Bind.
     * @param value value to bind as Pay_id_Bind
     */
    public void setPay_id_Bind(String value) {
        ensureVariableManager().setVariableValue("Pay_id_Bind", value);
    }

    /**
     * Returns the variable value for Inst_Id_Bind.
     * @return variable value for Inst_Id_Bind
     */
    public Integer getInst_Id_Bind() {
        return (Integer)ensureVariableManager().getVariableValue("Inst_Id_Bind");
    }

    /**
     * Sets <code>value</code> for variable Inst_Id_Bind.
     * @param value value to bind as Inst_Id_Bind
     */
    public void setInst_Id_Bind(Integer value) {
        ensureVariableManager().setVariableValue("Inst_Id_Bind", value);
    }

    /**
     * Returns the variable value for CLD_ID_BIND.
     * @return variable value for CLD_ID_BIND
     */
    public String getCLD_ID_BIND() {
        return (String)ensureVariableManager().getVariableValue("CLD_ID_BIND");
    }

    /**
     * Sets <code>value</code> for variable CLD_ID_BIND.
     * @param value value to bind as CLD_ID_BIND
     */
    public void setCLD_ID_BIND(String value) {
        ensureVariableManager().setVariableValue("CLD_ID_BIND", value);
    }

    /**
     * Returns the variable value for Ho_Org_Id_Bind.
     * @return variable value for Ho_Org_Id_Bind
     */
    public String getHo_Org_Id_Bind() {
        return (String)ensureVariableManager().getVariableValue("Ho_Org_Id_Bind");
    }

    /**
     * Sets <code>value</code> for variable Ho_Org_Id_Bind.
     * @param value value to bind as Ho_Org_Id_Bind
     */
    public void setHo_Org_Id_Bind(String value) {
        ensureVariableManager().setVariableValue("Ho_Org_Id_Bind", value);
    }
    
    
    
    private int counter = 0;

    @Override
    protected ViewRowImpl createRowFromResultSet(Object object, ResultSet resultSet) {

        counter++;
        ViewRowImpl row = super.createRowFromResultSet(object, resultSet);
        System.out.println("Row fetched with key: " + row.getKey() + ", for VO: " + this.getName() + " row count: " +
                           counter);

        return row;
    }



    private String appliedCriteriaString(int mode) {
        ViewCriteria[] appliedCriterias = getApplyViewCriterias(mode);
        String result = "";
        if (appliedCriterias != null && appliedCriterias.length > 0) {
            List<String> list = new ArrayList<String>(appliedCriterias.length);
            for (ViewCriteria vc : appliedCriterias) {
                list.add(vc.getName());
            }
            result = list.toString();
        }
        return result;
    }
    
    
    
    
    protected boolean showSql = false;
     
    @Override
        public long getEstimatedRowCount() {
            long init = System.currentTimeMillis();
            long counter = super.getEstimatedRowCount();
            long end = System.currentTimeMillis() - init;
            
            if (showSql)
                System.out.println("VO: " + this.getName() + ", from AM: " + this.getApplicationModule().getName() + ", executes SQL Count in: " + end + " (miliseconds)");
            
            return counter;
        }
    @Override
    protected void executeQueryForCollection(Object qc, Object[] params, int noUserParams) {
         short fetchSize = 10;
         if (this.getRangeSize() > 0) {
            fetchSize = ((short)(this.getRangeSize() + 3));
        }
        if (this.getRangeSize() < 10) {
            
            fetchSize = 10;
        }
     
       
        if (fetchSize > this.getFetchSize()) {
            
            this.setFetchSize(fetchSize);
        } else {
           
        }  
     
        long init = System.currentTimeMillis();
        super.executeQueryForCollection(qc, params, noUserParams);
        long end = System.currentTimeMillis() - init;
     
         if (showSql)
            System.out.println("VO: " + this.getName() + ", from AM: " + this.getApplicationModule().getName() +
                          ", executes SQL in: " + end + " (miliseconds)");
       
        }
    @Override
       protected void bindParametersForCollection(QueryCollection queryCollection, Object[] object, PreparedStatement preparedStatement) throws SQLException, SQLException {
           // TODO Implement this method
           if (showSql)
               logQueryStatementAndBindParameters(queryCollection, object);
           
           super.bindParametersForCollection(queryCollection, object, preparedStatement);
       }
       
       /**
        * method used to introspect the query produced at runtime by the vo.
        * @param qc
        * @param params
        */
       private void logQueryStatementAndBindParameters(QueryCollection qc, Object[] params) {
           String vrsiName = null;
           if (qc != null) {
               ViewRowSetImpl vrsi = qc.getRowSetImpl();
               vrsiName = vrsi.isDefaultRS() ? "<Default>" : vrsi.getName();
           }
           String voName = getName();
           String voDefName = getDefFullName();
           if (qc != null) {
               System.out.println("----[Exec query for VO=" + voName + ", RS=" + vrsiName + "]----");
           } else {
               System.out.println("----[Exec COUNT query for VO=" + voName + "]----");
           }
           System.out.println("VO Definition Name = {0}"+ voDefName);
     
           String dbVCs = appliedCriteriaString(ViewCriteria.CRITERIA_MODE_QUERY);
           if (!dbVCs.isEmpty()) {
               System.out.println("Applied Database VCs = {0} "+ dbVCs);
           }
     
           String memVCs = appliedCriteriaString(ViewCriteria.CRITERIA_MODE_CACHE);
           if (!memVCs.isEmpty()) {
               System.out.println("Applied In-Memory VCs = {0} "+ memVCs);
           }
     
           String bothVCs = appliedCriteriaString(ViewCriteria.CRITERIA_MODE_QUERY | ViewCriteria.CRITERIA_MODE_CACHE);
           if (!bothVCs.isEmpty()) {
               System.out.println("Applied 'Both' VCs = {0}"+ bothVCs);
           }
     
           System.out.println("Generated query : {0}"+ getQuery());
     
           if (params != null) {
               if (getBindingStyle() == SQLBuilder.BINDING_STYLE_ORACLE_NAME) {
                   Map<String, Object> bindsMap = new HashMap<String, Object>(params.length);
                   for (Object param : params) {
                       Object[] nameValue = (Object[])param;
                       String name = (String)nameValue[0];
                       Object value = nameValue[1];
                       bindsMap.put(name, value);
                   }
                   System.out.println("Bind Variables : {0}"+ bindsMap);
               }
           }
       }
     
       @Override
       public ViewRowImpl createInstanceFromResultSet(QueryCollection queryCollection, ResultSet resultSet) {
           ViewRowImpl row = super.createInstanceFromResultSet(queryCollection, resultSet);
           if (showSql)
              System.out.println("Fetching " + this.getViewObject().getName() + " row with the key " + row.getKey());
           return row;
     
       }
     
     
}
