package batchpayment.model.views;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import oracle.jbo.ViewCriteria;
import oracle.jbo.server.QueryCollection;
import oracle.jbo.server.SQLBuilder;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.ViewRowSetImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Jan 27 10:58:27 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class LOVBatchCOAVOImpl extends ViewObjectImpl {
    /**
     * This is the default constructor (do not remove).
     */
    public LOVBatchCOAVOImpl() {
    }

    /**
     * Returns the bind variable value for pay_id_Bind.
     * @return bind variable value for pay_id_Bind
     */
    public String getpay_id_Bind() {
        return (String)getNamedWhereClauseParam("pay_id_Bind");
    }

    /**
     * Sets <code>value</code> for bind variable pay_id_Bind.
     * @param value value to bind as pay_id_Bind
     */
    public void setpay_id_Bind(String value) {
        setNamedWhereClauseParam("pay_id_Bind", value);
    }

    /**
     * Returns the bind variable value for sloc_id_Bind.
     * @return bind variable value for sloc_id_Bind
     */
    public Integer getsloc_id_Bind() {
        return (Integer)getNamedWhereClauseParam("sloc_id_Bind");
    }

    /**
     * Sets <code>value</code> for bind variable sloc_id_Bind.
     * @param value value to bind as sloc_id_Bind
     */
    public void setsloc_id_Bind(Integer value) {
        setNamedWhereClauseParam("sloc_id_Bind", value);
    }

    /**
     * Returns the bind variable value for ho_org_Bind.
     * @return bind variable value for ho_org_Bind
     */
    public String getho_org_Bind() {
        return (String)getNamedWhereClauseParam("ho_org_Bind");
    }

    /**
     * Sets <code>value</code> for bind variable ho_org_Bind.
     * @param value value to bind as ho_org_Bind
     */
    public void setho_org_Bind(String value) {
        setNamedWhereClauseParam("ho_org_Bind", value);
    }

    /**
     * Returns the bind variable value for cld_id_Bind.
     * @return bind variable value for cld_id_Bind
     */
    public String getcld_id_Bind() {
        return (String)getNamedWhereClauseParam("cld_id_Bind");
    }

    /**
     * Sets <code>value</code> for bind variable cld_id_Bind.
     * @param value value to bind as cld_id_Bind
     */
    public void setcld_id_Bind(String value) {
        setNamedWhereClauseParam("cld_id_Bind", value);
    }

    /**
     * Returns the variable value for Amt1bind.
     * @return variable value for Amt1bind
     */
    public Integer getAmt1bind() {
        return (Integer)ensureVariableManager().getVariableValue("Amt1bind");
    }

    /**
     * Sets <code>value</code> for variable Amt1bind.
     * @param value value to bind as Amt1bind
     */
    public void setAmt1bind(Integer value) {
        ensureVariableManager().setVariableValue("Amt1bind", value);
    }

    /**
     * Returns the variable value for Amt2bind.
     * @return variable value for Amt2bind
     */
    public Integer getAmt2bind() {
        return (Integer)ensureVariableManager().getVariableValue("Amt2bind");
    }

    /**
     * Sets <code>value</code> for variable Amt2bind.
     * @param value value to bind as Amt2bind
     */
    public void setAmt2bind(Integer value) {
        ensureVariableManager().setVariableValue("Amt2bind", value);
    }

    /**
     * Returns the variable value for Amt3bind.
     * @return variable value for Amt3bind
     */
    public Integer getAmt3bind() {
        return (Integer)ensureVariableManager().getVariableValue("Amt3bind");
    }

    /**
     * Sets <code>value</code> for variable Amt3bind.
     * @param value value to bind as Amt3bind
     */
    public void setAmt3bind(Integer value) {
        ensureVariableManager().setVariableValue("Amt3bind", value);
    }

    /**
     * Returns the variable value for Amt4bind.
     * @return variable value for Amt4bind
     */
    public Integer getAmt4bind() {
        return (Integer)ensureVariableManager().getVariableValue("Amt4bind");
    }

    /**
     * Sets <code>value</code> for variable Amt4bind.
     * @param value value to bind as Amt4bind
     */
    public void setAmt4bind(Integer value) {
        ensureVariableManager().setVariableValue("Amt4bind", value);
    }
    
    
    
    private int counter = 0;

    @Override
    protected ViewRowImpl createRowFromResultSet(Object object, ResultSet resultSet) {

        counter++;
        ViewRowImpl row = super.createRowFromResultSet(object, resultSet);
        System.out.println("Row fetched with key: " + row.getKey() + ", for VO: " + this.getName() + " row count: " +
                           counter);

        return row;
    }

    @Override
    protected void bindParametersForCollection(QueryCollection queryCollection, Object[] object,
                                               PreparedStatement preparedStatement) throws SQLException, SQLException {
        // TODO Implement this method
        // if (showSql)
        logQueryStatementAndBindParameters(queryCollection, object);

        super.bindParametersForCollection(queryCollection, object, preparedStatement);
    }
    @Override
         protected void executeQueryForCollection(Object qc, Object[] params, int noUserParams) {
             short fetchSize = 10;
              if (this.getRangeSize() > 0) {
                 fetchSize = ((short)(this.getRangeSize() + 3));
             }
             if (this.getRangeSize() < 10) {
                // System.out.println("Potentially small range size : " + this.getRangeSize() + " for table VO : " +
                //             this.getViewObject().getDefFullName());
                 fetchSize = 10;
             }
       
             System.out.println("Original fetch size : " + this.getFetchSize() + ", Updated fetch size : " + fetchSize +
                         " for : " + this.getViewObject().getDefFullName());
             //if (fetchSize > this.getFetchSize()) {
               //  System.out.println("Updating fetch size : " + fetchSize);
                 this.setFetchSize(fetchSize);
            // } else {
            //     System.out.println("Current fetch size : " + this.getFetchSize() + " for : " +
            //                 this.getViewObject().getDefFullName());
            // } 
       
             long init = System.currentTimeMillis();
             super.executeQueryForCollection(qc, params, noUserParams);
             long end = System.currentTimeMillis() - init;
       
             //if (showSql)
                 System.out.println("VO: " + this.getName() + ", from AM: " + this.getApplicationModule().getName() +
                              ", executes SQL in: " + end + " (miliseconds)");
         }
    /**
     * method used to introspect the query produced at runtime by the vo.
     * @param qc
     * @param params
     */
    private void logQueryStatementAndBindParameters(QueryCollection qc, Object[] params) {
        String vrsiName = null;
        if (qc != null) {
            ViewRowSetImpl vrsi = qc.getRowSetImpl();
            vrsiName = vrsi.isDefaultRS() ? "<Default>" : vrsi.getName();
        }
        String voName = getName();
        String voDefName = getDefFullName();
        if (qc != null) {
            System.out.println("----[Exec query for VO=" + voName + ", RS=" + vrsiName + "]----");
        } else {
            System.out.println("----[Exec COUNT query for VO=" + voName + "]----");
        }
        System.out.println("VO Definition Name = {0}" + voDefName);

        String dbVCs = appliedCriteriaString(ViewCriteria.CRITERIA_MODE_QUERY);
        if (!dbVCs.isEmpty()) {
            System.out.println("Applied Database VCs = {0} " + dbVCs);
        }

        String memVCs = appliedCriteriaString(ViewCriteria.CRITERIA_MODE_CACHE);
        if (!memVCs.isEmpty()) {
            System.out.println("Applied In-Memory VCs = {0} " + memVCs);
        }

        String bothVCs = appliedCriteriaString(ViewCriteria.CRITERIA_MODE_QUERY | ViewCriteria.CRITERIA_MODE_CACHE);
        if (!bothVCs.isEmpty()) {
            System.out.println("Applied 'Both' VCs = {0}" + bothVCs);
        }

        System.out.println("Generated query : {0}" + getQuery());

        if (params != null) {
            if (getBindingStyle() == SQLBuilder.BINDING_STYLE_ORACLE_NAME) {
                Map<String, Object> bindsMap = new HashMap<String, Object>(params.length);
                for (Object param : params) {
                    Object[] nameValue = (Object[])param;
                    String name = (String)nameValue[0];
                    Object value = nameValue[1];
                    bindsMap.put(name, value);
                }
                System.out.println("Bind Variables : {0}" + bindsMap);
            }
        }
    }

    private String appliedCriteriaString(int mode) {
        ViewCriteria[] appliedCriterias = getApplyViewCriterias(mode);
        String result = "";
        if (appliedCriterias != null && appliedCriterias.length > 0) {
            List<String> list = new ArrayList<String>(appliedCriterias.length);
            for (ViewCriteria vc : appliedCriterias) {
                list.add(vc.getName());
            }
            result = list.toString();
        }
        return result;
    }
}
