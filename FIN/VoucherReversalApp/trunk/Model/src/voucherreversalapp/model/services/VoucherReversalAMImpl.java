package voucherreversalapp.model.services;

import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.SQLException;

import java.sql.Types;

import java.util.ArrayList;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import javax.faces.validator.ValidatorException;

import oracle.javatools.parser.java.v2.internal.compiler.Obj;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.domain.Date;
import oracle.jbo.server.ApplicationModuleImpl;

import oracle.jbo.server.ViewObjectImpl;

import voucherreversalapp.model.services.common.VoucherReversalAM;
import voucherreversalapp.model.views.SearchDualVOImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Aug 21 14:23:42 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class VoucherReversalAMImpl extends ApplicationModuleImpl implements VoucherReversalAM {

    private String cldIdPgFlow = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
    private Integer slocIdPgFlow = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));

    private Integer usrId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
    public String returnedRefNo = null;
    public String rtnValidRef = null;
    private static int VARCHAR = Types.VARCHAR;

    /**
     * This is the default constructor (do not remove).
     */
    public VoucherReversalAMImpl() {
    }

    /**
     * Container's getter for CoaLOV1.
     * @return CoaLOV1
     */
    public ViewObjectImpl getCoaLOV1() {
        return (ViewObjectImpl)findViewObject("CoaLOV1");
    }

    /**
     * Container's getter for SearchDual1.
     * @return SearchDual1
     */
    public SearchDualVOImpl getSearchDual1() {
        return (SearchDualVOImpl)findViewObject("SearchDual1");
    }


    /** For Search Action **/
    public void searchAcion(Integer vouType, String VouId, String frmDt, String toDate, Integer coaId, String cogId) {
        String hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        System.out.println("Search in AM" + cldIdPgFlow + " " + " " + slocIdPgFlow + " " + " " + " " + " " + vouType +
                           " " + VouId + " " + frmDt + " " + toDate + " " + coaId + " " + cogId + " " + hoOrgId);
        String orgIdPgFlow = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        SearchDualVOImpl dual1 = getSearchDual1();
        Row currentRow = dual1.getCurrentRow();
        ViewObjectImpl dtlVO = this.getSearchDetail1();

        dtlVO.setNamedWhereClauseParam("BindCldId", cldIdPgFlow);
        dtlVO.setNamedWhereClauseParam("BindSlocId", slocIdPgFlow);
        dtlVO.setNamedWhereClauseParam("BindOrgId", orgIdPgFlow);
        dtlVO.setNamedWhereClauseParam("BindPrjId", currentRow.getAttribute("PrjId"));
        dtlVO.setNamedWhereClauseParam("BindVoutype", vouType);
        dtlVO.setNamedWhereClauseParam("BindDispID", VouId);
        dtlVO.setNamedWhereClauseParam("BindFromDate", frmDt);
        dtlVO.setNamedWhereClauseParam("BindToDate", toDate);
        

        if (coaId == null) {
            dtlVO.setNamedWhereClauseParam("BindCoaId", null);
        } else if (coaId == 0) {
            dtlVO.setNamedWhereClauseParam("BindCoaId", null);

        } else
            dtlVO.setNamedWhereClauseParam("BindCoaId", coaId);


        //System.out.println("coa ID_____"+coaId);
        //System.out.println("cog ID_____"+cogId);
        dtlVO.setNamedWhereClauseParam("BindCogId", cogId);
        dtlVO.executeQuery();

    }

    /** For Reset Action **/
    public void resetAction() {
        System.out.println("Reset in AM");
        SearchDualVOImpl dulaVo = this.getSearchDual1();
        ViewObjectImpl dtlVO = this.getSearchDetail1();

        dtlVO.setNamedWhereClauseParam("BindCldId", -1);
        dtlVO.executeQuery();
        dulaVo.executeQuery();

    }

    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }

    /** For Selecting all Vouchers. **/
    public void selectAllVou() {
        ViewObjectImpl searchDtlVO = this.getSearchDetail1();
        String hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        RowSetIterator searchDltSelRowItr = searchDtlVO.createRowSetIterator(null);
        System.out.println("Row Count__________" + searchDltSelRowItr.getAllRowsInRange().length);

        while (searchDltSelRowItr.hasNext()) {
            Row row = searchDltSelRowItr.next();

            String orgId = row.getAttribute("GlOrgId").toString();
            String vouId = row.getAttribute("GlVouId").toString();

            System.out.println("cld id : " + cldIdPgFlow + "sloc Id : " + slocIdPgFlow + " Ho org :-" + hoOrgId +
                               " vou id " + vouId);

            //Function for validate a voucher for reversal and only check allowe voucher.
            rtnValidRef =
                    (String)callStoredFunction(Types.VARCHAR, "FIN.FN_VOU_REVERSAL_ALLOWED(?,?,?,?)", new Object[] { cldIdPgFlow,
                                                                                                                     slocIdPgFlow,
                                                                                                                     hoOrgId,
                                                                                                                     vouId });
            System.out.println("Param for select All Vou.------>" + rtnValidRef);

            if (rtnValidRef != null) {
                if (rtnValidRef.equalsIgnoreCase("Y")) {
                    row.setAttribute("selChkTrans", "Y");
                }
            }
        }
        searchDltSelRowItr.closeRowSetIterator();
    }

    /** For De-Selection all Vouchers. **/
    public void deselectAllVoucher() {
        ViewObjectImpl searchDtlVO = this.getSearchDetail1();
        RowSetIterator searchDltSelRowItr = searchDtlVO.createRowSetIterator(null);
        while (searchDltSelRowItr.hasNext()) {
            Row row = searchDltSelRowItr.next();
            row.setAttribute("selChkTrans", "N");
        }
        searchDltSelRowItr.closeRowSetIterator();
        searchDtlVO.getCurrentRow().getAttribute("selChkTrans");
        searchDtlVO.executeQuery();


    }

    /** Calling Procedure. **/
    public void callStoredProcedure(String stmt, Object[] bindVars) throws SQLException {
        System.out.println("function called------------");
        CallableStatement st = null;
        try {
            st = getDBTransaction().createCallableStatement("begin " + stmt + "; end;", 0);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 1, bindVars[z]);
                    System.out.println();
                }
            }

            st.registerOutParameter(8, Types.VARCHAR);
            st.executeUpdate();

            try {
                returnedRefNo = (String)st.getObject(8);

            } catch (SQLException sqle) {
                // TODO: Add catch code
                sqle.printStackTrace();
            }
        } catch (SQLException e) {
            int end = e.getMessage().indexOf("\n");

            throw new JboException(e.getMessage().substring(11, end));

        } finally {

            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {

                }
            }
        }
    }

    /** Calling Function. **/
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {

        CallableStatement st = null;
        try {
            // 1. Create a JDBC CallabledStatement
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            // 2. Register the first bind variable for the return value
            st.registerOutParameter(1, sqlReturnType);

            if (bindVars != null) {
                // 3. Loop over values for the bind variables passed in, if any
                for (int z = 0; z < bindVars.length; z++) {
                    // 4. Set the value of user-supplied bind vars in the stmt
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            // 5. Set the value of user-supplied bind vars in the stmt
            st.executeUpdate();
            // 6. Return the value of the first bind variable
            // System.out.println("Function return " + st.getObject(1));
            return st.getObject(1);
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("In Exception exch and Op and generate-->");
            //int end = e.getMessage().indexOf("\n");
            // throw new JboException(e.getMessage().substring(11, end));
            // String msg = e.getMessage().substring(11, end);

            String msg = e.getMessage();
            System.out.println(msg);
            FacesMessage ermsg = new FacesMessage(msg);
            ermsg.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, ermsg);
            return null;


        } finally {
            if (st != null) {
                try {
                    // 7. Close the statement
                    st.close();
                } catch (SQLException e) {
                    throw new JboException(e.getMessage());
                }
            }
        }
    }


    /** Calling VoucherReversalFunction Procedure. **/
    public void reverseVoucher() {
        String hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        ArrayList arrList = new ArrayList();
        ViewObjectImpl searchDelVO = this.getSearchDetail1();
        Row[] chkRow = searchDelVO.getFilteredRows("selChkTrans", "Y"); //checking selected rows.
        System.out.println("No. of Row......." + chkRow.length + "Voucher checked______" + chkRow);

        if (chkRow.length > 0) {
            for (Integer i = 0; i < chkRow.length; i++) {
                //   Row currentRow = searchDelVO.getCurrentRow();
                String orgId = (String)chkRow[i].getAttribute("GlOrgId");
                String vouId = (String)chkRow[i].getAttribute("GlVouId");
                System.out.println("voucherr iddd isss===="+vouId);
                System.out.println("org idd iss==="+orgId);

                System.out.println("cld id : " + cldIdPgFlow + "sloc Id : " + slocIdPgFlow + " Ho :- " + hoOrgId +
                                   " org :-" + orgId + " vou id " + vouId + " user Id " + usrId + "INS ID ");

                try {
                    callStoredProcedure("FIN.proc_reverse_vou(?,?,?,?,?,?,?,?)",
                                        new Object[] { cldIdPgFlow, slocIdPgFlow, hoOrgId, orgId, 1, vouId, usrId });
                    System.out.println("Revert Successfully..." + returnedRefNo);
                    getDBTransaction().commit();

                    arrList.add(returnedRefNo); //Adding returned out parameter in ArrayList.
                    System.out.println("Voucher generated after reverse...." + arrList);
                    // For showing faces message for Voucher No.
                } catch (Exception ex) {
                    System.out.println("Error Occured inside Reverse Voucher." + ex.getMessage());
                }
            }

            StringBuilder saveMsg = new StringBuilder("<html><body>");
            saveMsg.append("<p><b>Voucher Reverse successfully with Voucher Id -" + arrList + "</b></p>");
            saveMsg.append("</body></html>");
            FacesMessage msg = new FacesMessage(saveMsg.toString());
            msg.setSeverity(FacesMessage.SEVERITY_INFO);
            FacesContext.getCurrentInstance().addMessage(null, msg);


        } else {
            StringBuilder saveMsg = new StringBuilder("<html><body><p><b>Select Voucher for Reversal." + "</b></p>");

            saveMsg.append("</body></html>");
            FacesMessage msg = new FacesMessage(saveMsg.toString());
            msg.setSeverity(FacesMessage.SEVERITY_WARN);
            FacesContext.getCurrentInstance().addMessage(null, msg);

        }
        searchDelVO.executeQuery();

    }

    /** Initially reset page. **/
    public void setBindVar() {
        //for resetting transient search fields.
        SearchDualVOImpl searchDual = this.getSearchDual1();
        searchDual.executeQuery();

        //for re-setting detail lov.
        ViewObjectImpl searchDetail = this.getSearchDetail1();
        searchDetail.setNamedWhereClauseParam("BindCldId", null);
        getSearchDetail1().executeQuery();


    }

    /** Function for vliadate a voucher. **/
    public String validateVoucherFunc(String vouIdAttr) {
        System.out.println("In validator AM...");
        String hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        ViewObjectImpl searchDtlVO = this.getSearchDetail1();
        String orgId = searchDtlVO.getCurrentRow().getAttribute("GlOrgId").toString();

        System.out.println("cld id : " + cldIdPgFlow + "sloc Id : " + slocIdPgFlow + " Ho org :-" + hoOrgId + " vou id " +
                           vouIdAttr);

        //Function for validate a voucher for reversal.
        rtnValidRef =
                (String)callStoredFunction(Types.VARCHAR, "FIN.FN_VOU_REVERSAL_ALLOWED(?,?,?,?)", new Object[] { cldIdPgFlow,
                                                                                                                 slocIdPgFlow,
                                                                                                                 hoOrgId,
                                                                                                                 vouIdAttr });
        System.out.println("Param------>" + rtnValidRef);

        return rtnValidRef;
    }

    /**
     * Container's getter for SearchDetail1.
     * @return SearchDetail1
     */
    public ViewObjectImpl getSearchDetail1() {
        return (ViewObjectImpl)findViewObject("SearchDetail1");
    }

    public void setReturnedRefNo(String returnedRefNo) {
        this.returnedRefNo = returnedRefNo;
    }

    public String getReturnedRefNo() {
        return returnedRefNo;
    }

    public void setRtnValidRef(String rtnValidRef) {
        this.rtnValidRef = rtnValidRef;
    }

    public String getRtnValidRef() {
        return rtnValidRef;
    }
    public String checkVoucherDate() {
        ViewObjectImpl detail1 = this.getSearchDetail1();       
         String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
         String org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
          String valid= callStoredFunction(VARCHAR, "APP.fn_get_fy_stat_for_txn (?,?,?)",new Object[] { cld_id, org_id,Date.getCurrentDate().dateValue()  }).toString();
        if(valid!=null)
            return valid;
        else
        return "Y";
    }
}
