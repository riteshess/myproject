package brslistingapp.model.service;


import appexcelimpexpapp.model.util.UpdatedData;

import brslistingapp.model.service.common.BrsListingAppAM;
import brslistingapp.model.view.CoaIdLOVImpl;
import brslistingapp.model.view.GlLineInstrumntVOImpl;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.sql.Types;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.el.ELContext;
import javax.el.ValueExpression;

import oracle.adf.share.ADFContext;

import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewObjectImpl;
//import oracle.jbo.domain.Timestamp;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Jan 09 11:57:08 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class BrsListingAppAMImpl extends ApplicationModuleImpl  {
    /**
     * This is the default constructor (do not remove).
     */

    String outParam = null;


    public BrsListingAppAMImpl() {
    }

    /**
     * Container's getter for GlLineInstrumnt1.
     * @return GlLineInstrumnt1
     */
    public GlLineInstrumntVOImpl getGlLineInstrumnt1() {
        return (GlLineInstrumntVOImpl) findViewObject("GlLineInstrumnt1");
    }

    /**
     * Container's getter for BrsListingSearch1.
     * @return BrsListingSearch1
     */
    public ViewObjectImpl getBrsListingSearch1() {
        return (ViewObjectImpl) findViewObject("BrsListingSearch1");
    }


    /**
     * Container's getter for BankIdLOV.
     * @return BankIdLOV
     */
    public ViewObjectImpl getBankIdLOV() {
        return (ViewObjectImpl) findViewObject("BankIdLOV");
    }

    /**
     * Container's getter for CoaIdLOV.
     * @return CoaIdLOV
     */
    public ViewObjectImpl getCoaIdLOV() {
        return (ViewObjectImpl) findViewObject("CoaIdLOV");
    }

    /**
     * Container's getter for CurrLOV.
     * @return CurrLOV
     */
    public ViewObjectImpl getCurrLOV() {
        return (ViewObjectImpl) findViewObject("CurrLOV");
    }

    /**
     * Container's getter for GlSubTypeLOV.
     * @return GlSubTypeLOV
     */
    public ViewObjectImpl getGlSubTypeLOV() {
        return (ViewObjectImpl) findViewObject("GlSubTypeLOV");
    }

    /**
     * Container's getter for GlTypeLOV.
     * @return GlTypeLOV
     */
    public ViewObjectImpl getGlTypeLOV() {
        return (ViewObjectImpl) findViewObject("GlTypeLOV");
    }

    /**
     * Container's getter for InstrTypeLOV.
     * @return InstrTypeLOV
     */
    public ViewObjectImpl getInstrTypeLOV() {
        return (ViewObjectImpl) findViewObject("InstrTypeLOV");
    }

    /**
     * Container's getter for OrgLOV.
     * @return OrgLOV
     */
    public ViewObjectImpl getOrgLOV() {
        return (ViewObjectImpl) findViewObject("OrgLOV");
    }

    /**
     * Container's getter for StatusLOV.
     * @return StatusLOV
     */
    public ViewObjectImpl getStatusLOV() {
        return (ViewObjectImpl) findViewObject("StatusLOV");
    }

    public void search() {
        System.out.println("in amimpll search");
        ViewObjectImpl brsListingSearch1 = this.getBrsListingSearch1();
        Row currentRow = brsListingSearch1.getCurrentRow();
        System.out.println("lebthg1 = " + getGlLineInstrumnt1().getRowCount());

        getGlLineInstrumnt1().setNamedWhereClauseParam("BindCoaName", null);
        System.out.println("start of search method");
        System.out.println("lebthg 2= " + getGlLineInstrumnt1().getRowCount());

        if (currentRow != null) {
            System.out.println("when current row is not null");
            String doctxnid = null;
            if (currentRow.getAttribute("DocTxnIdDisp") != null) {
                doctxnid = currentRow.getAttribute("DocTxnIdDisp").toString();
                System.out.println("doctxnid = " + doctxnid);
                getGlLineInstrumnt1().setNamedWhereClauseParam("BindVouhcerId", doctxnid);
            } else
                getGlLineInstrumnt1().setNamedWhereClauseParam("BindVouhcerId", null);

            String narr = null;
            if (currentRow.getAttribute("Narration") != null) {
                narr = "%" + currentRow.getAttribute("Narration").toString() + "%";

                //   narr = currentRow.getAttribute("Narration").toString();
                System.out.println("narr  = " + narr);
                getGlLineInstrumnt1().setNamedWhereClauseParam("BindNarr", narr);
            } else
                getGlLineInstrumnt1().setNamedWhereClauseParam("BindNarr", null);

            String instNo = null;
            if (currentRow.getAttribute("InstrumentNo") != null) {
                instNo = currentRow.getAttribute("InstrumentNo").toString();
                System.out.println("instno = " + instNo);
                getGlLineInstrumnt1().setNamedWhereClauseParam("BindInstmentNo", instNo.trim());
            } else
                getGlLineInstrumnt1().setNamedWhereClauseParam("BindInstmentNo", null);


            // Timestamp glvoudtfrm=null;
            Date glvoudtfrm = null;
            if (currentRow.getAttribute("GlVouDtFrm") != null) {
                glvoudtfrm = (Date) currentRow.getAttribute("GlVouDtFrm");
                getGlLineInstrumnt1().setNamedWhereClauseParam("BindVoucherDateFrm", glvoudtfrm);
            } else
                getGlLineInstrumnt1().setNamedWhereClauseParam("BindVoucherDateFrm", null);

            // Timestamp glvoudtto=null;
            Date glvoudtto = null;
            if (currentRow.getAttribute("GlVouDtTo") != null) {
                glvoudtto = (Date) currentRow.getAttribute("GlVouDtTo");
                getGlLineInstrumnt1().setNamedWhereClauseParam("BindVoucherDateTo", glvoudtto);
            } else
                getGlLineInstrumnt1().setNamedWhereClauseParam("BindVoucherDateTo", null);

            Integer gltype = null;
            if (currentRow.getAttribute("GlTypeId") != null) {
                gltype = (Integer) currentRow.getAttribute("GlTypeId");
                System.out.println("GlTypeId=" + gltype);
                getGlLineInstrumnt1().setNamedWhereClauseParam("BindTypeId", gltype);
            } else
                getGlLineInstrumnt1().setNamedWhereClauseParam("BindTypeId", null);

            Integer glsubtype = null;
            if (currentRow.getAttribute("GlSubTypeId") != null) {
                glsubtype = (Integer) currentRow.getAttribute("GlSubTypeId");
                getGlLineInstrumnt1().setNamedWhereClauseParam("BindSubTypeId", glsubtype);
            } else
                getGlLineInstrumnt1().setNamedWhereClauseParam("BindSubTypeId", null);

            String coaname = null;
            if (currentRow.getAttribute("CoaNm") != null) {
                coaname = currentRow.getAttribute("CoaNm").toString();
                getGlLineInstrumnt1().setNamedWhereClauseParam("BindCoaName", coaname);
            } else
                getGlLineInstrumnt1().setNamedWhereClauseParam("BindCoaName", null);

            String bnkcoanm = null;
            if (currentRow.getAttribute("BankCoaNm") != null) {
                bnkcoanm = currentRow.getAttribute("BankCoaNm").toString();
                getGlLineInstrumnt1().setNamedWhereClauseParam("BindBankCoaName", bnkcoanm);
            } else
                getGlLineInstrumnt1().setNamedWhereClauseParam("BindBankCoaName", null);

            String curr = null;
            if (currentRow.getAttribute("Curreny") != null) {
                curr = currentRow.getAttribute("Curreny").toString();
                getGlLineInstrumnt1().setNamedWhereClauseParam("BindCurrency", curr);
            } else
                getGlLineInstrumnt1().setNamedWhereClauseParam("BindCurrency", null);

            String glinestrnm = null;
            if (currentRow.getAttribute("GlInstrmntNm") != null) {
                glinestrnm = currentRow.getAttribute("GlInstrmntNm").toString().trim();
                System.out.println("GLInstrmntNm=" + glinestrnm);
                getGlLineInstrumnt1().setNamedWhereClauseParam("BindInstrmntNm", glinestrnm);
            } else
                getGlLineInstrumnt1().setNamedWhereClauseParam("BindInstrmntNm", null);

            Integer glinsttyp = null;
            if (currentRow.getAttribute("GlInstrmntTyp") != null) {
                glinsttyp = (Integer) currentRow.getAttribute("GlInstrmntTyp");
                System.out.println("GlInstrmntTyp=" + glinsttyp);
                getGlLineInstrumnt1().setNamedWhereClauseParam("BindInstrType", glinsttyp);
            } else
                getGlLineInstrumnt1().setNamedWhereClauseParam("BindInstrType", null);

            Number amtfrm = null;
            if (currentRow.getAttribute("GlAmtSpFrom") != null) {
                amtfrm = (Number) currentRow.getAttribute("GlAmtSpFrom");
                getGlLineInstrumnt1().setNamedWhereClauseParam("BindAmtFrom", amtfrm);
            } else
                getGlLineInstrumnt1().setNamedWhereClauseParam("BindAmtFrom", null);

            Number amtto = null;
            if (currentRow.getAttribute("GlAmtSpTo") != null) {
                amtto = (Number) currentRow.getAttribute("GlAmtSpTo");
                getGlLineInstrumnt1().setNamedWhereClauseParam("BindAmtTo", amtto);
            } else
                getGlLineInstrumnt1().setNamedWhereClauseParam("BindAmtTo", null);

            //  Timestamp instdtfrm=null;
            Date instdtfrm = null;
            if (currentRow.getAttribute("GlInstrmntDtFrm") != null) {
                instdtfrm = (Date) currentRow.getAttribute("GlInstrmntDtFrm");
                getGlLineInstrumnt1().setNamedWhereClauseParam("BindInstrDateFrom", instdtfrm);
                // System.out.println("inst frm date---"+instdtfrm);
            } else
                getGlLineInstrumnt1().setNamedWhereClauseParam("BindInstrDateFrom", null);

            Date instdtto = null;
            if (currentRow.getAttribute("GlInstrmntDtTo") != null) {
                instdtto = (Date) currentRow.getAttribute("GlInstrmntDtTo");
                getGlLineInstrumnt1().setNamedWhereClauseParam("BindInstrDateTo", instdtto);
                //System.out.println("inst to date---"+instdtto);
            } else
                getGlLineInstrumnt1().setNamedWhereClauseParam("BindInstrDateTo", null);

            Integer status = null;
            if (currentRow.getAttribute("Status") != null) {
                status = (Integer) currentRow.getAttribute("Status");
                getGlLineInstrumnt1().setNamedWhereClauseParam("BindStatus", status);
            } else
                getGlLineInstrumnt1().setNamedWhereClauseParam("BindStatus", null);
            String projId=null;
            System.out.println("project idd iss==="+currentRow.getAttribute("TransProjectId"));
            if (currentRow.getAttribute("TransProjectId") != null) {
                projId = currentRow.getAttribute("TransProjectId").toString();
                getGlLineInstrumnt1().setNamedWhereClauseParam("BindPrjId", projId);
            } else
                getGlLineInstrumnt1().setNamedWhereClauseParam("BindPrjId", null);

            /* if(currentRow.getAttribute("InstrumentNoFrm")!=null){
                String Nofrm = currentRow.getAttribute("InstrumentNoFrm").toString();
                getGlLineInstrumnt1().setNamedWhereClauseParam("BindInstrumentNoFrom", Nofrm);
                System.out.println("Frm No.---"+Nofrm);
            }else
            getGlLineInstrumnt1().setNamedWhereClauseParam("BindInstrumentNoFrom", null);

            if(currentRow.getAttribute("InstrumentNoTo")!=null){
                String NoTo = currentRow.getAttribute("InstrumentNoTo").toString();
                getGlLineInstrumnt1().setNamedWhereClauseParam("BindInstrumentNoTo", NoTo);
                System.out.println("No To---"+NoTo);
            }else
            getGlLineInstrumnt1().setNamedWhereClauseParam("BindInstrumentNoTo", null);*/

            getGlLineInstrumnt1().executeQuery();
            System.out.println("lebthg = " + getGlLineInstrumnt1().getRowCount());
            System.out.println("end of search method");
        }

    }


    public void resetbutton() {
        ViewObjectImpl brsListingSearch1 = this.getBrsListingSearch1();
        Row currentRow = brsListingSearch1.getCurrentRow();
        currentRow.setAttribute("DocTxnIdDisp", null);
        currentRow.setAttribute("GlVouDtFrm", null);
        currentRow.setAttribute("GlVouDtTo", null);
        currentRow.setAttribute("GlTypeId", null);
        currentRow.setAttribute("GlSubTypeId", null);
        currentRow.setAttribute("CoaNm", null);
        currentRow.setAttribute("BankCoaNm", null);
        currentRow.setAttribute("Curreny", null);
        currentRow.setAttribute("GlInstrmntNm", null);
        currentRow.setAttribute("GlInstrmntTyp", null);
        currentRow.setAttribute("GlInstrmntDtFrm", null);
        currentRow.setAttribute("GlInstrmntDtTo", null);
        currentRow.setAttribute("GlAmtSpFrom", null);
        currentRow.setAttribute("GlAmtSpTo", null);
        currentRow.setAttribute("Status", null);
        currentRow.setAttribute("TransProjectId", null);
        /*  currentRow.setAttribute("InstrumentNoFrm", null);
        currentRow.setAttribute("InstrumentNoTo", null); */
        brsListingSearch1.executeQuery();

        getGlLineInstrumnt1().setNamedWhereClauseParam("BindVouhcerId", null);
        getGlLineInstrumnt1().setNamedWhereClauseParam("BindVoucherDateFrm", null);
        getGlLineInstrumnt1().setNamedWhereClauseParam("BindVoucherDateTo", null);
        getGlLineInstrumnt1().setNamedWhereClauseParam("BindTypeId", null);
        getGlLineInstrumnt1().setNamedWhereClauseParam("BindSubTypeId", null);
        getGlLineInstrumnt1().setNamedWhereClauseParam("BindCoaName", null);
        getGlLineInstrumnt1().setNamedWhereClauseParam("BindBankCoaName", null);
        getGlLineInstrumnt1().setNamedWhereClauseParam("BindCurrency", null);
        getGlLineInstrumnt1().setNamedWhereClauseParam("BindInstrmntNm", null);
        getGlLineInstrumnt1().setNamedWhereClauseParam("BindInstrType", null);
        getGlLineInstrumnt1().setNamedWhereClauseParam("BindAmtFrom", null);
        getGlLineInstrumnt1().setNamedWhereClauseParam("BindAmtTo", null);
        getGlLineInstrumnt1().setNamedWhereClauseParam("BindInstrDateFrom", null);
        getGlLineInstrumnt1().setNamedWhereClauseParam("BindInstrDateTo", null);
        getGlLineInstrumnt1().setNamedWhereClauseParam("BindStatus", null);
        /*  getGlLineInstrumnt1().setNamedWhereClauseParam("BindInstrumentNoFrom", null);
        getGlLineInstrumnt1().setNamedWhereClauseParam("BindInstrumentNoTo", null); */
        getGlLineInstrumnt1().setNamedWhereClauseParam("BindNarr", null);
        getGlLineInstrumnt1().setNamedWhereClauseParam("BindInstmentNo", null);

        getGlLineInstrumnt1().executeQuery();


    }


    public Key getCurrentRowKey() {
        return this.getGlLineInstrumnt1().getCurrentRow().getKey();
    }

    public void setCurrentRow(Key key) {
        this.getGlLineInstrumnt1().executeQuery();
        Row r = this.getGlLineInstrumnt1().getRow(key);
        System.out.println("row get=" + r);
        if (r != null)
            System.out.println("Key of this row=" + r.getKey());
        this.getGlLineInstrumnt1().setCurrentRow(r);
    }

    private String tmpinstrntNo;
    private Date tmpinstrDt;
    private Date tmpstatusDate;

    public void getValue() {
        ViewObject glInstrmnt = this.getGlLineInstrumnt1();
        Row curRow = glInstrmnt.getCurrentRow();

        tmpinstrntNo = (curRow.getAttribute("GlInstrmntNo").toString());

        tmpinstrDt = (Date) curRow.getAttribute("GlInstrmntDt");
        tmpstatusDate = (Date) curRow.getAttribute("GlInstrmntStatDt");
    }

    public void resetvalue() {
        ViewObject glInstrmnt = this.getGlLineInstrumnt1();
        Row curRow = glInstrmnt.getCurrentRow();
        System.out.println("instr no--" + tmpinstrntNo);
        curRow.setAttribute("GlInstrmntNo", tmpinstrntNo);
        System.out.println("instr no--" + tmpinstrDt);
        curRow.setAttribute("GlInstrmntDt", tmpinstrDt);
        curRow.setAttribute("GlInstrmntStatDt", tmpstatusDate);

    }


    public String callmethod(Integer status) {
        String rsFlag = null;
        ViewObject glInstrmnt = this.getGlLineInstrumnt1();
        Row curRow = glInstrmnt.getCurrentRow();

        Integer glChqSlNo = Integer.parseInt(curRow.getAttribute("GlChqSlNo").toString());
        String vouId = curRow.getAttribute("GlVouId").toString();
        // Integer uid = Integer.parseInt(curRow.getAttribute("UsrIdCreate").toString());
        Integer uid = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        Integer clrncTyp = Integer.parseInt(curRow.getAttribute("GlInstrmntStat").toString());
        String instrntNo = (curRow.getAttribute("GlInstrmntNo").toString());
        Integer instId = Integer.parseInt(curRow.getAttribute("GlApplInstId").toString());
        Date instrDt = (Date) curRow.getAttribute("GlInstrmntDt");
        Date statusDate = (Date) curRow.getAttribute("GlInstrmntStatDt");
        String org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String hoorg_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");


        /**Function is called in case of Status is changed - 8-03-2013"*/
        if (clrncTyp == 110 || clrncTyp == 186) { //for reissue/revalidate
            instrDt = (Date) curRow.getAttribute("GlInstrmntDt");
        } else if (clrncTyp == 108) { // for bounced
            System.out.println("in bounce status date--" + statusDate);
            instrDt = statusDate;
        } else if (clrncTyp == 184) { // for cancel
            // DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");
            //    Date dt=new Date();
            //System.out.println("in cancel status date--"+dt);
            //instrDt = (Date)dt.getCurrentDate();
            System.out.println("in cancel status date--" + statusDate);
            instrDt = statusDate;
        } else if (clrncTyp == 109) { // for cleared
            //DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");
            //Date dt=new Date();
            System.out.println("in clear status date--" + statusDate);
            instrDt = statusDate;
        }
        System.out.println("Parameters---> vouId--" + vouId + "uid--" + uid + "cltyp-->" + clrncTyp + "InsNo--" +
                           instrntNo + "InsDt---" + instrDt + "sloc--" + SlocId + "org--" + org_id + "cld--" + cld_id +
                           " instId---" + instId + "glchkSlno---" + glChqSlNo);
        System.out.println("Here");

        rsFlag = (String) callStoredFunction(Types.VARCHAR, "FIN.FN_REVERSE_VOU(?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                             cld_id, SlocId, hoorg_id, org_id, instId, vouId, uid, clrncTyp, instrntNo,
                                             instrDt, glChqSlNo
        });
        System.out.println("Output result flag is-->" + rsFlag);
        this.getbankStatusVO().executeQuery();
        return rsFlag;

    }

    /**Function Call to check that voucher exist in adjustment or not 23-APR-14  */

    public String chekVoucher() {
        String Flag = null;
        ViewObject glInstrmnt = this.getGlLineInstrumnt1();
        Row curRow = glInstrmnt.getCurrentRow();
        String vouId = curRow.getAttribute("GlVouId").toString();
        Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String hoorg_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer InstId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_INST_ID}").toString());

        System.out.println("Parameters---> vouId--" + vouId + "  sloc--" + SlocId + " hoorg--" + hoorg_id + " cld--" +
                           cld_id + " instId---" + InstId);

        Flag = (String) callStoredFunction(Types.VARCHAR, "FIN.fn_ins_in_tvouadj_chk(?,?,?,?,?)", new Object[] {
                                           cld_id, SlocId, hoorg_id, vouId, InstId
        });


        System.out.println("Output result flag is-->" + Flag);

        return Flag;

    }


    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            // 1. Create a JDBC CallabledStatement
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            // 2. Register the first bind variable for the return value
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                // 3. Loop over values for the bind variables passed in, if any
                for (int z = 0; z < bindVars.length; z++) {
                    // 4. Set the value of user-supplied bind vars in the stmt
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            // 5. Set the value of user-supplied bind vars in the stmt
            st.executeUpdate();
            // 6. Return the value of the first bind variable
            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    // 7. Close the statement
                    st.close();
                } catch (SQLException e) {
                }
            }
        }


    }

    /** Function for checking , reversal of a voucher. **/
    public String chkRevVouStatus() {
        String rtnChkRevStatus = null;

        // Getting page flow value for functions params.

        ViewObject glInstrmnt = this.getGlLineInstrumnt1();
        String vouId = glInstrmnt.getCurrentRow().getAttribute("GlVouId").toString();
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String cldIid = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        String hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");


        System.out.println("cld id : " + cldIid + "sloc Id : " + slocId + " hoOrgId :-" + hoOrgId + " vou id " + vouId);

        //calling function FN_REVERSE_VOCUHER_ALLOWED.

        rtnChkRevStatus = (String) callStoredFunction(Types.VARCHAR, "FIN.FN_VOU_REVERSAL_ALLOWED(?,?,?,?)", new Object[] {
                                                      cldIid, slocId, hoOrgId, vouId
        });
        System.out.println("Returned Function param.............." + rtnChkRevStatus);
        return rtnChkRevStatus;
    }

    public String resolvEl(String data) {
        ADFContext adfCtx = ADFContext.getCurrent();
        ELContext elContext = adfCtx.getELContext();
        ValueExpression valueExp = adfCtx.getExpressionFactory().createValueExpression(elContext, data, Object.class);
        Object Message = valueExp.getValue(elContext).toString();

        return Message.toString();
    }

    public Object resolvElO(String data) {
        ADFContext adfCtx = ADFContext.getCurrent();
        ELContext elContext = adfCtx.getELContext();
        ValueExpression valueExp = adfCtx.getExpressionFactory().createValueExpression(elContext, data, Object.class);
        Object Message = valueExp.getValue(elContext);
        return Message;
        //  return valueExp.getValue(elContext);
    }

    public String getVouId() {
        String vou = null;
        if (this.getGlLineInstrumnt1().getCurrentRow().getAttribute("GlVouId") != null)
            vou = (String) this.getGlLineInstrumnt1().getCurrentRow().getAttribute("GlVouId");
        return vou;
    }

    public String getRevVouId() {
        String rVou = null;
        if (this.getGlLineInstrumnt1().getCurrentRow().getAttribute("GlRevVouId") != null)
            rVou = this.getGlLineInstrumnt1().getCurrentRow().getAttribute("GlRevVouId").toString();
        System.out.println("reverse vouvher-++++>>>>" + rVou);
        return rVou;
    }
    /*Method To  Get value from Global Parameter for Task Flow*/

    public void setinitialvariables() {
        GlLineInstrumntVOImpl gllineinst = this.getGlLineInstrumnt1();
        String org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        String hoorg_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        System.out.println("org_id = " + org_id + " SlocId = " + SlocId + " hoorg_id = " + hoorg_id + " cld_id" +
                           cld_id);
        gllineinst.setNamedWhereClauseParam("BindCldId", cld_id);
        gllineinst.setNamedWhereClauseParam("BindSlocId", SlocId);
        gllineinst.setNamedWhereClauseParam("BindOrgId", org_id);
        gllineinst.setNamedWhereClauseParam("BindHoOrgId", hoorg_id);
        gllineinst.setNamedWhereClauseParam("BindCoaName", "^");
        gllineinst.executeQuery();

        ViewObjectImpl glLineImp = this.getGlLiineInstrumntForImp1();
        glLineImp.setNamedWhereClauseParam("cld_id", cld_id);
        glLineImp.setNamedWhereClauseParam("sloc_id", SlocId);
        glLineImp.setNamedWhereClauseParam("org_id", org_id);
        glLineImp.setNamedWhereClauseParam("ho_org_id", hoorg_id);
        glLineImp.executeQuery();
    }

    public Integer setSysDate() {
        ViewObjectImpl brssrch = this.getBrsListingSearch1();
        Object glfrmdt = brssrch.getCurrentRow().getAttribute("GlInstrmntDtFrm");
        Object gltodt = brssrch.getCurrentRow().getAttribute("GlInstrmntDtTo");
        if (glfrmdt != null && gltodt != null) {
            brssrch.getCurrentRow().setAttribute("ChqDateFrmTrans", glfrmdt);
            brssrch.getCurrentRow().setAttribute("ChqDateToTrans", gltodt);
            return 1;
        } else if (glfrmdt == null && gltodt != null) {

            brssrch.getCurrentRow().setAttribute("ChqDateFrmTrans", gltodt);
            brssrch.getCurrentRow().setAttribute("ChqDateToTrans", gltodt);
            return 1;

        } else if (glfrmdt != null && gltodt == null) {
            brssrch.getCurrentRow().setAttribute("ChqDateFrmTrans", glfrmdt);
            brssrch.getCurrentRow().setAttribute("ChqDateToTrans", glfrmdt);
            return 1;
        } else {
            brssrch.getCurrentRow().setAttribute("ChqDateFrmTrans", new Timestamp(System.currentTimeMillis()));
            brssrch.getCurrentRow().setAttribute("ChqDateToTrans", new Timestamp(System.currentTimeMillis()));
            return 1;
        }
    }

    public void chequePrintCancelpop() {
        ViewObjectImpl brssrch = this.getBrsListingSearch1();
        Row currentRow = brssrch.getCurrentRow();
        currentRow.setAttribute("GlInstrmntDtFrm", null);
        currentRow.setAttribute("GlInstrmntDtTo", null);
        currentRow.setAttribute("CoaNm", null);
        currentRow.setAttribute("Curreny", null);
        currentRow.setAttribute("GlInstrmntTyp", null);
        currentRow.setAttribute("GlAmtSpFrom", null);
        currentRow.setAttribute("GlAmtSpTo", null);
        currentRow.setAttribute("Status", null);
        currentRow.setAttribute("GlVouDtFrm", null);
        currentRow.setAttribute("GlVouDtTo", null);
        currentRow.setAttribute("BankCoaNm", null);
        currentRow.setAttribute("DocTxnIdDisp", null);
        brssrch.executeQuery();
    }

    public String checkStatusDate(String newdt) {
        ViewObject glInstrmnt = this.getGlLineInstrumnt1();
        Row curRow = glInstrmnt.getCurrentRow();
        // Date statusDate = (Date)curRow.getAttribute("GlInstrmntStatDt");
        Date indt = (Date) curRow.getAttribute("GlInstrmntDt");
        Date instrDt = new Date(indt.dateValue());
        //DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");
        Date dt = new Date();
        Date statusdt = new Date(newdt);
        Integer clrncTyp = Integer.parseInt(curRow.getAttribute("GlInstrmntStat").toString());
        if (clrncTyp == 109 || clrncTyp == 108 || clrncTyp == 184) {
            if (statusdt.dateValue().toString().compareTo(dt.getCurrentDate().dateValue().toString()) > 0) {
                System.out.println("in ycheck SYS date---" + dt.getCurrentDate());
                System.out.println("in ycheck instrumnt date--" + instrDt);
                System.out.println("in ycheck status date---" + statusdt);
                return "y";
            } else if (statusdt.dateValue().toString().compareTo(instrDt.dateValue().toString()) < 0) {
                System.out.println("in ycheck instrumnt date--" + instrDt);
                System.out.println("in ycheck status date---" + statusdt);
                return "y";
            } else {
                System.out.println("in check status date---" + statusdt);
                return "n";
            }
        }
        System.out.println("out of check status date---" + statusdt);
        return "n";
    }

    public void setOutParam(String outParam) {
        this.outParam = outParam;
    }

    public String getOutParam() {
        return outParam;
    }

    public void setTmpinstrntNo(String tmpinstrntNo) {
        this.tmpinstrntNo = tmpinstrntNo;
    }

    public String getTmpinstrntNo() {
        return tmpinstrntNo;
    }

    public void setTmpinstrDt(Date tmpinstrDt) {
        this.tmpinstrDt = tmpinstrDt;
    }

    public Date getTmpinstrDt() {
        return tmpinstrDt;
    }

    public void setTmpstatusDate(Date tmpstatusDate) {
        this.tmpstatusDate = tmpstatusDate;
    }

    public Date getTmpstatusDate() {
        return tmpstatusDate;
    }

    private java.util.Date getConvertTimeStampToStr(String str) {

        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
        //Format to match actual String to parse
        java.util.Date dt = null;
        //java.sql.Timestamp dt= null;
        try {
            dt = format.parse(str);
        } catch (ParseException e) {
            System.out.println("Exception Caught=" + e.getStackTrace());
        }
        //SimpleDateFormat newFormat=new SimpleDateFormat("dd-MMM-yyyy HH:mm:ss.SSS");
        java.sql.Timestamp timestamp = new java.sql.Timestamp(dt.getTime());

        return timestamp;


    }

    private java.util.Date getConvertDate(String str) {
        java.util.Date d = null;
        SimpleDateFormat format = new SimpleDateFormat("dd-MMM-yyyy");
        try {
            d = format.parse(str);
            System.out.println("Date parsed=" + d);
        } catch (Exception e) {
            System.out.println("Error during parse");
            e.printStackTrace();
        }

        return d;
    }


    /** For updating data from export. **/

    public void updateDataFromExcel() {

        /** Get All Updated rows
         * get iterator of excel row and iterate one by one
         *  Filter that rows with 109
         *  if it is 109 then filter vo with vou_id (prmry keys) get excel row in vo
         *  now we have 1 row in vo also
         *  and check  condition whether instrmnt st date is grtr tahn eqaul to inst dt (only 1 row is dre)
         *  update that 1 row with 109 from 0
         *  close iterator of excel rows
         *  commit
         *  **/
        System.out.println("In Update data.......");

        String org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String ho_org_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");

        Object updatedRows = resolvElO("#{pageFlowScope.UPDATED_ROWS}");
        System.out.println("row :" + updatedRows);

        if (updatedRows != null) {
            System.out.println("rows are not null");
            List<UpdatedData> list = (List<UpdatedData>) updatedRows;
            System.out.println("length of updated ows coming from excel " + list.size());
            // List list = (List) updatedRows;
            Iterator<UpdatedData> iterator = list.iterator();

            while (iterator.hasNext()) {
                UpdatedData data = iterator.next();
                Map Pkeys = data.getPrimaryKeys();
                Map column = data.getUpdatedColumn();
                System.out.println("Pkeys are: " + Pkeys);
                System.out.println("Column data are: " + column);

                Object glInstSt = column.get("GlInstrmntStat");
                Object glInstStDt = column.get("GlInstrmntStatDt");
                //       Object glInstDt = column.get("GlInstrmntDt");
                //     System.out.println("Instrument Date ____________"+glInstDt);

                Number glSlNo = new Number(0);
                Number glChkSlNo = new Number(0);

                try {
                    glSlNo = new Number(Pkeys.get("GlSlNo"));
                    System.out.println("SL_NO_____" + glSlNo);
                    glChkSlNo = new Number(Pkeys.get("GlChqSlNo"));
                    System.out.println("SL_NO_____" + glChkSlNo);

                } catch (SQLException e) {
                }

                ViewObjectImpl glLineInstVO = this.getGlLiineInstrumntForImp1();
                //    System.out.println("Row count is: " + glLineInstVO.getRowCount());
                System.out.println("Values for update are: " + cld_id + "  " + sloc_id + " " + org_id + " " +
                                   Pkeys.get("GlVouId") + " " + Pkeys.get("GlSlNo") + " " + Pkeys.get("GlChqSlNo") +
                                   " " + column.get("GlInstrmntStat") + " " + column.get("GlInstrmntStatDt"));

                RowQualifier rq = new RowQualifier(glLineInstVO);

                rq.setWhereClause("GlCldId='" + cld_id + "' and GlSlocId=" + sloc_id + " and GlHoOrgId='" + ho_org_id +
                                  "' and GlOrgId='" + org_id + "' and GlVouId='" + Pkeys.get("GlVouId") + "'" +
                                  " and GlChqSlNo =" + glChkSlNo + " and GlSlNo =" + glSlNo);

                String exprStr = rq.getExprStr();
                System.out.println("Expression is: " + exprStr);
                Row[] filteredRows = glLineInstVO.getFilteredRows(rq);
                System.out.println("Filtered rows length is: " + filteredRows.length);

                if (filteredRows.length > 0) {
                    for (Integer i = 0; i < filteredRows.length; i++) {
                        System.out.println("before set" + glInstSt + "---" + glInstStDt.toString());
                        if (glInstSt != null) {
                            if (glInstSt.toString().equalsIgnoreCase("109.0")) {
                                System.out.println("In Status Updated condition_______");

                                if (glInstStDt != null) {

                                    GlLineInstrumntVOImpl gl = getGlLineInstrumnt1();
                                    RowSetIterator rsi = gl.createRowSetIterator(null);
                                    Object obj = Pkeys.get("GlVouId");
                                    System.out.println("GL_VOU_ID for filtering______" + obj);
                                    Row[] row = rsi.getFilteredRows("GlVouId", obj);
                                    System.out.println("Row_____________________________" + row);
                                    List l = new ArrayList();
                                    Date indt = null;
                                    for (int i1 = 0; i1 < row.length; i1++) {
                                        indt = (Date) row[i].getAttribute("GlInstrmntDt");
                                        System.out.println("Instrument Date filtered for rows : " + indt);
                                        l.add(indt);
                                    }

                                    // rsi.closeRowSetIterator();
                                    Iterator itr = l.iterator();
                                    String format = null;
                                    while (itr.hasNext()) {
                                        Date listDate = (Date) itr.next();
                                        Date instrDt = new Date(listDate.dateValue());
                                        SimpleDateFormat fat = new SimpleDateFormat("dd-MMM-yyyy");
                                        format = fat.format(instrDt.dateValue());

                                    }
                                    DateFormat format1 = new SimpleDateFormat("dd-MMM-yyyy");
                                    java.util.Date dt = new java.util.Date();
                                    String sysDate = format1.format(dt);

                                    System.out.println("--------------------------> Instrument Date new : " + format);
                                    System.out.println("--------------------------> Gl Instrument Status Date" +
                                                       glInstStDt.toString());
                                    System.out.println("-------------------------->  Sysdate is " + sysDate);

                                    if ((format.equals(glInstStDt.toString()) ||
                                         getConvertDate(glInstStDt.toString()).compareTo(getConvertDate(format)) > 0) &&
                                        (sysDate.equals(glInstStDt.toString()) ||
                                         getConvertDate(glInstStDt.toString()).compareTo(getConvertDate(sysDate)) <
                                         0)) {

                                        System.out.println("yes in equal or greater than condition..");
                                        System.out.println("ALLOWED  1");
                                        filteredRows[i].setAttribute("GlInstrmntStat", glInstSt);
                                        System.out.println("Status updated____________");
                                        filteredRows[i].setAttribute("GlInstrmntStatDt",
                                                                     getConvertDate(glInstStDt.toString()));
                                        System.out.println("Status Date Updated.......");
                                        this.getDBTransaction().commit();
                                        this.getGlLiineInstrumntForImp1().executeQuery();

                                    } else if (getConvertDate(glInstStDt.toString()).compareTo(getConvertDate(format)) <
                                               0 ||
                                               getConvertDate(glInstStDt.toString()).compareTo(getConvertDate(sysDate)) >
                                               0) {

                                        System.out.println("Not Allowed");

                                    } else {

                                        System.out.println("ALLOWED  2");
                                        filteredRows[i].setAttribute("GlInstrmntStat", glInstSt);
                                        System.out.println("Status updated____________");
                                        filteredRows[i].setAttribute("GlInstrmntStatDt",
                                                                     getConvertDate(glInstStDt.toString()));
                                        System.out.println("Status Date Updated.......");
                                        this.getDBTransaction().commit();
                                        this.getGlLiineInstrumntForImp1().executeQuery();
                                    }
                                    rsi.closeRowSetIterator();

                                }

                            }
                        }
                    }
                }

                Set keySet = Pkeys.keySet();
                Iterator itr = keySet.iterator();
                while (itr.hasNext()) {
                    String clmNm = itr.next().toString();
                    System.out.println("Column Name is: " + clmNm);
                    Object object = Pkeys.get(clmNm);
                }

            }
            /* this.getDBTransaction().commit();
            this.getGlLiineInstrumntForImp1().executeQuery(); */
        }
    }


    /**
     * Container's getter for GlLiineInstrumntForImp1.
     * @return GlLiineInstrumntForImp1
     */
    public ViewObjectImpl getGlLiineInstrumntForImp1() {
        return (ViewObjectImpl) findViewObject("GlLiineInstrumntForImp1");
    }

    /**
     * Container's getter for ChequeBookTypeVO1.
     * @return ChequeBookTypeVO1
     */
    public ViewObjectImpl getChequeBookTypeVO1() {
        return (ViewObjectImpl) findViewObject("ChequeBookTypeVO1");
    }

    /**
     * Container's getter for bankStatus1.
     * @return bankStatus1
     */
    public ViewObjectImpl getbankStatusVO() {
        return (ViewObjectImpl) findViewObject("bankStatusVO");
    }

    public void getBankStatus() {
        Integer bankCoaID = 0;
        String org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String ho_org_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        ViewObjectImpl brsSearchVO = this.getBrsListingSearch1();
        Row currentRow = brsSearchVO.getCurrentRow();
        if (currentRow.getAttribute("BankCoaId") != null)
            bankCoaID = Integer.parseInt(currentRow.getAttribute("BankCoaId").toString());
        System.out.println("selectedd bank iddd iss--==" + bankCoaID);
        ViewObjectImpl bankStatusVO = this.getbankStatusVO();
        bankStatusVO.setNamedWhereClauseParam("BindCldId", cld_id);
        bankStatusVO.setNamedWhereClauseParam("BindSlocId", sloc_id);
        bankStatusVO.setNamedWhereClauseParam("BindOrgId", org_id);
        bankStatusVO.setNamedWhereClauseParam("BindHoOrgId", ho_org_id);
        bankStatusVO.setNamedWhereClauseParam("BindBankId", bankCoaID);
        bankStatusVO.executeQuery();
    }

    public void refreshBankStatus() {
        this.getbankStatusVO().executeQuery();
    }

    public Number addBookBalance() {
        getBankStatus();
        Number sum = new Number(0);
        String BookBalance = "";
        ViewObjectImpl bankStatusVO = this.getbankStatusVO();
        RowSetIterator itr = bankStatusVO.createRowSetIterator(null);
        while (itr.hasNext()) {
            Row row = itr.next();
            Number stNUm = (Number) row.getAttribute("GlAmtSp");
            sum = sum.add(stNUm);
        }
        itr.closeRowSetIterator();

        if (bankStatusVO.getRowCount() > 0 && bankStatusVO.getCurrentRow() != null) {
            BookBalance = (String) bankStatusVO.getCurrentRow().getAttribute("TransBookBalance");
            String BookBalance2 = BookBalance.substring(0, BookBalance.length() - 2);
            try {

                Number bankClosingBal = new Number(BookBalance2);
                bankClosingBal = bankClosingBal.subtract(sum);
                return bankClosingBal;

            } catch (Exception e) {
                e.printStackTrace();
                System.out.println("Exception occured while convertin number into string");
            }

        }

        return new Number(0);

    }

    /**
     * Container's getter for LovProjectVO1.
     * @return LovProjectVO1
     */
    public ViewObjectImpl getLovProjectVO() {
        return (ViewObjectImpl) findViewObject("LovProjectVO");
    }
}
