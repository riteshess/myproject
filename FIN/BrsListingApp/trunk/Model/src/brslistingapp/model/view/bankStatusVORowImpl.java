package brslistingapp.model.view;

import java.math.BigInteger;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import javax.el.ELContext;
import javax.el.ValueExpression;

import oracle.adf.share.ADFContext;

import oracle.jbo.JboException;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Jun 08 18:44:17 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class bankStatusVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        GlCldId {
            public Object get(bankStatusVORowImpl obj) {
                return obj.getGlCldId();
            }

            public void put(bankStatusVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        GlSlocId {
            public Object get(bankStatusVORowImpl obj) {
                return obj.getGlSlocId();
            }

            public void put(bankStatusVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        GlApplInstId {
            public Object get(bankStatusVORowImpl obj) {
                return obj.getGlApplInstId();
            }

            public void put(bankStatusVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        GlHoOrgId {
            public Object get(bankStatusVORowImpl obj) {
                return obj.getGlHoOrgId();
            }

            public void put(bankStatusVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        GlCoaBnkId {
            public Object get(bankStatusVORowImpl obj) {
                return obj.getGlCoaBnkId();
            }

            public void put(bankStatusVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        BankCoaNm {
            public Object get(bankStatusVORowImpl obj) {
                return obj.getBankCoaNm();
            }

            public void put(bankStatusVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        Status {
            public Object get(bankStatusVORowImpl obj) {
                return obj.getStatus();
            }

            public void put(bankStatusVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        GlAmtSp {
            public Object get(bankStatusVORowImpl obj) {
                return obj.getGlAmtSp();
            }

            public void put(bankStatusVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        TransBookBalance {
            public Object get(bankStatusVORowImpl obj) {
                return obj.getTransBookBalance();
            }

            public void put(bankStatusVORowImpl obj, Object value) {
                obj.setTransBookBalance((String) value);
            }
        },
        TransOrgId {
            public Object get(bankStatusVORowImpl obj) {
                return obj.getTransOrgId();
            }

            public void put(bankStatusVORowImpl obj, Object value) {
                obj.setTransOrgId((String) value);
            }
        },
        transTotalDebit {
            public Object get(bankStatusVORowImpl obj) {
                return obj.gettransTotalDebit();
            }

            public void put(bankStatusVORowImpl obj, Object value) {
                obj.settransTotalDebit((String) value);
            }
        },
        TransTotalCredit {
            public Object get(bankStatusVORowImpl obj) {
                return obj.getTransTotalCredit();
            }

            public void put(bankStatusVORowImpl obj, Object value) {
                obj.setTransTotalCredit((String) value);
            }
        },
        TranGetBal {
            public Object get(bankStatusVORowImpl obj) {
                return obj.getTranGetBal();
            }

            public void put(bankStatusVORowImpl obj, Object value) {
                obj.setTranGetBal((String) value);
            }
        };
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(bankStatusVORowImpl object);

        public abstract void put(bankStatusVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int GLCLDID = AttributesEnum.GlCldId.index();
    public static final int GLSLOCID = AttributesEnum.GlSlocId.index();
    public static final int GLAPPLINSTID = AttributesEnum.GlApplInstId.index();
    public static final int GLHOORGID = AttributesEnum.GlHoOrgId.index();
    public static final int GLCOABNKID = AttributesEnum.GlCoaBnkId.index();
    public static final int BANKCOANM = AttributesEnum.BankCoaNm.index();
    public static final int STATUS = AttributesEnum.Status.index();
    public static final int GLAMTSP = AttributesEnum.GlAmtSp.index();
    public static final int TRANSBOOKBALANCE = AttributesEnum.TransBookBalance.index();
    public static final int TRANSORGID = AttributesEnum.TransOrgId.index();
    public static final int TRANSTOTALDEBIT = AttributesEnum.transTotalDebit.index();
    public static final int TRANSTOTALCREDIT = AttributesEnum.TransTotalCredit.index();
    public static final int TRANGETBAL = AttributesEnum.TranGetBal.index();

    /**
     * This is the default constructor (do not remove).
     */
    public bankStatusVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute GlCldId.
     * @return the GlCldId
     */
    public String getGlCldId() {
        return (String) getAttributeInternal(GLCLDID);
    }

    /**
     * Gets the attribute value for the calculated attribute GlSlocId.
     * @return the GlSlocId
     */
    public Integer getGlSlocId() {
        return (Integer) getAttributeInternal(GLSLOCID);
    }

    /**
     * Gets the attribute value for the calculated attribute GlApplInstId.
     * @return the GlApplInstId
     */
    public Integer getGlApplInstId() {
        return (Integer) getAttributeInternal(GLAPPLINSTID);
    }

    /**
     * Gets the attribute value for the calculated attribute GlHoOrgId.
     * @return the GlHoOrgId
     */
    public String getGlHoOrgId() {
        return (String) getAttributeInternal(GLHOORGID);
    }

    /**
     * Gets the attribute value for the calculated attribute GlCoaBnkId.
     * @return the GlCoaBnkId
     */
    public BigInteger getGlCoaBnkId() {
        return (BigInteger) getAttributeInternal(GLCOABNKID);
    }

    /**
     * Gets the attribute value for the calculated attribute BankCoaNm.
     * @return the BankCoaNm
     */
    public String getBankCoaNm() {
        return (String) getAttributeInternal(BANKCOANM);
    }

    /**
     * Gets the attribute value for the calculated attribute Status.
     * @return the Status
     */
    public String getStatus() {
        return (String) getAttributeInternal(STATUS);
    }

    /**
     * Gets the attribute value for the calculated attribute GlAmtSp.
     * @return the GlAmtSp
     */
    public Number getGlAmtSp() {
        return (Number) getAttributeInternal(GLAMTSP);
    }

    /**
     * Gets the attribute value for the calculated attribute TransBookBalance.
     * @return the TransBookBalance
     */
    public String getTransBookBalance() {
        if (getGlCoaBnkId() != null) {
            Date dt = new Date();
            Date sysdate = (Date) dt.getCurrentDate();
            callStoredProcedureForOpBal("FIN.proc_get_coa_bal_params(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                        getGlCldId(), getGlSlocId(), getGlHoOrgId(), getTransOrgId(), getGlCoaBnkId(),
                                        null, sysdate, null, null
            });
            System.out.println("valluee of book balancee iss===" + getAttributeInternal(TRANSBOOKBALANCE));
            return (String) getAttributeInternal(TRANSBOOKBALANCE);
        }
        return (String) getAttributeInternal(TRANSBOOKBALANCE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransBookBalance.
     * @param value value to set the  TransBookBalance
     */
    public void setTransBookBalance(String value) {
        setAttributeInternal(TRANSBOOKBALANCE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransOrgId.
     * @return the TransOrgId
     */
    public String getTransOrgId() {
        if (resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}") != null)
            return resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        else
            return (String) getAttributeInternal(TRANSORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransOrgId.
     * @param value value to set the  TransOrgId
     */
    public void setTransOrgId(String value) {
        setAttributeInternal(TRANSORGID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute transTotalDebit.
     * @return the transTotalDebit
     */
    public String gettransTotalDebit() {
        System.out.println("totlal debitt amountt tiss==" + getAttributeInternal(TRANSTOTALDEBIT));
        return (String) getAttributeInternal(TRANSTOTALDEBIT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute transTotalDebit.
     * @param value value to set the  transTotalDebit
     */
    public void settransTotalDebit(String value) {
        setAttributeInternal(TRANSTOTALDEBIT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransTotalCredit.
     * @return the TransTotalCredit
     */
    public String getTransTotalCredit() {
        System.out.println("total creditt amount iss====" + getAttributeInternal(TRANSTOTALCREDIT));
        return (String) getAttributeInternal(TRANSTOTALCREDIT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransTotalCredit.
     * @param value value to set the  TransTotalCredit
     */
    public void setTransTotalCredit(String value) {
        setAttributeInternal(TRANSTOTALCREDIT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TranGetBal.
     * @return the TranGetBal
     */
    public String getTranGetBal() {
        return (String) getAttributeInternal(TRANGETBAL);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TranGetBal.
     * @param value value to set the  TranGetBal
     */
    public void setTranGetBal(String value) {
        setAttributeInternal(TRANGETBAL, value);
    }

    public String resolvEl(String data) {
        ADFContext adfCtx = ADFContext.getCurrent();
        ELContext elContext = adfCtx.getELContext();
        ValueExpression valueExp = adfCtx.getExpressionFactory().createValueExpression(elContext, data, Object.class);
        Object Message = valueExp.getValue(elContext).toString();

        return Message.toString();
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    protected Object callStoredProcedureForOpBal(String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            // 1. Create a JDBC CallableStatement
            st = getDBTransaction().createCallableStatement("begin " + stmt + "; end ;", 0);
            // 2. Register the first bind variable for the return value
            st.setObject(1, bindVars[0]);
            st.setObject(2, bindVars[1]);
            st.setObject(3, bindVars[2]);
            st.setObject(4, bindVars[3]);
            st.setObject(5, bindVars[4]);
            st.setObject(6, bindVars[5]);
            st.setObject(7, bindVars[6]);
            st.setObject(8, bindVars[7]);
            st.setObject(9, bindVars[8]);

            st.registerOutParameter(10, Types.VARCHAR);
            st.registerOutParameter(11, Types.VARCHAR);
            st.registerOutParameter(12, Types.VARCHAR);
            st.registerOutParameter(13, Types.VARCHAR);
            st.registerOutParameter(14, Types.VARCHAR);
            st.registerOutParameter(15, Types.VARCHAR);
            st.registerOutParameter(16, Types.VARCHAR);
            st.registerOutParameter(17, Types.VARCHAR);
            // 5. Set the value of user-supplied bind vars in the stmt

            st.executeUpdate();
            try {
                if (st.getObject(11) != null) {
                    settransTotalDebit(st.getObject(11).toString());
                }
                if (st.getObject(12) != null) {
                    setTransTotalCredit(st.getObject(12).toString());
                }
                if (st.getObject(13) != null) {
                    setTransBookBalance(st.getObject(13).toString());
                }
            } catch (SQLException sqle) {
                // TODO: Add catch code
                sqle.printStackTrace();
            }

            return "Y";
        } catch (SQLException e) {
            int end = e.getMessage().indexOf("\n");
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    // 7. Close the statement
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();

                }
            }
        }
    }

}

