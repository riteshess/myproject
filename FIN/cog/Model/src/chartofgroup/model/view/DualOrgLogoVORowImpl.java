package chartofgroup.model.view;

import adf.utils.ebiz.EbizParams;

import chartofgroup.model.service.ChartOfGroupAMImpl;

import oracle.jbo.ApplicationModule;
import oracle.jbo.Row;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Aug 06 11:33:40 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DualOrgLogoVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        TransOrgLogoDesc {
            public Object get(DualOrgLogoVORowImpl obj) {
                return obj.getTransOrgLogoDesc();
            }

            public void put(DualOrgLogoVORowImpl obj, Object value) {
                obj.setTransOrgLogoDesc((String) value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(DualOrgLogoVORowImpl object);

        public abstract void put(DualOrgLogoVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }

    public static final int TRANSORGLOGODESC = AttributesEnum.TransOrgLogoDesc.index();

    /**
     * This is the default constructor (do not remove).
     */
    public DualOrgLogoVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute TransOrgLogoDesc.
     * @return the TransOrgLogoDesc
     */
    public String getTransOrgLogoDesc() {
        ChartOfGroupAMImpl am =(ChartOfGroupAMImpl) this.getApplicationModule();
        ViewObjectImpl logoVO = am.getLovOrgLogoVO();
        logoVO.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
               logoVO.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
               logoVO.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
               logoVO.executeQuery();
               Row[] allRowsInRange = logoVO.getAllRowsInRange();
               if(allRowsInRange.length >0){
                   return allRowsInRange[0].getAttribute("OrgLogoImgDesc").toString();
                   }else
                   return "Org-logo.PNG";
        //return (String) getAttributeInternal(TRANSORGLOGODESC);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransOrgLogoDesc.
     * @param value value to set the  TransOrgLogoDesc
     */
    public void setTransOrgLogoDesc(String value) {
        setAttributeInternal(TRANSORGLOGODESC, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}

