package chartofgroup.model.service;

import chartofgroup.model.service.common.ChartOfGroupAM;


import chartofgroup.model.view.FinCogNewVOImpl;
import chartofgroup.model.view.FinCogVOImpl;


import chartofgroup.model.view.views.FinCogForMoveLOVImpl;
import chartofgroup.model.view.views.FinCogForTreeVOImpl;


import chartofgroup.model.view.views.FinCogLOVImpl;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.util.Map;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.TransactionEvent;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.apache.myfaces.trinidad.context.RequestContext;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Aug 23 13:58:02 IST 2011
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ChartOfGroupAMImpl extends ApplicationModuleImpl implements ChartOfGroupAM {
    /**
     * This is the default constructor (do not remove).
     */

    private Integer ServerLocationId;

    public ChartOfGroupAMImpl() {
    }

    /**
     * Container's getter for FinCog1.
     * @return FinCog1
     */
    public ViewObjectImpl getFinCog1() {
        return (ViewObjectImpl)findViewObject("FinCog1");
    }


    /**
     * Container's getter for LOVUsrNmVO1.
     * @return LOVUsrNmVO1
     */
    public ViewObjectImpl getLOVUsrNmVO1() {
        return (ViewObjectImpl)findViewObject("LOVUsrNmVO1");
    }


    public void setServerLocationId(Integer ServerLocationId) {
        this.ServerLocationId = ServerLocationId;
    }

    public Integer getServerLocationId() {
        return ServerLocationId;
    }

    /**
     * Container's getter for LovGrpType1.
     * @return LovGrpType1
     */
    public ViewObjectImpl getLovGrpType1() {
        return (ViewObjectImpl)findViewObject("LovGrpType1");
    }

    /**
     * Container's getter for FinCog2.
     * @return FinCog2
     */
    public FinCogVOImpl getFinCog2() {
        return (FinCogVOImpl)findViewObject("FinCog2");
    }

    /**
     * Container's getter for FinCogVL1.
     * @return FinCogVL1
     */
    public ViewLinkImpl getFinCogVL1() {
        return (ViewLinkImpl)findViewLink("FinCogVL1");
    }

    /**
     * Container's getter for FinCogNewVO.
     * @return FinCogNewVO
     */
    public ViewObjectImpl getFinCogNewVO() {
        return (ViewObjectImpl)findViewObject("FinCogNewVO");
    }


    /**
     * Container's getter for FinCogForTree.
     * @return FinCogForTree
     */
    public FinCogForTreeVOImpl getFinCogForTree() {
        return (FinCogForTreeVOImpl)findViewObject("FinCogForTree");
    }


    /**
     * Container's getter for FinCogForTree1.
     * @return FinCogForTree1
     */
    public FinCogForTreeVOImpl getFinCogForTree1() {
        return (FinCogForTreeVOImpl)findViewObject("FinCogForTree1");
    }

    /**
     * Container's getter for FinCogForTreeVL1.
     * @return FinCogForTreeVL1
     */
    public ViewLinkImpl getFinCogForTreeVL1() {
        return (ViewLinkImpl)findViewLink("FinCogForTreeVL1");
    }

    /**
     * Container's getter for FinCogForFilter.
     * @return FinCogForFilter
     */
    public ViewObjectImpl getFinCogForFilter() {
        return (ViewObjectImpl)findViewObject("FinCogForFilter");
    }

    /**
     * Container's getter for FinCogForMoveLOV1.
     * @return FinCogForMoveLOV1
     */
    public ViewObjectImpl getFinCogForMoveLOV1() {
        return (ViewObjectImpl)findViewObject("FinCogForMoveLOV1");
    }

    /**
     * Container's getter for FinCogLOV1.
     * @return FinCogLOV1
     */
    public ViewObjectImpl getFinCogLOV1() {
        return (ViewObjectImpl)findViewObject("FinCogLOV1");
    }

    public void afterCommit(TransactionEvent transactionEvent) {

        super.afterCommit(transactionEvent);
        getFinCogForMoveLOV1().executeQuery();
    }

    public void afterRemove(TransactionEvent transactionEvent) {
        super.afterRemove(transactionEvent);
        getFinCogForMoveLOV1().executeQuery();
    }

    public void afterRollback(TransactionEvent transactionEvent) {
        super.afterRollback(transactionEvent);
        getFinCogForMoveLOV1().executeQuery();
    }

    /**
     * Container's getter for LOVGroupTyp1.
     * @return LOVGroupTyp1
     */
    public ViewObjectImpl getLOVGroupTyp1() {
        return (ViewObjectImpl)findViewObject("LOVGroupTyp1");
    }

    public Object resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        Object Message = valueExp.getValue(elContext);
        return Message;
    }
    public static int VARCHAR = Types.VARCHAR;
    String add_mode = null;
    String edit_mode = null;
    String view_mode = null;
    String del_mode = null;
    protected Object callStoredFunction1(int sqlReturnType, String stmt, Object[] bindVars) {
        Object ret=null;
        CallableStatement st = null;
        try {
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.executeUpdate();
            ret= st.getObject(1);
        } catch (SQLException e) {
            
            if (e.getMessage().length() < 11) {
                throw new JboException(e.getMessage());
                
            } else {
                int end = e.getMessage().indexOf("\n");
                throw new JboException(e.getMessage());
                
            }
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    if (e.getMessage().length() < 11) {
                        throw new JboException(e.getMessage());
                        
                    } else {
                        int end = e.getMessage().indexOf("\n");
                        throw new JboException(e.getMessage().substring(11, end));
                        
                    }
                }
            }
        }
        return ret;
    }


    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.registerOutParameter(7, VARCHAR);
            st.registerOutParameter(8, VARCHAR);
            st.registerOutParameter(9, VARCHAR);
            st.registerOutParameter(10, VARCHAR);
            st.executeUpdate();
            try {
                setAdd_mode(st.getObject(7).toString());
                setEdit_mode((st.getObject(8).toString()));
                setView_mode(st.getObject(9).toString());
                setDel_mode(st.getObject(10).toString());
            } catch (NullPointerException e) {
                // System.out.println(e);
                e.printStackTrace();
            }
            return st.getObject(1);

        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {

                }
            }
        }
    }


    public Integer on_load_page() {
        int count = 0;
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        Integer usr_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        callStoredFunction(VARCHAR, "APP.fn_get_usr_doc_access_param(?,?,?,?,?,?,?,?,?)",
                           new Object[] { cld_id, sloc_id, org_id, 49, usr_id });
        String calledFrom = "M";
        if (resolvEl("#{pageFlowScope.PARAM_PG_CALLED}") != null) {
            calledFrom = resolvEl("#{pageFlowScope.PARAM_PG_CALLED}").toString();
        }
        if (add_mode.equalsIgnoreCase("Y") == false && add_mode.equalsIgnoreCase("N") == false) {
            count = 1;
        } else if (edit_mode.equalsIgnoreCase("Y") == false && edit_mode.equalsIgnoreCase("N") == false) {
            count = 1;
        } else if (view_mode.equalsIgnoreCase("Y") == false && view_mode.equalsIgnoreCase("N") == false) {
            count = 1;
        } else if (del_mode.equalsIgnoreCase("Y") == false && del_mode.equalsIgnoreCase("N") == false) {
            count = 1;
        } else if (calledFrom.equalsIgnoreCase("P") == false && calledFrom.equalsIgnoreCase("M") == false) {
            count = 1;
        }
        Map paramMap = RequestContext.getCurrentInstance().getPageFlowScope();
        paramMap.put("PARAM_PG_ADD_MD", add_mode);
        paramMap.put("PARAM_PG_EDIT_MD", edit_mode);
        paramMap.put("PARAM_PG_VIEW_MD", view_mode);
        paramMap.put("PARAM_PG_DEL_MD", del_mode);
        // System.out.println("del_mode :"+del_mode);
        String addMode = resolvEl("#{pageFlowScope.PARAM_PG_ADD_MD}").toString();
        String editMode = resolvEl("#{pageFlowScope.PARAM_PG_EDIT_MD}").toString();
        String viewMode = resolvEl("#{pageFlowScope.PARAM_PG_VIEW_MD}").toString();
        String deleteMode = resolvEl("#{pageFlowScope.PARAM_PG_DEL_MD}").toString();
        return count;
    }

    public void setAdd_mode(String add_mode) {
        this.add_mode = add_mode;
    }

    public String getAdd_mode() {
        return add_mode;
    }

    public void setEdit_mode(String edit_mode) {
        this.edit_mode = edit_mode;
    }

    public String getEdit_mode() {
        return edit_mode;
    }

    public void setView_mode(String view_mode) {
        this.view_mode = view_mode;
    }

    public String getView_mode() {
        return view_mode;
    }

    public void setDel_mode(String del_mode) {
        this.del_mode = del_mode;
    }

    public String getDel_mode() {
        return del_mode;
    }

    /**
     * Container's getter for FinCog3.
     * @return FinCog3
     */
    public FinCogVOImpl getFinCog3() {
        return (FinCogVOImpl)findViewObject("FinCog3");
    }
   
    private static int STRING = Types.VARCHAR;
     public String checkCogId(Integer Sloc,String CldId, String OrgId, String CogId) {
        /*  System.out.println("in amimpl"+Sloc);
        System.out.println("in amimpl"+CldId);
        System.out.println("in amimpl"+OrgId);
        System.out.println("in amimpl"+CogId); */
        System.out.println("print before method calling");
     String value= (String)callStoredFunction1(STRING, "FIN.PKG_FIN.GET_COG_ID(?,?,?,?)", new Object[] {Sloc,CldId,OrgId,CogId});
     System.out.println("print after method calling");
      System.out.println("Return value="+value);
       return value;
    
    } 
    public String CheckDulicateCogName(String CldId,Integer Sloc, String HoOrgId,String cognm,String cogId) {
      String val=(String) callStoredFunction1(STRING, "FIN.FN_IS_COG_NM_UNIQUE(?,?,?,?,?)",
                           new Object[] {CldId, Sloc,HoOrgId,cognm,cogId });
      return val;
    }

    /**
     * Container's getter for CountChildVO1.
     * @return CountChildVO1
     */
    public ViewObjectImpl getCountChildVO1() {
        return (ViewObjectImpl)findViewObject("CountChildVO1");
    }
}
