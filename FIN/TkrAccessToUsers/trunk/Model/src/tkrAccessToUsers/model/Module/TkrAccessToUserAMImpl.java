package tkrAccessToUsers.model.Module;

import java.sql.CallableStatement;
import java.sql.SQLException;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.Map;

import javax.el.ELContext;
import javax.el.ExpressionFactory;

import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import javax.xml.crypto.Data;

import oracle.adf.share.ADFContext;

import oracle.jbo.JboException;
import oracle.jbo.RowSet;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.apache.myfaces.trinidad.context.RequestContext;

import tkrAccessToUsers.model.Module.common.TkrAccessToUserAM;
import tkrAccessToUsers.model.View.DualVOImpl;
import tkrAccessToUsers.model.View.DualVORowImpl;
import tkrAccessToUsers.model.View.FinSecTkrUsrVOImpl;
import tkrAccessToUsers.model.View.SearchVORowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun Sep 30 15:37:26 IST 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TkrAccessToUserAMImpl extends ApplicationModuleImpl implements TkrAccessToUserAM {
    
     private String currentHoOrgId=null;
     private String currentCldId=null;;
     private Integer currentSlocId=null;
     private Integer currentTikerId=null;
     
    // This reference hold the deleted rows
        ArrayList<ArrayList<String>> deletedList=new ArrayList<ArrayList<String>>();
   
    /**
     * This is the default constructor (do not remove).
     */
    public TkrAccessToUserAMImpl() {
    }

    /**
     * Container's getter for FinSecTkrUsr1.
     * @return FinSecTkrUsr1
     */
    public ViewObjectImpl getFinSecTkrUsr1() {
        return (ViewObjectImpl)findViewObject("FinSecTkrUsr1");
    }

    /**
     * Container's getter for LovTkr1.
     * @return LovTkr1
     */
    public ViewObjectImpl getLovTkr1() {
        return (ViewObjectImpl)findViewObject("LovTkr1");
    }

    /**
     * Container's getter for LovUser1.
     * @return LovUser1
     */
    public ViewObjectImpl getLovUser1() {
        return (ViewObjectImpl)findViewObject("LovUser1");
    }

    /**
     * Container's getter for Dual1.
     * @return Dual1
     */
    public ViewObjectImpl getDual1() {
        return (ViewObjectImpl)findViewObject("Dual1");
    }
    
    
    public void setCloudBindVar()
    {
        System.out.println("cld id"+resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
         ViewObject vo=this.getLovOrg1();
         System.out.println("reached impl");
         vo.setNamedWhereClauseParam("bindCldId", resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
        System.out.println("reached impl>>>>>>>>>>");
         vo.executeQuery();
    }
    
    public void searchTkrTable() {
        
        FinSecTkrUsrVOImpl tkrUsrVo=(FinSecTkrUsrVOImpl)this.getFinSecTkrUsr1();
        SearchVORowImpl searchVo= (SearchVORowImpl) this.getSearch1().getCurrentRow();
        
        tkrUsrVo.setBindOrgId(searchVo.getOrgId());
        tkrUsrVo.setBindPos(searchVo.getTickerPos());
        tkrUsrVo.setBindUserId(searchVo.getUserId());
        
        tkrUsrVo.executeQuery();
        
    }
    
    public void resetTkrTable(){
        
        FinSecTkrUsrVOImpl tkrUsrVo=(FinSecTkrUsrVOImpl)this.getFinSecTkrUsr1();
        
        tkrUsrVo.setBindOrgId(null);
        tkrUsrVo.setBindPos(null);
        tkrUsrVo.setBindUserId(null);
        
        tkrUsrVo.executeQuery();
        
        // to reset Transient Fields
        
        this.getSearch1().executeQuery();
    }
    
    public String resolvEl(String data) {
            ADFContext adfCtx = ADFContext.getCurrent();
            ELContext elContext = adfCtx.getELContext();
            ValueExpression valueExp = adfCtx.getExpressionFactory().createValueExpression(elContext, data, Object.class);
            Object Message = valueExp.getValue(elContext).toString();
            return Message.toString();
        }
        public static int VARCHAR = Types.VARCHAR;
        String add_mode = null;
        String edit_mode = null;
        String view_mode = null;
        String del_mode = null;
        
        protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
            CallableStatement st = null;
            try {
                st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
                st.registerOutParameter(1, sqlReturnType);
                if (bindVars != null) {
                    for (int z = 0; z < bindVars.length; z++) {
                        st.setObject(z + 2, bindVars[z]);
                    }
                }
                st.registerOutParameter(7, VARCHAR);
                st.registerOutParameter(8, VARCHAR);
                st.registerOutParameter(9, VARCHAR);
                st.registerOutParameter(10, VARCHAR);
                st.executeUpdate();
                try {
                    setAdd_mode(st.getObject(7).toString());
                    setEdit_mode((st.getObject(8).toString()));
                    setView_mode(st.getObject(9).toString());
                    setDel_mode(st.getObject(10).toString());
                } catch (NullPointerException e) {
                    System.out.println(e);
                    e.printStackTrace();
                }
                return st.getObject(1);

            } catch (SQLException e) {
                throw new JboException(e);
            } finally {
                if (st != null) {
                    try {
                        st.close();
                    } catch (SQLException e) {
                        
                        e.printStackTrace();

                    }
                }
            }
        }


        
        public Integer on_load_page()
        {  
            int count = 0;
            String cld_id =  resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString(); 
            Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString()); 
            String org_id =  resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString(); 
            Integer usr_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString()); 
            callStoredFunction(VARCHAR,"app.fn_get_usr_doc_access_param(?,?,?,?,?,?,?,?,?)",new Object[] { cld_id, sloc_id, org_id,1,usr_id});
            String calledFrom =  resolvEl("#{pageFlowScope.PARAM_PG_CALLED}").toString(); 
            if(add_mode.equalsIgnoreCase("Y") == false && add_mode.equalsIgnoreCase("N") == false)
            {       
                count = 1;
            }
            else if(edit_mode.equalsIgnoreCase("Y") == false && edit_mode.equalsIgnoreCase("N") == false)
            {
                count = 1;
            }
            else if(view_mode.equalsIgnoreCase("Y") == false && view_mode.equalsIgnoreCase("N") == false)
            {
                count = 1; 
            }
            else if (del_mode.equalsIgnoreCase("Y") == false && del_mode.equalsIgnoreCase("N") == false)
            {
                count = 1; 
            }
            else if(calledFrom.equalsIgnoreCase("P") == false && calledFrom.equalsIgnoreCase("M") == false)
            {
                count = 1; 
            }
            Map paramMap = RequestContext.getCurrentInstance().getPageFlowScope();
            paramMap.put("PARAM_PG_ADD_MD", add_mode); 
            paramMap.put("PARAM_PG_EDIT_MD", edit_mode); 
            paramMap.put("PARAM_PG_VIEW_MD", view_mode); 
            paramMap.put("PARAM_PG_DEL_MD", del_mode);      
          
          return count;
        }
        
        public void setAdd_mode(String add_mode) {
            this.add_mode = add_mode;
        }

        public String getAdd_mode() {
            return add_mode;
        }

        public void setEdit_mode(String edit_mode) {
            this.edit_mode = edit_mode;
        }

        public String getEdit_mode() {
            return edit_mode;
        }

        public void setView_mode(String view_mode) {
            this.view_mode = view_mode;
        }

        public String getView_mode() {
            return view_mode;
        }

        public void setDel_mode(String del_mode) {
            this.del_mode = del_mode;
        }

        public String getDel_mode() {
            return del_mode;
        }
        
        public void refreshVo(){
            
            DualVORowImpl rowCur=(DualVORowImpl) this.getDual1().getCurrentRow();
           rowCur.getLovUserVO().getViewObject().executeQuery();
           rowCur.getLovRoleVO().executeQuery();
        this.getDual1().executeQuery();
            getFinSecTkrUsr1().executeQuery();
        }


    /**
     * Container's getter for LovOrg1.
     * @return LovOrg1
     */
    public ViewObjectImpl getLovOrg1() {
        return (ViewObjectImpl)findViewObject("LovOrg1");
    }
    
    public void setBindVar(Integer slocId,String cldId,String hoOrgId,Integer tikerId){
        
        this.setCurrentCldId(cldId);
        this.setCurrentHoOrgId(hoOrgId);
        this.setCurrentSlocId(slocId);
        this.setCurrentTikerId(tikerId);
        
        
        FinSecTkrUsrVOImpl tkrUsrVo=(FinSecTkrUsrVOImpl)this.getFinSecTkrUsr1();
        tkrUsrVo.setBindCldId(cldId);
        tkrUsrVo.setBindHoOrgId(hoOrgId);
        tkrUsrVo.setBindSlocId(slocId);
        tkrUsrVo.setBindTkrId(tikerId);
        tkrUsrVo.setBindOrgId(null);
        tkrUsrVo.executeQuery();
        
        
    }
    
    
    public String generateData(Integer userId){
        String result="N";
        
        DualVORowImpl dualCurRow=(DualVORowImpl) this.getDual1().getCurrentRow();
        
        System.out.println(currentCldId +","+ currentSlocId+","+currentHoOrgId + ","+dualCurRow.getOrgName()+","+dualCurRow.getUserType()+","+dualCurRow.getRoleId()+","+dualCurRow.getUserTypeId()+","+dualCurRow.getPostype()+","+dualCurRow.getTickerId()+","+userId);
        
        try{
            result=callStoredFunctionOneReturn(VARCHAR, "fn_gen_tkr_usr_access(?,?,?,?,?,?,?,?,?,?)", new Object[] {currentCldId , currentSlocId,currentHoOrgId,
                                                                                                          dualCurRow.getOrgName(), dualCurRow.getUserType(),
                                                                                                          dualCurRow.getRoleId(),dualCurRow.getUserTypeId(),
                                                                                                          dualCurRow.getPostype(),dualCurRow.getTickerId(),userId}).toString();
            
        
        }catch(Exception e){
            result="E";
            System.out.println("Role is not exist  for Coa");
            e.printStackTrace();
        }
        
        return result;
    }


    protected Object callStoredFunctionOneReturn(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
       
        try {
            st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                  //  System.out.println("param is "+bindVars[z]);
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.executeUpdate();
            System.out.println(st.getObject(1));
            return st.getObject(1);

        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    System.out.println(e.getMessage());
                }
            }
        }
    }
    public void setCurrentHoOrgId(String currentHoOrgId) {
        this.currentHoOrgId = currentHoOrgId;
    }

    public String getCurrentHoOrgId() {
        return currentHoOrgId;
    }

    public void setCurrentCldId(String currentCldId) {
        this.currentCldId = currentCldId;
    }

    public String getCurrentCldId() {
        return currentCldId;
    }

    public void setCurrentSlocId(Integer currentSlocId) {
        this.currentSlocId = currentSlocId;
    }

    public Integer getCurrentSlocId() {
        return currentSlocId;
    }

    public void setCurrentTikerId(Integer currentTikerId) {
        this.currentTikerId = currentTikerId;
    }

    public Integer getCurrentTikerId() {
        return currentTikerId;
    }

    /**
     * Container's getter for Search1.
     * @return Search1
     */
    public ViewObjectImpl getSearch1() {
        return (ViewObjectImpl)findViewObject("Search1");
    }

    public void setDeletedList(ArrayList<ArrayList<String>> deletedList) {
        this.deletedList = deletedList;
    }

    public ArrayList<ArrayList<String>> getDeletedList() {
        return deletedList;
    }
    
    public void addToDeletedList(ArrayList<String> al){
        this.getDeletedList().add(al);
    }
    
    public void deleteRows(String cldId,Integer slocId){
        //System.out.println("rows are"+this.getDeletedList().size());
        Iterator i=this.getDeletedList().iterator();
        while(i.hasNext()){
            ArrayList<String> al=(ArrayList<String>) i.next();
          //  System.out.println("Fetching row"+Integer.parseInt(al.get(0)) +" "+al.get(1));
            
           // System.out.println("cld is"+cldId +"sloc is "+slocId +"ho Org_id"+this.getCurrentHoOrgId());
            this.callStoredFunctionOneReturn(Types.VARCHAR, "fn_sec_tkr_usr_pos(?,?,?,?,?)",new Object[]{
                                                                                                         cldId,
                                                                                                         slocId,
                                                                                                         this.getCurrentHoOrgId(),
                                                                                                         al.get(1),
                                                                                                         Integer.parseInt(al.get(0))
                                                                                                         
                                                                                                      });
        }
    }
}
