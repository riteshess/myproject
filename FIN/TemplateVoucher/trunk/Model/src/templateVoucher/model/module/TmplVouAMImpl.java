package templateVoucher.model.module;

import adf.utils.ebiz.EbizParams;

import adf.utils.model.ADFModelUtils;

import appCostCenterSevice.model.service.AppCostCenterServiceAMImpl;

import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.sql.Types;

import java.util.Map;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import oracle.jbo.ApplicationModule;
import oracle.jbo.AttributeDef;
import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewObject;
import oracle.jbo.client.Configuration;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.apache.myfaces.trinidad.context.RequestContext;

import templateVoucher.model.module.common.TmplVouAM;
import templateVoucher.model.view.LovCoaForHdVOImpl;
import templateVoucher.model.view.LovCoaNewVOImpl;
import templateVoucher.model.view.LovCoaVOImpl;
import templateVoucher.model.view.LovCogVOImpl;
import templateVoucher.model.view.LovLatestCurrVOImpl;
import templateVoucher.model.view.LovVouIdVOImpl;
import templateVoucher.model.view.TmplVOImpl;
import templateVoucher.model.view.TmplVouLineVOImpl;
import templateVoucher.model.view.TmplVouOcVOImpl;
import templateVoucher.model.view.TmplVouTaxRuleLineVOImpl;
import templateVoucher.model.view.TmplVouTaxRuleVOImpl;
import templateVoucher.model.view.TmplVouTdsRuleLineVOImpl;
import templateVoucher.model.view.TmplVouTdsRuleVOImpl;
import templateVoucher.model.view.TmplVouVOImpl;
import templateVoucher.model.view.TmplVouVORowImpl;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Apr 11 11:48:27 IST 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TmplVouAMImpl extends ApplicationModuleImpl implements TmplVouAM {
    /**
     * This is the default constructor (do not remove).
     */
    public TmplVouAMImpl() {
    }

    /**
     * Container's getter for TmplVou.
     * @return TmplVou
     */
    public TmplVouVOImpl getTmplVou() {
        return (TmplVouVOImpl) findViewObject("TmplVou");
    }

    /**
     * Container's getter for TmplVouLine.
     * @return TmplVouLine
     */
    public ViewObjectImpl getTmplVouLine() {
        return (ViewObjectImpl) findViewObject("TmplVouLine");
    }


    /**
     * Container's getter for TmplVouVoulineVL1.
     * @return TmplVouVoulineVL1
     */
    public ViewLinkImpl getTmplVouVoulineVL1() {
        return (ViewLinkImpl) findViewLink("TmplVouVoulineVL1");
    }

    private Integer GLBL_APP_USR;
    private Integer GLBL_APP_LANG;
    private Integer GLBL_APP_USR_ROLE;
    private String GLBL_APP_USR_ORG;
    private String GLBL_APP_USR_LANG;
    private Timestamp GLBL_APP_SESS_DT;
    private String APP_PG_ID;
    private String GLBL_APP_VER;
    private String GLBL_APP_REG;
    private String GLBL_APP_DB_VER;
    private String GLBL_APP_SESSID;
    private Integer GLBL_APP_SERV_LOC;
    private String GLBL_APP_CLD_ID;
    private String GLBL_APP_HO_ORG_ID;


    private static int NUMBER = Types.INTEGER;
    private static int VARCHAR = Types.VARCHAR;

    public void tvouLineOp() {


        ViewObjectImpl tmplVouVO = getTmplVou();
        Row tmplVouRow = tmplVouVO.getCurrentRow();

        String vouId = tmplVouRow.getAttribute("TmplVouId").toString();
        Integer slocId = Integer.parseInt(tmplVouRow.getAttribute("TmplVouSlocId").toString());
        String orgId = tmplVouRow.getAttribute("TmplVouOrgId").toString();
        String HoOrgId = tmplVouRow.getAttribute("TmplHoOrgId").toString();
        String CldId = tmplVouRow.getAttribute("TmplCldId").toString();
        System.out.println("before call header line oppp");
        try {
            callStoredFunction(NUMBER, "FIN.FN_TMPL_VOU_LINE_HDR_LINE_OP(?,?,?,?,?)", new Object[] {
                               CldId, slocId, HoOrgId, orgId, vouId
            });
        } catch (Exception e) {
            e.printStackTrace();
        }
        System.out.println("after call header line oppppp");
    }

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            // 1. Create a JDBC CallabledStatement
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            // 2. Register the first bind variable for the return value
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                // 3. Loop over values for the bind variables passed in, if any
                for (int z = 0; z < bindVars.length; z++) {
                    // 4. Set the value of user-supplied bind vars in the stmt
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            // 5. Set the value of user-supplied bind vars in the stmt
            st.executeUpdate();
            // 6. Return the value of the first bind variable
            return st.getObject(1);
        } catch (SQLException e) {
            //    int end = e.getMessage().indexOf("\n");
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    // 7. Close the statement
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();


                }
            }
        }
    }

    public void generateDocNo() {

        ViewObjectImpl tmplVouVO = getTmplVou();
        Row tmplVouRow = tmplVouVO.getCurrentRow();
        String vouId = tmplVouRow.getAttribute("TmplVouId").toString();
        Date vouDt = (Date) tmplVouRow.getAttribute("TmplVouDt");
        Integer usrId = Integer.parseInt(tmplVouRow.getAttribute("UsrIdCreate").toString());
        Integer slocId = Integer.parseInt(tmplVouRow.getAttribute("TmplVouSlocId").toString());
        Integer vouTypeId = Integer.parseInt(tmplVouRow.getAttribute("TmplVouTypeId").toString());
        String orgId = tmplVouRow.getAttribute("TmplVouOrgId").toString();
        String HoOrgId = tmplVouRow.getAttribute("TmplHoOrgId").toString();
        String CldId = tmplVouRow.getAttribute("TmplCldId").toString();

        System.out.println("vouId " + vouId + " vouDt" + vouDt + " usrId " + usrId);

        try {
            callStoredFunction(VARCHAR, "APP.INS_DISP_DOC_TAB (?,?,?,?,?,?,?,?,?,?)", new Object[] {
                               CldId, slocId, 1, HoOrgId, orgId, vouId, 54, vouTypeId, usrId, vouDt
            });
        } catch (Exception e) {
            System.out.println("an exception found while creating voucherrrr idddd");
            e.printStackTrace();
        }
    }

    /**
     * Container's getter for TmplVouTaxRule.
     * @return TmplVouTaxRule
     */
    public ViewObjectImpl getTmplVouTaxRule() {
        return (ViewObjectImpl) findViewObject("TmplVouTaxRule");
    }

    /**
     * Container's getter for TmplVouTaxRuleVL1.
     * @return TmplVouTaxRuleVL1
     */
    public ViewLinkImpl getTmplVouTaxRuleVL1() {
        return (ViewLinkImpl) findViewLink("TmplVouTaxRuleVL1");
    }

    /**
     * Container's getter for TmplVouTaxRuleLine.
     * @return TmplVouTaxRuleLine
     */
    public ViewObjectImpl getTmplVouTaxRuleLine() {
        return (ViewObjectImpl) findViewObject("TmplVouTaxRuleLine");
    }

    /**
     * Container's getter for TaxRuleVL1.
     * @return TaxRuleVL1
     */
    public ViewLinkImpl getTaxRuleVL1() {
        return (ViewLinkImpl) findViewLink("TaxRuleVL1");
    }

    private Number Sum = new Number(0);
    private static Number as = new Number();
    private static Number asCr = new Number();


    public String processTaxForHdr(Integer taxRuleId) {

        this.setSum(new Number(0));
        this.setAs(new Number(0));
        setAsCr(new Number(0));

        /**Getting parameters from template header for the function **/

        ViewObjectImpl tmplVouVO = getTmplVou();
        Row tmplVouRow = tmplVouVO.getCurrentRow();
        String vouId = tmplVouRow.getAttribute("TmplVouId").toString();
        Integer slocId = Integer.parseInt(tmplVouRow.getAttribute("TmplVouSlocId").toString());
        String orgId = tmplVouRow.getAttribute("TmplVouOrgId").toString();
        String HoOrgId = tmplVouRow.getAttribute("TmplHoOrgId").toString();
        String CldId = tmplVouRow.getAttribute("TmplCldId").toString();
        String projectID=tmplVouRow.getAttribute("TmplPrjId").toString();
        System.out.println("????????????????project id=="+projectID);
        Date tvouDt = (Date) tmplVouRow.getAttribute("TmplVouDt");
        /** Iterating the rows to get taxable amount from **/
        ViewObject tmplVouLineVO = getTmplVouLine();
        Row tmplVoulineRow = tmplVouLineVO.getCurrentRow();
        RowSetIterator rit = tmplVouLineVO.createRowSetIterator(null);
        if (rit.first() != null && rit.first().getAttribute("TmplVouTxnTypTax").equals("Y") &&
            rit.first().getAttribute("TmplVouAmtTyp").equals("Dr")) {
            as = (Number) (rit.first().getAttribute("TmplVouAmtSp"));
        }
        while (rit.hasNext()) {
            Row lineRow = rit.next();
            if (lineRow.getAttribute("TmplVouTxnTypTax").equals("Y") &&
                lineRow.getAttribute("TmplVouAmtTyp").equals("Dr")) {
                as = as.add((Number) (lineRow.getAttribute("TmplVouAmtSp")));
            }
        }
        if (rit.first() != null && rit.first().getAttribute("TmplVouTxnTypTax").equals("Y") &&
            rit.first().getAttribute("TmplVouAmtTyp").equals("Cr")) {
            asCr = (Number) (rit.first().getAttribute("TmplVouAmtSp"));
        }
        while (rit.hasNext()) {
            Row lineRow = rit.next();
            if (lineRow.getAttribute("TmplVouTxnTypTax").equals("Y") &&
                lineRow.getAttribute("TmplVouAmtTyp").equals("Cr")) {
                asCr = asCr.add((Number) (lineRow.getAttribute("TmplVouAmtSp")));
            }
        }
        rit.closeRowSetIterator();

        if (as.compareTo(asCr) == 1) {
            setSum((Number) (as.minus(asCr)));
        } else if (as.compareTo(asCr) == -1) {
            setSum((Number) (asCr.minus(as)));
        }
        ViewObjectImpl tmplVouTaxRuleVO = getTmplVouTaxRule();
        Row tmplVouTaxRulerow = tmplVouTaxRuleVO.getCurrentRow();
        // Date usrDt = (Date)Date.getCurrentDate();
        java.util.Date sysydt = new java.util.Date();
        java.sql.Date usrDt = new java.sql.Date((sysydt.getTime()));
        Integer slNo = 0;
        tmplVouTaxRulerow.setAttribute("TmplVouTaxRuleId", taxRuleId);
        tmplVouTaxRulerow.setAttribute("TmplVouTaxableAmt", Sum);
        tmplVouTaxRulerow.setAttribute("TmplVouTaxAmtSp", 0);
        //tmplVouTaxRulerow.setAttribute("TmplVouCurrIdSp", tmplVoulineRow.getAttribute("TmplVouCurrIdSp"));
        tmplVouTaxRulerow.setAttribute("TmplVouCurrIdSp", tmplVouRow.getAttribute("TmplCurrIdSp"));
        tmplVouTaxRulerow.setAttribute("UsrIdCreate", tmplVouRow.getAttribute("UsrIdCreate"));
        tmplVouTaxRulerow.setAttribute("TmplVouSlNo", slNo);
        // Integer currIdsp = Integer.parseInt(tmplVoulineRow.getAttribute("TmplVouCurrIdSp").toString());
        Integer currIdsp = Integer.parseInt(tmplVouRow.getAttribute("TmplCurrIdSp").toString());
        Integer userId = Integer.parseInt(tmplVouRow.getAttribute("UsrIdCreate").toString());
        Number finAmt = (Number) tmplVouTaxRulerow.getAttribute("TmplVouTaxableAmt");
        try {
            System.out.println("Function Called for tax rule");
            System.out.println("tax rule in id in selection of vclllllllllllllllllllllll iss=" + taxRuleId);
            System.out.println("<<<--- CldId = " + CldId + " slocId = " + slocId + " HoOrgId = " + HoOrgId +
                               " orgId = " + orgId + " vouId = " + vouId + " tvouDt = " + tvouDt + " slNo = " + slNo +
                               " taxRuleId = " + taxRuleId + " finAmt = " + finAmt + " currIdsp = " + currIdsp +
                               " userId = " + userId + " usrDt = " + usrDt + "--->>>");
            callStoredProcedure("FIN.INS_TEMPLATE_TAX_LINE(?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                CldId, slocId, HoOrgId, orgId,projectID, vouId, tvouDt, slNo, taxRuleId, finAmt, currIdsp, userId,
                                usrDt
            });
            // getDBTransaction().commit();
        } catch (SQLException e1) {
            e1.printStackTrace();
        }

        ViewObject tmplVouTaxRuleLineObject = this.findViewObject("TmplVouTaxRuleLine");
        tmplVouTaxRuleLineObject.refreshProperty("TmplVouTaxRuleLine");
        ViewObject tmplVouTaxRuleLine = getTmplVouTaxRuleLine();
        tmplVouTaxRuleLine.executeQuery();
        return null;

    }

    public void setSum(Number Sum) {
        this.Sum = Sum;
    }

    public Number getSum() {
        return Sum;
    }

    public static void setAs(Number as) {
        TmplVouAMImpl.as = as;
    }

    public static Number getAs() {
        return as;
    }

    public static void setAsCr(Number asCr) {
        TmplVouAMImpl.asCr = asCr;
    }

    public static Number getAsCr() {
        return asCr;
    }

    public void callStoredProcedure(String stmt, Object[] bindVars) throws SQLException {

        PreparedStatement st = null;
        try {
            st = getDBTransaction().createPreparedStatement("begin " + stmt + "; end;", 0);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 1, bindVars[z]);
                    System.out.println();
                }
            }

            st.executeUpdate();
        } catch (Exception e) {
            int end = e.getMessage().indexOf("\n");
            //System.out.println("Error msg is-->"+end+"and --->"+e.getMessage().substring(11, end));
            // throw new JboException(e.getMessage().substring(11, end));
            FacesMessage msg = new FacesMessage(e.getMessage().substring(11, end));
            msg.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, msg);

        } finally {

            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();

                }
            }
        }
    }


    public void taxConsolidation() {
        ViewObjectImpl tmplVouVO = getTmplVou();
        Row tmplVouRow = tmplVouVO.getCurrentRow();

        String vouId = tmplVouRow.getAttribute("TmplVouId").toString();
        Integer slocId = Integer.parseInt(tmplVouRow.getAttribute("TmplVouSlocId").toString());
        String orgId = tmplVouRow.getAttribute("TmplVouOrgId").toString();
        String HoOrgId = tmplVouRow.getAttribute("TmplHoOrgId").toString();
        String CldId = tmplVouRow.getAttribute("TmplCldId").toString();
        Integer vouTypId = Integer.parseInt(tmplVouRow.getAttribute("TmplVouTypeId").toString());
        // Integer vouSubTypId=Integer.parseInt(tmplVouRow.getAttribute("TmplVouSubTypeId").toString());
        Integer currIdSp = Integer.parseInt(tmplVouRow.getAttribute("TmplCurrIdSp").toString());
        System.out.println("CldId = " + CldId + " slocId = " + slocId + " orgId = " + orgId + " HoOrgId = " + HoOrgId +
                           " vouId = " + vouId);
        System.out.println("voucher typee id is====>>>" + vouTypId);
        // System.out.println("vouSubTypId typee id is====>>>"+vouSubTypId);
        System.out.println("currIdSp typee id is====>>>" + currIdSp);
        try {
            callStoredFunction(NUMBER, "FIN.FN_TMPL_VOU_TAX(?,?,?,?,?,?,?,?,?)", new Object[] {
                               CldId, slocId, 1, HoOrgId, orgId, vouId, vouTypId, 0, currIdSp
            });
        } catch (Exception e) {

            e.printStackTrace();
        }

        ViewObjectImpl glLines = getTmplVouLine();
        glLines.executeQuery();
    }


    /**
     * Container's getter for TmplVouTdsRule.
     * @return TmplVouTdsRule
     */
    public ViewObjectImpl getTmplVouTdsRule() {
        return (ViewObjectImpl) findViewObject("TmplVouTdsRule");
    }

    /**
     * Container's getter for TmplVouTdsRuleVL1.
     * @return TmplVouTdsRuleVL1
     */
    public ViewLinkImpl getTmplVouTdsRuleVL1() {
        return (ViewLinkImpl) findViewLink("TmplVouTdsRuleVL1");
    }

    /**
     * Container's getter for TmplVouTdsRuleLine.
     * @return TmplVouTdsRuleLine
     */
    public ViewObjectImpl getTmplVouTdsRuleLine() {
        return (ViewObjectImpl) findViewObject("TmplVouTdsRuleLine");
    }

    /**
     * Container's getter for TdsRuleVL1.
     * @return TdsRuleVL1
     */
    public ViewLinkImpl getTdsRuleVL1() {
        return (ViewLinkImpl) findViewLink("TdsRuleVL1");
    }

    public String processTdsForLine(Integer tdsRuleId) {
        ViewObjectImpl tmplVouVO = getTmplVou();
        Row tmplVouRow = tmplVouVO.getCurrentRow();

        String vouId = tmplVouRow.getAttribute("TmplVouId").toString();
        Integer slocId = Integer.parseInt(tmplVouRow.getAttribute("TmplVouSlocId").toString());
        String orgId = tmplVouRow.getAttribute("TmplVouOrgId").toString();
        String HoOrgId = tmplVouRow.getAttribute("TmplHoOrgId").toString();
        String CldId = tmplVouRow.getAttribute("TmplCldId").toString();
        String projectID=tmplVouRow.getAttribute("TmplPrjId").toString();
        ViewObjectImpl tmplVouLn = getTmplVouLine();
        Row tmplVouLnRow = tmplVouLn.getCurrentRow();
        /* Integer currSp = Integer.parseInt(tmplVouLnRow.getAttribute("TmplVouCurrIdSp").toString());
        Integer usrId = Integer.parseInt(tmplVouLnRow.getAttribute("UsrIdCreate").toString()); */
        Integer currSp = Integer.parseInt(tmplVouRow.getAttribute("TmplCurrIdSp").toString());
        Integer usrId = Integer.parseInt(tmplVouRow.getAttribute("UsrIdCreate").toString());


        ViewObjectImpl tmplVouTdsRuleVO = getTmplVouTdsRule();
        Row tmplVouTdsRulerow = tmplVouTdsRuleVO.getCurrentRow();


        /**Code change by AK- 15-03-2013*/

        this.setSum(new Number(0));
        this.setAs(new Number(0));
        setAsCr(new Number(0));

        RowSetIterator rit = tmplVouLn.createRowSetIterator(null);

        if (rit.first() != null && rit.first().getAttribute("TmplVouTxnTypTds").equals("Y") &&
            rit.first().getAttribute("TmplVouAmtTyp").equals("Dr")) {
            as = (Number) (rit.first().getAttribute("TmplVouAmtSp"));

        }
        while (rit.hasNext()) {
            Row lineRow = rit.next();
            if (lineRow.getAttribute("TmplVouTxnTypTds").equals("Y") &&
                lineRow.getAttribute("TmplVouAmtTyp").equals("Dr")) {
                as = as.add((Number) (lineRow.getAttribute("TmplVouAmtSp")));

            }
        }

        if (rit.first() != null && rit.first().getAttribute("TmplVouTxnTypTds").equals("Y") &&
            rit.first().getAttribute("TmplVouAmtTyp").equals("Cr")) {
            asCr = (Number) (rit.first().getAttribute("TmplVouAmtSp"));

        }
        while (rit.hasNext()) {
            Row lineRow = rit.next();
            if (lineRow.getAttribute("TmplVouTxnTypTds").equals("Y") &&
                lineRow.getAttribute("TmplVouAmtTyp").equals("Cr")) {
                asCr = asCr.add((Number) (lineRow.getAttribute("TmplVouAmtSp")));

            }
        }
        rit.closeRowSetIterator();

        if (as.compareTo(asCr) == 1) {
            setSum((Number) (as.minus(asCr)));
        } else if (as.compareTo(asCr) == -1) {

            setSum((Number) (asCr.minus(as)));
        }

        TmplVouVORowImpl tmplVouVORow = (TmplVouVORowImpl) tmplVouVO.getCurrentRow();
        Date tvouDt = tmplVouVORow.getTmplVouDt();
        Integer slNo = 0;
        tmplVouTdsRulerow.setAttribute("TmplTaxableAmt", Sum);
        tmplVouTdsRulerow.setAttribute("TmplVouSlNo", slNo);
        tmplVouTdsRulerow.setAttribute("TmplVouTdsAmtSp", 0);
        //  tmplVouTdsRulerow.setAttribute("TmplVouCurrIdSp", tmplVouLnRow.getAttribute("TmplVouCurrIdSp"));
        tmplVouTdsRulerow.setAttribute("TmplVouCurrIdSp", tmplVouRow.getAttribute("TmplCurrIdSp"));
        tmplVouTdsRulerow.setAttribute("UsrIdCreate", tmplVouRow.getAttribute("UsrIdCreate"));
        //tmplVouTdsRulerow.setAttribute("UsrIdCreate", tmplVouRow.getAttribute("UsrIdCreate"));
        Number finAmt = (Number) tmplVouTdsRulerow.getAttribute("TmplTaxableAmt");
        Date usrDt = (Date) Date.getCurrentDate();

        try {

            callStoredProcedure("FIN.INS_TEMPLATE_TDS_LINE(?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                CldId, slocId, HoOrgId, orgId,projectID, vouId, tvouDt, slNo, tdsRuleId, currSp, finAmt, usrId,
                                usrDt
            });

        } catch (SQLException ne) {

            ne.printStackTrace();

        }


        ViewObject tmplVouTdsRuleLineViewObject = this.findViewObject("TmplVouTdsRuleLine");
        tmplVouTdsRuleLineViewObject.refreshProperty("TmplVouTdsRuleLine");
        ViewObject tmplVouTdsRuleLine = getTmplVouTdsRuleLine();
        tmplVouTdsRuleLine.executeQuery();

        return null;


    }

    public void tdsConsolidation() {

        ViewObjectImpl tmplVouVO = getTmplVou();
        Row tmplVouRow = tmplVouVO.getCurrentRow();


        String vouId = tmplVouRow.getAttribute("TmplVouId").toString();
        Integer slocId = Integer.parseInt(tmplVouRow.getAttribute("TmplVouSlocId").toString());
        String orgId = tmplVouRow.getAttribute("TmplVouOrgId").toString();
        String HoOrgId = tmplVouRow.getAttribute("TmplHoOrgId").toString();
        String CldId = tmplVouRow.getAttribute("TmplCldId").toString();
        Integer vouTpye = Integer.parseInt(tmplVouRow.getAttribute("TmplVouTypeId").toString());
        Integer currId = Integer.parseInt(tmplVouRow.getAttribute("TmplCurrIdSp").toString());
        System.out.println("currency idd for tdddddddsssss=>" + currId);
        System.out.println("voucher type in tddddssss is==>" + vouTpye);
        System.out.println("CldId = " + CldId + " slocId = " + slocId + " orgId = " + orgId + " HoOrgId = " + HoOrgId +
                           " vouId = " + vouId);
        try {
            callStoredFunction(NUMBER, "FIN.FN_TMPL_VOU_TDS(?,?,?,?,?,?,?,?)", new Object[] {
                               CldId, slocId, HoOrgId, orgId, vouId, vouTpye, 0, currId
            });
        } catch (Exception e) {

            e.printStackTrace();
        }

        ViewObjectImpl glLines = getTmplVouLine();
        glLines.executeQuery();


    }

    /**
     * Container's getter for TmplVouOc1.
     * @return TmplVouOc1
     */
    public TmplVouOcVOImpl getTmplVouOc1() {
        return (TmplVouOcVOImpl) findViewObject("TmplVouOc1");
    }

    /**
     * Container's getter for TmplVouOcVL1.
     * @return TmplVouOcVL1
     */
    public ViewLinkImpl getTmplVouOcVL1() {
        return (ViewLinkImpl) findViewLink("TmplVouOcVL1");
    }

    public void tvouOtherCharges() {


        ViewObjectImpl tmplVouVO = getTmplVou();
        Row tmplVouRow = tmplVouVO.getCurrentRow();

        String vouId = tmplVouRow.getAttribute("TmplVouId").toString();
        Integer slocId = Integer.parseInt(tmplVouRow.getAttribute("TmplVouSlocId").toString());
        String orgId = tmplVouRow.getAttribute("TmplVouOrgId").toString();
        String HoOrgId = tmplVouRow.getAttribute("TmplHoOrgId").toString();
        String CldId = tmplVouRow.getAttribute("TmplCldId").toString();

        Number currRate = new Number(1);
        try {
            currRate = (Number) tmplVouRow.getAttribute("TmplVouCc");
        } catch (NumberFormatException nfe) {

            nfe.printStackTrace();
        }

        try {
            callStoredFunction(NUMBER, "FIN.FN_TMPL_VOU_OC(?,?,?,?,?,?)", new Object[] {
                               CldId, slocId, HoOrgId, orgId, vouId, currRate
            });
        } catch (Exception e) {
            // TODO: Add catch code

            e.printStackTrace();
        }

        ViewObjectImpl glLines = getTmplVouLine();
        glLines.executeQuery();
        getTmplVouOc1().executeQuery();
    }


    public void setGLBL_APP_USR(Integer GLBL_APP_USR) {
        this.GLBL_APP_USR = GLBL_APP_USR;
    }

    public Integer getGLBL_APP_USR() {
        return GLBL_APP_USR;
    }

    public void setGLBL_APP_LANG(Integer GLBL_APP_LANG) {
        this.GLBL_APP_LANG = GLBL_APP_LANG;
    }

    public Integer getGLBL_APP_LANG() {
        return GLBL_APP_LANG;
    }

    public void setGLBL_APP_USR_ROLE(Integer GLBL_APP_USR_ROLE) {
        this.GLBL_APP_USR_ROLE = GLBL_APP_USR_ROLE;
    }

    public Integer getGLBL_APP_USR_ROLE() {
        return GLBL_APP_USR_ROLE;
    }

    public void setGLBL_APP_USR_ORG(String GLBL_APP_USR_ORG) {
        this.GLBL_APP_USR_ORG = GLBL_APP_USR_ORG;
    }

    public String getGLBL_APP_USR_ORG() {
        return GLBL_APP_USR_ORG;
    }

    public void setGLBL_APP_USR_LANG(String GLBL_APP_USR_LANG) {
        this.GLBL_APP_USR_LANG = GLBL_APP_USR_LANG;
    }

    public String getGLBL_APP_USR_LANG() {
        return GLBL_APP_USR_LANG;
    }

    public void setGLBL_APP_SESS_DT(Timestamp GLBL_APP_SESS_DT) {
        this.GLBL_APP_SESS_DT = GLBL_APP_SESS_DT;
    }

    public Timestamp getGLBL_APP_SESS_DT() {
        return GLBL_APP_SESS_DT;
    }

    public void setAPP_PG_ID(String APP_PG_ID) {
        this.APP_PG_ID = APP_PG_ID;
    }

    public String getAPP_PG_ID() {
        return APP_PG_ID;
    }

    public void setGLBL_APP_VER(String GLBL_APP_VER) {
        this.GLBL_APP_VER = GLBL_APP_VER;
    }

    public String getGLBL_APP_VER() {
        return GLBL_APP_VER;
    }

    public void setGLBL_APP_REG(String GLBL_APP_REG) {
        this.GLBL_APP_REG = GLBL_APP_REG;
    }

    public String getGLBL_APP_REG() {
        return GLBL_APP_REG;
    }

    public void setGLBL_APP_DB_VER(String GLBL_APP_DB_VER) {
        this.GLBL_APP_DB_VER = GLBL_APP_DB_VER;
    }

    public String getGLBL_APP_DB_VER() {
        return GLBL_APP_DB_VER;
    }

    public void setGLBL_APP_SESSID(String GLBL_APP_SESSID) {
        this.GLBL_APP_SESSID = GLBL_APP_SESSID;
    }

    public String getGLBL_APP_SESSID() {
        return GLBL_APP_SESSID;
    }

    public void setGLBL_APP_SERV_LOC(Integer GLBL_APP_SERV_LOC) {
        this.GLBL_APP_SERV_LOC = GLBL_APP_SERV_LOC;
    }

    public Integer getGLBL_APP_SERV_LOC() {
        return GLBL_APP_SERV_LOC;
    }

    public void setGLBL_APP_CLD_ID(String GLBL_APP_CLD_ID) {
        this.GLBL_APP_CLD_ID = GLBL_APP_CLD_ID;
    }

    public String getGLBL_APP_CLD_ID() {
        return GLBL_APP_CLD_ID;
    }

    public void setGLBL_APP_HO_ORG_ID(String GLBL_APP_HO_ORG_ID) {
        this.GLBL_APP_HO_ORG_ID = GLBL_APP_HO_ORG_ID;
    }

    public String getGLBL_APP_HO_ORG_ID() {
        return GLBL_APP_HO_ORG_ID;
    }

    public void setbindvar(Integer UserId, Integer Application_Language, Integer UserRole, String Org, String CldId,
                           String User_Language, Timestamp Session_Date, String PageId, String Application_Version,
                           String Registered_To, String DB_Version, String SessionId, Integer SlocId, String HoOrgId)

        {
        setGLBL_APP_USR(UserId);
        setGLBL_APP_LANG(Application_Language);
        setGLBL_APP_USR_ROLE(UserRole);
        setGLBL_APP_USR_ORG(Org);
        setGLBL_APP_USR_LANG(User_Language);
        setGLBL_APP_SESS_DT(Session_Date);
        setAPP_PG_ID(PageId);
        setGLBL_APP_VER(Application_Version);
        setGLBL_APP_REG(Registered_To);
        setGLBL_APP_DB_VER(DB_Version);
        setGLBL_APP_SESSID(SessionId);
        setGLBL_APP_SERV_LOC(SlocId);
        setGLBL_APP_CLD_ID(CldId);
        setGLBL_APP_HO_ORG_ID(HoOrgId);


    }

    public void exceptionHandler() {
        System.out.println("Inside Handeler");
        StringBuilder msg = new StringBuilder();
        msg.append("<html><body><p><b>Failed to load content-Network Error</b></p>");
        msg.append("<p><b>Data Processing Failed-</b></p>");
        msg.append("<ul><li>Reload the page</li><li>Or close tab</li><li>Something went wrong-Contact ESS!</li></ul>");
        msg.append("</body></html>");
        FacesMessage message = new FacesMessage(msg.toString());
        message.setSeverity(FacesMessage.SEVERITY_WARN);
        FacesContext fc = FacesContext.getCurrentInstance();
        fc.addMessage(null, message);

    }

    /**
     * Container's getter for LovVouId.
     * @return LovVouId
     */
    public LovVouIdVOImpl getLovVouId() {
        return (LovVouIdVOImpl) findViewObject("LovVouId");
    }

    /**
     * Container's getter for LovLatestCurr.
     * @return LovLatestCurr
     */
    public LovLatestCurrVOImpl getLovLatestCurr() {
        return (LovLatestCurrVOImpl) findViewObject("LovLatestCurr");
    }

    /**
     * Container's getter for TmplSearch.
     * @return TmplSearch
     */
    public ViewObjectImpl getTmplSearch() {
        return (ViewObjectImpl) findViewObject("TmplSearch");
    }

    /**
     * Container's getter for Tmpl.
     * @return Tmpl
     */
    public TmplVOImpl getTmpl() {
        return (TmplVOImpl) findViewObject("Tmpl");
    }

    /**
     * Container's getter for FinCoa.
     * @return FinCoa
     */
    /*  public ViewObjectImpl getFinCoa() {
        return (ViewObjectImpl)findViewObject("FinCoa");
    } */

    /**
     * Container's getter for LovCog.
     * @return LovCog
     */
    public ViewObjectImpl getLovCog() {
        return (ViewObjectImpl) findViewObject("LovCog");
    }


    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String msg = valueExp.getValue(elContext).toString();
        return msg;
    }
    //  public static int VARCHAR = Types.VARCHAR;
    String add_mode = null;
    String edit_mode = null;
    String view_mode = null;
    String del_mode = null;

    protected Object callStoredFunction1(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.registerOutParameter(7, VARCHAR);
            st.registerOutParameter(8, VARCHAR);
            st.registerOutParameter(9, VARCHAR);
            st.registerOutParameter(10, VARCHAR);
            st.executeUpdate();
            try {
                setAdd_mode(st.getObject(7).toString());
                setEdit_mode((st.getObject(8).toString()));
                setView_mode(st.getObject(9).toString());
                setDel_mode(st.getObject(10).toString());
            } catch (NullPointerException e) {
                System.out.println(e);
                e.printStackTrace();
            }
            return st.getObject(1);

        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }


    public Integer on_load_page() {
        int count = 0;
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        Integer usr_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        callStoredFunction1(VARCHAR, "APP.fn_get_usr_doc_access_param(?,?,?,?,?,?,?,?,?)", new Object[] {
                            cld_id, sloc_id, org_id, 54, usr_id
        });
        String calledFrom = resolvEl("#{pageFlowScope.PARAM_PG_CALLED}").toString();
        if (add_mode.equalsIgnoreCase("Y") == false && add_mode.equalsIgnoreCase("N") == false) {
            count = 1;
        } else if (edit_mode.equalsIgnoreCase("Y") == false && edit_mode.equalsIgnoreCase("N") == false) {
            count = 1;
        } else if (view_mode.equalsIgnoreCase("Y") == false && view_mode.equalsIgnoreCase("N") == false) {
            count = 1;
        } else if (del_mode.equalsIgnoreCase("Y") == false && del_mode.equalsIgnoreCase("N") == false) {
            count = 1;
        } else if (calledFrom.equalsIgnoreCase("P") == false && calledFrom.equalsIgnoreCase("M") == false) {
            count = 1;
        }
        Map paramMap = RequestContext.getCurrentInstance().getPageFlowScope();
        paramMap.put("PARAM_PG_ADD_MD", add_mode);
        paramMap.put("PARAM_PG_EDIT_MD", edit_mode);
        paramMap.put("PARAM_PG_VIEW_MD", view_mode);
        paramMap.put("PARAM_PG_DEL_MD", del_mode);
        String addMode = resolvEl("#{pageFlowScope.PARAM_PG_ADD_MD}").toString();
        String editMode = resolvEl("#{pageFlowScope.PARAM_PG_EDIT_MD}").toString();
        String viewMode = resolvEl("#{pageFlowScope.PARAM_PG_VIEW_MD}").toString();
        String deleteMode = resolvEl("#{pageFlowScope.PARAM_PG_DEL_MD}").toString();
        return count;
    }

    public void setAdd_mode(String add_mode) {
        this.add_mode = add_mode;
    }

    public String getAdd_mode() {
        return add_mode;
    }

    public void setEdit_mode(String edit_mode) {
        this.edit_mode = edit_mode;
    }

    public String getEdit_mode() {
        return edit_mode;
    }

    public void setView_mode(String view_mode) {
        this.view_mode = view_mode;
    }

    public String getView_mode() {
        return view_mode;
    }

    public void setDel_mode(String del_mode) {
        this.del_mode = del_mode;
    }

    public String getDel_mode() {
        return del_mode;
    }

    public void setParameters(String p_cld_id, String p_org_id, String p_Ho_Org_id, int p_sloc_id) {
        this.getTmplSearch().executeQuery();
        TmplVOImpl impl = (TmplVOImpl) this.getTmpl();
        this.getLovVouId().executeQuery();
        impl.setBindCldId(null);
        impl.setBindHoOrgId(null);
        //impl.setBindOrgId(p_org_id);
        impl.setBindSlocId(null);
        impl.setBindVouId(null);
        impl.setBindCoaId(null);
        impl.setBindCogId(null);
        impl.setBindFromDt(null);
        impl.setBindNaId(null);
        impl.setBindTmplNm(null);
        impl.setBindTmplType(null);
        impl.setBindToDt(null);

        impl.executeQuery();
        //setParameterForLovCoa(p_cld_id, p_org_id, p_Ho_Org_id, p_sloc_id);

    }

    public void setParameterForLovCoa(String p_cld_id, String p_org_id, String p_Ho_Org_id, int p_sloc_id) {
        ViewObjectImpl coaNew = this.getLovCoa1();
        coaNew.setNamedWhereClauseParam("BindHoOrgId", p_Ho_Org_id);
        coaNew.setNamedWhereClauseParam("BindCldId", p_cld_id);
        coaNew.setNamedWhereClauseParam("BindSlocId", p_sloc_id);
        coaNew.setNamedWhereClauseParam("BindOrgId", p_org_id);

        coaNew.executeQuery();

    }

    public Integer coaNameValidator(String coaName, String voucherId) {
        System.out.println("coaName in Am Validator----------------->>>>> =" + coaName +
                           " <<<<<<----------------and voucher  is =" + voucherId);
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        String HoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();


        ViewObjectImpl coavo = this.getLovCoa1();
        coavo.setNamedWhereClauseParam("BindOrgId", org_id);
        coavo.setNamedWhereClauseParam("BindHoOrgId", HoOrgId);
        coavo.setNamedWhereClauseParam("BindCldId", cld_id);
        coavo.setNamedWhereClauseParam("BindSlocId", sloc_id);
        //coavo.executeQuery();


        ViewCriteria criteria = this.getLovCoa1().getViewCriteria("LovCoaVOCriteria1");
        this.getLovCoa1().applyViewCriteria(criteria);
        this.getLovCoa1().setNamedWhereClauseParam("BindCoaNm", coaName.toUpperCase());
        this.getLovCoa1().executeQuery();

        //Row[] row = coavo.getFilteredRows("CoaNm", coaName.toUpperCase());
        Row[] row = this.getLovCoa1().getAllRowsInRange();

        System.out.println("row.lengthhhhhhhhhhh=" + row.length);
        if (row.length > 0) {
            System.out.println("in first if where row.length is greater than 0" + row.length);
            Integer coaId = (Integer) row[0].getAttribute("CoaId");
            System.out.println("coaId =" + coaId);
            if (coaId != null) {
                System.out.println("in second if whhere coaid is not equal to null" + coaId);
                ViewObjectImpl tmpl = this.getTmplVouLine();
                Row[] filteredRows = tmpl.getFilteredRows("TmplVouCoaId", coaId);
                if (filteredRows.length > 0) {
                    System.out.println("in third if where filter rows are =" + filteredRows.length);
                    return filteredRows.length;
                }
            }
        }
        System.out.println("before returning false");
        return 0;
    }

    /**
     * Container's getter for LovCoa1.
     * @return LovCoa1
     */
    public LovCoaVOImpl getLovCoa1() {
        return (LovCoaVOImpl) findViewObject("LovCoa1");
    }

    /**
     * Container's getter for LovCoaForHd1.
     * @return LovCoaForHd1
     */
    public LovCoaForHdVOImpl getLovCoaForHd1() {
        return (LovCoaForHdVOImpl) findViewObject("LovCoaForHd1");
    }

    /**
     * Container's getter for LovCoaNew2.
     * @return LovCoaNew2
     */
    public LovCoaNewVOImpl getLovCoaNew2() {
        return (LovCoaNewVOImpl) findViewObject("LovCoaNew2");
    }

    /**
     * Container's getter for UserLovVO1.
     * @return UserLovVO1
     */
    public ViewObjectImpl getUserLovVO1() {
        return (ViewObjectImpl) findViewObject("UserLovVO1");
    }

    /**
     * Container's getter for LovCoaForEditInLineItem1.
     * @return LovCoaForEditInLineItem1
     */
    public ViewObjectImpl getLovCoaForEditInLineItem1() {
        return (ViewObjectImpl) findViewObject("LovCoaForEditInLineItem1");
    }

    /**
     * Container's getter for TmplVouOc2.
     * @return TmplVouOc2
     */
    public TmplVouOcVOImpl getTmplVouOc2() {
        return (TmplVouOcVOImpl) findViewObject("TmplVouOc2");
    }

    public String checkVoucherDate(Date vouDt) {
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        String org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        String HoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        String valid = callStoredFunction(VARCHAR, "APP.fn_get_fy_stat_for_txn (?,?,?)", new Object[] {
                                          cld_id, org_id, vouDt }).toString();
        if (valid != null)
            return valid;
        else
            return "Y";
    }

    public AppCostCenterServiceAMImpl getAppAM() {
            String appModuleName = "appCostCenterSevice.model.service.AppCostCenterServiceAM";
            String appModuleConfig = "AppCostCenterServiceAMLocal";
            return (AppCostCenterServiceAMImpl) Configuration.createRootApplicationModule(appModuleName, appModuleConfig);
        }

    public void releaseAppAM(AppCostCenterServiceAMImpl appCostCenter) {
          Configuration.releaseRootApplicationModule((ApplicationModule) appCostCenter, true);
      }
    @Override
        protected void finalize() throws Throwable {

            releaseAppAM(getAppAM());

            super.finalize();
        }
    
    /**
       * Method which will let us know whether cost center is applicable for this current document or not
       */
      public Boolean chkCcApplicableOrNot() {
        System.out.println("chkCcApplicableOrNot method called");
          Boolean val = false;
          ViewObjectImpl appCcDocVO1 = this.getAppCcDocVO();
          appCcDocVO1.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
          appCcDocVO1.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
          appCcDocVO1.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
          appCcDocVO1.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
          appCcDocVO1.setNamedWhereClauseParam("BindDocId", 54);
          appCcDocVO1.executeQuery();
          Row[] allRowsInRange = appCcDocVO1.getAllRowsInRange();
          
          if (allRowsInRange.length > 0) {
              val = true;
          }

          return val;
      }

    /**
        * Method which will be called when user click on generate Cost Ceneter based on header wise
        */
       public void generateCostCenterHeaderWise() {
        System.out.println("generateCostCenterHeaderWise method called");
           if (chkCcApplicableOrNot()) {
               AppCostCenterServiceAMImpl amCC = getAppAM();
               /*
           * @param cldId
           * @param slocId
           * @param hoOrgId
           * @param orgId
           * @param tempId
           * @param tempSrc
           * @param docId
           * @param usrId
           * @param tempCcId
           * @param amount
           * @param pCcLevel1
           * @param pCcLevel2
           * @param pCcLevel3
           * @param pCcLevel4
           * @param pCcLevel5
           */
               ViewObjectImpl impl = this.getTmplVou();
               Row currentRow = impl.getCurrentRow();

               if (currentRow != null) {
                   declareGlblValuesForCC();
                   amCC.generateCostCenterApp(EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                              EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                              currentRow.getAttribute("TmplVouId").toString(), "H", 54,
                                              EbizParams.GLBL_APP_USR(), currentRow.getAttribute("TmplVouId").toString(),
                                              new Number(0), (String) resolvElO("#{pageFlowScope.P_CC_LEVEL1}"),
                                              (String) resolvElO("#{pageFlowScope.P_CC_LEVEL2}"),
                                              (String) resolvElO("#{pageFlowScope.P_CC_LEVEL3}"),
                                              (String) resolvElO("#{pageFlowScope.P_CC_LEVEL4}"),
                                              (String) resolvElO("#{pageFlowScope.P_CC_LEVEL5}"));

               }
           }
       }


    /**
         * Method which will set Global Parameter Values and will be called before opening AppCostCenterServicesTF
         */
        public void declareGlblValuesForCC() {
 System.out.println("declarable glbl value fir cost center method called");
            ViewObjectImpl appCcVwVO1 = this.getAppCcVwVO();
            appCcVwVO1.setRangeSize(-1);
            appCcVwVO1.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
            appCcVwVO1.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
            appCcVwVO1.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
            appCcVwVO1.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
            appCcVwVO1.setNamedWhereClauseParam("BindDocId", 54);
            Row currentRow = this.getTmplVou().getCurrentRow();
            if (currentRow != null) {
                for (int i = 1; i <= 5; i++) {
                    appCcVwVO1.setNamedWhereClauseParam("BindCcPos", i);
                    appCcVwVO1.executeQuery();
                    Row[] allRowsInRange = appCcVwVO1.getAllRowsInRange();
                    if (allRowsInRange.length > 0) {
                        String columnName = null;
                        for (Row r : allRowsInRange) {
                            AttributeDef[] attributeDef = this.getTmplVou().getAttributeDefs();
                            for (int j = 0; j < attributeDef.length; j++) {
                                /*  System.out.println("j value is " + attributeDef[j].getColumnName());
                                System.out.println("------------ null value is " + r.getAttribute("DbobColNm"));
                                System.out.println("attributeDef[j].getColumnName().equalsIgnoreCase(r.getAttribute(\"DbobColNm\").toString()) " +
                                                   attributeDef[j].getColumnName().equals(r.getAttribute("DbobColNm")));
                                */
                                if (attributeDef[j].getColumnName() != null &&
                                    attributeDef[j].getColumnName().equals(r.getAttribute("DbobColNm"))) {
                                    columnName = attributeDef[j].getName();
                                }
                            }
                            System.out.println("Column Name is " + columnName);

                            if (columnName != null) {

                                System.out.println("i is " + i + " Cost center Value is " +
                                                   currentRow.getAttribute(columnName));
                                RequestContext.getCurrentInstance().getPageFlowScope().put("P_CC_LEVEL" + i,
                                                                                           currentRow.getAttribute(columnName));
                            }
                        }
                    } else {
                        System.out.println("i is" + i + " cost center value is null");
                        RequestContext.getCurrentInstance().getPageFlowScope().put("P_CC_LEVEL" + i, null);
                    }
                }
            }
        }
    
    public void deleteCostCenterItem() {
        System.out.println("delete cost center utem method called");
           if (chkCcApplicableOrNot()) {
               System.out.println("Inside delete method");

               ViewObjectImpl impl = this.getTmplVouLine();
               Row currentRow = impl.getCurrentRow();
               if (currentRow != null && currentRow.getAttribute("CcId") != null) {
                   AppCostCenterServiceAMImpl amCC = getAppAM();
                   System.out.println("Inside Am after cresting object");
                   if (amCC != null) {
                       declareGlblValuesForCC();
                       System.out.println("------------------ Not null");
                       amCC.deleteCCLines(EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                               EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                               currentRow.getAttribute("TmplVouId").toString(), "L", 54,
                                               EbizParams.GLBL_APP_USR(), currentRow.getAttribute("CcId").toString(),
                                               new Number(0),
                                               (String) resolvElO("#{pageFlowScope.P_CC_LEVEL1}"),
                                               (String) resolvElO("#{pageFlowScope.P_CC_LEVEL2}"),
                                               (String) resolvElO("#{pageFlowScope.P_CC_LEVEL3}"),
                                               (String) resolvElO("#{pageFlowScope.P_CC_LEVEL4}"),
                                               (String) resolvElO("#{pageFlowScope.P_CC_LEVEL5}"));
                   }
               }
               System.out.println("After calling delete method");
           }
       }
    public void updateCostCenterAmt() {
        System.out.println("update cost center amount method called");
           if (chkCcApplicableOrNot()) {
               System.out.println("Inside cost ceneter update amount method");
               ViewObjectImpl impl = this.getTmplVouLine();
               Row currentRow = impl.getCurrentRow();
               if (currentRow != null && currentRow.getAttribute("CcId") != null &&
                   currentRow.getAttribute("TmplVouAmtSp") != null) {
                   AppCostCenterServiceAMImpl amCC = getAppAM();
                   System.out.println("Inside Am after cresting object");
                   if (amCC != null) {
                       declareGlblValuesForCC();
                       System.out.println("------------------ Not null");
                       Boolean amount =
                           amCC.updateCCAmount(EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                               EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                               currentRow.getAttribute("TmplVouId").toString(), "L", 54,
                                               EbizParams.GLBL_APP_USR(), currentRow.getAttribute("CcId").toString(),
                                               (Number) currentRow.getAttribute("TmplVouAmtSp"),
                                               (String) resolvElO("#{pageFlowScope.P_CC_LEVEL1}"),
                                               (String) resolvElO("#{pageFlowScope.P_CC_LEVEL2}"),
                                               (String) resolvElO("#{pageFlowScope.P_CC_LEVEL3}"),
                                               (String) resolvElO("#{pageFlowScope.P_CC_LEVEL4}"),
                                               (String) resolvElO("#{pageFlowScope.P_CC_LEVEL5}"));
                       if (!amount) {
                           ADFModelUtils.showFormattedFacesMessage("Update Cost Center",
                                                                   "Please Update Cost Center Values.",
                                                                   FacesMessage.SEVERITY_ERROR);
                       }
                   }
               }
               System.out.println("After calling Update method");
           }
       }


    /**
     * Container's getter for AppCcDocVO1.
     * @return AppCcDocVO1
     */
    public ViewObjectImpl getAppCcDocVO() {
        return (ViewObjectImpl) findViewObject("AppCcDocVO");
    }

    /**
     * Container's getter for AppCcVwVO1.
     * @return AppCcVwVO1
     */
    public ViewObjectImpl getAppCcVwVO() {
        return (ViewObjectImpl) findViewObject("AppCcVwVO");
    }
    public Object resolvElO(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        Object msg = valueExp.getValue(elContext);
        return msg;
    }
}
