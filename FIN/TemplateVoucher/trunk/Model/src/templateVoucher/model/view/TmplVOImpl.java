package templateVoucher.model.view;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import oracle.jbo.ViewCriteria;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.QueryCollection;
import oracle.jbo.server.SQLBuilder;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.ViewRowSetImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Jun 04 12:12:26 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TmplVOImpl extends ViewObjectImpl {
    /**
     * This is the default constructor (do not remove).
     */
    public TmplVOImpl() {
    }


    /**
     * Returns the bind variable value for BindVouId.
     * @return bind variable value for BindVouId
     */
    public String getBindVouId() {
        return (String)getNamedWhereClauseParam("BindVouId");
    }

    /**
     * Sets <code>value</code> for bind variable BindVouId.
     * @param value value to bind as BindVouId
     */
    public void setBindVouId(String value) {
        setNamedWhereClauseParam("BindVouId", value);
    }


    /**
     * Returns the bind variable value for BindSlocId.
     * @return bind variable value for BindSlocId
     */
    public Integer getBindSlocId() {
        return (Integer)getNamedWhereClauseParam("BindSlocId");
    }

    /**
     * Sets <code>value</code> for bind variable BindSlocId.
     * @param value value to bind as BindSlocId
     */
    public void setBindSlocId(Integer value) {
        setNamedWhereClauseParam("BindSlocId", value);
    }

    /**
     * Returns the bind variable value for BindHoOrgId.
     * @return bind variable value for BindHoOrgId
     */
    public String getBindHoOrgId() {
        return (String)getNamedWhereClauseParam("BindHoOrgId");
    }

    /**
     * Sets <code>value</code> for bind variable BindHoOrgId.
     * @param value value to bind as BindHoOrgId
     */
    public void setBindHoOrgId(String value) {
        setNamedWhereClauseParam("BindHoOrgId", value);
    }

    /**
     * Returns the bind variable value for BindOrgId.
     * @return bind variable value for BindOrgId
     */
    public String getBindOrgId() {
        return (String)getNamedWhereClauseParam("BindOrgId");
    }

    /**
     * Sets <code>value</code> for bind variable BindOrgId.
     * @param value value to bind as BindOrgId
     */
    public void setBindOrgId(String value) {
        setNamedWhereClauseParam("BindOrgId", value);
    }

    /**
     * Returns the bind variable value for BindFromDt.
     * @return bind variable value for BindFromDt
     */
    public Date getBindFromDt() {
        return (Date)getNamedWhereClauseParam("BindFromDt");
    }

    /**
     * Sets <code>value</code> for bind variable BindFromDt.
     * @param value value to bind as BindFromDt
     */
    public void setBindFromDt(Date value) {
        setNamedWhereClauseParam("BindFromDt", value);
    }

    /**
     * Returns the bind variable value for BindToDt.
     * @return bind variable value for BindToDt
     */
    public Date getBindToDt() {
        return (Date)getNamedWhereClauseParam("BindToDt");
    }

    /**
     * Sets <code>value</code> for bind variable BindToDt.
     * @param value value to bind as BindToDt
     */
    public void setBindToDt(Date value) {
        setNamedWhereClauseParam("BindToDt", value);
    }

    /**
     * Returns the bind variable value for BindCoaId.
     * @return bind variable value for BindCoaId
     */
    public Integer getBindCoaId() {
        return (Integer)getNamedWhereClauseParam("BindCoaId");
    }

    /**
     * Sets <code>value</code> for bind variable BindCoaId.
     * @param value value to bind as BindCoaId
     */
    public void setBindCoaId(Integer value) {
        setNamedWhereClauseParam("BindCoaId", value);
    }

    /**
     * Returns the bind variable value for BindCogId.
     * @return bind variable value for BindCogId
     */
    public String getBindCogId() {
        return (String)getNamedWhereClauseParam("BindCogId");
    }

    /**
     * Sets <code>value</code> for bind variable BindCogId.
     * @param value value to bind as BindCogId
     */
    public void setBindCogId(String value) {
        setNamedWhereClauseParam("BindCogId", value);
    }

    /**
     * Returns the bind variable value for BindNaId.
     * @return bind variable value for BindNaId
     */
    public Number getBindNaId() {
        return (Number)getNamedWhereClauseParam("BindNaId");
    }

    /**
     * Sets <code>value</code> for bind variable BindNaId.
     * @param value value to bind as BindNaId
     */
    public void setBindNaId(Number value) {
        setNamedWhereClauseParam("BindNaId", value);
    }

    /**
     * Returns the bind variable value for BindTmplNm.
     * @return bind variable value for BindTmplNm
     */
    public String getBindTmplNm() {
        return (String)getNamedWhereClauseParam("BindTmplNm");
    }

    /**
     * Sets <code>value</code> for bind variable BindTmplNm.
     * @param value value to bind as BindTmplNm
     */
    public void setBindTmplNm(String value) {
        setNamedWhereClauseParam("BindTmplNm", value);
    }

    /**
     * Returns the bind variable value for BindCldId.
     * @return bind variable value for BindCldId
     */
    public String getBindCldId() {
        return (String)getNamedWhereClauseParam("BindCldId");
    }

    /**
     * Sets <code>value</code> for bind variable BindCldId.
     * @param value value to bind as BindCldId
     */
    public void setBindCldId(String value) {
        setNamedWhereClauseParam("BindCldId", value);
    }

    /**
     * Returns the bind variable value for BindTmplType.
     * @return bind variable value for BindTmplType
     */
    public Integer getBindTmplType() {
        return (Integer)getNamedWhereClauseParam("BindTmplType");
    }

    /**
     * Sets <code>value</code> for bind variable BindTmplType.
     * @param value value to bind as BindTmplType
     */
    public void setBindTmplType(Integer value) {
        setNamedWhereClauseParam("BindTmplType", value);
    }
    
   /*  protected boolean showSql = true;
       @Override
          public long getEstimatedRowCount() {
              long init = System.currentTimeMillis();
              long counter = super.getEstimatedRowCount();
              long end = System.currentTimeMillis() - init;
              
              if (showSql)
                  System.out.println("VO: " + this.getName() + ", from AM: " + this.getApplicationModule().getName() + ", executes SQL Count in: " + end + " (miliseconds)");
              
              return counter;
          } */
    /*   @Override
      protected void executeQueryForCollection(Object qc, Object[] params, int noUserParams) {
          short fetchSize = 10;
           if (this.getRangeSize() > 0) {
              fetchSize = ((short)(this.getRangeSize() + 3));
          }
          if (this.getRangeSize() < 10) {
              System.out.println("Potentially small range size : " + this.getRangeSize() + " for table VO : " +
                          this.getViewObject().getDefFullName());
              fetchSize = 10;
          }

          System.out.println("Original fetch size : " + this.getFetchSize() + ", Updated fetch size : " + fetchSize +
                      " for : " + this.getViewObject().getDefFullName());
          if (fetchSize > this.getFetchSize()) {
              System.out.println("Updating fetch size : " + fetchSize);
              this.setFetchSize(fetchSize);
          } else {
              System.out.println("Current fetch size : " + this.getFetchSize() + " for : " +
                          this.getViewObject().getDefFullName());
          }

          long init = System.currentTimeMillis();
          super.executeQueryForCollection(qc, params, noUserParams);
          long end = System.currentTimeMillis() - init;

          if (showSql)
              System.out.println("VO: " + this.getName() + ", from AM: " + this.getApplicationModule().getName() +
                            ", executes SQL in: " + end + " (miliseconds)");
      }
      @Override */
      /*    protected void bindParametersForCollection(QueryCollection queryCollection, Object[] object, PreparedStatement preparedStatement) throws SQLException, SQLException {
             // TODO Implement this method
             if (showSql)
            logQueryStatementAndBindParameters(queryCollection, object);
            
             super.bindParametersForCollection(queryCollection, object, preparedStatement);
         } */
          
         /**
          * method used to introspect the query produced at runtime by the vo.
          * @param qc
          * @param params
          */
     /*   private void logQueryStatementAndBindParameters(QueryCollection qc, Object[] params) {
             String vrsiName = null;
             if (qc != null) {
                 ViewRowSetImpl vrsi = qc.getRowSetImpl();
                 vrsiName = vrsi.isDefaultRS() ? "<Default>" : vrsi.getName();
             }
             String voName = getName();
             String voDefName = getDefFullName();
             if (qc != null) {
                 System.out.println("----[Exec query for VO=" + voName + ", RS=" + vrsiName + "]----");
             } else {
                 System.out.println("----[Exec COUNT query for VO=" + voName + "]----");
             }
             System.out.println("VO Definition Name = {0}"+ voDefName);

             String dbVCs = appliedCriteriaString(ViewCriteria.CRITERIA_MODE_QUERY);
             if (!dbVCs.isEmpty()) {
                 System.out.println("Applied Database VCs = {0} "+ dbVCs);
             }

             String memVCs = appliedCriteriaString(ViewCriteria.CRITERIA_MODE_CACHE);
             if (!memVCs.isEmpty()) {
                 System.out.println("Applied In-Memory VCs = {0} "+ memVCs);
             }

             String bothVCs = appliedCriteriaString(ViewCriteria.CRITERIA_MODE_QUERY | ViewCriteria.CRITERIA_MODE_CACHE);
             if (!bothVCs.isEmpty()) {
                 System.out.println("Applied 'Both' VCs = {0}"+ bothVCs);
             }

             System.out.println("Generated query : {0}"+ getQuery());

             if (params != null) {
                 if (getBindingStyle() == SQLBuilder.BINDING_STYLE_ORACLE_NAME) {
                     Map<String, Object> bindsMap = new HashMap<String, Object>(params.length);
                     for (Object param : params) {
                         Object[] nameValue = (Object[])param;
                         String name = (String)nameValue[0];
                         Object value = nameValue[1];
                         bindsMap.put(name, value);
                     }
                     System.out.println("Bind Variables : {0}"+ bindsMap);
                 }
             }
         } */

       
    /* int counter=0;
        protected ViewRowImpl createRowFromResultSet(Object object, ResultSet resultSet) {
            counter++;
        ViewRowImpl row = super.createRowFromResultSet(object, resultSet);
       System.out.println("Row fetched with key: " + row.getKey() + ", for VO: " + this.getName() + " row count: " + counter);

        return row;
        } */

        /*  private String appliedCriteriaString(int mode) {
             ViewCriteria[] appliedCriterias = getApplyViewCriterias(mode);
             String result = "";
             if (appliedCriterias != null && appliedCriterias.length > 0) {
                 List<String> list = new ArrayList<String>(appliedCriterias.length);
                 for (ViewCriteria vc : appliedCriterias) {
                     list.add(vc.getName());
                 }
                 result = list.toString();
             }
             return result;
         } */

    /**
     * Returns the bind variable value for BindPrjId.
     * @return bind variable value for BindPrjId
     */
    public String getBindPrjId() {
        return (String) getNamedWhereClauseParam("BindPrjId");
    }

    /**
     * Sets <code>value</code> for bind variable BindPrjId.
     * @param value value to bind as BindPrjId
     */
    public void setBindPrjId(String value) {
        setNamedWhereClauseParam("BindPrjId", value);
    }
}
