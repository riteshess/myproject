package templateVoucher.model.view;

import java.sql.ResultSet;

import java.util.Iterator;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewObject;
import oracle.jbo.server.TransactionEvent;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.ViewRowSetImpl;

import templateVoucher.model.entity.TmplVouOcEOImpl;
import templateVoucher.model.view.common.TmplVouOcVO;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Mar 19 12:18:11 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TmplVouOcVOImpl extends ViewObjectImpl implements TmplVouOcVO {
    /**
     * This is the default constructor (do not remove).
     */
    public TmplVouOcVOImpl() {
    }

    /**
     * executeQueryForCollection - overridden for custom java data source support.
     */
    protected void executeQueryForCollection(Object qc, Object[] params, int noUserParams) {
        super.executeQueryForCollection(qc, params, noUserParams);
    }

    /**
     * hasNextForCollection - overridden for custom java data source support.
     */
    protected boolean hasNextForCollection(Object qc) {
        boolean bRet = super.hasNextForCollection(qc);
        return bRet;
    }

    /**
     * createRowFromResultSet - overridden for custom java data source support.
     */
    /*  int counter=0;
         protected ViewRowImpl createRowFromResultSet(Object object, ResultSet resultSet) {
             counter++;
         ViewRowImpl row = super.createRowFromResultSet(object, resultSet);
        System.out.println("Row fetched with key: " + row.getKey() + ", for VO: " + this.getName() + " row count: " + counter);

         return row;
         } */

    /**
     * getQueryHitCount - overridden for custom java data source support.
     */
    public long getQueryHitCount(ViewRowSetImpl viewRowSet) {
        long value = super.getQueryHitCount(viewRowSet);
        return value;
    }
    /*  public void aftercommit(TransactionEvent transactionEvent){
            executeQuery();
        }*/
    public void afterRemove(TransactionEvent transactionEvent) {
        executeQuery();
    }

    /**
     * createRowFromResultSet - overridden for custom java data source support.
     */
    @Override
    protected ViewRowImpl createRowFromResultSet(Object qc, ResultSet resultSet) {
        ViewRowImpl value = super.createRowFromResultSet(qc, resultSet);
        return value;
    }

    /**
     * getCappedQueryHitCount - overridden for custom java data source support.
     */
    @Override
    public long getCappedQueryHitCount(ViewRowSetImpl viewRowSet, Row[] masterRows, long oldCap, long cap) {
        long value = super.getCappedQueryHitCount(viewRowSet, masterRows, oldCap, cap);
        return value;
    }

    public void revertOrremoveRowValues() {
        ViewObject ocvo = this;
        RowSetIterator ocvoitr = ocvo.createRowSetIterator(null);
        while (ocvoitr.hasNext()) {
            Row nextRow = ocvoitr.next();
            System.out.println("row statusssss of the rowww is=====" + nextRow.getAttribute("transRowStatus"));
            if (nextRow.getAttribute("transRowStatus") != null) {
                Integer rowStatus = (Integer) nextRow.getAttribute("transRowStatus");
                if (rowStatus == 2) {
                   System.out.println("Modified Rows-" + nextRow.getAttribute("tranTmplVouCoaId"));
                    revertChangesCurrentRow(nextRow);
                } else if (rowStatus == 0) {
                    System.out.println("New Row Removed");
                    nextRow.remove();
                }

            }

        }
        this.executeQuery();
    }

    public void revertChangesCurrentRow(Row curRow) {
        if (curRow != null) {
            curRow.refresh(Row.REFRESH_UNDO_CHANGES | Row.REFRESH_WITH_DB_FORGET_CHANGES);
        }
    }

    public void undoDelete() {
        Iterator iterator = getEntityDef(0).getAllEntityInstancesIterator(getDBTransaction());
        while (iterator.hasNext()) {
            TmplVouOcEOImpl test = (TmplVouOcEOImpl) iterator.next();
            if (test.getEntityState() == test.STATUS_DELETED) {
                test.revert();
            }
        }
        executeQuery();
    }
}
