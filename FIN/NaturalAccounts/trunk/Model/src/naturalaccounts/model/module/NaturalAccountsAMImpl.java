package naturalaccounts.model.module;

import java.sql.CallableStatement;
import java.sql.SQLException;

import java.sql.Types;

import java.util.HashSet;
import java.util.Map;

import java.util.Set;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import naturalaccounts.model.module.common.NaturalAccountsAM;
import naturalaccounts.model.views.FinAccNaVOImpl;

import naturalaccounts.model.views.FinAccNaVORowImpl;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.apache.myfaces.trinidad.context.RequestContext;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Jan 09 17:52:04 IST 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class NaturalAccountsAMImpl extends ApplicationModuleImpl implements NaturalAccountsAM {
    
    public static int VARCHAR = Types.VARCHAR;
    String add_mode = null;
    String edit_mode = null;
    String view_mode = null;
    String del_mode = null;
    
    FinAccNaVORowImpl r=null;       //It is used to save current finaccNa row before  goint to coaAdd task flow;
    
    /**
     * This is the default constructor (do not remove).
     */
    public NaturalAccountsAMImpl() {
    }

    /**
     * Container's getter for FinAccNa1.
     * @return FinAccNa1
     */
    public FinAccNaVOImpl getFinAccNa1() {
    FinAccNaVOImpl vo  = (FinAccNaVOImpl)findViewObject("FinAccNa1");
            
        return vo;
    }

    /**
     * Container's getter for Coa.
     * @return Coa
     */
    public ViewObjectImpl getCoa() {
        return (ViewObjectImpl)findViewObject("Coa");
    }

    /**
     * Container's getter for AccNameLOV1.
     * @return AccNameLOV1
     */
    public ViewObjectImpl getAccNameLOV1() {
        return (ViewObjectImpl)findViewObject("AccNameLOV1");
    }
    
    
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            System.out.println("body Function Try block");
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            System.out.println(stmt);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.registerOutParameter(7, VARCHAR);
            st.registerOutParameter(8, VARCHAR);
            st.registerOutParameter(9, VARCHAR);
            st.registerOutParameter(10, VARCHAR);
            System.out.println("b4  executeUpdate()");
            st.executeUpdate();
            try {
                System.out.println("Aftr  executeUpdate(),inside try block");
                setAdd_mode(st.getObject(7).toString());
                System.out.println(st.getObject(7));
                setEdit_mode((st.getObject(8).toString()));
                System.out.println(st.getObject(8));
                setView_mode(st.getObject(9).toString());
                System.out.println(st.getObject(9));
                setDel_mode(st.getObject(10).toString());
                System.out.println(st.getObject(10));
            } catch (NullPointerException e) {
                System.out.println(e);
                e.printStackTrace();
            }
            System.out.println(st.getObject(1));
            return st.getObject(1);

        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();

                }
            }
        }
    }
    
    public Integer on_load_page()
               {  int count = 0;
                  System.out.println("------lklkl");
               String cld_id =  resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString(); 
               Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString()); 
               String org_id =  resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString(); 
               Integer usr_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString()); 
               System.out.println("function called cldId:" +cld_id+"  sloc_id:"+sloc_id+"  org_id:"+org_id+" "+1+"  usr_id:"+usr_id);
               callStoredFunction(VARCHAR,"App.fn_get_usr_doc_access_param(?,?,?,?,?,?,?,?,?)",
                                          new Object[] { cld_id, sloc_id, org_id, 1,usr_id});
               System.out.println("function called cldId:" +cld_id+"  sloc_id:"+sloc_id+"  org_id:"+org_id+" "+1+"  usr_id:"+usr_id);
               String calledFrom =  resolvEl("#{pageFlowScope.PARAM_PG_CALLED}").toString(); 
               if(add_mode.equalsIgnoreCase("Y") == false && add_mode.equalsIgnoreCase("N") == false)
               {            count = 1;
                   }
               else if(edit_mode.equalsIgnoreCase("Y") == false && edit_mode.equalsIgnoreCase("N") == false)
               {
                   count = 1;
                   }
               else if(view_mode.equalsIgnoreCase("Y") == false && view_mode.equalsIgnoreCase("N") == false)
               {
                  count = 1; 
                   }
               else if (del_mode.equalsIgnoreCase("Y") == false && del_mode.equalsIgnoreCase("N") == false)
               {
                  count = 1; 
                   }
                else if(calledFrom.equalsIgnoreCase("P") == false && calledFrom.equalsIgnoreCase("M") == false)
               {
                  count = 1; 
                   }
               Map paramMap = RequestContext.getCurrentInstance().getPageFlowScope();
               paramMap.put("PARAM_PG_ADD_MD", add_mode); 
               paramMap.put("PARAM_PG_EDIT_MD", edit_mode); 
               paramMap.put("PARAM_PG_VIEW_MD", view_mode); 
               paramMap.put("PARAM_PG_DEL_MD", del_mode); 
               String addMode =  resolvEl("#{pageFlowScope.PARAM_PG_ADD_MD}").toString(); 
                String editMode =  resolvEl("#{pageFlowScope.PARAM_PG_EDIT_MD}").toString(); 
                String viewMode =  resolvEl("#{pageFlowScope.PARAM_PG_VIEW_MD}").toString(); 
                String deleteMode =  resolvEl("#{pageFlowScope.PARAM_PG_DEL_MD}").toString();   
                System.out.println(count+"------count");
         return count;
           }




    public void setAdd_mode(String add_mode) {
      this.add_mode = add_mode;
    }

    public String getAdd_mode() {
      return add_mode;
    }

    public void setEdit_mode(String edit_mode) {
      this.edit_mode = edit_mode;
    }

    public String getEdit_mode() {
      return edit_mode;
    }

    public void setView_mode(String view_mode) {
      this.view_mode = view_mode;
    }

    public String getView_mode() {
      return view_mode;
    }

    public void setDel_mode(String del_mode) {
      this.del_mode = del_mode;
    }

    public String getDel_mode() {
      return del_mode;
    }
    
    public String resolvEl(String data) {
          FacesContext fc = FacesContext.getCurrentInstance();
          Application app = fc.getApplication();
          ExpressionFactory elFactory = app.getExpressionFactory();
          ELContext elContext = fc.getELContext();
          ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
          String msg = valueExp.getValue(elContext).toString();
          return msg;
      }
    
    public void getCurrentRowBeforeBack(){
        FinAccNaVOImpl  vo=this.getFinAccNa1();
        
        r=(FinAccNaVORowImpl) vo.getCurrentRow();
        
        System.out.println("Current row is ------------"+ r.getAccNm());
    
    }
    
    // this methos is used to set na current row after back from coa.
    public void setCurrentRowAfterBack(){
        
        if(r!=null){    
           
           ViewObject  vo=this.getFinAccNa1();
        
           vo.setCurrentRow(r);
        }  
        
    }
    public String naDulicateValidator(String name) {
        NaturalAccountsAMImpl am = (NaturalAccountsAMImpl)resolvElDC("NaturalAccountsAMDataControl");            
        FinAccNaVOImpl accNa = am.getFinAccNa1();
        Row currrow=accNa.getCurrentRow();
     RowSetIterator itr=accNa.createRowSetIterator(null);
     Set duliset=new HashSet();
       while (itr.hasNext()) {
         Row row=itr.next();
         if(row!=currrow){
         String nanm=row.getAttribute("AccNm").toString();
          duliset.add(nanm);
         }
     }

        boolean added = duliset.add(name);; 
        if(added) {
              return "Y";
        }
        else {
            return "N";
        }
    }
    public Object resolvElDC(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp =
            elFactory.createValueExpression(elContext, "#{data." + data + ".dataProvider}", Object.class);
        return valueExp.getValue(elContext);
    }
}
