package voucherswappingapp.model;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.util.ArrayList;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.domain.Date;
import oracle.jbo.server.ApplicationModuleImpl;

import oracle.jbo.server.ViewObjectImpl;

import voucherswappingapp.model.common.VoucherSwappingAM;
import voucherswappingapp.model.views.SearchDualVOImpl;
import voucherswappingapp.model.views.ToCoaDualVORowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Sep 12 17:43:16 PDT 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class VoucherSwappingAMImpl extends ApplicationModuleImpl implements VoucherSwappingAM {
    /**
     * This is the default constructor (do not remove).
     */


    private String cldIdPgFlow = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
    private Integer slocIdPgFlow = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));

    private Integer usrId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
    public String returnedRefNo = null;
    public String rtnValidRef = null;

    public VoucherSwappingAMImpl() {
    }

    /**
     * Container's getter for SearchDual1.
     * @return SearchDual1
     */
    public SearchDualVOImpl getSearchDual1() {
        return (SearchDualVOImpl)findViewObject("SearchDual1");
    }

    /**
     * Container's getter for SearchDetail1.
     * @return SearchDetail1
     */
    public ViewObjectImpl getSearchDetail1() {
        return (ViewObjectImpl)findViewObject("SearchDetail1");
    }


    /** For Search Action **/
    public void searchAcion(Integer vouType, String VouId, String frmDt, String toDate, Integer coaId) {
        String hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String orgIdPgFlow = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");

        /* Row r1 = this.getSearchDual1().getCurrentRow();
        System.out.println("dual frm vo " + r1.getAttribute("CoaIdTrans") + " coa name is " +
                           r1.getAttribute("CoaNmTrans")); */

        System.out.println("Search in AM" + cldIdPgFlow + " " + " " + slocIdPgFlow + " " + " " + " " + " " + vouType +
                           " " + VouId + " " + frmDt + " " + toDate + " " + coaId + " " + hoOrgId + "  orgIdPgFlow " +
                           orgIdPgFlow);


        ViewObjectImpl dtlVO = this.getSearchDetail1();

        dtlVO.setNamedWhereClauseParam("BindCldId", cldIdPgFlow);
        dtlVO.setNamedWhereClauseParam("BindSlocId", slocIdPgFlow);
        dtlVO.setNamedWhereClauseParam("BindOrgId", orgIdPgFlow);
        dtlVO.setNamedWhereClauseParam("BindVoutype", vouType);
        dtlVO.setNamedWhereClauseParam("BindDispID", VouId);
        dtlVO.setNamedWhereClauseParam("BindFromDate", frmDt);
        dtlVO.setNamedWhereClauseParam("BindToDate", toDate);
        /*
        if (coaId == null) {
            dtlVO.setNamedWhereClauseParam("BindCoaId", null);
        } else if (coaId == 0) {
            dtlVO.setNamedWhereClauseParam("BindCoaId", null);

        } else */
        if (coaId != null && coaId != 0)
            dtlVO.setNamedWhereClauseParam("BindCoaId", coaId);


        //
        //System.out.println("cog ID_____"+cogId);
        // dtlVO.setNamedWhereClauseParam("BindCogId", cogId);
        dtlVO.executeQuery();
        System.out.println("coa ID_____" + coaId);
        ViewObjectImpl vo = this.getToCoaDual();
        Row currR = vo.getCurrentRow();
        if (currR != null) {
            System.out.println("currR not null   ");
            if (coaId != null) {
                System.out.println("Set coa id trans ");
                currR.setAttribute("CoaIdTrans", coaId);
            }
        }

        /*  LOVToCoaNameImpl toCoaNameVO = this.getLOVToCoaName1();
        toCoaNameVO.setNamedWhereClauseParam("slocidbind", slocIdPgFlow);
        toCoaNameVO.setNamedWhereClauseParam("cldidbind", cldIdPgFlow);
        toCoaNameVO.setNamedWhereClauseParam("hoorgbind", hoOrgId);
        toCoaNameVO.setNamedWhereClauseParam("orgidbind", orgIdPgFlow);
        toCoaNameVO.setNamedWhereClauseParam("ToCoaIdBind", coaId);
        toCoaNameVO.executeQuery(); */

       // System.out.println("toCoaNameVO = " + toCoaNameVO.getRowCount());
    }

    /** For Reset Action **/
    public void resetAction() {
        System.out.println("Reset in AM");
        ViewObjectImpl dulaVo = this.getSearchDual1();
        dulaVo.getCurrentRow().setAttribute("CoaIdTrans", null);
        dulaVo.getCurrentRow().setAttribute("CoaNmTrans", null);
        dulaVo.executeQuery();
        ViewObjectImpl dtlVO = this.getSearchDetail1();

        dtlVO.setNamedWhereClauseParam("BindCldId", -1);
        dtlVO.executeQuery();


       
    }

   

    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }


    /**
     * Container's getter for ToCoaDual.
     * @return ToCoaDual
     */
    public ViewObjectImpl getToCoaDual() {
        return (ViewObjectImpl)findViewObject("ToCoaDual");
    }


    /** For Selecting all Vouchers. **/
    public void selectAllVou() {
        ViewObjectImpl searchDtlVO = this.getSearchDetail1();

        RowSetIterator searchDltSelRowItr = searchDtlVO.createRowSetIterator(null);
        System.out.println("Row Count__________" + searchDltSelRowItr.getAllRowsInRange().length);


        while (searchDltSelRowItr.hasNext()) {
            Row row = searchDltSelRowItr.next();
            row.setAttribute("CheckAllTrasn", "Y");
        }

        searchDltSelRowItr.closeRowSetIterator();
    }

    /** For De-Selection all Vouchers. **/
    public void deselectAllVoucher() {
        ViewObjectImpl searchDtlVO = this.getSearchDetail1();
        RowSetIterator searchDltSelRowItr = searchDtlVO.createRowSetIterator(null);
        while (searchDltSelRowItr.hasNext()) {
            Row row = searchDltSelRowItr.next();
            row.setAttribute("CheckAllTrasn", "N");
        }
        searchDltSelRowItr.closeRowSetIterator();
        searchDtlVO.getCurrentRow().getAttribute("CheckAllTrasn");
        searchDtlVO.executeQuery();


    }

    /** Calling Procedure. **/
    public void callStoredProcedure(String stmt, Object[] bindVars) throws SQLException {
        System.out.println("function called------------");
        CallableStatement st = null;
        try {
            st = getDBTransaction().createCallableStatement("begin " + stmt + "; end;", 0);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 1, bindVars[z]);
                    System.out.println();
                }
            }

            st.registerOutParameter(12, Types.VARCHAR);
            st.executeUpdate();

            try {
                returnedRefNo = (String)st.getObject(12);

            } catch (SQLException sqle) {
                // TODO: Add catch code
                sqle.printStackTrace();
            }
        } catch (SQLException e) {
            int end = e.getMessage().indexOf("\n");

            throw new JboException(e.getMessage().substring(11, end));

        } finally {

            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {

                }
            }
        }
    }

    /** Calling Function. **/
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {

        CallableStatement st = null;
        try {
            // 1. Create a JDBC CallabledStatement
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            // 2. Register the first bind variable for the return value
            st.registerOutParameter(1, sqlReturnType);

            if (bindVars != null) {
                // 3. Loop over values for the bind variables passed in, if any
                for (int z = 0; z < bindVars.length; z++) {
                    // 4. Set the value of user-supplied bind vars in the stmt
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            // 5. Set the value of user-supplied bind vars in the stmt
            st.executeUpdate();
            // 6. Return the value of the first bind variable
            // System.out.println("Function return " + st.getObject(1));
            return st.getObject(1);
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("In Exception exch and Op and generate-->");
            //int end = e.getMessage().indexOf("\n");
            // throw new JboException(e.getMessage().substring(11, end));
            // String msg = e.getMessage().substring(11, end);

            String msg = e.getMessage();
            System.out.println(msg);
            FacesMessage ermsg = new FacesMessage(msg);
            ermsg.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, ermsg);
            return null;


        } finally {
            if (st != null) {
                try {
                    // 7. Close the statement
                    st.close();
                } catch (SQLException e) {
                    throw new JboException(e.getMessage());
                }
            }
        }
    }


    /** Calling VoucherSwap Procedure. **/
    public void swapVoucher() {
        String hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        ArrayList arrList = new ArrayList();
        ViewObjectImpl searchDelVO = this.getSearchDetail1();
        ViewObjectImpl voS = this.getSearchDual1();
        ViewObjectImpl voT = this.getToCoaDual();
        Row currS = voS.getCurrentRow();
        Row currT = voT.getCurrentRow();
        Integer oldCoa = null;
        Integer newCoa = null;
        if (currS != null) {
                oldCoa = Integer.parseInt(currS.getAttribute("CoaIdTrans").toString());
        }
        if (currT != null) {
            newCoa = Integer.parseInt(currT.getAttribute("ToCoaId").toString());
        }
        Row[] chkRow = searchDelVO.getFilteredRows("CheckAllTrasn", "Y"); //checking selected rows.
        System.out.println("No. of Row......." + chkRow.length + "Voucher checked______" + chkRow);
        Date dt = (Date)Date.getCurrentDate();

        if (chkRow.length > 0) {
            for (Integer i = 0; i < chkRow.length; i++) {
                //   Row currentRow = searchDelVO.getCurrentRow();
                String orgId = (String)chkRow[i].getAttribute("GlOrgId");
                String vouId = (String)chkRow[i].getAttribute("GlVouId");

                System.out.println(dt + "   cld id : " + cldIdPgFlow + "sloc Id : " + slocIdPgFlow + " Ho :- " +
                                   hoOrgId + " org :-" + orgId + " vou id " + vouId + " user Id " + usrId + "INS ID " +
                                   oldCoa + "    old  " + newCoa + " new caoa ");

                try {
                    callStoredProcedure("FIN.proc_swap_vou(?,?,?,?,?,?,?,?,?,?,?,?)",
                                        new Object[] { cldIdPgFlow, slocIdPgFlow, hoOrgId, orgId, 1, vouId, oldCoa,
                                                       newCoa, 1, dt, "V" });
                    System.out.println("Revert Successfully..." + returnedRefNo);
                    getDBTransaction().commit();

                    arrList.add(returnedRefNo); //Adding returned out parameter in ArrayList.
                    System.out.println("Voucher generated after reverse...." + arrList);
                    // For showing faces message for Voucher No.
                } catch (Exception ex) {
                    System.out.println("Error Occured inside Reverse Voucher." + ex.getMessage());
                }
            }

            StringBuilder saveMsg = new StringBuilder("<html><body>");
            saveMsg.append("<p><b>Voucher Swap successfully with Voucher Id -" + arrList + "</b></p>");
            saveMsg.append("</body></html>");
            FacesMessage msg = new FacesMessage(saveMsg.toString());
            msg.setSeverity(FacesMessage.SEVERITY_INFO);
            FacesContext.getCurrentInstance().addMessage(null, msg);


        } else {
            StringBuilder saveMsg = new StringBuilder("<html><body><p><b>Select Voucher for Swap." + "</b></p>");

            saveMsg.append("</body></html>");
            FacesMessage msg = new FacesMessage(saveMsg.toString());
            msg.setSeverity(FacesMessage.SEVERITY_WARN);
            FacesContext.getCurrentInstance().addMessage(null, msg);

        }
        searchDelVO.executeQuery();

    }

    public void setReturnedRefNo(String returnedRefNo) {
        this.returnedRefNo = returnedRefNo;
    }

    public String getReturnedRefNo() {
        return returnedRefNo;
    }

    public void setRtnValidRef(String rtnValidRef) {
        this.rtnValidRef = rtnValidRef;
    }

    public String getRtnValidRef() {
        return rtnValidRef;
    }


}
