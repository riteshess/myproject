package GlReportApplication.model.view;

import GlReportApplication.model.view.common.LOVCostCenterVORow;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Jun 25 17:13:46 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class LOVCostCenterVORowImpl extends ViewRowImpl implements LOVCostCenterVORow {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CldId {
            public Object get(LOVCostCenterVORowImpl obj) {
                return obj.getCldId();
            }

            public void put(LOVCostCenterVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        OrgId {
            public Object get(LOVCostCenterVORowImpl obj) {
                return obj.getOrgId();
            }

            public void put(LOVCostCenterVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        HoOrgId {
            public Object get(LOVCostCenterVORowImpl obj) {
                return obj.getHoOrgId();
            }

            public void put(LOVCostCenterVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        SlocId {
            public Object get(LOVCostCenterVORowImpl obj) {
                return obj.getSlocId();
            }

            public void put(LOVCostCenterVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        CcPrfId {
            public Object get(LOVCostCenterVORowImpl obj) {
                return obj.getCcPrfId();
            }

            public void put(LOVCostCenterVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        CcPrfDesc {
            public Object get(LOVCostCenterVORowImpl obj) {
                return obj.getCcPrfDesc();
            }

            public void put(LOVCostCenterVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        CcPrfActv {
            public Object get(LOVCostCenterVORowImpl obj) {
                return obj.getCcPrfActv();
            }

            public void put(LOVCostCenterVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        CcFinalize {
            public Object get(LOVCostCenterVORowImpl obj) {
                return obj.getCcFinalize();
            }

            public void put(LOVCostCenterVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(LOVCostCenterVORowImpl object);

        public abstract void put(LOVCostCenterVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int CCPRFID = AttributesEnum.CcPrfId.index();
    public static final int CCPRFDESC = AttributesEnum.CcPrfDesc.index();
    public static final int CCPRFACTV = AttributesEnum.CcPrfActv.index();
    public static final int CCFINALIZE = AttributesEnum.CcFinalize.index();

    /**
     * This is the default constructor (do not remove).
     */
    public LOVCostCenterVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute CldId.
     * @return the CldId
     */
    public String getCldId() {
        /* if (resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}") != null) {
            return resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        } else */
            return (String) getAttributeInternal(CLDID);
    }

    /**
     * Gets the attribute value for the calculated attribute OrgId.
     * @return the OrgId
     */
    public String getOrgId() {
        /*     if (resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}")!= null) {
            return resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        } else */
            return (String) getAttributeInternal(ORGID);
    }

    /**
     * Gets the attribute value for the calculated attribute HoOrgId.
     * @return the HoOrgId
     */
    public String getHoOrgId() {
        /* if (resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}") != null) {
            return resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        } else */
            return (String) getAttributeInternal(HOORGID);
    }

    /**
     * Gets the attribute value for the calculated attribute SlocId.
     * @return the SlocId
     */
    public Integer getSlocId() {
        /* if (resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}") != null) {
            return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        } else */
            return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Gets the attribute value for the calculated attribute CcPrfId.
     * @return the CcPrfId
     */
    public Integer getCcPrfId() {
        return (Integer) getAttributeInternal(CCPRFID);
    }

    /**
     * Gets the attribute value for the calculated attribute CcPrfDesc.
     * @return the CcPrfDesc
     */
    public String getCcPrfDesc() {
        return (String) getAttributeInternal(CCPRFDESC);
    }

    /**
     * Gets the attribute value for the calculated attribute CcPrfActv.
     * @return the CcPrfActv
     */
    public String getCcPrfActv() {
        return (String) getAttributeInternal(CCPRFACTV);
    }

    /**
     * Gets the attribute value for the calculated attribute CcFinalize.
     * @return the CcFinalize
     */
    public String getCcFinalize() {
        return (String) getAttributeInternal(CCFINALIZE);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }
}

