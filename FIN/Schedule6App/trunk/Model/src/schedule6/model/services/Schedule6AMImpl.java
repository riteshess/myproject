package schedule6.model.services;

import java.sql.Timestamp;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import oracle.jbo.Key;
import oracle.jbo.RowSet;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import schedule6.model.services.common.Schedule6AM;
import schedule6.model.services.utill.ModelUtill;
import schedule6.model.views.FinSchLineDtlVOImpl;
import schedule6.model.views.FinSchLineDtlVORowImpl;
import schedule6.model.views.FinSchLineSubDtlVOImpl;
import schedule6.model.views.FinSchLineSubDtlVORowImpl;
import schedule6.model.views.FinSchLineVOImpl;
import schedule6.model.views.FinSchLineVORowImpl;
import schedule6.model.views.FinSchVOImpl;
import schedule6.model.views.FinSchVORowImpl;
import schedule6.model.views.GenDataVOImpl;
import schedule6.model.views.GenDataVORowImpl;
import schedule6.model.views.IfresReportVOImpl;
import schedule6.model.views.LovCoaVOImpl;
import schedule6.model.views.LovCoaVORowImpl;
import schedule6.model.views.LovCogVOImpl;
import schedule6.model.views.LovCogVORowImpl;
import schedule6.model.views.LovFinalizedScheduleImpl;
import schedule6.model.views.OrgSchDualVOImpl;
import schedule6.model.views.OrgSchDualVORowImpl;
import schedule6.model.views.OrgSchVOImpl;
import schedule6.model.views.OrgSchVORowImpl;
import schedule6.model.views.UnMappedCoaVOImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Nov 17 14:52:01 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class Schedule6AMImpl extends ApplicationModuleImpl implements Schedule6AM {
    
    /**Global Parameters*/
     String cldId=null;
     String hoOrgId=null;
     Integer userId=null;
     Integer slocId=null;
     String orgId=null;

    public void setOrgId(String orgId) {
        this.orgId = orgId;
    }

    public String getOrgId() {
        return orgId;
    }


    ModelUtill utill=null;
     private List coaList=new ArrayList();
     private Map map=new HashMap();
     private HashMap<String,ArrayList> keyMap=new HashMap<String,ArrayList>();
     


    /**
     * This is the default constructor (do not remove).
     */
    public Schedule6AMImpl() {
        
        utill=new ModelUtill(this);
        
    }

    /**
     * Container's getter for FinSchLineDtl1.
     * @return FinSchLineDtl1
     */
    public FinSchLineDtlVOImpl getFinSchLineDtl1() {
        return (FinSchLineDtlVOImpl) findViewObject("FinSchLineDtl1");
    }

    /**
     * Container's getter for FinSchLineSubDtl1.
     * @return FinSchLineSubDtl1
     */
    public FinSchLineSubDtlVOImpl getFinSchLineSubDtl1() {
        return (FinSchLineSubDtlVOImpl) findViewObject("FinSchLineSubDtl1");
    }


    /**
     * Container's getter for FinSch1.
     * @return FinSch1
     */
    public FinSchVOImpl getFinSch1() {
        return (FinSchVOImpl) findViewObject("FinSch1");
    }

    /**
     * Container's getter for FinSchLine2.
     * @return FinSchLine2
     */
    public ViewObjectImpl getFinSchLine2() {
        return (ViewObjectImpl) findViewObject("FinSchLine2");
    }

    /**
     * Container's getter for FinSchLineDtl2.
     * @return FinSchLineDtl2
     */
    public ViewObjectImpl getFinSchLineDtl2() {
        return (ViewObjectImpl) findViewObject("FinSchLineDtl2");
    }

    /**
     * Container's getter for FinSchLineSubDtl2.
     * @return FinSchLineSubDtl2
     */
    public ViewObjectImpl getFinSchLineSubDtl2() {
        return (ViewObjectImpl) findViewObject("FinSchLineSubDtl2");
    }

    /**
     * Container's getter for FkFinSchLineVL1.
     * @return FkFinSchLineVL1
     */
    public ViewLinkImpl getFkFinSchLineVL1() {
        return (ViewLinkImpl) findViewLink("FkFinSchLineVL1");
    }

    /**
     * Container's getter for FkFinSchLineDtl1VL1.
     * @return FkFinSchLineDtl1VL1
     */
    public ViewLinkImpl getFkFinSchLineDtl1VL1() {
        return (ViewLinkImpl) findViewLink("FkFinSchLineDtl1VL1");
    }

    /**
     * Container's getter for FkFinSchLineSubDtl1VL1.
     * @return FkFinSchLineSubDtl1VL1
     */
    public ViewLinkImpl getFkFinSchLineSubDtl1VL1() {
        return (ViewLinkImpl) findViewLink("FkFinSchLineSubDtl1VL1");
    }
    public void setCldId(String cldId) {
        this.cldId = cldId;
    }

    public String getCldId() {
        return cldId;
    }
    
    public void setSlocId(Integer slocId) {
        this.slocId = slocId;
    }

    public Integer getSlocId() {
        return slocId;
    }

    public void setHoOrgId(String hoOrgId) {
        this.hoOrgId = hoOrgId;
    }

    public String getHoOrgId() {
        return hoOrgId;
    }
    public void setUserId(Integer userId) {
        this.userId = userId;
    }

    public Integer getUserId() {
        return userId;
    }
    
    public void setMap(Map map) {
        this.map = map;
    }

    public Map getMap() {
        return map;
    }

    public void setCoaList(List coaList) {
        this.coaList = coaList;
    }

    public List getCoaList() {
        return coaList;
    }



    
    public void setGlobalParameters( Integer userId,String cldId,String hoOrgId,Integer slocId){
        this.setUserId(userId);
        this.setCldId(cldId);
        this.setHoOrgId(hoOrgId);
        this.setSlocId(slocId);
        
        ((FinSchVOImpl)this.getFinSch1()).setBindCldId(this.getCldId());
        ((FinSchVOImpl)this.getFinSch1()).setBindHoOrgId(this.getHoOrgId());
        ((FinSchVOImpl)this.getFinSch1()).executeQuery();
        
        this.getUnMappedCoa1().setBindCldId(this.getCldId());
        this.getUnMappedCoa1().setBindHoOrgId(this.getHoOrgId());
        this.getUnMappedCoa1().executeQuery();
        
         //  System.out.printLn("View Object "+this.getViewObjectNames().length);
    }

    /**
     * Container's getter for FinSchLine1.
     * @return FinSchLine1
     */
    public FinSchLineVOImpl getFinSchLine1() {
        return (FinSchLineVOImpl) findViewObject("FinSchLine1");
    }

    /**
     * Container's getter for LovCoa1.
     * @return LovCoa1
     */
    public LovCoaVOImpl getLovCoa1() {
        return (LovCoaVOImpl) findViewObject("LovCoa1");
    }
    
    public void filterCoa(String cogId){
         //  System.out.printLn("Cog Id is "+cogId);
        
        LovCoaVOImpl coaVo=(LovCoaVOImpl)this.getLovCoa1();
        coaVo.setBindCldId(this.getCldId());
        coaVo.setBindHoOrgId(this.getHoOrgId());
        coaVo.setBindCogId(cogId);
        coaVo.setBindCoaId(null);
        
        FinSchLineDtlVORowImpl row=(FinSchLineDtlVORowImpl) this.getFinSchLineDtl1().getCurrentRow();
        
        coaVo.setBindSchId(row.getSchId());
        coaVo.setBindLovFor("S");
        coaVo.setBindLineId(row.getSchLineId());
        coaVo.executeQuery();
        
                
        coaVo.setBindLovFor(null);
        this.updateCoaList();
       
        //  System.out.printLn("Selectde values is "+coaList.size());

    }
    
    public void updateCoaList(){
         //  System.out.printLn("Clearing Coa List");
        this.getCoaList().clear();
         FinSchLineSubDtlVOImpl vo=this.getFinSchLineSubDtl1();
          //  System.out.printLn("getting current Row");
         FinSchLineSubDtlVORowImpl curRow=(FinSchLineSubDtlVORowImpl)vo.getCurrentRow();
          //  System.out.printLn("Getting First Row");
         FinSchLineSubDtlVORowImpl row=(FinSchLineSubDtlVORowImpl)vo.first();
         
         if(row !=null ){
             coaList.add(row.getAttribute("SchLineCoaId"));
         }
         while(vo.hasNext()){
             coaList.add(vo.next().getAttribute("SchLineCoaId"));
         }
          //  System.out.printLn("List is "+coaList);
         vo.setCurrentRow(curRow);
    }
    
    public void searchSchedule(String name){
        this.getFinSch1().setBindScheduleName(name);
        this.getFinSch1().executeQuery();
    }
    
    public void resetSchedule(){
        this.getFinSch1().setBindScheduleName(null);
        this.getFinSch1().executeQuery();
    }
    
    public void setScheduleId(){
     
      FinSchVORowImpl curRow= ((FinSchVORowImpl)this.getFinSch1().getCurrentRow());     
       
      if(curRow.getSchId()==null ){
            Integer schId= ((Number)utill.callStoredFunction(Types.NUMERIC, "fn_get_fin_sch_id(?,?)", new Object[]{ getCldId(),getHoOrgId()})).intValue();
            curRow.setSchId(schId);
        }
   
    }
    
    
    public void setScheduleLineId(){
        Integer schId=((FinSchVORowImpl)this.getFinSch1().getCurrentRow()).getSchId();
    
        
       FinSchLineVORowImpl curRow= ((FinSchLineVORowImpl)this.getFinSchLine1().getCurrentRow());
       String pId=curRow.getSchLineIdPrnt();
       
           if(curRow.getSchLineId()== null || curRow.getSchLineId().trim().length()==0){
            String schLineId=(String)utill.callStoredFunction(Types.VARCHAR, "fn_get_sch_line_id(?,?,?,?)", new Object[]{this.getCldId(),this.getHoOrgId(),schId,pId}); 
            curRow.setSchLineId(schLineId);
            
             //  System.out.printLn("Line id is "+ schLineId);
           } 
    }
    
    public void addCoaToSubDtl(ArrayList list){
        List listCopy=null;

        if(list == null)
            list=new ArrayList();
        try {
            listCopy = (List) list.clone();
        } catch (Exception e) {
            e.printStackTrace();
        }
        
         //  System.out.printLn("list is "+list +" Copy list is "+listCopy);
        Boolean add=list.removeAll(this.getCoaList());
         //  System.out.printLn("list is "+list +" Copy list is "+listCopy);
        Boolean remove=this.getCoaList().removeAll(listCopy);
         //  System.out.printLn("list is "+list +" Copy list is "+listCopy);
        
         //  System.out.printLn("List to Add "+list);
         //  System.out.printLn("list to remove "+this.getCoaList());
        
        Iterator iteratorAdd=list.iterator();
        int seq=1;
        FinSchLineSubDtlVOImpl subDtl= this.getFinSchLineSubDtl1();
        FinSchLineSubDtlVORowImpl row=null;
        String cogId=((FinSchLineDtlVORowImpl)this.getFinSchLineDtl1().getCurrentRow()).getSchCogId();
        Integer coaId=null;
        Object o=null;
        while(iteratorAdd.hasNext()){
            row=(FinSchLineSubDtlVORowImpl) subDtl.createRow();
            row.setSchDtlAddSubFlg("A");
            row.setSchCogId(cogId);
            
             o=iteratorAdd.next();
            
             //  System.out.printLn("Class is "+o.getClass().getName());
            if(o.getClass().getName().equalsIgnoreCase("java.lang.String")){
                coaId=Integer.parseInt((String)o);
            }
            if(o.getClass().getName().equalsIgnoreCase("java.lang.Integer")){
                coaId=(Integer)o;
            }
             row.setSchLineCoaId(coaId);
             row.setSchCoaDispNm(this.getCoaName(coaId));
            
        }
        
        // Remove Specified rows
        Iterator iteratorRemove=this.getCoaList().iterator();
        
        while(iteratorRemove.hasNext()){
              coaId=(Integer)iteratorRemove.next();
             //  System.out.printLn("CoaId "+coaId);
            subDtl.setBindCoaId(coaId);
            subDtl.executeQuery();
            FinSchLineSubDtlVORowImpl curRow=(FinSchLineSubDtlVORowImpl)subDtl.first();
            subDtl.setCurrentRow(curRow);
            subDtl.removeCurrentRow();
        }
        
        printGroup();
        
        subDtl.setBindCoaId(null);
        subDtl.executeQuery();
        
        this.updateCoaList();
        
        printGroup();
    
    }
    
    
    public String getCoaName(Integer coaId){
        LovCoaVOImpl coaVo=this.getLovCoa1();
      //   //  System.out.printLn("Row count for coa is "+coaVo.getRowCount());
        
        coaVo.setBindCoaId(coaId);
        coaVo.executeQuery();
      //   //  System.out.printLn("Row count for coa is "+coaVo.getRowCount());
        
        String coaName=((LovCoaVORowImpl)coaVo.getCurrentRow()).getCoaNm();
        
        coaVo.setBindCoaId(null);
        coaVo.executeQuery();
        // //  System.out.printLn("Row count for coa is "+coaVo.getRowCount());
        
        return coaName;
        
    }
    
    
    public void printGroup(){
        FinSchLineDtlVOImpl vo=this.getFinSchLineDtl1();
        FinSchLineDtlVORowImpl curRow=(FinSchLineDtlVORowImpl)vo.getCurrentRow();
         //  System.out.printLn("cog Id "+curRow.getSchCogId() +" line Id "+curRow.getSchLineId() +"sch id   "+curRow.getSchId()+"cld id   "+curRow.getSchCldId() + "ho Org id  "+ curRow.getSchHoOrgId()  );
        
       FinSchLineSubDtlVOImpl coaVo =this.getFinSchLineSubDtl1();
      // coaVo.reset();
       if(coaVo.getRowCount()>0){
           FinSchLineSubDtlVORowImpl row=(FinSchLineSubDtlVORowImpl)coaVo.first(); 
            //  System.out.printLn(" coa cog id is "+row.getSchCogId() +" Line id is "+row.getSchLineId()+ "sch id   "+row.getSchId()+"cld id   "+row.getSchCldId() + "ho Org id  "+ row.getSchHoOrgId() + " coa Id "+row.getSchLineCoaId());
       }
        
        while(coaVo.hasNext()){
            FinSchLineSubDtlVORowImpl row=(FinSchLineSubDtlVORowImpl)coaVo.next(); 
             //  System.out.printLn("coa cog id is "+row.getSchCogId() +" Line id is "+row.getSchLineId()+"sch id   "+row.getSchId()+"cld id   "+row.getSchCldId() + "ho Org id  "+ row.getSchHoOrgId() + " coa Id " +row.getSchLineCoaId());
        }       
    }
    
    
    public String validateParent(){
        
         //  System.out.printLn("In validating Parent ");
        String parent= ((FinSchLineVORowImpl)this.getFinSchLine1().getCurrentRow()).getSchLineIdPrnt();
         //  System.out.printLn("In validating Parent "+parent);
        int maxLevel=  ((FinSchVORowImpl)this.getFinSch1().getCurrentRow()).getSchMaxDispLvl();  
        
         //  System.out.printLn("Max level is "+maxLevel+ " and parent is "+parent);
        if (parent != null) {
            if (maxLevel > ((parent.length()) / 2)) {
                return "Y";
            } else {
                return "N";
            }
        }else{
            return "Y";
        }
    }
  
    public void getCurrentRow(){
        keyMap.clear();
        ViewObject vo=null;
        ArrayList al=null; 
        vo=this.getFinSch1();
        if(vo.getCurrentRow() != null){
                
            al=new ArrayList();
           
            al.add(vo.getCurrentRow().getKey());
            al.add(vo.getRangeIndexOf(vo.getCurrentRow()));
            keyMap.put("FinSch", al);
        }
        
         vo=this.getFinSchLine1();
        if(vo.getCurrentRow() != null){
             al=new ArrayList();
            
            al.add(vo.getCurrentRow().getKey());
            al.add(vo.getRangeIndexOf(vo.getCurrentRow()));
            keyMap.put("FinSchLine", al);
        }
         
         vo=this.getFinSchLineDtl1();
         
        if(vo.getCurrentRow() != null){
             al=new ArrayList();
            
            al.add(vo.getCurrentRow().getKey());
            al.add(vo.getRangeIndexOf(vo.getCurrentRow()));
            keyMap.put("FinSchLineDtl", al);
        } 
        System.out.println("Map is "+keyMap);
    }
    
    
    public void setCurrentRow(){
         //  System.out.printLn("Map in setter is "+keyMap);
        Key key=null;
        Integer range=null;
        
        String voName=null;
        
        voName="FinSch";
        
        if(keyMap.get(voName) != null){  
            key=(Key)keyMap.get(voName).get(0);
            range=(Integer) keyMap.get(voName).get(1);
            this.getFinSch1().findAndSetCurrentRowByKey(key, range);
        }   
        
        voName="FinSchLine";
         
        if(keyMap.get(voName) != null){   
            key=(Key)keyMap.get(voName).get(0);
            range=(Integer) keyMap.get(voName).get(1);
            this.getFinSchLine1().findAndSetCurrentRowByKey(key, range);
        }
        
        voName="FinSchLineDtl";
         
        if(keyMap.get(voName) != null){   
            key=(Key)keyMap.get(voName).get(0);
            range=(Integer) keyMap.get(voName).get(1);
            this.getFinSchLineDtl1().findAndSetCurrentRowByKey(key, range);
        }   
    }
    
    public String validateNameDtl(String name){
        String result="Y";
        
        FinSchLineDtlVOImpl vo=(FinSchLineDtlVOImpl) this.getFinSchLineDtl1();
        
        
        
        RowSet rs=vo.getRowSet();
        RowSetIterator iter=rs.createRowSetIterator(null);
        
        while(iter.hasNext()){
            FinSchLineDtlVORowImpl rw=(FinSchLineDtlVORowImpl)iter.next();
            
            if(!vo.getCurrentRow().equals(rw)){
                if((((FinSchLineDtlVORowImpl)rw).getSchCogDispNm()).equals(name)){
                    result="N";
                    break;
                }else{
                    result="Y";
                }
            }else{
                 //  System.out.printLn("Rows are equal");
            }
            
            
            
        }
        
        //  System.out.printLn("Result is "+result);    
        return result;
    }
    
    
    
    public String validateNameSch(String name){
    
       String result= "Y";
        Object obj=this.getFinSch1().getCurrentRow().getAttribute("SchId");
       
       String isDupli=(String)utill.callStoredFunction(Types.VARCHAR, "FN_IS_SCH_NM_DUPLI (?,?,?,?)",new Object[]{this.getCldId(),
                                                                                           this.getHoOrgId(),
                                                                                           obj,
                                                                                           name
                                                                                           });
       
        //  System.out.printLn("Result is "+isDupli);
       if(isDupli.equalsIgnoreCase("Y")){
           result="N";
       }else{
           result="Y";
       }
       return result;
    
    }
    
    
    public String validateNameLine(String name){
    
       String result= "Y";
        Object obj=this.getFinSch1().getCurrentRow().getAttribute("SchId");
        Object line=this.getFinSchLine1().getCurrentRow().getAttribute("SchLineId");
       
       String isDupli=(String)utill.callStoredFunction(Types.VARCHAR, "FN_IS_SCH_line_NM_DUPLI (?,?,?,?,?)",new Object[]{this.getCldId(),
                                                                                           this.getHoOrgId(),
                                                                                           obj,
                                                                                           line,
                                                                                           name
                                                                                           });
       
        //  System.out.printLn("Result is "+isDupli);
       if(isDupli.equalsIgnoreCase("Y")){
           result="N";
       }else{
           result="Y";
       }
       return result;
    
    }
    
    
    public String validateCogIdDtl(String cog){
        // applying uk_fin_sch
        String result="Y";
        
        LovCogVOImpl cogVo=this.getLovCog1();
        
         //  System.out.printLn("Row count is "+cogVo.getRowCount());
        
        cogVo.setBindCldId(this.getCldId());
        cogVo.setBindHoOrgId(this.getHoOrgId());
        cogVo.setBindCogNameVal(cog);
        cogVo.executeQuery();
        // //  System.out.printLn("Row count is "+cogVo.getRowCount());
        
        
        String cogId=((LovCogVORowImpl)cogVo.first()).getCogId();
       //  //  System.out.printLn("Cog Name id"+cogId);
        
        
        
        FinSchLineDtlVOImpl vo=(FinSchLineDtlVOImpl) this.getFinSchLineDtl1();
        
        
        
        RowSet rs=vo.getRowSet();
        RowSetIterator iter=rs.createRowSetIterator(null);
        
        while(iter.hasNext()){
            FinSchLineDtlVORowImpl rw=(FinSchLineDtlVORowImpl)iter.next();
            
            if(!vo.getCurrentRow().equals(rw)){
                // //  System.out.printLn("Parameter is "+cogId +"and cog for crrent Row is "+((FinSchLineDtlVORowImpl)rw).getSchCogId());
                if((((FinSchLineDtlVORowImpl)rw).getSchCogId()).equals(cogId)){
                    result="N";
                    break;
                }else{
                    result="Y";
                }
            }else{
                 //  System.out.printLn("Rows are equal");
            }     
        }
       
         //  System.out.printLn("Result is "+result);    
        return result;
    }


    /**
     * Container's getter for LovCog1.
     * @return LovCog1
     */
    public LovCogVOImpl getLovCog1() {
        return (LovCogVOImpl) findViewObject("LovCog1");
    }
    

    
    
    
    public void deleteCog(String cog){
        FinSchLineDtlVOImpl cogVo =this.getFinSchLineDtl1();
        FinSchLineSubDtlVOImpl coaVo=null; 
        FinSchLineSubDtlVORowImpl coa=null;
        FinSchLineSubDtlVORowImpl coaNext=null;
        
        
        if(cog == null){
            coaVo=this.getFinSchLineSubDtl1();
            while(coaVo.getRowCount()>0){
                coa=(FinSchLineSubDtlVORowImpl) coaVo.first();
                 //  System.out.printLn("current row "+coaVo.getCurrentRow());
                coa.remove();
              }
                      
       }else{
            
             //  System.out.printLn("Cog id is "+cog );

            
            coaVo=this.getFinSchLineSubDtl1();
            coaVo=this.getFinSchLineSubDtl1();
            while(coaVo.getRowCount()>0){
                coa=(FinSchLineSubDtlVORowImpl) coaVo.first();
                 //  System.out.printLn("current row "+coaVo.getCurrentRow());
                coa.remove();
            }
            
        }
        
        cogVo.getCurrentRow().remove();
       
    }
    
    public void deleteLine(String line){
        
        FinSchLineVOImpl lineVo=(FinSchLineVOImpl) this.getFinSchLine1();
        FinSchLineDtlVOImpl cogVo=null; 
        FinSchLineDtlVORowImpl cog=null; 
        
        if(line == null){
             cogVo=this.getFinSchLineDtl1();
             if(cogVo.getRowCount()>0){
                cog=(FinSchLineDtlVORowImpl) cogVo.first();
                cogVo.setCurrentRow(cog);
                
                while(cogVo.getRowCount()>0){
                    cog=(FinSchLineDtlVORowImpl) cogVo.getCurrentRow();
                    String cogId=cog.getSchCogId();
                    this.deleteCog(cogId);
                }
                 
             }
                
            
        }else{
            
             //  System.out.printLn("Line is "+line);
            
            cogVo=this.getFinSchLineDtl1();
            if(cogVo.getRowCount()>0){
               cog=(FinSchLineDtlVORowImpl) cogVo.first();
                cogVo.setCurrentRow(cog);
               
               while(cogVo.getRowCount()>0){
                   cog=(FinSchLineDtlVORowImpl) cogVo.getCurrentRow();
                   String cogId=cog.getSchCogId();
                   this.deleteCog(cogId);
               }
                
            }
            
            
        
        }
        lineVo.getCurrentRow().remove();
    }
    
    public void deleteSchedule(){
        FinSchVOImpl schVo=this.getFinSch1();
        FinSchLineVOImpl lineVo=this.getFinSchLine1();
        FinSchLineVORowImpl line=null;
        if(lineVo.getRowCount()>0){
            line=(FinSchLineVORowImpl)lineVo.first();
            lineVo.setCurrentRow(line);
            
            while(lineVo.getRowCount()>0){
                
               line=(FinSchLineVORowImpl)lineVo.getCurrentRow();
                this.deleteLine(line.getSchLineId()); 
            }
        }
      schVo.getCurrentRow().remove();   
    }
    
    public String isParent(String pId){
        String result="Y";
        
        pId=((FinSchLineVORowImpl)this.getFinSchLine1().getCurrentRow()).getSchLineId();
        
        //System.out.println("Isd "+pId+ "Row count is "+this.getFinSchLine1().getRowCount());
        
        RowSet rs=this.getFinSchLine1().getRowSet();
        oracle.jbo.Row[] rw=rs.getFilteredRows("SchLineIdPrnt", pId);
       // System.out.println("Rows length"+rw +this.getFinSchLine1().getRowCount());
        
        if(rw.length>0){
            result="Y";
        }else{
            result="N";
        }
        
        return result;
        
    }
    
    
    public String isValidMode(String vo){
        
     System.out.println("Validating vo "+vo);
           String result="Y";
        
        RowSet rs=null;
        
        if(vo.equalsIgnoreCase("Group")){
            rs=this.getFinSchLineDtl1().getRowSet();
            oracle.jbo.Row[] rw=rs.getFilteredRows("SchCogAddSubFlg", "A");
            if(rw.length>1){
                result="Y";
             }else
            {
               result="N";
               Iterator iter=Arrays.asList(rw).iterator();
                while(iter.hasNext()){
                   FinSchLineDtlVORowImpl row=(FinSchLineDtlVORowImpl)iter.next();
                    if(row.equals((FinSchLineDtlVORowImpl)this.getFinSchLineDtl1().getCurrentRow())){
                        result="N";
                    }else{
                        result="Y";
                    }
                   }
                 System.out.println("Result is "+result);                       
            }
            
        }
        if(vo.equalsIgnoreCase("Coa")){
            rs=this.getFinSchLineSubDtl1().getRowSet();
            oracle.jbo.Row[] rw=rs.getFilteredRows("SchDtlAddSubFlg", "A");            
            //System.out.println("Length is "+rw.length);
             if(rw.length>1){
                result="Y";
             }else
            {
               // System.out.println("Result is N");
                result="N";  
                Iterator iter=Arrays.asList(rw).iterator();
                
                while(iter.hasNext()){
                   // System.out.println("Having a row");
                    FinSchLineSubDtlVORowImpl row=(FinSchLineSubDtlVORowImpl)iter.next();
                    
                    if(row.equals((FinSchLineSubDtlVORowImpl)this.getFinSchLineSubDtl1().getCurrentRow())){
                      //  System.out.println("Rows ar eequal");
                        
                        result="N";
                    }else{
                       // System.out.println("Rows are not eequal");
                        result="Y";
                    }
                    
                }
            }
             
            System.out.println("Result is "+result);    
        }
        return result;
        
    }


    /**
     * Container's getter for OrgSchDual1.
     * @return OrgSchDual1
     */
    public OrgSchDualVOImpl getOrgSchDual1() {
        return (OrgSchDualVOImpl) findViewObject("OrgSchDual1");
    }
    
    
    public String replicateSchedule(Integer schId,String hoOrgId ,String orgId){
       String result="Y";
        
       System.out.println("sch id "+ schId +"Ho Org is "+ hoOrgId); 
      result=(String)  utill.callStoredFunction(Types.VARCHAR, "FN_REPLI_SCH (?,?,?,?,?,?)", new Object[]{  this.getUserId(),
                                                                                                        this.getCldId(),
                                                                                                      this.getHoOrgId(),
                                                                                                         hoOrgId,
                                                                                                         orgId,
                                                                                                         schId});
        
   
      System.out.println("Result is "+result);
      this.getDBTransaction().commit();
      this.getOrgSchDual1().executeQuery();
      return result;  
    }
    
    
    public String updateOrgSch(){
        String result="Y";
        
            OrgSchDualVORowImpl currRow=(OrgSchDualVORowImpl) this.getOrgSchDual1().getCurrentRow();
            
            
            
            ViewCriteria vc=this.getOrgSch1().getViewCriteria("OrgSchVOCriteria");
            
            this.getOrgSch1().setBindCldId(this.getCldId());
            this.getOrgSch1().executeQuery();
           
           System.out.println("Total rows are "+this.getOrgSch1().getRowCount());
           
            this.getOrgSch1().applyViewCriteria(vc);
            
            this.getOrgSch1().setBindSchId(currRow.getSchIdForOrg());
            this.getOrgSch1().setBindHoOrgId(currRow.getHoOrgId());
            this.getOrgSch1().setBindOrgId(currRow.getOrgId());
            this.getOrgSch1().executeQuery();
            
        System.out.println("Total rows are "+this.getOrgSch1().getRowCount());
            
            if(this.getOrgSch1().getRowCount()>0){
             OrgSchVORowImpl row = (OrgSchVORowImpl) this.getOrgSch1().first();
             
             row.setSchStkEntry(currRow.getIncStkEntry());
             row.setSchIncProvVou(currRow.getIncProVou());
             row.setSchIncProvVouTyp(currRow.getProVouType());
             row.setSchIncVouTyp(currRow.getIncPostVou());
             row.setUsrIdMod(this.getUserId());
             row.setUsrIdModDt(new Timestamp(System.currentTimeMillis()));
             
             
            }else{
                // create statement
                OrgSchVORowImpl row = (OrgSchVORowImpl) this.getOrgSch1().createRow();
                
                row.setSchCldId(this.getCldId());
                row.setSchHoOrgId(currRow.getcurHo());
                row.setSchOrgId(currRow.getOrgId());
                row.setSchId(currRow.getSchIdForOrg());
                
                row.setSchStkEntry(currRow.getIncStkEntry());
                row.setSchIncProvVou(currRow.getIncProVou());
                row.setSchIncProvVouTyp(currRow.getProVouType());
                row.setSchIncVouTyp(currRow.getIncPostVou());
                row.setUsrIdCreate(this.getUserId());
                row.setUsrIdCreateDt(new Timestamp(System.currentTimeMillis()));
            }
            
            
            this.getOrgSch1().removeApplyViewCriteriaName("OrgSchVOCriteria");
            this.getOrgSch1().setBindCldId("-1");
            this.getOrgSch1().executeQuery();
            
            System.out.println("Total rows is "+this.getOrgSch1().getRowCount());
            
            
            this.getOrgSchDual1().executeQuery();
        
        return result;
    }


    /**
     * Container's getter for OrgSch1.
     * @return OrgSch1
     */
    public OrgSchVOImpl getOrgSch1() {
        return (OrgSchVOImpl) findViewObject("OrgSch1");
    }

    /**
     * Container's getter for UnMappedCoa1.
     * @return UnMappedCoa1
     */
    public UnMappedCoaVOImpl getUnMappedCoa1() {
        return (UnMappedCoaVOImpl) findViewObject("UnMappedCoa1");
    }
    
    
    public String genSchData(){
        String result="Y";// APP.PKG_APP.GET_ORG_FY_start_DATE(PARAM_DATE, PARAM_ORG_ID,'FY')-1 
       
        GenDataVORowImpl curRow =(GenDataVORowImpl) this.getGenData1().getCurrentRow();
    
       System.out.println("Org id is "+curRow.getOrgId() + "sch id "+curRow.getScheduleId() +" timestamp "+new Timestamp(System.currentTimeMillis()) +"FY id is "+curRow.getFinYear() );
        
       //System.out.println("Type is"+curRow.getForAll());    
        String forAll=curRow.getForAll();
        
        if(forAll == null){
            forAll="N";
        }
        
        if(forAll.equalsIgnoreCase("N")){  
                 result=(String) utill.callStoredFunction(Types.VARCHAR, "FN_INS_SCH_DATA2(?,?,?,?,?,?,?)", new Object[]{this.getCldId(),
                                                                                                                this.getHoOrgId(),
                                                                                                                this.getSlocId(),
                                                                                                                curRow.getOrgId(),
                                                                                                                curRow.getScheduleId(),
                                                                                                                new Timestamp(System.currentTimeMillis()),
                                                                                                                curRow.getFinYear()
                                                                                                                });
        }else{
            result=(String) utill.callStoredFunction(Types.VARCHAR, "fn_all_org_fin_sch(?,?,?,?,?)", new Object[]{this.getCldId(),
                                                                                                           this.getHoOrgId(),
                                                                                                           this.getSlocId(),
                                                                                                           curRow.getScheduleId(),
                                                                                                           curRow.getFinYear()});
            
        }
       System.out.println("REsult is "+result);
       
       if(result.equalsIgnoreCase("Y"))
           this.getGenData1().executeQuery();
       
        return result;
    }

    /**
     * Container's getter for GenData1.
     * @return GenData1
     */
    public GenDataVOImpl getGenData1() {
        return (GenDataVOImpl) findViewObject("GenData1");
    }
    
    
    
    
    public void setGlobalParametersIFRS( Integer userId,String cldId,String hoOrgId,Integer slocId,String orgId){
        this.getDBTransaction().rollback();
        
        this.setUserId(userId);
        this.setCldId(cldId);
        this.setHoOrgId(hoOrgId);
        this.setSlocId(slocId);
        this.setOrgId(orgId);
        
        this.getLovFinalizedSchedule1().setBindCldId(this.getCldId());
        this.getLovFinalizedSchedule1().setBindHoOrgId(this.getHoOrgId());
        this.getLovFinalizedSchedule1().executeQuery();

    }

    /**
     * Container's getter for LovFinalizedSchedule1.
     * @return LovFinalizedSchedule1
     */
    public LovFinalizedScheduleImpl getLovFinalizedSchedule1() {
        return (LovFinalizedScheduleImpl) findViewObject("LovFinalizedSchedule1");
    }

    /**
     * Container's getter for IfresReport1.
     * @return IfresReport1
     */
    public IfresReportVOImpl getIfresReport1() {
        return (IfresReportVOImpl) findViewObject("IfresReport1");
    }
    
    
    public void searchOrgSch(){
        String orgId = ((OrgSchDualVORowImpl)this.getOrgSchDual1().getCurrentRow()).getOrgIdSearch();
       
        ViewCriteria vc=this.getOrgSch1().getViewCriteria("OrgSchSearchCriteria");
        
        this.getOrgSch1().setBindCldId(this.getCldId());
        this.getOrgSch1().executeQuery();
        
        System.out.println("Total rows are "+this.getOrgSch1().getRowCount() + " HO ORG ID "+this.getHoOrgId() + " ORG ID"+orgId);
        
        this.getOrgSch1().applyViewCriteria(vc);
        
        this.getOrgSch1().setBindHoOrgS(this.getHoOrgId());
        this.getOrgSch1().setBindOrgIdS(orgId);
        this.getOrgSch1().executeQuery();
        System.out.println("Total rows are "+this.getOrgSch1().getRowCount());
    }
    
    public void resetOrgSch(){
        
        this.getOrgSch1().removeApplyViewCriteriaName("OrgSchSearchCriteria");
        this.getOrgSch1().setBindCldId("-1");
        this.getOrgSch1().executeQuery();
        this.getOrgSchDual1().executeQuery();
        
        
        System.out.println("Total rows is "+this.getOrgSch1().getRowCount());
    }
    
    public void showCoa(){
        this.getUnMappedCoa1().setBindSchId((Integer)this.getFinSch1().getCurrentRow().getAttribute("SchId"));
        this.getUnMappedCoa1().executeQuery();
    }
    
    public String isInUnMapped(String cog){
        
        String result="Y";
        LovCogVOImpl cogVo=this.getLovCog1();
        
          System.out.println("Row count is "+cogVo.getRowCount());
        
        cogVo.setBindCldId(this.getCldId());
        cogVo.setBindHoOrgId(this.getHoOrgId());
        cogVo.setBindCogNameVal(cog);
        cogVo.executeQuery();
         System.out.println("Row count is "+cogVo.getRowCount());
        
        
        String cogId=((LovCogVORowImpl)cogVo.first()).getCogId();
        
        this.showCoa();
        
        if(this.getUnMappedCoa1().getFilteredRows("CoaCogId", cogId).length ==0){
            result="N";
        }
        
        return result;
    }
    
    public String getDisplayName(){
        return this.getFinSchLineDtl1().getCurrentRow().getAttribute("TransCogName").toString();
    }
    
    public  String isTypeValid(){
        String result="Y";
            
            FinSchLineDtlVOImpl vo=(FinSchLineDtlVOImpl)this.getFinSchLineDtl2();
            vo.setBindCldId(this.getCldId());
            vo.setBindHoOrgId(this.getHoOrgId());
            vo.setBindSchId((Integer)this.getFinSchLine1().getCurrentRow().getAttribute("SchId"));
            vo.setBindLineId(this.getFinSchLine1().getCurrentRow().getAttribute("SchLineId").toString());
            vo.setBindCogId((String)this.getFinSchLineDtl1().getCurrentRow().getAttribute("SchCogId"));
            vo.executeQuery();
            
            if(vo.getRowCount()>0){
                result="N";
            }
        return result;
    }
    
    public Integer[] getSpacer(){
        System.out.println("Count is "+this.getFinSchLine1().getCurrentRow().getAttribute("LevelNo"));
        if(this.getFinSchLine1().getCurrentRow().getAttribute("LevelNo")!=null)
            return new Integer[(Integer)this.getFinSchLine1().getCurrentRow().getAttribute("LevelNo")];
        else
            return new Integer[0];
    }
}
