package finirdetailapp.model.service;

import adf.utils.ebiz.EbizParams;
import static adf.utils.ebiz.EbizParams.GLBL_APP_CLD_ID;
import static adf.utils.ebiz.EbizParams.GLBL_APP_SERV_LOC;
import static adf.utils.ebiz.EbizParams.GLBL_APP_USR;
import static adf.utils.ebiz.EbizParams.GLBL_APP_USR_ORG;
import static adf.utils.ebiz.EbizParams.GLBL_HO_ORG_ID;
import adf.utils.ebiz.WorkFlowUtils;
import adf.utils.model.ADFModelUtils;

import finirdetailapp.model.service.common.FinIrDetailAppAM;
import finirdetailapp.model.views.FinIrExpDtlVOImpl;
import finirdetailapp.model.views.FinIrExpDtlVORowImpl;
import finirdetailapp.model.views.FinIrPayDtlVOImpl;
import finirdetailapp.model.views.FinIrVOImpl;
import finirdetailapp.model.views.FinIrVORowImpl;
import finirdetailapp.model.views.SearchDualVOImpl;
import finirdetailapp.model.views.SearchDualVORowImpl;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.sql.Types;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Jul 07 12:46:06 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class FinIrDetailAppAMImpl extends ApplicationModuleImpl implements FinIrDetailAppAM {
    /**
     * This is the default constructor (do not remove).
     */
    public FinIrDetailAppAMImpl() {
    }

    /**
     * Container's getter for FinIr1.
     * @return FinIr1
     */
    public FinIrVOImpl getFinIr1() {
        return (FinIrVOImpl) findViewObject("FinIr1");
    }

    public void filterMainPageFromPara() {
        Object ob = ADFModelUtils.resolvEl("#{pageFlowScope.DocId}");
        ViewObjectImpl finIr1 = this.getFinIr1();
        finIr1.setNamedWhereClauseParam("CldIdBind", GLBL_APP_CLD_ID());
        finIr1.setNamedWhereClauseParam("DocIdBind", ob.toString());
        finIr1.setNamedWhereClauseParam("HoOrgIdBind", GLBL_HO_ORG_ID());
        finIr1.setNamedWhereClauseParam("OrgIdBind", GLBL_APP_USR_ORG());
        finIr1.setNamedWhereClauseParam("SlocIdBind", GLBL_APP_SERV_LOC());
        finIr1.executeQuery();
    }

    public void createNewEntry() {
        ViewObjectImpl finIr1 = this.getFinIr1();
        Row createRow = finIr1.createRow();
        finIr1.insertRow(createRow);
    }

    /**
     * Container's getter for FinIrExpDtl1.
     * @return FinIrExpDtl1
     */
    public FinIrExpDtlVOImpl getFinIrExpDtl1() {
        return (FinIrExpDtlVOImpl) findViewObject("FinIrExpDtl1");
    }

    /**
     * Container's getter for FinIrToDtlVL1.
     * @return FinIrToDtlVL1
     */
    public ViewLinkImpl getFinIrToDtlVL1() {
        return (ViewLinkImpl) findViewLink("FinIrToDtlVL1");
    }

    public void setCOAIdFromEoId() {
        ViewObjectImpl finIr1 = this.getFinIr1();
        Row currentRow = finIr1.getCurrentRow();
        if (currentRow != null) {
            Object ob = currentRow.getAttribute("EoId");
            if (ob != null) {
                ViewObjectImpl coaIdFromEoId1 = this.getLOVCoaIdFromEoId1();
                coaIdFromEoId1.setNamedWhereClauseParam("CldIdBind", GLBL_APP_CLD_ID());
                coaIdFromEoId1.setNamedWhereClauseParam("EoIdBind", ob);
                coaIdFromEoId1.setNamedWhereClauseParam("HoOrgIdBind", GLBL_HO_ORG_ID());
                coaIdFromEoId1.setNamedWhereClauseParam("OrgIdBind", GLBL_APP_USR_ORG());
                coaIdFromEoId1.setNamedWhereClauseParam("SlocIdBind", GLBL_APP_SERV_LOC());
                coaIdFromEoId1.executeQuery();
                Row[] allRowsInRange = coaIdFromEoId1.getAllRowsInRange();
                if (allRowsInRange.length > 0) {
                    currentRow.setAttribute("SrcCoaId", allRowsInRange[0].getAttribute("CoaId"));
                } else {
                    currentRow.setAttribute("SrcCoaId", -1);
                }
            } else {
                currentRow.setAttribute("SrcCoaId", 0);
            }
        }
    }

    /**
     * Container's getter for LOVCoaIdFromEoId1.
     * @return LOVCoaIdFromEoId1
     */
    public ViewObjectImpl getLOVCoaIdFromEoId1() {
        return (ViewObjectImpl) findViewObject("LOVCoaIdFromEoId1");
    }

    /**
     * Container's getter for FinIrPayDtl1.
     * @return FinIrPayDtl1
     */
    public FinIrPayDtlVOImpl getFinIrPayDtl1() {
        return (FinIrPayDtlVOImpl) findViewObject("FinIrPayDtl1");
    }

    /**
     * Container's getter for FinIrToFinPayDtl1.
     * @return FinIrToFinPayDtl1
     */
    public ViewLinkImpl getFinIrToFinPayDtl1() {
        return (ViewLinkImpl) findViewLink("FinIrToFinPayDtl1");
    }

    public void updateAmountBsInExpDtl() {
        ViewObjectImpl dtl1 = this.getFinIrExpDtl1();
        Row currentRow = dtl1.getCurrentRow();
    }

    /**
     * Container's getter for FinIrSearch1.
     * @return FinIrSearch1
     */
    public ViewObjectImpl getFinIrSearch1() {
        return (ViewObjectImpl) findViewObject("FinIrSearch1");
    }

    /**
     * Container's getter for SearchDual1.
     * @return SearchDual1
     */
    public SearchDualVOImpl getSearchDual1() {
        return (SearchDualVOImpl) findViewObject("SearchDual1");
    }

    public void filterSearchView() {
        SearchDualVOImpl dual1 = this.getSearchDual1();
        Row currentRow = dual1.getCurrentRow();
        if (currentRow != null) {
            SearchDualVORowImpl row = (SearchDualVORowImpl) currentRow;
            ViewObjectImpl finIrSearch1 = this.getFinIrSearch1();
            finIrSearch1.setNamedWhereClauseParam("IrIBind", row.getRequestIdTrans());
            finIrSearch1.setNamedWhereClauseParam("reqTypBind", row.getReqTypTrans());
            finIrSearch1.setNamedWhereClauseParam("EoIdBind", row.getEoIdTrans());
            finIrSearch1.setNamedWhereClauseParam("AmtFrmBind", row.getAmtFrmTrans());
            finIrSearch1.setNamedWhereClauseParam("AmtToBind", row.getAmtToTrans());
            finIrSearch1.setNamedWhereClauseParam("DtTopBind", row.getDateToTrans());
            finIrSearch1.setNamedWhereClauseParam("DtbottomBind", row.getDateFromTrans());
            finIrSearch1.setNamedWhereClauseParam("SlocIdBind", GLBL_APP_SERV_LOC());

            if (this.getSearchDual1().getCurrentRow().getAttribute("EoTypeTrans") != null &&
                (Integer) this.getSearchDual1().getCurrentRow().getAttribute("EoTypeTrans") < 0)
                finIrSearch1.setNamedWhereClauseParam("EoTypBind", null);
            else
                finIrSearch1.setNamedWhereClauseParam("EoTypBind", row.getEoTypeIdTrans());

            finIrSearch1.executeQuery();
        }
    }

    /**
Method to pass bind variables in HistoryView Page*/

    /** Written by Savi*/

    public void historyView() {
        ViewObjectImpl view = this.getHistoryView1();
        ViewObjectImpl imp1 = this.getFinIr1();
        Row r1 = imp1.getCurrentRow();
        view.setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
        view.setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
        view.setNamedWhereClauseParam("DocIdBind", r1.getAttribute("DocId"));
        view.setNamedWhereClauseParam("OrgIdBind", EbizParams.GLBL_APP_USR_ORG());
        view.setNamedWhereClauseParam("HoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
        view.executeQuery();
    }

    public void resetSearchView() {
        ViewObjectImpl finIrSearch1 = this.getFinIrSearch1();
        finIrSearch1.setNamedWhereClauseParam("IrIBind", null);
        finIrSearch1.setNamedWhereClauseParam("reqTypBind", null);
        finIrSearch1.setNamedWhereClauseParam("EoIdBind", null);
        finIrSearch1.setNamedWhereClauseParam("AmtFrmBind", null);
        finIrSearch1.setNamedWhereClauseParam("AmtToBind", null);
        finIrSearch1.setNamedWhereClauseParam("DtTopBind", null);
        finIrSearch1.setNamedWhereClauseParam("DtbottomBind", null);
        finIrSearch1.setNamedWhereClauseParam("SlocIdBind", -1);
        finIrSearch1.setNamedWhereClauseParam("EoTypBind", null);
        finIrSearch1.executeQuery();
        this.getSearchDual1().executeQuery();

        this.getSearchDual1().getCurrentRow().setAttribute("EoTypeTrans", -1);

    }

    public void filterFinSearchForGbblPara() {
        this.getSearchDual1().setRangeSize(-1);
        Row dual[] = this.getSearchDual1().getAllRowsInRange();
        System.out.println("Rows in dual =" + dual.length);
        if (dual.length > 0)
            dual[0].setAttribute("EoTypeIdTrans", 79);
        // this.getSearchDual1().getCurrentRow().setAttribute("EoTypeIdTrans", 79);
        ViewObjectImpl finIrSearch1 = this.getFinIrSearch1();
        finIrSearch1.setNamedWhereClauseParam("CldIdBind", GLBL_APP_CLD_ID());
        finIrSearch1.setNamedWhereClauseParam("HoOrgIdBind", GLBL_HO_ORG_ID());
        finIrSearch1.setNamedWhereClauseParam("OrgIdBind", GLBL_APP_USR_ORG());
        //finIrSearch1.setNamedWhereClauseParam("SlocIdBind", GLBL_APP_SERV_LOC());
        finIrSearch1.setNamedWhereClauseParam("SlocIdBind", -1);
        finIrSearch1.executeQuery();

    }

    public int getCurrUsr() {
        FinIrVOImpl finIr1 = this.getFinIr1();

        Object obj = callStoredFunction(Types.VARCHAR, "APP.WF_GET_CUR_USR(?,?,?,?,?,?)", new Object[] {
                                        GLBL_APP_SERV_LOC(), GLBL_APP_CLD_ID(), GLBL_APP_USR_ORG(), 59,
                                        finIr1.getCurrentRow().getAttribute("DocId").toString(), 0
        });
        int lvl = -1;
        if (obj != null) {
            lvl = Integer.parseInt(obj.toString());
        }
        return lvl;
    }

    /**Method to Push Transaction History in Table FinIrHist*/

    /**Written by Savi*/

    public void setValuesInIrHistTable() {
        ViewObjectImpl imp = this.getFinIrHistVo1();
        Row r = imp.createRow();
        ViewObjectImpl imp1 = this.getFinIr1();
        Row r1 = imp1.getCurrentRow();
        r.setAttribute("CldId", GLBL_APP_CLD_ID());
        System.out.println("CldID");
        r.setAttribute("DocId", r1.getAttribute("DocId"));
        System.out.println("DocId");
        r.setAttribute("HoOrgId", GLBL_HO_ORG_ID());
        System.out.println("HoOrgID");
        r.setAttribute("OrgId", GLBL_APP_USR_ORG());
        System.out.println("OrgId");
        r.setAttribute("SlocId", GLBL_APP_SERV_LOC());
        System.out.println("SlocID");
        r.setAttribute("TotAmtSp", r1.getAttribute("TotAmtSp"));
        System.out.println("AmtSpSet");
        r.setAttribute("TotAmtBs", r1.getAttribute("TotAmtBs"));
        System.out.println("AmtBsSet");
        r.setAttribute("UsrId", GLBL_APP_USR());
        System.out.println("UsrId");
        r.setAttribute("UsrIdAmendDt", new Timestamp(System.currentTimeMillis()));
        System.out.println("SystemDate");
        imp.insertRow(r);
    }

    public String getWFId() {
        Object obj = callStoredFunction(Types.VARCHAR, "APP.WF_GET_ID(?,?,?,?,?)", new Object[] {
                                        GLBL_APP_SERV_LOC(), GLBL_APP_CLD_ID(), GLBL_APP_USR_ORG(), 59, 0
        });
        if (obj == null) {
            return null;
        }
        return obj.toString();
    }

    public Integer getNextUsrLevel(String wfId) {
        Object obj = callStoredFunction(Types.VARCHAR, "APP.WF_GET_USR_LEVEL(?,?,?,?,?,?,?)", new Object[] {
                                        GLBL_APP_SERV_LOC(), GLBL_APP_CLD_ID(), GLBL_APP_USR_ORG(), GLBL_APP_USR(),
                                        wfId, 59, 0
        });
        if (obj == null) {
            return null;
        }
        return Integer.parseInt(obj.toString());
    }

    public void insertIntoWFTxn(String wfId, Integer level) {

        FinIrVOImpl finIr1 = this.getFinIr1();
        String docId = finIr1.getCurrentRow().getAttribute("DocId").toString();
        Object obj = callStoredFunction(Types.VARCHAR, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                        GLBL_APP_SERV_LOC(), GLBL_APP_CLD_ID(), GLBL_APP_USR_ORG(), 59, 0, wfId, docId,
                                        GLBL_APP_USR(), GLBL_APP_USR(), level, level, "I", "A", 0, "S"
        });
    }

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {

        CallableStatement st = null;
        try {
            // 1. Create a JDBC CallabledStatement
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            // 2. Register the first bind variable for the return value
            st.registerOutParameter(1, sqlReturnType);

            if (bindVars != null) {
                // 3. Loop over values for the bind variables passed in, if any
                for (int z = 0; z < bindVars.length; z++) {
                    // 4. Set the value of user-supplied bind vars in the stmt
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            // 5. Set the value of user-supplied bind vars in the stmt
            st.executeUpdate();
            // 6. Return the value of the first bind variable
            return st.getObject(1);
        } catch (SQLException e) {
            // if (e.getMessage().length() < 11) {
            throw new JboException(e.getMessage());
            /*  } else {
                int end = e.getMessage().indexOf("\n");
                throw new JboException(e.getMessage().substring(11, end));
            } */
        } finally {
            if (st != null) {
                try {
                    // 7. Close the statement
                    st.close();
                } catch (SQLException e) {
                    throw new JboException(e.getMessage());
                }
            }
        }
    }

    public void aprooveDocument() {
        Object ob = ADFModelUtils.resolvEl("#{pageFlowScope.Action}");
        System.out.println("approval is: " + ob);
        if (ob != null && ob.toString().equalsIgnoreCase("A")) {
            System.out.println("going to set");
            this.getFinIr1().getCurrentRow().setAttribute("ReqStatus", 875);
            this.getDBTransaction().commit();
            Row row = this.getFinIr1().getCurrentRow();
            System.out.println("now>>>>");
            System.out.println(row.getAttribute("IrId"));
            System.out.println(row.getAttribute("ReqStatus"));
            Object IrIbj = callStoredFunction(Types.VARCHAR, "fin.FN_UPDATE_IR_STAT(?,?,?,?,?)", new Object[] {
                                              GLBL_APP_CLD_ID(), GLBL_APP_SERV_LOC(), GLBL_HO_ORG_ID(),
                                              GLBL_APP_USR_ORG(), this.getFinIr1().getCurrentRow().getAttribute("DocId")
            });
        }
        //this.getFinIr1().executeQuery();
    }

    public void getCurrConVal() {

        FinIrVOImpl finIr1 = this.getFinIr1();
        Row currentRow = finIr1.getCurrentRow();
        if (currentRow != null && currentRow.getAttribute("CurrId") != null) {

            /*  Object obj = callStoredFunction(Types.VARCHAR, "APP.fn_get_curr_conv_org(?,?,?)", new Object[] {
                                            GLBL_APP_CLD_ID(), GLBL_APP_USR_ORG(), currentRow.getAttribute("CurrId")
            });
            if (obj != null) {
                currentRow.setAttribute("ConvRate", obj);
                FinIrVORowImpl row = (FinIrVORowImpl) currentRow;
                row.getLOVCurrNmVO1().executeQuery();
            } */

            ViewObjectImpl currNm1 = this.getLOVCurrNm1();
            if (currentRow.getAttribute("CurrId") != null) {
                //  currNm1.setNamedWhereClauseParam("CurrIdTxnBind", currentRow.getAttribute("CurrId"));
                currNm1.setNamedWhereClauseParam("BindOrgId", GLBL_APP_USR_ORG());
                currNm1.setNamedWhereClauseParam("DateBind", currentRow.getAttribute("IrDt"));
                currNm1.executeQuery();
                System.out.println("Curr id is: " + currentRow.getAttribute("CurrId"));
                Row[] allRowsInRange = currNm1.getFilteredRows("CcCurrIdTxn", currentRow.getAttribute("CurrId"));
                //Row[] allRowsInRange = currNm1.getAllRowsInRange();
                System.out.println("Total row: " + allRowsInRange.length);
                if (allRowsInRange.length > 0) {
                    System.out.println("-- " + allRowsInRange[0].getAttribute("CurrDescTxn") + " --- " +
                                       allRowsInRange[0].getAttribute("CcBuy"));
                    currentRow.setAttribute("ConvRate", allRowsInRange[0].getAttribute("CcBuy"));
                    FinIrVORowImpl row = (FinIrVORowImpl) currentRow;
                    row.getLOVCurrNmVO1().executeQuery();
                }
            }
        }
    }

    public void AddInsNo() {
        FinIrPayDtlVOImpl dtl1 = this.getFinIrPayDtl1();
        dtl1.getCurrentRow().setAttribute("InstrmntSlNo", dtl1.getRowCount());
    }

    public void reAssignInsNo() {
        /*  FinIrPayDtlVOImpl dtl1 = this.getFinIrPayDtl1();
        int count = 1;
        RowSetIterator itr = dtl1.createRowSetIterator(null);
        while (itr.hasNext()) {
            itr.next().setAttribute("InstrmntSlNo", count);
            count++;
        }
        itr.closeRowSetIterator(); */

        ViewObjectImpl vo = this.getFinIrPayDtl1();
        Integer slNo = 0;

        RowSetIterator itr = vo.createRowSetIterator(null);

        while (itr.hasNext()) {

            Row next = itr.next();

            if (next != null) {
                if (next.getAttribute("InstrmntSlNo") != null && slNo < (Integer) next.getAttribute("InstrmntSlNo")) {
                    slNo = (Integer) next.getAttribute("InstrmntSlNo");
                }
            }

            vo.getCurrentRow().setAttribute("InstrmntSlNo", (slNo + 1));

        }

    }

    public void delInsNo() {
        FinIrPayDtlVOImpl dtl1 = this.getFinIrPayDtl1();

        int count = 1;
        RowSetIterator itr = dtl1.createRowSetIterator(null);
        while (itr.hasNext()) {
            itr.next().setAttribute("InstrmntSlNo", count);
            count++;
        }
        itr.closeRowSetIterator();

    }

    public boolean checkForEntry() {
        FinIrVOImpl finIr1 = this.getFinIr1();
        FinIrVORowImpl row = (FinIrVORowImpl) finIr1.getCurrentRow();
        if (row != null) {
            if (row.getEoTyp() != null) {
                int count = 0;
                if (row.getEoTyp() == 68 || row.getEoTyp() == 69) {
                    count = this.getFinIrPayDtl1().getRowCount();
                } else if (row.getEoTyp() == 80 || row.getEoTyp() == 79) {
                    count = this.getFinIrExpDtl1().getRowCount();
                }
                if (count != 0)
                    return true;
            }
        }
        return false;
    }

    public boolean isDuplicateExpNm(String name) {
        FinIrExpDtlVOImpl dtl1 = this.getFinIrExpDtl1();
        FinIrExpDtlVORowImpl r1 = (FinIrExpDtlVORowImpl) dtl1.getCurrentRow();
        Row[] filteredRows = r1.getLOVOtherCOAVO1().getFilteredRows("CoaNm", name);
        if (filteredRows.length > 0) {
            Object eoId = filteredRows[0].getAttribute("CoaId");
            RowSetIterator itr = dtl1.createRowSetIterator(null);
            while (itr.hasNext()) {
                Row next = itr.next();
                if (next != dtl1.getCurrentRow()) {
                    if (next.getAttribute("CoaId").equals(eoId)) {
                        itr.closeRowSetIterator();
                        return true;
                    }
                }
            }
            itr.closeRowSetIterator();
        }
        return false;
    }

    /**
     * Container's getter for LOVCurrNm1.
     * @return LOVCurrNm1
     */
    public ViewObjectImpl getLOVCurrNm1() {
        return (ViewObjectImpl) findViewObject("LOVCurrNm1");
    }

    public boolean chkDocument() {
        FinIrVORowImpl row = (FinIrVORowImpl) this.getFinIr1().getCurrentRow();
        if ((row.getEoTyp() == 68 || row.getEoTyp() == 69) &&
            (row.getDocNmTrans() == null || row.getSrcDocId() == null || row.getSrcDocId().equals(0)))
            return false;
        return true;
    }

    public void updateIrId() {
        FinIrVORowImpl row = (FinIrVORowImpl) this.getFinIr1().getCurrentRow();
        Object IrIbj = callStoredFunction(Types.VARCHAR, "APP.FN_GEN_DISP_ID(?,?,?,?,?,?,?,?,?)", new Object[] {
                                          GLBL_APP_SERV_LOC(), GLBL_APP_CLD_ID(), GLBL_APP_USR_ORG(), 59,
                                          row.getDocId(), 0, "FIN$IR", row.getFyId(), 0
        });
        System.out.println("It Id: " + IrIbj);
        if (row.getIrId() == null && IrIbj != null) {
            row.setIrId(IrIbj.toString());
        }

        if (row.getEoTyp() == 80) {
            System.out.println("come 22");
            row.setSrcDocId(row.getDocId());
            row.setSrcDocTyp(59);
            System.out.println("seted");
        }
    }

    public void deleteExpTable() {
        this.getFinIrExpDtl1().getCurrentRow().remove();
        this.getFinIrExpDtl1().executeQuery();
    }

    protected Object callStoredProcedureForOpBal(String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            // 1. Create a JDBC CallableStatement
            st = getDBTransaction().createCallableStatement("begin " + stmt + "; end ;", 0);
            // 2. Register the first bind variable for the return value
            st.setObject(1, bindVars[0]);
            st.setObject(2, bindVars[1]);
            st.setObject(3, bindVars[2]);
            st.setObject(4, bindVars[3]);
            st.setObject(5, bindVars[4]);
            st.setObject(6, bindVars[5]);
            st.setObject(7, bindVars[6]);
            st.setObject(8, bindVars[7]);
            st.setObject(9, bindVars[8]);

            st.registerOutParameter(10, Types.VARCHAR);
            st.registerOutParameter(11, Types.VARCHAR);
            st.registerOutParameter(12, Types.VARCHAR);
            st.registerOutParameter(13, Types.VARCHAR);
            st.registerOutParameter(14, Types.VARCHAR);
            st.registerOutParameter(15, Types.VARCHAR);
            st.registerOutParameter(16, Types.VARCHAR);
            st.registerOutParameter(17, Types.VARCHAR);
            // 5. Set the value of user-supplied bind vars in the stmt

            st.executeUpdate();
            ViewObjectImpl op = getFinIr1();
            //op.executeQuery();
            Row currentRow = op.getCurrentRow();
            if (currentRow != null) {
                try {
                    if (st.getObject(10) != null) {
                        currentRow.setAttribute("TransOpBalOut", divideValue(st.getObject(10)));
                        System.out.println("TransOpBalOut = " + divideValue(st.getObject(10)));
                    }
                    if (st.getObject(11) != null) {
                        currentRow.setAttribute("TransDrAmt", totalCrInString(st.getObject(11)));
                        System.out.println("TransDrAmt = " + totalCrInString(st.getObject(11)));

                    }
                    if (st.getObject(12) != null) {
                        currentRow.setAttribute("TransCrAmt", totalCrInString(st.getObject(12)));
                        System.out.println("TransCrAmt = " + totalCrInString(st.getObject(12)));

                    }
                    if (st.getObject(13) != null) {
                        currentRow.setAttribute("TransClBalPostOut", divideValue(st.getObject(13)));
                        System.out.println("TransClBalPostOut = " + divideValue(st.getObject(13)));

                    }
                    if (st.getObject(14) != null) {
                        currentRow.setAttribute("TransProjAmtOut", divideValue(st.getObject(14)));
                        System.out.println("TransProjAmtOut = " + divideValue(st.getObject(14)));

                    }
                    if (st.getObject(15) != null) {
                        currentRow.setAttribute("TransUnpostAmtOut", divideValue(st.getObject(15)));
                        System.out.println("TransUnpostAmtOut = " + divideValue(st.getObject(15)));

                    }
                    if (st.getObject(16) != null) {
                        currentRow.setAttribute("TransClBalOut", divideValue(st.getObject(16)));
                        System.out.println("TransClBalOut = " + divideValue(st.getObject(16)));

                    }
                    if (st.getObject(17) != null) {
                        currentRow.setAttribute("TransClBalProj", divideValue(st.getObject(17)));
                        System.out.println("TransClBalProj = " + divideValue(st.getObject(17)));

                    }
                } catch (SQLException sqle) {
                    sqle.printStackTrace();
                }
            }

            return "Y";
        } catch (SQLException e) {
            int end = e.getMessage().indexOf("\n");
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    // 7. Close the statement
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();

                }
            }
        }
    }


    public String showCoaBalance() {
        System.out.println("in showCoaInfo");
        FinIrVOImpl ir = getFinIr1();
        Row currentRow = ir.getCurrentRow();
        if (currentRow != null && currentRow.getAttribute("SrcCoaId") != null) {
            Object cldId = currentRow.getAttribute("CldId");
            Object slocId = currentRow.getAttribute("SlocId");
            Object hoOrgId = currentRow.getAttribute("HoOrgId");
            Object orgId = currentRow.getAttribute("OrgId");
            ;
            Object irId = null; //currentRow.getAttribute("TvouId");
            Object irDt = currentRow.getAttribute("IrDt");
            Object coaId = currentRow.getAttribute("SrcCoaId");

            System.out.println("cldId = " + cldId + " slocId = " + slocId + " hoOrgId = " + hoOrgId + " orgId = " +
                               orgId + " coaId =  " + coaId + "irId =  " + irId + " irDt = " + irDt);
            callStoredProcedureForOpBal("fin.proc_get_coa_bal_params(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                        cldId, slocId, hoOrgId, orgId, coaId, irId, irDt, null, null
            });

        }
        return null;
    }


    /**
     * Container's getter for FinIrHistVo1.
     * @return FinIrHistVo1
     */
    public ViewObjectImpl getFinIrHistVo1() {
        return (ViewObjectImpl) findViewObject("FinIrHistVo1");
    }

    /**
     * Container's getter for HistoryView1.
     * @return HistoryView1
     */
    public ViewObjectImpl getHistoryView1() {
        return (ViewObjectImpl) findViewObject("HistoryView1");
    }

    public Object divideValue(Object value) {
        String coaAmt = "0";
        if (value != null) {
            String balValue = value.toString();
            Integer len = (balValue.toString().length());
            String amtVal = balValue.substring(0, len - 3);
            String crDrVal = balValue.substring(len - 3, len);
            String numAmt = totalCrInString(amtVal);
            coaAmt = numAmt.concat(crDrVal);
            return coaAmt;
        }
        return coaAmt;
    }

    public String totalCrInString(Object amount) {
        if (amount != null) {
            Integer amt_digit = Integer.parseInt(ADFModelUtils.resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}").toString());
            String amt = amount.toString();
            if (!amt.contains(".")) {
                amt = amt.concat(".");
                for (int i = 0; i < amt_digit; i++) {
                    amt = amt.concat("0");
                }
            } else {
                int i = amt.indexOf(".");
                int count = 0;
                for (int j = i + 1; j < amt.toString().length(); j++) {
                    count++;
                }
                for (int j = 0; j < (amt_digit - count); j++) {
                    amt = amt.concat("0");
                }
            }
            int l = amt.indexOf(".");
            StringBuffer sb = new StringBuffer(amt);

            if (l > 3) {
                int rem = l % 3;
                if (rem == 0)
                    rem = 3;
                sb = sb.insert(rem, ",");
                int n = sb.indexOf(",");
                l++;
                for (int m = n + 3; m < l - 1; m = m + 3) {
                    sb = sb.insert(m + 1, ",");
                    m = m + 1;
                    l++;
                }
            }
            return sb.toString();
        }
        return null;
    }

    public Integer chkPendingUsr() {
        String docTxnId = (String) this.getFinIr1().getCurrentRow().getAttribute("DocId");
        return WorkFlowUtils.docPendingAt(this.getRootApplicationModule(), 59, 0, docTxnId);
    }

    public String getUsrNm(Integer usrId) {
        this.getLovUsrId1().setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
        this.getLovUsrId1().setNamedWhereClauseParam("UsrIdBind", usrId);
        this.getLovUsrId1().executeQuery();
        Row[] fr = this.getLovUsrId1().getFilteredRows("UsrId", usrId);
        if (fr.length > 0)
            return (String) fr[0].getAttribute("UsrName");
        else
            return "Anonymous";
    }

    /**
     * Container's getter for LOVUsrNm1.
     * @return LOVUsrNm1
     */
    public ViewObjectImpl getLOVUsrNm1() {
        return (ViewObjectImpl) findViewObject("LOVUsrNm1");
    }

    /**
     * Container's getter for LovUsrId1.
     * @return LovUsrId1
     */
    public ViewObjectImpl getLovUsrId1() {
        return (ViewObjectImpl) findViewObject("LovUsrId1");
    }
}
