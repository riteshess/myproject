package tempVoucherList.model.views;

import javax.el.ELContext;
import javax.el.ValueExpression;

import oracle.adf.share.ADFContext;

import oracle.jbo.Row;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;

import tempVoucherList.model.services.TempVoucherAMImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Aug 06 10:48:45 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MultiOrgVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        GlVouId {
            public Object get(MultiOrgVORowImpl obj) {
                return obj.getGlVouId();
            }

            public void put(MultiOrgVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        DocTxnIdDisp {
            public Object get(MultiOrgVORowImpl obj) {
                return obj.getDocTxnIdDisp();
            }

            public void put(MultiOrgVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        GlOrgId {
            public Object get(MultiOrgVORowImpl obj) {
                return obj.getGlOrgId();
            }

            public void put(MultiOrgVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        OrgDesc {
            public Object get(MultiOrgVORowImpl obj) {
                return obj.getOrgDesc();
            }

            public void put(MultiOrgVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        GlPdcFlg {
            public Object get(MultiOrgVORowImpl obj) {
                return obj.getGlPdcFlg();
            }

            public void put(MultiOrgVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        TransOrgLogoDesc {
            public Object get(MultiOrgVORowImpl obj) {
                return obj.getTransOrgLogoDesc();
            }

            public void put(MultiOrgVORowImpl obj, Object value) {
                obj.setTransOrgLogoDesc((String) value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(MultiOrgVORowImpl object);

        public abstract void put(MultiOrgVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int GLVOUID = AttributesEnum.GlVouId.index();
    public static final int DOCTXNIDDISP = AttributesEnum.DocTxnIdDisp.index();
    public static final int GLORGID = AttributesEnum.GlOrgId.index();
    public static final int ORGDESC = AttributesEnum.OrgDesc.index();
    public static final int GLPDCFLG = AttributesEnum.GlPdcFlg.index();
    public static final int TRANSORGLOGODESC = AttributesEnum.TransOrgLogoDesc.index();

    /**
     * This is the default constructor (do not remove).
     */
    public MultiOrgVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute GlVouId.
     * @return the GlVouId
     */
    public String getGlVouId() {
        return (String) getAttributeInternal(GLVOUID);
    }

    /**
     * Gets the attribute value for the calculated attribute DocTxnIdDisp.
     * @return the DocTxnIdDisp
     */
    public String getDocTxnIdDisp() {
        return (String) getAttributeInternal(DOCTXNIDDISP);
    }

    /**
     * Gets the attribute value for the calculated attribute GlOrgId.
     * @return the GlOrgId
     */
    public String getGlOrgId() {
        return (String) getAttributeInternal(GLORGID);
    }

    /**
     * Gets the attribute value for the calculated attribute OrgDesc.
     * @return the OrgDesc
     */
    public String getOrgDesc() {
        return (String) getAttributeInternal(ORGDESC);
    }

    /**
     * Gets the attribute value for the calculated attribute GlPdcFlg.
     * @return the GlPdcFlg
     */
    public String getGlPdcFlg() {
        return (String) getAttributeInternal(GLPDCFLG);
    }

    /**
     * Gets the attribute value for the calculated attribute TransOrgLogoDesc.
     * @return the TransOrgLogoDesc
     */
    public TempVoucherAMImpl getAM(){
            return (TempVoucherAMImpl) this.getApplicationModule();
            }
    public String getTransOrgLogoDesc() {
        ViewObjectImpl ogLogo = this.getAM().getOrgLogoVo1();
        String hoOrg_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        System.out.println("in getTransOrgLogoDesc hoOrg_id = "+hoOrg_id +" cld_id = "+cld_id+" slocId = "+slocId);
               ogLogo.setNamedWhereClauseParam("BindCldId", cld_id);
               ogLogo.setNamedWhereClauseParam("BindHoOrgId",hoOrg_id);
               ogLogo.setNamedWhereClauseParam("BindSlocId", slocId);
               ogLogo.executeQuery();
               Row[] allRowsInRange = ogLogo.getAllRowsInRange();
               if(allRowsInRange.length >0){
                   return allRowsInRange[0].getAttribute("OrgLogoImgDesc").toString();
                   }else
                   return "Org-logo.PNG";
      // return (String) getAttributeInternal(TRANSORGLOGODESC);
    }
    public Object resolvEl(String data) {

        ADFContext adfCtx = ADFContext.getCurrent();
        ELContext elContext = adfCtx.getELContext();
        ValueExpression valueExp = adfCtx.getExpressionFactory().createValueExpression(elContext, data, Object.class);
        Object Message = valueExp.getValue(elContext);

        return Message;
    }
    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransOrgLogoDesc.
     * @param value value to set the  TransOrgLogoDesc
     */
    public void setTransOrgLogoDesc(String value) {
        setAttributeInternal(TRANSORGLOGODESC, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}

