package tempVoucherList.model.views;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.ViewCriteria;
import oracle.jbo.server.QueryCollection;
import oracle.jbo.server.SQLBuilder;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.ViewRowSetImpl;

import tempVoucherList.model.views.common.LovDistCoaVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Jan 19 12:34:27 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class LovDistCoaVOImpl extends ViewObjectImpl implements LovDistCoaVO {
    /**
     * This is the default constructor (do not remove).
     */
    public LovDistCoaVOImpl() {
    }

    /**
     * Returns the variable value for BindVouTyp.
     * @return variable value for BindVouTyp
     */
    public String getBindVouTyp() {
        return (String)ensureVariableManager().getVariableValue("BindVouTyp");
    }

    /**
     * Sets <code>value</code> for variable BindVouTyp.
     * @param value value to bind as BindVouTyp
     */
    public void setBindVouTyp(String value) {
        ensureVariableManager().setVariableValue("BindVouTyp", value);
    }

    /**
     * Returns the variable value for BindCog.
     * @return variable value for BindCog
     */
    public String getBindCog() {
        return (String)ensureVariableManager().getVariableValue("BindCog");
    }

    /**
     * Sets <code>value</code> for variable BindCog.
     * @param value value to bind as BindCog
     */
    public void setBindCog(String value) {
        ensureVariableManager().setVariableValue("BindCog", value);
    }

    /**
     * Returns the variable value for BindCoaNm.
     * @return variable value for BindCoaNm
     */
    public String getBindCoaNm() {
        return (String)ensureVariableManager().getVariableValue("BindCoaNm");
    }

    /**
     * Sets <code>value</code> for variable BindCoaNm.
     * @param value value to bind as BindCoaNm
     */
    public void setBindCoaNm(String value) {
        ensureVariableManager().setVariableValue("BindCoaNm", value);
    }

    /**
     * Returns the bind variable value for BindOrgId.
     * @return bind variable value for BindOrgId
     */
    public String getBindOrgId() {
        return (String)getNamedWhereClauseParam("BindOrgId");
    }

    /**
     * Sets <code>value</code> for bind variable BindOrgId.
     * @param value value to bind as BindOrgId
     */
    public void setBindOrgId(String value) {
        setNamedWhereClauseParam("BindOrgId", value);
    }

    /**
     * Returns the bind variable value for BindSlcId.
     * @return bind variable value for BindSlcId
     */
    public Integer getBindSlcId() {
        return (Integer)getNamedWhereClauseParam("BindSlcId");
    }

    /**
     * Sets <code>value</code> for bind variable BindSlcId.
     * @param value value to bind as BindSlcId
     */
    public void setBindSlcId(Integer value) {
        setNamedWhereClauseParam("BindSlcId", value);
    }

    /**
     * Returns the bind variable value for BindCldId.
     * @return bind variable value for BindCldId
     */
    public String getBindCldId() {
        return (String)getNamedWhereClauseParam("BindCldId");
    }

    /**
     * Sets <code>value</code> for bind variable BindCldId.
     * @param value value to bind as BindCldId
     */
    public void setBindCldId(String value) {
        setNamedWhereClauseParam("BindCldId", value);
    }
    protected boolean showSql = true;
    
    @Override
    protected void executeQueryForCollection(Object qc, Object[] params, int noUserParams) {
        short fetchSize = 10;
         if (this.getRangeSize() > 0) {
            fetchSize = ((short)(this.getRangeSize() + 3));
        }
        if (this.getRangeSize() < 10) {            
            fetchSize = 10;
        }

        
        if (fetchSize > this.getFetchSize()) {            
            this.setFetchSize(fetchSize);
        } else {
           
        } 

        long init = System.currentTimeMillis();
        super.executeQueryForCollection(qc, params, noUserParams);
        long end = System.currentTimeMillis() - init;

       
    }
    @Override
       protected void bindParametersForCollection(QueryCollection queryCollection, Object[] object, PreparedStatement preparedStatement) throws SQLException, SQLException {
           // TODO Implement this method
           if (showSql)
               logQueryStatementAndBindParameters(queryCollection, object);
           
           super.bindParametersForCollection(queryCollection, object, preparedStatement);
       }
        
       /**
        * method used to introspect the query produced at runtime by the vo.
        * @param qc
        * @param params
        */
        private void logQueryStatementAndBindParameters(QueryCollection qc, Object[] params) {
           String vrsiName = null;
           if (qc != null) {
               ViewRowSetImpl vrsi = qc.getRowSetImpl();
               vrsiName = vrsi.isDefaultRS() ? "<Default>" : vrsi.getName();
           }
           String voName = getName();
           String voDefName = getDefFullName();
           if (qc != null) {
              // System.out.println("----[Exec query for VO=" + voName + ", RS=" + vrsiName + "]----");
           } else {
              // System.out.println("----[Exec COUNT query for VO=" + voName + "]----");
           }
           System.out.println("VO Definition Name = {0}"+ voDefName);

           String dbVCs = appliedCriteriaString(ViewCriteria.CRITERIA_MODE_QUERY);
           if (!dbVCs.isEmpty()) {
             //  System.out.println("Applied Database VCs = {0} "+ dbVCs);
           }

           String memVCs = appliedCriteriaString(ViewCriteria.CRITERIA_MODE_CACHE);
           if (!memVCs.isEmpty()) {
              // System.out.println("Applied In-Memory VCs = {0} "+ memVCs);
           }

           String bothVCs = appliedCriteriaString(ViewCriteria.CRITERIA_MODE_QUERY | ViewCriteria.CRITERIA_MODE_CACHE);
           if (!bothVCs.isEmpty()) {
              // System.out.println("Applied 'Both' VCs = {0}"+ bothVCs);
           }

          // System.out.println("Generated query : {0}"+ getQuery());

           if (params != null) {
               if (getBindingStyle() == SQLBuilder.BINDING_STYLE_ORACLE_NAME) {
                   Map<String, Object> bindsMap = new HashMap<String, Object>(params.length);
                   for (Object param : params) {
                       Object[] nameValue = (Object[])param;
                       String name = (String)nameValue[0];
                       Object value = nameValue[1];
                       bindsMap.put(name, value);
                   }
                //   System.out.println("Bind Variables : {0}"+ bindsMap);
               }
           }
       }

       @Override
       public ViewRowImpl createInstanceFromResultSet(QueryCollection queryCollection, ResultSet resultSet) {
           ViewRowImpl row = super.createInstanceFromResultSet(queryCollection, resultSet);
          // if (showSql)
            //  System.out.println("Fetching " + this.getViewObject().getName() + " row with the key " + row.getKey());
           return row;

       }

       private String appliedCriteriaString(int mode) {
           ViewCriteria[] appliedCriterias = getApplyViewCriterias(mode);
           String result = "";
           if (appliedCriterias != null && appliedCriterias.length > 0) {
               List<String> list = new ArrayList<String>(appliedCriterias.length);
               for (ViewCriteria vc : appliedCriterias) {
                   list.add(vc.getName());
               }
               result = list.toString();
           }
           return result;
       }
    
}
