

package tempVoucherList.model.services;

import adf.utils.bean.ADFBeanUtils;
import adf.utils.ebiz.EbizParams;
import adf.utils.model.ADFModelUtils;
import adf.utils.workflow.WFApprove;

import appCostCenterSevice.model.service.AppCostCenterServiceAMImpl;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;
import javax.faces.model.SelectItem;

import oracle.adf.share.ADFContext;

import oracle.jbo.ApplicationModule;
import oracle.jbo.AttributeDef;
import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewObject;
import oracle.jbo.client.Configuration;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.apache.myfaces.trinidad.context.RequestContext;

import tempVoucherList.model.services.common.TempVoucherAM;
import tempVoucherList.model.views.ARAPOSVOImpl;
import tempVoucherList.model.views.ARAP_AMTVOImpl;
import tempVoucherList.model.views.CoaLovVOImpl;
import tempVoucherList.model.views.LovDistCoaVOImpl;
import tempVoucherList.model.views.LovLatestCurrImpl;
import tempVoucherList.model.views.LovTvouIdVOImpl;
import tempVoucherList.model.views.LovVouCoaVOImpl;
import tempVoucherList.model.views.TvouAdjAutoVOImpl;
import tempVoucherList.model.views.TvouAdjAutoVORowImpl;
import tempVoucherList.model.views.TvouLineChqVOImpl;
import tempVoucherList.model.views.TvouLinesVOImpl;
import tempVoucherList.model.views.TvouOcVOImpl;
import tempVoucherList.model.views.TvouSearchVOImpl;
import tempVoucherList.model.views.TvouTaxRuleLineVOImpl;
import tempVoucherList.model.views.TvouTaxRuleVOImpl;
import tempVoucherList.model.views.TvouTdsRuleLineVOImpl;
import tempVoucherList.model.views.TvouTdsRuleVOImpl;
import tempVoucherList.model.views.TvouVOImpl;
import tempVoucherList.model.views.glAmtDtlVOImpl;
import tempVoucherList.model.views.template.TmplVouVOImpl;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Dec 23 15:26:10 IST 2011
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TempVoucherAMImpl extends ApplicationModuleImpl implements WFApprove, TempVoucherAM {
    /**Variable for Expense Voucher Function 29-04-2013 @Ashish Kumar*/
    Integer vouSubTyp;
    String vouId;
    Integer vouTyp;
    Integer tvouSpId;
    String cldId;
    String hoOrgId;
    Integer vouInsId;
    Integer coaId;
    Integer countValidate = 0;
    Integer slocId;
    public String glDispNo = "";
    public Date glVouDt;
    public Integer glVouTyp = 1;
    public String glVouId = "";
    private static String arApFlg;
    private Integer currId;


    String tab;


    private Number Sum = new Number(0);
    private Number as = new Number(0);
    private Number asCr = new Number(0);

    /**
     * This is the default constructor ().
     */

    public Object resolvEl(String data) {

        ADFContext adfCtx = ADFContext.getCurrent();
        ELContext elContext = adfCtx.getELContext();
        ValueExpression valueExp = adfCtx.getExpressionFactory().createValueExpression(elContext, data, Object.class);
        Object Message = valueExp.getValue(elContext);

        return Message;
    }

    public TempVoucherAMImpl() {
    }

    /**
     * Container's getter for Tvou1.
     * @return Tvou1
     */
    public TvouVOImpl getTvou1() {
        return (TvouVOImpl) findViewObject("Tvou1");
    }

    /**
     * Container's getter for TvouLinesLnk.
     * @return TvouLinesLnk
     */
    public TvouLinesVOImpl getTvouLinesLnk() {
        return (TvouLinesVOImpl) findViewObject("TvouLinesLnk");
    }

    /**
     * Container's getter for TvouLinkVL1.
     * @return TvouLinkVL1
     */
    public ViewLinkImpl getTvouLinkVL1() {
        return (ViewLinkImpl) findViewLink("TvouLinkVL1");
    }


    /**
     * Container's getter for ARAPOS.
     * @return ARAPOS
     */
    public ARAPOSVOImpl getARAPOS() {
        return (ARAPOSVOImpl) findViewObject("ARAPOS");
    }

    /**
     * Container's getter for TvouTaxRuleHd.
     * @return TvouTaxRuleHd
     */
    public ViewObjectImpl getTvouTaxRuleHd() {
        return (ViewObjectImpl) findViewObject("TvouTaxRuleHd");
    }

    /**
     * Container's getter for TvouHdTaxVL1.
     * @return TvouHdTaxVL1
     */
    public ViewLinkImpl getTvouHdTaxVL1() {
        return (ViewLinkImpl) findViewLink("TvouHdTaxVL1");
    }

    /**
     * Container's getter for TvouTaxRuleLineHd.
     * @return TvouTaxRuleLineHd
     */
    public ViewObjectImpl getTvouTaxRuleLineHd() {
        return (ViewObjectImpl) findViewObject("TvouTaxRuleLineHd");
    }

    /**
     * Container's getter for TaxRuleVL2.
     * @return TaxRuleVL2
     */
    public ViewLinkImpl getTaxRuleVL2() {
        return (ViewLinkImpl) findViewLink("TaxRuleVL2");
    }

    /**
     * Container's getter for TvouTdsRuleHd.
     * @return TvouTdsRuleHd
     */
    public ViewObjectImpl getTvouTdsRuleHd() {
        return (ViewObjectImpl) findViewObject("TvouTdsRuleHd");
    }

    /**
     * Container's getter for TvouHdTdsVL1.
     * @return TvouHdTdsVL1
     */
    public ViewLinkImpl getTvouHdTdsVL1() {
        return (ViewLinkImpl) findViewLink("TvouHdTdsVL1");
    }

    /**
     * Container's getter for TvouTdsRuleLineHd.
     * @return TvouTdsRuleLineHd
     */
    public ViewObjectImpl getTvouTdsRuleLineHd() {
        return (ViewObjectImpl) findViewObject("TvouTdsRuleLineHd");
    }

    /**
     * Container's getter for TdsRuleVL2.
     * @return TdsRuleVL2
     */
    public ViewLinkImpl getTdsRuleVL2() {
        return (ViewLinkImpl) findViewLink("TdsRuleVL2");
    }


    /**
     * Container's getter for LovForTdsVO.
     * @return LovForTdsVO
     */
    public ViewObjectImpl getLovForTdsVO() {
        return (ViewObjectImpl) findViewObject("LovForTdsVO");
    }

    /**
     * Container's getter for LovForTaxVO.
     * @return LovForTaxVO
     */
    public ViewObjectImpl getLovForTaxVO() {
        return (ViewObjectImpl) findViewObject("LovForTaxVO");
    }


    /**
     */

    public String procTaxForHdr(String ruleId) {
        setSum(new Number(0));
        setAs(new Number(0));
        setAsCr(new Number(0));
        ViewObjectImpl tvouTaxRule = getTvouTaxRuleHd();
        Row row = tvouTaxRule.getCurrentRow();
        /** Get value of selected rule id from current row of tvouTaxRule */
        Integer taxRuleId = Integer.parseInt(ruleId);
        ViewObjectImpl tvouView = getTvou1();
        



        Row tvouRow = tvouView.getCurrentRow();
        ViewObject vouLine = getTvouLinesLnk();
        /** Create iterator of tvouLine view */
        RowSetIterator rit = vouLine.createRowSetIterator(null);
        
        
        
        /** Sum all debit amount on which tax is applicable. */
        String orgIdLn = (String) tvouRow.getAttribute("TvouOrgId");
        if (rit.first() != null && rit.first().getAttribute("TvouTxnTypTax").equals("Y") &&
            rit.first().getAttribute("TvouAmtTyp").equals("Dr")) {
            as = (Number) (rit.first().getAttribute("TvouAmtSp"));
            orgIdLn=(String)rit.first().getAttribute("TvouOrgId");
        }
        while (rit.hasNext()) {
            Row lineRow = rit.next();
            if (lineRow.getAttribute("TvouTxnTypTax").equals("Y") && lineRow.getAttribute("TvouAmtTyp").equals("Dr")) {
                as = as.add((Number) (lineRow.getAttribute("TvouAmtSp")));

            }
        }

        /** Sum all credit amount on which tax is applicable. */
        if (rit.first() != null && rit.first().getAttribute("TvouTxnTypTax").equals("Y") &&
            rit.first().getAttribute("TvouAmtTyp").equals("Cr")) {
            asCr = (Number) (rit.first().getAttribute("TvouAmtSp"));
            orgIdLn=(String)rit.first().getAttribute("TvouOrgId");
        }
        while (rit.hasNext()) {
            Row lineRow = rit.next();
            if (lineRow.getAttribute("TvouTxnTypTax").equals("Y") && lineRow.getAttribute("TvouAmtTyp").equals("Cr")) {
                asCr = asCr.add((Number) (lineRow.getAttribute("TvouAmtSp")));
            }
        }
        
        
        row.setAttribute("TvouOrgId", orgIdLn);

        //  System.out.println("as = "+as+"asCr = "+asCr+"--------------------->>>>>>>>>>>>>>");
        /** calculate sum by getting diffference of credit and debit amounts. */
        if (as.compareTo(asCr) == 1) {
            setSum((Number) (as.minus(asCr)));
        } else if (as.compareTo(asCr) == -1) {
            setSum((Number) (asCr.minus(as)));
        }
        //System.out.println("sum ="+Sum);
        /** set taxable amount in taxrule table by sum calculated above. */
        row.setAttribute("TvouTaxableAmt", Sum);
        row.setAttribute("TvouTaxAmtSp", Sum);
        row.setAttribute("TvouDt", ((Date) tvouRow.getAttribute("TvouDt")).dateValue());
        String vouId = tvouRow.getAttribute("TvouId").toString();
        Integer slocId = Integer.parseInt(tvouRow.getAttribute("TvouSlocId").toString());
        String orgId = tvouRow.getAttribute("TvouOrgId").toString();
        String TvouPrjId = (String) tvouRow.getAttribute("TvouPrjId");
        Integer currIdsp = Integer.parseInt(vouLine.getCurrentRow().getAttribute("TvouCurrIdSp").toString());
        Integer userId = Integer.parseInt(tvouRow.getAttribute("UsrIdCreate").toString());
        Number finAmt = (Number) row.getAttribute("TvouTaxableAmt");
        String cldId = tvouRow.getAttribute("TvouCldId").toString();
        String hoOrgId = tvouRow.getAttribute("TvouHoOrgId").toString();
        Integer instId = Integer.parseInt(tvouRow.getAttribute("TvouApplInstId").toString());

        String op = "I";
        Date tvouDt = (Date) tvouRow.getAttribute("TvouDt");
        Integer slNo = 0;
        String exmptFlg = "N";
        if (row.getAttribute("TvouExmptFlg") != null) {
            exmptFlg = row.getAttribute("TvouExmptFlg").toString();
        }
        System.out.println(slocId + " " + orgId + " " + vouId + " " + tvouDt + " " + slNo + " " + taxRuleId + " " +
                           finAmt + " " + currIdsp + " " + op + " " + userId + " " + tvouDt + "Exmpt flg is-->" +
                           exmptFlg);

        callStoredProcedure("FIN.INS_TEMP_TAX_LINE(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                            cldId, slocId, hoOrgId, orgIdLn, TvouPrjId, instId, vouId, tvouDt, slNo, taxRuleId, exmptFlg,
                            finAmt, currIdsp, userId, tvouDt, op
        });
        rit.closeRowSetIterator();

        return null;

    }


    public String procTdsForHdr(String ruleid) {

        setSum(new Number(0));
        setAs(new Number(0));
        setAsCr(new Number(0));

        ViewObjectImpl tvouTds = getTvouTdsRuleHd();
        /** Get value of selected rule id from current row of tvouTdsRule */
        Row row = tvouTds.getCurrentRow();
        Integer tdsRuleId = Integer.parseInt(ruleid);
        ViewObjectImpl tvouView = getTvou1();
        ViewObjectImpl vouLine = getTvouLinesLnk();

        Row tvouVRow = vouLine.getCurrentRow();
        /**Set Value For Expense parameter*/
        vouId = tvouVRow.getAttribute("TvouId").toString();
        vouTyp = Integer.parseInt(tvouVRow.getAttribute("TvouTypeId").toString());
        tvouSpId = Integer.parseInt(tvouVRow.getAttribute("TvouCurrIdSp").toString());
        cldId = tvouVRow.getAttribute("TvouCldId").toString();
        hoOrgId = tvouVRow.getAttribute("TvouHoOrgId").toString();
        if (tvouVRow.getAttribute("TvouSubTypeId") != null) {
            vouSubTyp = Integer.parseInt(tvouVRow.getAttribute("TvouSubTypeId").toString());
        } else {
            vouSubTyp = 0;
        }
        vouInsId = Integer.parseInt(tvouVRow.getAttribute("TvouApplInstId").toString());
        coaId = Integer.parseInt(tvouVRow.getAttribute("TvouCoaId").toString());
        //  System.out.println("COA Id is process tds --" + coaId);

String orgidLn=tvouVRow.getAttribute("TvouOrgId").toString();;
        /** Create iterator of tvouLine view */
        RowSetIterator rit = vouLine.createRowSetIterator(null);
        while (rit.hasNext()) {
            Row next = rit.next();
            System.out.println("next.getAttribute(\"TvouTxnTypTds\") = " + next.getAttribute("TvouTxnTypTds"));
            if (next.getAttribute("TvouTxnTypTds").equals("Y")) {
                if (next.getAttribute("TvouAmtTyp").toString().equalsIgnoreCase("Dr")) {
                    as = as.add((Number) (next.getAttribute("TvouAmtSp")));
                } else {
                    asCr = asCr.add((Number) (next.getAttribute("TvouAmtSp")));
                }
                orgidLn=(String)next.getAttribute("TvouOrgId");
                System.out.println("asv = " + as + " ascr = " + asCr);
            }
        }
        rit.closeRowSetIterator();

        /** Sum all debit amount on which tds is applicable. */
        //        if (rit.first() != null && rit.first().getAttribute("TvouTxnTypTds").equals("Y") &&
        //            rit.first().getAttribute("TvouAmtTyp").equals("Dr")) {
        //            System.out.println("");
        //            as = (Number) (rit.first().getAttribute("TvouAmtSp"));
        //            System.out.println("as = "+as+"  ---->>");
        //
        //        }
        //        while (rit.hasNext()) {
        //            Row lineRow = rit.next();
        //            if (lineRow.getAttribute("TvouTxnTypTds").equals("Y") && lineRow.getAttribute("TvouAmtTyp").equals("Dr")) {
        //                as = as.add((Number) (lineRow.getAttribute("TvouAmtSp")));
        //                System.out.println("as = "+as+"  ---->>");
        //
        //            }
        //        }
        //        /** Sum all credit amount on which tds is applicable. */
        //        if (rit.first() != null && rit.first().getAttribute("TvouTxnTypTds").equals("Y") &&
        //            rit.first().getAttribute("TvouAmtTyp").equals("Cr")) {
        //            asCr = (Number) (rit.first().getAttribute("TvouAmtSp"));
        //
        //        }
        //        while (rit.hasNext()) {
        //            Row lineRow = rit.next();
        //            if (lineRow.getAttribute("TvouTxnTypTds").equals("Y") && lineRow.getAttribute("TvouAmtTyp").equals("Cr")) {
        //                asCr = asCr.add((Number) (lineRow.getAttribute("TvouAmtSp")));
        //                System.out.println("asCr = "+asCr+"  ---->>");
        //
        //            }
        //        }

        /** calculate sum by getting diffference of credit and debit amounts. */
        if (as.compareTo(asCr) == 1) {
            setSum((Number) (as.minus(asCr)));
        } else if (as.compareTo(asCr) == -1) {

            setSum((Number) (asCr.minus(as)));
        }
        Date dt = (Date) tvouView.getCurrentRow().getAttribute("TvouDt");
        //   System.out.println("sum " + Sum);
        /** set taxable amount in taxrule table by sum calculated above. */
        row.setAttribute("TvouOrgId", orgidLn);
        row.setAttribute("TvouTaxableAmt", Sum);
        row.setAttribute("TvouTdsAmtSp", Sum);
        row.setAttribute("TvouDt", dt.dateValue());
        Row tvouRow = tvouView.getCurrentRow();
        String vouId = tvouRow.getAttribute("TvouId").toString();
        String TvouPrjId = tvouRow.getAttribute("TvouPrjId").toString();

        Integer slocId = Integer.parseInt(tvouRow.getAttribute("TvouSlocId").toString());
        String orgId = tvouRow.getAttribute("TvouOrgId").toString();
        Integer usrId = Integer.parseInt(tvouRow.getAttribute("UsrIdCreate").toString());
        Number finAmt = (Number) row.getAttribute("TvouTaxableAmt");
        Integer currIdsp = Integer.parseInt(tvouRow.getAttribute("TvouCurrIdSp").toString());
        String Op = "I";
        String cldId = tvouRow.getAttribute("TvouCldId").toString();
        String hoOrgId = tvouRow.getAttribute("TvouHoOrgId").toString();
        Date tvouDt = (Date) tvouRow.getAttribute("TvouDt");
        Integer slNo = 0;
        Integer instId = Integer.parseInt(tvouRow.getAttribute("TvouApplInstId").toString());
        //   System.out.println("tds function called");
        System.out.println(slocId + " " + orgidLn + " " + vouId + " " + tvouDt + " " + slNo + " " + tdsRuleId + " " +
                           finAmt + " " + currIdsp + " " + Op + " " + usrId + " " + tvouDt);
        callStoredProcedure("FIN.INS_TEMP_TDS_LINE(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                            cldId, slocId, hoOrgId, orgidLn, TvouPrjId, instId, vouId, tvouDt, slNo, tdsRuleId, "N",
                            finAmt, tvouSpId, usrId, tvouDt, Op
        });

        return null;

    }


    /** Function to call a database procedure.
     * @param stmt
     * @param bindVars
     * @throws SQLException
     */
    public void callStoredProcedure(String stmt, Object[] bindVars) {
        PreparedStatement st = null;
        try {

            st = getDBTransaction().createPreparedStatement("begin " + stmt + "; end;", 0);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 1, bindVars[z]);
                }
            }
            st.executeUpdate();
        } catch (SQLException e) {

            System.out.println(e.getMessage() + " " + e);
            int end = e.getMessage().indexOf("\n");
            String message = e.getMessage().substring(11, end);
            FacesMessage ermsg = new FacesMessage(message);
            ermsg.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, ermsg);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    throw new JboException(e.getMessage());
                }
            }
        }
    }

    public void callStoredProcedureForTranslateToGl(String stmt, Object[] bindVars, String cld_id, String orgId,
                                                    Integer slocId, String hoOrgId, String vouId, Integer vouTyp) {
        PreparedStatement st = null;
        try {

            st = getDBTransaction().createPreparedStatement("begin " + stmt + "; end;", 0);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 1, bindVars[z]);
                }
            }
            st.executeUpdate();
            System.out.println("after execute in try of tvou proc trnaslt");

        } catch (SQLException e) {

            /*  */
            System.out.println("before rollback in catch of tvou proc trnaslt");
            getDBTransaction().rollback();
            System.out.println("after rollback slocId = " + slocId + "cld_id = " + cld_id + " orgId = " + orgId +
                               " vouId = " + vouId + " vouTyp = " + vouTyp);
            callStoredFunction(Types.NUMERIC, "app.wf_rev_status_aprv(?,?,?,?,?,?)", new Object[] {
                               slocId, cld_id, orgId, 55, vouId, vouTyp
            });
            System.out.println("bofore commit");
            getDBTransaction().commit();
            System.out.println("after commit");
            System.out.println(e.getMessage() + " " + e);
            int end = e.getMessage().indexOf("\n");
            String message = e.getMessage().substring(11, end);
            FacesMessage ermsg = new FacesMessage(message);
            ermsg.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, ermsg);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    throw new JboException(e.getMessage());
                }
            }
        }
    }

    /** Function to call a database procedure.
     * @param stmt
     * @param bindVars
     * @throws SQLException
     */
    public void callStoredProcedure1(String stmt, Object[] bindVars) {
        PreparedStatement st = null;
        try {
            countValidate = 0;
            // System.out.println("Inside try block--" + countValidate);
            st = getDBTransaction().createPreparedStatement("begin " + stmt + "; end;", 0);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 1, bindVars[z]);
                }
            }
            st.executeUpdate();
        } catch (SQLException e) {
            countValidate = 1;
            // System.out.println("Inside catch block--" + countValidate);
            System.out.println(e.getMessage() + " " + e);
            String color = "red";
            int end = e.getMessage().indexOf("\n");
            String message = e.getMessage().substring(11, end);
            /*  StringBuilder saveMsg = new StringBuilder("<html><body><p><b><font size="+3+" color="+color+">Error in Forwarding Voucher:"+message+"</font></b></p>");

            saveMsg.append("</body></html>"); */
            StringBuilder msg = new StringBuilder();
            msg.append("<html><body><p style='color:red'><b>Unable to Forward Voucher :</b></p>");
            msg.append("<p style='color:red'><b>" + message + "</b></p>");
            // msg.append("<ul><li>Reload the page</li><li>Or close tab</li><li>Something went wrong-Contact ESS!</li></ul>");
            msg.append("</body></html>");
            FacesMessage ermsg = new FacesMessage(msg.toString());
            ermsg.setSeverity(FacesMessage.SEVERITY_INFO);

            FacesContext.getCurrentInstance().addMessage(null, ermsg);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    throw new JboException(e.getMessage());
                }
            }
        }
    }

    /**
     * Function to call a database procedure "transalate_to_gl" for translating temporary voucher to GL.
     * */

    /**Method to resolve String from XML file @06-07-2013*/

    public Object resolvElDCMsg(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        return valueExp.getValue(elContext);
    }

    public Object resolvElObj(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        Object Message = valueExp.getValue(elContext);
        return Message;
    }

    public void saveAsGL() {
        ViewObjectImpl tvouV = getTvou1();
        Row tvouVRow = tvouV.getCurrentRow();


        String vouId = tvouVRow.getAttribute("TvouId").toString();
        Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR1}").toString());
        String hoOrg_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID1}").toString();
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID1}").toString();
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC1}").toString());

        String orgId = resolvEl("#{pageFlowScope.ParamOrgId}").toString();
        Integer instId = Integer.parseInt(tvouVRow.getAttribute("TvouApplInstId").toString());
        Integer vouTyp = Integer.parseInt(tvouVRow.getAttribute("TvouTypeId").toString());
        Date vouDt = (Date) tvouVRow.getAttribute("TvouDt");

        try {
            callStoredProcedureForTranslateToGl("FIN.PROC_TRANSLATE_TO_GL(?,?,?,?,?,?,?,?)", new Object[] {
                                                cld_id, slocId, hoOrg_id, orgId, instId, vouId, vouDt, userId
            }, cld_id, orgId, slocId, hoOrg_id, vouId, vouTyp);
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("in catch before rollback");
            /* getDBTransaction().rollback();
            callStoredFunction(Types.NUMERIC, "app.wf_rev_status_aprv(?,?,?,?,?,?)", new Object[]{slocId,cld_id,orgId,55,vouId,vouTyp});
            getDBTransaction().commit(); */
        }


        /** Code to Filter data for multiOrg/SingleOrg which will appear after Save & Forward on popup(Report link)*/
        ViewObjectImpl multi = getMultiOrgVO1();
        multi.setNamedWhereClauseParam("BindCldId", cld_id);
        multi.setNamedWhereClauseParam("BindTvouId", vouId);
        multi.setNamedWhereClauseParam("BindSlocId", slocId);
        // filter of orgId is attached to show the voucher detail of current Organization in Multi-Org Case.
        multi.setNamedWhereClauseParam("BindOrgId", orgId);
        multi.executeQuery();

        setGlVouTyp(vouTyp);

        //to set the voucher date

        setGlVouDt(vouDt);
    }

    /**
     * Function to call a database function "fn_save_as_template" for saving temporary voucher as a template.
     * */
    public void saveAsTemplate(String vouId, String name) {
        String hoOrg_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID1}").toString();
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID1}").toString();
        String orgId = resolvEl("#{pageFlowScope.ParamOrgId}").toString();
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC1}").toString());
        Integer usrId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR1}").toString());
        /*   System.out.println("VouId-->" + vouId + "hoOrg-->" + hoOrg_id + "cldid--->" + cld_id + "orgId-->" + orgId +
                           "slocId-->" + slocId); */
        callStoredFunction(NUMBER, "FIN.FN_SAVE_AS_TEMPLATE(?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                           cld_id, slocId, hoOrg_id, orgId, name, vouId, "N", "U", "S", "1", usrId
        });
    }

    /**
     * Function to call a database function "fn_tvou_tax" for inserting applied tax lines from tax rule line to tvou lines.
     * */
    public void taxConsolidation() {
        System.out.println("in taxConsolidation");
        ViewObjectImpl tvouV = getTvou1();
        ViewObjectImpl hdRl = getTvouTaxRuleHd();
        Row tvouVRow = tvouV.getCurrentRow();
        Integer vouSubTyp;
        String vouId = tvouVRow.getAttribute("TvouId").toString();
        Integer vouTyp = Integer.parseInt(tvouVRow.getAttribute("TvouTypeId").toString());
        Integer tvouSpId = Integer.parseInt(tvouVRow.getAttribute("TvouCurrIdSp").toString());
        String cldId = tvouVRow.getAttribute("TvouCldId").toString();
        String TvouPrjId = tvouVRow.getAttribute("TvouPrjId").toString();

        String hoOrgId = tvouVRow.getAttribute("TvouHoOrgId").toString();
        Integer slocId = Integer.parseInt(tvouVRow.getAttribute("TvouSlocId").toString());
        String orgId = hdRl.getCurrentRow().getAttribute("TvouOrgId").toString();
        if (tvouVRow.getAttribute("TvouSubTypeId") != null) {
            vouSubTyp = Integer.parseInt(tvouVRow.getAttribute("TvouSubTypeId").toString());
        } else {
            vouSubTyp = 0;
        }
        Integer vouInsId = Integer.parseInt(tvouVRow.getAttribute("TvouApplInstId").toString());
        getDBTransaction().postChanges();
        callStoredFunction(NUMBER, "FIN.FN_TVOU_TAX(?,?,?,?,?,?,?,?,?,?)", new Object[] {
                           cldId, slocId, vouInsId, hoOrgId, orgId, TvouPrjId, vouId, vouTyp, vouSubTyp, tvouSpId
        });

        System.out.println("after function callling");
    }

    /**
     * Function to call a database function "PKG_FIN_TVOU.fn_tvou_tds" for inserting applied tds lines from tds rule line to tvou lines.
     * */
    public void tdsConsolidation() {
        // System.out.println("Inside TDS Consolidation----->");
        ViewObjectImpl tvouV = getTvou1();
        Row tvouVRow = tvouV.getCurrentRow();

        ViewObjectImpl hdRl = getTvouTdsRuleHd();
        Integer vouSubTyp;
        String vouId = tvouVRow.getAttribute("TvouId").toString();
        Integer vouTyp = Integer.parseInt(tvouVRow.getAttribute("TvouTypeId").toString());
        Integer tvouSpId = Integer.parseInt(tvouVRow.getAttribute("TvouCurrIdSp").toString());
        String cldId = tvouVRow.getAttribute("TvouCldId").toString();
        String hoOrgId = tvouVRow.getAttribute("TvouHoOrgId").toString();
        String orgId = hdRl.getCurrentRow().getAttribute("TvouOrgId").toString();
        String TvouPrjId = tvouVRow.getAttribute("TvouPrjId").toString();

        Integer slocId = Integer.parseInt(tvouVRow.getAttribute("TvouSlocId").toString());
        if (tvouVRow.getAttribute("TvouSubTypeId") != null) {
            vouSubTyp = Integer.parseInt(tvouVRow.getAttribute("TvouSubTypeId").toString());
        } else {
            vouSubTyp = 0;
        }
        Integer vouInsId = Integer.parseInt(tvouVRow.getAttribute("TvouApplInstId").toString());
        if (!vouTyp.equals(14) || !vouTyp.equals(8)) {

            getDBTransaction().postChanges();
            callStoredFunction(NUMBER, "FIN.FN_TVOU_TDS(?,?,?,?,?,?,?,?,?,?)", new Object[] {
                               cldId, slocId, vouInsId, hoOrgId, orgId, TvouPrjId, vouId, vouTyp, vouSubTyp, tvouSpId
            });
        }

    }


    /**
     * Function to call a database function "PKG_FIN.FN_TVOU_LINES_HEADER_LINE_OP" for inserting opposite line for bank and cash vouchers in to tvou line.
     * */
    public void tvouLineOp() {
        ViewObjectImpl tvouV = getTvou1();
        Row tvouVRow = tvouV.getCurrentRow();

        String vouId = tvouVRow.getAttribute("TvouId").toString();
        String TvouPrjId = tvouVRow.getAttribute("TvouPrjId").toString();

        Integer instId = Integer.parseInt(tvouVRow.getAttribute("TvouApplInstId").toString());
        Integer slocId = Integer.parseInt(tvouVRow.getAttribute("TvouSlocId").toString());
        String orgId = tvouVRow.getAttribute("TvouOrgId").toString();
        String hoOrgId = tvouVRow.getAttribute("TvouHoOrgId").toString();
        String cldId = tvouVRow.getAttribute("TvouCldId").toString();
        // Integer hdrType=Integer.parseInt(tvouVRow.getAttribute("CoaTypeTrans").toString());

        try {
            getDBTransaction().postChanges();
            callStoredFunction(NUMBER, "FIN.FN_TVOU_LINES_HEADER_LINE_OP(?,?,?,?,?,?,?)", new Object[] {
                               cldId, slocId, instId, hoOrgId, orgId, TvouPrjId, vouId
            });
        } catch (Exception e) {
            System.out.println("line op-->" + e);
        }
    }

    /**
     * Function to call a database function "PKG_FIN_TVOU.fn_tvou_oc" for inserting applied other charges in to tvou line.
     * */

    public void tvouOtherCharges() {
        ViewObjectImpl tvouV = getTvou1();
        Row tvouVRow = tvouV.getCurrentRow();
        String vouId = tvouVRow.getAttribute("TvouId").toString();
        String cldId = tvouVRow.getAttribute("TvouCldId").toString();
        String hoOrgId = tvouVRow.getAttribute("TvouHoOrgId").toString();
        String TvouPrjId = (String) tvouVRow.getAttribute("TvouPrjId");
        Integer slocId = Integer.parseInt(tvouVRow.getAttribute("TvouSlocId").toString());
        Integer currId = Integer.parseInt(tvouVRow.getAttribute("TvouCurrIdSp").toString());
        Integer instId = Integer.parseInt(tvouVRow.getAttribute("TvouApplInstId").toString());
        String orgId = tvouVRow.getAttribute("TvouOrgId").toString();

        getDBTransaction().postChanges();
        callStoredFunction(NUMBER, "FIN.FN_TVOU_OC (?,?,?,?,?,?,?,?)", new Object[] {
                           cldId, slocId, instId, hoOrgId, orgId, TvouPrjId, vouId, currId
        });
        //  insertCostCenterInLines();

    }


    public void tvoudr() {

        ViewObjectImpl tvouV = getTvou1();
        Row tvouVRow = tvouV.getCurrentRow();
        String vouId = tvouVRow.getAttribute("TvouId").toString();
        Integer instId = Integer.parseInt(tvouVRow.getAttribute("TvouApplInstId").toString());
        Integer slocId = Integer.parseInt(tvouVRow.getAttribute("TvouSlocId").toString());
        String orgId = tvouVRow.getAttribute("TvouOrgId").toString();
        String hoOrgId = tvouVRow.getAttribute("TvouHoOrgId").toString();
        String cldId = tvouVRow.getAttribute("TvouCldId").toString();

        callStoredFunction(NUMBER, "FIN.FN_TVOU_DR (?,?,?,?,?,?)", new Object[] {
                           cldId, slocId, instId, hoOrgId, orgId, vouId });


    }

    private static int NUMBER = Types.INTEGER;
    private static int NUMERIC = Types.NUMERIC;
    private static int VARCHAR = Types.VARCHAR;

    /**
     * Function to call a database function .
     * */
    protected Object callStoredFunction2(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            // 1. Create a JDBC CallabledStatement
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            // 2. Register the first bind variable for the return value
            st.registerOutParameter(1, sqlReturnType);
            st.registerOutParameter(5, VARCHAR);
            if (bindVars != null) {
                // 3. Loop over values for the bind variables passed in, if any
                for (int z = 0; z < bindVars.length; z++) {
                    // 4. Set the value of user-supplied bind vars in the stmt
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            // 5. Set the value of user-supplied bind vars in the stmt
            st.executeUpdate();
            // 6. Return the value of the first bind variable
            return st.getObject(5);
        } catch (SQLException e) {
            if (e.getMessage().length() < 11) {
                throw new JboException(e.getMessage());
            } else {
                int end = e.getMessage().indexOf("\n");
                throw new JboException(e.getMessage().substring(11, end));
            }

        } finally {
            if (st != null) {
                try {
                    // 7. Close the statement
                    st.close();
                } catch (SQLException e) {
                    throw new JboException(e.getMessage());
                }
            }
        }
    }

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {

        CallableStatement st = null;
        try {
            // 1. Create a JDBC CallabledStatement
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            // 2. Register the first bind variable for the return value
            st.registerOutParameter(1, sqlReturnType);

            if (bindVars != null) {
                // 3. Loop over values for the bind variables passed in, if any
                for (int z = 0; z < bindVars.length; z++) {
                    // 4. Set the value of user-supplied bind vars in the stmt
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            // 5. Set the value of user-supplied bind vars in the stmt
            st.executeUpdate();
            // 6. Return the value of the first bind variable
            //  System.out.println("Function return " + st.getObject(1));
            return st.getObject(1);
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("In Exception exch and Op and generate-->");
            //int end = e.getMessage().indexOf("\n");
            //  throw new JboException(e.getMessage().substring(11, end));
            //  String msg = e.getMessage().substring(11, end);

            String msg = e.getMessage();
            System.out.println(msg);
            FacesMessage ermsg = new FacesMessage(msg);
            ermsg.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, ermsg);
            return null;


        } finally {
            if (st != null) {
                try {
                    // 7. Close the statement
                    st.close();
                } catch (SQLException e) {
                    throw new JboException(e.getMessage());
                }
            }
        }
    }
    private String multiOrgFlag;

    protected Object callStoredFunctionForGlDisp(int sqlReturnType, String stmt, Object[] bindVars) {

        CallableStatement st = null;
        try {
            // 1. Create a JDBC CallabledStatement
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            // 2. Register the first bind variable for the return value
            st.registerOutParameter(1, sqlReturnType);

            if (bindVars != null) {
                // 3. Loop over values for the bind variables passed in, if any
                for (int z = 0; z < bindVars.length; z++) {
                    // 4. Set the value of user-supplied bind vars in the stmt
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.registerOutParameter(6, VARCHAR);
            st.executeUpdate();

            try {
                setMultiOrgFlag(st.getObject(6).toString());
            } catch (SQLException sqle) {
                sqle.printStackTrace();
            }
            // 5. Set the value of user-supplied bind vars in the stmt
            // 6. Return the value of the first bind variable
            //  System.out.println("Function return " + st.getObject(1));
            return st.getObject(1);
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("In Exception exch and Op and generate-->");
            //int end = e.getMessage().indexOf("\n");
            //  throw new JboException(e.getMessage().substring(11, end));
            //  String msg = e.getMessage().substring(11, end);

            String msg = e.getMessage();
            System.out.println(msg);
            FacesMessage ermsg = new FacesMessage(msg);
            ermsg.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, ermsg);
            return null;


        } finally {
            if (st != null) {
                try {
                    // 7. Close the statement
                    st.close();
                } catch (SQLException e) {
                    throw new JboException(e.getMessage());
                }
            }
        }
    }

    /**
     * Function to call a database function "ins_disp_doc_tab" for generate a new voucher Id.
     * */
    public void generateDocNo() {
        ViewObjectImpl tvouV = getTvou1();
        Row tvouVRow = tvouV.getCurrentRow();
        String vouId = tvouVRow.getAttribute("TvouId").toString();
        Date vouDt = (Date) tvouVRow.getAttribute("TvouDt");
        Integer usrId = Integer.parseInt(tvouVRow.getAttribute("UsrIdCreate").toString());
        Integer instId = Integer.parseInt(tvouVRow.getAttribute("TvouApplInstId").toString());
        Integer slocId = Integer.parseInt(tvouVRow.getAttribute("TvouSlocId").toString());
        String orgId = tvouVRow.getAttribute("TvouOrgId").toString();
        String hoOrgId = tvouVRow.getAttribute("TvouHoOrgId").toString();
        String cldId = tvouVRow.getAttribute("TvouCldId").toString();
        Integer docId = 55;
        Integer vouType = Integer.parseInt(tvouVRow.getAttribute("TvouTypeId").toString());
        System.out.println("TvouId---->" + vouId + "TvouDt---->" + vouDt + "UserId----->" + usrId + "cldId = " + cldId +
                           "slocId =  " + slocId + " instId = " + instId + " hoOrgId = " + hoOrgId + " orgId = " +
                           orgId + " docId = " + docId + " vouType = " + vouType + " ");
        try {
            callStoredFunction(VARCHAR, "APP.INS_DISP_DOC_TAB (?,?,?,?,?,?,?,?,?,?)", new Object[] {
                               cldId, slocId, instId, hoOrgId, orgId, vouId, docId, vouType, usrId, vouDt
            });

        } catch (Exception e) {
            System.out.println("generate doc no--->" + e);
        }
    }

    /**
     * Function to call a database function to validate temporary voucher before saving as GL.
     * */
    public Integer validateTempVouForGl() {
        // String name = (String) callStoredFunction(Types.VARCHAR, "fn_get_dbob_nm(?)", new Object[] { 186146 });
        String name = "PROC_TVOU_VALIDATIONS";
        callStoredProcedure1("FIN." + name + "(?,?,?,?,?,?,?)", new Object[] {
                             getTvou1().getCurrentRow().getAttribute("TvouCldId"),
                             getTvou1().getCurrentRow().getAttribute("TvouSlocId"),
                             getTvou1().getCurrentRow().getAttribute("TvouApplInstId"),
                             getTvou1().getCurrentRow().getAttribute("TvouHoOrgId"),
                             getTvou1().getCurrentRow().getAttribute("TvouOrgId"),
                             getTvou1().getCurrentRow().getAttribute("TvouId"), "F"
        });

        return countValidate;
    }

    /**
     * @param Sum
     */
    public void setSum(Number Sum) {
        this.Sum = Sum;
    }

    /**
     * @return
     */
    public Number getSum() {
        return Sum;
    }

    /**
     * @param as
     */
    public void setAs(Number as) {
        this.as = as;
    }

    /**
     * @return
     */
    public Number getAs() {
        return as;
    }

    /**
     * @param asCr
     */
    public void setAsCr(Number asCr) {
        this.asCr = asCr;
    }

    /**
     * @return
     */
    public Number getAsCr() {
        return asCr;
    }

    /**
     * @param arApFlg
     */
    public void setArApFlg(String arApFlg) {
        this.arApFlg = arApFlg;
    }

    /**
     * @return
     */
    public String getArApFlg() {
        return arApFlg;
    }

    /**
     * Container's getter for LovVouCoa.
     * @return LovVouCoa
     */
    public LovVouCoaVOImpl getLovVouCoa() {
        return (LovVouCoaVOImpl) findViewObject("LovVouCoa");
    }


    /**
     * Container's getter for TvouOc.
     * @return TvouOc
     */
    public ViewObjectImpl getTvouOc() {
        return (ViewObjectImpl) findViewObject("TvouOc");
    }

    /**
     * Container's getter for TVouOcVL1.
     * @return TVouOcVL1
     */
    public ViewLinkImpl getTVouOcVL1() {
        return (ViewLinkImpl) findViewLink("TVouOcVL1");
    }


    public void setTab(String tab) {
        this.tab = tab;
    }

    public String getTab() {
        return tab;
    }
    private Integer eoId;

    /**
     * Function to call a database function "pkg_fin.get_coa_msteo" to get EOId and EoMstId for a given natural account.
     * */
    protected Object getEoFronCoa(String stmt, Object[] bindVars) {

        CallableStatement st = null;
        try {
            // Create a JDBC CallabledStatement
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            // Register the first bind variable for the return value
            st.registerOutParameter(1, NUMBER);
            st.registerOutParameter(5, NUMBER);
            st.registerOutParameter(6, VARCHAR);
            st.registerOutParameter(7, VARCHAR);
            if (bindVars != null) {
                // Loop over values for the bind variables passed in, if any
                for (int z = 0; z < bindVars.length; z++) {
                    //  Set the value of user-supplied bind vars in the stmt
                    st.setObject(z + 2, bindVars[z]);

                }
            }
            //  Set the value of user-supplied bind vars in the stmt
            st.executeUpdate();
            //  Return the value of the first bind variable

            setEoId(Integer.parseInt(st.getObject(5).toString()));
            //       setTvouEomstId(Integer.parseInt(st.getObject(5).toString()));
            return null;
        } catch (SQLException e) {

            if (e.getMessage().length() < 11) {
                throw new JboException(e.getMessage());
            } else {
                int end = e.getMessage().indexOf("\n");
                throw new JboException(e.getMessage().substring(11, end));
            }
        } finally {
            if (st != null) {
                try {
                    //  Close the statement
                    st.close();
                } catch (SQLException e) {
                    throw new JboException(e.getMessage());
                }
            }
        }
    }

    /**
     * @param eoId
     */
    public void setEoId(Integer eoId) {
        this.eoId = eoId;
    }

    /**
     * @return
     */
    public Integer getEoId() {
        return eoId;
    }


    /** Function to call a database function "app.fn_get_wf_stat_dm" to get voucher's status according work flow.
     * @param slocId server location Id
     * @param orgId Organisation Id
     * @param docId Documentation Id (For temporary voucher its 55)
     * @param docTypEntId Document Entity Type (Which is 5055)
     * @param docTypeId voucher type id
     * @param docTxnId voucher id
     * @param docTxnDt voucher date
     * @param docUsrId user id
     * @return
     */
    public String getVoucherStatus(Integer slocId, String orgId, Integer docId, Integer docTypEntId, Integer docTypeId,
                                   String docTxnId, Date docTxnDt, Integer docUsrId) {

        return (String) callStoredFunction(VARCHAR, "APP.FN_GET_WF_STAT_DM(?,?,?,?,?,?,?,?)", new Object[] {
                                           slocId, orgId, docId, docTypEntId, docTypeId, docTxnId, docTxnDt, docUsrId
    });

    }

    public String voucherEditable() {
        return null;
    }


    /** Function to get voucher template and use it as a temporary voucher.
     * @param tmplVouId
     * Function changed on 24/01/2014 for creating voucher lines according to the select template
     */
    public void getFromTemplate(String tmplVouId) {

        //System.out.println("tmplVouId " + tmplVouId);

        ViewObjectImpl tvouVO = getTvou1();
        Row tvouCurrRow = tvouVO.getCurrentRow();
        String vouId = tvouCurrRow.getAttribute("TvouId").toString();
        String orgId = tvouCurrRow.getAttribute("TvouOrgId").toString();
        Integer slocId = Integer.parseInt(tvouCurrRow.getAttribute("TvouSlocId").toString());
        String hoOrgId = (tvouCurrRow.getAttribute("TvouHoOrgId").toString());
        String cldId = tvouCurrRow.getAttribute("TvouCldId").toString();
        Integer instId = Integer.parseInt(tvouCurrRow.getAttribute("TvouApplInstId").toString());
        Object tmplId = tvouCurrRow.getAttribute("TvouTemplateId");
        Object tvouDt = tvouCurrRow.getAttribute("TvouDt");
        Integer usrId = Integer.parseInt(tvouCurrRow.getAttribute("UsrIdCreate").toString());

        System.out.println("cldId " + cldId + " slocId " + slocId + " hoOrgId " + hoOrgId + " orgId " + orgId +
                           " instId " + instId + " tmplId " + tmplId + " vouId " + vouId + " usrId " + usrId +
                           " tvouDt " + tvouDt);
        Object callStoredFunction = callStoredFunction(VARCHAR, "FIN.FN_CREATE_VOUCHER_FROM_TMPL(?,?,?,?,?,?,?,?,?)", new Object[] {
                                                       cldId, slocId, hoOrgId, orgId, instId, tmplId, vouId, usrId,
                                                       tvouDt
        });
        System.out.println("callStoredFunction = " + callStoredFunction);
        getDBTransaction().postChanges();

        setTvouTemplateHeader(vouId, (String) tmplId);
    }


    /** function to call database function "fn_get_chq_no_fill_policy" to check fill policy of cheque detail insertion auto or manual.
     * @return
     */
    public String chqNoFillPolicy() {

        return (String) callStoredFunction(VARCHAR, "FIN.FN_GET_CHQ_NO_FILL_POLICY()", new Object[] { });
        //remove from package
    }

    /** function to call database function to validate cheque no.
     * @param p_sloc_id server location id
     * @param p_bnk_id bank id
     * @param p_chq_buk_id cheque book id
     * @param p_chq_no cheque no
     * @return
     */
    //not used as on 10/05/2013
    public String validateChqNo(Integer p_sloc_id, Integer p_bnk_id, Integer p_chq_buk_id, Number p_chq_no) {
        System.out.println("Validate Cheque No.----->" + p_sloc_id + "Bank id--->" + p_bnk_id + "chkBk id-->" +
                           p_chq_buk_id + "Cheque No-->" + p_chq_no);
        return (String) callStoredFunction(VARCHAR, "FIN.fn_validate_chq_no (?,?,?,?)", new Object[] {
                                           p_sloc_id, p_bnk_id, p_chq_buk_id, p_chq_no
    });


    }

    /** function to call database function "fin.fn_get_chq_no" to get next cheque no
     * @param p_sloc_id server location id
     * @param p_bnk_id bank id
     * @param p_search_mode search mode
     * @param p_chq_buk_id cheque book id
     * @return
     */
    public String getLastChqNo(Integer p_sloc_id, Integer p_bnk_id, String p_search_mode, Integer p_chq_buk_id) {

        String chqSlNO = callStoredFunction(VARCHAR, "fin.fn_get_chq_no (?,?,?,?)", new Object[] {
                                            p_sloc_id, p_bnk_id, p_search_mode, p_chq_buk_id
        }).toString();
        //remove from package
        return chqSlNO;
    }

    /** Function to call database function to update cheque  in cheque table so that this cheque will not be used again
     * @param p_sloc_id server location id
     * @param p_bnk_id book id
     * @param p_chq_buk_id chque book no
     * @param p_chq_no cheque no
     * @param p_org_id organisation id
     * @param p_doc_id document id
     * @param p_vou_id voucher id
     * @param p_vou_dt voucher date
     * @param p_usr_id user id
     * @param p_chq_bk_stat cheque book status
     * @param p_chq_bk_stat_dt cheque book status date
     * @param p_mod_dt modification date
     * @param p_post_flg post flag
     * @return
     */
    public String updateChqNo(Integer p_sloc_id, Integer p_bnk_id, Integer p_chq_buk_id, Number p_chq_no,
                              String p_org_id, Integer p_doc_id, String p_vou_id, Date p_vou_dt, Integer p_usr_id,
                              Integer p_chq_bk_stat, Date p_chq_bk_stat_dt, Date p_mod_dt, String p_post_flg) {


        return (String) callStoredFunction(VARCHAR, "fin.fn_upd_chq_no_data (?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                           p_sloc_id, p_bnk_id, p_chq_buk_id, p_chq_no, p_org_id, p_doc_id, p_vou_id,
                                           p_vou_dt, p_usr_id, p_chq_bk_stat, p_chq_bk_stat_dt, p_mod_dt, p_post_flg
    });


    }

    /**
     Function to call database function "fn_ins_tvoulines_dtl" for copying data from temporary table ( imported data from csv file of voucher line ) to tvoulines table.
     */
    public void importTvouLn() {
        // do be reviewed
        callStoredFunction(VARCHAR, "fin.fn_ins_tvoulines_dtl()", new Object[] { });
    }

    /**
     Function to call database function "fn_ins_tvouadj" for copying data from temporary table ( imported data from csv file of adjustment ) to tvouadj table.
     */
    public void importTvouAdj() {
        // do be reviewed
        callStoredFunction(VARCHAR, "fin.fn_ins_tvouadj()", new Object[] { });
    }

    /**
     Function to call database function "fn_ins_tvouadj_dtl" for copying data from temporary table ( imported data from csv file of advance adjustment ) to tvouadjdtl table.
     */
    public void importTvouAdjDtl() {
        // do be reviewed
        callStoredFunction(VARCHAR, "fin.fn_ins_tvouadj_dtl()", new Object[] { });
    }

    /** Function to call database function for getting serial no of tvou lines.
     * @param VouId voucher id
     * @return serial no
     */
    public Integer getTvouLnSn(String VouId) {

        return Integer.parseInt(callStoredFunction(NUMBER, "FIN.FN_GET_MAX_SLNO_TVOU(?)", new Object[] {
                                                   VouId }).toString());
        // do be reviewed
    }

    /**
     * @param currId
     */
    public void setCurrId(Integer currId) {
        this.currId = currId;
    }

    /**
     * @return
     */
    public Integer getCurrId() {
        return currId;
    }

    /** Function to call database function for copying description from tvoulines and merge it to header line.
     * @param VouId voucher id
     */
    public void updateTvouNarration(String VouId) {

        callStoredFunction(NUMBER, "fin.FN_UPD_NARR(?)", new Object[] { VouId });
        // do be reviewed
    }

    /** function to call database function "fn_tvou_lines_exc_flc" to check for exchange fluctuation in foreign currency at the time of adjustment ,
     * if any then insert a row in tvou lines to balance  basic amount.
     * @param VouId voucher id
     * @param VouDt voucher date
     */
    public void exchangeFluct(String VouId, Date VouDt) {
        System.out.println("Vouid is-->" + VouId + "date is---->" + VouDt);
        try {
            getDBTransaction().postChanges();
            callStoredFunction(NUMBER, "fin.fn_tvou_lines_exc_flc(?,?)", new Object[] { VouId, VouDt });
        } catch (Exception e) {
            System.out.println("exchaneg fliuc--->" + e.getMessage());
        }
        // do be reviewed
    }

    public String exchangeFluctuationUpdate() {
        System.out.println("in exchangeFluctuationUpdate");
        ViewObjectImpl impl = getTvouLinesLnk();
        Row[] filteredRows = impl.getFilteredRows("TvouLnTyp", "EX");
        if (filteredRows.length > 0) {
            System.out.println("after getting ex row");
            Object TvouAmtBs = filteredRows[0].getAttribute("TvouAmtBs");
            Object TvouAmtTyp = filteredRows[0].getAttribute("TvouAmtTyp");
            // Dr - Cr

            System.out.println("amount of exc = " + TvouAmtBs);
            if (TvouAmtBs != null) {

                Number bsAmtE = (Number) TvouAmtBs;
                System.out.println("");
                if (TvouAmtTyp.toString().equalsIgnoreCase("Dr")) {
                    bsAmtE = bsAmtE.multiply(-1);
                }


                Row[] row = impl.getFilteredRows("TvouTxnTypAdj", "Y");
                System.out.println("row = " + row.length);

                if (row.length > 0) {
                    updateLineExchnge(row, bsAmtE);
                }

                Row[] rowA = impl.getFilteredRows("TvouTxnTypAdj", "A");
                System.out.println("row A= " + rowA.length);

                if (rowA.length > 0) {
                    updateLineExchnge(rowA, bsAmtE);
                }
            }
        }
        return null;
    }

    public String updateLineExchnge(Row[] row, Number bsAmtE) {
        Object bsAMt = row[0].getAttribute("TvouAmtSp");
        Object cc = row[0].getAttribute("TvouCc");
        System.out.println("amount of adj line = " + bsAMt + "  cc" + cc);
        if (bsAMt != null) {
            Number bsAmtL = (Number) bsAMt;

            if (row[0].getAttribute("TvouAmtTyp") != null) {
                if (row[0].getAttribute("TvouAmtTyp").toString().equalsIgnoreCase("Cr")) {

                    bsAmtL = bsAmtL.multiply(-1);
                    bsAmtL = bsAmtL.multiply((Number) cc);
                } else {
                    bsAmtL = bsAmtL.multiply((Number) cc);

                }
            }

            Number bsA = bsAmtL.add(bsAmtE);
            System.out.println("afmount before setting = " + bsA);
            row[0].setAttribute("TvouAmtBs", bsA.abs());
            if (bsA.compareTo(0) < 0) {
                row[0].setAttribute("TvouAmtTyp", "Cr");
            } else
                row[0].setAttribute("TvouAmtTyp", "Dr");

        }
        return null;
    }

    /** Function to call a database function "FIN.FN_ins_tvouline_tax" to check for manual entry of tax, if present then insert data in to corresponding tax table.
     * @param PARAM_CLD_ID cloud location id
     * @param PARAM_SLOC_ID server location id
     * @param PARAM_INST_ID application instance id
     * @param PARAM_HO_ORG_ID head organization location id
     * @param PARAM_ORG_ID organisation id
     * @param PARAM_TVOU_ID voucher id
     * @param PARAM_TVOU_DT voucher date
     * @param PARAM_CURR_ID_SP specific currency id
     * @param PARAM_UID user id
     * @param PARAM_USR_DT voucher date
     */
    public void insTvouLineTax(String PARAM_CLD_ID, Integer PARAM_SLOC_ID, Integer PARAM_INST_ID,
                               String PARAM_HO_ORG_ID, String PARAM_ORG_ID, String PARAM_TVOU_ID, Date PARAM_TVOU_DT,
                               Integer PARAM_CURR_ID_SP, Integer PARAM_UID, Date PARAM_USR_DT) {
        /* System.out.println("PARAM_CLD_ID = " + PARAM_CLD_ID + " PARAM_SLOC_ID = " + PARAM_SLOC_ID +
                           " PARAM_INST_ID = " + PARAM_INST_ID + " PARAM_HO_ORG_ID = " + PARAM_HO_ORG_ID +
                           " PARAM_ORG_ID = " + PARAM_ORG_ID + " PARAM_TVOU_ID = " + PARAM_TVOU_ID +
                           " PARAM_TVOU_DT = " + PARAM_TVOU_DT + " PARAM_CURR_ID_SP = " + PARAM_CURR_ID_SP +
                           " PARAM_UID = " + PARAM_UID + " PARAM_USR_DT = " + PARAM_USR_DT); */
        callStoredFunction(NUMBER, "FIN.FN_INS_TVOULINE_TAX(?,?,?,?,?,?,?,?,?,?)", new Object[] {
                           PARAM_CLD_ID, PARAM_SLOC_ID, PARAM_INST_ID, PARAM_HO_ORG_ID, PARAM_ORG_ID, PARAM_TVOU_ID,
                           PARAM_TVOU_DT, PARAM_CURR_ID_SP, PARAM_UID, PARAM_USR_DT
        });
        //re organize parameters, add cloud
        // to be reviewed
    }

    /**Function to call a database function "FIN.FN_INS_TVOULINE_TDS" to check for manual entry of tds, if present then insert data in to corresponding tds table.
     * @param PARAM_CLD_ID cloud location id
     * @param PARAM_SLOC_ID server location id
     * @param PARAM_INST_ID application instance id
     * @param PARAM_HO_ORG_ID head organization location id
     * @param PARAM_ORG_ID organisation id
     * @param PARAM_TVOU_ID voucher id
     * @param PARAM_TVOU_DT voucher date
     * @param PARAM_CURR_ID_SP specific currency id
     * @param PARAM_UID user id
     * @param PARAM_USR_DT voucher date
     */
    public void insTvouLineTds(String PARAM_CLD_ID, Integer PARAM_SLOC_ID, Integer PARAM_INST_ID,
                               String PARAM_HO_ORG_ID, String PARAM_ORG_ID, String PARAM_TVOU_ID, Date PARAM_TVOU_DT,
                               Integer PARAM_CURR_ID_SP, Integer PARAM_UID, Date PARAM_USR_DT) {
        System.out.println(" IN IN STVOULINE TDS PARAMS---PARAM_SLOC_ID " + PARAM_SLOC_ID + "-- PARAM_ORG_ID " +
                           PARAM_ORG_ID + " PARAM_TVOU_ID " + PARAM_TVOU_ID + "PARAM_TVOU_DT =  " + PARAM_TVOU_DT +
                           "PARAM_CURR_ID_SP " + PARAM_CURR_ID_SP + "PARAM_UID " + PARAM_UID + " PARAM_USR_DT" +
                           PARAM_USR_DT + " PARAM_CLD_ID = " + PARAM_CLD_ID + " PARAM_INST_ID =" + PARAM_INST_ID +
                           " PARAM_HO_ORG_ID = " + PARAM_HO_ORG_ID + "");
        callStoredFunction(NUMBER, "FIN.FN_INS_TVOULINE_TDS(?,?,?,?,?,?,?,?,?,?)", new Object[] {
                           PARAM_CLD_ID, PARAM_SLOC_ID, PARAM_INST_ID, PARAM_HO_ORG_ID, PARAM_ORG_ID, PARAM_TVOU_ID,
                           PARAM_TVOU_DT, PARAM_CURR_ID_SP, PARAM_UID, PARAM_USR_DT
        });

    }

    /**
     * Container's getter for TvouSearchVO1.
     * @return TvouSearchVO1
     */
    public TvouSearchVOImpl getTvouSearchVO() {
        return (TvouSearchVOImpl) findViewObject("TvouSearchVO");
    }


    /**
     * Container's getter for LovDistCoaVO.
     * @return LovDistCoaVO
     */
    public ViewObjectImpl getLovDistCoaVO() {
        return (ViewObjectImpl) findViewObject("LovDistCoaVO");
    }


    /** Function to check whether a voucher of ARAPOSVo is already adjusted or not.
     * @param table
     * @param mst_vou_id
     * @param mst_vou_id_val
     * @param adj_vou_id : value TVOU_RADJ_VOU_ID for level 1 and TVOU_ADJ_VOU_ID for level 2
     * @param adj_vou_id_val
     * @param radj_vou_id
     * @param radj_vou_id_val
     * @return
     */

    /**
     * Container's getter for LovCogSr1.
     * @return LovCogSr1
     */
    public ViewObjectImpl getLovCogSr1() {
        return (ViewObjectImpl) findViewObject("LovCogSr1");
    }


    /** Function to call database function "PKG_FIN_TVOU.FN_OUTSTANDING_AMT" to get outstanding amount of Ar Ap entry.
     * @param vouDt
     * @return
     */
    public Object getOutstanding(Object cldId, Object slcId, Object hoOrgId, Object orgId, Object instId,
                                 Object radjVouId, Object radjGlSlNo, Object radjArapSlNo, Object vouDt) {
        return callStoredFunction(NUMERIC, "FIN.FN_OUTSTANDING_AMT(?,?,?,?,?,?,?,?,?)", new Object[] {
                                  cldId, slcId, hoOrgId, orgId, instId, radjVouId, radjGlSlNo, radjArapSlNo, vouDt
    });

    }

    public BigDecimal checkOsAmt(String vouId, String amt) {
        return (BigDecimal) callStoredFunction(NUMERIC, "PKG_FIN_TVOU.fn_chk_adj_os(?,?)", new Object[] { vouId, amt });
        //move outside package, add params

    }

    /**
     * Container's getter for ViewforLov1.
     * @return ViewforLov1
     */
    public ViewObjectImpl getViewforLov() {
        return (ViewObjectImpl) findViewObject("ViewforLov");
    }

    /**
     * Container's getter for LovTvouIdVO.
     * @return LovTvouIdVO
     */
    public LovTvouIdVOImpl getLovTvouIdVO() {
        return (LovTvouIdVOImpl) findViewObject("LovTvouIdVO");
    }


    /**function to call a database function "FN_GET_TAX_BA" to get basic amount of voucher on which tax is applied
     * @param tvouId
     * @param cldId
     * @param hoOrgId
     * @return
     */
    public BigDecimal getTaxBA(String tvouId, String cldId, String hoOrgId) {

        //function removed from package and new parameters added. Parameter from bindings not used
        //27-02-2014.
        ViewObjectImpl tvouVO = getTvou1();
        Row tvouCurrRow = tvouVO.getCurrentRow();
        String orgId = tvouCurrRow.getAttribute("TvouOrgId").toString();
        ViewObjectImpl hdRl = getTvouTaxRuleHd();
        Row currentRow = hdRl.getCurrentRow();
        if (currentRow!=null) {
            if (currentRow.getAttribute("TvouOrgId")!=null) {
                orgId = currentRow.getAttribute("TvouOrgId").toString();
            }
        }

        String vouId = tvouCurrRow.getAttribute("TvouId").toString();
        Integer slocId = Integer.parseInt(tvouCurrRow.getAttribute("TvouSlocId").toString());
        hoOrgId = (tvouCurrRow.getAttribute("TvouHoOrgId").toString());
        cldId = tvouCurrRow.getAttribute("TvouCldId").toString();
        Integer instId = Integer.parseInt(tvouCurrRow.getAttribute("TvouApplInstId").toString());
        ViewObjectImpl hd = getTvouTaxRuleHd();
        if (hd.getRowCount() > 0) {
            return (BigDecimal) callStoredFunction(NUMERIC, "FN_GET_TAX_BA(?,?,?,?,?,?)", new Object[] {
                                                   cldId, slocId, hoOrgId, orgId, instId, vouId
        });
        }
        return new BigDecimal(-1);
    }

    /** function to call a database function "FN_GET_TDS_BA" to get basic amount of voucher on which tds is applied
     * @param tvouId
     * @param cldId
     * @param hoOrgId
     * @return
     */
    public BigDecimal getTdsBA(String tvouId, String cldId, String hoOrgId) {

        //function removed from package and new parameters added. Parameter from bindings not used
        //27-02-2014.

        ViewObjectImpl tvouVO = getTvou1();
        Row tvouCurrRow = tvouVO.getCurrentRow();
        String vouId = tvouCurrRow.getAttribute("TvouId").toString();
        String orgId = tvouCurrRow.getAttribute("TvouOrgId").toString();

        ViewObjectImpl hdRl = getTvouTdsRuleHd();
        Row currentRow = hdRl.getCurrentRow();
        if (currentRow!=null) {
            if (currentRow.getAttribute("TvouOrgId")!=null) {
                 orgId = currentRow.getAttribute("TvouOrgId").toString();
            }
        }
        Integer slocId = Integer.parseInt(tvouCurrRow.getAttribute("TvouSlocId").toString());
        hoOrgId = (tvouCurrRow.getAttribute("TvouHoOrgId").toString());
        cldId = tvouCurrRow.getAttribute("TvouCldId").toString();
        Integer instId = Integer.parseInt(tvouCurrRow.getAttribute("TvouApplInstId").toString());
        getDBTransaction().postChanges();
        //ViewObjectImpl hd = getTvouTdsRuleHd();
        if (hdRl.getRowCount() > 0) {
            return (BigDecimal) callStoredFunction(NUMERIC, "FN_GET_TDS_BA(?,?,?,?,?,?)", new Object[] {
                                                   cldId, slocId, hoOrgId, orgId, instId, vouId
        });
        }
        return new BigDecimal(-1);
    }

    public void exceptioHandeler() {
        System.out.println("Inside Handeler");
        StringBuilder msg = new StringBuilder();
        msg.append("<html><body><p><b>Failed to load content-Network Error</b></p>");
        msg.append("<p><b>Data Processing Failed-</b></p>");
        msg.append("<ul><li>Reload the page</li><li>Or close tab</li><li>Something went wrong-Contact ESS!</li></ul>");
        msg.append("</body></html>");
        FacesMessage message = new FacesMessage(msg.toString());
        message.setSeverity(FacesMessage.SEVERITY_WARN);
        FacesContext fc = FacesContext.getCurrentInstance();
        fc.addMessage(null, message);

    }


    /**
     * Container's getter for TvouBillDtl1.
     * @return TvouBillDtl1
     */
    public ViewObjectImpl getTvouBillDtl1() {
        return (ViewObjectImpl) findViewObject("TvouBillDtl1");
    }

    /**
     * Container's getter for TvouLineToTvouBillVL1.
     * @return TvouLineToTvouBillVL1
     */
    public ViewLinkImpl getTvouLineToTvouBillVL1() {
        return (ViewLinkImpl) findViewLink("TvouLineToTvouBillVL1");
    }

    public void billDetail() {
        try {
            // System.out.println("Inside Bill Detail");
            ViewObjectImpl tvouV = getTvou1();
            // Row tvouRow = getTvouLinesLnk().getCurrentRow();
            Row tvouVRow = tvouV.getCurrentRow();


            String cldId = tvouVRow.getAttribute("TvouCldId").toString();
            String TvouPrjId = tvouVRow.getAttribute("TvouPrjId").toString();

            Integer slocId = Integer.parseInt(tvouVRow.getAttribute("TvouSlocId").toString());
            String hoOrgId = tvouVRow.getAttribute("TvouHoOrgId").toString();

            String orgId = tvouVRow.getAttribute("TvouOrgId").toString();
            Integer instId = 1;
            String vouId = tvouVRow.getAttribute("TvouId").toString();

            getDBTransaction().postChanges();
            if (!tvouVRow.getAttribute("TvouTypeId").equals(16)) {
                System.out.println("in other than imprest");
                callStoredFunction(NUMBER, "fin.FN_TVOU_BILL_DTL (?,?,?,?,?,?,?)", new Object[] {
                                   cldId, slocId, hoOrgId, orgId, TvouPrjId, instId, vouId
                });
            } else if (tvouVRow.getAttribute("TvouTypeId").equals(16)) {
                System.out.println("in  imprest");

                callStoredFunction(NUMBER, "fin.FN_TVOU_BILL_DTL_IMPRST (?,?,?,?,?,?,?)", new Object[] {
                                   cldId, slocId, hoOrgId, orgId, TvouPrjId, instId, vouId
                });
            }
            // System.out.println("Inside Bill Detail-Function called");
        } catch (Exception e) {
            System.out.println("Exception in Bill Detail");
            e.printStackTrace();
        }
    }

    /**Method call for Bill Detail Tds
     * 29-04-2013 @Ashish Kumar
     * Edited by Priyank Khare 31-05-2014
     * Function is now being called bill wise for all bills.
     * Earlier inserted tds_rule_lines details will be deleted and re-inserted based on op flag.
     * */

    public String procTdsForHdrBill(String ruleid) {
        setAs(new Number(0));
        System.out.println("ruleid = " + ruleid);

        ViewObjectImpl tvouTds = getTvouTdsRuleHd();
        //tvouTds.executeQuery();
        /** Get value of selected rule id from current row of tvouTdsRule */

        Row row = tvouTds.getCurrentRow();
        row.setAttribute("TvouTdsRuleId", ruleid);
        System.out.println("row.get1 = " + row.getAttribute("TvouTdsRuleId"));

        TvouVOImpl tvou = getTvou1();
        Row currentRow = tvou.getCurrentRow();
        Date dt = (Date) currentRow.getAttribute("TvouDt");
        String TvouPrjId = (String) currentRow.getAttribute("TvouPrjId");
        row.setAttribute("TvouDt", dt.dateValue());
        System.out.println("row.get = " + row.getAttribute("TvouTdsRuleId"));

        //        getDBTransaction().postChanges();
        ViewObjectImpl vouLine = getTvouBillDtl1();

        /** Create iterator of tvouBill view */
        RowSetIterator rit = vouLine.createRowSetIterator(null);

        Object vouId = getTvouLinesLnk().getCurrentRow().getAttribute("TvouId");
        Object slocId = getTvouLinesLnk().getCurrentRow().getAttribute("TvouSlocId");
        Object orgId = getTvouLinesLnk().getCurrentRow().getAttribute("TvouOrgId");
        Object usrId = getTvouLinesLnk().getCurrentRow().getAttribute("UsrIdCreate");
        Object cldId = getTvouLinesLnk().getCurrentRow().getAttribute("TvouCldId");
        Object hoOrgId = getTvouLinesLnk().getCurrentRow().getAttribute("TvouHoOrgId");
        Object tvouDt = getTvouLinesLnk().getCurrentRow().getAttribute("TvouDt");
        Object tvouSlNo = getTvouLinesLnk().getCurrentRow().getAttribute("TvouSlNo");
        Object instId = getTvouLinesLnk().getCurrentRow().getAttribute("TvouApplInstId");
        Object currIdsp = getTvouLinesLnk().getCurrentRow().getAttribute("TvouCurrIdSp");

System.out.println("before calling function");
System.out.println("cldId = "+cldId+"slocId = "+slocId+"hoOrgId ="+hoOrgId+"orgId ="+orgId+"TvouPrjId ="+TvouPrjId+"vouid = "+ vouId+"ruleid = "+ruleid+"tvouDt = "+tvouDt);
        callStoredProcedure("FIN.INS_TEMP_TDS_LINE_EXP_REP(?,?,?,?,?,?,?,?)", new Object[] {
                            cldId, slocId, hoOrgId, orgId, TvouPrjId, vouId, ruleid, tvouDt
        });
        System.out.println("after calling function");
        while (rit.hasNext()) {
            Row lineRow = rit.next();
            if (lineRow.getAttribute("TvouTdsFlg") != null) {
                Number finAmt = (Number) lineRow.getAttribute("TvouAmtSp");
                if (lineRow.getAttribute("TvouTdsFlg").equals("Y") && lineRow.getAttribute("TvouCoaId") != null) {
                    as = as.add(finAmt);
                }
            }
        }

        /** set taxable amount in taxrule table by sum calculated above. */
         System.out.println("Sum of billAmount is" + as);
        row.setAttribute("TvouTaxableAmt", as);
        row.setAttribute("TvouTdsAmtSp", as);
        row.setAttribute("TvouOrgId", orgId);

        rit.closeRowSetIterator();

        return null;

    }


    /**
     * Function to call a database function "PKG_FIN_TVOU.fn_tvou_tds" for inserting applied tds lines from tds rule line to tvou lines in case of expense voucher 30-04-2013 @Ashish Kumar.
     * */
    public void tdsConsolidationExpense() {
        try {
            ViewObjectImpl tvouV = getTvou1();
            Row tvouVRow = tvouV.getCurrentRow();
            Integer vouSubTyp;
            String vouId = tvouVRow.getAttribute("TvouId").toString();
            Integer vouTyp = Integer.parseInt(tvouVRow.getAttribute("TvouTypeId").toString());
            Integer tvouSpId = Integer.parseInt(tvouVRow.getAttribute("TvouCurrIdSp").toString());
            String cldId = tvouVRow.getAttribute("TvouCldId").toString();
            String hoOrgId = tvouVRow.getAttribute("TvouHoOrgId").toString();
            String orgId = tvouVRow.getAttribute("TvouOrgId").toString();
            String TvouPrjId = tvouVRow.getAttribute("TvouPrjId").toString();

            if (tvouVRow.getAttribute("TvouSubTypeId") != null) {
                vouSubTyp = Integer.parseInt(tvouVRow.getAttribute("TvouSubTypeId").toString());
            } else {
                vouSubTyp = 0;
            }
            Integer vouInsId = Integer.parseInt(tvouVRow.getAttribute("TvouApplInstId").toString());
            callStoredFunction(NUMBER, "FIN.FN_TVOU_TDS(?,?,?,?,?,?,?,?,?,?)", new Object[] {
                               cldId, slocId, vouInsId, hoOrgId, orgId, TvouPrjId, vouId, vouTyp, vouSubTyp, tvouSpId
            });


            ViewObjectImpl vouLine = getTvouBillDtl1();
            /** Create iterator of tvouBill view */
            Integer coaIdExp = 0;
            RowSetIterator rit = vouLine.createRowSetIterator(null);
            while (rit.hasNext()) {
                Row lineRow = rit.next();
                // System.out.println("TDs Flag from bill--->" + lineRow.getAttribute("TvouTdsFlg"));
                if (lineRow.getAttribute("TvouTdsFlg") != null) {
                    if (lineRow.getAttribute("TvouTdsFlg").equals("Y") && lineRow.getAttribute("TvouCoaId") != null) {
                        coaIdExp = Integer.parseInt(lineRow.getAttribute("TvouCoaId").toString());


                    }
                }

            }

        } catch (Exception e) {
            System.out.println("Excpetion in tds consolidation expense--" + e);
        }

    }
    /**Methods to apply Tax in case of Expense Voucher 31-05-2013*/

    /**Method call for Bill Detail
     * Tds 29-04-2013 @Ashish Kumar
     * Edited by Priyank Khare 31-05-2014
     * Function is now being called bill wise for all bills.
     * Earlier inserted tds_rule_lines details will be deleted and re-inserted based on op flag.
     * */

    public String procTaxForHdrBill(String ruleid) {
        setAs(new Number(0));
        ViewObjectImpl tvouTds = getTvouTaxRuleHd();
        /** Get value of selected rule id from current row of tvouTdsRule */
        Row row = tvouTds.getCurrentRow();
        Integer taxRuleId = Integer.parseInt(ruleid);

        ViewObjectImpl vouLine = getTvouBillDtl1();
        Row currentRow = getTvouLinesLnk().getCurrentRow();
        row.setAttribute("TvouDt", currentRow.getAttribute("TvouDt"));
        row.setAttribute("TvouTaxRuleId", taxRuleId);

        Object vouId = currentRow.getAttribute("TvouId");
        Object slocId = currentRow.getAttribute("TvouSlocId");
        Object orgId = currentRow.getAttribute("TvouOrgId");
        Object usrId = currentRow.getAttribute("UsrIdCreate");
        Object currIdsp = currentRow.getAttribute("TvouCurrIdSp");
        Object cldId = currentRow.getAttribute("TvouCldId");
        Object hoOrgId = currentRow.getAttribute("TvouHoOrgId");
        Object tvouDt = currentRow.getAttribute("TvouDt");
        Object tvouSlNo = currentRow.getAttribute("TvouSlNo");
        Object instId = currentRow.getAttribute("TvouApplInstId");
        Object TvouPrjId = currentRow.getAttribute("TvouPrjId");
    
        /** Create iterator of tvouBill view */
        RowSetIterator rit = vouLine.createRowSetIterator(null);
        while (rit.hasNext()) {
            Row lineRow = rit.next();
            if (lineRow.getAttribute("TvouTaxFlg") != null) {

                Number finAmt = (Number) lineRow.getAttribute("TvouAmtSp");

                Integer billSlNo = Integer.parseInt(lineRow.getAttribute("TvouBillSlNo").toString());

                if (lineRow.getAttribute("TvouTaxFlg").equals("Y") && lineRow.getAttribute("TvouCoaId") != null) {
                    as = as.add((Number) (lineRow.getAttribute("TvouAmtSp")));

                } else if (lineRow.getAttribute("TvouTaxFlg").equals("N") &&
                           lineRow.getAttribute("TvouCoaId") != null) {

              
                }
            }
        }
        /** set taxable amount in taxrule table by sum calculated above. */
        //  System.out.println("Sum of billAmount is" + as);
        row.setAttribute("TvouTaxableAmt", as);
        row.setAttribute("TvouTaxAmtSp", as);
        row.setAttribute("TvouPrjId", TvouPrjId);


        rit.closeRowSetIterator();


        System.out.println("parametert for rep function a= " + cldId + " - " + slocId + " - " + hoOrgId + " - " +
                           orgId + " - " + TvouPrjId + " - " + vouId + " - " + ruleid + " - " + tvouDt);
        getDBTransaction().postChanges();
        callStoredProcedure("FIN.INS_TEMP_TDS_LINE_EXP_REP(?,?,?,?,?,?,?,?)", new Object[] {
                            cldId, slocId, hoOrgId, orgId, TvouPrjId, vouId, ruleid, tvouDt
        });
        // getTvouTaxRuleLineHd().executeQuery();
        return null;

    }


    /**
     * Function to call a database function "PKG_FIN_TVOU.fn_tvou_tds" for inserting applied tds lines from tds rule line to tvou lines in case of expense voucher 30-04-2013 @Ashish Kumar.
     * */
    public void taxConsolidationExpense() {
        try {
            ViewObjectImpl tvouV = getTvou1();
            Row tvouVRow = tvouV.getCurrentRow();
            Integer vouSubTyp;

            if (tvouVRow.getAttribute("TvouSubTypeId") != null) {
                vouSubTyp = Integer.parseInt(tvouVRow.getAttribute("TvouSubTypeId").toString());
            } else {
                vouSubTyp = 0;
            }

            ViewObjectImpl vouLine = getTvouBillDtl1();
            /** Create iterator of tvouBill view */
            Integer coaIdExp = 0;
            RowSetIterator rit = vouLine.createRowSetIterator(null);
            while (rit.hasNext()) {
                Row lineRow = rit.next();
                //  System.out.println("Tax Flag from bill--->" + lineRow.getAttribute("TvouTaxFlg"));
                if (lineRow.getAttribute("TvouTaxFlg") != null) {
                    if (lineRow.getAttribute("TvouTaxFlg").equals("Y") && lineRow.getAttribute("TvouCoaId") != null) {
                        coaIdExp = Integer.parseInt(lineRow.getAttribute("TvouCoaId").toString());


                    }
                }
            }
        } catch (Exception e) {
            System.out.println("Exception in Tax consolidation Expense-->" + e);
        }

    }

    public void voucherDeleteWdtId(String cld_id, Integer sloc_id, String ho_org, String org_id, Integer usr_id,
                                   String mode_id) {

        setSearchPageParameters(ho_org, org_id, cld_id, sloc_id, usr_id, mode_id);
        setLovDistCoaVoParameters(cld_id, org_id, ho_org, sloc_id);
        //
        //        try {
        //            callStoredFunction(NUMBER, "FIN.FN_TVOU_DOC_MISMAT_DEL(?,?,?,?)", new Object[] {
        //                               ho_org, org_id, cld_id, sloc_id });
        //            //check whether in user ore delete..
        //        } catch (Exception e) {
        //            System.out.println("Exception in search page load-" + e);
        //        }
        // to be reviewed


    }

    /**
     * Method to set the parameter for search page
     * **/
    private void setSearchPageParameters(String ho_org, String org_id, String cld_id, Integer sloc_id, Integer usr_id,
                                         String mode_id) {

        this.getTvouSearchVO().setNamedWhereClauseParam("BindCldId", cld_id);
        this.getTvouSearchVO().setNamedWhereClauseParam("BindSlcId", sloc_id);
        this.getTvouSearchVO().setNamedWhereClauseParam("BindHoOrgId", ho_org);
        this.getTvouSearchVO().setNamedWhereClauseParam("BindOrgId", null);
        this.getTvouSearchVO().setNamedWhereClauseParam("BindUsrId", usr_id);
        this.getTvouSearchVO().setNamedWhereClauseParam("BindModId", mode_id);
        this.getTvouSearchVO().executeQuery();
    }

    /**
     * Method to Adjust all the balance in the TvouAdj
     * **/
    public void adjustTvouAdjAllRows(String p_action_typ) {

        ViewObject v1 = findViewObject("TvouAdj");
        RowSetIterator rit = v1.createRowSetIterator(null);
        /** Iterate through every visible row of view */
        while (rit.hasNext()) {
            Row row = rit.next();
            if (p_action_typ.compareToIgnoreCase("true") ==
                0) {
                /** if check all box is selected then select check box of every row and fill adjusted amount with outstanding amount.*/
                //System.out.println("CurrCcTrx is--->"+row.getAttribute("TvouCurrCcTrx"));
                if (((Number) row.getAttribute("TvouCurrCcTrx")).compareTo(0) == 0 ||
                    ((Number) row.getAttribute("TvouCurrCcTrx")).compareTo(0) == -1) {

                } else {
                    row.setAttribute("adjustAllTrans", true);
                }
            } else {
                row.setAttribute("adjustAllTrans", false);

            }

        }

        v1.executeQuery();
    }


    /**
     * Container's getter for UserLov1.
     * @return UserLov1
     */
    public ViewObjectImpl getUserLov1() {
        return (ViewObjectImpl) findViewObject("UserLov1");
    }


    String add_mode = null;
    String edit_mode = null;
    String view_mode = null;
    String del_mode = null;

    protected Object callStoredFunctionParam(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.registerOutParameter(7, VARCHAR);
            st.registerOutParameter(8, VARCHAR);
            st.registerOutParameter(9, VARCHAR);
            st.registerOutParameter(10, VARCHAR);
            st.executeUpdate();
            try {
                setAdd_mode(st.getObject(7).toString());
                setEdit_mode((st.getObject(8).toString()));
                setView_mode(st.getObject(9).toString());
                setDel_mode(st.getObject(10).toString());
            } catch (NullPointerException e) {
                System.out.println(e);
                e.printStackTrace();
            }
            return st.getObject(1);

        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }


    public Integer on_load_page(String cld_id, Integer sloc_id, String org_id, Integer usr_id) {
        int count = 0;

        callStoredFunctionParam(VARCHAR, "App.fn_get_usr_doc_access_param(?,?,?,?,?,?,?,?,?)", new Object[] {
                                cld_id, sloc_id, org_id, 55, usr_id
        });

        String calledFrom = resolvElObj("#{pageFlowScope.PARAM_PG_CALLED}").toString();
        if (add_mode.equalsIgnoreCase("Y") == false && add_mode.equalsIgnoreCase("N") == false) {
            count = 1;
        } else if (edit_mode.equalsIgnoreCase("Y") == false && edit_mode.equalsIgnoreCase("N") == false) {
            count = 1;
        } else if (view_mode.equalsIgnoreCase("Y") == false && view_mode.equalsIgnoreCase("N") == false) {
            count = 1;
        } else if (del_mode.equalsIgnoreCase("Y") == false && del_mode.equalsIgnoreCase("N") == false) {
            count = 1;
        } else if (calledFrom.equalsIgnoreCase("P") == false && calledFrom.equalsIgnoreCase("M") == false) {
            count = 1;
        }
        Map paramMap = RequestContext.getCurrentInstance().getPageFlowScope();
        paramMap.put("PARAM_PG_ADD_MD", add_mode);
        paramMap.put("PARAM_PG_EDIT_MD", edit_mode);
        paramMap.put("PARAM_PG_VIEW_MD", view_mode);
        paramMap.put("PARAM_PG_DEL_MD", del_mode);

        return count;
    }

    public void setAdd_mode(String add_mode) {
        this.add_mode = add_mode;
    }

    public String getAdd_mode() {
        return add_mode;
    }

    public void setEdit_mode(String edit_mode) {
        this.edit_mode = edit_mode;
    }

    public String getEdit_mode() {
        return edit_mode;
    }

    public void setView_mode(String view_mode) {
        this.view_mode = view_mode;
    }

    public String getView_mode() {
        return view_mode;
    }

    public void setDel_mode(String del_mode) {
        this.del_mode = del_mode;
    }

    public String getDel_mode() {
        return del_mode;
    }

    /**
     * Container's getter for TvouLineChq.
     * @return TvouLineChq
     */
    public ViewObjectImpl getTvouLineChq() {
        return (ViewObjectImpl) findViewObject("TvouLineChq");
    }

    /**
     * Container's getter for TVouChqVL1.
     * @return TVouChqVL1
     */
    public ViewLinkImpl getTVouChqVL1() {
        return (ViewLinkImpl) findViewLink("TVouChqVL1");
    }

    /**
     * This method is being created
     * **/
    public void setGlobalParameters(String p_cld_id, String p_org_id, String p_ho_id, Integer p_slc_id) {
        System.out.println("Add Edit TaskFlow");
        this.setLovVouCoaParameters(p_cld_id, p_org_id, p_ho_id, p_slc_id);
        this.setCoaLovVoParameters(p_cld_id, p_org_id, p_ho_id, p_slc_id);
        LovLatestCurrImpl curr1 = getLovLatestCurr1();
        curr1.setNamedWhereClauseParam("BindOrgId", p_org_id);
        System.out.println("SetGlobalParams executing");
        curr1.executeQuery();
        //        ViewObjectImpl alw= getReqAlwVO1();
        //        Row[] allRowsInRange = alw.getAllRowsInRange();
        //        if(allRowsInRange.length>0){
        //            Object AlwTvouReqInt = allRowsInRange[0].getAttribute("AlwTvouReqInt");
        //        }

    }

    public String reqAllowed() {
        ViewObjectImpl alw = getReqAlwVO1();
        Row[] allRowsInRange = alw.getAllRowsInRange();
        if (allRowsInRange.length > 0) {
            Object AlwTvouReqInt = allRowsInRange[0].getAttribute("AlwTvouReqInt");
            if (AlwTvouReqInt != null)
                return AlwTvouReqInt.toString();
        }

        return "N";
    }
    public String OnAcntPaymntAllowed() {
        ViewObjectImpl alw = getReqAlwVO1();
        Row[] allRowsInRange = alw.getAllRowsInRange();
        if (allRowsInRange.length > 0) {
            Object AlwTvouReqInt = allRowsInRange[0].getAttribute("AlwOnAcntPayment");
            if (AlwTvouReqInt != null)
                return AlwTvouReqInt.toString();
        }

        return "N";
    }
    
    public String manAlwImprst(){
        String manAlwImprst = "Y";
        ViewObject finPrfVO = this.getReqAlwVO1();
        Row[] prfRow = finPrfVO.getAllRowsInRange();
        if(prfRow.length > 0){
            manAlwImprst = (String) prfRow[0].getAttribute("AlwManTaxImpVou");
            if(manAlwImprst.equalsIgnoreCase("Y"))
                return "Y";
            }
        return  "N";
    }
    
    public String manAlwImprstTDS(){
        String manAlwImprst = "Y";
        ViewObject finPrfVO = this.getReqAlwVO1();
        Row[] prfRow = finPrfVO.getAllRowsInRange();
        if(prfRow.length > 0){
            manAlwImprst = (String) prfRow[0].getAttribute("AlwManTdsImpVou");
            if(manAlwImprst.equalsIgnoreCase("Y"))
                return "Y";
            }
        return  "N";
    }
    
    
    public void setLovVouCoaParameters(String p_cld_id, String p_org_id, String p_ho_id, Integer p_slc_id) {

        // System.out.println("set lov parameter "+"p_cld_id " + p_cld_id);
        this.getLovVouCoa().setNamedWhereClauseParam("BindCldId", p_cld_id);
        this.getLovVouCoa().setNamedWhereClauseParam("orgId", p_org_id);
        this.getLovVouCoa().setNamedWhereClauseParam("BindHoOrgId", p_ho_id);
        this.getLovVouCoa().setNamedWhereClauseParam("BindSlcId", p_slc_id);
        this.getLovVouCoa().executeQuery();
    }


    public void setCoaLovVoParameters(String p_cld_id, String p_org_id, String p_ho_id, Integer p_slc_id) {

        ViewObjectImpl vo = this.getCoaLovVO();
        // System.out.println("p_cld_id " + p_cld_id);
        vo.setNamedWhereClauseParam("BindCldId", p_cld_id);
        vo.setNamedWhereClauseParam("BindOrgId", p_org_id);
        vo.setNamedWhereClauseParam("BindHoOrgId", p_ho_id);
        //  vo.setNamedWhereClauseParam("BindVouDt", arg1);
        // vo.executeQuery();
    }

    /**
     *To set the Lov paramters before search page call
     * **/

    public void setLovDistCoaVoParameters(String p_cld_id, String p_org_id, String p_ho_id, Integer p_slc_id) {

        ViewObjectImpl vo = this.getLovDistCoaVO();
        // System.out.println("p_cld_id " + p_cld_id);
        vo.setNamedWhereClauseParam("BindCldId", p_cld_id);
        vo.setNamedWhereClauseParam("BindOrgId", p_org_id);
        vo.setNamedWhereClauseParam("BindSlcId", p_slc_id);
        //vo.executeQuery();
    }

    /**
     * Container's getter for CoaLovVO.
     * @return CoaLovVO
     */
    public CoaLovVOImpl getCoaLovVO() {
        return (CoaLovVOImpl) findViewObject("CoaLovVO");
    }

    /**
     * Mehtod to set values of required bind variable in AR AP view.
     * Called in getViewValues and getViewValuesAdv
     * **/
    public void setARAPParameters(String p_cld_id, Integer p_slc_id, String p_ho_id, String p_org_id, Integer p_coa_id,
                                  Integer p_eo_mst_id, String p_arap_flg, String p_amt_typ, String p_filter_Val,
                                  Date p_bill_Frm_Dt, Date p_bill_To_Dt, Integer p_bill_Days) {

        System.out.println(" setArApParameters " + "p_cld_id" + p_cld_id + " p_slc_id " + p_slc_id + " p_ho_id " +
                           p_ho_id + " p_org_id " + p_org_id + " p_coa_id " + p_coa_id + " p_eo_mst_id " + p_eo_mst_id +
                           " p_arap_flg " + p_arap_flg + " p_amt_typ " + p_amt_typ + " p_filter_Val " + p_filter_Val +
                           " p_bill_Frm_Dt " + p_bill_Frm_Dt + " p_bill_To_Dt " + p_bill_To_Dt + " p_bill_Days " +
                           p_bill_Days);

        ViewObject arApVO = this.getARAPOS();
        arApVO.setNamedWhereClauseParam("BindCldId", p_cld_id);
        arApVO.setNamedWhereClauseParam("BindSlcId", p_slc_id);
        arApVO.setNamedWhereClauseParam("BindOrgId", p_org_id);
        arApVO.setNamedWhereClauseParam("BindHoOrgId", p_ho_id);
        arApVO.setNamedWhereClauseParam("BindCoaId", p_coa_id);
        arApVO.setNamedWhereClauseParam("BindEoMstId", p_eo_mst_id);
        arApVO.setNamedWhereClauseParam("BindArapFlg", p_arap_flg);
        arApVO.setNamedWhereClauseParam("BindAmtTyp", p_amt_typ);
        arApVO.setNamedWhereClauseParam("BindFilterVal", p_filter_Val);
        arApVO.setNamedWhereClauseParam("BindFrmDt", p_bill_Frm_Dt);
        arApVO.setNamedWhereClauseParam("BindToDt", p_bill_To_Dt);
        arApVO.setNamedWhereClauseParam("BindDays", p_bill_Days);

        TvouVOImpl tvou = getTvou1();
        Row currentRow = tvou.getCurrentRow();
        if (currentRow != null) {
            Object TvouDt = currentRow.getAttribute("TvouDt");
            System.out.println("TvouDt = " + TvouDt);
            if (TvouDt != null) {
                Date vouDate = (Date) TvouDt;
                arApVO.setNamedWhereClauseParam("BindCurVouDt", vouDate.dateValue().toString());
                //   arApVO.setNamedWhereClauseParam("BindCurVouDt",null);

            }
        }
        ViewObjectImpl ln = getTvouLinesLnk();
        Row row = ln.getCurrentRow();
        if (row != null) {
            if (row.getAttribute("TvouPrjwAdjFlg") != null) {
                if (row.getAttribute("TvouPrjwAdjFlg").toString().equalsIgnoreCase("O")) {
                    arApVO.setNamedWhereClauseParam("BindPrjId", null);
                } else {
                    arApVO.setNamedWhereClauseParam("BindPrjId", row.getAttribute("TvouPrjId"));

                }

            }
        }
        arApVO.executeQuery();

        //    System.out.println("---------arApVO row count :" + arApVO.getRowCount() + "---------");
    }

    /**
     * Mehtod to set values of required bind variable in AR AP view to calculate posted and unposted amounts.
     * Called in getViewValues and getViewValuesAdv
     * **/
    public void setARAP_AMTParameters(String p_cld_id, Integer p_slc_id, String p_ho_id, String p_org_id,
                                      Integer p_coa_id, String p_arap_flg) {

        ViewObject arApVO = this.getARAPOS_AMT();
        arApVO.setNamedWhereClauseParam("BindCldId", p_cld_id);
        arApVO.setNamedWhereClauseParam("BindSlcId", p_slc_id);
        arApVO.setNamedWhereClauseParam("BindOrgId", p_org_id);
        arApVO.setNamedWhereClauseParam("BindHoOrgId", p_ho_id);
        arApVO.setNamedWhereClauseParam("BindCoaId", p_coa_id);
        arApVO.setNamedWhereClauseParam("BindArapFlg", p_arap_flg);
        arApVO.executeQuery();

        // System.out.println("---------arApVO row count :" + arApVO.getRowCount() + "---------");
    }

    /**
     * Container's getter for ARAPOS_AMT.
     * @return ARAPOS_AMT
     */
    public ViewObjectImpl getARAPOS_AMT() {
        return (ViewObjectImpl) findViewObject("ARAPOS_AMT");
    }

    /**
     * Method to set the Voucher after commit. This as been done because voucher is getting changed
     * after commit-execute.
     * **/
    public void setTvouHdr(String tvouId) {
        System.out.println("setTvouHdr  " + tvouId);
        ViewObject tvouVO = this.getTvou1();
        tvouVO.setNamedWhereClauseParam("Tvouid_bindVar", tvouId);
        tvouVO.executeQuery();

    }

    public void setTvouTemplateHeader(String TvouId, String TemplateId) {
        System.out.println("TvouId = " + TvouId + " TemplateId = " + TemplateId);


        ViewObject tvouVO = this.getTvou1();
        tvouVO.setNamedWhereClauseParam("Tvouid_bindVar", TvouId);
        tvouVO.setNamedWhereClauseParam("TvouIdTemplateBindVar", TemplateId);
        tvouVO.executeQuery();
    }

    /**
     * Container's getter for TmplVou.
     * @return TmplVou
     */
    public TmplVouVOImpl getTmplVou() {
        return (TmplVouVOImpl) findViewObject("TmplVou");
    }

    /**
     * Container's getter for TvouLineChqVO1.
     * @return TvouLineChqVO1
     */
    public TvouLineChqVOImpl getTvouLineChqVO1() {
        return (TvouLineChqVOImpl) findViewObject("TvouLineChqVO1");
    }

    /**
     * Container's getter for TvouToTvouLineChqVL1.
     * @return TvouToTvouLineChqVL1
     */
    public ViewLinkImpl getTvouToTvouLineChqVL1() {
        return (ViewLinkImpl) findViewLink("TvouToTvouLineChqVL1");
    }


    /**
     * Container's getter for TvouAdjAutoVO.
     * @return TvouAdjAutoVO
     */
    public TvouAdjAutoVOImpl getTvouAdjAutoVO() {
        return (TvouAdjAutoVOImpl) findViewObject("TvouAdjAutoVO");
    }

    /**
     * Container's getter for TvouLinesToTvouAdjAutoVL1.
     * @return TvouLinesToTvouAdjAutoVL1
     */
    public ViewLinkImpl getTvouLinesToTvouAdjAutoVL1() {
        return (ViewLinkImpl) findViewLink("TvouLinesToTvouAdjAutoVL1");
    }


    /**
     * Created on 11/03/2014 by Priyank Khare
     * Method called as intial activity in TvouAutoAdjustmentTF
     * ***/


    /**
     *
     * Method to insert data into TvouAdjAutoVO
     * **/

    protected String fetchTvouAdjAuto(String p_cld_id, Integer p_slc_id, String p_ho_id, String p_org_id,
                                      Integer p_coa_id, Integer p_eo_mst_id, String p_arap_flg, String p_amt_typ,
                                      String p_filter_Val, Date p_bill_Frm_Dt, Date p_bill_To_Dt, Integer p_bill_Days) {
        System.out.println("in fetchTvouAdjAuto");
        //Create object of ARAPOSVW view to get AR AP data.

        ViewObject arapOsVo = getARAPOS();

        ViewObject tvouLinesVO = getTvouLinesLnk();
        Row tvouLinesRow = tvouLinesVO.getCurrentRow();

        // Dr/Cr  AP/AR flags are set according to voucher type

        if (Integer.parseInt(tvouLinesRow.getAttribute("TvouTypeId").toString()) == 2 ||
            Integer.parseInt(tvouLinesRow.getAttribute("TvouTypeId").toString()) == 4) {
            setTab("Cr");
            setArApFlg("AP");
        }

        if (Integer.parseInt(tvouLinesRow.getAttribute("TvouTypeId").toString()) == 3 ||
            Integer.parseInt(tvouLinesRow.getAttribute("TvouTypeId").toString()) == 5) {
            setTab("Dr");
            setArApFlg("AR");
        }

        /** if voucher is Debit Note Cust or Credit Note Cust data will come from AR table . */
        if (Integer.parseInt(tvouLinesRow.getAttribute("TvouTypeId").toString()) == 11) {

            setArApFlg("AR");
            setTab("Dr");
        }

        /** if voucher is Debit Note Sup or Credit Note Sup data will come from AP table . */
        if (Integer.parseInt(tvouLinesRow.getAttribute("TvouTypeId").toString()) == 10) {

            setArApFlg("AP");
            setTab("Cr");

        }

        if (Integer.parseInt(tvouLinesRow.getAttribute("TvouTypeId").toString()) == 15) {
            String behav = (tvouLinesRow.getAttribute("CredrOrDebtr").toString());

            if (behav.equalsIgnoreCase("C")) {
                setArApFlg("AP");
                setTab("Cr");
            } else {
                setArApFlg("AR");
                setTab("Dr");
            }
        }

        this.setARAPParameters(p_cld_id, p_slc_id, p_ho_id, p_org_id, p_coa_id, null, getArApFlg(), getTab(),
                               p_filter_Val, p_bill_Frm_Dt, p_bill_To_Dt, p_bill_Days);


        RowSetIterator rit = arapOsVo.createRowSetIterator(null);

        // If row fetched from arap view is greater than zero then Iterate through iterator
        // and assign values from ARAP view's row to TvouAdjAuto table Row.

        while (rit.hasNext()) {
            // System.out.println("after rit.hasNext()");
            Row currentRow = rit.next();

            ViewObject tvouAdjAutoVO = getTvouAdjAutoVO();
            Row tvouAdjAutoRow = tvouAdjAutoVO.createRow();
            tvouAdjAutoVO.insertRow(tvouAdjAutoRow);

            tvouAdjAutoRow.setAttribute("TvouAdjSlNo", tvouLinesRow.getAttribute("TvouSlNo"));
            tvouAdjAutoRow.setAttribute("TvouAdjArapSlNo", tvouLinesRow.getAttribute("TvouSlNo"));
            tvouAdjAutoRow.setAttribute("TvouAdjCurrIdSp", currentRow.getAttribute("ArapCurrIdSp"));
            tvouAdjAutoRow.setAttribute("TvouAdjAmtOT", currentRow.getAttribute("ArapNetAmtOt"));

            tvouAdjAutoRow.setAttribute("TvouRadjDispId", currentRow.getAttribute("DocTxnIdDisp"));
            tvouAdjAutoRow.setAttribute("TvouAdjTab", currentRow.getAttribute("ArapFlg"));
            tvouAdjAutoRow.setAttribute("TvouAdjAmtAdj", currentRow.getAttribute("ArapAmtAdj"));

            tvouAdjAutoRow.setAttribute("TvouRadjAmtSp", currentRow.getAttribute("ArapAmtSp"));
            tvouAdjAutoRow.setAttribute("TvouAdjTxnFlg", currentRow.getAttribute("ArapTxnAdvFlg"));
            tvouAdjAutoRow.setAttribute("TvouRadjVouId", currentRow.getAttribute("ArapVouId"));
            tvouAdjAutoRow.setAttribute("TvouRadjVouDt", currentRow.getAttribute("ArapVouDt"));
            tvouAdjAutoRow.setAttribute("TvouRadjSlNo", currentRow.getAttribute("ArapGlSlNo"));

            tvouAdjAutoRow.setAttribute("TvouRadjAmtAdj", new Number(0));
            tvouAdjAutoRow.setAttribute("TvouRadjArapSlNo", currentRow.getAttribute("ArapslNo"));
            tvouAdjAutoRow.setAttribute("TvouRadjTab", currentRow.getAttribute("ArapFlg"));

            //set columns for external document details
            tvouAdjAutoRow.setAttribute("TvouAdjExtDocNo", currentRow.getAttribute("ArapExtDocNo"));
            tvouAdjAutoRow.setAttribute("TvouAdjExtDocDt", currentRow.getAttribute("ArapExtDocDt"));
            tvouAdjAutoRow.setAttribute("TvouAdjExtDueDt", currentRow.getAttribute("ArapVouDueDt"));

            tvouAdjAutoRow.setAttribute("TvouAmtTyp", currentRow.getAttribute("ArapAmtTyp"));
            tvouAdjAutoRow.setAttribute("TvouTxnTyp", "B");
            tvouAdjAutoRow.setAttribute("TvouCcOld", currentRow.getAttribute("ApCc"));
            tvouAdjAutoRow.setAttribute("TvouCurrCcTrx", tvouLinesRow.getAttribute("TvouCc"));
            tvouAdjAutoRow.setAttribute("TvouAdjNode", "N");
            tvouAdjAutoRow.setAttribute("UsrIdCreate", tvouLinesRow.getAttribute("UsrIdCreate"));

            //default selection of check box for all generated rows
            tvouAdjAutoRow.setAttribute("TvouAdjChkFlg", "Y");

            // set transaction amount zero for newly created rows.
            tvouAdjAutoRow.setAttribute("TvouAmtTrx", new Number(0));
            tvouAdjAutoRow.setAttribute("TvouAdjAmtSp", new Number(0));
            tvouAdjAutoRow.setAttribute("TvouAdjAmtAdj", new Number(0));
            tvouAdjAutoRow.setAttribute("TvouAdjAmtAdjThs", new Number(0));

            //set null value for initial remain amt transient column
            tvouAdjAutoRow.setAttribute("TvouRemainOt", null);

            //set attribute for transient column
            tvouAdjAutoRow.setAttribute("TvouTmpInvSum1", currentRow.getAttribute("ArapTmpInvSum1")); //ArapTmpInvSum1
            tvouAdjAutoRow.setAttribute("TvouTmpInvSum2", currentRow.getAttribute("ArapTmpInvSum2")); //ArapTmpInvSum2
            tvouAdjAutoRow.setAttribute("unPostedAmount", currentRow.getAttribute("ArapAmtAdjTmp"));

            // New column for voucher type id added on 09-06-2014
            tvouAdjAutoRow.setAttribute("TvouAdjTvouTypeId", currentRow.getAttribute("ArapVouType"));
            System.out.println(" currentRow.getAttribute(\"PrjId\")" + currentRow.getAttribute("PrjId"));
            tvouAdjAutoRow.setAttribute("TvouPrjId", currentRow.getAttribute("PrjId"));
            tvouAdjAutoRow.setAttribute("TvouReqId", currentRow.getAttribute("ArapTxnIdRef4"));


            // New Coloumn added which will hold the currency id of parent table i.e. tvou_lines
            tvouAdjAutoRow.setAttribute("TvouAdjCurrIdAdj", (Integer) tvouAdjAutoRow.getAttribute("TvouCurrIdTrx"));
            String adjTyp = "I";
            if (adjTyp != null) {

                tvouAdjAutoRow.setAttribute("TvouAdvInvFlg", adjTyp);
            }

            TvouVOImpl impl = getTvou1();
            Row row = impl.getCurrentRow();
            ViewObjectImpl linesLnk = getTvouLinesLnk();
            Row currentRow_2 = linesLnk.getCurrentRow();
            Object CldId = row.getAttribute("TvouCldId");
            Object OrgId = currentRow_2.getAttribute("TvouOrgId");
            Object currIdBs = row.getAttribute("TvouCurrIdBs");
            Object convDate = row.getAttribute("TvouDt");
            System.out.println("in fetch tvouadjAuto tvouAdjAutoRow.getAttribute(\"TvouAdjCurrIdSp\") = " +
                               tvouAdjAutoRow.getAttribute("TvouAdjCurrIdSp"));
            BigDecimal convRate =
                getlatestCurrencyRate((String) CldId, (String) OrgId, (Integer) currIdBs,
                                      (Integer) tvouAdjAutoRow.getAttribute("TvouAdjCurrIdSp"), "B", (Date) convDate,
                                      "L", "Y");

            //System.out.println("rate from funtion " + convRate);
            Number rate;
            try {
                rate = new Number(convRate);

                if (rate.compareTo(-1) == 0) {
                    rate = new Number(1);
                }
                tvouAdjAutoRow.setAttribute("TvouCcCurr", rate);
                //    System.out.println("TvouCcCurr " + tvouAdjAutoRow.getAttribute("TvouCcCurr"));
            } catch (Exception e) {
                System.out.println(e);
            }

        }
        rit.closeRowSetIterator();
        arapOsVo.setWhereClause("");
        return null;
    }

    private BigDecimal getlatestCurrencyRate(String CldId, String OrgId, Integer currIdBs, Integer currIdTxn,
                                             String conv, Date convDate, String convLogic, String convLogicDt) {
        System.out.println("getlatestCurrencyRate = currIdTxn = " + currIdTxn);
        Object res = callStoredFunction(Types.NUMERIC, "app.fn_get_curr_conv_act(?,?,?,?,?,?,?,?)", new Object[] {
                                        CldId, OrgId, currIdBs, currIdTxn, conv, convDate, convLogic, convLogicDt
        });
        if (res != null) {
            return (BigDecimal) res;
        }
        return new BigDecimal(1);
    }

    /**
     *
     * Method to insert data into TvouAdvDtlAutoVO
     * **/

    protected String fetchTvouAdvDtlAuto(String p_cld_id, Integer p_slc_id, String p_ho_id, String p_org_id,
                                         Integer p_coa_id, Integer p_eo_mst_id, String p_arap_flg, String p_amt_typ,
                                         String p_filter_Val, Date p_bill_Frm_Dt, Date p_bill_To_Dt,
                                         Integer p_bill_Days) {

        System.out.println("fetchTvouAdvDtlAuto---");
        //Create object of ARAPOSVW view to get AR AP data.

        ViewObject arapOsVo = getARAPOS();

        ViewObject tvouLinesVO = getTvouLinesLnk();
        Row tvouLinesRow = tvouLinesVO.getCurrentRow();

        // Dr/Cr  AP/AR flags are set according to voucher type

        if (Integer.parseInt(tvouLinesRow.getAttribute("TvouTypeId").toString()) == 2 ||
            Integer.parseInt(tvouLinesRow.getAttribute("TvouTypeId").toString()) == 4) {
            setTab("Dr");

        }

        if (Integer.parseInt(tvouLinesRow.getAttribute("TvouTypeId").toString()) == 3 ||
            Integer.parseInt(tvouLinesRow.getAttribute("TvouTypeId").toString()) == 5) {
            setTab("Cr");

        }

        /** if voucher is Debit Note Cust or Credit Note Cust data will come from AR table . */
        if (Integer.parseInt(tvouLinesRow.getAttribute("TvouTypeId").toString()) == 11) {

            setTab("Cr");
        }

        /** if voucher is Debit Note Sup or Credit Note Sup data will come from AP table . */
        if (Integer.parseInt(tvouLinesRow.getAttribute("TvouTypeId").toString()) == 10) {

            setTab("Dr");

        }

        if (Integer.parseInt(tvouLinesRow.getAttribute("TvouTypeId").toString()) == 15) {
            String behav = (tvouLinesRow.getAttribute("CredrOrDebtr").toString());

            if (behav.equalsIgnoreCase("C")) {
                setTab("Dr");
            } else {
                setTab("Cr");
            }
        }


        this.setARAPParameters(p_cld_id, p_slc_id, p_ho_id, p_org_id, p_coa_id, null, null, getTab(), null, null, null,
                               null);

        RowSetIterator rit = arapOsVo.createRowSetIterator(null);

        // If row fetched from arap view is greater than zero then Iterate through iterator
        // and assign values from ARAP view's row to TvouAdj table Row.

        while (rit.hasNext()) {

            Row currentRow = rit.next();

            ViewObject tvouAdvDtlAutoVO = getTvouAdvDtlAutoVO();
            Row tvouAdvDtlAutoRow = tvouAdvDtlAutoVO.createRow();
            tvouAdvDtlAutoVO.insertRow(tvouAdvDtlAutoRow);


            tvouAdvDtlAutoRow.setAttribute("TvouAdvAmtSp", currentRow.getAttribute("ArapAmtSp"));
            tvouAdvDtlAutoRow.setAttribute("TvouAdvAmtTyp", currentRow.getAttribute("ArapAmtTyp"));
            tvouAdvDtlAutoRow.setAttribute("TvouAdvVouId", currentRow.getAttribute("ArapVouId"));
            tvouAdvDtlAutoRow.setAttribute("TvouAdvVouDt", currentRow.getAttribute("ArapVouDt"));
            tvouAdvDtlAutoRow.setAttribute("TvouAdvSlNo", currentRow.getAttribute("ArapGlSlNo"));
            tvouAdvDtlAutoRow.setAttribute("TvouAdvDispId", currentRow.getAttribute("DocTxnIdDisp"));
            tvouAdvDtlAutoRow.setAttribute("TvouAdvCoaId", currentRow.getAttribute("ArapCoaId"));

            tvouAdvDtlAutoRow.setAttribute("TvouAdvAmtAdj", new Number(0));
            tvouAdvDtlAutoRow.setAttribute("TvouAdvArapSlNo", currentRow.getAttribute("ArapslNo"));
            tvouAdvDtlAutoRow.setAttribute("TvouAdvTab", currentRow.getAttribute("ArapFlg"));
            tvouAdvDtlAutoRow.setAttribute("TvouCcOld", currentRow.getAttribute("ApCc"));
            tvouAdvDtlAutoRow.setAttribute("TvouAdvCurrIdSp", currentRow.getAttribute("ArapCurrIdSp"));
            tvouAdvDtlAutoRow.setAttribute("UsrIdCreate", tvouLinesRow.getAttribute("UsrIdCreate"));
            tvouAdvDtlAutoRow.setAttribute("TvouAdjAmtOT", currentRow.getAttribute("ArapNetAmtOt"));

            //default selection of check box for all generated rows
            tvouAdvDtlAutoRow.setAttribute("TvouAdjAdvChkFlg", "Y");

            // set transaction amount zero for newly created rows.
            tvouAdvDtlAutoRow.setAttribute("TvouAmtTrx", new Number(0));

            //set null value for initial remain amt transient column
            tvouAdvDtlAutoRow.setAttribute("TvouRemainOt", null);

            //set unposted transient amount on initial fetch
            tvouAdvDtlAutoRow.setAttribute("UnPostedAmt", currentRow.getAttribute("ArapAmtAdjTmp"));

            //set columns for external document details
            tvouAdvDtlAutoRow.setAttribute("TvouAdjExtDocNo", currentRow.getAttribute("ArapExtDocNo"));
            tvouAdvDtlAutoRow.setAttribute("TvouAdjExtDocDt", currentRow.getAttribute("ArapExtDocDt"));
            tvouAdvDtlAutoRow.setAttribute("TvouAdjExtDueDt", currentRow.getAttribute("ArapVouDueDt"));
            System.out.println(" currentRow.getAttribute(\"PrjId\") = " + currentRow.getAttribute("PrjId"));
            tvouAdvDtlAutoRow.setAttribute("TvouPrjId", currentRow.getAttribute("PrjId"));
            tvouAdvDtlAutoRow.setAttribute("TvouReqId", currentRow.getAttribute("ArapTxnIdRef4"));

            //Function call to calculate conversion rate for multi currency transaction

            Integer tvouTyp = Integer.parseInt(getTvou1().getCurrentRow().getAttribute("TvouTypeId").toString());


            //            BigDecimal convRate = (BigDecimal) callStoredFunction(Types.NUMERIC, "FIN.FN_TVOU_CROSSCONVRATE(?,?,?,?,?)", new Object[] {
            //                                                                  p_cld_id, p_ho_id,
            //                                                                  (Integer) tvouAdvDtlAutoRow.getAttribute("TvouCurrIdTrx"),
            //                                                                  (Integer) tvouAdvDtlAutoRow.getAttribute("TvouAdvCurrIdSp"),
            //                                                                  tvouTyp
            //            });
            TvouVOImpl impl = getTvou1();
            Row row = impl.getCurrentRow();
            ViewObjectImpl linesLnk = getTvouLinesLnk();
            Row currentRow_2 = linesLnk.getCurrentRow();
            Object CldId = row.getAttribute("TvouCldId");
            Object OrgId = currentRow_2.getAttribute("TvouOrgId");
            Object currIdBs = row.getAttribute("TvouCurrIdBs");
            Object convDate = row.getAttribute("TvouDt");
            System.out.println("in tvou adv dtl tvouAdvDtlAutoRow.getAttribute(\"TvouAdvCurrIdSp\") = " +
                               tvouAdvDtlAutoRow.getAttribute("TvouAdvCurrIdSp"));
            BigDecimal convRate =
                getlatestCurrencyRate((String) CldId, (String) OrgId, (Integer) currIdBs,
                                      (Integer) tvouAdvDtlAutoRow.getAttribute("TvouAdvCurrIdSp"), "B", (Date) convDate,
                                      "L", "Y");
            //System.out.println("rate from funtion " + convRate);
            Number rate;
            try {
                rate = new Number(convRate);

                if (rate.compareTo(-1) == 0) {
                    rate = new Number(1);
                }
                tvouAdvDtlAutoRow.setAttribute("TvouCcCurr", rate);
                //  System.out.println("TvouCcCurr " + tvouAdvDtlAutoRow.getAttribute("TvouCcCurr"));
            } catch (Exception e) {
                System.out.println(e);
            }
        }
        rit.closeRowSetIterator();
        return null;
    }

    /**
     * Method to called in taskflow to fetch adjustment data.
     * **/
    public void fetchAdjustmentData(String p_cld_id, Integer p_slc_id, String p_ho_id, String p_org_id,
                                    Integer p_coa_id, Integer p_eo_mst_id, String p_arap_flg, String p_amt_typ,
                                    String p_filter_Val, Date p_bill_Frm_Dt, Date p_bill_To_Dt, Integer p_bill_Days) {

        System.out.println("fetchAdjustmentData  " + "p_cld_id" + p_cld_id + " p_slc_id " + p_slc_id + " p_ho_id " +
                           p_ho_id + " p_org_id " + p_org_id + " p_coa_id " + p_coa_id + " p_eo_mst_id " + p_eo_mst_id +
                           " p_arap_flg " + p_arap_flg + " p_amt_typ " + p_amt_typ + " p_filter_Val " + p_filter_Val +
                           " p_bill_Frm_Dt " + p_bill_Frm_Dt + " p_bill_To_Dt " + p_bill_To_Dt + " p_bill_Days " +
                           p_bill_Days);

        //remove rows from TvouAdjAuto
        removeRows("TvouAdjAutoVO"); //TvouAdjAutoVO

        //remove rows from TvouAdjDtlAuto
        removeRows("TvouAdjDtlAutoVO"); //TvouAdjDtlAutoVO

        //remove rows from TvouAdvDtlAuto
        removeRows("TvouAdvDtlAutoVO"); //TvouAdjDtlAutoVO

        //remove rows from TvouAdvDtlAuto
        removeRows("TvouAdjDtlAutoVO1"); //TvouAdjDtlAutoVO


        //get data into tvou_adj table.
        fetchTvouAdjAuto(p_cld_id, p_slc_id, p_ho_id, p_org_id, p_coa_id, p_eo_mst_id, p_arap_flg, p_amt_typ,
                         p_filter_Val, p_bill_Frm_Dt, p_bill_To_Dt, p_bill_Days);

        //get data into tvou_adv_dtl table.
        fetchTvouAdvDtlAuto(p_cld_id, p_slc_id, p_ho_id, p_org_id, p_coa_id, p_eo_mst_id, p_arap_flg, p_amt_typ, null,
                            null, null, null);

    }


    /**
     * Method to create and insert rows into TvouAdjDtl table    *
     * **/

    public String insertTvouAdjDtlData(Object p_adv_amt, Row tvou_adj, Row tvou_adv_dtl) {

        ViewObject tvouAdjDtlAutoVO = getTvouAdjDtlAutoVO();

        System.out.println("tvou adj Dtl row created");
        Row tvouAdjDtlAutoRow = tvouAdjDtlAutoVO.createRow();
        tvouAdjDtlAutoVO.insertRow(tvouAdjDtlAutoRow);
        tvouAdjDtlAutoRow.setAttribute("TvouAdjArapSlNo", tvou_adj.getAttribute("TvouRadjArapSlNo"));
        tvouAdjDtlAutoRow.setAttribute("TvouAdjCurrIdSp", tvou_adv_dtl.getAttribute("TvouAdvCurrIdSp"));
        tvouAdjDtlAutoRow.setAttribute("TvouReqId", tvou_adv_dtl.getAttribute("TvouReqId"));

        tvouAdjDtlAutoRow.setAttribute("TvouPrjId", tvou_adv_dtl.getAttribute("TvouPrjId"));
        tvouAdjDtlAutoRow.setAttribute("TvouAdjVouId", tvou_adj.getAttribute("TvouRadjVouId"));
        tvouAdjDtlAutoRow.setAttribute("TvouRefId", tvou_adj.getAttribute("TvouRadjVouId"));
        tvouAdjDtlAutoRow.setAttribute("TvouAdjVouDt", tvou_adj.getAttribute("TvouRadjVouDt"));
        tvouAdjDtlAutoRow.setAttribute("TvouAdjSlNo", tvou_adj.getAttribute("TvouRadjSlNo"));
        tvouAdjDtlAutoRow.setAttribute("TvouAdjArapSlNo", tvou_adj.getAttribute("TvouRadjArapSlNo"));

        Number tvouAdjAmtAdjCalc = new Number(0);
        if (tvou_adv_dtl.getAttribute("TvouCurrIdTrx").equals(tvou_adv_dtl.getAttribute("TvouAdvCurrIdSp"))) {
            tvouAdjAmtAdjCalc = (Number) p_adv_amt;
        } else {
            tvouAdjAmtAdjCalc =
                roundOffAmt(((Number) p_adv_amt).divide((Number) tvou_adj.getAttribute("TvouCcOld")).multiply((Number) tvou_adj.getAttribute("TvouCurrCcTrx")));
        }


        tvouAdjDtlAutoRow.setAttribute("TvouAdjAmtAdj", tvouAdjAmtAdjCalc); // need to convert into invoice currency


        System.out.println("p_adv_amt = " + p_adv_amt + " tvouAdjAmtAdjCalc = " + tvouAdjAmtAdjCalc +
                           " after conv  =  " +
                           ((Number) p_adv_amt).divide((Number) tvou_adj.getAttribute("TvouCcOld")).multiply((Number) tvou_adj.getAttribute("TvouCurrCcTrx")) +
                           " tvou_adj.getAttribute(\"TvouCcOld\") = " + tvou_adj.getAttribute("TvouCcOld") +
                           " tvou_adj.getAttribute(\"TvouCurrCcTrx\") = " + tvou_adj.getAttribute("TvouCurrCcTrx"));


        tvouAdjDtlAutoRow.setAttribute("TvouAdjAmtSp", tvou_adj.getAttribute("TvouRadjAmtSp")); //
        tvouAdjDtlAutoRow.setAttribute("TvouAmtTrx", new Number(0));

        tvouAdjDtlAutoRow.setAttribute("TvouRadjTab", tvou_adv_dtl.getAttribute("TvouAdvTab"));
        tvouAdjDtlAutoRow.setAttribute("TvouRadjVouId", tvou_adv_dtl.getAttribute("TvouAdvVouId"));
        tvouAdjDtlAutoRow.setAttribute("TvouRadjVouDt", tvou_adv_dtl.getAttribute("TvouAdvVouDt"));
        tvouAdjDtlAutoRow.setAttribute("TvouRadjSlNo", tvou_adv_dtl.getAttribute("TvouAdvSlNo"));
        tvouAdjDtlAutoRow.setAttribute("TvouRadjArapSlNo", tvou_adv_dtl.getAttribute("TvouAdvArapSlNo"));
        tvouAdjDtlAutoRow.setAttribute("TvouRadjAmtSp", tvou_adv_dtl.getAttribute("TvouAdvAmtSp")); //TvouAdvCoaId
        tvouAdjDtlAutoRow.setAttribute("TvouAdjCoaId", tvou_adv_dtl.getAttribute("TvouAdvCoaId")); //TvouAdvCoaId

        Number tvouRadjAmtAdjCalc = new Number(0);
        if (tvou_adv_dtl.getAttribute("TvouAdvCurrIdSp").equals(tvou_adv_dtl.getAttribute("TvouCurrIdTrx"))) {
            tvouRadjAmtAdjCalc = (Number) p_adv_amt;
        } else {
            tvouRadjAmtAdjCalc =
                roundOffAmt(((Number) p_adv_amt).divide((Number) tvou_adv_dtl.getAttribute("TvouCcOld")).multiply((Number) tvou_adv_dtl.getAttribute("TvouCurrCcTrx")));
        }


        tvouAdjDtlAutoRow.setAttribute("TvouRadjAmtAdj", tvouRadjAmtAdjCalc);
        System.out.println(" tvouRadjAmtAdjCalc = " + tvouRadjAmtAdjCalc);
        System.out.println("((Number)p_adv_amt).divide((Number)tvou_adv_dtl.getAttribute(\"TvouCcOld\")).multiply((Number)tvou_adv_dtl.getAttribute(\"TvouCurrCcTrx\")) = " +
                           ((Number) p_adv_amt).divide((Number) tvou_adv_dtl.getAttribute("TvouCcOld")).multiply((Number) tvou_adv_dtl.getAttribute("TvouCurrCcTrx")));


        tvouAdjDtlAutoRow.setAttribute("TvouCcOld", tvou_adv_dtl.getAttribute("TvouCcOld"));
        tvouAdjDtlAutoRow.setAttribute("TvouAdjTxnFlg", "N");
        tvouAdjDtlAutoRow.setAttribute("TvouAmtTyp", tvou_adv_dtl.getAttribute("TvouAdvAmtTyp"));
        tvouAdjDtlAutoRow.setAttribute("TvouTxnTyp", "A");
        tvouAdjDtlAutoRow.setAttribute("TvouAdjNode", "N");
        tvouAdjDtlAutoRow.setAttribute("TvouAdvInvFlg", "A");
        //   tvouAdjDtlAutoRow.setAttribute("TvouAdjCoaId", arg1);

        // nEW cOLOUMN ADDED TO STORE THE CURRENCY ID OF BILLS
        tvouAdjDtlAutoRow.setAttribute("TvouAdjDtlCurrIdAdj", tvou_adj.getAttribute("TvouAdjCurrIdSp"));


        TvouVOImpl impl = getTvou1();
        Row row = impl.getCurrentRow();
        ViewObjectImpl linesLnk = getTvouLinesLnk();
        Row currentRow_2 = linesLnk.getCurrentRow();
        Object CldId = row.getAttribute("TvouCldId");
        Object OrgId = currentRow_2.getAttribute("TvouOrgId");
        Object currIdBs = row.getAttribute("TvouCurrIdBs");
        Object convDate = row.getAttribute("TvouDt");
        System.out.println("in insertTVou tvouAdjDtlAutoRow.getAttribute(\"TvouAdjCurrIdSp\") = " +
                           tvouAdjDtlAutoRow.getAttribute("TvouAdjCurrIdSp"));
        BigDecimal convRate =
            getlatestCurrencyRate((String) CldId, (String) OrgId, (Integer) currIdBs,
                                  (Integer) tvouAdjDtlAutoRow.getAttribute("TvouAdjCurrIdSp"), "B", (Date) convDate,
                                  "L", "Y");

        Number rate;
        try {
            rate = new Number(convRate);
            if (rate.compareTo(-1) == 0) {
                rate = new Number(1);
            }
            //  System.out.println("Inside-- refrsh advance values rate is---->" + rate);
            tvouAdjDtlAutoRow.setAttribute("TvouCcCurr", rate);

        } catch (Exception e) {
            System.out.println(e);
        }

        return null;
    }


    /**
     * Container's getter for TvouAdvDtlAutoVO.
     * @return TvouAdvDtlAutoVO
     */
    public ViewObjectImpl getTvouAdvDtlAutoVO() {
        return (ViewObjectImpl) findViewObject("TvouAdvDtlAutoVO");
    }

    /**
     * Container's getter for TvouLinesToTvouAdvDtlAutoVL1.
     * @return TvouLinesToTvouAdvDtlAutoVL1
     */
    public ViewLinkImpl getTvouLinesToTvouAdvDtlAutoVL1() {
        return (ViewLinkImpl) findViewLink("TvouLinesToTvouAdvDtlAutoVL1");
    }

    /**
     * Container's getter for TvouAdjDtlAutoVO.
     * @return TvouAdjDtlAutoVO
     */
    public ViewObjectImpl getTvouAdjDtlAutoVO() {
        return (ViewObjectImpl) findViewObject("TvouAdjDtlAutoVO");
    }

    /**
     * Container's getter for TvouAdjAutoToTvouAdjDtlAutoVL1.
     * @return TvouAdjAutoToTvouAdjDtlAutoVL1
     */
    public ViewLinkImpl getTvouAdjAutoToTvouAdjDtlAutoVL1() {
        return (ViewLinkImpl) findViewLink("TvouAdjAutoToTvouAdjDtlAutoVL1");
    }

    /**
     * Mehtod to set values of required bind variable in AR AP view.
     * Called in getViewValues and getViewValuesAdv
     * **/
    public void setARAPForAutoAdjParameters(String p_cld_id, Integer p_slc_id, String p_ho_id, String p_org_id,
                                            Integer p_coa_id, String p_arap_flg, String p_amt_typ, String p_vou_id) {

        ViewObject arApVO = this.getARARForAutoAdjVO();
        arApVO.setNamedWhereClauseParam("BindCldId", p_cld_id);
        arApVO.setNamedWhereClauseParam("BindSlcId", p_slc_id);
        arApVO.setNamedWhereClauseParam("BindOrgId", p_org_id);
        arApVO.setNamedWhereClauseParam("BindHoOrgId", p_ho_id);
        arApVO.setNamedWhereClauseParam("BindCoaId", p_coa_id);
        arApVO.setNamedWhereClauseParam("BindArapFlg", p_arap_flg);
        arApVO.setNamedWhereClauseParam("BindAmtTyp", p_amt_typ);
        arApVO.setNamedWhereClauseParam("BindArapVouId", p_vou_id);
        arApVO.executeQuery();

        // System.out.println("---------arApVO row count :" + arApVO.getRowCount() + "---------");
    }

    /**
     * Container's getter for ARARForAutoAdjVO.
     * @return ARARForAutoAdjVO
     */
    public ViewObjectImpl getARARForAutoAdjVO() {
        return (ViewObjectImpl) findViewObject("ARARForAutoAdjVO");
    }

    /**
     * Method lto select all Invoices
     * **/
    public void selectAllInvoices() {

        ViewObject tvouAdjAutoVO = getTvouAdjAutoVO();
        RowSetIterator tvouAdjAutoRit = tvouAdjAutoVO.createRowSetIterator(null);

        while (tvouAdjAutoRit.hasNext()) {

            Row tvouAdjAutoRow = tvouAdjAutoRit.next();

            tvouAdjAutoRow.setAttribute("TvouAdjChkFlg", "Y");

        }
        tvouAdjAutoRit.closeRowSetIterator();
    }

    /**
     * Method lto select all Invoices
     * **/
    public void selectAllAdvance() {

        ViewObject tvouAdvDtlAutoVO = getTvouAdvDtlAutoVO();
        RowSetIterator tvouAdvDtlAutoRit = tvouAdvDtlAutoVO.createRowSetIterator(null);

        while (tvouAdvDtlAutoRit.hasNext()) {

            Row tvouAdvDtjAutoRow = tvouAdvDtlAutoRit.next();

            tvouAdvDtjAutoRow.setAttribute("TvouAdjAdvChkFlg", "Y");

        }
        tvouAdvDtlAutoRit.closeRowSetIterator();
    }

    /**
     * Method lto deselect all Invoices
     * **/
    public void deSelectAllInvoices() {

        ViewObject tvouAdjAutoVO = getTvouAdjAutoVO();
        RowSetIterator tvouAdjAutoRit = tvouAdjAutoVO.createRowSetIterator(null);

        while (tvouAdjAutoRit.hasNext()) {

            Row tvouAdjAutoRow = tvouAdjAutoRit.next();

            tvouAdjAutoRow.setAttribute("TvouAdjChkFlg", "N");

        }
        tvouAdjAutoRit.closeRowSetIterator();
    }

    /**
     * Method lto deselect all Invoices
     * **/
    public void deSelectAllAdvance() {

        ViewObject tvouAdvDtlAutoVO = getTvouAdvDtlAutoVO();
        RowSetIterator tvouAdvDtlAutoRit = tvouAdvDtlAutoVO.createRowSetIterator(null);

        while (tvouAdvDtlAutoRit.hasNext()) {

            Row tvouAdvDtjAutoRow = tvouAdvDtlAutoRit.next();

            tvouAdvDtjAutoRow.setAttribute("TvouAdjAdvChkFlg", "N");

        }
        tvouAdvDtlAutoRit.closeRowSetIterator();
    }


    /**
     * Container's getter for DualForAutoAdjVO.
     * @return DualForAutoAdjVO
     */
    public ViewObjectImpl getDualForAutoAdjVO() {
        return (ViewObjectImpl) findViewObject("DualForAutoAdjVO");
    }

    /**
     * Created by Amaandeep to assign remaining amount to selected rows.
     *
     * **/

    public void resetBalTransactionAmount() {

        //included by Priyank Khare on 29/03/2-14
        ViewObject tvouLinesVO = getTvouLinesLnk();
        Row tvouLinesRow = tvouLinesVO.getCurrentRow();

        // Dr/Cr  AP/AR flags are set according to voucher type

        Integer.parseInt(tvouLinesRow.getAttribute("TvouTypeId").toString());

        ViewObjectImpl adjAuto = this.getTvouAdjAutoVO();
        if (adjAuto != null && Integer.parseInt(tvouLinesRow.getAttribute("TvouTypeId").toString()) != 15) {

            RowSetIterator adjAutoRit = adjAuto.createRowSetIterator(null);
            while (adjAutoRit.hasNext()) {
                Row tvouAdjAutoRow = adjAutoRit.next();
                if (tvouAdjAutoRow.getAttribute("TvouAdjChkFlg") != null) {
                    if (tvouAdjAutoRow.getAttribute("TvouAdjChkFlg").equals("Y")) {

                        Number remBal = roundOffAmt((Number) tvouAdjAutoRow.getAttribute("RemainingBalanceTrans"));
                        Number remBalCalc = new Number(0);
                        if (tvouAdjAutoRow.getAttribute("TvouAdjCurrIdSp").equals(tvouAdjAutoRow.getAttribute("TvouCurrIdTrx"))) {
                            remBalCalc = remBal;
                        } else {
                            remBalCalc =
                                roundOffAmt(remBal.multiply((Number) tvouAdjAutoRow.getAttribute("TvouCcOld")).divide((Number) tvouAdjAutoRow.getAttribute("TvouCurrCcTrx")));
                        }

                        tvouAdjAutoRow.setAttribute("TvouAmtTrx", remBalCalc);


                        // tvouAdjAutoRow.setAttribute("TvouAmtTrx",
                        //                           roundOffAmt(remBal.multiply((Number) tvouAdjAutoRow.getAttribute("TvouCcOld")).divide((Number) tvouAdjAutoRow.getAttribute("TvouCurrCcTrx"))));
                        tvouAdjAutoRow.setAttribute("TvouAdjAmtAdjThs", remBal);
                    }
                }
            }
            adjAutoRit.closeRowSetIterator();
        }
    }

    public Number roundOffAmt(Number amt) {

        Integer amt_digit = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}").toString());
        if (amt != null) {
            if (amt_digit != null) {

                return new Number(amt.round(amt_digit));

            } else {

                return new Number(amt.round(2));

            }
        } else {
            return new Number(0);
        }
    }

    /**
     * Created By priyank khare to remove the transaction done by auto adjustment functionality
     * **/
    public void removeAutoAdjustment() {

        //to remove the row for tvou_adj_dtl_auto tables
        ViewObject tvouAdjDtlAutoVO = getTvouAdjDtlAutoVO1();
        RowSetIterator tvouAdjDtlAutoRit = tvouAdjDtlAutoVO.createRowSetIterator(null);

        //  System.out.println("tvouAdjDtlAutoRit row count------>" + tvouAdjDtlAutoRit.getRowCount());

        while (tvouAdjDtlAutoRit.hasNext()) {

            Row tvouAdjDtlAutoRow = tvouAdjDtlAutoRit.next();

            tvouAdjDtlAutoRow.remove();
            //     System.out.println("TvouAdjDtlAutoVO row removed");
        }
        tvouAdjDtlAutoRit.closeRowSetIterator();

        //to reset advance for tvou_adj_auto table

        ViewObject tvouAdjAutoVO = getTvouAdjAutoVO();
        RowSetIterator tvouAdjAutoRit = tvouAdjAutoVO.createRowSetIterator(null);

        while (tvouAdjAutoRit.hasNext()) {

            Row tvouAdjAutoRow = tvouAdjAutoRit.next();

            tvouAdjAutoRow.setAttribute("TvouRemainOt", null);
            tvouAdjAutoRow.setAttribute("TvouRadjAmtAdj", new Number(0));
            tvouAdjAutoRow.setAttribute("TvouAdjAmtAdjThs", new Number(0));
            tvouAdjAutoRow.setAttribute("TvouAmtTrx", new Number(0));
            tvouAdjAutoRow.setAttribute("AdjAjustmentFlg", "F");
        }
        tvouAdjAutoRit.closeRowSetIterator();

        //to reset the advance assigned for tvou_adv_dtl table

        ViewObject tvouAdvDtlAutoVO = getTvouAdvDtlAutoVO();
        RowSetIterator tvouAdvDtlAutoRit = tvouAdvDtlAutoVO.createRowSetIterator(null);

        while (tvouAdvDtlAutoRit.hasNext()) {

            Row tvouAdvDtlAutoRow = tvouAdvDtlAutoRit.next();

            tvouAdvDtlAutoRow.setAttribute("TvouRemainOt", null);
            tvouAdvDtlAutoRow.setAttribute("TvouAmtTrx", new Number(0));
            tvouAdvDtlAutoRow.setAttribute("TvouAdvAmtAdj", new Number(0));
            tvouAdvDtlAutoRow.setAttribute("AdvAdjustmentFlg", "F");
        }
        tvouAdvDtlAutoRit.closeRowSetIterator();
    }

    /**
     * Container's getter for TvouAdjDtlAutoVO1.
     * @return TvouAdjDtlAutoVO1
     */
    public ViewObjectImpl getTvouAdjDtlAutoVO1() {
        return (ViewObjectImpl) findViewObject("TvouAdjDtlAutoVO1");
    }

    /**
     * Container's getter for TvouLinesToTvouAdjDtlAutoVL1.
     * @return TvouLinesToTvouAdjDtlAutoVL1
     */
    public ViewLinkImpl getTvouLinesToTvouAdjDtlAutoVL1() {
        return (ViewLinkImpl) findViewLink("TvouLinesToTvouAdjDtlAutoVL1");
    }

    public void setGlDispNo(String glDispNo) {
        this.glDispNo = glDispNo;
    }

    public String getGlDispNo() {
        return glDispNo;
    }


    public void setGlVouTyp(Integer glVouTyp) {
        this.glVouTyp = glVouTyp;
    }

    public Integer getGlVouTyp() {
        return glVouTyp;
    }

    public void setGlVouDt(Date glVouDt) {
        this.glVouDt = glVouDt;
    }

    public Date getGlVouDt() {
        return glVouDt;
    }

    /**
     * Method to set the Tvou_adj_amt_adj_ths for current row.
     * Called in TvouAutoAjustment Bean on value change event for tvouAmtTrx.
     * Created by Priyank Khare on 31/03/2014.
     * **/

    public String setTvouAdjAmtThs(Number inputAmt) {

        ViewObjectImpl tvouAdjAutoVO = this.getTvouAdjAutoVO();

        Row tvouAdjAutoRow = tvouAdjAutoVO.getCurrentRow();

        tvouAdjAutoRow.setAttribute("TvouAdjAmtAdjThs", inputAmt);

        return "Y";
    }

    /**
     *  Method call to set Tvou bind parameter after create method to control voucher change problem.
     **/
    public void setTvouHdrParameter() {

        ViewObject tvouVO = getTvou1();
        System.out.println("tvou rows " + getTvou1().getEstimatedRowCount());

        Row[] xx = tvouVO.getFilteredRows("TvouTypeId", null);

        TvouVOImpl voImpl = (TvouVOImpl) getTvou1();
        // tvouVO.setNamedWhereClauseParam("Tvouid_bindVar", xx[0].getAttribute("TvouId"));
        // tvouVO.executeQuery();
        voImpl.setTvouid_bindVar(xx[0].getAttribute("TvouId").toString());


        //   System.out.println("row length " + xx.length + " vouId " + xx[0].getAttribute("TvouId"));

    }

    /**
     *  Method call to set Tvou bind parameter in edit method to control voucher change problem.
     *  Method recieves the parameter value from the task flow. Hence, is necessary to ensure its value.
     *  If called in create mode then initially the taskflow paramater value is get assigned in TvouEOImpl.
     *  If called in edit mode then taskflow parameter is set from search page task flow.
     *
     **/
    public void setTvouHdrBindParameter(String tvouId) {
        System.out.println("setTvouHdrBindParameter  " + tvouId);


        this.getTvou1().setNamedWhereClauseParam("Tvouid_bindVar", tvouId);
        this.getTvou1().setNamedWhereClauseParam("TvouIdTemplateBindVar", null);

        //executequery has been comented since it casuses the newly created to be removed as current row.
        //this.getTvou1().executeQuery();
    }


    /**
     * Method to adjust bill from advances in FIFO order
     * Don't Mess with this Algo
     **/

    public void adjustAdvanceService(String p_cld_id, Integer p_slc_id, String p_ho_id, String p_org_id,
                                     Integer p_coa_id) {

        //call method to remove previous adjustment data.
        removeAutoAdjustment();

        ViewObject tvouAdjAutoVO = getTvouAdjAutoVO();
        ViewObject tvouAdvDtlAutoVO = getTvouAdvDtlAutoVO();
        RowSetIterator tvouAdvDtlAutoRit = tvouAdvDtlAutoVO.createRowSetIterator(null);
        RowSetIterator tvouAdjAutoRit = tvouAdjAutoVO.createRowSetIterator(null);

        // boolean adjustFlg = true;
        boolean iterateAdvFlg = true;
        boolean iterateAdjFlg = true;
        //int counAdj = 0;

        //assign outstanding amount from current rows into these variables.

        Number tvouAdvAmtOT = new Number(0);
        Number tvouRadjAmtAdj = new Number(0);
        Number tvouAdjRemainOT = new Number(0);
        Number tvouAdvRemainOT = new Number(0);
        Number tvouTrxAmt = new Number(0);
        Number amtDiff = new Number(0);
        Row tvouAdvDtlAutoRow = null;
        Row tvouAdjAutoRow = null;

        if (tvouAdvDtlAutoRit.hasNext() && tvouAdjAutoRit.hasNext())
            while ((tvouAdvDtlAutoRit.hasNext() || tvouAdjAutoRit.hasNext())) {

                System.out.println("main iterator ");
                /** Check whether advance can be adjusted or not*/
                //iterate advance iterator
                if (iterateAdvFlg && tvouAdvDtlAutoRit.hasNext()) {
                    tvouAdvDtlAutoRow = tvouAdvDtlAutoRit.next();
                    System.out.println("next adv tvouAdvDtlAutoRow.getAttribute(\"TvouAdjAmtOT\")) = " +
                                       tvouAdvDtlAutoRow.getAttribute("TvouAdjAmtOT"));
                    //since currect row is marked for adjustment hence set iterateAdvFlg false untill transaction for
                    //this row is done
                    if ("Y".equals(tvouAdvDtlAutoRow.getAttribute("TvouAdjAdvChkFlg")) &&
                        ((Number) tvouAdvDtlAutoRow.getAttribute("TvouAdjAmtOT")).compareTo(0) == 1) {
                        iterateAdvFlg = false;
                        System.out.println("1a");
                    } else {
                        System.out.println("2a");
                        iterateAdvFlg = true;
                    }
                } else if (!tvouAdvDtlAutoRit.hasNext() && tvouAdvRemainOT.compareTo(new Number(0)) == 0) {
                    System.out.println("3a");
                    iterateAdjFlg = true;
                }
                /** Check whether invoice can be adjusted or not*/
                System.out.println("iterateAdvFlg = " + iterateAdvFlg + "iterateAdjFlg = " + iterateAdjFlg);
                //iterate invoice iterator
                if (iterateAdjFlg && tvouAdjAutoRit.hasNext()) {
                    tvouAdjAutoRow = tvouAdjAutoRit.next();
                    System.out.println("next Inv tvouAdjAutoRow.getAttribute(\"TvouAdjAmtOT\")) = " +
                                       tvouAdjAutoRow.getAttribute("TvouAdjAmtOT"));
                    //since currect row is marked for adjustment hence set iterateAdjFlg false untill transaction for
                    //this row is done
                    if ("Y".equals(tvouAdjAutoRow.getAttribute("TvouAdjChkFlg")) &&
                        ((Number) tvouAdjAutoRow.getAttribute("TvouAdjAmtOT")).compareTo(0) == 1) {
                        iterateAdjFlg = false;
                    } else {
                        iterateAdjFlg = true;
                    }
                } else if (!tvouAdjAutoRit.hasNext() && tvouAdjRemainOT.compareTo(new Number(0)) == 0) {
                    iterateAdvFlg = true;
                }

                //calculate adjustable advance
                if ("Y".equals(tvouAdvDtlAutoRow.getAttribute("TvouAdjAdvChkFlg"))) {
                    tvouAdvAmtOT = (Number) tvouAdvDtlAutoRow.getAttribute("TvouAdjAmtOT");
                    tvouTrxAmt = (Number) tvouAdvDtlAutoRow.getAttribute("TvouAmtTrx");

                    if (tvouAdvDtlAutoRow.getAttribute("TvouCurrIdTrx").equals(tvouAdvDtlAutoRow.getAttribute("TvouAdvCurrIdSp"))) {
                        tvouAdvRemainOT = tvouAdvAmtOT.subtract(tvouTrxAmt);
                    } else {
                        tvouAdvRemainOT =
                            tvouAdvAmtOT.subtract(tvouTrxAmt.divide((Number) tvouAdvDtlAutoRow.getAttribute("TvouCcOld")).multiply((Number) tvouAdvDtlAutoRow.getAttribute("TvouCurrCcTrx"))); // need to change trx Amt

                    }

                    /*   System.out.println("calculate adjustable advance :- tvouAdvAmtOT = " + tvouAdvAmtOT +
                                       " tvouTrxAmt = " + tvouTrxAmt + " tvouAdvRemainOT = " + tvouAdvRemainOT); */
                }
                // System.out.println("tvouAdvRemainOT " + tvouAdvRemainOT);


                if ("Y".equals(tvouAdjAutoRow.getAttribute("TvouAdjChkFlg"))) {

                    //get already assigned advance amount
                    tvouRadjAmtAdj = (Number) tvouAdjAutoRow.getAttribute("TvouRadjAmtAdj");

                    //check for remaining outstanding amount for invoice

                    tvouAdjRemainOT = (Number) tvouAdjAutoRow.getAttribute("TvouAdjAmtOT");
                    System.out.println("tvouAdjRemainOT = " + tvouAdjRemainOT);
                    tvouAdjRemainOT = tvouAdjRemainOT.subtract(tvouRadjAmtAdj);
                    //  Number trxCc= (Number)tvouAdjAutoRow.getAttribute("TvouCurrCcTrx");

                    System.out.println("tvouRadjAmtAdj = " + tvouRadjAmtAdj + " tvouAdjRemainOT = " + tvouAdjRemainOT);
                }
                //  System.out.println("tvouAdjRemainOT " + tvouAdjRemainOT);

                //check if outstanding advance is greater than 0 and advance row is selected
                if (((Number) tvouAdvDtlAutoRow.getAttribute("TvouAdjAmtOT")).compareTo(0) == 1 &&
                    "Y".equals(tvouAdvDtlAutoRow.getAttribute("TvouAdjAdvChkFlg")) &&
                    tvouAdvRemainOT.compareTo(new Number(0)) == 1) {


                    //  System.out.println("If adv");
                    //1. check if row is selected.
                    //2. check if outstanding amt for invoice is greater than 0.
                    //3. and tvouAdvRemainOT is not zero.

                    if ("Y".equals(tvouAdjAutoRow.getAttribute("TvouAdjChkFlg")) &&
                        ((Number) tvouAdjAutoRow.getAttribute("TvouAdjAmtOT")).compareTo(0) == 1 &&
                        tvouAdjRemainOT.compareTo(new Number(0)) == 1) {


                        //   System.out.println("If adj");
                        Number trxCc = (Number) tvouAdjAutoRow.getAttribute("TvouCurrCcTrx");
                        Number tvouAdjRemainOTTrx = new Number(0);
                        if (tvouAdjAutoRow.getAttribute("TvouAdjCurrIdSp").equals(tvouAdjAutoRow.getAttribute("TvouCurrIdTrx"))) {
                            tvouAdjRemainOTTrx = tvouAdjRemainOT;
                        } else {
                            tvouAdjRemainOTTrx =
                                tvouAdjRemainOT.multiply((Number) tvouAdjAutoRow.getAttribute("TvouCcOld")).divide(trxCc);

                        }


                        //execute amount transfer code after round off
                        Number tvouAdvRemainOTCalc = new Number(0);
                        if (tvouAdvDtlAutoRow.getAttribute("TvouAdvCurrIdSp").equals(tvouAdvDtlAutoRow.getAttribute("TvouCurrIdTrx"))) {
                            tvouAdvRemainOTCalc = tvouAdvRemainOT;
                        } else {
                            tvouAdvRemainOTCalc =
                                tvouAdvRemainOT.multiply((Number) tvouAdvDtlAutoRow.getAttribute("TvouCcOld")).divide(trxCc);
                        }

                        Number tvouAdjRemainOTCalc = new Number(0);
                        if (tvouAdjAutoRow.getAttribute("TvouAdjCurrIdSp").equals(tvouAdjAutoRow.getAttribute("TvouCurrIdTrx"))) {
                            tvouAdjRemainOTCalc = tvouAdjRemainOT;
                        } else {
                            tvouAdjRemainOTCalc =
                                tvouAdjRemainOT.multiply((Number) tvouAdjAutoRow.getAttribute("TvouCcOld")).divide(trxCc);
                        }

                        amtDiff = roundOffAmt((tvouAdvRemainOTCalc)).subtract((tvouAdjRemainOTCalc));
                        // both var need to change in trx curr so dat we can calcluate diff separately just for calculation
                        System.out.println("amtDiff = " + amtDiff + " tvouAdvRemainOT = " + tvouAdvRemainOT);
                        //remaining advance is greater than remaining bill amount
                        if (amtDiff.compareTo(0) == 1) {

                            //    System.out.println("update if " + " amtDiff :" + amtDiff);
                            //update tvouAdjAutoRows

                            tvouAdjAutoRow.setAttribute("TvouRemainOt", new Number(0));
                            tvouAdjAutoRow.setAttribute("TvouRadjAmtAdj", tvouRadjAmtAdj.add(tvouAdjRemainOT));
                            /* System.out.println("tvouRadjAmtAdj.add(tvouAdjRemainOT) " +
                                               tvouRadjAmtAdj.add(tvouAdjRemainOT)); */
                            //update tvouAdvDtlAutoRow
                            Number amtDiffAdv = new Number(0);
                            if (tvouAdvDtlAutoRow.getAttribute("TvouCurrIdTrx").equals(tvouAdvDtlAutoRow.getAttribute("TvouAdvCurrIdSp"))) {
                                amtDiffAdv = amtDiff;

                            } else {
                                amtDiffAdv =
                                    roundOffAmt(amtDiff.multiply(trxCc).divide((Number) tvouAdvDtlAutoRow.getAttribute("TvouCcOld")));

                            }

                            tvouAdvDtlAutoRow.setAttribute("TvouRemainOt",
                                                           amtDiffAdv); // need to change in adv curr after getting diff in trx curr

                            System.out.println("1tvouAdvDtlAutoRow.getAttribute(\"TvouAdvCurrIdSp\").equals(tvouAdvDtlAutoRow.getAttribute(\"TvouCurrIdTrx\")) = " +
                                               tvouAdvDtlAutoRow.getAttribute("TvouAdvCurrIdSp").equals(tvouAdvDtlAutoRow.getAttribute("TvouCurrIdTrx")));

                            if (tvouAdvDtlAutoRow.getAttribute("TvouAdvCurrIdSp").equals(tvouAdvDtlAutoRow.getAttribute("TvouCurrIdTrx"))) {
                                tvouAdvDtlAutoRow.setAttribute("TvouAmtTrx", tvouTrxAmt.add(tvouAdjRemainOT));

                            } else {
                                tvouAdvDtlAutoRow.setAttribute("TvouAmtTrx",
                                                               roundOffAmt(tvouTrxAmt.add(tvouAdjRemainOT.multiply((Number) tvouAdjAutoRow.getAttribute("TvouCcOld")).divide(trxCc)))); // nee to change tvouAdjRemainOT into trx curr

                            }

                            System.out.println("tvouTrxAmt = " + tvouTrxAmt + " tvouAdjRemainOT = " + tvouAdjRemainOT +
                                               " tvouAdjAutoRow.getAttribute(\"TvouCcCurr\")) = " +
                                               tvouAdjAutoRow.getAttribute("TvouCcCurr"));
                            System.out.println("in first trx amt = " +
                                               tvouTrxAmt.add(tvouAdjRemainOT.multiply((Number) tvouAdjAutoRow.getAttribute("TvouCcOld")).divide(trxCc)));
                            if (tvouAdvDtlAutoRow.getAttribute("TvouAdvCurrIdSp").equals(tvouAdvDtlAutoRow.getAttribute("TvouCurrIdTrx"))) {
                                tvouAdvDtlAutoRow.setAttribute("TvouAdvAmtAdj", tvouTrxAmt.add(tvouAdjRemainOT));

                            } else {
                                tvouAdvDtlAutoRow.setAttribute("TvouAdvAmtAdj",
                                                               roundOffAmt((tvouTrxAmt.multiply(trxCc).divide((Number) tvouAdvDtlAutoRow.getAttribute("TvouCcOld"))).add(tvouAdjRemainOT))); //need to change trx Amt into adv curr

                            }

                            tvouAdvRemainOT = new Number(amtDiffAdv); // into adv currency
                            // tvouAdjRemainOT.multiply((Number))
                            insertTvouAdjDtlData(tvouAdjRemainOTTrx, tvouAdjAutoRow, tvouAdvDtlAutoRow);
                            tvouAdjRemainOT = new Number(0);
                            iterateAdvFlg = false;
                            iterateAdjFlg = true;

                        }
                        //remaining advance is equal to remaining than bill amount
                        else if (amtDiff.compareTo(0) == 0) {

                            //     System.out.println("update else if " + " amtDiff :" + amtDiff);

                            //update tvouAdjAutoRow
                            tvouAdjAutoRow.setAttribute("TvouRemainOt", new Number(0));
                            tvouAdjAutoRow.setAttribute("TvouRadjAmtAdj", tvouRadjAmtAdj.add(tvouAdjRemainOT));
                            /*   System.out.println("tvouRadjAmtAdj.add(tvouAdjRemainOT) " +
                                               tvouRadjAmtAdj.add(tvouAdjRemainOT)); */

                            //update tvouAdvDtlAutoRow
                            tvouAdvDtlAutoRow.setAttribute("TvouRemainOt", new Number(0));
                            System.out.println("2tvouAdvDtlAutoRow.getAttribute(\"TvouAdvCurrIdSp\").equals(tvouAdvDtlAutoRow.getAttribute(\"TvouCurrIdTrx\")) = " +
                                               tvouAdvDtlAutoRow.getAttribute("TvouAdvCurrIdSp").equals(tvouAdvDtlAutoRow.getAttribute("TvouCurrIdTrx")));

                            if (tvouAdvDtlAutoRow.getAttribute("TvouAdvCurrIdSp").equals(tvouAdvDtlAutoRow.getAttribute("TvouCurrIdTrx"))) {
                                tvouAdvDtlAutoRow.setAttribute("TvouAmtTrx", tvouTrxAmt.add(tvouAdjRemainOT));

                            } else {
                                tvouAdvDtlAutoRow.setAttribute("TvouAmtTrx",
                                                               roundOffAmt(tvouTrxAmt.add(tvouAdjRemainOT.multiply((Number) tvouAdvDtlAutoRow.getAttribute("TvouCcOld")).divide(trxCc)))); // nee to change tvouAdjRemainOT into trx curr

                            }


                            System.out.println("in second trx amt = " +
                                               tvouTrxAmt.add(tvouAdjRemainOT.multiply((Number) tvouAdvDtlAutoRow.getAttribute("TvouCcOld")).divide(trxCc)));

                            if (tvouAdvDtlAutoRow.getAttribute("TvouAdvCurrIdSp").equals(tvouAdvDtlAutoRow.getAttribute("TvouCurrIdTrx"))) {
                                tvouAdvDtlAutoRow.setAttribute("TvouAdvAmtAdj", tvouTrxAmt.add(tvouAdjRemainOT));

                            } else {
                                tvouAdvDtlAutoRow.setAttribute("TvouAdvAmtAdj",
                                                               roundOffAmt((tvouTrxAmt.multiply(trxCc).divide((Number) tvouAdvDtlAutoRow.getAttribute("TvouCcOld"))).add(tvouAdjRemainOT))); //need to change trx Amt into adv curr

                            }


                            insertTvouAdjDtlData(tvouAdjRemainOTTrx, tvouAdjAutoRow, tvouAdvDtlAutoRow);

                            tvouAdvRemainOT = new Number(0);
                            tvouAdjRemainOT = new Number(0);
                            iterateAdvFlg = true;
                            iterateAdjFlg = true;
                        }
                        //remaining advance is less than remaining bill amount
                        else {

                            //     System.out.println("update else " + " amtDiff :" + amtDiff);

                            //update tvouAdjAutoRow
                            if (tvouAdjAutoRow.getAttribute("TvouAdjCurrIdSp").equals(tvouAdjAutoRow.getAttribute("TvouCurrIdTrx"))) {
                                tvouAdjAutoRow.setAttribute("TvouRemainOt", amtDiff);

                            } else {
                                tvouAdjAutoRow.setAttribute("TvouRemainOt",
                                                            amtDiff.divide((Number) tvouAdjAutoRow.getAttribute("TvouCcOld")).multiply(trxCc));

                            }
                            // in inv curr
                            // System.out.println("TvouRemainOt " + tvouAdjAutoRow.getAttribute("TvouRemainOt"));
                            Number trxAmtAdv = new Number(0);
                            if (tvouAdvDtlAutoRow.getAttribute("TvouAdvCurrIdSp").equals(tvouAdvDtlAutoRow.getAttribute("TvouCurrIdTrx"))) {
                                trxAmtAdv = tvouAdvRemainOT;
                            } else {
                                trxAmtAdv =
                                    roundOffAmt(tvouAdvRemainOT.multiply((Number) tvouAdvDtlAutoRow.getAttribute("TvouCcOld")).divide(trxCc));

                            }
                            Number Amtadj = new Number(0);
                            if (tvouAdjAutoRow.getAttribute("TvouCurrIdTrx").equals(tvouAdjAutoRow.getAttribute("TvouAdjCurrIdSp"))) {
                                Amtadj = trxAmtAdv;
                            } else {
                                Amtadj =
                                    roundOffAmt(trxAmtAdv.multiply(trxCc).divide((Number) tvouAdjAutoRow.getAttribute("TvouCcOld")));

                            }
                            // roundOffAmt(trxAmtAdv.multiply(trxCc).divide((Number) tvouAdjAutoRow.getAttribute("TvouCcOld")));
                            tvouAdjAutoRow.setAttribute("TvouRadjAmtAdj",
                                                        tvouRadjAmtAdj.add(Amtadj)); // need to change tvouAdvRemainOT into inv curr

                            /*  System.out.println("tvouRadjAmtAdj.add(tvouAdvRemainOT) " +
                                               tvouRadjAmtAdj.add(tvouAdvRemainOT)); */

                            //update tvouAdvDtlAutoRow
                            tvouAdvDtlAutoRow.setAttribute("TvouRemainOt", new Number(0));
                            System.out.println("tvouAdvDtlAutoRow.getAttribute(\"TvouAdvCurrIdSp\").equals(tvouAdvDtlAutoRow.getAttribute(\"TvouCurrIdTrx\")) = " +
                                               tvouAdvDtlAutoRow.getAttribute("TvouAdvCurrIdSp").equals(tvouAdvDtlAutoRow.getAttribute("TvouCurrIdTrx")));
                            //                            if (tvouAdvDtlAutoRow.getAttribute("TvouAdvCurrIdSp").equals(tvouAdvDtlAutoRow.getAttribute("TvouCurrIdTrx"))) {
                            //
                            //                            } else {
                            //                                tvouAdvDtlAutoRow.setAttribute("TvouAmtTrx", tvouTrxAmt.add(trxAmtAdv));
                            //                            }

                            tvouAdvDtlAutoRow.setAttribute("TvouAmtTrx", tvouTrxAmt.add(trxAmtAdv));

                            System.out.println("in third trx amt = " + tvouTrxAmt.add(trxAmtAdv) + " tvouTrxAmt = " +
                                               tvouTrxAmt + " trxAmtAdv = " + trxAmtAdv);
                            //                            tvouAdvDtlAutoRow.setAttribute("TvouAdvAmtAdj",
                            //                                                           roundOffAmt((tvouTrxAmt.multiply(trxCc).divide((Number) tvouAdvDtlAutoRow.getAttribute("TvouCcOld"))).add(tvouAdvRemainOT))); //need to change trx Amt into adv curr
                            Number tvouAdvAmtAdjCalc = new Number(0);
                            if (tvouAdvDtlAutoRow.getAttribute("TvouCurrIdTrx").equals(tvouAdvDtlAutoRow.getAttribute("TvouAdvCurrIdSp"))) {
                                tvouAdvAmtAdjCalc = tvouTrxAmt;
                            } else {
                                tvouAdvAmtAdjCalc =
                                    tvouTrxAmt.multiply(trxCc).divide((Number) tvouAdvDtlAutoRow.getAttribute("TvouCcOld"));
                            }
                            tvouAdvDtlAutoRow.setAttribute("TvouAdvAmtAdj",
                                                           roundOffAmt(tvouAdvAmtAdjCalc.add(tvouAdvRemainOT))); //need to change trx Amt into adv curr

                            insertTvouAdjDtlData(trxAmtAdv, tvouAdjAutoRow, tvouAdvDtlAutoRow);
                            tvouAdvRemainOT = new Number(0);

                            iterateAdvFlg = true;
                            iterateAdjFlg = false;
                        }

                    } else {
                        //do nothing
                        // System.out.println("bill rows :do nothing");
                    }

                } else {
                    //do nothing
                    // System.out.println("advance rows :do nothing");
                }
            }
        tvouAdvDtlAutoRit.closeRowSetIterator();
        tvouAdjAutoRit.closeRowSetIterator();

        //set the remaining transaction amount for the invoices
        resetBalTransactionAmount();
    }

    /**
     * Created on May 08, 2014 by Priyank Khare to set the transient summary fields of Auto Ajustment tables
     * which are TVOU_ADJ and TVOU_ADV_DTL.
     * **/
    public void setAdjustmentSummaryCol() {

        setTvouAdjSumCol();
        setTvouAdvDtlSumCol();
    }


    /**
     * Created on May 08, 2014 by Priyank Khare to set the transient summary fields of
     * TVOU_ADJ.
     * **/
    public void setTvouAdjSumCol() {

        Number SumTransAmtInvoice = new Number(0);
        Number SumTransAmtOthers = new Number(0);
        Number SumAdjustableAmtTrans = new Number(0);
        Row tvouAdjRow = null;

        ViewObject tvouAdjVO = findViewObject("TvouAdjAutoVO");
        RowSetIterator tvouAdjRit = tvouAdjVO.createRowSetIterator(null);

        //sum the transient field in TvouAdjAutoVO in 1 iteration
        while (tvouAdjRit.hasNext()) {
            tvouAdjRow = tvouAdjRit.next();

            // 7,8,14
            if (tvouAdjRow.getAttribute("TransAmtInvoice") != null)
                SumTransAmtInvoice = SumTransAmtInvoice.add((Number) tvouAdjRow.getAttribute("TransAmtInvoice"));

            if (tvouAdjRow.getAttribute("TransAmtOthers") != null)
                SumTransAmtOthers = SumTransAmtOthers.add((Number) tvouAdjRow.getAttribute("TransAmtOthers"));

        }
        //since adjustable amount is sum of selected invoices and other documents
        SumAdjustableAmtTrans = SumTransAmtInvoice.add(SumTransAmtOthers);


        setDualForAutoAdjTrans(SumTransAmtInvoice, "SumTransAmtInvoice");
        setDualForAutoAdjTrans(SumTransAmtOthers, "SumTransAmtOthers");
        setDualForAutoAdjTrans(SumAdjustableAmtTrans, "SumAdjustableAmtTrans");
    }

    /**
     * Created on May 08, 2014 by Priyank Khare to set the transient summary fields of
     *  TVOU_ADV_DTL.
     * **/
    public void setTvouAdvDtlSumCol() {

        Number SumAdjustableAdvAmt = new Number(0);
        Row tvouAdvRow = null;

        ViewObject tvouAdvDtlVO = findViewObject("TvouAdvDtlAutoVO");
        RowSetIterator tvouAdvDtlRit = tvouAdvDtlVO.createRowSetIterator(null);

        //sum the transient field in TvouAdvDtlAutoVO in 1 iteration
        while (tvouAdvDtlRit.hasNext()) {
            tvouAdvRow = tvouAdvDtlRit.next();


            if (tvouAdvRow.getAttribute("AdjustableAdvAmtTrans") != null)
                SumAdjustableAdvAmt =
                    SumAdjustableAdvAmt.add((Number) tvouAdvRow.getAttribute("AdjustableAdvAmtTrans"));
        }
        setDualForAutoAdjTrans(SumAdjustableAdvAmt, "SumAdjustableAdvAmtTrans");
    }

    /**
     * Method to set the transient variables for summary fields in auto adjustment page.
     * **/
    public void setDualForAutoAdjTrans(Number val, String column_name) {

        ViewObject dualForAutoAdjVO = findViewObject("DualForAutoAdjVO");

        //since query is based on dual table hence current row in page is always available.
        Row r = dualForAutoAdjVO.getCurrentRow();

        r.setAttribute(column_name, val);

    }

    /**
     * Method to match the instrument amount with the line specific amount.
     * used in TempVoucherDtlForm Bean.
     * return false if amount is not valid
     * return true if amount is valid
     * Created by Priyank Khare on 30-05-2014.
     * **/
    public Number[] compareInstrumentAmt() {

        Number[] retVal = new Number[4];
        //At index 0; '1' if mismatch found '0' if amount matched
        //Line Amount at index 1.
        //Instrument Amount at index 2.

        retVal[0] = new Number(0); //default value

        RowSetIterator tvouLineRit = getTvouLinesLnk().createRowSetIterator(null);
        Row tvouLineRow = null;
        while (tvouLineRit.hasNext()) {
            tvouLineRow = tvouLineRit.next();
            if (tvouLineRow.getAttribute("TvouLinesChqSum") != null && tvouLineRow.getAttribute("TvouAmtSp") != null) {
                if (((Number) tvouLineRow.getAttribute("TvouLinesChqSum")).compareTo((Number) tvouLineRow.getAttribute("TvouAmtSp")) !=
                    0) {

                    retVal[0] = new Number(1);
                    retVal[1] = (Number) tvouLineRow.getAttribute("TvouAmtSp");
                    retVal[2] = (Number) tvouLineRow.getAttribute("TvouLinesChqSum");
                    //  System.out.println("mismatch found------"+retVal[1]+" "+retVal[2]);
                }
            }
            // System.out.println("chqsum "+tvouLineRow.getAttribute("TvouLinesChqSum")+" line amt  "+tvouLineRow.getAttribute("TvouAmtSp"));
        }
        return retVal;
    }

    /**
     * Method used to call work flow function.
     * calls db functions APP.WF_GET_USR_LEVEL & APP.WF_INS_TXN
     * Created on 03-06-2014 by priyank Khare
     * **/

    public String callWfFunctions(String cldId, Integer slcId, String orgId, Integer usrId, String tvouId,
                                  Integer docId, Integer docTypId) {

        System.out.println("callWfFunctions--- slcId " + slcId + " cldId " + cldId + "  " + " orgId " + orgId +
                           " docId " + docId + " tvouId " + tvouId + " docTypId " + docTypId);

        //get the work flow for the document 55
        TvouVOImpl tvou = getTvou1();
        Row currentRow = tvou.getCurrentRow();
        Object TvouIdNew = currentRow.getAttribute("TvouId");
        if (TvouIdNew == null && tvouId != null)
            TvouIdNew = tvouId.toString();

        Object TvouTypeId = currentRow.getAttribute("TvouTypeId");
        if (TvouTypeId != null)
            docTypId = Integer.parseInt(TvouTypeId.toString());
        String wfId = getWfId(cldId, slcId, orgId, docId, docTypId);
        //String action = "I";
        //String remark = "A";
        //Number amount11 = new Number(0);
        Object level;
        try {
            level = callStoredFunction(NUMBER, "APP.WF_GET_USR_LEVEL(?,?,?,?,?,?,?)", new Object[] {
                                       slcId, cldId, orgId, usrId, wfId, docId, docTypId
            });
            callStoredFunction(NUMBER, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                               slcId, cldId, orgId, docId, docTypId, wfId, TvouIdNew, usrId, usrId, level, level, "I",
                               "A", new Number(0)
            });

        } catch (Exception nfe) {

            showFacesMsg(resolvElDCMsg("#{bundle['MSG.1113']}").toString(), null, FacesMessage.SEVERITY_ERROR, null);

            nfe.printStackTrace();
        }

        return null;
    }

    /**
     * Method used to get the Work flow id for a document.
     * Created by Priyank Khare on 30-05-2014.
     * **/

    public String getWfId(String cldId, Integer slcId, String orgId, Integer docId, Integer docTypId) {
        System.out.println("getWfId--- slcId " + slcId + " cldId " + cldId + "  " + " orgId " + orgId + " docId " +
                           docId + " docTypId " + docTypId);
        try {
            return callStoredFunction(VARCHAR, "APP.WF_GET_ID(?,?,?,?,?)", new Object[] {
                                      slcId, cldId, orgId, docId, docTypId }).toString();
        } catch (Exception e) {
            e.printStackTrace();

            StringBuilder saveMsg = new StringBuilder("<html><body><p><b>Error in getting Work Flow Details. </b></p>");

            saveMsg.append("</body></html>");

            showFacesMsg(saveMsg.toString(), null, FacesMessage.SEVERITY_ERROR, null);

        }
        return "0";
    }

    /**
     * Generalized method used to display the facesmessages.
     * Created by Priyank Khare on 03-06-2014.
     * @param msgHdr is to set the header for message dialog
     * @param msgDtl is to set if further detail information in meassage is required.
     * @param msgSeverity is to set severity mode.
     * @param msgMode is kept to incorporate conditional activities.
     * **/
    public void showFacesMsg(String msgHdr, String msgDtl, javax.faces.application.FacesMessage.Severity msgSeverity,
                             String msgMode) {

        FacesMessage msg = new FacesMessage(msgHdr);
        msg.setDetail(msgDtl);
        msg.setSeverity(msgSeverity);
        FacesContext.getCurrentInstance().addMessage(null, msg);

    }

    /**
     * Method created to call DB fucntion to get the user at which the document is pending
     * Created by Priyank Khare on 04-06-2014.
     * **/

    public Integer getDocUsrFromWF(String cldId, Integer slcId, String orgId, Integer usrId, String tvouId,
                                   Integer docId, Integer docTypId) {
        Object fnRetVal;

        /* System.out.println("getDocUsrFromWF--- slcId " + slcId + " cldId " + cldId + "  " + " orgId " + orgId +
                           " docId " + docId + " tvouId " + tvouId + " docTypId " + docTypId); */
        try {
            fnRetVal = callStoredFunction(NUMBER, "APP.WF_GET_CUR_USR(?,?,?,?,?,?)", new Object[] {
                                          slcId, cldId, orgId, docId, tvouId, docTypId
            });

            if (fnRetVal != null) {

                if (fnRetVal.equals(-1)) {
                    String msg = (String) resolvEl("#{bundle['MSG.1978']}");
                    showFacesMsg(msg, null, FacesMessage.SEVERITY_ERROR, null);
                }

                return Integer.parseInt(fnRetVal.toString());
            }

        } catch (Exception e) {

            e.printStackTrace();

        }
        String msg = (String) resolvEl("#{bundle['MSG.1978']}");
        showFacesMsg(msg, null, FacesMessage.SEVERITY_ERROR, null);
        return 0;
    }

    /**
     * Method to delete current Tvou Line.
     * Tvou line can be deleted only when after its child VOs' rows are removed.
     * Created by Priyank Khare on 10-06-2014
     * **/

    public void deleteTvouLines() {

        //remove rows from TvouAdj
        //  removeRows("TvouAdj"); //TvouAdj

        //remove rows from TvouAdjDtl
        // removeRows("TvouAdjDtl"); //TvouAdjDtl

        //remove rows from TvouAdjAuto
        removeRows("TvouAdjAutoVO"); //TvouAdjAutoVO

        //remove rows from TvouAdjDtlAuto
        removeRows("TvouAdjDtlAutoVO"); //TvouAdjDtlAutoVO

        //remove rows from TvouAdvDtlAuto
        removeRows("TvouAdvDtlAutoVO"); //TvouAdjDtlAutoVO

        //remove rows from TvouAdvDtlAuto
        removeRows("TvouAdjDtlAutoVO1"); //TvouAdjDtlAutoVO

        //remove rows from TvouBillDtl
        removeRows("TvouBillDtl1"); //TvouBillDtl1

        //remove rows from TvouLineChq
        removeRows("TvouLineChq"); //TvouLineChq

    }

    /**
     * A generalized method to remove all rows of a VO.
     * @param voName which the name of VO.
     * Created by Priyank Khare on 10-06-2014
     * **/

    private void removeRows(String voName) {

        while (findViewObject(voName).createRowSetIterator(null).hasNext()) {

            findViewObject(voName).createRowSetIterator(null).next().remove();

            System.out.println(voName + " row removed ");
        }

        //to remove the error vis-a-vis access of dead entity execute the VO.
        //error is caused if some action is performed in DO_DML of the entuty.

        findViewObject(voName).executeQuery();
    }

    /**
     * Method to allocate given Bank instrument amount to the select Invoices in FIFO order
     * @param bnkInstrmntAmt
     * @param oldCurrRate
     * @param newCurrRate
     * Return value is -1 in case of error otherwise 1.
     * Created on 12-06-2014 by Priyank khare
     * **/
    //    public void abc(TvouAdjAutoVORowImpl tvouAdjAutoVORowImpl){
    //        TvouAdjAutoVORowImpl row = (TvouAdjAutoVORowImpl) getTvouAdjAutoVO().getCurrentRow();
    //    }
    public Integer assignBnkInstrmtAmt(Number bnkInstrmntAmt, Number oldCurrRate, Number newCurrRate) {

        //call method to remove previous adjustment data.
        removeAutoAdjustment();

        System.out.println("bnkInstrmntAmt " + bnkInstrmntAmt);
        //assign bnkInstrmntAmt amount a variables.

        Number assignableAmt = roundOffAmt(bnkInstrmntAmt);
        Number amtDiff = new Number(0);

        //initialize invoice iterator
        RowSetIterator tvouAdjAutoRit = getTvouAdjAutoVO().createRowSetIterator(null);
        TvouAdjAutoVORowImpl tvouAdjAutoRow = null;

        //iterate through invoice rows if bnkInstrmntAmt is greater than 0

        if (bnkInstrmntAmt != null && bnkInstrmntAmt.compareTo(0) == 1)
            while (tvouAdjAutoRit.hasNext()) {

                tvouAdjAutoRow = (TvouAdjAutoVORowImpl) tvouAdjAutoRit.next();

                //1. check if row is selected
                //2. check if outstanding amt for invoice is greater than 0 and TvouRemainOt is not zero

                if ("Y".equals(tvouAdjAutoRow.getTvouAdjChkFlg()) &&
                    tvouAdjAutoRow.getTvouAdjAmtOT().compareTo(0) == 1) {

                    //check the difference between outstanding amount for row and remaining assignableAmt
                    //and set the values according on the basis of three possible outcomes.
                    //execute amount transfer code after round off
                    Number trxAMt = new Number(0);
                    if (tvouAdjAutoRow.getTvouCurrIdTrx().equals(tvouAdjAutoRow.getTvouAdjCurrIdSp())) {
                        trxAMt = tvouAdjAutoRow.getTvouAdjAmtOT();
                    } else {
                        trxAMt =
                            new Number((tvouAdjAutoRow.getTvouAdjAmtOT().multiply(tvouAdjAutoRow.getTvouCcOld())).divide(tvouAdjAutoRow.getTvouCurrCcTrx()));

                    }


                    //                    Number trxAMt =
                    //                        new Number((tvouAdjAutoRow.getTvouAdjAmtOT().multiply(tvouAdjAutoRow.getTvouCcOld())).divide(tvouAdjAutoRow.getTvouCurrCcTrx()));
                    //


                    amtDiff = roundOffAmt(assignableAmt.subtract(trxAMt));
                    System.out.println("trxAMt = " + trxAMt + " amtDiff = " + amtDiff);

                    //remaining advance is greater than remaining bill amount
                    if (amtDiff.compareTo(0) == 1) {

                        System.out.println("update if " + " amtDiff :" + amtDiff);

                        //update tvouAdjAutoRows
                        tvouAdjAutoRow.setTvouAmtTrx(roundOffAmt(trxAMt));
                        tvouAdjAutoRow.setTvouAdjAmtAdjThs(tvouAdjAutoRow.getTvouAdjAmtOT());

                        //update assignableAmt
                        assignableAmt = new Number(amtDiff);

                    }

                    //remaining advance is equal to remaining than bill amount
                    else if (amtDiff.compareTo(0) == 0) {

                        System.out.println("update else if " + " amtDiff :" + amtDiff);

                        //update tvouAdjAutoRow
                        tvouAdjAutoRow.setTvouAmtTrx(roundOffAmt(trxAMt));
                        tvouAdjAutoRow.setTvouAdjAmtAdjThs(tvouAdjAutoRow.getTvouAdjAmtOT());

                        //update assignableAmt
                        assignableAmt = new Number(0);

                        break;
                    }
                    //remaining advance is less than remaining bill amount
                    else {

                        System.out.println("update else " + " amtDiff :" + amtDiff);

                        //update tvouAdjAutoRow
                        tvouAdjAutoRow.setTvouAmtTrx(assignableAmt);
                        // tvouAdjAutoRow.setTvouAdjAmtAdjThs(roundOffAmt((assignableAmt.multiply(tvouAdjAutoRow.getTvouCurrCcTrx())).divide(tvouAdjAutoRow.getTvouCcOld())));


                        if (tvouAdjAutoRow.getTvouCurrIdTrx().equals(tvouAdjAutoRow.getTvouAdjCurrIdSp())) {
                            tvouAdjAutoRow.setTvouAdjAmtAdjThs(roundOffAmt(assignableAmt));
                        } else {
                            tvouAdjAutoRow.setTvouAdjAmtAdjThs(roundOffAmt((assignableAmt.multiply(tvouAdjAutoRow.getTvouCurrCcTrx())).divide(tvouAdjAutoRow.getTvouCcOld())));

                        }

                        //update assignableAmt
                        assignableAmt = new Number(0);

                        break;
                    }

                } else {
                    //do nothing
                    System.out.println("amount assign :do nothing");
                }
            }
        tvouAdjAutoRit.closeRowSetIterator();


        return 1;
    }

    public String CheckDuplicateTemplateName(String CldId, Integer SlocId, String HoOrgId, String TemplateName,
                                             Integer UsrId) {
        System.out.println("In CheckDuplicateTemplateName");
        System.out.println("CldId = " + CldId + " SlocId = " + SlocId + " HoOrgId = " + HoOrgId + " UsrId = " + UsrId +
                           " TemplateName = " + TemplateName);
        Object TvouOrgId = getTvou1().getCurrentRow().getAttribute("TvouOrgId");
        Object callStoredFunction = callStoredFunction(Types.VARCHAR, "FN_CHK_TMPL_NAME_UNQE(?,?,?,?,?,?,?)", new Object[] {
                                                       CldId, SlocId, HoOrgId, TvouOrgId, TemplateName + " -(U)", UsrId,
                                                       "I"
        });
        if (callStoredFunction != null) {
            return (String) callStoredFunction;
        }
        return "E";
    }


    /**  <<<--------------------------------------------------------CODE FOR MANUAL ADJUSTMENT PAGE---------------------------------------------------------------------->>>*/

    public void fetchAdjustmentDataForManual(String p_cld_id, Integer p_slc_id, String p_ho_id, String p_org_id,
                                             Integer p_coa_id, Integer p_eo_mst_id, String p_arap_flg, String p_amt_typ,
                                             String p_filter_Val, Date p_bill_Frm_Dt, Date p_bill_To_Dt,
                                             Integer p_bill_Days) {

        System.out.println("fetchAdjustmentData  " + "p_cld_id" + p_cld_id + " p_slc_id " + p_slc_id + " p_ho_id " +
                           p_ho_id + " p_org_id " + p_org_id + " p_coa_id " + p_coa_id + " p_eo_mst_id " + p_eo_mst_id +
                           " p_arap_flg " + p_arap_flg + " p_amt_typ " + p_amt_typ + " p_filter_Val " + p_filter_Val +
                           " p_bill_Frm_Dt " + p_bill_Frm_Dt + " p_bill_To_Dt " + p_bill_To_Dt + " p_bill_Days " +
                           p_bill_Days);

        removeRows("TvouAdjAutoVO"); //TvouAdjAutoVO

        //remove rows from TvouAdjDtlAuto
        removeRows("TvouAdjDtlAutoVO"); //TvouAdjDtlAutoVO

        //remove rows from TvouAdvDtlAuto
        removeRows("TvouAdvDtlAutoVO"); //TvouAdjDtlAutoVO

        //remove rows from TvouAdvDtlAuto
        removeRows("TvouAdjDtlAutoVO1"); //TvouAdjDtlAutoVO


        //get data into tvou_adj table.
        fetchTvouAdjAuto(p_cld_id, p_slc_id, p_ho_id, p_org_id, p_coa_id, p_eo_mst_id, p_arap_flg, p_amt_typ,
                         p_filter_Val, p_bill_Frm_Dt, p_bill_To_Dt, p_bill_Days);


    }

    private String AmtTyp;

    public void filterArapShuttle(String CldId, Integer SlocId, String HoOrgId, String OrgId, Integer EoMstId,
                                  Integer CoaId, String AmtTyp, String ArApFlg, Date fromDate, Date ToDate,
                                  String FilterVal, Integer days, String Ext1, String Ext2, Integer Ext3,
                                  Integer Ext4) {
        System.out.println("<----In filterArapShuttle---->");
        AmtTyp = getAmtTyp();

        System.out.println("CldId = " + CldId + " SlocId = " + SlocId + " HoOrgId = " + HoOrgId + " OrgId = " + OrgId +
                           " EoMstId = " + EoMstId + " CoaId = " + CoaId + " AmtTyp = " + AmtTyp + " ArApFlg = " +
                           ArApFlg + " fromDate = " + fromDate + " ToDate = " + ToDate + " FilterVal = " + FilterVal +
                           " days = " + days + " group wise = " + Ext1);
        System.out.println("getTab = " + getTab() + "getArApFlg = " + getArApFlg());
        ViewObject arApVO = this.getARAPOS();
        arApVO.setNamedWhereClauseParam("BindCldId", CldId);
        arApVO.setNamedWhereClauseParam("BindSlcId", SlocId);
        arApVO.setNamedWhereClauseParam("BindOrgId", OrgId);
        arApVO.setNamedWhereClauseParam("BindHoOrgId", HoOrgId);
        if (Ext1.equalsIgnoreCase("Y")) {
            System.out.println("entiy wise");
            arApVO.setNamedWhereClauseParam("BindEoMstId", EoMstId);
            arApVO.setNamedWhereClauseParam("BindCoaId", null);
            arApVO.setNamedWhereClauseParam("BindArapFlg", null);

        }
        // Here Ext1 parameter is used to get whether data is filtering on the basis on group or purticular coa
        if (Ext1.equalsIgnoreCase("N")) {
            System.out.println("coa wose");
            arApVO.setNamedWhereClauseParam("BindEoMstId", null);
            arApVO.setNamedWhereClauseParam("BindCoaId", CoaId);
            arApVO.setNamedWhereClauseParam("BindArapFlg", getArApFlg());

        }
        arApVO.setNamedWhereClauseParam("BindAmtTyp", AmtTyp);
        arApVO.setNamedWhereClauseParam("BindFilterVal", FilterVal);
        arApVO.setNamedWhereClauseParam("BindFrmDt", fromDate);
        arApVO.setNamedWhereClauseParam("BindToDt", ToDate);
        arApVO.setNamedWhereClauseParam("BindDays", days);

        TvouVOImpl tvou = getTvou1();
        Row currentRow = tvou.getCurrentRow();
        if (currentRow != null) {
            Object TvouDt = currentRow.getAttribute("TvouDt");
            System.out.println("TvouDt = " + TvouDt);
            if (TvouDt != null) {
                Date vouDate = (Date) TvouDt;
                arApVO.setNamedWhereClauseParam("BindCurVouDt", vouDate.dateValue().toString());

            }
        }
        ViewObjectImpl ln = getTvouLinesLnk();
        Row row = ln.getCurrentRow();
        if (row != null) {
            if (row.getAttribute("TvouPrjwAdjFlg") != null) {
                if (row.getAttribute("TvouPrjwAdjFlg").toString().equalsIgnoreCase("O")) {
                    arApVO.setNamedWhereClauseParam("BindPrjId", null);
                } else {
                    arApVO.setNamedWhereClauseParam("BindPrjId", row.getAttribute("TvouPrjId"));

                }

            }
        }
        arApVO.executeQuery();

        System.out.println("---------arApVO row count :" + arApVO.getRowCount() + "---------");
    }

    public void fetchTvouAdjDtlAutoVO(String p_cld_id, Integer p_slc_id, String p_ho_id, String p_org_id,
                                      Integer p_coa_id, Integer p_eo_mst_id, String p_arap_flg, String p_amt_typ,
                                      String p_filter_Val, Date p_bill_Frm_Dt, Date p_bill_To_Dt, Integer p_bill_Days,
                                      String query) {
        System.out.println("fetchTvouAdjDtlAutoVO---");
        //Create object of ARAPOSVW view to get AR AP data.

        ViewObject arapOsVo = getARAPOS();

        ViewObject tvouLinesVO = getTvouLinesLnk();
        //Row tvouLinesRow = tvouLinesVO.getCurrentRow();

        ViewObjectImpl adjAuto = getTvouAdjAutoVO();
        Row curRowAdjAuto = adjAuto.getCurrentRow();

        ViewObjectImpl tvou = getTvou1();
        Row curRowTvou = tvou.getCurrentRow();
        //Integer TvouCurrIdSp = (Integer)curRowTvou.getAttribute("TvouCurrIdSp");
        // Number TvouCc = (Number)curRowTvou.getAttribute("TvouCc");

        /** Code to Insert rows into dtl table when Checkbox is selected*/
        Row[] filteredRows = arapOsVo.getFilteredRows("InsertIntoAdjDtlFlag", "Y");

        // If row fetched from arap view is greater than zero then Iterate through iterator
        // and assign values from ARAP view's row to TvouAdj table Row.
        Map m = new HashMap();
        ArrayList<SelectItem> adjDtl = (ArrayList<SelectItem>) DisplayIdOfAdjDtl();
        for (SelectItem itm : adjDtl) {
            Object ob = itm.getValue();
            m.put(ob.toString(), ob.toString());
        }
        for (int i = 0; i < filteredRows.length; i++) {
            int count = 0;
            Row currentRow = filteredRows[i];

            // Object[] dispId = adjDtl.toArray();
            String DocTxnIdDisp = (String) filteredRows[i].getAttribute("DocTxnIdDisp");
            if (m.containsKey(DocTxnIdDisp)) {
                count++;
            }

            if (count == 0) {
                ViewObject tvouAdjDtlAutoVO = getTvouAdjDtlAutoVO();
                Row tvouAdjDtlAutoRow = tvouAdjDtlAutoVO.createRow();
                tvouAdjDtlAutoVO.insertRow(tvouAdjDtlAutoRow);
                tvouAdjDtlAutoRow.setAttribute("TvouPrjId", currentRow.getAttribute("PrjId"));
                tvouAdjDtlAutoRow.setAttribute("TvouReqId", currentRow.getAttribute("ArapTxnIdRef4"));

                tvouAdjDtlAutoRow.setAttribute("TvouRadjVouId", currentRow.getAttribute("ArapVouId"));
                tvouAdjDtlAutoRow.setAttribute("TvouRadjVouDt", currentRow.getAttribute("ArapVouDt"));
                tvouAdjDtlAutoRow.setAttribute("TvouRadjSlNo", currentRow.getAttribute("ArapGlSlNo"));
                tvouAdjDtlAutoRow.setAttribute("TvouRadjArapSlNo", currentRow.getAttribute("ArapslNo"));
                tvouAdjDtlAutoRow.setAttribute("TvouRadjAmtSp", currentRow.getAttribute("ArapAmtSp"));
                tvouAdjDtlAutoRow.setAttribute("TvouRadjAmtAdj", new Number(0));
                tvouAdjDtlAutoRow.setAttribute("TvouRadjTab", currentRow.getAttribute("ArapFlg"));
                tvouAdjDtlAutoRow.setAttribute("TvouRadjDispId", currentRow.getAttribute("DocTxnIdDisp"));

                tvouAdjDtlAutoRow.setAttribute("TvouAdjAmtSp", curRowAdjAuto.getAttribute("TvouRadjAmtSp"));
                tvouAdjDtlAutoRow.setAttribute("TvouAdjAmtAdj",
                                               new Number(0)); //curRowAdjAuto.getAttribute("TvouRadjAmtAdj")
                tvouAdjDtlAutoRow.setAttribute("TvouRefId", curRowAdjAuto.getAttribute("TvouRadjVouId"));
                tvouAdjDtlAutoRow.setAttribute("VouRefDt", curRowAdjAuto.getAttribute("TvouRadjVouDt"));
                tvouAdjDtlAutoRow.setAttribute("TvouAdjTvouTypeId", curRowAdjAuto.getAttribute("TvouAdjTvouTypeId"));


                tvouAdjDtlAutoRow.setAttribute("TvouAmtTyp", currentRow.getAttribute("ArapAmtTyp"));
                tvouAdjDtlAutoRow.setAttribute("TvouCcOld", currentRow.getAttribute("ApCc"));
                tvouAdjDtlAutoRow.setAttribute("TvouAdjAmtOT", currentRow.getAttribute("ArapNetAmtOt"));
                tvouAdjDtlAutoRow.setAttribute("TvouAdjDtlChkFlg", "Y");
                tvouAdjDtlAutoRow.setAttribute("TvouAmtTrx", new Number(0));
                tvouAdjDtlAutoRow.setAttribute("TvouAdjNode", "N");
                tvouAdjDtlAutoRow.setAttribute("TvouAdjExtDocNo", curRowAdjAuto.getAttribute("TvouAdjExtDocNo"));
                tvouAdjDtlAutoRow.setAttribute("TvouAdjExtDocDt", curRowAdjAuto.getAttribute("TvouAdjExtDocDt"));
                tvouAdjDtlAutoRow.setAttribute("TvouAdjExtDueDt", curRowAdjAuto.getAttribute("TvouAdjExtDueDt"));
                tvouAdjDtlAutoRow.setAttribute("TvouAdjTxnFlg", "N");
                tvouAdjDtlAutoRow.setAttribute("TvouTxnTyp", "A");
                tvouAdjDtlAutoRow.setAttribute("TvouAdvInvFlg", "N");
                tvouAdjDtlAutoRow.setAttribute("TvouAdjCurrIdSp", currentRow.getAttribute("ArapCurrIdSp"));
                tvouAdjDtlAutoRow.setAttribute("TvouAdjCoaId", currentRow.getAttribute("ArapCoaId"));

                //New Coloumn Added to hold the currency id of Bill in Tvou_Adj table
                tvouAdjDtlAutoRow.setAttribute("TvouAdjDtlCurrIdAdj", curRowAdjAuto.getAttribute("TvouAdjCurrIdSp"));

                // set transaction amount zero for newly created rows.

                //set null value for initial remain amt transient column
                tvouAdjDtlAutoRow.setAttribute("TvouRemainOT", null);
                /** Code to get Total Adjuted amount for that disp Id*/
                String dispId = (String) currentRow.getAttribute("DocTxnIdDisp");
                ViewObjectImpl adjDtlVO = getTvouAdjDtlAutoVO1();
                Row[] row = adjDtlVO.getFilteredRows("TvouRadjDispId", dispId);
                Number TotalAdjustedAmount = new Number(0);
                if (row.length > 0) {
                    Object TotalAdjusted = row[0].getAttribute("TotalAdjustedAmount");
                    TotalAdjustedAmount = (Number) TotalAdjusted;
                }
                System.out.println("TotalAdjustedAmount at the time of creation of rows" + TotalAdjustedAmount);
                tvouAdjDtlAutoRow.setAttribute("TotalAdjustedAmount", TotalAdjustedAmount);


                TvouVOImpl impl = getTvou1();
                Row row1 = impl.getCurrentRow();
                ViewObjectImpl linesLnk = getTvouLinesLnk();
                Row currentRow_2 = linesLnk.getCurrentRow();
                Object CldId = row1.getAttribute("TvouCldId");
                Object OrgId = currentRow_2.getAttribute("TvouOrgId");
                Object currIdBs = row1.getAttribute("TvouCurrIdBs");
                Object convDate = row1.getAttribute("TvouDt");
                System.out.println("in fetchTvouAdjDtlAtuo tvouAdjDtlAutoRow.getAttribute(\"TvouAdjCurrIdSp\") = " +
                                   tvouAdjDtlAutoRow.getAttribute("TvouAdjCurrIdSp"));
                BigDecimal convRate =
                    getlatestCurrencyRate((String) CldId, (String) OrgId, (Integer) currIdBs,
                                          (Integer) tvouAdjDtlAutoRow.getAttribute("TvouAdjCurrIdSp"), "B",
                                          (Date) convDate, "L", "Y");


                Number rate;
                try {
                    rate = new Number(convRate);

                    if (rate.compareTo(-1) == 0) {
                        rate = new Number(1);
                    }
                    tvouAdjDtlAutoRow.setAttribute("TvouCcCurr", rate);
                } catch (Exception e) {
                    System.out.println(e);
                }
            }
        }

        arapOsVo.setWhereClause("");
    }

    public void insertIntoTvouAdjAutoDtl(String query, String p_cld_id, Integer p_slc_id, String p_ho_id,
                                         String p_org_id, Integer p_coa_id, Integer p_eo_mst_id, String p_arap_flg,
                                         String p_amt_typ, String p_filter_Val, Date p_bill_Frm_Dt, Date p_bill_To_Dt,
                                         Integer p_bill_Days) {
        // Function call to insert into tvou_adj_dtl
        fetchTvouAdjDtlAutoVO(p_cld_id, p_slc_id, p_ho_id, p_org_id, p_coa_id, p_eo_mst_id, p_arap_flg, p_amt_typ,
                              p_filter_Val, p_bill_Frm_Dt, p_bill_To_Dt, p_bill_Days, query);
    }

    public void setAmtTyp(String AmtTyp) {
        this.AmtTyp = AmtTyp;
    }

    public String getAmtTyp() {
        ViewObject tvouLinesVO = getTvouLinesLnk();
        Row tvouLinesRow = tvouLinesVO.getCurrentRow();

        // Dr/Cr  AP/AR flags are set according to voucher type

        if (Integer.parseInt(tvouLinesRow.getAttribute("TvouTypeId").toString()) == 2 ||
            Integer.parseInt(tvouLinesRow.getAttribute("TvouTypeId").toString()) == 4) {
            // setTab("Dr");
            return "Dr";

        }

        if (Integer.parseInt(tvouLinesRow.getAttribute("TvouTypeId").toString()) == 3 ||
            Integer.parseInt(tvouLinesRow.getAttribute("TvouTypeId").toString()) == 5) {
            return "Cr";

        }

        /** if voucher is Debit Note Cust or Credit Note Cust data will come from AR table . */
        if (Integer.parseInt(tvouLinesRow.getAttribute("TvouTypeId").toString()) == 11) {

            return "Cr";
        }

        /** if voucher is Debit Note Sup or Credit Note Sup data will come from AP table . */
        if (Integer.parseInt(tvouLinesRow.getAttribute("TvouTypeId").toString()) == 10) {

            return "Dr";

        }

        if (Integer.parseInt(tvouLinesRow.getAttribute("TvouTypeId").toString()) == 15) {
            String behav = (tvouLinesRow.getAttribute("CredrOrDebtr").toString());

            if (behav.equalsIgnoreCase("C")) {
                return "Dr";
            } else {
                return "Cr";
            }
        }
        return AmtTyp;
    }

    /** Function to get the list of display id of all the rows which is already inserted in tvou_adj_dtl @Amandeep */
    public List<SelectItem> DisplayIdOfAdjDtl() {
        List<SelectItem> totalList = new ArrayList<SelectItem>();
        ViewObjectImpl adjDtl = getTvouAdjDtlAutoVO();
        System.out.println("no of row in dtl = " + adjDtl.getRowCount());
        RowSetIterator iterator = adjDtl.createRowSetIterator(null);
        while (iterator.hasNext()) {
            Row next = iterator.next();
            Object attribute = next.getAttribute("TvouRadjDispId");
            totalList.add(new SelectItem(attribute));
        }
        return totalList;
    }

    /** Function to Set the value of checkbox to "Y" for a row which is already inserted in tvou_adj_dtl @Amandeep*/
    public void setCheckFlagOnArap() {
        ARAPOSVOImpl arap = getARAPOS();

        Map m = new HashMap();
        ArrayList<SelectItem> adjDtl = (ArrayList<SelectItem>) DisplayIdOfAdjDtl();
        for (SelectItem itm : adjDtl) {
            Object ob = itm.getValue();
            m.put(ob.toString(), ob.toString());
        }
        System.out.println("size of map =" + m.size());
        // First set allt the value to N  and then change the value to Y for required Row
        unCheckAllAdvances();

        ListIterator<SelectItem> iterator = adjDtl.listIterator();
        while (iterator.hasNext()) {
            SelectItem item = iterator.next();
            Row[] filteredRows = arap.getFilteredRows("DocTxnIdDisp", item.getValue().toString());
            System.out.println("filter row length = " + filteredRows.length);
            if (filteredRows.length > 0) {
                filteredRows[0].setAttribute("InsertIntoAdjDtlFlag", "Y");
            }
        }

    }

    public void checkAllAdvances() {
        ARAPOSVOImpl arap = getARAPOS();
        RowSetIterator rsi = arap.createRowSetIterator(null);
        while (rsi.hasNext()) {
            Row next = rsi.next();
            next.setAttribute("InsertIntoAdjDtlFlag", "Y");
        }
        rsi.closeRowSetIterator();
    }

    public void unCheckAllAdvances() {
        System.out.println("in unCheckAllAdvances ");
        ARAPOSVOImpl arap = getARAPOS();
        RowSetIterator rsi = arap.createRowSetIterator(null);
        while (rsi.hasNext()) {
            System.out.println("in while before doing N");
            Row next = rsi.next();
            next.setAttribute("InsertIntoAdjDtlFlag", "N");
        }
        rsi.closeRowSetIterator();
    }

    public void selectAllAdvanceInAdjDtl() {
        System.out.println("in selectAllAdvanceInAdjDtl");

        ViewObjectImpl adjAutoVO = getTvouAdjAutoVO();
        Row currentRow = adjAutoVO.getCurrentRow();
        Number TvouAmtTrx = (Number) currentRow.getAttribute("TvouAmtTrx");
        Number TvouAdjAmtOT = (Number) currentRow.getAttribute("TvouAdjAmtOT");
        Number TvouCurrCcTrx = (Number) currentRow.getAttribute("TvouCurrCcTrx");
        Number TvouCcCurr = (Number) currentRow.getAttribute("TvouCcOld");
        // System.out.println("TvouAdjAmtOT = " + TvouAdjAmtOT);
        if (currentRow.getAttribute("TvouAdjCurrIdSp").equals(currentRow.getAttribute("TvouCurrIdTrx"))) {
            // do nothing
        } else {
            TvouAdjAmtOT = roundOffAmt(TvouAdjAmtOT.multiply(TvouCcCurr).divide(TvouCurrCcTrx));
        }
        TvouAdjAmtOT = TvouAdjAmtOT.subtract(TvouAmtTrx); // NEED TO CONVERT INTO TRXcc


        ViewObjectImpl adjDtlAutoVO = getTvouAdjDtlAutoVO();
        RowSetIterator rsi = adjDtlAutoVO.createRowSetIterator(null);
        Number total = new Number(0);
        while (rsi.hasNext()) {
            Row next = rsi.next();
            next.setAttribute("TvouAmtTrx", new Number(0));
            if (total.compareTo(TvouAdjAmtOT) <= 0) {
                Number TvouRemainOT = (Number) next.getAttribute("TvouRemainOT");
                Number TvouCurrCcTrxDtl = (Number) next.getAttribute("TvouCurrCcTrx");
                Number TvouCcCurrDtl = (Number) next.getAttribute("TvouCcOld");

                if (next.getAttribute("TvouCurrIdTrx").equals(next.getAttribute("TvouAdjCurrIdSp"))) {
                    // do nothing
                } else {
                    TvouRemainOT = roundOffAmt(TvouRemainOT.multiply(TvouCcCurrDtl).divide(TvouCurrCcTrxDtl));
                }
                if (TvouRemainOT.subtract(TvouAdjAmtOT.subtract(total)).compareTo(0) > 0) {

                    next.setAttribute("TvouAmtTrx", TvouAdjAmtOT.subtract(total));

                    total = total.add(TvouRemainOT);

                } else {
                    total = total.add(TvouRemainOT);
                    next.setAttribute("TvouAmtTrx", TvouRemainOT);
                }
            }

        }
        rsi.closeRowSetIterator();
    }

    public void refreshDetailAdjustedAmountValue() {
        ViewObjectImpl dtlChild = getTvouAdjDtlAutoVO();
        ViewObjectImpl dtlAdjacent = getTvouAdjDtlAutoVO1();
        RowQualifier rq = new RowQualifier(dtlAdjacent);
        RowSetIterator rsiChild = dtlChild.createRowSetIterator(null);
        while (rsiChild.hasNext()) {
            Row next = rsiChild.next();
            String TvouRadjDispId = (String) next.getAttribute("TvouRadjDispId");
            Integer slno = (Integer) next.getAttribute("TvouAdjSlNo");
            //  System.out.println("TvouRadjDispId =" + TvouRadjDispId + "slno =" + slno);
            rq.setWhereClause("TvouRadjDispId ='" + TvouRadjDispId + "' and TvouAdjSlNo=" + slno);
            Row[] filteredRows = dtlAdjacent.getFilteredRows(rq);
            //System.out.println("filteredRows = " + filteredRows.length);
            if (filteredRows.length > 0) {
                Number TotalAdjustedAmount = (Number) filteredRows[0].getAttribute("TotalAdjustedAmount");
                //  System.out.println("TotalAdjustedAmount = " + TotalAdjustedAmount);
                next.setAttribute("TotalAdjustedAmount", TotalAdjustedAmount);

            }

        }
    }

    public void setAutoAdjustGlobalParameters(String p_cld_id, Integer p_slc_id, String p_ho_id, String p_org_id,
                                              Integer p_coa_id, Integer Eo_mst_id, String Entity_wise) {

        //to set the value of bind variables for posted/unposted amount.
        setARAP_AMTParameters(p_cld_id, p_slc_id, p_ho_id, p_org_id, p_coa_id, null);
        /** Above code will execute when it is called from Manual adjustment page. For auto it will return random value(X). @Amandeep*/
        if (resolvEl("#{pageFlowScope.PARAM_MODE}").toString().equalsIgnoreCase("E") ||
            resolvEl("#{pageFlowScope.PARAM_MODE}").toString().equalsIgnoreCase("V") ||
            resolvEl("#{pageFlowScope.PARAM_MODE}").toString().equalsIgnoreCase("S")) {

            /** Code to set the value of total adjusted amount when entered in edit mode*/
            ViewObjectImpl adjacent = getTvouAdjDtlAutoVO1();
            RowSetIterator adjRsi = adjacent.createRowSetIterator(null);
            // get total amount for every voucher and stored it in HashMap
            Map m = new HashMap();
            while (adjRsi.hasNext()) {
                Row next = adjRsi.next();
                String TvouRadjDispId = (String) next.getAttribute("TvouRadjDispId");
                Number TvouAdjAmtAdj = (Number) next.getAttribute("TvouRadjAmtAdj"); // change for multi currency
                Number old = new Number(0);
                if (m.containsKey(TvouRadjDispId)) {
                    old = (Number) m.get(TvouRadjDispId);
                    m.put(TvouRadjDispId, old.add(TvouAdjAmtAdj));
                } else {
                    m.put(TvouRadjDispId, TvouAdjAmtAdj);
                }

            }
            adjRsi.closeRowSetIterator();

            // code to update the total adjusted amount of adjacent DtlVo from above hashmap data.
            RowSetIterator adjupdDtlRsi = adjacent.createRowSetIterator(null);
            while (adjupdDtlRsi.hasNext()) {
                Row next = adjupdDtlRsi.next();
                String TvouRadjDispId = next.getAttribute("TvouRadjDispId").toString();
                Number value = new Number(0);
                if (m.containsKey(TvouRadjDispId)) {
                    value = (Number) m.get(TvouRadjDispId);
                }
                next.setAttribute("TotalAdjustedAmount", value);
            }
            adjupdDtlRsi.closeRowSetIterator();

            /** code to update the child vo for the first time and for rest of the rows its selection listner will do its part */

            ViewObjectImpl adj = getTvouAdjDtlAutoVO();
            RowSetIterator rsi = adj.createRowSetIterator(null);
            while (rsi.hasNext()) {
                Row next = rsi.next();
                String TvouRadjDispId = next.getAttribute("TvouRadjDispId").toString();
                Number value = new Number(0);
                if (m.containsKey(TvouRadjDispId)) {
                    value = (Number) m.get(TvouRadjDispId);
                }
                next.setAttribute("TotalAdjustedAmount", value);

            }
            rsi.closeRowSetIterator();

            /** code to filter the ArapVo in edit mode*/
            ViewObjectImpl line = getTvouLinesLnk();
            if (line != null) {
                Row currentRow = line.getCurrentRow();
                if (currentRow != null) {
                    if (currentRow.getAttribute("TvouEntwAdjFlg") != null) {
                        Entity_wise = (String) currentRow.getAttribute("TvouEntwAdjFlg");
                        System.out.println("Entity_wise = " + Entity_wise);
                    }
                }
            }
            filterArapShuttle(p_cld_id, p_slc_id, p_ho_id, p_org_id, Eo_mst_id, p_coa_id, getAmtTyp(), getArApFlg(),
                              null, null, null, null, Entity_wise, null, null, null);


        }
    }

    /** Method to just refresh the Details*/
    public void refreshAdjustedAmount() {
        /** CODE TO UPDATE SUMMARY BLOCK */
        setTvouAdjSumCol();
        refreshAdjustedDetailAmount();
    }

    public void refreshAdjustedDetailAmount() {


        Number SumTransAdjDtlAmount = new Number(0);
        Row tvouAdjRow = null;

        ViewObject tvouAdjDtlVO = findViewObject("TvouAdjAutoVO");
        RowSetIterator tvouAdjDtlRit = tvouAdjDtlVO.createRowSetIterator(null);

        //sum the transient field in TvouAdvDtlAutoVO in 1 iteration
        while (tvouAdjDtlRit.hasNext()) {
            tvouAdjRow = tvouAdjDtlRit.next();


            if (tvouAdjRow.getAttribute("TvouRadjAmtAdj") != null)
                SumTransAdjDtlAmount = SumTransAdjDtlAmount.add((Number) tvouAdjRow.getAttribute("TvouRadjAmtAdj"));
        }
        setDualForAutoAdjTrans(SumTransAdjDtlAmount, "SumTransAdjDtlAmount");
    }

    /** Method to Adjust Amount*/
    public Number adjustAmount() {
        Number adjDtlSumCol = setTvouAdjDtlSumCol(); //// get value in Bank Currency
        // if total remaining bill amount is less than amount which is getting adjusted then it will
        if (adjDtlSumCol.compareTo(-1) > 0) {
            System.out.println("in if when not -1");
            ViewObjectImpl adjAuto = getTvouAdjAutoVO();
            Row currentRow = adjAuto.getCurrentRow();
            Number TvouCurrCcTrx = (Number) currentRow.getAttribute("TvouCurrCcTrx");
            Number TvouCcCurr = (Number) currentRow.getAttribute("TvouCcOld");
            if (currentRow.getAttribute("TvouAdjCurrIdSp").equals(currentRow.getAttribute("TvouCurrIdTrx"))) {
                currentRow.setAttribute("TvouRadjAmtAdj", roundOffAmt(adjDtlSumCol));
            } else {
                currentRow.setAttribute("TvouRadjAmtAdj",
                                        roundOffAmt(adjDtlSumCol.multiply(TvouCurrCcTrx).divide(TvouCcCurr)));
            }

            // setDualForAutoAdjTrans(SumTransAdjDtlAmount, "SumTransAdjDtlAmount");

            //  Row row = child.getCurrentRow();

            return null;
        }
        return adjDtlSumCol;
    }

    public Number setTvouAdjDtlSumCol() {

        ViewObjectImpl adj = getTvouAdjAutoVO();
        Row currentRow = adj.getCurrentRow();

        ViewObjectImpl childDtl = getTvouAdjDtlAutoVO();
        RowSetIterator childDtlRit = childDtl.createRowSetIterator(null);

        Number SumAmt = new Number(0);
        Number remBal = new Number(0);

        Number trxAmtAdj = new Number(0);
        if (currentRow != null) {
            Number TvouCurrCcTrx = (Number) currentRow.getAttribute("TvouCurrCcTrx");
            Number TvouCcCurr = (Number) currentRow.getAttribute("TvouCcOld");
            Number outStand = (Number) currentRow.getAttribute("TvouAdjAmtOT"); // Outstanding amount of Adjtable
            if (currentRow.getAttribute("TvouAmtTrx") != null) {

                trxAmtAdj = (Number) currentRow.getAttribute("TvouAmtTrx");
                if (currentRow.getAttribute("TvouAdjCurrIdSp").equals(currentRow.getAttribute("TvouCurrIdTrx"))) {
                    trxAmtAdj = roundOffAmt(trxAmtAdj);
                } else {
                    trxAmtAdj = roundOffAmt(trxAmtAdj.multiply(TvouCurrCcTrx).divide(TvouCcCurr));
                }
                /*    System.out.println(" 12TvouCurrCcTrx = " + TvouCurrCcTrx + " TvouCcCurr = " + TvouCcCurr +
                                   " trxAmtAdj = " + trxAmtAdj); */
                // transaction amount of adjTable ----need to convert
            }
            /** GET THE REMAINING BALANCE OF ADJ ROW*/

            remBal = outStand.subtract(trxAmtAdj);

            while (childDtlRit.hasNext()) {
                /** GET THE TOTAL SUM OF TRANSACTION AMOUNT IN ADJ_DTL  */
                Row childRow = childDtlRit.next();
                SumAmt =
                    SumAmt.add((Number) childRow.getAttribute("TvouAmtTrx")); //--- need to convert the sum amount according to adj row
            }
            childDtlRit.closeRowSetIterator();
            // get the value of total transaction amount according to Bill currency
            // System.out.println("total transaction amount according to bank currency = " + SumAmt);

            if (currentRow.getAttribute("TvouAdjCurrIdSp").equals(currentRow.getAttribute("TvouCurrIdTrx"))) {
                // do nothing
            } else {
                SumAmt = roundOffAmt(SumAmt.multiply(TvouCurrCcTrx).divide(TvouCcCurr));

            }
            // System.out.println("total transaction amount according to adj currency = " + SumAmt);

            /** iF REMAINING BALANCE IS LESS THAN TOTAL TRANSACTION AMOUNT THEN RETURN -1 ELSE PERFORM ADJUST OPERATION*/
            if (remBal.compareTo(SumAmt) < 0) {
                //   System.out.println("return -1");
                return new Number(-1);
            } else {
                Number SumTransAdjDtlAmount = new Number(0);
                Row childRow = null;


                ViewObjectImpl adjDtl = getTvouAdjDtlAutoVO1();
                //sum the transient field in TvouAdvDtlAutoVO in 1 iteration
                childDtlRit = childDtl.createRowSetIterator(null);
                while (childDtlRit.hasNext()) {
                    childRow = childDtlRit.next();
                    Number trxAmt = new Number(0);
                    String dispId = (String) childRow.getAttribute("TvouRadjDispId");
                    Number TvouCurrCcTrxDtl = (Number) childRow.getAttribute("TvouCurrCcTrx");
                    Number TvouCcCurrDtl = (Number) childRow.getAttribute("TvouCcOld");

                    //     System.out.println("Display Id=" + dispId);
                    Number prevAdjustedAmount = new Number(0);
                    Number amount = new Number(0);
                    if (childRow.getAttribute("TvouAmtTrx") != null) {
                        prevAdjustedAmount =
                            (Number) childRow.getAttribute("TvouRadjAmtAdj"); //                                       Changed For multi Currency
                        trxAmt = (Number) childRow.getAttribute("TvouAmtTrx");
                        if (childRow.getAttribute("TvouAdjCurrIdSp").equals(childRow.getAttribute("TvouCurrIdTrx"))) {
                            amount = roundOffAmt(trxAmt);

                        } else {
                            amount = roundOffAmt(trxAmt.multiply(TvouCurrCcTrxDtl).divide(TvouCcCurrDtl));
                        }

                        // Changed this value to set in Bill currency
                        if (childRow.getAttribute("TvouCurrIdTrx").equals(currentRow.getAttribute("TvouAdjCurrIdSp"))) {
                            childRow.setAttribute("TvouAdjAmtAdj", roundOffAmt(trxAmt));
                        } else {
                            childRow.setAttribute("TvouAdjAmtAdj",
                                                  roundOffAmt(trxAmt.multiply(TvouCurrCcTrx).divide(TvouCcCurr)));
                        }
                        // need to convert into adj_dtl curr
                        childRow.setAttribute("TvouRadjAmtAdj", amount); // need to convert into adj_dtl curr

                        SumTransAdjDtlAmount = SumTransAdjDtlAmount.add(trxAmt);
                    }
                    Number totalAdj = (Number) childRow.getAttribute("TotalAdjustedAmount");
                    if (childRow.getAttribute("TotalAdjustedAmount") != null) {

                        totalAdj = totalAdj.add(amount.subtract(prevAdjustedAmount));
                        childRow.setAttribute("TotalAdjustedAmount", totalAdj);
                        Row[] filteredRows = adjDtl.getFilteredRows("TvouRadjDispId", dispId);
                        for (int i = 0; i < filteredRows.length; i++) {
                            filteredRows[i].setAttribute("TotalAdjustedAmount", totalAdj);
                        }

                    }
                }
                childDtlRit.closeRowSetIterator();
                return SumTransAdjDtlAmount;

            }


        }
        return null;
    }

    public void setMultiOrgFlag(String multiOrgFlag) {
        this.multiOrgFlag = multiOrgFlag;
    }

    public String getMultiOrgFlag() {
        return multiOrgFlag;
    }

    /**
     * Container's getter for MultiOrgVO1.
     * @return MultiOrgVO1
     */
    public ViewObjectImpl getMultiOrgVO1() {
        return (ViewObjectImpl) findViewObject("MultiOrgVO1");
    }

    public void setGlVouId(String glVouId) {
        this.glVouId = glVouId;
    }

    public String getGlVouId() {
        return glVouId;
    }

    public void deleteFromDetail(String displayId) {
        ViewObjectImpl adjDtl = getTvouAdjDtlAutoVO();
        Row[] filteredRows = adjDtl.getFilteredRows("TvouRadjDispId", displayId);
        if (filteredRows.length > 0) {
            filteredRows[0].remove();
        }

    }

    public void filterUnpostedVoucherDetail(String CldId, Integer SlocId, String HoOrgId, Integer CoaId) {
        ViewObjectImpl adjAutoVO = getTvouAdjAutoVO();
        if (adjAutoVO != null) {
            Row currentRow = adjAutoVO.getCurrentRow();
            if (currentRow != null) {
                String TvouRadjVouId = (String) currentRow.getAttribute("TvouRadjVouId");
                Integer TvouRadjArapSlNo = (Integer) currentRow.getAttribute("TvouRadjArapSlNo");
                Integer TvouRadjSlNo = (Integer) currentRow.getAttribute("TvouRadjSlNo");
                String TvouMstVouId = (String) currentRow.getAttribute("TvouMstVouId");
                System.out.println("<---CldId = " + CldId + " SlocId =  " + SlocId + " HoOrgId = " + HoOrgId +
                                   " CoaId = " + CoaId + " TvouRadjVouId = " + TvouRadjVouId + " TvouRadjArapSlNo = " +
                                   TvouRadjArapSlNo + " TvouRadjSlNo" + +TvouRadjSlNo + "TvouMstVouId = " +
                                   TvouMstVouId + " --->");

                ViewObjectImpl up = getunpostedAmountVO1();
                //  up.resetExecuted();

                up.setNamedWhereClauseParam("BindCldId", CldId);
                up.setNamedWhereClauseParam("BindSlocId", SlocId);
                up.setNamedWhereClauseParam("BindHoOrgId", HoOrgId);
                up.setNamedWhereClauseParam("BindCoaId", CoaId);
                up.setNamedWhereClauseParam("BindMstVouId", TvouMstVouId);
                up.setNamedWhereClauseParam("BindRadjVouId", TvouRadjVouId);
                up.setNamedWhereClauseParam("BindRadjSlNo", TvouRadjSlNo);
                up.setNamedWhereClauseParam("BindArApSlNo", TvouRadjArapSlNo);
                up.executeQuery();
                System.out.println("up.getRoeCount = " + up.getRowCount());


            }
        }

    }


    public void filterPostedVoucherDetail(String CldId, Integer SlocId, String HoOrgId, Integer CoaId) {
        ViewObjectImpl adjAutoVO = getTvouAdjAutoVO();
        if (adjAutoVO != null) {
            Row currentRow = adjAutoVO.getCurrentRow();
            if (currentRow != null) {
                String TvouRadjVouId = (String) currentRow.getAttribute("TvouRadjVouId");
                Integer TvouRadjArapSlNo = (Integer) currentRow.getAttribute("TvouRadjArapSlNo");
                Integer TvouRadjSlNo = (Integer) currentRow.getAttribute("TvouRadjSlNo");
                String TvouMstVouId = (String) currentRow.getAttribute("TvouMstVouId");
                System.out.println("<---CldId = " + CldId + " SlocId =  " + SlocId + " HoOrgId = " + HoOrgId +
                                   " CoaId = " + CoaId + " TvouRadjVouId = " + TvouRadjVouId + " TvouRadjArapSlNo = " +
                                   TvouRadjArapSlNo + " TvouRadjSlNo" + +TvouRadjSlNo + "TvouMstVouId = " +
                                   TvouMstVouId + " --->");

                ViewObjectImpl up = getglAmtDtlVO1();
                // up.resetExecuted();
                up.setNamedWhereClauseParam("BindCldId", CldId);
                up.setNamedWhereClauseParam("BindSlocId", SlocId);
                up.setNamedWhereClauseParam("BindHoOrgId", HoOrgId);
                up.setNamedWhereClauseParam("BindCoaId", CoaId);
                // up.setNamedWhereClauseParam("BindMstVouId", TvouMstVouId);
                up.setNamedWhereClauseParam("BindRadjVouId", TvouRadjVouId);
                up.setNamedWhereClauseParam("BindSlNo", TvouRadjSlNo);
                up.setNamedWhereClauseParam("BindArapSlNo", TvouRadjArapSlNo);
                up.executeQuery();
                //  System.out.println("up.getRoeCount = " + up.getRowCount());


            }
        }

    }

    /**
     * Container's getter for unpostedAmountVO1.
     * @return unpostedAmountVO1
     */
    public ViewObjectImpl getunpostedAmountVO1() {
        return (ViewObjectImpl) findViewObject("unpostedAmountVO1");
    }

    /**
     * Container's getter for glAmtDtlVO1.
     * @return glAmtDtlVO1
     */
    public glAmtDtlVOImpl getglAmtDtlVO1() {
        return (glAmtDtlVOImpl) findViewObject("glAmtDtlVO1");
    }

    /**
     * Container's getter for tvouAdvDtlVO1.
     * @return tvouAdvDtlVO1
     */
    public ViewObjectImpl gettvouAdvDtlVO1() {
        return (ViewObjectImpl) findViewObject("tvouAdvDtlVO1");
    }

    public void filterUnpostedAdvVoucherDetail(String CldId, Integer SlocId, String HoOrgId, Integer CoaId) {
        //  System.out.println("in filterUnpostedAdvVoucherDetail");
        ViewObjectImpl autoVO = getTvouAdjAutoVO();
        Row adjRw = autoVO.getCurrentRow();
        String TvouMstVouId = (String) adjRw.getAttribute("TvouMstVouId");
        ViewObjectImpl adjAutoVO = getARAPOS();

        if (adjAutoVO != null) {
            System.out.println(" got vo");
            Row currentRow = adjAutoVO.getCurrentRow();
            if (currentRow != null) {

                String TvouRadjVouId = (String) currentRow.getAttribute("ArapVouId");
                Integer TvouRadjArapSlNo = (Integer) currentRow.getAttribute("ArapslNo");
                Integer TvouRadjSlNo = (Integer) currentRow.getAttribute("ArapGlSlNo");
                //  String TvouMstVouId = (String)currentRow.getAttribute("TvouMstVouId");
                /*    System.out.println("<---CldId = " + CldId + " SlocId =  " + SlocId + " HoOrgId = " + HoOrgId +
                                   " CoaId = " + CoaId + " TvouRadjVouId = " + TvouRadjVouId + " TvouRadjArapSlNo = " +
                                   TvouRadjArapSlNo + " TvouRadjSlNo" + +TvouRadjSlNo + "TvouMstVouId = " +
                                   TvouMstVouId + " --->");  */

                ViewObjectImpl up = gettvouAdvDtlVO1();
                // up.resetExecuted();
                up.setNamedWhereClauseParam("BindCldId", CldId);
                up.setNamedWhereClauseParam("BindSlocId", SlocId);
                up.setNamedWhereClauseParam("BindHoOrgId", HoOrgId);
                up.setNamedWhereClauseParam("BindCoaId", CoaId);
                up.setNamedWhereClauseParam("BindMstVouId", TvouMstVouId);
                up.setNamedWhereClauseParam("BindRadjVouId", TvouRadjVouId);
                up.setNamedWhereClauseParam("BindSlNo", TvouRadjSlNo);
                up.setNamedWhereClauseParam("BindArapSlNo", TvouRadjArapSlNo);
                up.executeQuery();
                // System.out.println("up.getRoeCount = " + up.getRowCount());


            }
        }

    }

    public void filterPostedAdvVoucherDetail(String CldId, Integer SlocId, String HoOrgId, Integer CoaId) {
        System.out.println("in filterUnpostedAdvVoucherDetail");

        ViewObjectImpl adjAutoVO = getARAPOS();

        if (adjAutoVO != null) {
            System.out.println(" got vo");
            Row currentRow = adjAutoVO.getCurrentRow();
            if (currentRow != null) {

                String TvouRadjVouId = (String) currentRow.getAttribute("ArapVouId");
                Integer TvouRadjArapSlNo = (Integer) currentRow.getAttribute("ArapslNo");
                Integer TvouRadjSlNo = (Integer) currentRow.getAttribute("ArapGlSlNo");
                //  String TvouMstVouId = (String)currentRow.getAttribute("TvouMstVouId");
                /*     System.out.println("<---CldId = " + CldId + " SlocId =  " + SlocId + " HoOrgId = " + HoOrgId +
                                   " CoaId = " + CoaId + " TvouRadjVouId = " + TvouRadjVouId + " TvouRadjArapSlNo = " +
                                   TvouRadjArapSlNo + " TvouRadjSlNo" + +TvouRadjSlNo + " --->");  */

                ViewObjectImpl up = getglAdvDtlVO1();
                // up.resetExecuted();
                up.setNamedWhereClauseParam("BindCldId", CldId);
                up.setNamedWhereClauseParam("BindSlocId", SlocId);
                up.setNamedWhereClauseParam("BindHoOrgId", HoOrgId);
                up.setNamedWhereClauseParam("BindCoaId", CoaId);
                up.setNamedWhereClauseParam("BindRadjVouId", TvouRadjVouId);
                up.setNamedWhereClauseParam("BindSlNo", TvouRadjSlNo);
                up.setNamedWhereClauseParam("BindArapSlNo", TvouRadjArapSlNo);
                up.executeQuery();
                //System.out.println("up.getRoeCount = " + up.getRowCount());


            }
        }

    }

    /**
     * Container's getter for glAdvDtlVO1.
     * @return glAdvDtlVO1
     */
    public ViewObjectImpl getglAdvDtlVO1() {
        return (ViewObjectImpl) findViewObject("glAdvDtlVO1");
    }

    public void thisAdjAmount(Number amount) {
        ViewObjectImpl adjAutoVO = getTvouAdjAutoVO();
        if (adjAutoVO != null) {
            Row currentRow = adjAutoVO.getCurrentRow();
            if (currentRow != null) {
                Number TvouCurrCcTrx = (Number) currentRow.getAttribute("TvouCurrCcTrx");
                Number TvouCcCurr = (Number) currentRow.getAttribute("TvouCcOld");
                if (currentRow.getAttribute("TvouAdjCurrIdSp").equals(currentRow.getAttribute("TvouCurrIdTrx"))) {
                    // do nothing
                } else {
                    amount = roundOffAmt((amount.multiply(TvouCurrCcTrx)).divide(TvouCcCurr));

                }
                /*  System.out.println(" TvouCurrCcTrx = " + TvouCurrCcTrx + "TvouCcCurr = " + TvouCcCurr + " amount = " +
                                   amount); */
                currentRow.setAttribute("TvouAdjAmtAdjThs", amount);
                /// return amount;
            }
        }
        //  return null;
    }

    public String checkBillNumberUniqueness(String CldId, Integer SlocId, String HoOrgId, String OrgId, Integer CoaId,
                                            Date vDate, String BillNo, String TvouId, String Mode) {
        /* System.out.println("CldId = " + CldId + " SlocId = " + SlocId + " HoOrgId = " + HoOrgId + " OrgId = " + OrgId +
                           " CoaId = " + CoaId + " vDate = " + vDate + " BillNo = " + BillNo+" TvouId = "+TvouId+" Mode = "+Mode); */
        if (CoaId != null) {
            Object callStoredFunction =
                callStoredFunction(Types.VARCHAR, "fin.fn_is_coa_dupli_bill_no(?,?,?,?,?,?,?,?,?)", new Object[] {
                                   CldId, SlocId, HoOrgId, OrgId, CoaId, vDate, BillNo, TvouId, Mode
            });
            //   System.out.println("callStoredFunction = " + callStoredFunction);
            if (callStoredFunction != null) {
                String result = (String) callStoredFunction;
                System.out.println("result = " + result);
                return result;
            } else {
                return "E";
            }
        }

        return null;
    }

    public String checkExpenseBillNumberDuplicate(String CldId, Integer SlocId, String HoOrgId, String OrgId,
                                                  Integer CoaId, Date vDate, String BillNo, String TvouId,
                                                  String Mode) {

        ViewObjectImpl bill = getTvouBillDtl1();
        StringBuffer sb = new StringBuffer("");
        if (bill != null) {
            RowSetIterator rsi = bill.createRowSetIterator(null);
            while (rsi.hasNext()) {
                Row next = rsi.next();
                BillNo = (String) next.getAttribute("TvouBillNo");
                //System.out.println("BillNo = "+BillNo);
                String billUnique =
                    checkBillNumberUniqueness(CldId, SlocId, HoOrgId, OrgId, CoaId, vDate, BillNo, TvouId, Mode);
                //System.out.println("billUnique = "+billUnique);
                if (billUnique.equalsIgnoreCase("Y")) {
                    sb.append(BillNo + ",");
                }
                //System.out.println("sb = "+sb);
            }
            if (sb.length() > 0) {
                //System.out.println("sb.substring(0, (sb.length()-1)) = "+sb.substring(0, (sb.length()-1)));
                return sb.substring(0, (sb.length() - 1));
            }

        }
        return null;
    }

    /**Code to check Whether all the Bank Account have instrument added or not */
    public String checkInstrumentAddedOrNot() {
        //System.out.println("in checkInstrumentAddedOrNot");

        TvouVOImpl tvou = getTvou1();
        Row currentRow = tvou.getCurrentRow();
        
        if (currentRow != null) {
            Object CoaTypeTrans = currentRow.getAttribute("CoaTypeTrans");
            Object TvouTypeId = currentRow.getAttribute("TvouTypeId");

            if (CoaTypeTrans != null) {
                ViewObjectImpl lines = getTvouLinesLnk();
                RowSetIterator rsi = lines.createRowSetIterator(null);
                if (CoaTypeTrans.equals(78)) {
                    ViewObjectImpl chq = getTvouLineChqVO1();

                    while (rsi.hasNext()) {
                        Row next = rsi.next();
                        Object CoaType = next.getAttribute("CoaTypeTrans");
                        Object TvouLnTyp = next.getAttribute("TvouLnTyp");
                        if (CoaTypeTrans != null) {
                            if (!TvouLnTyp.equals("H")) {
                                Row[] filteredRows = chq.getFilteredRows("TvouSlNo", next.getAttribute("TvouSlNo"));
                                if (filteredRows.length == 0 && TvouTypeId.equals(6)) {
                                    return "Y";
                                }else if(filteredRows.length!=0 && !TvouTypeId.equals(6)){
                                    return "N";
                                }

                            }
                        }
                    }
                    if (!TvouTypeId.equals(6)) {
                        return "Y";
                    }
                } else if (CoaTypeTrans.equals(79) && TvouTypeId.equals(6)) {
                    ViewObjectImpl chq = getTvouLineChqVO1();

                    while (rsi.hasNext()) {
                        Row next = rsi.next();
                        Object CoaType = next.getAttribute("CoaTypeTrans");
                        Object TvouLnTyp = next.getAttribute("TvouLnTyp");
                        if (CoaType != null) {
                            if (CoaType.equals(78) && (!TvouLnTyp.equals("H"))) {
                                Row[] filteredRows = chq.getFilteredRows("TvouSlNo", next.getAttribute("TvouSlNo"));
                                if (filteredRows.length == 0) {
                                    return "Y";
                                }

                            }
                        }
                    }
                } else {
                    System.out.println("error in check instrument added or not method");
                }
            }
            return "N";
        }


        return null;
    }

    public String instrumentTypeCheck() {
        System.out.println("in instrumentTypeCheck");
        ViewObjectImpl tvou = getTvou1();
        Row currentRowHd = tvou.getCurrentRow();
        if (currentRowHd != null) {
            Object CoaTypeHd = currentRowHd.getAttribute("CoaTypeTrans");
            Object TvouTypeId = currentRowHd.getAttribute("TvouTypeId");
            System.out.println("CoaTypeHd = " + CoaTypeHd + "TvouTypeId = " + TvouTypeId);
            if (TvouTypeId.equals(6)) {
                if (CoaTypeHd != null) {
                    ViewObjectImpl line = getTvouLinesLnk();
                    if (line != null) {
                        System.out.println("when  have some lines");
                        RowSetIterator rsi = line.createRowSetIterator(null);
                        int count = 0;
                        while (rsi.hasNext()) {
                            System.out.println("row number = " + count++);
                            Row next = rsi.next();
                            Object CoaTypeTrans = next.getAttribute("CoaTypeTrans");
                            Object TvouLnTyp = next.getAttribute("TvouLnTyp");
                            System.out.println("CoaTypeTrans = " + CoaTypeTrans + " TvouLnTyp = " + TvouLnTyp);
                            if (!TvouLnTyp.equals("H")) {
                                if (CoaTypeTrans != CoaTypeHd) {
                                    Object TvouSlNo = next.getAttribute("TvouSlNo");
                                    System.out.println("TvouSlNo of line = " + TvouSlNo);
                                    TvouLineChqVOImpl chq = getTvouLineChqVO1();

                                    if (chq != null) {
                                        Row[] allRowsInRange = chq.getAllRowsInRange();
                                        System.out.println("allRowsInRange.length  of chq = " + allRowsInRange.length);
                                        if (allRowsInRange.length > 0) {
                                            Row[] filteredRows = chq.getFilteredRows("TvouSlNo", TvouSlNo);
                                            System.out.println("chq.getFilteredRows for slNo = " + TvouSlNo +
                                                               " is filteredRows = " + filteredRows.length);
                                            if (filteredRows.length > 0) {
                                                Object TvouAmtTyp = next.getAttribute("TvouAmtTyp");
                                                System.out.println(" in instruemnt TvouAmtTyp = " + TvouAmtTyp +
                                                                   " CoaTypeTrans = " + CoaTypeTrans);
                                                if ((CoaTypeTrans.equals(78) && TvouAmtTyp.equals("Dr")) ||
                                                    (CoaTypeTrans.equals(79) && TvouAmtTyp.equals("Cr"))) {
                                                    //only dtr 736
                                                    for (int i = 0; i < filteredRows.length; i++) {
                                                        Object TvouInstrmntTyp =
                                                            filteredRows[i].getAttribute("TvouInstrmntTyp");
                                                        System.out.println("TvouInstrmntTyp = " + TvouInstrmntTyp);
                                                        if (!TvouInstrmntTyp.equals(736)) {
                                                            System.out.println("before returning N");
                                                            return "N";
                                                        }
                                                    }

                                                } else if ((CoaTypeTrans.equals(78) && TvouAmtTyp.equals("Cr")) ||
                                                           (CoaTypeTrans.equals(79) && TvouAmtTyp.equals("Dr"))) {
                                                    // 111,740, 112,238,239

                                                    for (int i = 0; i < filteredRows.length; i++) {
                                                        Object TvouInstrmntTyp =
                                                            filteredRows[i].getAttribute("TvouInstrmntTyp");
                                                        System.out.println("TvouInstrmntTyp = " + TvouInstrmntTyp);

                                                        if (!(TvouInstrmntTyp.equals(111) ||
                                                              TvouInstrmntTyp.equals(112) ||
                                                              TvouInstrmntTyp.equals(238) ||
                                                              TvouInstrmntTyp.equals(239) ||
                                                              TvouInstrmntTyp.equals(740))) {
                                                            System.out.println("before returning N");

                                                            return "N";
                                                        }
                                                    }
                                                } else {
                                                    // other
                                                    return "Y";
                                                }

                                            }
                                        }
                                        //return "Y";
                                    }
                                }
                            }
                        }

                    }
                }
            }
            return "Y";
        }
        return "Y";
    }

    public String duplicateCoaValidator(String coaName) {
        System.out.println("coa Name = " + coaName);
        ViewObjectImpl line = getTvouLinesLnk();
        Row currentRow = line.getCurrentRow();
        RowSetIterator rsi = line.createRowSetIterator(null);
        while (rsi.hasNext()) {
            Row next = rsi.next();
            if (currentRow != next) {
                Object CoaId = next.getAttribute("TvouCoaId");
                Object TvouLnTyp = next.getAttribute("TvouLnTyp");
                if (!TvouLnTyp.equals("DETD")) {
                    Row[] filteredRows = getLovVouCoa().getFilteredRows("CoaId", CoaId);
                    if (filteredRows.length > 0) {
                        String CoaNmTrans = filteredRows[0].getAttribute("CoaNm").toString();
                        System.out.println("  CoaNmTrans = " + CoaNmTrans);
                        System.out.println("CoaNmTrans.equals(coaName) = " + CoaNmTrans.equals(coaName));
                        if (CoaNmTrans.equals(coaName)) {
                            return "Y";
                        }
                    }
                }
            }

        }
        System.out.println("before return N");
        return "N";
    }

    public String checkNoOfOrg() {
        String orgIdparam = resolvEl("#{pageFlowScope.ParamOrgId}").toString();

        ViewObjectImpl line = getTvouLinesLnk();
        RowSetIterator rsi = line.createRowSetIterator(null);
        Map m = new HashMap();
        while (rsi.hasNext()) {
            Row next = rsi.next();
            Object orgId = next.getAttribute("TvouOrgId");
            m.put(orgId, orgId);
        }
        rsi.closeRowSetIterator();
        if (m.size() > 2) {
            return "greater";
        } else if (!m.containsKey(orgIdparam)) {
            return "same";
        } else
            return "Y";
    }

    public void afterWorkFlowFrmLnk(String wfReturn, String txn) {
        if (wfReturn.equalsIgnoreCase("A")) {
            System.out.println("In approve");
            ViewObjectImpl tvouV = getTvou1();
            Row[] rw = tvouV.getFilteredRows("TvouId", txn);
            Row r = rw[0];
            tvouV.setCurrentRow(r);
            System.out.println("row is " + r);
            this.saveAsGL();
            // Row tvouVRow = tvouV.getCurrentRow();
        }

        this.getDBTransaction().commit();
    }

    public WFApprove getAppAM() {
        String appModuleName = "tempVoucherList.model.services.TempVoucherAM";
        String appModuleConfig = "TempVoucherAMLocal";
        return (TempVoucherAMImpl) Configuration.createRootApplicationModule(appModuleName, appModuleConfig);
    }

    public void releaseAppAM(WFApprove am) {
        Configuration.releaseRootApplicationModule((ApplicationModule) am, true);
    }


    /**
     * Container's getter for OpBalDual1.
     * @return OpBalDual1
     */
    public ViewObjectImpl getOpBalDual1() {
        return (ViewObjectImpl) findViewObject("OpBalDual1");
    }

    public String showCoaInfo(String table, Row row) {
        System.out.println("in showCoaInfo");
        TvouVOImpl t = getTvou1();
        Row currentRow = t.getCurrentRow();
        if (currentRow != null) {
            Object TvouCldId = currentRow.getAttribute("TvouCldId");
            Object TvouSlocId = currentRow.getAttribute("TvouSlocId");
            Object TvouHoOrgId = currentRow.getAttribute("TvouHoOrgId");
            Object TvouOrgId = null;
            Object TvouId = currentRow.getAttribute("TvouId");
            Object TvouDt = currentRow.getAttribute("TvouDt");
            Object TvouCoaId = null;
            if (row == null) {
                if (table.toString().equalsIgnoreCase("TVOU")) {
                    TvouCoaId = currentRow.getAttribute("TvouCoaId");
                    TvouOrgId = currentRow.getAttribute("TvouOrgId");
                } else if (table.toString().equalsIgnoreCase("TVOU_LINES")) {
                    ViewObjectImpl line = getTvouLinesLnk();
                    Row row1 = line.getCurrentRow();
                    if (row1 != null) {
                        TvouCoaId = row1.getAttribute("TvouCoaId");
                        TvouOrgId = row1.getAttribute("TvouOrgId");

                    }
                }
            } else {
                TvouCoaId = row.getAttribute("TvouCoaId");
                TvouOrgId = row.getAttribute("TvouOrgId");

            }
            System.out.println("TvouCldId = " + TvouCldId + " TvouSlocId = " + TvouSlocId + " TvouHoOrgId = " +
                               TvouHoOrgId + " TvouOrgId = " + TvouOrgId + " TvouCoaId =  " + TvouCoaId + "TvouId =  " +
                               TvouId + " TvouDt = " + TvouDt);
            callStoredProcedureForOpBal("fin.proc_get_coa_bal_params(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                        TvouCldId, TvouSlocId, TvouHoOrgId, TvouOrgId, TvouCoaId, TvouId, TvouDt, null,
                                        null
            });

        }
        return null;
    }

    public Number getClosingBalance(String table, Row row) {
        showCoaInfo(table, row);
        ViewObjectImpl op = getOpBalDual1();
        Row currentRow = op.getCurrentRow();
        Number clNm = new Number(0);
        if (currentRow != null) {
            Object ClBalProj = currentRow.getAttribute("ClsBalPostOutForAmtChk");
            if (ClBalProj != null) {
                System.out.println("ClBalProj = " + ClBalProj);
                String ClBal = ClBalProj.toString();
                String cl = ClBal.substring(0, ClBal.length() - 3);
                String typ = ClBal.substring(ClBal.length() - 2, ClBal.length());
                System.out.println("cl = " + cl + "typ = " + typ);
                try {
                    clNm = new Number(cl);
                    System.out.println("clNm = " + clNm);
                } catch (SQLException e) {
                    clNm = new Number(-1);
                }
                if (typ.equalsIgnoreCase("Cr")) {
                    return new Number(-1);
                } else if (typ.equalsIgnoreCase("Dr")) {
                    return clNm;
                }

            }
        }
        System.out.println("clNm = " + clNm);
        return clNm;
    }

    protected Object callStoredProcedureForOpBal(String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            // 1. Create a JDBC CallableStatement
            st = getDBTransaction().createCallableStatement("begin " + stmt + "; end ;", 0);
            // 2. Register the first bind variable for the return value
            st.setObject(1, bindVars[0]);
            st.setObject(2, bindVars[1]);
            st.setObject(3, bindVars[2]);
            st.setObject(4, bindVars[3]);
            st.setObject(5, bindVars[4]);
            st.setObject(6, bindVars[5]);
            st.setObject(7, bindVars[6]);
            st.setObject(8, bindVars[7]);
            st.setObject(9, bindVars[8]);

            st.registerOutParameter(10, Types.VARCHAR);
            st.registerOutParameter(11, Types.VARCHAR);
            st.registerOutParameter(12, Types.VARCHAR);
            st.registerOutParameter(13, Types.VARCHAR);
            st.registerOutParameter(14, Types.VARCHAR);
            st.registerOutParameter(15, Types.VARCHAR);
            st.registerOutParameter(16, Types.VARCHAR);
            st.registerOutParameter(17, Types.VARCHAR);
            // 5. Set the value of user-supplied bind vars in the stmt

            st.executeUpdate();
            ViewObjectImpl op = getOpBalDual1();
            //op.executeQuery();
            Row currentRow = op.getCurrentRow();
            if (currentRow != null) {
                try {
                    if (st.getObject(10) != null) {
                        currentRow.setAttribute("OpBalOut", divideValue(st.getObject(10)));
                        System.out.println("OpBalOut = " + st.getObject(10));
                    }
                    if (st.getObject(11) != null) {
                        currentRow.setAttribute("TransDrAmt", st.getObject(11));
                        System.out.println("TransDrAmt = " + st.getObject(11));

                    }
                    if (st.getObject(12) != null) {
                        currentRow.setAttribute("TransCrAmt", st.getObject(12));
                        System.out.println("TransCrAmt = " + st.getObject(12));

                    }
                    if (st.getObject(13) != null) {
                        currentRow.setAttribute("ClBalPostOut", divideValue(st.getObject(13)));
                        currentRow.setAttribute("ClsBalPostOutForAmtChk", st.getObject(13));
                        // add one trans var in vo and use that without modification in validation for that submit value without concatination in that trans var
                        System.out.println("ClBalPostOut = " + st.getObject(13));

                    }
                    if (st.getObject(14) != null) {
                        currentRow.setAttribute("ProjAmtOut", divideValue(st.getObject(14)));
                        System.out.println("ProjAmtOut = " + st.getObject(14));

                    }
                    if (st.getObject(15) != null) {
                        currentRow.setAttribute("UnpostAmtOut", divideValue(st.getObject(15)));
                        System.out.println("UnpostAmtOut = " + st.getObject(15));

                    }
                    if (st.getObject(16) != null) {
                     // currentRow.setAttribute("ClBalOut", totalCrInString((Number)divideValue(st.getObject(16)))); 
                      currentRow.setAttribute("ClBalOut",divideValue(st.getObject(16)));
                        System.out.println("ClBalOut = " + st.getObject(16));
                    }
                    if (st.getObject(17) != null) {
                        currentRow.setAttribute("ClBalProj", divideValue(st.getObject(17)));
                        System.out.println("ClBalProj = " + st.getObject(17));

                    }
                    System.out.println("get ClBalProj = " + currentRow.getAttribute("ClBalProj"));
                } catch (SQLException sqle) {
                    // TODO: Add catch code
                    sqle.printStackTrace();
                }
            }

            return "Y";
        } catch (SQLException e) {
            int end = e.getMessage().indexOf("\n");
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    // 7. Close the statement
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();

                }
            }
        }
    }

    public String applicationAllowed(String CldId, Integer SlocId, String OrgId, Integer roleId, Integer UsrId,
                                     Integer MenuId, Integer SubMenuId) {
        Object callFunction =
            ADFModelUtils.callFunction(this.getRootApplicationModule(),
                                       new StringBuilder("app.fn_sec_sub_menu_allow(?,?,?,?,?,?,?)"), new Object[] {
                                       CldId, SlocId, OrgId, roleId, UsrId, MenuId, SubMenuId
        }, Types.VARCHAR);
        if (callFunction != null) {
            if (callFunction.toString().equalsIgnoreCase("Y"))
                return "Y";
        }
        return "N";
    }

    public AppCostCenterServiceAMImpl getAppAMForCC() {
        String appModuleName = "appCostCenterSevice.model.service.AppCostCenterServiceAM";
        String appModuleConfig = "AppCostCenterServiceAMLocal";
        return (AppCostCenterServiceAMImpl) Configuration.createRootApplicationModule(appModuleName, appModuleConfig);
    }


    public void releaseAppAM(AppCostCenterServiceAMImpl appCostCenter) {
        Configuration.releaseRootApplicationModule((ApplicationModule) appCostCenter, true);
    }

    @Override
    protected void finalize() throws Throwable {

        releaseAppAM(getAppAMForCC());

        super.finalize();
    }

    /**
     * Container's getter for AppCcDoc1.
     * @return AppCcDoc1
     */
    public ViewObjectImpl getAppCcDocVO1() {
        return (ViewObjectImpl) findViewObject("AppCcDocVO1");
    }

    public Boolean chkCcApplicableOrNot() {
        Boolean val = false;
        //  Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR1}").toString());
        //            String hoOrg_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID1}").toString();
        //            String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID1}").toString();
        //            String orgId = resolvEl("#{pageFlowScope.ParamOrgId}").toString();
        //            Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC1}").toString());
        TvouVOImpl impl = getTvou1();
        Row currentRow = impl.getCurrentRow();

        Object hoOrg_id = currentRow.getAttribute("TvouHoOrgId");
        Object cld_id = currentRow.getAttribute("TvouCldId");
        Object orgId = currentRow.getAttribute("TvouOrgId");
        Object slocId = currentRow.getAttribute("TvouSlocId");
        TvouLinesVOImpl linesLnk = getTvouLinesLnk();
        if(linesLnk.getRowCount() > 0)
        orgId = linesLnk.getCurrentRow().getAttribute("TvouOrgId");

        ViewObjectImpl appCcDocVO1 = this.getAppCcDocVO1();
        appCcDocVO1.setNamedWhereClauseParam("BindCldId", cld_id);
        appCcDocVO1.setNamedWhereClauseParam("BindSlocId", slocId);
        appCcDocVO1.setNamedWhereClauseParam("BindHoOrgId", hoOrg_id);
        appCcDocVO1.setNamedWhereClauseParam("BindOrgId", orgId);
        appCcDocVO1.setNamedWhereClauseParam("BindDocId", 55);
        appCcDocVO1.executeQuery();

        Row[] allRowsInRange = appCcDocVO1.getAllRowsInRange();
        if (allRowsInRange.length > 0) {
            System.out.println("55 is allowed");
            appCcDocVO1.setNamedWhereClauseParam("BindDocId", 56);
            appCcDocVO1.executeQuery();
            Row[] allRowsInRangeLine = appCcDocVO1.getAllRowsInRange();
            if(allRowsInRangeLine.length > 0){
                    System.out.println("56 is allowed for org " +orgId);
                val = true;}
        }

        return val;
    }

    public void generateCostCenterHeaderWise() {
        System.out.println("in generateCostCenterHeaderWise");
        if (chkCcApplicableOrNot()) {
            AppCostCenterServiceAMImpl amCC = getAppAMForCC();
            TvouVOImpl impl = getTvou1();
            Row currentRow = impl.getCurrentRow();

            if (currentRow != null) {
                declareGlblValuesForCC();
                System.out.println("before calling function");
                //                  Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR1}").toString());
                //                  String hoOrg_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID1}").toString();
                //                  String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID1}").toString();
                //                  String orgId = resolvEl("#{pageFlowScope.ParamOrgId}").toString();
                //                  Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC1}").toString());
                //

                Object hoOrg_id = currentRow.getAttribute("TvouHoOrgId");
                Object cld_id = currentRow.getAttribute("TvouCldId");
                Object orgId = currentRow.getAttribute("TvouOrgId");
                Object slocId = currentRow.getAttribute("TvouSlocId");
                Object userId = currentRow.getAttribute("UsrIdCreate");


                amCC.generateCostCenterApp((String) cld_id, (Integer) slocId, (String) hoOrg_id, (String) orgId,
                                           currentRow.getAttribute("TvouId").toString(), "H", 55, (Integer) userId,
                                           currentRow.getAttribute("TvouId").toString(), new Number(0),
                resolvEl("#{pageFlowScope.P_CC_LEVEL1}")==null?null:resolvEl("#{pageFlowScope.P_CC_LEVEL1}").toString(),
                resolvEl("#{pageFlowScope.P_CC_LEVEL2}")==null?null: resolvEl("#{pageFlowScope.P_CC_LEVEL2}").toString(),
                 resolvEl("#{pageFlowScope.P_CC_LEVEL3}")==null?null:resolvEl("#{pageFlowScope.P_CC_LEVEL3}").toString(),
                resolvEl("#{pageFlowScope.P_CC_LEVEL4}")==null?null:resolvEl("#{pageFlowScope.P_CC_LEVEL4}").toString(),
                resolvEl("#{pageFlowScope.P_CC_LEVEL5}")==null?null:resolvEl("#{pageFlowScope.P_CC_LEVEL5}").toString());

            }
        }
    }

    public void declareGlblValuesForCC() {
        System.out.println("in declareGlblValuesForCC");
        ViewObjectImpl appCcVwVO1 = this.getAppCcVw1();
        appCcVwVO1.setRangeSize(-1);

        //          Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR1}").toString());
        //          String hoOrg_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID1}").toString();
        //          String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID1}").toString();
        //          String orgId = resolvEl("#{pageFlowScope.ParamOrgId}").toString();
        //          Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC1}").toString());
        //

        TvouVOImpl impl = getTvou1();
        Row currentRow = impl.getCurrentRow();
        Object hoOrg_id = currentRow.getAttribute("TvouHoOrgId");
        Object cld_id = currentRow.getAttribute("TvouCldId");
        Object orgId = currentRow.getAttribute("TvouOrgId");
        Object slocId = currentRow.getAttribute("TvouSlocId");
        Object userId = currentRow.getAttribute("UsrIdCreate");

        appCcVwVO1.setNamedWhereClauseParam("BindCldId", cld_id);
        appCcVwVO1.setNamedWhereClauseParam("BindSlocId", slocId);
        appCcVwVO1.setNamedWhereClauseParam("BindHoOrgId", hoOrg_id);
        appCcVwVO1.setNamedWhereClauseParam("BindOrgId", orgId);
        appCcVwVO1.setNamedWhereClauseParam("BindDocId", 55);

        if (currentRow != null) {
            for (int i = 1; i <= 5; i++) {
                appCcVwVO1.setNamedWhereClauseParam("BindCcPos", i);
                appCcVwVO1.executeQuery();

                Row[] allRowsInRange = appCcVwVO1.getAllRowsInRange();
                if (allRowsInRange.length > 0) {
                    String columnName = null;
                    for (Row r : allRowsInRange) {
                        AttributeDef[] attributeDef = this.getTvouLinesLnk().getAttributeDefs();

                        for (int j = 0; j < attributeDef.length; j++) {
                            /*  System.out.println("j value is " + attributeDef[j].getColumnName());
                              System.out.println("------------ null value is " + r.getAttribute("DbobColNm"));
                              System.out.println("attributeDef[j].getColumnName().equalsIgnoreCase(r.getAttribute(\"DbobColNm\").toString()) " +
                                                 attributeDef[j].getColumnName().equals(r.getAttribute("DbobColNm")));
                              */
                            if (attributeDef[j].getColumnName() != null &&
                                attributeDef[j].getColumnName().equals(r.getAttribute("DbobColNm"))) {
                                columnName = attributeDef[j].getName();
                            }
                        }
                        System.out.println("Column Name is " + columnName);

                        if (columnName != null) {

                            System.out.println("i is " + i + " Cost center Value is " +
                                               currentRow.getAttribute(columnName));


                            RequestContext.getCurrentInstance().getPageFlowScope().put("P_CC_LEVEL" + i,
                                                                                       currentRow.getAttribute(columnName));
                        }
                    }
                } else {
                    System.out.println("i is" + i + " cost center value is null");

                    RequestContext.getCurrentInstance().getPageFlowScope().put("P_CC_LEVEL" + i, null);

                }
            }
        }
    }

    /**
     * Container's getter for AppCcVw1.
     * @return AppCcVw1
     */
    public ViewObjectImpl getAppCcVw1() {
        return (ViewObjectImpl) findViewObject("AppCcVw1");
    }

    public void updateCostCenterAmt(Number amountSp) {
        if (chkCcApplicableOrNot()) {
            System.out.println("Inside cost ceneter update amount method");
            // SlsSoItmVOImpl impl = this.getSlsSoItm1();
            ViewObjectImpl impl = this.getTvouLinesLnk();
            Row currentRow = impl.getCurrentRow();
            if (currentRow != null && currentRow.getAttribute("CcId") != null &&
                currentRow.getAttribute("TvouAmtSp") != null) {
                AppCostCenterServiceAMImpl amCC = getAppAMForCC();
                System.out.println("Inside Am after cresting object");
                if (amCC != null) {

                    declareGlblValuesForCC();


                    TvouVOImpl impl1 = getTvou1();
                    Row currentRow1 = impl1.getCurrentRow();
                    Object hoOrg_id = currentRow1.getAttribute("TvouHoOrgId");
                    Object cld_id = currentRow1.getAttribute("TvouCldId");
                    Object orgId = currentRow1.getAttribute("TvouOrgId");
                    if(impl.getRowCount() > 0)
                    orgId = currentRow.getAttribute("TvouOrgId");
                    Object slocId = currentRow1.getAttribute("TvouSlocId");
                    Object userId = currentRow1.getAttribute("UsrIdCreate");
                    Number amt = new Number(0);
                    if (amountSp != null) {
                        if (amountSp.compareTo(0) > 0)
                            amt = amountSp;
                        else {
                            amt = (Number) currentRow.getAttribute("TvouAmtSp");
                        }
                    } else {
                        amt = (Number) currentRow.getAttribute("TvouAmtSp");
                    }

                    System.out.println("------------------ Not null");
                    Boolean b =
                        costCentreUpdatee((String) cld_id, (Integer) slocId, (String) hoOrg_id, (String) orgId,
                                          (String) currentRow.getAttribute("TvouId"), (Integer) userId,
                                          (String) currentRow.getAttribute("CcId"), amt, amCC);
                    if (!b) {
                        String msg = (String) resolvEl("#{bundle['MSG.1979']}");
                        ADFModelUtils.showFormattedFacesMessage(msg, msg, FacesMessage.SEVERITY_ERROR);
                    }
                }
            }
            System.out.println("After calling Update method");
        }
    }

    public Boolean costCentreUpdatee(String cld_id, Integer slocId, String hoOrg_id, String orgId, String tvouId,
                                     Integer userId, String ccId, Number amt, AppCostCenterServiceAMImpl amCC) {
        String flag="N";
        TvouVOImpl impl = getTvou1();
        Row currentRow = impl.getCurrentRow();
        if(currentRow!=null){
            Object orgH = currentRow.getAttribute("TvouOrgId");
            System.out.println("orgH" +orgH);
            TvouLinesVOImpl linesLnk = getTvouLinesLnk();
            Row row = linesLnk.getCurrentRow();
            if(row!=null){
                Object orgL = row.getAttribute("TvouOrgId");
                System.out.println("orgL" +orgL);
                if(orgH.equals(orgL)){
                    System.out.println("Both org similiar");
                    flag="Y";
                }else{
                    System.out.println("Different org");
                    ViewObjectImpl tempCcVo = this.getTempCostCenterVO1();
                    tempCcVo.setNamedWhereClauseParam("BindOrgId",row.getAttribute("TvouOrgId"));
                    tempCcVo.setNamedWhereClauseParam("BindSlocId", row.getAttribute("TvouSlocId"));
                    tempCcVo.setNamedWhereClauseParam("BindCldId", row.getAttribute("TvouCldId"));
                    tempCcVo.setNamedWhereClauseParam("BindTempId", row.getAttribute("TvouId"));
                    tempCcVo.setNamedWhereClauseParam("BindCcId", row.getAttribute("CcId"));
                    tempCcVo.executeQuery();
                    int count = tempCcVo.getRowCount();
                    System.out.println("Count" +count);
                    if(count>0)
                        flag="Y";
                }
            }
        }
        if (flag.equalsIgnoreCase("Y")) {
            Boolean amount =
                amCC.updateCCAmount((String) cld_id, (Integer) slocId, (String) hoOrg_id, (String) orgId, tvouId, "L",
                                    55, (Integer) userId, ccId, amt,  
                                    resolvEl("#{pageFlowScope.P_CC_LEVEL1}")==null?null:resolvEl("#{pageFlowScope.P_CC_LEVEL1}").toString(),
                                    resolvEl("#{pageFlowScope.P_CC_LEVEL2}")==null?null: resolvEl("#{pageFlowScope.P_CC_LEVEL2}").toString(),
                                     resolvEl("#{pageFlowScope.P_CC_LEVEL3}")==null?null:resolvEl("#{pageFlowScope.P_CC_LEVEL3}").toString(),
                                    resolvEl("#{pageFlowScope.P_CC_LEVEL4}")==null?null:resolvEl("#{pageFlowScope.P_CC_LEVEL4}").toString(),
                                    resolvEl("#{pageFlowScope.P_CC_LEVEL5}")==null?null:resolvEl("#{pageFlowScope.P_CC_LEVEL5}").toString());
            return amount;
        }
        return false;
    }

    public void deleteCostCenterItem() {
        if (chkCcApplicableOrNot()) {
            System.out.println("Inside delete method");
            ViewObjectImpl impl = getTvouLinesLnk();
            Row currentRow = impl.getCurrentRow();
            if (currentRow != null && currentRow.getAttribute("CcId") != null) {
                AppCostCenterServiceAMImpl amCC = getAppAMForCC();
                System.out.println("Inside Am after cresting object");
                if (amCC != null) {
                    System.out.println("------------------ Not null");


                    TvouVOImpl impl1 = getTvou1();
                    Row currentRow1 = impl1.getCurrentRow();
                    Object hoOrg_id = currentRow1.getAttribute("TvouHoOrgId");
                    Object cld_id = currentRow1.getAttribute("TvouCldId");
                    Object orgId = currentRow1.getAttribute("TvouOrgId");
                    Object slocId = currentRow1.getAttribute("TvouSlocId");
                    Object userId = currentRow1.getAttribute("UsrIdCreate");
                    //                       amCC.deleteCCLines((String) cld_id, (Integer) slocId, (String) hoOrg_id,
                    //                                       currentRow.getAttribute("TvouId").toString(),
                    //                                          currentRow.getAttribute("CcId").toString());

                    amCC.deleteCCLines((String) cld_id, (Integer) slocId, (String) hoOrg_id, (String) orgId,
                                       currentRow.getAttribute("TvouId").toString(), "L", 55, (Integer) userId,
                                       currentRow.getAttribute("CcId").toString(), new Number(0),
                    resolvEl("#{pageFlowScope.P_CC_LEVEL1}")==null?null:resolvEl("#{pageFlowScope.P_CC_LEVEL1}").toString(),
                    resolvEl("#{pageFlowScope.P_CC_LEVEL2}")==null?null: resolvEl("#{pageFlowScope.P_CC_LEVEL2}").toString(),
                     resolvEl("#{pageFlowScope.P_CC_LEVEL3}")==null?null:resolvEl("#{pageFlowScope.P_CC_LEVEL3}").toString(),
                    resolvEl("#{pageFlowScope.P_CC_LEVEL4}")==null?null:resolvEl("#{pageFlowScope.P_CC_LEVEL4}").toString(),
                    resolvEl("#{pageFlowScope.P_CC_LEVEL5}")==null?null:resolvEl("#{pageFlowScope.P_CC_LEVEL5}").toString());
                }
            }
            System.out.println("After calling delete method");
        }
    }


    public String insertCostCenterInLines() {
        System.out.println("in insertCostCenterInLines");
        if (chkCcApplicableOrNot()) {
            ViewObjectImpl impl = getTvouLinesLnk();
            RowSetIterator rsi = impl.createRowSetIterator(null);
            TvouVOImpl impl1 = getTvou1();
            Row currentRow1 = impl1.getCurrentRow();
            Object hoOrg_id = currentRow1.getAttribute("TvouHoOrgId");
            Object cld_id = currentRow1.getAttribute("TvouCldId");
            Object orgId = currentRow1.getAttribute("TvouOrgId");
            Object slocId = currentRow1.getAttribute("TvouSlocId");
            Object userId = currentRow1.getAttribute("UsrIdCreate");
            AppCostCenterServiceAMImpl amCC = getAppAMForCC();
            while (rsi.hasNext()) {
                Row next = rsi.next();
                if (next.getAttribute("CcId") != null &&
                    next.getAttribute("TvouLnTyp").toString().equalsIgnoreCase("DOC")) {
                    Boolean b =
                        costCentreUpdatee((String) cld_id, (Integer) slocId, (String) hoOrg_id, (String) orgId,
                                          (String) next.getAttribute("TvouId"), (Integer) userId,
                                          (String) next.getAttribute("CcId"), (Number) next.getAttribute("TvouAmtSp"),
                                          amCC);
                    if (!b) {
                        String msg = (String) resolvEl("#{bundle['MSG.1979']}");
                        ADFModelUtils.showFormattedFacesMessage(msg, msg, FacesMessage.SEVERITY_ERROR);
                    }
                }
            }
            rsi.closeRowSetIterator();
        }
        return null;
    }

    /**
     * Container's getter for LovLatestCurr1.
     * @return LovLatestCurr1
     */
    public LovLatestCurrImpl getLovLatestCurr1() {
        return (LovLatestCurrImpl) findViewObject("LovLatestCurr1");
    }

    /**
     * Container's getter for ExchngeFlctnCount1.
     * @return ExchngeFlctnCount1
     */
    public ViewObjectImpl getExchngeFlctnCount1() {
        return (ViewObjectImpl) findViewObject("ExchngeFlctnCount1");
    }

    public String setProject(String mode) {
        ViewObjectImpl impl = getTvouLinesLnk();
        Row currentRow = impl.getCurrentRow();
        if (mode != null) {
            if (mode.toString().equalsIgnoreCase("O"))
                currentRow.setAttribute("TvouPrjId", "PROJ0000");
            else
                currentRow.setAttribute("TvouPrjId", resolvEl("#{pageFlowScope.GLBL_ORG_PROJ_ID}"));

        }

        return null;
    }
    public Object EmployeeId = null;

    public String processIntimationId() {
        System.out.println("in processIntimationId");
        TvouVOImpl impl = getTvou1();
        Row currentRow = impl.getCurrentRow();

        if (currentRow != null) {
            if (currentRow.getAttribute("TvouReqId") != null) {
                System.out.println("" + currentRow.getAttribute("TvouCldId") + " - " +
                                   currentRow.getAttribute("TvouSlocId") + " - " +
                                   currentRow.getAttribute("TvouHoOrgId") + " - " +
                                   currentRow.getAttribute("TvouOrgId") + " - " + currentRow.getAttribute("TvouReqId") +
                                   " - " + currentRow.getAttribute("TvouId") + " - " +
                                   currentRow.getAttribute("TvouDt") + " - " + currentRow.getAttribute("TvouTypeId") +
                                   " - " + currentRow.getAttribute("TvouCurrIdSp") + " - " +
                                   currentRow.getAttribute("UsrIdCreate") + " - " +
                                   currentRow.getAttribute("UsrIdCreateDt"));
                EmployeeId = callStoredFunction(Types.NUMERIC, "fin.FN_INS_TVOULINE_REQ(?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                currentRow.getAttribute("TvouCldId"), 1,
                                                currentRow.getAttribute("TvouSlocId"),
                                                currentRow.getAttribute("TvouHoOrgId"),
                                                currentRow.getAttribute("TvouOrgId"),
                                                currentRow.getAttribute("TvouReqId"), currentRow.getAttribute("TvouId"),
                                                currentRow.getAttribute("TvouDt"),
                                                currentRow.getAttribute("TvouTypeId"), 0,
                                                currentRow.getAttribute("TvouCurrIdSp"),
                                                currentRow.getAttribute("TvouCc"),
                                                currentRow.getAttribute("UsrIdCreate"),
                                                currentRow.getAttribute("UsrIdCreateDt")
                });
                ViewObjectImpl ln = getTvouLinesLnk();
                ln.executeQuery();
                // currentRow.setAttribute("TvouReqCoaId", EmployeeId);
                System.out.println("EmployeeId = " + EmployeeId);
                //                if (s!=null) {
                //                    return s.toString();
                //                }

            }
            return "Y";
        }
        return "Y";
    }


    /**
     * Container's getter for TvouBillDtlVO1.
     * @return TvouBillDtlVO1
     */
    public ViewObjectImpl getTvouBillDtlVO1() {
        return (ViewObjectImpl) findViewObject("TvouBillDtlVO1");
    }

    /**
     * Container's getter for TvouToTvouBillDtlVL1.
     * @return TvouToTvouBillDtlVL1
     */
    public ViewLinkImpl getTvouToTvouBillDtlVL1() {
        return (ViewLinkImpl) findViewLink("TvouToTvouBillDtlVL1");
    }

    /**
     * Container's getter for ReqAlwVO1.
     * @return ReqAlwVO1
     */
    public ViewObjectImpl getReqAlwVO1() {
        return (ViewObjectImpl) findViewObject("ReqAlwVO1");
    }

    public String insertDefaultTDS() {
        System.out.println("in insertDefaultTDS");
        ViewObjectImpl ln = getTvouLinesLnk();
        Row currentRow = ln.getCurrentRow();
        System.out.println("amoutn before function call = " + currentRow.getAttribute("TvouAmtSp"));
        if (currentRow != null) {
            Object res = callStoredFunction(Types.NUMERIC, "app.FN_GET_TAX_RULE_ID(?,?,?,?,?,?,?,?,?)", new Object[] {
                                            currentRow.getAttribute("TvouCldId"), currentRow.getAttribute("TvouSlocId"),
                                            0, currentRow.getAttribute("TvouOrgId"),
                                            currentRow.getAttribute("TvouHoOrgId"), 0,
                                            currentRow.getAttribute("TvouEoId"), 55, null
            });
            System.out.println("rule id = " + res);
            if (res != null) {
                Integer result = ((BigDecimal) res).intValue();
                //  result = 2;
                System.out.println("!result.equals(-1) = " + !result.equals(-1));
                if (!result.equals(-1)) {
                    System.out.println("in if when result is not -1");
                    ViewObjectImpl tds = getTvouTdsRuleHd();
                    if (tds.getRowCount() == 0) {
                        ViewObjectImpl tdsVo = getAppTdsRuleVO1();
                        tdsVo.setNamedWhereClauseParam("BindCldId", currentRow.getAttribute("TvouCldId"));
                        tdsVo.setNamedWhereClauseParam("BindHoOrgId", currentRow.getAttribute("TvouHoOrgId"));
                        tdsVo.setNamedWhereClauseParam("BindSlcId", currentRow.getAttribute("TvouSlocId"));
                        tdsVo.setNamedWhereClauseParam("BindTaxRuleId", result);
                        tdsVo.executeQuery();
                        Row[] allRowsInRange = tdsVo.getAllRowsInRange();
                        if (allRowsInRange.length > 0) {
                            Row row = tds.createRow();
                            System.out.println("after creating row");
                            row.setAttribute("TvouTdsRuleId", result);
                            row.setAttribute("TvouTdsRuleStrtDt", allRowsInRange[0].getAttribute("TaxRuleStrtDt"));
                            row.setAttribute("TvouTdsRuleInst", allRowsInRange[0].getAttribute("TaxRuleInst"));
                            tds.insertRow(row);
                            System.out.println("after inserting row");
                            System.out.println("after inserting tds row");
                            procTdsForHdr(result.toString());
                            System.out.println("after inserting rule");
                            tdsConsolidation();
                        }

                    }


                }
            }
        }
        ln.executeQuery();
        return null;
    }

    public String isMultiOrg() {
        ViewObjectImpl ln = getTvouLinesLnk();
        RowSetIterator rsi = ln.createRowSetIterator(null);
        while (rsi.hasNext()) {
            Row next = rsi.next();
            if (next.getAttribute("TvouOrgId") != null) {
                if (!next.getAttribute("TvouOrgId").toString().equalsIgnoreCase(getTvou1().getCurrentRow().getAttribute("TvouOrgId").toString())) {
                    return "Y";
                }
            }
        }
        rsi.closeRowSetIterator();
        return "N";
    }

    /**
     * Container's getter for OrgLogoVo1.
     * @return OrgLogoVo1
     */
    public ViewObjectImpl getOrgLogoVo1() {
        return (ViewObjectImpl) findViewObject("OrgLogoVo1");
    }


    /** change on 17-08-15
     * @uthor Savi Garg
     * to Set Default Bill date
     */

    public void defaultBillDateSet() {
        String cldId = (String) this.getTvou1().getCurrentRow().getAttribute("TvouCldId");
        Integer slocId = (Integer) this.getTvou1().getCurrentRow().getAttribute("TvouSlocId");
        String hoOrgId = (String) this.getTvou1().getCurrentRow().getAttribute("TvouHoOrgId");
        Integer tvouCoaId = (Integer) this.getTvouLinesLnk().getCurrentRow().getAttribute("TvouCoaId");
        System.out.println("coa id" + tvouCoaId);
        Object vouDate = this.getTvou1().getCurrentRow().getAttribute("TvouDt");
        Object dt = callStoredFunction(Types.DATE, "fn_get_eo_crdt_due_dt(?,?,?,?,?)", new Object[] {
                                       cldId, slocId, hoOrgId, tvouCoaId, vouDate
        });
        this.getTvouLinesLnk().getCurrentRow().setAttribute("TvouDueDt", dt);

    }

    public Number getTotalbaseInvoiceAmount() {
        TvouAdjAutoVOImpl adjAutoVO = getTvouAdjAutoVO();
        RowSetIterator rsi = adjAutoVO.createRowSetIterator(null);
        Number sum = new Number(0);
        while (rsi.hasNext()) {
            Row next = rsi.next();

            if (next != null) {
                Object invAmt = next.getAttribute("TransInvoiceBaseAmt");
                if (invAmt != null) {
                    sum = sum.add((Number) invAmt);
                }

            }
        }
        rsi.closeRowSetIterator();
        return sum;
    }

    /**
     * Container's getter for AppTdsRuleVO1.
     * @return AppTdsRuleVO1
     */
    public ViewObjectImpl getAppTdsRuleVO1() {
        return (ViewObjectImpl) findViewObject("AppTdsRuleVO1");
    }

    public String totalBill() {
        ViewObjectImpl vo = getTvouBillDtlVO1();
        Row[] filteredRows = vo.getFilteredRows("TvouCldId", getTvou1().getCurrentRow().getAttribute("TvouCldId"));
        if (filteredRows.length > 0) {
            return "Y";
        }
        return "N";
    }
    
    public String isMultiOrgValid(){
        System.out.println(": in isMultiOrgValid");
        TvouLinesVOImpl impl = getTvouLinesLnk();
        RowSetIterator rsi = impl.createRowSetIterator(null);
        int count=1;
        String exist="N";
        Map m=new HashMap();
       
        while(rsi.hasNext()){
            Row next = rsi.next();
            if(next.getAttribute("TvouOrgId")!=null){
                if(next.getAttribute("TvouOrgId").toString().equalsIgnoreCase(getTvou1().getCurrentRow().getAttribute("TvouOrgId").toString())){
                   // exist="Y";
                }else
                    m.put(next.getAttribute("TvouOrgId").toString(), next.getAttribute("TvouOrgId").toString());
                    //count++;    
                }
            System.out.println("count ="+m.size());
        }
        rsi.closeRowSetIterator();
//        if(exist.equalsIgnoreCase("N")){
//            // MSG.2315
//            return "There should be atleast one line of Login Organization";
//        }else 
        if(m.size()>1){
            System.out.println("before returning message");
            return "Invalid Voucher! You cannot make transaction between more than two Organization in one Voucher";
        }
        System.out.println("before returning Y");
        return "Y";
    }
    public String updateCostCenterAmntForBill(){
        TvouLinesVOImpl impl = getTvouLinesLnk();
        RowSetIterator rsi = impl.createRowSetIterator(null);
        while(rsi.hasNext()){
            Row next = rsi.next();
            if(next.getAttribute("TvouLnTyp").equals("DB")){
                if (next.getAttribute("TransIsCostCenterAlw") != null) {
                                      if (next.getAttribute("TransIsCostCenterAlw").toString().equalsIgnoreCase("Y")) {
                                          if (next.getAttribute("CcId") == null) {
                                              next.setAttribute("CcId",
                                                              getHexDocNoFromFun((String) next.getAttribute("TvouCldId"),
                                                                                 (Integer) next.getAttribute("TvouSlocId"),
                                                                                 (String) next.getAttribute("TvouOrgId"),
                                                                                 (Integer)next.getAttribute("UsrIdCreate"),
                                                                                 Integer.parseInt(next.getAttribute("TvouTypeId").toString())));
                                          }
                                        updateCostCenterAmt((Number) next.getAttribute("BillAmtTotSp"));

                                      } else {
                                         next.setAttribute("CcId", null);
                                      }

                                  }  
            }
        }
        rsi.closeRowSetIterator();
        return null;
    }
    public String getHexDocNoFromFun(String CldId, Integer SlocId, String OrgId, Integer UsrId, Integer typId) {

        String hexDocIdFromFun = "0";
        try {
            hexDocIdFromFun = this.callStoredFunction(Types.VARCHAR, "APP.GET_TXN_ID_CC(?,?,?,?,?,?,?)", new Object[] {
                                                      CldId, SlocId, OrgId, UsrId, 55, 84651, typId
            }).toString();

        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("ERROR IN CALLING FUNCTION GET_TXN_ID at BdgEoBudgetEoImpl :" + e.getMessage());
        }
        System.out.println("===========" + hexDocIdFromFun);

        return hexDocIdFromFun;
    }

    public String totalCrInString(Object amount) {
        System.out.println("amount" +amount);
        if (amount != null) {
          //  Number amountCoa = (Number) amount;
            Integer amt_digit = Integer.parseInt(resolvElAmt("#{pageFlowScope.GLBL_AMT_DIGIT}").toString());
            String amt = amount.toString();
            if (!amt.contains(".")) {
                amt = amt.concat(".");
                for (int i = 0; i < amt_digit; i++) {
                    amt = amt.concat("0");
                }
            } else {
                int i = amt.indexOf(".");
                int count = 0;
                for (int j = i + 1; j < amt.toString().length(); j++) {
                    count++;
                }
                for (int j = 0; j < (amt_digit - count); j++) {
                    amt = amt.concat("0");
              }
            }
            int l = amt.indexOf(".");
            StringBuffer sb = new StringBuffer(amt);

            if (l>3) {
                int rem = l % 3;
                if (rem == 0)
                    rem = 3;
                sb = sb.insert(rem, ",");
                int n = sb.indexOf(",");
                l++;
                for (int m = n + 3; m < l - 1; m = m + 3) {
                    sb = sb.insert(m + 1, ",");
                    m = m + 1;
                    l++;
                }

            }
            System.out.println("after iteration" +sb.toString());
            return sb.toString();
        }

        return null;
    }
    
    public Object resolvElAmt(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        Object digit = 2;
        if (valueExp != null) {
            digit = valueExp.getValue(elContext);
        }
        if (digit == null) {
            digit = 2;
        }
return digit;
    }
    /**
     * Helper function to call a database funtion.
     * @param sqlReturnType
     * @param stmt
     * @param bindVars
     * @return
     */
   
   public Object divideValue(Object value) {
        String coaAmt = "0";
        if(value == null) {
            System.out.println("Value null");
        }
        else
        {
            String balValue = value.toString();
            System.out.println("balValue" +balValue);
            Integer len = (balValue.toString().length());
            System.out.println("Length is " +len);
       String amtVal = balValue.substring(0 , len-3);
         String crDrVal = balValue.substring(len-3 , len);
                System.out.println("amt value is" +amtVal);
          String numAmt = totalCrInString(amtVal);
            coaAmt = numAmt.concat(crDrVal);
            System.out.println("coaAmt" + coaAmt);
         return coaAmt;
        }
        return coaAmt;
    }
    
    public void checkLineOrg() {
        AppCostCenterServiceAMImpl amCc = getAppAMForCC();
        ViewObjectImpl tempCcVo = this.getTempCostCenterVO1();
        Row tvouLinesLnkRow = this.getTvouLinesLnk().getCurrentRow();
        Row tvouRow = this.getTvou1().getCurrentRow();
        tempCcVo.setNamedWhereClauseParam("BindOrgId",tvouLinesLnkRow.getAttribute("TvouOrgId"));
        tempCcVo.setNamedWhereClauseParam("BindSlocId", tvouLinesLnkRow.getAttribute("TvouSlocId"));
        tempCcVo.setNamedWhereClauseParam("BindCldID", tvouLinesLnkRow.getAttribute("TvouCldId"));
        tempCcVo.setNamedWhereClauseParam("BindTempId", tvouLinesLnkRow.getAttribute("TvouTempId"));
        tempCcVo.setNamedWhereClauseParam("BindCcId", tvouLinesLnkRow.getAttribute("CcId"));
        tempCcVo.executeQuery();
        int count = tempCcVo.getRowCount();
        if((tvouRow.getAttribute("TvouOrgId")).equals(tvouLinesLnkRow.getAttribute("TvouOrgId"))) {
        }
        else {
            if(count>0) {
                
            }
          else if(count==0){
            String hoOrgId = (String) tvouLinesLnkRow.getAttribute("TvouHoOrgId");
            String orgId = (String) tvouLinesLnkRow.getAttribute("TvouOrgId");
            String tempId = (String) tvouLinesLnkRow.getAttribute("TvouTempId");
            String tempCcId = (String) tvouLinesLnkRow.getAttribute("CcId");
            Number amtSp = (Number) tvouLinesLnkRow.getAttribute("TvouAmtSp");
            amCc.generateCostCenterApp(EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                   hoOrgId, orgId, tempId, "L", 55,
                                   EbizParams.GLBL_APP_USR(), tempCcId, amtSp,
            resolvEl("#{pageFlowScope.P_CC_LEVEL1}")==null?null:resolvEl("#{pageFlowScope.P_CC_LEVEL1}").toString(),
            resolvEl("#{pageFlowScope.P_CC_LEVEL2}")==null?null: resolvEl("#{pageFlowScope.P_CC_LEVEL2}").toString(),
             resolvEl("#{pageFlowScope.P_CC_LEVEL3}")==null?null:resolvEl("#{pageFlowScope.P_CC_LEVEL3}").toString(),
            resolvEl("#{pageFlowScope.P_CC_LEVEL4}")==null?null:resolvEl("#{pageFlowScope.P_CC_LEVEL4}").toString(),
            resolvEl("#{pageFlowScope.P_CC_LEVEL5}")==null?null:resolvEl("#{pageFlowScope.P_CC_LEVEL5}").toString());
        }}
    }

    /**
     * Container's getter for TempCostCenterVO1.
     * @return TempCostCenterVO1
     */
    public ViewObjectImpl getTempCostCenterVO1() {
        return (ViewObjectImpl) findViewObject("TempCostCenterVO1");
    }
}
