package finauthoritypayapp.model.views;

import adf.utils.ebiz.EbizParams;

import finauthoritypayapp.model.service.FinAuthorityPayAMImpl;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Timestamp;

import java.sql.Types;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.Number;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue May 12 12:08:17 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class FinAuthPayRegDtlVORowImpl extends ViewRowImpl {


    public static final int ENTITY_FINAUTHPAYREGDTLEO = 0;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CldId,
        SlocId,
        HoOrgId,
        OrgId,
        DocId,
        EoId,
        NaId,
        CoaId,
        AmountOsAmt,
        AmtCurrSp,
        AmtSp,
        AmtCurrBs,
        AmtBs,
        PayDate,
        TransAuthEoNm,
        TransAuthCoaNm,
        PaySelFlg,
        TransOrgCurr,
        TransCurrSp,
        AmtTyp,
        FinAuthPayRegVouDtl;
        static AttributesEnum[] vals = null;
        ;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int EOID = AttributesEnum.EoId.index();
    public static final int NAID = AttributesEnum.NaId.index();
    public static final int COAID = AttributesEnum.CoaId.index();
    public static final int AMOUNTOSAMT = AttributesEnum.AmountOsAmt.index();
    public static final int AMTCURRSP = AttributesEnum.AmtCurrSp.index();
    public static final int AMTSP = AttributesEnum.AmtSp.index();
    public static final int AMTCURRBS = AttributesEnum.AmtCurrBs.index();
    public static final int AMTBS = AttributesEnum.AmtBs.index();
    public static final int PAYDATE = AttributesEnum.PayDate.index();
    public static final int TRANSAUTHEONM = AttributesEnum.TransAuthEoNm.index();
    public static final int TRANSAUTHCOANM = AttributesEnum.TransAuthCoaNm.index();
    public static final int PAYSELFLG = AttributesEnum.PaySelFlg.index();
    public static final int TRANSORGCURR = AttributesEnum.TransOrgCurr.index();
    public static final int TRANSCURRSP = AttributesEnum.TransCurrSp.index();
    public static final int AMTTYP = AttributesEnum.AmtTyp.index();
    public static final int FINAUTHPAYREGVOUDTL = AttributesEnum.FinAuthPayRegVouDtl.index();

    /**
     * This is the default constructor (do not remove).
     */
    public FinAuthPayRegDtlVORowImpl() {
    }

    /**
     * Gets FinAuthPayRegDtlEO entity object.
     * @return the FinAuthPayRegDtlEO
     */
    public EntityImpl getFinAuthPayRegDtlEO() {
        return (EntityImpl) getEntity(ENTITY_FINAUTHPAYREGDTLEO);
    }

    /**
     * Gets the attribute value for CLD_ID using the alias name CldId.
     * @return the CLD_ID
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as attribute value for CLD_ID using the alias name CldId.
     * @param value value to set the CLD_ID
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for SLOC_ID using the alias name SlocId.
     * @return the SLOC_ID
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for SLOC_ID using the alias name SlocId.
     * @param value value to set the SLOC_ID
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for HO_ORG_ID using the alias name HoOrgId.
     * @return the HO_ORG_ID
     */
    public String getHoOrgId() {
        return (String) getAttributeInternal(HOORGID);
    }

    /**
     * Sets <code>value</code> as attribute value for HO_ORG_ID using the alias name HoOrgId.
     * @param value value to set the HO_ORG_ID
     */
    public void setHoOrgId(String value) {
        setAttributeInternal(HOORGID, value);
    }

    /**
     * Gets the attribute value for ORG_ID using the alias name OrgId.
     * @return the ORG_ID
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as attribute value for ORG_ID using the alias name OrgId.
     * @param value value to set the ORG_ID
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for DOC_ID using the alias name DocId.
     * @return the DOC_ID
     */
    public String getDocId() {
        return (String) getAttributeInternal(DOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for DOC_ID using the alias name DocId.
     * @param value value to set the DOC_ID
     */
    public void setDocId(String value) {
        setAttributeInternal(DOCID, value);
    }

    /**
     * Gets the attribute value for EO_ID using the alias name EoId.
     * @return the EO_ID
     */
    public Integer getEoId() {
        return (Integer) getAttributeInternal(EOID);
    }

    /**
     * Sets <code>value</code> as attribute value for EO_ID using the alias name EoId.
     * @param value value to set the EO_ID
     */
    public void setEoId(Integer value) {
        setAttributeInternal(EOID, value);
    }

    /**
     * Gets the attribute value for NA_ID using the alias name NaId.
     * @return the NA_ID
     */
    public Integer getNaId() {
        return (Integer) getAttributeInternal(NAID);
    }

    /**
     * Sets <code>value</code> as attribute value for NA_ID using the alias name NaId.
     * @param value value to set the NA_ID
     */
    public void setNaId(Integer value) {
        setAttributeInternal(NAID, value);
    }

    /**
     * Gets the attribute value for COA_ID using the alias name CoaId.
     * @return the COA_ID
     */
    public Integer getCoaId() {
        return (Integer) getAttributeInternal(COAID);
    }

    /**
     * Sets <code>value</code> as attribute value for COA_ID using the alias name CoaId.
     * @param value value to set the COA_ID
     */
    public void setCoaId(Integer value) {
        setAttributeInternal(COAID, value);
    }

    /**
     * Gets the attribute value for AMOUNT_OS_AMT using the alias name AmountOsAmt.
     * @return the AMOUNT_OS_AMT
     */
    public Number getAmountOsAmt() {
        return (Number) getAttributeInternal(AMOUNTOSAMT);
    }

    /**
     * Sets <code>value</code> as attribute value for AMOUNT_OS_AMT using the alias name AmountOsAmt.
     * @param value value to set the AMOUNT_OS_AMT
     */
    public void setAmountOsAmt(Number value) {
        setAttributeInternal(AMOUNTOSAMT, value);
    }

    /**
     * Gets the attribute value for AMT_CURR_SP using the alias name AmtCurrSp.
     * @return the AMT_CURR_SP
     */
    public Integer getAmtCurrSp() {
        return (Integer) getAttributeInternal(AMTCURRSP);
    }

    /**
     * Sets <code>value</code> as attribute value for AMT_CURR_SP using the alias name AmtCurrSp.
     * @param value value to set the AMT_CURR_SP
     */
    public void setAmtCurrSp(Integer value) {
        setAttributeInternal(AMTCURRSP, value);
    }

    /**
     * Gets the attribute value for AMT_SP using the alias name AmtSp.
     * @return the AMT_SP
     */
    public Number getAmtSp() {
        return (Number) getAttributeInternal(AMTSP);
    }

    /**
     * Sets <code>value</code> as attribute value for AMT_SP using the alias name AmtSp.
     * @param value value to set the AMT_SP
     */
    public void setAmtSp(Number value) {
        setAttributeInternal(AMTSP, value);
    }

    /**
     * Gets the attribute value for AMT_CURR_BS using the alias name AmtCurrBs.
     * @return the AMT_CURR_BS
     */
    public Integer getAmtCurrBs() {
        return (Integer) getAttributeInternal(AMTCURRBS);
    }

    /**
     * Sets <code>value</code> as attribute value for AMT_CURR_BS using the alias name AmtCurrBs.
     * @param value value to set the AMT_CURR_BS
     */
    public void setAmtCurrBs(Integer value) {
        setAttributeInternal(AMTCURRBS, value);
    }

    /**
     * Gets the attribute value for AMT_BS using the alias name AmtBs.
     * @return the AMT_BS
     */
    public Number getAmtBs() {
        return (Number) getAttributeInternal(AMTBS);
    }

    /**
     * Sets <code>value</code> as attribute value for AMT_BS using the alias name AmtBs.
     * @param value value to set the AMT_BS
     */
    public void setAmtBs(Number value) {
        setAttributeInternal(AMTBS, value);
    }

    /**
     * Gets the attribute value for PAY_DATE using the alias name PayDate.
     * @return the PAY_DATE
     */
    public Timestamp getPayDate() {
        return (Timestamp) getAttributeInternal(PAYDATE);
    }

    /**
     * Sets <code>value</code> as attribute value for PAY_DATE using the alias name PayDate.
     * @param value value to set the PAY_DATE
     */
    public void setPayDate(Timestamp value) {
        setAttributeInternal(PAYDATE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransAuthEoNm.
     * @return the TransAuthEoNm
     */
    public String getTransAuthEoNm() {
        //System.out.println("EO Id in getter is ---" + getEoId());
        /* if (getEoId() != null) {
            FinAuthorityPayAMImpl am = (FinAuthorityPayAMImpl) getApplicationModule();
            am.getEoNmAndCoaNmVO1().setNamedWhereClauseParam("BindCldId", getCldId());
            am.getEoNmAndCoaNmVO1().setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
            am.getEoNmAndCoaNmVO1().setNamedWhereClauseParam("BindSlocId", getSlocId());
            am.getEoNmAndCoaNmVO1().executeQuery();

            Row[] filteredRows = am.getEoNmAndCoaNmVO1().getFilteredRows("EoId", getEoId());
            if (filteredRows.length > 0) {
                return filteredRows[0].getAttribute("EoNm").toString();
            }
        } */
        return (String) getAttributeInternal(TRANSAUTHEONM);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransAuthEoNm.
     * @param value value to set the  TransAuthEoNm
     */
    public void setTransAuthEoNm(String value) {
        setAttributeInternal(TRANSAUTHEONM, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransAuthCoaNm.
     * @return the TransAuthCoaNm
     */
    public String getTransAuthCoaNm() {
        //System.out.println("coa id in getter--->" + getCoaId());
        if (getCoaId() != null && getEoId() != null) {
            FinAuthorityPayAMImpl am = (FinAuthorityPayAMImpl) getApplicationModule();
            am.getEoNmAndCoaNmVO1().setNamedWhereClauseParam("BindCldId", getCldId());
            am.getEoNmAndCoaNmVO1().setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
            am.getEoNmAndCoaNmVO1().setNamedWhereClauseParam("BindSlocId", getSlocId());
            am.getEoNmAndCoaNmVO1().executeQuery();
            RowQualifier rq = new RowQualifier(am.getEoNmAndCoaNmVO1());
            rq.setWhereClause("CoaId =" + getCoaId());
            Row[] filteredRows = am.getEoNmAndCoaNmVO1().getFilteredRows(rq);
            if (filteredRows.length > 0) {
                return filteredRows[0].getAttribute("CoaNm").toString();
            }
        }
        return (String) getAttributeInternal(TRANSAUTHCOANM);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransAuthCoaNm.
     * @param value value to set the  TransAuthCoaNm
     */
    public void setTransAuthCoaNm(String value) {
        setAttributeInternal(TRANSAUTHCOANM, value);
    }

    /**
     * Gets the attribute value for PAY_SEL_FLG using the alias name PaySelFlg.
     * @return the PAY_SEL_FLG
     */
    public String getPaySelFlg() {
        return (String) getAttributeInternal(PAYSELFLG);
    }

    /**
     * Sets <code>value</code> as attribute value for PAY_SEL_FLG using the alias name PaySelFlg.
     * @param value value to set the PAY_SEL_FLG
     */
    public void setPaySelFlg(String value) {
        setAttributeInternal(PAYSELFLG, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransOrgCurr.
     * @return the TransOrgCurr
     */
    public String getTransOrgCurr() {

        /*  String org = EbizParams.GLBL_APP_USR_ORG();
        String cld = EbizParams.GLBL_APP_CLD_ID();
        Integer sloc = EbizParams.GLBL_APP_SERV_LOC();
        Object rslt = callStoredFunction(Types.NUMERIC, "APP.get_org_def_curr_bs1(?,?,?)", new Object[] {
                                         cld, sloc, org });
        if (rslt != null) {
            String rs = rslt.toString();
            Integer r = Integer.parseInt(rs);
            FinAuthorityPayAMImpl am = (FinAuthorityPayAMImpl) getApplicationModule();
            Row[] filteredRows = am.getCurrencyVO1().getFilteredRows("GlblCurrId", r);
            if (filteredRows.length > 0) {
                return filteredRows[0].getAttribute("GlblCurrDesc").toString();
            }
        } */
        return (String) getAttributeInternal(TRANSORGCURR);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransOrgCurr.
     * @param value value to set the  TransOrgCurr
     */
    public void setTransOrgCurr(String value) {
        setAttributeInternal(TRANSORGCURR, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransCurrSp.
     * @return the TransCurrSp
     */
    public String getTransCurrSp() {
        /* if (getAmtCurrSp() != null) {
            FinAuthorityPayAMImpl am = (FinAuthorityPayAMImpl) getApplicationModule();
            am.getSpecificCurrencyVO1().setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
            am.getSpecificCurrencyVO1().setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
            am.getSpecificCurrencyVO1().executeQuery();
            Row[] filteredRows = am.getSpecificCurrencyVO1().getFilteredRows("CurrId", getAmtCurrSp());
            if (filteredRows.length > 0) {
                return filteredRows[0].getAttribute("CurrDesc").toString();
            }

        } */
        return (String) getAttributeInternal(TRANSCURRSP);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransCurrSp.
     * @param value value to set the  TransCurrSp
     */
    public void setTransCurrSp(String value) {
        setAttributeInternal(TRANSCURRSP, value);
    }

    /**
     * Gets the attribute value for AMT_TYP using the alias name AmtTyp.
     * @return the AMT_TYP
     */
    public String getAmtTyp() {
        return (String) getAttributeInternal(AMTTYP);
    }

    /**
     * Sets <code>value</code> as attribute value for AMT_TYP using the alias name AmtTyp.
     * @param value value to set the AMT_TYP
     */
    public void setAmtTyp(String value) {
        setAttributeInternal(AMTTYP, value);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link FinAuthPayRegVouDtl.
     */
    public RowIterator getFinAuthPayRegVouDtl() {
        return (RowIterator) getAttributeInternal(FINAUTHPAYREGVOUDTL);
    }

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {

            // 1. Create a JDBC CallabledStatement
            st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            // 2. Register the first bind variable for the return value
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                // 3. Loop over values for the bind variables passed in, if any
                for (int z = 0; z < bindVars.length; z++) {
                    // 4. Set the value of user-supplied bind vars in the stmt
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            // 5. Set the value of user-supplied bind vars in the stmt
            st.executeUpdate();
            // 6. Return the value of the first bind variable
            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    // 7. Close the statement
                    st.close();
                } catch (SQLException e) {
                    System.out.println(e);
                }
            }
        }
    }

}

