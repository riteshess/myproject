package finauthoritypayapp.model.service;

import adf.utils.ebiz.EbizParams;
import adf.utils.model.ADFModelUtils;

import finauthoritypayapp.model.service.common.FinAuthorityPayAM;
import finauthoritypayapp.model.views.FinAuthPayRegVORowImpl;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.util.HashSet;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.RowSetIterator;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.apache.myfaces.trinidad.context.RequestContext;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat May 02 17:48:13 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class FinAuthorityPayAMImpl extends ApplicationModuleImpl  {
    /**
     * This is the default constructor (do not remove).
     */
    public FinAuthorityPayAMImpl() {
    }
    private String masterDocId = null;
    private String glJounVouId = null;
    private String glBpVouId = null;

    /**
     * Container's getter for AutorityDualVO.
     * @return AutorityDualVO
     */
    public ViewObjectImpl getAutorityDualVO() {
        return (ViewObjectImpl) findViewObject("AutorityDualVO");
    }

    /**
     * Container's getter for FinAuthPayRegDtlVO.
     * @return FinAuthPayRegDtlVO
     */
    public ViewObjectImpl getFinAuthPayRegDtlVO() {
        return (ViewObjectImpl) findViewObject("FinAuthPayRegDtlVO");
    }

    /**
     * Container's getter for FinAuthPayRegVO.
     * @return FinAuthPayRegVO
     */
    public ViewObjectImpl getFinAuthPayRegVO() {
        return (ViewObjectImpl) findViewObject("FinAuthPayRegVO");
    }

    /**
     * Container's getter for GlTaxVO.
     * @return GlTaxVO
     */
    public ViewObjectImpl getGlTaxVO() {
        return (ViewObjectImpl) findViewObject("GlTaxVO");
    }

    public void setBindVarOnPageLoad() {
        if (resolvEl("#{pageFlowScope.PARAM_DOC_TXN_ID}") != null) {
            String dOC_ID = resolvEl("#{pageFlowScope.PARAM_DOC_TXN_ID}").toString();
            if (dOC_ID != null) {
                this.getFinAuthPayRegVO().setNamedWhereClauseParam("BindGlbl_Doc_Id", null);
                this.getFinAuthPayRegVO().executeQuery();
                this.getFinAuthPayRegVO().setNamedWhereClauseParam("BindGlbl_Doc_Id", dOC_ID);
                this.getFinAuthPayRegVO().executeQuery();
                getFinAuthPayRegDtlVO1().executeQuery();
                getFinAuthPayRegVouDtlVO1().executeQuery();

                Row[] fr =
                    this.getFinAuthPayRegVO().getFilteredRows("DocId", resolvEl("#{pageFlowScope.GLBL_GET_DOC_ID}"));
                if (fr.length > 0) {
                    System.out.println("doc id we get");

                }
            }
        } else {
            /* this.getFinAuthPayRegVO().setNamedWhereClauseParam("BindGlbl_Doc_Id", null);
            this.getFinAuthPayRegVO().executeQuery(); */
        }
    }


    public void setDocId(String documentId) {
        ViewObjectImpl desVO = this.getSearchResultVO1();
        String docId = (String) desVO.getCurrentRow().getAttribute("DocId");
        if(docId!=null)
        RequestContext.getCurrentInstance().getPageFlowScope().put("PARAM_DOC_TXN_ID", docId);
        else
        RequestContext.getCurrentInstance().getPageFlowScope().put("PARAM_DOC_TXN_ID", documentId);
    }

    /**To generate displayId */
    public void genRateDispDocId() {
        String docId = getFinAuthPayRegVO().getCurrentRow().getAttribute("DocId").toString();
        Date dt = null;
        try {
            dt = new Date(System.currentTimeMillis());
        } catch (SQLException e) {
        }
        String dispId = (String) (callStoredFunction(Types.VARCHAR, "APP.ins_disp_doc_tab (?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                     EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(), 1,
                                                     EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(), docId,
                                                     13504, 0, EbizParams.GLBL_APP_USR(), dt
        }));
        System.out.println("displayId Generated is--->" + dispId);
    }

    public String setNameOnInstr(Integer eoId) {
        String nmOnInstr = null;
        getNameOnCheckVO1().setNamedWhereClauseParam("bindCldId", EbizParams.GLBL_APP_CLD_ID());
        getNameOnCheckVO1().setNamedWhereClauseParam("bindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        getNameOnCheckVO1().setNamedWhereClauseParam("bindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        getNameOnCheckVO1().executeQuery();
        System.out.println("row count in name on instrument--" + getNameOnCheckVO1().getRowCount());
        System.out.println("Eo Id --->" + eoId);

        Row[] filteredRows = getNameOnCheckVO1().getFilteredRows("EoId", eoId);
        System.out.println("name on instr filterd row length---->" + filteredRows.length);
        if (filteredRows.length > 0) {
            nmOnInstr = filteredRows[0].getAttribute("NameOnCheque").toString();
        }
        return nmOnInstr;
    }


    /**Function Call to insert in RegDTl and RegVouDtl*/
    public void insIntoRegTbls() {
        ViewObjectImpl payRegVO = getFinAuthPayRegVO();
        String docId = payRegVO.getCurrentRow().getAttribute("DocId").toString();
        Object stDt = payRegVO.getCurrentRow().getAttribute("StrtDt");
        Object endDt = payRegVO.getCurrentRow().getAttribute("EndDt");
        Object vouDt = payRegVO.getCurrentRow().getAttribute("PayVouDt");
        Object eoId = payRegVO.getCurrentRow().getAttribute("AuthEoId");
        Object fyId = payRegVO.getCurrentRow().getAttribute("FyId");
        Object authCoa = payRegVO.getCurrentRow().getAttribute("AuthCoaId");
        Object bnkCoa = payRegVO.getCurrentRow().getAttribute("BankCoaId");
        Object rslt = (callStoredFunction(Types.VARCHAR, "FIN.fn_fin_ins_reg_tbls (?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {

            EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_HO_ORG_ID(),
            EbizParams.GLBL_APP_USR_ORG(), docId, fyId, stDt, endDt, eoId, authCoa, bnkCoa, vouDt, EbizParams.GLBL_APP_USR(),
        }));
        System.out.println("result at inserting all tables --->" + rslt);
        /* payRegVO.setNamedWhereClauseParam("BindGlbl_Doc_Id", null);
        payRegVO.executeQuery(); */
        getFinAuthPayRegDtlVO1().executeQuery();
        getFinAuthPayRegVouDtlVO1().executeQuery();

        System.out.println("row count in master---->" + payRegVO.getRowCount());

    }


    public Number updateAmountInRegTbl() {
        int i = 0;
        RowSetIterator itr = getFinAuthPayRegDtlVO1().createRowSetIterator(null);
        Number amountSum = new Number(0);
        while (itr.hasNext()) {
            Row next = itr.next();
            if (next.getAttribute("PaySelFlg") != null &&
                next.getAttribute("PaySelFlg").toString().equalsIgnoreCase("Y")) {
                if (next.getAttribute("AmtTyp") != null) {
                    if (next.getAttribute("AmtTyp").toString().equalsIgnoreCase("Cr")) {
                        amountSum = amountSum.add((Number) next.getAttribute("AmtBs"));
                    }
                    if (next.getAttribute("AmtTyp").toString().equalsIgnoreCase("Dr")) {
                        amountSum = amountSum.subtract((Number) next.getAttribute("AmtBs"));
                    }
                }
            } else
                i++;
        }
        getFinAuthPayRegVO().getCurrentRow().setAttribute("InstruAmount", amountSum);
        return amountSum;
    }


    public void resetValue() {
        ViewObjectImpl regVo = this.getFinAuthPayRegVO();
        regVo.getCurrentRow().setAttribute("PayFreq", null);
        regVo.getCurrentRow().setAttribute("PayPrd", null);
        regVo.getCurrentRow().setAttribute("EeTypeId", null);
        regVo.getCurrentRow().setAttribute("AuthEoId", null);
    }


    public Object resolvEl(String data) {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        ELContext elContext = facesContext.getELContext();
        ExpressionFactory expressionFactory = facesContext.getApplication().getExpressionFactory();
        ValueExpression exp = expressionFactory.createValueExpression(elContext, data, Object.class);
        return exp.getValue(elContext);
    }

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {

            // 1. Create a JDBC CallabledStatement
            st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            // 2. Register the first bind variable for the return value
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                // 3. Loop over values for the bind variables passed in, if any
                for (int z = 0; z < bindVars.length; z++) {
                    // 4. Set the value of user-supplied bind vars in the stmt
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            // 5. Set the value of user-supplied bind vars in the stmt
            st.executeUpdate();
            // 6. Return the value of the first bind variable
            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    // 7. Close the statement
                    st.close();
                } catch (SQLException e) {
                    System.out.println(e);
                }
            }
        }
    }

    public String getUsrName(Integer usrId) {
        Integer sloc = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        this.getAppSecUsrVO1().setNamedWhereClauseParam("BindSlocId", sloc);
        getAppSecUsrVO1().executeQuery();
        Row[] r = this.getAppSecUsrVO1().getFilteredRows("UsrId", usrId);
        if (r.length > 0)
            return (String) r[0].getAttribute("UsrName");
        else
            return null;
    }
    //------------------------WF Methods--------------------------
    private static int INTEGER = Types.NUMERIC;
    private static int DATE = Types.DATE;
    private static int STRING = Types.VARCHAR;
    private static int NUMBER = Types.NUMERIC;

    public String getWfNo(Integer sloc_id, String cld_id, String org_id, Integer doc_no) {

        System.out.println("Sloc=" + sloc_id + " and cld_id=" + cld_id + "and org_id=" + org_id + " and doc_no=" +
                           doc_no);
        Object obj = ADFModelUtils.callFunction(this, new StringBuilder("APP.WF_GET_ID(?,?,?,?,?)"), new Object[] {
                                                sloc_id, cld_id, org_id, doc_no, 0
        }, Types.VARCHAR);

        /* Object obj = callStoredFunction(Types.VARCHAR, "APP.WF_GET_ID(?,?,?,?,?)", new Object[] {
                                        sloc_id, cld_id, org_id, doc_no, 0
        }); */
        /*  if()
        System.out.println("WFNO in AMimpl:" + obj.toString()); */
        return obj.toString();
    }

    public Integer pendingCheck(Integer SlocId, String CldId, String OrgId, Integer DocNo) {
        Row curr = this.getFinAuthPayRegVO().getCurrentRow();
        String docIdTxn = curr.getAttribute("DocId").toString();
        System.out.println("DOCIDTXN in pending check method--" + docIdTxn);
        Object obj = ADFModelUtils.callFunction(this, new StringBuilder("APP.WF_GET_CUR_USR(?,?,?,?,?,?)"), new Object[] {
                                                SlocId, CldId, OrgId, DocNo, docIdTxn, 0
        }, NUMBER);

        /*  Object obj = callStoredFunction(NUMBER, "APP.WF_GET_CUR_USR(?,?,?,?,?,?)", new Object[] {
                                        SlocId, CldId, OrgId, DocNo, docIdTxn, 0
        }); */
        Integer usrId = null;
        if (obj != null) {
            usrId = Integer.parseInt(obj.toString());
        }
        System.out.println("User id pending in impl--" + usrId);
        return usrId;
    }

    public Integer getUsrLvl(Integer SlocId, String CldId, String OrgId, Integer usr_id, String WfNum, String DocNo) {

        return Integer.parseInt(ADFModelUtils.callFunction(this,
                                                           new StringBuilder("APP.WF_GET_USR_LEVEL(?,?,?,?,?,?,?)"), new Object[] {
                                                           SlocId, CldId, OrgId, usr_id, WfNum, DocNo, 0
    }, NUMBER).toString());

        /*      return Integer.parseInt(callStoredFunction(NUMBER, "APP.WF_GET_USR_LEVEL(?,?,?,?,?,?,?)", new Object[] {
                                                   SlocId, CldId, OrgId, usr_id, WfNum, DocNo, 0
    }).toString()); */


    }


    public Integer insIntoTxn(Integer sloc_id, String cld_id, String pOrgId, Integer DOC_NO, String WfNum,
                              Integer usr_idFrm, Integer usr_idTo, Integer levelTo, Integer levelFrm, String action,
                              String remark, Number amount, String post) {
        Row curr = this.getFinAuthPayRegVO().getCurrentRow();
        String docIdTxn = curr.getAttribute("DocId").toString();
        //String docIdTxn = resolvEl("#{pageFlowScope.PARAM_DOC_TXN_ID}").toString();
        return Integer.parseInt(ADFModelUtils.callFunction(this,
                                                           new StringBuilder("APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"), new Object[] {
                                                           sloc_id, cld_id, pOrgId, DOC_NO, 0, WfNum, docIdTxn,
                                                           usr_idFrm, usr_idTo, levelFrm, levelTo, action, remark,
                                                           amount, post
    }, NUMBER).toString());

        /*
        return Integer.parseInt(callStoredFunction(NUMBER, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                   sloc_id, cld_id, pOrgId, DOC_NO, 0, WfNum, docIdTxn, usr_idFrm,
                                                   usr_idTo, levelFrm, levelTo, action, remark, amount, post
    }).toString());*/

    }


    public void wfAction(String ret) {
        Boolean success = true;
        System.out.println("return from Wf = " + ret);
        if (ret != null) {
            String docIdTxn = resolvEl("#{pageFlowScope.PARAM_DOC_TXN_ID}").toString();
            Row[] filteredRows = this.getFinAuthPayRegVO().getFilteredRows("DocId", docIdTxn);
            System.out.println("current row in authpAyReg---" + filteredRows[0]);
            getFinAuthPayRegVO().setCurrentRow(filteredRows[0]);
            Row curr = getFinAuthPayRegVO().getCurrentRow();
            if (ret.equals("F")) {
                curr.setAttribute("VouStatus", "P");
            } else if (ret.equals("R")) {
                curr.setAttribute("VouStatus", "P");
            }
            if (ret.equals("V")) {
                curr.setAttribute("VouStatus", "P");
            } else if (ret.equals("A")) {
                curr.setAttribute("VouStatus", "A");
                System.out.println("Approved--");
                String cld = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
                Integer sloc = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
                String org = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
                String hoOrg = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
                String txndoc = curr.getAttribute("DocId").toString();
                Object fyId = curr.getAttribute("FyId");
                Object payDate = curr.getAttribute("PayVouDt");
                Object instruAmt = curr.getAttribute("InstruAmount");
                Object eoId = curr.getAttribute("AuthEoId");
                Object coaId = curr.getAttribute("AuthCoaId");
                Object currIdSp = curr.getAttribute("BankSpCurr");
                System.out.println("INSTRUMENT AMOUNT ISS==="+instruAmt);
                Object rslt = (callStoredFunction(Types.VARCHAR, "FIN.fn_fin_upd_reg_tbls (?,?,?,?,?)", new Object[] {

                    cld, sloc, hoOrg, org, txndoc
                }));
                String dispId = null;
                System.out.println("result for update function--->" + rslt);
                getDisplayIdVO1().setNamedWhereClauseParam("BindCldId", cld);
                getDisplayIdVO1().setNamedWhereClauseParam("BindSlocId", sloc);
                getDisplayIdVO1().setNamedWhereClauseParam("BindOrgId", org);
                getDisplayIdVO1().setNamedWhereClauseParam("BindFyId", fyId);
                getDisplayIdVO1().executeQuery();
                Row[] row = getDisplayIdVO1().getFilteredRows("DocTxnId", txndoc);
                if (row.length > 0) {
                    dispId = row[0].getAttribute("DocTxnIdDisp").toString();
                }

                try {
                    Object result =
                        (callStoredFunction1(Types.NUMERIC, "FIN.fn_fin_ins_gl_reg_dtl (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {

                        cld, sloc, hoOrg, org, txndoc, payDate, instruAmt, dispId, eoId, coaId, currIdSp, 1,
                        EbizParams.GLBL_APP_USR()
                    }));
                    StringBuilder message = new StringBuilder("<html><body>");
                    message.append("<p><b>Record Approved Successfully </b></p>");
                    message.append("<p><b style='color:black'>Vouchers posted in General ledger are : </b></p>");
                    message.append("<P><b style='color:blue'>Journal Voucher = " + getJVforGL(glJounVouId) +
                                   "</b></P>");
                    message.append("<b style='color:maroon'>Bank Payment Voucher = " + getBPforGL(glBpVouId) + "</b>");
                    message.append("</body></html>");
                    ADFModelUtils.showFacesMessage(message.toString(), message.toString(), FacesMessage.SEVERITY_INFO,
                                                   null);
                    success = true;
                } catch (Exception e) {
                    ADFModelUtils.showFacesMessage("There have been an error in calling function fn_fin_ins_gl_reg_dtl",
                                                   e.getMessage(), FacesMessage.SEVERITY_FATAL, null);
                    success = false;

                }
                System.out.println("after functiomn fn_fin_ins_gl_reg_dtl");
                getFinAuthPayRegVO().executeQuery();
                getFinAuthPayRegDtlVO().executeQuery();

            }
            if (success) {
                this.getDBTransaction().commit();
            } else {
                this.getDBTransaction().rollback();
            }


        }
    }


    /** To Check Duplicate Instrument No.*/

    public String chkDuplicateInstrumentNo(Number instrNo, String modeVal) {
        Object bnkCoa = getFinAuthPayRegVO().getCurrentRow().getAttribute("BankCoaId");

        Object docId = getFinAuthPayRegVO().getCurrentRow().getAttribute("DocId");

        String rslt = (String) (callStoredFunction(Types.VARCHAR, "FIN.fn_chk_instru_no_unique (?,?,?,?,?,?,?,?,?)", new Object[] {
                                                   EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                                   EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(), bnkCoa,
                                                   instrNo, 111, docId, modeVal
        }));
        System.out.println("result for duplicate instr no.--->>" + rslt);
        return rslt;
    }

    /** To Search Payment Details*/
    public void searchPayDetail() {


        Row currentRow = getSearchDualVO1().getCurrentRow();
        getSearchResultVO1().setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        getSearchResultVO1().setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        getSearchResultVO1().setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        getSearchResultVO1().setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());

        if (currentRow.getAttribute("TransEoId") != null) {
            System.out.println("eo Id at search--" + currentRow.getAttribute("TransEoId"));
            getSearchResultVO1().setNamedWhereClauseParam("BindAuthEoId", currentRow.getAttribute("TransEoId"));
        } else {
            getSearchResultVO1().setNamedWhereClauseParam("BindAuthEoId", null);
        }

        if (currentRow.getAttribute("TransAuthCoaId") != null) {
            System.out.println("Coa id at search---" + currentRow.getAttribute("TransAuthCoaId"));
            getSearchResultVO1().setNamedWhereClauseParam("BindAuthCoaId", currentRow.getAttribute("TransAuthCoaId"));
        } else {
            getSearchResultVO1().setNamedWhereClauseParam("BindAuthCoaId", null);
        }

        if (currentRow.getAttribute("TransCertNo") != null) {
            System.out.println("cerificate no .at search--->" + currentRow.getAttribute("TransCertNo"));
            getSearchResultVO1().setNamedWhereClauseParam("BindCertiNo", currentRow.getAttribute("TransCertNo"));
        } else {
            getSearchResultVO1().setNamedWhereClauseParam("BindCertiNo", null);
        }
        if (currentRow.getAttribute("TransInstrFrmDt") != null) {
            System.out.println("start date at search---->" + currentRow.getAttribute("TransInstrFrmDt"));
            getSearchResultVO1().setNamedWhereClauseParam("BindInstrFrmDt", currentRow.getAttribute("TransInstrFrmDt"));
        } else {
            getSearchResultVO1().setNamedWhereClauseParam("BindInstrFrmDt", null);
        }

        if (currentRow.getAttribute("TransInstrToDt") != null) {

            getSearchResultVO1().setNamedWhereClauseParam("BindInstrToDt", currentRow.getAttribute("TransInstrToDt"));
        } else {
            getSearchResultVO1().setNamedWhereClauseParam("BindInstrToDt", null);
        }

        getSearchResultVO1().executeQuery();

    }

    /**To Select All CheckBoxs*/
    public void selectAll() {
        RowSetIterator dtlItr = getFinAuthPayRegDtlVO().createRowSetIterator(null);
        if (dtlItr != null) {
            dtlItr.reset();
            while (dtlItr.hasNext()) {
                Row next = dtlItr.next();
                next.setAttribute("PaySelFlg", "Y");
                System.out.println("value at selct all-->" + next.getAttribute("PaySelFlg"));
            }
            dtlItr.closeRowSetIterator();
        }
    }

    /**To Deselect All CheckBoxes*/
    public void deSelectAll() {
        RowSetIterator dtlItr = getFinAuthPayRegDtlVO().createRowSetIterator(null);
        if (dtlItr != null) {
            dtlItr.reset();
            while (dtlItr.hasNext()) {
                Row next = dtlItr.next();
                next.setAttribute("PaySelFlg", "N");
                System.out.println("value at deselct all-->" + next.getAttribute("PaySelFlg"));
            }
            dtlItr.closeRowSetIterator();
        }
    }

    /**To Reset Search Panel & Result*/
    public void resetSearch() {
        getSearchDualVO1().executeQuery();
        getSearchResultVO1().setNamedWhereClauseParam("BindAuthEoId", null);
        getSearchResultVO1().setNamedWhereClauseParam("BindAuthCoaId", null);
        getSearchResultVO1().setNamedWhereClauseParam("BindCertiNo", null);
        getSearchResultVO1().setNamedWhereClauseParam("BindInstrFrmDt", null);
        getSearchResultVO1().setNamedWhereClauseParam("BindInstrToDt", null);

        getSearchResultVO1().setNamedWhereClauseParam("BindHoOrgId", null);
        getSearchResultVO1().setNamedWhereClauseParam("BindSlocId", null);
        getSearchResultVO1().setNamedWhereClauseParam("BindCldId", null);
        getSearchResultVO1().setNamedWhereClauseParam("BindOrgId", "^");
        getSearchResultVO1().executeQuery();

    }

    /**To Refresh search Result after cancel*/

    public void refreshSearchResult() {
        getSearchResultVO1().setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        getSearchResultVO1().setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        getSearchResultVO1().setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        getSearchResultVO1().setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        getSearchResultVO1().executeQuery();
    }

    /**
     * Container's getter for AppSecUsrVO1.
     * @return AppSecUsrVO1
     */
    public ViewObjectImpl getAppSecUsrVO1() {
        return (ViewObjectImpl) findViewObject("AppSecUsrVO1");
    }

    /**
     * Container's getter for NameOnCheckVO1.
     * @return NameOnCheckVO1
     */
    public ViewObjectImpl getNameOnCheckVO1() {
        return (ViewObjectImpl) findViewObject("NameOnCheckVO1");
    }

    /**
     * Container's getter for SearchResultVO1.
     * @return SearchResultVO1
     */
    public ViewObjectImpl getSearchResultVO1() {
        return (ViewObjectImpl) findViewObject("SearchResultVO1");
    }

    /**
     * Container's getter for LovAuthorityVO1.
     * @return LovAuthorityVO1
     */
    public ViewObjectImpl getLovAuthorityVO1() {
        return (ViewObjectImpl) findViewObject("LovAuthorityVO1");
    }

    /**
     * Container's getter for SearchDualVO1.
     * @return SearchDualVO1
     */
    public ViewObjectImpl getSearchDualVO1() {
        return (ViewObjectImpl) findViewObject("SearchDualVO1");
    }

    /**
     * Container's getter for CurrencyVO1.
     * @return CurrencyVO1
     */
    public ViewObjectImpl getCurrencyVO1() {
        return (ViewObjectImpl) findViewObject("CurrencyVO1");
    }

    /**
     * Container's getter for EoNmAndCoaNmVO1.
     * @return EoNmAndCoaNmVO1
     */
    public ViewObjectImpl getEoNmAndCoaNmVO1() {
        return (ViewObjectImpl) findViewObject("EoNmAndCoaNmVO1");
    }

    /**
     * Container's getter for SpecificCurrencyVO1.
     * @return SpecificCurrencyVO1
     */
    public ViewObjectImpl getSpecificCurrencyVO1() {
        return (ViewObjectImpl) findViewObject("SpecificCurrencyVO1");
    }

    /**
     * Container's getter for FinAuthPayRegDtlVO1.
     * @return FinAuthPayRegDtlVO1
     */
    public ViewObjectImpl getFinAuthPayRegDtlVO1() {
        return (ViewObjectImpl) findViewObject("FinAuthPayRegDtlVO1");
    }

    /**
     * Container's getter for PayRegToRegDtlVL1.
     * @return PayRegToRegDtlVL1
     */
    public ViewLinkImpl getPayRegToRegDtlVL1() {
        return (ViewLinkImpl) findViewLink("PayRegToRegDtlVL1");
    }

    /**
     * Container's getter for FinAuthPayRegVouDtlVO1.
     * @return FinAuthPayRegVouDtlVO1
     */
    public ViewObjectImpl getFinAuthPayRegVouDtlVO1() {
        return (ViewObjectImpl) findViewObject("FinAuthPayRegVouDtlVO1");
    }

    /**
     * Container's getter for RegDtlToRegVouDtlVL1.
     * @return RegDtlToRegVouDtlVL1
     */
    public ViewLinkImpl getRegDtlToRegVouDtlVL1() {
        return (ViewLinkImpl) findViewLink("RegDtlToRegVouDtlVL1");
    }

    /**
     * Container's getter for DisplayIdVO1.
     * @return DisplayIdVO1
     */
    public ViewObjectImpl getDisplayIdVO1() {
        return (ViewObjectImpl) findViewObject("DisplayIdVO1");
    }

    /**
     * Container's getter for LovTaxPayId1.
     * @return LovTaxPayId1
     */
    public ViewObjectImpl getLovTaxPayIdVO() {
        return (ViewObjectImpl) findViewObject("LovTaxPayIdVO");
    }

    public void executeTaxIdQuery() {
        FinAuthPayRegVORowImpl row = (FinAuthPayRegVORowImpl) getFinAuthPayRegVO().getCurrentRow();
        RowSet idVO = row.getLovTaxPayIdVO();
        idVO.executeQuery();
    }

    protected Object callStoredFunction1(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {

            // 1. Create a JDBC CallabledStatement
            st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            // 2. Register the first bind variable for the return value
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                // 3. Loop over values for the bind variables passed in, if any
                /*  for (int z = 0; z < bindVars.length; z++) {
                    System.out.println("value in function is==" + bindVars[z]);
                    // 4. Set the value of user-supplied bind vars in the stmt
                    st.setObject(z + 2, bindVars[z]);
                } */
                st.setObject(2, bindVars[0]);
                st.setObject(3, bindVars[1]);
                st.setObject(4, bindVars[2]);
                st.setObject(5, bindVars[3]);
                st.setObject(6, bindVars[4]);
                st.setObject(7, bindVars[5]);
                st.setObject(8, bindVars[6]);
                st.setObject(9, bindVars[7]);
                st.setObject(10, bindVars[8]);
                st.setObject(11, bindVars[9]);
                st.setObject(12, bindVars[10]);
                st.setObject(13, bindVars[11]);
                st.setObject(14, bindVars[12]);
                st.registerOutParameter(15, Types.VARCHAR);
                st.registerOutParameter(16, Types.VARCHAR);
            }
            // 5. Set the value of user-supplied bind vars in the stmt
            st.executeUpdate();
            glBpVouId = st.getObject(15).toString();
            glJounVouId = st.getObject(16).toString();
            // 6. Return the value of the first bind variable
            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    // 7. Close the statement
                    st.close();
                } catch (SQLException e) {
                    System.out.println(e);
                }
            }
        }
    }

    public String getJVforGL(String docTxnId) {
        ViewObjectImpl taxPayVO = this.getVoucherIdForGlVO();
        taxPayVO.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        taxPayVO.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        taxPayVO.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        taxPayVO.setNamedWhereClauseParam("BindDocTxnId", docTxnId);
        taxPayVO.executeQuery();
        Row[] row = taxPayVO.getFilteredRows("DocTxnId", docTxnId);
        if (row.length > 0)
            return row[0].getAttribute("TaxDutyPayId").toString();
        else
            return null;
    }

    public String getBPforGL(String docTxnId) {
        ViewObjectImpl taxPayVO = this.getVoucherIdForGlVO();
        taxPayVO.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        taxPayVO.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        taxPayVO.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        taxPayVO.setNamedWhereClauseParam("BindDocTxnId", docTxnId);
        taxPayVO.executeQuery();
        Row[] row = taxPayVO.getFilteredRows("DocTxnId", docTxnId);
        if (row.length > 0)
            return row[0].getAttribute("TaxDutyPayId").toString();
        else
            return null;
    }

    /**
     * Container's getter for VoucherIdForGl1.
     * @return VoucherIdForGl1
     */
    public ViewObjectImpl getVoucherIdForGlVO() {
        return (ViewObjectImpl) findViewObject("VoucherIdForGlVO");
    }

    public void setBindVar() {
        getSearchResultVO1().setNamedWhereClauseParam("BindCldId", -1);
        getSearchResultVO1().setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        getSearchResultVO1().setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        getSearchResultVO1().setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        getSearchResultVO1().executeQuery();
    }

    /**
     * Container's getter for FinAuthPayRegOthDtl1.
     * @return FinAuthPayRegOthDtl1
     */
    public ViewObjectImpl getFinAuthPayRegOthDtlVO() {
        return (ViewObjectImpl) findViewObject("FinAuthPayRegOthDtlVO");
    }

    /**
     * Container's getter for PayRegToPayRegOthVL1.
     * @return PayRegToPayRegOthVL1
     */
    public ViewLinkImpl getPayRegToPayRegOthVL1() {
        return (ViewLinkImpl) findViewLink("PayRegToPayRegOthVL1");
    }

    /**
     * Container's getter for LovOtherCharges1.
     * @return LovOtherCharges1
     */
    public ViewObjectImpl getLovOtherChargesVO() {
        return (ViewObjectImpl) findViewObject("LovOtherChargesVO");
    }

    /**
     * Container's getter for LovCurrVO1.
     * @return LovCurrVO1
     */
    public ViewObjectImpl getLovCurrVO() {
        return (ViewObjectImpl) findViewObject("LovCurrVO");
    }

    public void setCurrId() {
        Number insAmount = new Number(0);
        Number totalOthCharges = new Number(0);
        ViewObjectImpl currVO = this.getLovCurrVO();
        ViewObjectImpl authPayRegVO = this.getFinAuthPayRegVO();
        ViewObjectImpl authPayRegOthDtlVO = this.getFinAuthPayRegOthDtlVO();
        Row authCurrRow = authPayRegVO.getCurrentRow();
        RowSetIterator itr = authPayRegOthDtlVO.createRowSetIterator(null);
        currVO.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        currVO.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        currVO.setNamedWhereClauseParam("BindSlocid", EbizParams.GLBL_APP_SERV_LOC());
        currVO.executeQuery();
        Row[] allRowsInRange = currVO.getAllRowsInRange();
        insAmount = calculateInvoiceAmt();

        while (itr.hasNext()) {
            Row row = itr.next();
            if (allRowsInRange.length > 0) {
                if (allRowsInRange[0].getAttribute("CurrId").toString() != null) {
                    row.setAttribute("OcAmtCurrBs",
                                     Integer.parseInt(allRowsInRange[0].getAttribute("CurrId").toString()));
                    row.setAttribute("OcAmtCurrSp",
                                     Integer.parseInt(allRowsInRange[0].getAttribute("CurrId").toString()));
                }
            }

            if (row.getAttribute("OcAmtSp") != null)
                row.setAttribute("OcAmtBs", row.getAttribute("OcAmtSp"));

            if (authCurrRow.getAttribute("PayVouDt") != null)
                row.setAttribute("PayDate", authCurrRow.getAttribute("PayVouDt"));

            if (row.getAttribute("OcAmtSp") != null) {
                if (row.getAttribute("OcAmtTyp").toString().equalsIgnoreCase("Dr"))
                    totalOthCharges = totalOthCharges.add((Number) row.getAttribute("OcAmtSp"));
                else
                    totalOthCharges = totalOthCharges.subtract((Number) row.getAttribute("OcAmtSp"));
            }
        }
          insAmount = insAmount.add(totalOthCharges);
        authCurrRow.setAttribute("InstruAmount", insAmount);
    }

    public String checkForDuplicateCoa(String coaNm) {
        HashSet<Object> coaNmSet = new HashSet<Object>();
        ViewObjectImpl authPayRegOthDtlVO = this.getFinAuthPayRegOthDtlVO();
        Row currentRow = authPayRegOthDtlVO.getCurrentRow();
        RowSetIterator itr = authPayRegOthDtlVO.createRowSetIterator(null);
        while (itr.hasNext()) {
            Row next = itr.next();
            if (next != currentRow) {
                if (next.getAttribute("transOtherCoaNm") != null)
                    coaNmSet.add(next.getAttribute("transOtherCoaNm"));
            }
        }
        if (coaNmSet.contains(coaNm))
            return "Y";
        else
            return "N";
    }
    public Number calculateInvoiceAmt() {
         RowSetIterator itr = getFinAuthPayRegDtlVO1().createRowSetIterator(null);
        Number amountSum = new Number(0);
        while (itr.hasNext()) {
            Row next = itr.next();
            if (next.getAttribute("PaySelFlg") != null &&
                next.getAttribute("PaySelFlg").toString().equalsIgnoreCase("Y")) {
                if (next.getAttribute("AmtTyp") != null) {
                    if (next.getAttribute("AmtTyp").toString().equalsIgnoreCase("Cr")) {
                        amountSum = amountSum.add((Number) next.getAttribute("AmtBs"));
                    }
                    if (next.getAttribute("AmtTyp").toString().equalsIgnoreCase("Dr")) {
                        amountSum = amountSum.subtract((Number) next.getAttribute("AmtBs"));
                    }
                }
            } 
        }
        return amountSum;
    }
   }
