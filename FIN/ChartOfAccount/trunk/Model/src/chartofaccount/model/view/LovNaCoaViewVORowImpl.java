package chartofaccount.model.view;

import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu May 01 16:19:06 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class LovNaCoaViewVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        AccCldId {
            public Object get(LovNaCoaViewVORowImpl obj) {
                return obj.getAccCldId();
            }

            public void put(LovNaCoaViewVORowImpl obj, Object value) {
                obj.setAccCldId((String)value);
            }
        }
        ,
        AccSlocId {
            public Object get(LovNaCoaViewVORowImpl obj) {
                return obj.getAccSlocId();
            }

            public void put(LovNaCoaViewVORowImpl obj, Object value) {
                obj.setAccSlocId((Integer)value);
            }
        }
        ,
        HoOrgId {
            public Object get(LovNaCoaViewVORowImpl obj) {
                return obj.getHoOrgId();
            }

            public void put(LovNaCoaViewVORowImpl obj, Object value) {
                obj.setHoOrgId((String)value);
            }
        }
        ,
        AccId {
            public Object get(LovNaCoaViewVORowImpl obj) {
                return obj.getAccId();
            }

            public void put(LovNaCoaViewVORowImpl obj, Object value) {
                obj.setAccId((Integer)value);
            }
        }
        ,
        AccNm {
            public Object get(LovNaCoaViewVORowImpl obj) {
                return obj.getAccNm();
            }

            public void put(LovNaCoaViewVORowImpl obj, Object value) {
                obj.setAccNm((String)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(LovNaCoaViewVORowImpl object);

        public abstract void put(LovNaCoaViewVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }

    public static final int ACCCLDID = AttributesEnum.AccCldId.index();
    public static final int ACCSLOCID = AttributesEnum.AccSlocId.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int ACCID = AttributesEnum.AccId.index();
    public static final int ACCNM = AttributesEnum.AccNm.index();

    /**
     * This is the default constructor (do not remove).
     */
    public LovNaCoaViewVORowImpl() {

    }

    /**
     * Gets the attribute value for the calculated attribute AccCldId.
     * @return the AccCldId
     */
    public String getAccCldId() {
        return (String) getAttributeInternal(ACCCLDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute AccCldId.
     * @param value value to set the  AccCldId
     */
    public void setAccCldId(String value) {
        setAttributeInternal(ACCCLDID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute AccSlocId.
     * @return the AccSlocId
     */
    public Integer getAccSlocId() {
        return (Integer) getAttributeInternal(ACCSLOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute AccSlocId.
     * @param value value to set the  AccSlocId
     */
    public void setAccSlocId(Integer value) {
        setAttributeInternal(ACCSLOCID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute HoOrgId.
     * @return the HoOrgId
     */
    public String getHoOrgId() {
        return (String) getAttributeInternal(HOORGID);
    }



    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute HoOrgId.
     * @param value value to set the  HoOrgId
     */
    public void setHoOrgId(String value) {
        setAttributeInternal(HOORGID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute AccId.
     * @return the AccId
     */
    public Integer getAccId() {
        return (Integer) getAttributeInternal(ACCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute AccId.
     * @param value value to set the  AccId
     */
    public void setAccId(Integer value) {
        setAttributeInternal(ACCID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute AccNm.
     * @return the AccNm
     */
    public String getAccNm() {
        return (String) getAttributeInternal(ACCNM);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute AccNm.
     * @param value value to set the  AccNm
     */
    public void setAccNm(String value) {
        setAttributeInternal(ACCNM, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
