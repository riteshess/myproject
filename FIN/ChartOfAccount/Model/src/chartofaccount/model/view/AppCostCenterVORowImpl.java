package chartofaccount.model.view;

import chartofaccount.model.service.ChartOfAccountAMImpl;

import oracle.jbo.ApplicationModule;
import oracle.jbo.Row;
import oracle.jbo.domain.DBSequence;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Aug 06 18:43:36 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AppCostCenterVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CldId {
            public Object get(AppCostCenterVORowImpl obj) {
                return obj.getCldId();
            }

            public void put(AppCostCenterVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        OrgId {
            public Object get(AppCostCenterVORowImpl obj) {
                return obj.getOrgId();
            }

            public void put(AppCostCenterVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        HoOrgId {
            public Object get(AppCostCenterVORowImpl obj) {
                return obj.getHoOrgId();
            }

            public void put(AppCostCenterVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        SlocId {
            public Object get(AppCostCenterVORowImpl obj) {
                return obj.getSlocId();
            }

            public void put(AppCostCenterVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        CcPrfId {
            public Object get(AppCostCenterVORowImpl obj) {
                return obj.getCcPrfId();
            }

            public void put(AppCostCenterVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        CcPrfDesc {
            public Object get(AppCostCenterVORowImpl obj) {
                return obj.getCcPrfDesc();
            }

            public void put(AppCostCenterVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        CcPos {
            public Object get(AppCostCenterVORowImpl obj) {
                return obj.getCcPos();
            }

            public void put(AppCostCenterVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        CcEntId {
            public Object get(AppCostCenterVORowImpl obj) {
                return obj.getCcEntId();
            }

            public void put(AppCostCenterVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        EntNm {
            public Object get(AppCostCenterVORowImpl obj) {
                return obj.getEntNm();
            }

            public void put(AppCostCenterVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        CcMan {
            public Object get(AppCostCenterVORowImpl obj) {
                return obj.getCcMan();
            }

            public void put(AppCostCenterVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        OrgDesc {
            public Object get(AppCostCenterVORowImpl obj) {
                return obj.getOrgDesc();
            }

            public void put(AppCostCenterVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        TransMandatoryAllow {
            public Object get(AppCostCenterVORowImpl obj) {
                return obj.getTransMandatoryAllow();
            }

            public void put(AppCostCenterVORowImpl obj, Object value) {
                obj.setTransMandatoryAllow((String) value);
            }
        };
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(AppCostCenterVORowImpl object);

        public abstract void put(AppCostCenterVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int CCPRFID = AttributesEnum.CcPrfId.index();
    public static final int CCPRFDESC = AttributesEnum.CcPrfDesc.index();
    public static final int CCPOS = AttributesEnum.CcPos.index();
    public static final int CCENTID = AttributesEnum.CcEntId.index();
    public static final int ENTNM = AttributesEnum.EntNm.index();
    public static final int CCMAN = AttributesEnum.CcMan.index();
    public static final int ORGDESC = AttributesEnum.OrgDesc.index();
    public static final int TRANSMANDATORYALLOW = AttributesEnum.TransMandatoryAllow.index();

    /**
     * This is the default constructor (do not remove).
     */
    public AppCostCenterVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute CldId.
     * @return the CldId
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Gets the attribute value for the calculated attribute OrgId.
     * @return the OrgId
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Gets the attribute value for the calculated attribute HoOrgId.
     * @return the HoOrgId
     */
    public String getHoOrgId() {
        return (String) getAttributeInternal(HOORGID);
    }

    /**
     * Gets the attribute value for the calculated attribute SlocId.
     * @return the SlocId
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Gets the attribute value for the calculated attribute CcPrfId.
     * @return the CcPrfId
     */
    public Integer getCcPrfId() {
        return (Integer) getAttributeInternal(CCPRFID);
    }

    /**
     * Gets the attribute value for the calculated attribute CcPrfDesc.
     * @return the CcPrfDesc
     */
    public String getCcPrfDesc() {
        return (String) getAttributeInternal(CCPRFDESC);
    }

    /**
     * Gets the attribute value for the calculated attribute CcPos.
     * @return the CcPos
     */
    public Integer getCcPos() {
        return (Integer) getAttributeInternal(CCPOS);
    }

    /**
     * Gets the attribute value for the calculated attribute CcEntId.
     * @return the CcEntId
     */
    public Long getCcEntId() {
        return (Long) getAttributeInternal(CCENTID);
    }

    /**
     * Gets the attribute value for the calculated attribute EntNm.
     * @return the EntNm
     */
    public String getEntNm() {
        return (String) getAttributeInternal(ENTNM);
    }

    /**
     * Gets the attribute value for the calculated attribute CcMan.
     * @return the CcMan
     */
    public String getCcMan() {
        return (String) getAttributeInternal(CCMAN);
    }

    /**
     * Gets the attribute value for the calculated attribute OrgDesc.
     * @return the OrgDesc
     */
    public String getOrgDesc() {
        return (String) getAttributeInternal(ORGDESC);
    }

    /**
     * Gets the attribute value for the calculated attribute TransMandatoryAllow.
     * @return the TransMandatoryAllow
     */
    public String getTransMandatoryAllow() {
        if (getAttributeInternal(TRANSMANDATORYALLOW) != null)
            return (String) getAttributeInternal(TRANSMANDATORYALLOW);
        else {
            Integer coa_Id = new Integer(0);
            ChartOfAccountAMImpl am = (ChartOfAccountAMImpl) this.getApplicationModule();
            am.getCoaCCManVO().setRangeSize(-1);
            ViewObjectImpl appCCStructManVO = am.getCoaCCManVO();
            appCCStructManVO.executeQuery();
            FinCoaVOImpl coa1 = am.getFinCoa1();
            CoaVOImpl coaVO1 = am.getCoaVO1();
            if (coa1.getCurrentRow() != null && coa1.getCurrentRow().getAttribute("CoaId") != null) {
                DBSequence coaID = (DBSequence) coa1.getCurrentRow().getAttribute("CoaId");
                coa_Id = coaID.getSequenceNumber().intValue();
            } else {
                if (coaVO1.getCurrentRow() != null && coaVO1.getCurrentRow().getAttribute("CoaId") != null) {
                    DBSequence coaID = (DBSequence) coaVO1.getCurrentRow().getAttribute("CoaId");
                    coa_Id = coaID.getSequenceNumber().intValue();
                }
            }
            RowQualifier rq = new RowQualifier(appCCStructManVO);
            rq.setWhereClause("CldId='" + getCldId() + "' and SlocId=" + getSlocId() + " and HoOrgId='" + getHoOrgId() +
                              "' and OrgId='" + getOrgId() + "' and ManType='" + "C" + "' and ManVal='" +
                              String.valueOf(coa_Id) + "' and CcPos=" + getCcPos() + " and CcPrfId=" + getCcPrfId());

            Row[] filteredRows = appCCStructManVO.getFilteredRows(rq);
            System.out.println("coaa idd disss===" + coa_Id);
            if (getCcMan() != null) {
                if (getCcMan().toString().equalsIgnoreCase("Y"))
                    return "Y";
            }
            if (filteredRows.length > 0)
                return "Y";
                return "N";
           // return (String) getAttributeInternal(TRANSMANDATORYALLOW);
        }
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransMandatoryAllow.
     * @param value value to set the  TransMandatoryAllow
     */
    public void setTransMandatoryAllow(String value) {
        setAttributeInternal(TRANSMANDATORYALLOW, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}

