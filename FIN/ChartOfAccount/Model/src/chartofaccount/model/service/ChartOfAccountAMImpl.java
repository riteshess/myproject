package chartofaccount.model.service;


import chartofaccount.model.service.common.ChartOfAccountAM;
import chartofaccount.model.view.CoaVOImpl;
import chartofaccount.model.view.FinCoaVOImpl;
import chartofaccount.model.view.FinCoaVORowImpl;
import chartofaccount.model.view.LovAltGrpVOImpl;
//import chartofaccount.model.view.LovCoaVORowImpl;
import chartofaccount.model.view.LovCogVOImpl;
import chartofaccount.model.view.LovNaVOImpl;

// chartofaccount.model.view.SearchVOImpl;

import chartofaccount.model.view.SearchVORowImpl;

import chartofaccount.model.view.views.OrgCoaVWVOImpl;

import chartofaccount.model.view.views.OrgCoaVWVORowImpl;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.util.Map;

import javax.el.ELContext;
import javax.el.ExpressionFactory;

import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import oracle.igf.ids.Org;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.domain.DBSequence;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;


import oracle.jbo.server.ViewObjectImpl;

import org.apache.myfaces.trinidad.context.RequestContext;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun Dec 18 20:14:16 IST 2011
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ChartOfAccountAMImpl extends ApplicationModuleImpl {
    /**
     * This is the default constructor (do not remove).
     */
    public ChartOfAccountAMImpl() {
    }

    /**
     * Container's getter for FinCoa1.
     * @return FinCoa1
     */
    public FinCoaVOImpl getFinCoa1() {
        return (FinCoaVOImpl) findViewObject("FinCoa1");
    }


    /**
     * Container's getter for OrgCoa1.
     * @return OrgCoa1
     */
    /*  public OrgCoaVOImpl getOrgCoa1() {
        return (OrgCoaVOImpl)findViewObject("OrgCoa1");
    } */


    /**
     * Container's getter for LovNa1.
     * @return LovNa1
     */
    public ViewObjectImpl getLovNa1() {
        return (ViewObjectImpl) findViewObject("LovNa1");
    }

    /**
     * Container's getter for LovCog1.
     * @return LovCog1
     */
    public LovCogVOImpl getLovCog1() {
        return (LovCogVOImpl) findViewObject("LovCog1");
    }

    /**
     * Container's getter for LovAltGrp1.
     * @return LovAltGrp1
     */
    public LovAltGrpVOImpl getLovAltGrp1() {
        return (LovAltGrpVOImpl) findViewObject("LovAltGrp1");
    }

    /**
     * Task Flow Global Exception Handeler
     * @ Ashish Kumar- 12-03-2013
     */
    public void exceptionHandeler() {
        // System.out.println("Inside Handeler");
        StringBuilder msg = new StringBuilder();
        msg.append("<html><body><p><b>Failed to load content-Network Error</b></p>");
        msg.append("<p><b>Data Processing Failed-</b></p>");
        msg.append("<ul><li>Reload the page</li><li>Or close tab</li><li>Something went wrong-Contact ESS!</li></ul>");
        msg.append("</body></html>");
        FacesMessage message = new FacesMessage(msg.toString());
        message.setSeverity(FacesMessage.SEVERITY_WARN);
        FacesContext fc = FacesContext.getCurrentInstance();
        fc.addMessage(null, message);

    }

    /**
     * Container's getter for CoaVO1.
     * @return CoaVO1
     */
    public CoaVOImpl getCoaVO1() {
        return (CoaVOImpl) findViewObject("CoaVO1");
    }


    /**
     * Container's getter for FinCoaVO2.
     * @return FinCoaVO2
     */

    /**
     * Container's getter for LovCogVO1.
     * @return LovCogVO1
     */

    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String msg = valueExp.getValue(elContext).toString();
        return msg;
    }
    public static int VARCHAR = Types.VARCHAR;
    String add_mode = null;
    String edit_mode = null;
    String view_mode = null;
    String del_mode = null;

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.registerOutParameter(7, VARCHAR);
            st.registerOutParameter(8, VARCHAR);
            st.registerOutParameter(9, VARCHAR);
            st.registerOutParameter(10, VARCHAR);
            st.executeUpdate();
            try {
                setAdd_mode(st.getObject(7).toString());
                setEdit_mode((st.getObject(8).toString()));
                setView_mode(st.getObject(9).toString());
                setDel_mode(st.getObject(10).toString());
            } catch (NullPointerException e) {
                // System.out.println(e);
                e.printStackTrace();
            }
            return st.getObject(1);

        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {

                }
            }
        }
    }


    public Integer on_load_page() {
        int count = 0;
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        Integer usr_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        callStoredFunction(VARCHAR, "APP.fn_get_usr_doc_access_param(?,?,?,?,?,?,?,?,?)", new Object[] {
                           cld_id, sloc_id, org_id, 51, usr_id
        });
        String calledFrom = resolvEl("#{pageFlowScope.PARAM_PG_CALLED}").toString();
        if (add_mode.equalsIgnoreCase("Y") == false && add_mode.equalsIgnoreCase("N") == false) {
            count = 1;
        } else if (edit_mode.equalsIgnoreCase("Y") == false && edit_mode.equalsIgnoreCase("N") == false) {
            count = 1;
        } else if (view_mode.equalsIgnoreCase("Y") == false && view_mode.equalsIgnoreCase("N") == false) {
            count = 1;
        } else if (del_mode.equalsIgnoreCase("Y") == false && del_mode.equalsIgnoreCase("N") == false) {
            count = 1;
        } else if (calledFrom.equalsIgnoreCase("P") == false && calledFrom.equalsIgnoreCase("M") == false) {
            count = 1;
        }
        Map paramMap = RequestContext.getCurrentInstance().getPageFlowScope();
        paramMap.put("PARAM_PG_ADD_MD", add_mode);
        paramMap.put("PARAM_PG_EDIT_MD", edit_mode);
        paramMap.put("PARAM_PG_VIEW_MD", view_mode);
        paramMap.put("PARAM_PG_DEL_MD", del_mode);

        return count;
    }

    public void setAdd_mode(String add_mode) {
        this.add_mode = add_mode;
    }

    public String getAdd_mode() {
        return add_mode;
    }

    public void setEdit_mode(String edit_mode) {
        this.edit_mode = edit_mode;
    }

    public String getEdit_mode() {
        return edit_mode;
    }

    public void setView_mode(String view_mode) {
        this.view_mode = view_mode;
    }

    public String getView_mode() {
        return view_mode;
    }

    public void setDel_mode(String del_mode) {
        this.del_mode = del_mode;
    }

    public String getDel_mode() {
        return del_mode;
    }

    public void searchAction(String coaname) {
        System.out.println("coaname in AM  is= " + coaname);
        /* FinCoaVOImpl coa = this.getFinCoa1();
        coa.setCoaNmBindVar(coaname);
        coa.executeQuery(); */
        ViewCriteria vc1 = this.getFinCoa1().getViewCriteria("FinCoaVOCriteria");
        getFinCoa1().applyViewCriteria(vc1);
        getFinCoa1().setNamedWhereClauseParam("CoaNmBindVar", coaname);

        getFinCoa1().executeQuery();

    }

    public void resetAction() {
        ViewCriteria vc1 = this.getFinCoa1().getViewCriteria("FinCoaVOCriteria");
        getFinCoa1().applyViewCriteria(vc1);
        getFinCoa1().setNamedWhereClauseParam("CoaNmBindVar", null);

        getFinCoa1().executeQuery();
    }

    /**
     * Container's getter for SearchVO1.
     * @return SearchVO1
     */
    public ViewObjectImpl getSearchVO1() {
        return (ViewObjectImpl) findViewObject("SearchVO1");
    }

    public void filter() {
        /*   ViewObjectImpl cog = this.getLovCog1();
    LovCoaVORowImpl coa = (LovCoaVORowImpl)this.getLovCoaVO1().getCurrentRow();


        cog.setNamedWhereClauseParam("SlocIdBind", coa.getSlocId());
    cog.setNamedWhereClauseParam("CldIdBind", coa.getCldId());
    cog.setNamedWhereClauseParam("OrgIdBind", coa.getOrgId());
  cog.executeQuery(); */
    }

    public Integer NaValidator(String naName, String cldId, String HoOrgId, Integer slocId) {
        System.out.println("naName = " + naName + " cldId = " + cldId + " HoOrgId = " + HoOrgId + " slocId = " +
                           slocId);
        FinCoaVOImpl coa = this.getFinCoa1();
        FinCoaVORowImpl coaRow = (FinCoaVORowImpl) coa.getCurrentRow();
        RowSet lovNa = coaRow.getLovNaVO();
        lovNa.setNamedWhereClauseParam("CldIdBind", cldId);
        lovNa.setNamedWhereClauseParam("OrgIdBind", HoOrgId);
        lovNa.setNamedWhereClauseParam("SlocIdBind", slocId);

        Row[] filteredRows = lovNa.getFilteredRows("AccNm", naName);
        System.out.println("filteredRows.length=" + filteredRows.length);
        if (filteredRows.length > 0) {
            Integer naId = (Integer) filteredRows[0].getAttribute("AccId");
            System.out.println("naId=" + naId);
            Row[] row = coa.getFilteredRows("CoaAccId", naId);
            System.out.println("rows=" + row.length);
            if (row.length > 0) {
                System.out.println("in if and return 1");
                return 1;
            }
        }
        System.out.println("ou tof if and return 0");

        return 0;
    }

    public Integer coaValidator(String coaName, String cldId, String HoOrgId, Integer slocId) {

        FinCoaVOImpl coa = this.getFinCoa1();
        coa.setNamedWhereClauseParam("CoaCldIdBind", cldId);
        coa.setNamedWhereClauseParam("CoaHoOrgIdBind", HoOrgId);
        coa.setNamedWhereClauseParam("SlocIdBind", slocId);

        Row[] filteredRows = coa.getFilteredRows("CoaNm", coaName);
        System.out.println("in coaValidator where no of rows=" + filteredRows.length);
        if (filteredRows.length > 0) {
            return 1;
        }
        System.out.println(" return 0");
        return 0;
    }

    /**
     * Check Whether any Row is made with round off or not
     */

    public Integer chkExistingRoundoff() {

        Integer retVal = 0;

        RowSetIterator rsi = this.getFinCoa1().createRowSetIterator(null);

        while (rsi.hasNext()) {
            Row r = rsi.next();
            if (r.getAttribute("CoaRoundAcc") != null) {
                // System.out.println("Value is "+r.getAttribute("CoaRoundAcc"));
                if (r.getAttribute("CoaRoundAcc").toString().equalsIgnoreCase("Y")) {
                    retVal = 1;
                }
            }

        }
        return retVal;
    }


    /**
     * Container's getter for FinCoaVO1.
     * @return FinCoaVO1
     */
    public FinCoaVOImpl getFinCoaVO1() {
        return (FinCoaVOImpl) findViewObject("FinCoaVO1");
    }

    /**
     * Container's getter for OrgCoaVW1.
     * @return OrgCoaVW1
     */
    public OrgCoaVWVOImpl getOrgCoaVW1() {
        return (OrgCoaVWVOImpl) findViewObject("OrgCoaVW1");
    }

    public void checkAllOrgCoa() {
        OrgCoaVWVOImpl coa = this.getOrgCoaVW1();
        if (coa != null) {
            RowSetIterator rs = coa.createRowSetIterator(null);
            while (rs.hasNext()) {
                Row next = rs.next();

                next.setAttribute("OrgCoaActv", "Y");
            }
            rs.closeRowSetIterator();
        }

    }

    public String UnCheckAllOrgCoa() {
        OrgCoaVWVOImpl coa = this.getOrgCoaVW1();
        String val = "Y";
        String result = null;
        Row curRow = null;
        if (coa != null) {

            curRow = coa.getCurrentRow();
            RowSetIterator rs = coa.createRowSetIterator(null);
            while (rs.hasNext()) {
                Row next = rs.next();

                if (((String) next.getAttribute("OrgCoaActv")).equalsIgnoreCase("Y")) {
                    result = this.validateOrgMadeInactiveSingleCoa((String) next.getAttribute("OrgId"));

                    //                   System.out.println("   vurrebt Org Id  --------" + (String) next.getAttribute("OrgId"));
                    //
                    //                   System.out.println("   Currebt Org Id  --------" + (String) coa.getCurrentRow().getAttribute("OrgId"));
                    //
                    if (result.equalsIgnoreCase("Y")) {
                        next.setAttribute("OrgCoaActv", "N");

                    } else {
                        val = "N";

                    }
                }

            }
            rs.closeRowSetIterator();
            // coa.setCurrentRow(curRow);

        }


        System.out.println("Current Org Id----------------------" + (String) coa.getCurrentRow().getAttribute("OrgId"));

        return val;
    }

    public String validateOrgMadeInactiveSingleCoa(String org) {
        String result = "E"; // E represents Exception
        System.out.println("org is " +org);
        FinCoaVOImpl vo = this.getFinCoa1();
        FinCoaVORowImpl cur = (FinCoaVORowImpl) vo.getCurrentRow();
        DBSequence coaIdInDb = cur.getCoaId();
        Number coaId = coaIdInDb.getSequenceNumber();

        // org == N is used as a flag for one coa

       
        if (org.equalsIgnoreCase("N")) {
            OrgCoaVWVOImpl coa = this.getOrgCoaVW1();

            OrgCoaVWVORowImpl cur1 = (OrgCoaVWVORowImpl) coa.getCurrentRow();

            org = cur1.getOrgId();

        }


        System.out.println("Current coa id for insertion is  -----" + coaId + "For ORganisation  ------" + org);

        if (coaId != null) {
            try {
                result = (String) callStoredFunctionReturnOne(this.VARCHAR, "fn_can_org_coa_made_inactive(?,?,?,?) ", new Object[] {
                                                              this.getCldId(), this.getSlocId(), org, coaId
                });
                // result="Y";
            } catch (Exception e) {
                e.printStackTrace();
            }

        }

    
        return result;
    }


    protected Object callStoredFunctionReturnOne(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;

        try {
            st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.executeUpdate();

            return st.getObject(1);

        } catch (SQLException e) {
            e.printStackTrace();
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                    throw new JboException(e);
                }
            }
        }
    }

    public Object resolvElDC(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp =
            elFactory.createValueExpression(elContext, "#{data." + data + ".dataProvider}", Object.class);
        return valueExp.getValue(elContext);
    }


    public String getCldId() {

        String value = "E"; // E represent Exception
        try {
            value = (String) resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        } catch (Exception e) {
            e.printStackTrace();
        }

        return value;
    }

    public String getOrgId() {
        String value = "E"; // E represent Exception
        try {
            value = (String) resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        } catch (Exception e) {
            e.printStackTrace();
        }

        return value;
    }

    public Integer getSlocId() {
        Integer value = -1; // -1 represent Exception
        try {
            value = Integer.parseInt(this.resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        } catch (Exception e) {
            e.printStackTrace();
        }

        return value;

    }

    public void setBindValues() {
        Integer SLOC_ID = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        String HO_ORG_ID = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String CLD_ID = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        ViewObjectImpl appCostCenterVO = this.getAppCostCenterVO();
        appCostCenterVO.setNamedWhereClauseParam("BindCldId", CLD_ID);
        appCostCenterVO.setNamedWhereClauseParam("BindHoOrgId", HO_ORG_ID);
        appCostCenterVO.setNamedWhereClauseParam("BindSlocId", SLOC_ID);
        appCostCenterVO.executeQuery();
    }

    public void insertDataInAppCCStruct() {
          Integer coaId = null;
        ViewObjectImpl appCostCenterVO = this.getAppCostCenterVO();
        FinCoaVOImpl coa1 = this.getFinCoa1();
        Row currentRow = coa1.getCurrentRow();
        if (currentRow.getAttribute("CoaId") != null) {
            DBSequence coa = (DBSequence) currentRow.getAttribute("CoaId");
            coaId = coa.getSequenceNumber().intValue();
        }
        RowSetIterator itr = appCostCenterVO.createRowSetIterator(null);
        
        while(itr.hasNext())
        {
            Row next = itr.next();
            if(next.getAttribute("CcMan").toString().equalsIgnoreCase("N"))
            {
                System.out.println("valuu of transsinntt iss== "+next.getAttribute("TransMandatoryAllow"));
             callStoredFunctionReturnOne(this.VARCHAR, "FN_INS_CC_STRUCT_MAN(?,?,?,?,?,?,?,?,?,?) ", new Object[] {
                                    next.getAttribute("CldId"), next.getAttribute("SlocId"),
                                    next.getAttribute("HoOrgId"), next.getAttribute("OrgId"),
                                    Integer.parseInt(next.getAttribute("CcPrfId").toString()),
                                    Integer.parseInt(next.getAttribute("CcPos").toString()), "C", String.valueOf(coaId),
                                    Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}")),  next.getAttribute("TransMandatoryAllow")
        });
            }
            System.out.println("000000000000000000000");
        }
        appCostCenterVO.closeRowSetIterator();
        this.getAppCostCenterVO().executeQuery();
    }
   
    /**
     * Container's getter for AppCostCenterVO1.
     * @return AppCostCenterVO1
     */
    public ViewObjectImpl getAppCostCenterVO() {
        return (ViewObjectImpl) findViewObject("AppCostCenterVO");
    }

    /**
     * Container's getter for AppCCStructManVO1.
     * @return AppCCStructManVO1
     */
    public ViewObjectImpl getAppCCStructManVO() {
        return (ViewObjectImpl) findViewObject("AppCCStructManVO");
    }

    /**
     * Container's getter for CoaCCManVO1.
     * @return CoaCCManVO1
     */
    public ViewObjectImpl getCoaCCManVO() {
        return (ViewObjectImpl) findViewObject("CoaCCManVO");
    }
}
