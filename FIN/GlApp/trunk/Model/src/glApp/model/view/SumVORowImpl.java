package glApp.model.view;

import glApp.model.module.GlAppAMImpl;

import java.math.BigDecimal;

import javax.el.ELContext;
import javax.el.ExpressionFactory;

import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.domain.BFileDomain;
import oracle.jbo.domain.NClobDomain;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Apr 15 12:33:22 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SumVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Dummy {
            public Object get(SumVORowImpl obj) {
                return obj.getDummy();
            }

            public void put(SumVORowImpl obj, Object value) {
                obj.setDummy((String)value);
            }
        }
        ,
        SumRAdjAmtSpTrans {
            public Object get(SumVORowImpl obj) {
                return obj.getSumRAdjAmtSpTrans();
            }

            public void put(SumVORowImpl obj, Object value) {
                obj.setSumRAdjAmtSpTrans((Number)value);
            }
        }
        ,
        SumAmtTrxTrans {
            public Object get(SumVORowImpl obj) {
                return obj.getSumAmtTrxTrans();
            }

            public void put(SumVORowImpl obj, Object value) {
                obj.setSumAmtTrxTrans((Number)value);
            }
        }
        ,
        DtlSumTrans {
            public Object get(SumVORowImpl obj) {
                return obj.getDtlSumTrans();
            }

            public void put(SumVORowImpl obj, Object value) {
                obj.setDtlSumTrans((Number)value);
            }
        }
        ,
        GlAdvAmtSpTrans {
            public Object get(SumVORowImpl obj) {
                return obj.getGlAdvAmtSpTrans();
            }

            public void put(SumVORowImpl obj, Object value) {
                obj.setGlAdvAmtSpTrans((BigDecimal)value);
            }
        }
        ,
        GlAdvAmtAdjTrans {
            public Object get(SumVORowImpl obj) {
                return obj.getGlAdvAmtAdjTrans();
            }

            public void put(SumVORowImpl obj, Object value) {
                obj.setGlAdvAmtAdjTrans((BigDecimal)value);
            }
        }
        ,
        GlAmtTrxTrans {
            public Object get(SumVORowImpl obj) {
                return obj.getGlAmtTrxTrans();
            }

            public void put(SumVORowImpl obj, Object value) {
                obj.setGlAmtTrxTrans((BigDecimal)value);
            }
        }
        ,
        AdjAmtSpTrans {
            public Object get(SumVORowImpl obj) {
                return obj.getAdjAmtSpTrans();
            }

            public void put(SumVORowImpl obj, Object value) {
                obj.setAdjAmtSpTrans((BigDecimal)value);
            }
        }
        ,
        AdjAmtAdjTrans {
            public Object get(SumVORowImpl obj) {
                return obj.getAdjAmtAdjTrans();
            }

            public void put(SumVORowImpl obj, Object value) {
                obj.setAdjAmtAdjTrans((BigDecimal)value);
            }
        }
        ,
        RadjAmtSpTrans {
            public Object get(SumVORowImpl obj) {
                return obj.getRadjAmtSpTrans();
            }

            public void put(SumVORowImpl obj, Object value) {
                obj.setRadjAmtSpTrans((BigDecimal)value);
            }
        }
        ,
        RadjAmtAdjTrans {
            public Object get(SumVORowImpl obj) {
                return obj.getRadjAmtAdjTrans();
            }

            public void put(SumVORowImpl obj, Object value) {
                obj.setRadjAmtAdjTrans((BigDecimal)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(SumVORowImpl object);

        public abstract void put(SumVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int DUMMY = AttributesEnum.Dummy.index();
    public static final int SUMRADJAMTSPTRANS = AttributesEnum.SumRAdjAmtSpTrans.index();
    public static final int SUMAMTTRXTRANS = AttributesEnum.SumAmtTrxTrans.index();
    public static final int DTLSUMTRANS = AttributesEnum.DtlSumTrans.index();
    public static final int GLADVAMTSPTRANS = AttributesEnum.GlAdvAmtSpTrans.index();
    public static final int GLADVAMTADJTRANS = AttributesEnum.GlAdvAmtAdjTrans.index();
    public static final int GLAMTTRXTRANS = AttributesEnum.GlAmtTrxTrans.index();
    public static final int ADJAMTSPTRANS = AttributesEnum.AdjAmtSpTrans.index();
    public static final int ADJAMTADJTRANS = AttributesEnum.AdjAmtAdjTrans.index();
    public static final int RADJAMTSPTRANS = AttributesEnum.RadjAmtSpTrans.index();
    public static final int RADJAMTADJTRANS = AttributesEnum.RadjAmtAdjTrans.index();

    /**
     * This is the default constructor (do not remove).
     */
    public SumVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute Dummy.
     * @return the Dummy
     */
    public String getDummy() {
        return (String)getAttributeInternal(DUMMY);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Dummy.
     * @param value value to set the  Dummy
     */
    public void setDummy(String value) {
        setAttributeInternal(DUMMY, value);
    }

    /**
     * Gets the attribute value for the calculated attribute SumRAdjAmtSpTrans.
     * @return the SumRAdjAmtSpTransu
     */
     GlAppAMImpl am = (GlAppAMImpl)resolvElDC("GlAppAMDataControl");
     ViewObjectImpl vo = am.getGlAdjTmpVO1();
     ViewObjectImpl advvo=am.getGlAutoAdvDtlVO1();
    ViewObjectImpl adjadvvo=am.getGlAdjAdvDtlVO1();
    public Number getSumRAdjAmtSpTrans() {
        Number cal = new Number(0);
       RowSetIterator itr = vo.createRowSetIterator(null);
        while (itr.hasNext()) {
            Row rw = itr.next();
            if (rw.getAttribute("RadjAmtSp") != null) {
                cal = cal.add((Number)rw.getAttribute("RadjAmtSp"));
            }
        }
        //return (Number) getAttributeInternal(SUMRADJAMTSPTRANS);
        return cal;
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute SumRAdjAmtSpTrans.
     * @param value value to set the  SumRAdjAmtSpTrans
     */
    public void setSumRAdjAmtSpTrans(Number value) {
        setAttributeInternal(SUMRADJAMTSPTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute SumAmtTrxTrans.
     * @return the SumAmtTrxTrans
     */
    public Number getSumAmtTrxTrans() {
        Number cal = new Number(0);
        RowSetIterator itr = vo.createRowSetIterator(null);
        while (itr.hasNext()) {
            Row rw = itr.next();
            if (rw.getAttribute("AmtTrx") != null) {
                cal = cal.add((Number)rw.getAttribute("AmtTrx"));
            }
        }
        return cal;
        //return (Number) getAttributeInternal(SUMAMTTRXTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute SumAmtTrxTrans.
     * @param value value to set the  SumAmtTrxTrans
     */
    public void setSumAmtTrxTrans(Number value) {
        setAttributeInternal(SUMAMTTRXTRANS, value);
    }


    /**
     * Gets the attribute value for the calculated attribute DtlSumTrans.
     * @return the DtlSumTrans
     */
    public Number getDtlSumTrans() {
        Number cal = new Number(0);
         RowSetIterator itr = vo.createRowSetIterator(null);
        while (itr.hasNext()) {
            Row rw = itr.next();
            if (rw.getAttribute("RadjAmtAdj") != null) {
                cal = cal.add((Number)rw.getAttribute("RadjAmtAdj"));
            }
        }
        return cal;
       // return (Number) getAttributeInternal(DTLSUMTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute DtlSumTrans.
     * @param value value to set the  DtlSumTrans
     */
    public void setDtlSumTrans(Number value) {
        setAttributeInternal(DTLSUMTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute GlAdvAmtSpTrans.
     * @return the GlAdvAmtSpTrans
     */
    public BigDecimal getGlAdvAmtSpTrans() {
        BigDecimal cal = new BigDecimal(0);
       RowSetIterator itr = advvo.createRowSetIterator(null);
        while (itr.hasNext()) {
            Row rw = itr.next();
            if (rw.getAttribute("GlAdvAmtSp") != null) {
                cal = cal.add((BigDecimal)rw.getAttribute("GlAdvAmtSp"));
            }
        }
       return cal;
       // return (BigDecimal) getAttributeInternal(GLADVAMTSPTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute GlAdvAmtSpTrans.
     * @param value value to set the  GlAdvAmtSpTrans
     */
    public void setGlAdvAmtSpTrans(BigDecimal value) {
        setAttributeInternal(GLADVAMTSPTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute GlAdvAmtAdjTrans.
     * @return the GlAdvAmtAdjTrans
     */
    public BigDecimal getGlAdvAmtAdjTrans() {
        BigDecimal cal = new BigDecimal(0);
       RowSetIterator itr = advvo.createRowSetIterator(null);
        while (itr.hasNext()) {
            Row rw = itr.next();
            if (rw.getAttribute("GlAdvAmtAdj") != null) {
                cal = cal.add((BigDecimal)rw.getAttribute("GlAdvAmtAdj"));
            }
        }
        return cal;
       // return (BigDecimal) getAttributeInternal(GLADVAMTADJTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute GlAdvAmtAdjTrans.
     * @param value value to set the  GlAdvAmtAdjTrans
     */
    public void setGlAdvAmtAdjTrans(BigDecimal value) {
        setAttributeInternal(GLADVAMTADJTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute GlAmtTrxTrans.
     * @return the GlAmtTrxTrans
     */
    public BigDecimal getGlAmtTrxTrans() {
        BigDecimal cal = new BigDecimal(0);
         RowSetIterator itr = advvo.createRowSetIterator(null);
        while (itr.hasNext()) {
            Row rw = itr.next();
            if (rw.getAttribute("GlAmtTrx") != null) {
                cal = cal.add((BigDecimal)rw.getAttribute("GlAmtTrx"));
            }
        }
        return cal;
        //return (BigDecimal) getAttributeInternal(GLAMTTRXTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute GlAmtTrxTrans.
     * @param value value to set the  GlAmtTrxTrans
     */
    public void setGlAmtTrxTrans(BigDecimal value) {
        setAttributeInternal(GLAMTTRXTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute AdjAmtSpTrans.
     * @return the AdjAmtSpTrans
     */
    public BigDecimal getAdjAmtSpTrans() {
        BigDecimal cal = new BigDecimal(0);
        RowSetIterator itr = adjadvvo.createRowSetIterator(null);
        while (itr.hasNext()) {
            Row rw = itr.next();
            if (rw.getAttribute("AdjAmtSp") != null) {
                cal = cal.add((BigDecimal)rw.getAttribute("AdjAmtSp"));
            }
        }
         
        return cal;
      //  return (BigDecimal) getAttributeInternal(ADJAMTSPTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute AdjAmtSpTrans.
     * @param value value to set the  AdjAmtSpTrans
     */
    public void setAdjAmtSpTrans(BigDecimal value) {
        setAttributeInternal(ADJAMTSPTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute AdjAmtAdjTrans.
     * @return the AdjAmtAdjTrans
     */
    public BigDecimal getAdjAmtAdjTrans() {
        BigDecimal cal = new BigDecimal(0);
          RowSetIterator itr = adjadvvo.createRowSetIterator(null);
        while (itr.hasNext()) {
            Row rw = itr.next();
            if (rw.getAttribute("AdjAmtAdj") != null) {
                cal = cal.add((BigDecimal)rw.getAttribute("AdjAmtAdj"));
            }
        }
           return cal;
        //return (BigDecimal) getAttributeInternal(ADJAMTADJTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute AdjAmtAdjTrans.
     * @param value value to set the  AdjAmtAdjTrans
     */
    public void setAdjAmtAdjTrans(BigDecimal value) {
        setAttributeInternal(ADJAMTADJTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute RadjAmtSpTrans.
     * @return the RadjAmtSpTrans
     */
    public BigDecimal getRadjAmtSpTrans() {
        BigDecimal cal = new BigDecimal(0);
        RowSetIterator itr = adjadvvo.createRowSetIterator(null);
        while (itr.hasNext()) {
            Row rw = itr.next();
            if (rw.getAttribute("RadjAmtSp") != null) {
                cal = cal.add((BigDecimal)rw.getAttribute("RadjAmtSp"));
            }
        }
          return cal;
     //  return (BigDecimal) getAttributeInternal(RADJAMTSPTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute RadjAmtSpTrans.
     * @param value value to set the  RadjAmtSpTrans
     */
    public void setRadjAmtSpTrans(BigDecimal value) {
        setAttributeInternal(RADJAMTSPTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute RadjAmtAdjTrans.
     * @return the RadjAmtAdjTrans
     */
    public BigDecimal getRadjAmtAdjTrans() {
        BigDecimal cal = new BigDecimal(0);
        RowSetIterator itr = adjadvvo.createRowSetIterator(null);
        while (itr.hasNext()) {
            Row rw = itr.next();
            if (rw.getAttribute("RadjAmtAdj") != null) {
                cal = cal.add((BigDecimal)rw.getAttribute("RadjAmtAdj"));
            }
        }
         return cal;
        //return (BigDecimal) getAttributeInternal(RADJAMTADJTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute RadjAmtAdjTrans.
     * @param value value to set the  RadjAmtAdjTrans
     */
    public void setRadjAmtAdjTrans(BigDecimal value) {
        setAttributeInternal(RADJAMTADJTRANS, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    public Object resolvElDC(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp =
            elFactory.createValueExpression(elContext, "#{data." + data + ".dataProvider}", Object.class);
        return valueExp.getValue(elContext);

    }

}
