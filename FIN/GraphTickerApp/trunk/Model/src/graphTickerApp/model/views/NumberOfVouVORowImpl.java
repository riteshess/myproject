package graphTickerApp.model.views;

import graphTickerApp.model.module.GraphTickerAMImpl;

import java.sql.CallableStatement;
import java.sql.SQLException;

import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.JboException;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Jun 18 16:15:01 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class NumberOfVouVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Cldid {
            public Object get(NumberOfVouVORowImpl obj) {
                return obj.getCldid();
            }

            public void put(NumberOfVouVORowImpl obj, Object value) {
                obj.setCldid((String)value);
            }
        }
        ,
        Slocid {
            public Object get(NumberOfVouVORowImpl obj) {
                return obj.getSlocid();
            }

            public void put(NumberOfVouVORowImpl obj, Object value) {
                obj.setSlocid((Integer)value);
            }
        }
        ,
        Hoorgid {
            public Object get(NumberOfVouVORowImpl obj) {
                return obj.getHoorgid();
            }

            public void put(NumberOfVouVORowImpl obj, Object value) {
                obj.setHoorgid((String)value);
            }
        }
        ,
        Orgid {
            public Object get(NumberOfVouVORowImpl obj) {
                return obj.getOrgid();
            }

            public void put(NumberOfVouVORowImpl obj, Object value) {
                obj.setOrgid((String)value);
            }
        }
        ,
        Usrid {
            public Object get(NumberOfVouVORowImpl obj) {
                return obj.getUsrid();
            }

            public void put(NumberOfVouVORowImpl obj, Object value) {
                obj.setUsrid((String)value);
            }
        }
        ,
        Approved {
            public Object get(NumberOfVouVORowImpl obj) {
                return obj.getApproved();
            }

            public void put(NumberOfVouVORowImpl obj, Object value) {
                obj.setApproved((Number)value);
            }
        }
        ,
        Pending {
            public Object get(NumberOfVouVORowImpl obj) {
                return obj.getPending();
            }

            public void put(NumberOfVouVORowImpl obj, Object value) {
                obj.setPending((Number)value);
            }
        }
        ,
        Unposted {
            public Object get(NumberOfVouVORowImpl obj) {
                return obj.getUnposted();
            }

            public void put(NumberOfVouVORowImpl obj, Object value) {
                obj.setUnposted((Number)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(NumberOfVouVORowImpl object);

        public abstract void put(NumberOfVouVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CLDID = AttributesEnum.Cldid.index();
    public static final int SLOCID = AttributesEnum.Slocid.index();
    public static final int HOORGID = AttributesEnum.Hoorgid.index();
    public static final int ORGID = AttributesEnum.Orgid.index();
    public static final int USRID = AttributesEnum.Usrid.index();
    public static final int APPROVED = AttributesEnum.Approved.index();
    public static final int PENDING = AttributesEnum.Pending.index();
    public static final int UNPOSTED = AttributesEnum.Unposted.index();

    /**
     * This is the default constructor (do not remove).
     */
    public NumberOfVouVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute Cldid.
     * @return the Cldid
     */
    public String getCldid() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Cldid.
     * @param value value to set the  Cldid
     */
    public void setCldid(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Slocid.
     * @return the Slocid
     */
    public Integer getSlocid() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Slocid.
     * @param value value to set the  Slocid
     */
    public void setSlocid(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Hoorgid.
     * @return the Hoorgid
     */
    public String getHoorgid() {
        return (String) getAttributeInternal(HOORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Hoorgid.
     * @param value value to set the  Hoorgid
     */
    public void setHoorgid(String value) {
        setAttributeInternal(HOORGID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Orgid.
     * @return the Orgid
     */
    public String getOrgid() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Orgid.
     * @param value value to set the  Orgid
     */
    public void setOrgid(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Usrid.
     * @return the Usrid
     */
    public String getUsrid() {
        return (String) getAttributeInternal(USRID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Usrid.
     * @param value value to set the  Usrid
     */
    public void setUsrid(String value) {
        setAttributeInternal(USRID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Approved.
     * @return the Approved
     */
    public Number getApproved() {
        try {
            Object res =
                callStoredFunction(Types.NUMERIC, "fin.fn_user_vou_cnt(?,?,?,?,?,?)", new Object[] { getCldid(),
                                                                                                     getHoorgid(),
                                                                                                     getSlocid(),
                                                                                                     getOrgid(),
                                                                                                     getUsrid(),
                                                                                                     "A" });
            if (res != null) {

                try {
                    return new Number(res);
                } catch (SQLException e) {
                    System.out.println("error = " + e);
                }
            } else {
                return new Number(0);
            }
        } catch (Exception e) {
            e.printStackTrace();

            return new Number(0);

        }
        return (Number) getAttributeInternal(APPROVED);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Approved.
     * @param value value to set the  Approved
     */
    public void setApproved(Number value) {
        setAttributeInternal(APPROVED, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Pending.
     * @return the Pending
     */
    public Number getPending() {
        try {
            Object res =
                callStoredFunction(Types.NUMERIC, "fin.fn_user_vou_cnt(?,?,?,?,?,?)", new Object[] { getCldid(),
                                                                                                     getHoorgid(),
                                                                                                     getSlocid(),
                                                                                                     getOrgid(),
                                                                                                     getUsrid(),
                                                                                                     "O" });
            if (res != null) {
                try {
                    return new Number(res);
                } catch (SQLException e) {
                    System.out.println(e);
                }
            } else {
                return new Number(0);
            }
        } catch (Exception e) {
            e.printStackTrace();

            return new Number(0);
        }
        return (Number) getAttributeInternal(PENDING);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Pending.
     * @param value value to set the  Pending
     */
    public void setPending(Number value) {
        setAttributeInternal(PENDING, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Unposted.
     * @return the Unposted
     */
    public Number getUnposted() {
        try {
            Object res =
                callStoredFunction(Types.NUMERIC, "fin.fn_user_vou_cnt(?,?,?,?,?,?)", new Object[] { getCldid(),
                                                                                                     getHoorgid(),
                                                                                                     getSlocid(),
                                                                                                     getOrgid(),
                                                                                                     getUsrid(),
                                                                                                     "U" });
            if (res != null) {
                try {
                    return new Number(res);
                } catch (SQLException e) {
                    System.out.println(e);
                }
            } else {
                return new Number(0);
            }
        } catch (Exception e) {
            e.printStackTrace();

            return new Number(0);
        }
        return (Number) getAttributeInternal(UNPOSTED);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Unposted.
     * @param value value to set the  Unposted
     */
    public void setUnposted(Number value) {
        setAttributeInternal(UNPOSTED, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
    public Object resolvElDC(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp =
            elFactory.createValueExpression(elContext, "#{data." + data + ".dataProvider}", Object.class);
        return valueExp.getValue(elContext);
    }
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            GraphTickerAMImpl am = (GraphTickerAMImpl)resolvElDC("GraphTickerAMDataControl");
            st = am.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);

                }
            }
            st.executeUpdate();

            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                }
            }
        }
    }
}
