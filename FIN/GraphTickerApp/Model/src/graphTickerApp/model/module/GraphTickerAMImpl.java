package graphTickerApp.model.module;


import graphTickerApp.model.view.AppActivityNewVOImpl;
import graphTickerApp.model.view.BanKFlowTrendLOVImpl;
import graphTickerApp.model.view.BankFlowVOImpl;
import graphTickerApp.model.view.CashFlowTrendLOVImpl;
import graphTickerApp.model.view.CashFlowVOImpl;
import graphTickerApp.model.view.DocLovVOImpl;
import graphTickerApp.model.view.ExpenceTrendLOVImpl;
import graphTickerApp.model.view.ExpenceVOImpl;
import graphTickerApp.model.view.FinActivityVOImpl;
import graphTickerApp.model.view.FinSecTkrUsrVOImpl;
import graphTickerApp.model.view.FinTkrForActVisVOImpl;
import graphTickerApp.model.view.GraphTopCreditorsVOImpl;
import graphTickerApp.model.view.IncomeTrendLOVImpl;
import graphTickerApp.model.view.IncomeVOImpl;
import graphTickerApp.model.view.IncomeVsExpenceImpl;
import graphTickerApp.model.view.IncomeVsExpenseTrendLOVImpl;
import graphTickerApp.model.view.LovForDocIdVOImpl;
import graphTickerApp.model.view.MonetFlowVOImpl;
import graphTickerApp.model.view.MoneyFlowTrendLOVImpl;


import graphTickerApp.model.view.OrgtrendNewVOImpl;
import graphTickerApp.model.view.SuppAgingInvoicewiseTrendLOVImpl;
import graphTickerApp.model.view.SuppAgingSummVOImpl;
import graphTickerApp.model.view.SuppGraphTrendLOVImpl;
import graphTickerApp.model.view.SupplierAgingInvoiceWiseVOImpl;
import graphTickerApp.model.view.SupplierAgingVOImpl;
import graphTickerApp.model.view.views.AppSecUserVOImpl;
import graphTickerApp.model.view.views.LovFinTkrForSecVOImpl;
import graphTickerApp.model.view.views.TopCustomerOsVOImpl;

import graphTickerApp.model.views.AppSecUsrMnuVOImpl;
import graphTickerApp.model.views.PendingVouVOImpl;

import graphTickerApp.model.views.SupplierAgingNewVOImpl;
import graphTickerApp.model.views.TopSupplierOsVOImpl;
import graphTickerApp.model.views.UnpostedVouVOImpl;

import org.apache.myfaces.trinidad.context.RequestContext;
import graphTickerApp.model.module.common.GraphTickerAM;

import oracle.jbo.JboException;
import graphTickerApp.model.view.TickerDataVOImpl;
import java.sql.CallableStatement;
//import java.sql.Date;

import java.util.Map;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;
import javax.faces.application.Application;
import javax.faces.context.FacesContext;
import java.sql.SQLException;
import java.sql.Types;

//import java.util.Date;

import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Mar 21 15:08:16 IST 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class GraphTickerAMImpl extends ApplicationModuleImpl implements GraphTickerAM {
    /**
     * This is the default constructor (do not remove).
     */
    public GraphTickerAMImpl() {
    }
    public static int VARCHAR = Types.VARCHAR;
    String add_mode = null;
    String edit_mode = null;
    String view_mode = null;
    String del_mode = null;

    /**
     * Container's getter for SuppAgingSumm.
     * @return SuppAgingSumm
     */
    public ViewObjectImpl getSuppAgingSumm() {
        return (ViewObjectImpl)findViewObject("SuppAgingSumm");
    }


    /**
     * Container's getter for BankFlowVO.
     * @return BankFlowVO
     */
    public BankFlowVOImpl getBankFlowVO() {
        return (BankFlowVOImpl)findViewObject("BankFlowVO");
    }

    /**
     * Container's getter for CashFlowVO.
     * @return CashFlowVO
     */
    public CashFlowVOImpl getCashFlowVO() {
        return (CashFlowVOImpl)findViewObject("CashFlowVO");
    }

    /**
     * Container's getter for MonetFlowVO.
     * @return MonetFlowVO
     */
    public MonetFlowVOImpl getMonetFlowVO() {
        return (MonetFlowVOImpl)findViewObject("MonetFlowVO");
    }

    /**
     * Container's getter for ExpenceVO.
     * @return ExpenceVO
     */
    public ExpenceVOImpl getExpenceVO() {
        return (ExpenceVOImpl)findViewObject("ExpenceVO");
    }

    /**
     * Container's getter for IncomeVO.
     * @return IncomeVO
     */
    public IncomeVOImpl getIncomeVO() {
        return (IncomeVOImpl)findViewObject("IncomeVO");
    }

    /**
     * Container's getter for IncomeVsExpence.
     * @return IncomeVsExpence
     */
    public IncomeVsExpenceImpl getIncomeVsExpence() {
        return (IncomeVsExpenceImpl)findViewObject("IncomeVsExpence");
    }

    /**
     * Container's getter for TickerDataVO1.
     * @return TickerDataVO1
     */
    public TickerDataVOImpl getTickerDataVO1() {
        return (TickerDataVOImpl)findViewObject("TickerDataVO1");
    }

    /**
     * Container's getter for FinActivity1.
     * @return FinActivity1
     */
    public ViewObjectImpl getFinActivity1() {
        return (ViewObjectImpl)findViewObject("FinActivity1");
    }

    /**
     * Container's getter for DocLov1.
     * @return DocLov1
     */
    public DocLovVOImpl getDocLov1() {
        return (DocLovVOImpl)findViewObject("DocLov1");
    }

    /**
     * Container's getter for FinSecTkrUsr1.
     * @return FinSecTkrUsr1
     */
    public ViewObjectImpl getFinSecTkrUsr1() {
        return (ViewObjectImpl)findViewObject("FinSecTkrUsr1");
    }
    private static String valueOfPending;

    private static int INTEGER = Types.NUMERIC;
    private static int DATE = Types.DATE;
    private static int STRING = Types.VARCHAR;

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            // 1. Create a JDBC CallabledStatement
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            // 2. Register the first bind variable for the return value
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                // 3. Loop over values for the bind variables passed in, if any
                for (int z = 0; z < bindVars.length; z++) {
                    // 4. Set the value of user-supplied bind vars in the stmt
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            // 5. Set the value of user-supplied bind vars in the stmt
            st.executeUpdate();
            // 6. Return the value of the first bind variable
            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    // 7. Close the statement
                    st.close();
                } catch (SQLException e) {
                }
            }
        }
    }


    public String getpendingGlDtl(Integer P_SLOC_ID, String P_ORG_ID) {
        valueOfPending =
                (String)callStoredFunction(STRING, "FIN.PKG_FIN.GET_PENDING_GL(?,?)", new Object[] { P_SLOC_ID,
                                                                                                     P_ORG_ID });
        return null;
    }


    public void setValueOfPending(String valueOfPending) {
        this.valueOfPending = valueOfPending;
    }

    public String getValueOfPending() {
        return valueOfPending;
    }

    /**
     * Container's getter for SupplierAgingGraphVO.
     * @return SupplierAgingGraphVO
     */
    public ViewObjectImpl getSupplierAgingGraphVO() {
        return (ViewObjectImpl)findViewObject("SupplierAgingGraphVO");
    }

    /**
     * Container's getter for SuppGraphTrendLOV.
     * @return SuppGraphTrendLOV
     */
    public ViewObjectImpl getSuppGraphTrendLOV() {
        return (ViewObjectImpl)findViewObject("SuppGraphTrendLOV");
    }

    public void setBindVarValue(Integer SlocId, Integer UserId, String Org,String CldId) {
        System.out.println("SlocId====="+SlocId+"=====UserId======"+UserId+"=======Org======"+Org);
        
        ViewObject suppAgingInvoicewise=this.getSupplierAgingInvoiceWise1();
        ViewObject suppAging = this.getSupplierAgingGraphVO();
        ViewObject moneyflow=this.getMonetFlowVO();
        ViewObject cashFlow=this.getCashFlowVO();
        ViewObject bankFlow=this.getBankFlowVO();
        ViewObject income=this.getIncomeVO();
        ViewObject expence=this.getExpenceVO();
        ViewObject IncomeVsexpence=this.getIncomeVsExpence();
       
        
        suppAgingInvoicewise.setNamedWhereClauseParam("SlocIdVar", SlocId);
        suppAgingInvoicewise.setNamedWhereClauseParam("UserIdVar", UserId);
        suppAgingInvoicewise.setNamedWhereClauseParam("OrgIdVar", Org);
        suppAgingInvoicewise.setNamedWhereClauseParam("CldIdBindVar", CldId);
        
        
        suppAging.setNamedWhereClauseParam("SlocIdVar", SlocId);
        suppAging.setNamedWhereClauseParam("UserIdVar", UserId);
        suppAging.setNamedWhereClauseParam("OrgIdVar", Org);
        suppAging.setNamedWhereClauseParam("CldIdBindVar", CldId);
        
        moneyflow.setNamedWhereClauseParam("SlocIdVar", SlocId);
        moneyflow.setNamedWhereClauseParam("UserIdVar", UserId);
        moneyflow.setNamedWhereClauseParam("OrgIdVar", Org);
        moneyflow.setNamedWhereClauseParam("CldIdBindVar", CldId);
        
        cashFlow.setNamedWhereClauseParam("SlocIdVar", SlocId);
        cashFlow.setNamedWhereClauseParam("UserIdVar", UserId);
        cashFlow.setNamedWhereClauseParam("OrgIdVar", Org);
        cashFlow.setNamedWhereClauseParam("CldIdBindVar", CldId);
        
        bankFlow.setNamedWhereClauseParam("SlocIdVar", SlocId);
        bankFlow.setNamedWhereClauseParam("UserIdVar", UserId);
        bankFlow.setNamedWhereClauseParam("OrgIdVar", Org);
        bankFlow.setNamedWhereClauseParam("CldIdBindVar", CldId);
        
        income.setNamedWhereClauseParam("SlocIdVar", SlocId);
        income.setNamedWhereClauseParam("UserIdVar", UserId);
        income.setNamedWhereClauseParam("OrgIdVar", Org);
        income.setNamedWhereClauseParam("CldIdBindVar", CldId);
        
        expence.setNamedWhereClauseParam("SlocIdVar", SlocId);
        expence.setNamedWhereClauseParam("UserIdVar", UserId);
        expence.setNamedWhereClauseParam("OrgIdVar", Org);
        expence.setNamedWhereClauseParam("CldIdBindVar", CldId);
        
        IncomeVsexpence.setNamedWhereClauseParam("SlocIdVar", SlocId);
        IncomeVsexpence.setNamedWhereClauseParam("UserIdVar", UserId);
        IncomeVsexpence.setNamedWhereClauseParam("OrgIdVar", Org);
        IncomeVsexpence.setNamedWhereClauseParam("CldIdBindVar", CldId);
        
        suppAging.executeQuery();
        moneyflow.executeQuery();
        cashFlow.executeQuery();
        bankFlow.executeQuery();
        income.executeQuery();
        expence.executeQuery();
        IncomeVsexpence.executeQuery();
    }

    /**
     * Container's getter for MoneyFlowTrendLOV1.
     * @return MoneyFlowTrendLOV1
     */
    public MoneyFlowTrendLOVImpl getMoneyFlowTrendLOV1() {
        return (MoneyFlowTrendLOVImpl)findViewObject("MoneyFlowTrendLOV1");
    }

    /**
     * Container's getter for CashFlowTrendLOV1.
     * @return CashFlowTrendLOV1
     */
    public CashFlowTrendLOVImpl getCashFlowTrendLOV1() {
        return (CashFlowTrendLOVImpl)findViewObject("CashFlowTrendLOV1");
    }

    /**
     * Container's getter for BanKFlowTrendLOV1.
     * @return BanKFlowTrendLOV1
     */
    public BanKFlowTrendLOVImpl getBanKFlowTrendLOV1() {
        return (BanKFlowTrendLOVImpl)findViewObject("BanKFlowTrendLOV1");
    }

    /**
     * Container's getter for IncomeTrendLOV1.
     * @return IncomeTrendLOV1
     */
    public IncomeTrendLOVImpl getIncomeTrendLOV1() {
        return (IncomeTrendLOVImpl)findViewObject("IncomeTrendLOV1");
    }

    /**
     * Container's getter for ExpenceTrendLOV1.
     * @return ExpenceTrendLOV1
     */
    public ExpenceTrendLOVImpl getExpenceTrendLOV1() {
        return (ExpenceTrendLOVImpl)findViewObject("ExpenceTrendLOV1");
    }

    /**
     * Container's getter for IncomeVsExpenseTrendLOV1.
     * @return IncomeVsExpenseTrendLOV1
     */
    public IncomeVsExpenseTrendLOVImpl getIncomeVsExpenseTrendLOV1() {
        return (IncomeVsExpenseTrendLOVImpl)findViewObject("IncomeVsExpenseTrendLOV1");
    }

    /**
     * Container's getter for AppActivityVO.
     * @return AppActivityVO
     */
    public ViewObjectImpl getAppActivityVO() {
        return (ViewObjectImpl)findViewObject("AppActivityVO");
    }

    /**
     * Container's getter for AppActivityNew1.
     * @return AppActivityNew1
     */
    public AppActivityNewVOImpl getAppActivityNew1() {
        return (AppActivityNewVOImpl)findViewObject("AppActivityNew1");
    }

    /**
     * Container's getter for OrgTrendDoc1.
     * @return OrgTrendDoc1
     */
    public ViewObjectImpl getOrgTrendDoc1() {
        return (ViewObjectImpl)findViewObject("OrgTrendDoc1");
    }

    /**
     * Container's getter for OrgtrendNew1.
     * @return OrgtrendNew1
     */
  /*   public ViewObjectImpl getOrgtrendNew1() {
        return (ViewObjectImpl)findViewObject("OrgtrendNew1");
    } */

    /**
     * Container's getter for Dual1.
     * @return Dual1
     */
    public ViewObjectImpl getDual1() {
        return (ViewObjectImpl)findViewObject("Dual1");
    }

    /**
     * Container's getter for LovForDocId1.
     * @return LovForDocId1
     */
    public LovForDocIdVOImpl getLovForDocId1() {
        return (LovForDocIdVOImpl)findViewObject("LovForDocId1");
    }
    
    public void freshData (Integer usr)
    { 
         
        /** This method is commented on 05-May-2014 by amandeep. Currently All the graphs are not visible so it is executing without any reason. */
      /*   ViewObjectImpl v = getAppActivityNew1();
        v.setWhereClause("(activity_usr_id ="+usr+" and activity_usr_typ = 'G') or (activity_usr_id is null and activity_usr_typ = 'O' and activity_thread_id not in (select activity_thread_id from app.app$activity$msg where activity_usr_id = "+usr+" and activity_usr_typ = 'G'))");
        v.executeQuery();
         */
        }

    /**
     * Container's getter for SupplierAgingInvoiceWise1.
     * @return SupplierAgingInvoiceWise1
     */
    public ViewObjectImpl getSupplierAgingInvoiceWise1() {
        return (ViewObjectImpl)findViewObject("SupplierAgingInvoiceWise1");
    }

    /**
     * Container's getter for SuppAgingInvoicewiseTrendLOV1.
     * @return SuppAgingInvoicewiseTrendLOV1
     */
    public ViewObjectImpl getSuppAgingInvoicewiseTrendLOV1() {
        return (ViewObjectImpl)findViewObject("SuppAgingInvoicewiseTrendLOV1");
    }
    public void executequeryforgraph(Integer SlocId,String Orgid){
        
        /** (05-May-2014)This method is commented because it is currently not in use. As all the graphs are not visible. */
          /*  callStoredFunction(STRING, "app.pkg_grph.fn_gen_grph_data(?,?,?,?)", new Object[] { SlocId,
                                                                                                Orgid,
                                                                                               null,
                                                                                               null });
           
           
           this.getSupplierAgingGraphVO().executeQuery();
           this.getSupplierAgingInvoiceWise1().executeQuery();
           this.getMonetFlowVO().executeQuery();
           this.getCashFlowVO().executeQuery();
           this.getBankFlowVO().executeQuery();
           this.getIncomeVO().executeQuery();
           this.getExpenceVO().executeQuery();
           this.getIncomeVsExpence().executeQuery(); */

           
       }

    /**
     * Container's getter for FinTkrForActVis1.
     * @return FinTkrForActVis1
     */
    public FinTkrForActVisVOImpl getFinTkrForActVis1() {
        return (FinTkrForActVisVOImpl)findViewObject("FinTkrForActVis1");
    }

    /**
     * Container's getter for SupplierAgingNew1.
     * @return SupplierAgingNew1
     */
    public ViewObjectImpl getSupplierAgingNew1() {
        return (ViewObjectImpl)findViewObject("SupplierAgingNew1");
    }

    /**
     * Container's getter for TopSupplierOs1.
     * @return TopSupplierOs1
     */
    public ViewObjectImpl getTopSupplierOs1() {
        return (ViewObjectImpl)findViewObject("TopSupplierOs1");
    }

    /**
     * Container's getter for PendingVou1.
     * @return PendingVou1
     */
    public PendingVouVOImpl getPendingVou1() {
        return (PendingVouVOImpl)findViewObject("PendingVou1");
    }

    /**
     * Container's getter for PendingAtOthers1.
     * @return PendingAtOthers1
     */
    public ViewObjectImpl getPendingAtOthers1() {
        return (ViewObjectImpl)findViewObject("PendingAtOthers1");
    }

    /**
     * Container's getter for UnpostedVou1.
     * @return UnpostedVou1
     */
    public ViewObjectImpl getUnpostedVou1() {
        return (ViewObjectImpl)findViewObject("UnpostedVou1");
    }
    
    
    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String msg = valueExp.getValue(elContext).toString();
        return msg;
    }
    
    protected Object callStoredFunctionForOnload(int sqlReturnType, String stmt, Object[] bindVars)  {
        CallableStatement st = null;
        try {
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.registerOutParameter(7, Types.VARCHAR);
            st.registerOutParameter(8, VARCHAR);
            st.registerOutParameter(9, VARCHAR);
            st.registerOutParameter(10, VARCHAR);
            st.executeUpdate();
            try {
                setAdd_mode(st.getObject(7).toString());
                setEdit_mode((st.getObject(8).toString()));
                setView_mode(st.getObject(9).toString());
                setDel_mode(st.getObject(10).toString());
            } catch (NullPointerException e) {
                System.out.println(e);
                e.printStackTrace();
            }
            return st.getObject(1);

        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {

                }
            }
        }
    }


    
    public Integer on_load_page()
            {  int count = 0;
            String cld_id =  resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString(); 
            Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString()); 
            String org_id =  resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"); 
            Integer usr_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString()); 
            callStoredFunctionForOnload(VARCHAR,"app.fn_get_usr_doc_access_param(?,?,?,?,?,?,?,?,?)",
                                       new Object[] { cld_id, sloc_id, org_id, 1,usr_id});
            String calledFrom =  resolvEl("#{pageFlowScope.PARAM_PG_CALLED}").toString(); 
            if(add_mode.equalsIgnoreCase("Y") == false && add_mode.equalsIgnoreCase("N") == false)
            {            count = 1;
                }
            else if(edit_mode.equalsIgnoreCase("Y") == false && edit_mode.equalsIgnoreCase("N") == false)
            {
                count = 1;
                }
            else if(view_mode.equalsIgnoreCase("Y") == false && view_mode.equalsIgnoreCase("N") == false)
            {
               count = 1; 
                }
            else if (del_mode.equalsIgnoreCase("Y") == false && del_mode.equalsIgnoreCase("N") == false)
            {
               count = 1; 
                }
             else if(calledFrom.equalsIgnoreCase("P") == false && calledFrom.equalsIgnoreCase("M") == false)
            {
               count = 1; 
                }
            Map paramMap = RequestContext.getCurrentInstance().getPageFlowScope();
            paramMap.put("PARAM_PG_ADD_MD", add_mode); 
            paramMap.put("PARAM_PG_EDIT_MD", edit_mode); 
            paramMap.put("PARAM_PG_VIEW_MD", view_mode); 
            paramMap.put("PARAM_PG_DEL_MD", del_mode); 
                   
      return count;
        }

    public void setAdd_mode(String add_mode) {
        this.add_mode = add_mode;
    }

    public String getAdd_mode() {
        return add_mode;
    }

    public void setView_mode(String view_mode) {
        this.view_mode = view_mode;
    }

    public String getView_mode() {
        return view_mode;
    }

    public void setDel_mode(String del_mode) {
        this.del_mode = del_mode;
    }

    public String getDel_mode() {
        return del_mode;
    }

    public void setEdit_mode(String edit_mode) {
        this.edit_mode = edit_mode;
    }

    public String getEdit_mode() {
        return edit_mode;
    }

    /**
     * Container's getter for AppSecUser1.
     * @return AppSecUser1
     */
    public AppSecUserVOImpl getAppSecUser1() {
        return (AppSecUserVOImpl)findViewObject("AppSecUser1");
    }

    /**
     * Container's getter for AppSecUsrMnu1.
     * @return AppSecUsrMnu1
     */
    public ViewObjectImpl getAppSecUsrMnu1() {
        return (ViewObjectImpl)findViewObject("AppSecUsrMnu1");
    }
    
    /**
     * Code to Set Parameters for TickerData VO Impl
     */
    public void setTkrDataBind(){
        System.out.println("----i am in set tkrdata Bind method----");
        
        String Cldid =  resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString(); 
        String ho_org_id =  resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString(); 
        String OrgId =  resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        Integer UsrId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString()); 
        Integer SlocId=Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());        
       // System.out.println("Cld "+cld_id+" ho "+ho_org_id+" org "+org_id);
        /** Now all data will come from single vo for Unposted,Approved, pending voucher*/
    //   setParameUnpost(Cldid, SlocId, OrgId, UsrId,ho_org_id);

        NumberOfVoucher(Cldid, SlocId, ho_org_id, OrgId, UsrId);
                
        TickerDataVOImpl dataVO1 = this.getTickerDataVO1();
        dataVO1.setNamedWhereClauseParam("BindCldId", Cldid);
        dataVO1.setNamedWhereClauseParam("BindHoOrgId", ho_org_id);
        dataVO1.setNamedWhereClauseParam("BindOrgId", OrgId);
        dataVO1.executeQuery();
   /** Moved to refresh button on landing page */
       /*  ViewObjectImpl impl = this.getTopSupplierOs1();
        impl.setNamedWhereClauseParam("CldIdBind", cld_id);
        impl.setNamedWhereClauseParam("OrgIdBind", org_id);
        impl.executeQuery();
        ViewObjectImpl curr = this.getCurrencyDesc1();
        curr.setNamedWhereClauseParam("BindCldId", cld_id);
        curr.setNamedWhereClauseParam("BindSlocId", sloc_id);
        curr.setNamedWhereClauseParam("BindOrgId", org_id);
        curr.executeQuery(); */

         ViewObjectImpl finSecTkrUsr1 = this.getFinSecTkrUsr1();
        finSecTkrUsr1.setNamedWhereClauseParam("UserIdBind", UsrId);
        finSecTkrUsr1.setNamedWhereClauseParam("OrgIdBind", OrgId);
        finSecTkrUsr1.executeQuery();


       // setParamPendingAtOthers(Cldid, SlocId, OrgId, UsrId);
        //setParamPendingVoucher(Cldid, SlocId, OrgId, UsrId);
    }

    public void NumberOfVoucher(String CldId,Integer SlocId,String ho_org_id,String OrgId,Integer UsrId){
        ViewObjectImpl number = this.getNumberOfVou1();
        if (number!= null) {
            number.setNamedWhereClauseParam("BindCldId", CldId);
            number.setNamedWhereClauseParam("BindSlocId", SlocId);
            number.setNamedWhereClauseParam("BindHoOrgId", ho_org_id);
            number.setNamedWhereClauseParam("BindOrgId", OrgId);
            number.setNamedWhereClauseParam("BindUsrId", UsrId);
            number.executeQuery();
        }

    }
    /**
     * Container's getter for LovFinTkrForSec1.
     * @return LovFinTkrForSec1
     */
    public LovFinTkrForSecVOImpl getLovFinTkrForSec1() {
        return (LovFinTkrForSecVOImpl)findViewObject("LovFinTkrForSec1");
    }

    /**
     * Container's getter for CurrencyDesc1.
     * @return CurrencyDesc1
     */
    public ViewObjectImpl getCurrencyDesc1() {
        return (ViewObjectImpl)findViewObject("CurrencyDesc1");
    }

    /**
     * Container's getter for TopCustomerOs1.
     * @return TopCustomerOs1
     */
    public TopCustomerOsVOImpl getTopCustomerOs1() {
        return (TopCustomerOsVOImpl)findViewObject("TopCustomerOs1");
    }
    
    
    public void topCustomer(){
        String cld_id =  resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString(); 
        String org_id =  resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        String hoOrgId =  resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        ViewObjectImpl customer = this.getGraphTopDebtorsVO1();
        customer.setNamedWhereClauseParam("Cld_Id", cld_id);
        customer.setNamedWhereClauseParam("Org_Id", org_id);
        customer.setNamedWhereClauseParam("Ho_Org_Id", hoOrgId);
        System.out.println("Before Customer Execute");
        customer.executeQuery();
        System.out.println("After Customer Execute");
        ViewObjectImpl curr = this.getLOVOrgCurrVO1();
        curr.setNamedWhereClauseParam("BindOrgId", org_id);
        System.out.println("Before Currency Execute");
        curr.executeQuery();
        System.out.println("After Currency Execute");
    }

    /**
     * Container's getter for BankInflowOutflow1.
     * @return BankInflowOutflow1
     */
    public ViewObjectImpl getBankInflowOutflow1() {
        return (ViewObjectImpl)findViewObject("BankInflowOutflow1");
    }
    
    public void bankInflowOoutflow(){
        
        String cld_id =  resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString(); 
        String ho_org_id =  resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString(); 
        String org_id =  resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
     //   Integer usr_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString()); 
        Integer sloc_id=Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        Integer inst=1;
        System.out.println("cld_id = "+cld_id+" ho_org_id = "+ho_org_id +" org_id = "+org_id +"sloc_id = "+sloc_id);
        ViewObjectImpl bank = this.getGraphBankFlowVO1();
        bank.setNamedWhereClauseParam("BindCldId", cld_id);
        bank.setNamedWhereClauseParam("BindHoOrgId", ho_org_id);
        bank.setNamedWhereClauseParam("BindOrgId", org_id);
//        bank.setNamedWhereClauseParam("BindSlocID", sloc_id);
//        bank.setNamedWhereClauseParam("BindAppInstID", inst);
        bank.executeQuery();
        System.out.println("after executing the method");
    }

    /**
     * Container's getter for CashInflowOutflow1.
     * @return CashInflowOutflow1
     */
    public ViewObjectImpl getCashInflowOutflow1() {
        return (ViewObjectImpl)findViewObject("CashInflowOutflow1");
    }
    
    public void cashInflowOoutflow(){
        
        String cld_id =  resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString(); 
        String ho_org_id =  resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString(); 
        String org_id =  resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
     //   Integer usr_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString()); 
        Integer sloc_id=Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        Integer inst=1;
        System.out.println("cld_id = "+cld_id+" ho_org_id = "+ho_org_id +" org_id = "+org_id +"sloc_id = "+sloc_id);
        ViewObjectImpl cash = this.getGraphCashFlowVO1();
        cash.setNamedWhereClauseParam("BindCldId", cld_id);
        cash.setNamedWhereClauseParam("BindHoOrgId", ho_org_id);
        cash.setNamedWhereClauseParam("BindOrgId", org_id);
//        cash.setNamedWhereClauseParam("BindSlocID", sloc_id);
//        cash.setNamedWhereClauseParam("BindAppInstID", inst);
        cash.executeQuery();
        System.out.println("after executing the method");
    }
    public void refreshSupplier(){
        String cld_id =  resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString(); 
        String ho_org_id =  resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString(); 
        String org_id =  resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        ViewObjectImpl impl = this.getGraphTopCreditorsVO1();
               impl.setNamedWhereClauseParam("Cld_Id", cld_id);
               impl.setNamedWhereClauseParam("Org_Id", org_id);
               impl.setNamedWhereClauseParam("Ho_Org_Id", ho_org_id);
               System.out.println("Before Supplier Execute");
               impl.executeQuery();
               System.out.println("Lenth ::::::::: " + impl.getAllRowsInRange().length);
               System.out.println("After Supplier Execute");
               ViewObjectImpl curr = this.getLOVOrgCurrVO1();
               curr.setNamedWhereClauseParam("BindOrgId", org_id);
               System.out.println("Before Currency Execute");
               curr.executeQuery();
               System.out.println("After Currency Execute");
    }
    public void setParameUnpost(String Cldid,Integer SlocId,String  OrgId, Integer UsrId,String ho_org_id){
        ViewObjectImpl unpost = this.getUnpostedVou1();
        unpost.setNamedWhereClauseParam("BindSlocId", SlocId);
        unpost.setNamedWhereClauseParam("BindCldId", Cldid);
        unpost.setNamedWhereClauseParam("BindOrgId", OrgId);
        unpost.setNamedWhereClauseParam("BindUsrId", UsrId);
        unpost.setNamedWhereClauseParam("BindHoOrgId", ho_org_id);
        unpost.executeQuery();
    }
    
    public void setParamPendingAtOthers(String Cldid,Integer SlocId,String  OrgId, Integer UsrId){
        ViewObjectImpl pend = this.getPendingAtOthers1();
        pend.setNamedWhereClauseParam("BindSlocId", SlocId);
        pend.setNamedWhereClauseParam("BindCldId", Cldid);
        pend.setNamedWhereClauseParam("BindOrgid", OrgId);
        pend.setNamedWhereClauseParam("BindUsrId", UsrId);
        pend.executeQuery();
    }
    /*  */
    public void setParamPendingVoucher(String Cldid,Integer SlocId,String  OrgId, Integer UsrId){
        ViewObjectImpl pend = this.getPendingVou1();
        pend.setNamedWhereClauseParam("BindSlocId", SlocId);
        pend.setNamedWhereClauseParam("BindCldId", Cldid);
        pend.setNamedWhereClauseParam("BindOrgId", OrgId);
        pend.setNamedWhereClauseParam("BindUsrId", UsrId);
        pend.executeQuery();
    }

    /**
     * Container's getter for OrgtrendNew1.
     * @return OrgtrendNew1
     */
    public OrgtrendNewVOImpl getOrgtrendNew1() {
        return (OrgtrendNewVOImpl)findViewObject("OrgtrendNew1");
    }

    /**
     * Container's getter for NumberOfVou1.
     * @return NumberOfVou1
     */
    public ViewObjectImpl getNumberOfVou1() {
        return (ViewObjectImpl)findViewObject("NumberOfVou1");
    }

    /**
     * Container's getter for GraphCashFlowVO1.
     * @return GraphCashFlowVO1
     */
    public ViewObjectImpl getGraphCashFlowVO1() {
        return (ViewObjectImpl) findViewObject("GraphCashFlowVO1");
    }

    /**
     * Container's getter for GraphBankFlowVO1.
     * @return GraphBankFlowVO1
     */
    public ViewObjectImpl getGraphBankFlowVO1() {
        return (ViewObjectImpl) findViewObject("GraphBankFlowVO1");
    }

    /**
     * Container's getter for GraphTopCreditorsVO1.
     * @return GraphTopCreditorsVO1
     */
    public GraphTopCreditorsVOImpl getGraphTopCreditorsVO1() {
        return (GraphTopCreditorsVOImpl) findViewObject("GraphTopCreditorsVO1");
    }

    /**
     * Container's getter for LOVOrgCurrVO1.
     * @return LOVOrgCurrVO1
     */
    public ViewObjectImpl getLOVOrgCurrVO1() {
        return (ViewObjectImpl) findViewObject("LOVOrgCurrVO1");
    }

    /**
     * Container's getter for GraphTopDebtorsVO1.
     * @return GraphTopDebtorsVO1
     */
    public ViewObjectImpl getGraphTopDebtorsVO1() {
        return (ViewObjectImpl) findViewObject("GraphTopDebtorsVO1");
    }
}
