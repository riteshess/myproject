package graphTickerApp.model.view;

import java.math.BigDecimal;

import oracle.jbo.domain.NClobDomain;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Oct 09 15:24:04 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class GraphTopCreditorsVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        OrgId {
            public Object get(GraphTopCreditorsVORowImpl obj) {
                return obj.getOrgId();
            }

            public void put(GraphTopCreditorsVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        OrgDesc {
            public Object get(GraphTopCreditorsVORowImpl obj) {
                return obj.getOrgDesc();
            }

            public void put(GraphTopCreditorsVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        CoaId {
            public Object get(GraphTopCreditorsVORowImpl obj) {
                return obj.getCoaId();
            }

            public void put(GraphTopCreditorsVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        CoaNm {
            public Object get(GraphTopCreditorsVORowImpl obj) {
                return obj.getCoaNm();
            }

            public void put(GraphTopCreditorsVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        ArAmtBs {
            public Object get(GraphTopCreditorsVORowImpl obj) {
                return obj.getArAmtBs();
            }

            public void put(GraphTopCreditorsVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        AmtOs {
            public Object get(GraphTopCreditorsVORowImpl obj) {
                return obj.getAmtOs();
            }

            public void put(GraphTopCreditorsVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(GraphTopCreditorsVORowImpl object);

        public abstract void put(GraphTopCreditorsVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int ORGDESC = AttributesEnum.OrgDesc.index();
    public static final int COAID = AttributesEnum.CoaId.index();
    public static final int COANM = AttributesEnum.CoaNm.index();
    public static final int ARAMTBS = AttributesEnum.ArAmtBs.index();
    public static final int AMTOS = AttributesEnum.AmtOs.index();

    /**
     * This is the default constructor (do not remove).
     */
    public GraphTopCreditorsVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute OrgId.
     * @return the OrgId
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Gets the attribute value for the calculated attribute OrgDesc.
     * @return the OrgDesc
     */
    public String getOrgDesc() {
        return (String) getAttributeInternal(ORGDESC);
    }

    /**
     * Gets the attribute value for the calculated attribute CoaId.
     * @return the CoaId
     */
    public Integer getCoaId() {
        return (Integer) getAttributeInternal(COAID);
    }

    /**
     * Gets the attribute value for the calculated attribute CoaNm.
     * @return the CoaNm
     */
    public String getCoaNm() {
        return (String) getAttributeInternal(COANM);
    }


    /**
     * Gets the attribute value for the calculated attribute ArAmtBs.
     * @return the ArAmtBs
     */
    public Number getArAmtBs() {
        return (Number) getAttributeInternal(ARAMTBS);
    }

    /**
     * Gets the attribute value for the calculated attribute AmtOs.
     * @return the AmtOs
     */
    public Number getAmtOs() {
        return (Number) getAttributeInternal(AMTOS);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}

