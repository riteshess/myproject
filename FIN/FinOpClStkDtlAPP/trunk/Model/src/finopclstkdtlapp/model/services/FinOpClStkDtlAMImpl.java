package finopclstkdtlapp.model.services;

import adf.utils.ebiz.EbizParams;
import adf.utils.model.ADFModelUtils;

import appCostCenterSevice.model.service.AppCostCenterServiceAMImpl;

import finopclstkdtlapp.model.services.common.FinOpClStkDtlAM;

import java.sql.SQLException;
import java.sql.Types;

import javax.faces.application.FacesMessage;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.AttributeDef;
import oracle.jbo.Row;
import oracle.jbo.client.Configuration;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewObjectImpl;

import org.apache.myfaces.trinidad.context.RequestContext;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Oct 01 11:30:24 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class FinOpClStkDtlAMImpl extends ApplicationModuleImpl implements FinOpClStkDtlAM {

    private static ADFLogger _log = ADFLogger.createADFLogger(FinOpClStkDtlAMImpl.class);
    Integer glblDocId = 60;
    Integer glblDocType = 0;

    /**
     * This is the default constructor (do not remove).
     */
    public FinOpClStkDtlAMImpl() {
    }

    /**
     * Container's getter for FinOpClStkDtl.
     * @return FinOpClStkDtl
     */
    public ViewObjectImpl getFinOpClStkDtl() {
        return (ViewObjectImpl) findViewObject("FinOpClStkDtl");
    }


    /**
     * Container's getter for FinOpClStkDtl1.
     * @return FinOpClStkDtl1
     */
    public ViewObjectImpl getFinOpClStkDtlChkDupli() {
        return (ViewObjectImpl) findViewObject("FinOpClStkDtlChkDupli");
    }

    public String chkDuplicateValues(Integer type) {
        Row currRow = this.getFinOpClStkDtl().getCurrentRow();
        if (currRow != null && currRow.getAttribute("StkDt") != null) {
            java.sql.Date currStkDt = null;
            try {
                currStkDt = ((Timestamp) currRow.getAttribute("StkDt")).dateValue();
            } catch (SQLException e) {
                _log.info("Exception in Casting");
            }
            this.getFinOpClStkDtlChkDupli().setRangeSize(-1);
            RowQualifier rq = new RowQualifier(this.getFinOpClStkDtlChkDupli());
            rq.setWhereClause("CldId='" + currRow.getAttribute("CldId") + "' and SlocId =" +
                              currRow.getAttribute("SlocId") + " and OrgId='" + currRow.getAttribute("OrgId") +
                              "' and HoOrgId='" + currRow.getAttribute("HoOrgId") + "' and PrjId='" +
                              currRow.getAttribute("PrjId") + "' and StkType=" + type);
            _log.info("RowQualifier Expr=" + rq.getExprStr());
            Row fr[] = this.getFinOpClStkDtlChkDupli().getFilteredRows(rq);
            _log.info("No. of Filtered Rows=" + fr.length);
            for (Row dupliRow : fr) {
                if (dupliRow.getAttribute("DocId") != null &&
                    dupliRow.getAttribute("DocId").toString().equals(currRow.getAttribute("DocId").toString())) {
                } else {
                    java.sql.Date rowStkDt = null;
                    try {
                        rowStkDt = ((Timestamp) dupliRow.getAttribute("StkDt")).dateValue();
                    } catch (SQLException e) {
                        _log.info("Exception in Casting");
                    }
                    _log.info("CurrRow Date=" + currStkDt + " and filterRowDate=" + rowStkDt);
                    if (currStkDt != null && rowStkDt != null && currStkDt.toString().equals(rowStkDt.toString()))
                        return "Y";
                }
            }
        }
        return "N";
    }

    public String genTxnId() {
        return (String) EbizParams.generateDocTxnId(this.getRootApplicationModule(), glblDocId);
    }

    public void executeVoOnLoad() {
        this.getFinOpClStkDtl().setNamedWhereClauseParam("cldIdBind", EbizParams.GLBL_APP_CLD_ID());
        this.getFinOpClStkDtl().setNamedWhereClauseParam("slocIdBind", EbizParams.GLBL_APP_SERV_LOC());
        this.getFinOpClStkDtl().setNamedWhereClauseParam("orgIdBind", EbizParams.GLBL_APP_USR_ORG());
        this.getFinOpClStkDtl().setNamedWhereClauseParam("hoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
        this.getFinOpClStkDtl().executeQuery();
    }


    /**
     * Method to check cost center is applicable for this Document or not.
     */

    public Boolean isCostCenterApplicable() {
        Boolean b = false;
        try {
            // App.fn_is_cost_center_present(p_cld_id,p_sloc_id,p_ho_org_id,p_org_id,p_doc_id)
            Object callF =
                ADFModelUtils.callFunction(this, new StringBuilder("App.fn_is_cost_center_present(?,?,?,?,?)"), new Object[] {
                                           EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                           EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(), glblDocId
            }, Types.INTEGER);

            Integer a = (callF == null ? 0 : (Integer) callF);
            b = (a == 1 ? true : false);
        } catch (Exception e) {
            _log.info("Error code=");
            e.printStackTrace();
        }
        return b;
    }

    /**
     * Method which will update amount present in cost center table
     */
    public void updateCostCenterAmt() {
        if (chkCcApplicableOrNot()) {
            System.out.println("Inside cost ceneter update amount method");
            Row currentRow = this.getFinOpClStkDtl().getCurrentRow();
            if (currentRow != null && currentRow.getAttribute("CcId") != null &&
                currentRow.getAttribute("ClStkAmt") != null) {
                AppCostCenterServiceAMImpl amCC = getAppAM();
                System.out.println("Inside Am after cresting object");
                if (amCC != null) {

                    declareGlblValuesForCC();

                    System.out.println("------------------ Not null");
                    Boolean amount =
                        amCC.updateCCAmount(EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                            EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                            currentRow.getAttribute("DocId").toString(), "L", glblDocId,
                                            EbizParams.GLBL_APP_USR(), currentRow.getAttribute("CcId").toString(),
                                            (Number) currentRow.getAttribute("ClStkAmt"),
                                            (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL1}"),
                                            (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL2}"),
                                            (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL3}"),
                                            (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL4}"),
                                            (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL5}"));
                    if (!amount) {
                        ADFModelUtils.showFormattedFacesMessage("Update Cost Center",
                                                                "Please Update Cost Center Values.",
                                                                FacesMessage.SEVERITY_ERROR);
                    }
                }
            }
            System.out.println("After calling Update method");
        }
    }

    /** Method used in Cost Center**/
    public AppCostCenterServiceAMImpl getAppAM() {
        String appModuleName = "appCostCenterSevice.model.service.AppCostCenterServiceAM";
        String appModuleConfig = "AppCostCenterServiceAMLocal";
        return (AppCostCenterServiceAMImpl) Configuration.createRootApplicationModule(appModuleName, appModuleConfig);
    }

    public Boolean chkCcApplicableOrNot() {
        Boolean val = false;

        ViewObjectImpl appCcDocVO1 = this.getAppCcDoc1();
        appCcDocVO1.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        appCcDocVO1.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        appCcDocVO1.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        appCcDocVO1.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        appCcDocVO1.setNamedWhereClauseParam("BindDocId", glblDocId);
        appCcDocVO1.executeQuery();

        Row[] allRowsInRange = appCcDocVO1.getAllRowsInRange();
        if (allRowsInRange.length > 0) {
            val = true;
        }

        return val;
    }

    /** ---------- To create HexDocId CCId -------------**/

    public String generateCcId() {
        String hexDocIdFromFun = "0";
        hexDocIdFromFun =
            (String) ADFModelUtils.callFunction(this.getRootApplicationModule(),
                                                new StringBuilder("APP.GET_TXN_ID_CC(?,?,?,?,?,?,?)"), new Object[] {
                                                EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                                EbizParams.GLBL_APP_USR_ORG(), EbizParams.GLBL_APP_USR(), glblDocId,

                                                84901, 0
        }, Types.VARCHAR);
        return hexDocIdFromFun;
    }

    /**
     * Method which will set Global Parameter Values and will be called before opening AppCostCenterServicesTF
     */
    public void declareGlblValuesForCC() {
        ViewObjectImpl appCcVwVO1 = this.getAppCcVw1();
        appCcVwVO1.setRangeSize(-1);

        appCcVwVO1.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        appCcVwVO1.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        appCcVwVO1.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        appCcVwVO1.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        appCcVwVO1.setNamedWhereClauseParam("BindDocId", glblDocId);

        Row currentRow = this.getFinOpClStkDtl().getCurrentRow();
        if (currentRow != null) {
            for (int i = 1; i <= 5; i++) {
                appCcVwVO1.setNamedWhereClauseParam("BindCcPos", i);
                appCcVwVO1.executeQuery();

                Row[] allRowsInRange = appCcVwVO1.getAllRowsInRange();
                if (allRowsInRange.length > 0) {
                    String columnName = null;
                    for (Row r : allRowsInRange) {
                        AttributeDef[] attributeDef = this.getFinOpClStkDtl().getAttributeDefs();

                        for (int j = 0; j < attributeDef.length; j++) {
                            if (attributeDef[j].getColumnName() != null &&
                                attributeDef[j].getColumnName().equals(r.getAttribute("DbobColNm"))) {
                                columnName = attributeDef[j].getName();
                            }
                        }
                        System.out.println("Column Name is " + columnName);

                        if (columnName != null) {

                            System.out.println("i is " + i + " Cost center Value is " +
                                               currentRow.getAttribute(columnName));
                            RequestContext.getCurrentInstance().getPageFlowScope().put("P_CC_LEVEL" + i,
                                                                                       currentRow.getAttribute(columnName));
                        }
                    }
                } else {
                    RequestContext.getCurrentInstance().getPageFlowScope().put("P_CC_LEVEL" + i, null);

                }
            }
        }
    }

    /** Method which will call cost center bean */
    public void deleteCostCenterItem() {
        if (chkCcApplicableOrNot()) {
            System.out.println("Inside delete method");
            Row currentRow = this.getFinOpClStkDtl().getCurrentRow();
            if (currentRow != null && currentRow.getAttribute("CcId") != null) {
                AppCostCenterServiceAMImpl amCC = getAppAM();
                System.out.println("Inside Am after cresting object");
                if (amCC != null) {
                    System.out.println("------------------ Not null");
                    amCC.deleteCCLines(EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                       EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                       currentRow.getAttribute("CcId").toString(), "L", glblDocId,
                                       EbizParams.GLBL_APP_USR(), currentRow.getAttribute("CcId").toString(),
                                       new Number(0), (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL1}"),
                                       (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL2}"),
                                       (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL3}"),
                                       (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL4}"),
                                       (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL5}"));

                }
            }
            System.out.println("After calling delete method");
        }
    }

    /**
     * Container's getter for AppCcDoc1.
     * @return AppCcDoc1
     */
    public ViewObjectImpl getAppCcDoc1() {
        return (ViewObjectImpl) findViewObject("AppCcDoc1");
    }

    /**
     * Container's getter for AppCcVw1.
     * @return AppCcVw1
     */
    public ViewObjectImpl getAppCcVw1() {
        return (ViewObjectImpl) findViewObject("AppCcVw1");
    }

    /**
     * Method which will push data of Cost Center from TempCostCenter to Pms Site Record CostCenter Table
     */
    public void sendDataFromTempCcToPmsSiteRcdCc() {
        if (chkCcApplicableOrNot()) {
            ADFModelUtils.callFunction(this.getRootApplicationModule(),
                                       new StringBuilder("APP.FN_SAVE_COST_CENTER(?,?,?,?,?,?,?,?)"), new Object[] {
                                       EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                       EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(), glblDocId, "FIN",
                                       "FIN$OP$CL$STK$COST$CENTER",
                                       this.getFinOpClStkDtl().getCurrentRow().getAttribute("DocId")
            }, Types.VARCHAR);
        }
    }


    public String chkIfTxnAllowd(java.sql.Date txnDate) {
        if (txnDate != null) {
        } else {
            if (this.getFinOpClStkDtl().getCurrentRow() != null &&
                this.getFinOpClStkDtl().getCurrentRow().getAttribute("StkDt") != null)
                try {
                    txnDate = ((Timestamp) this.getFinOpClStkDtl().getCurrentRow().getAttribute("StkDt")).dateValue();
                } catch (SQLException e) {
                    System.out.println("Eror on cast");
                }
            else
                txnDate = new java.sql.Date(System.currentTimeMillis());
        }
        return (String) ADFModelUtils.callFunction(this.getRootApplicationModule(),
                                                   new StringBuilder("APP.fn_get_mnthly_txn_alw(?,?,?,?)"), new Object[] {
                                                   EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                                   EbizParams.GLBL_APP_SERV_LOC(), txnDate
    }, Types.VARCHAR);
    }
}

