package currencyconversion.model.module;

import adf.utils.bean.StaticValue;
import adf.utils.ebiz.EbizParams;

import adf.utils.model.ADFModelUtils;

import currencyconversion.model.module.common.CurrencyConversionAM;
import currencyconversion.model.views.AppCurrConvVOImpl;
import currencyconversion.model.views.LovCcIdTxnVOImpl;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.Map;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.apache.myfaces.trinidad.context.RequestContext;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Apr 21 17:46:30 IST 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CurrencyConversionAMImpl extends ApplicationModuleImpl implements CurrencyConversionAM {
    /**
     * This is the default constructor (do not remove).
     */

    public static int VARCHAR = Types.VARCHAR;
    String add_mode = null;
    String edit_mode = null;
    String view_mode = null;
    String del_mode = null;

    public CurrencyConversionAMImpl() {
    }

    /**
     * Container's getter for AppCurrConv1.
     * @return AppCurrConv1
     */
    public AppCurrConvVOImpl getAppCurrConv1() {
        return (AppCurrConvVOImpl) findViewObject("AppCurrConv1");
    }

    /**
     * Container's getter for Country1.
     * @return Country1
     */
    public ViewObjectImpl getCountry1() {
        return (ViewObjectImpl) findViewObject("Country1");
    }

    /**
     * Container's getter for Currency1.
     * @return Currency1
     */
    public ViewObjectImpl getCurrency1() {
        return (ViewObjectImpl) findViewObject("Currency1");
    }


    public void setAdd_mode(String add_mode) {
        this.add_mode = add_mode;
    }

    public String getAdd_mode() {
        return add_mode;
    }

    public void setEdit_mode(String edit_mode) {
        this.edit_mode = edit_mode;
    }

    public String getEdit_mode() {
        return edit_mode;
    }

    public void setView_mode(String view_mode) {
        this.view_mode = view_mode;
    }

    public String getView_mode() {
        return view_mode;
    }

    public void setDel_mode(String del_mode) {
        this.del_mode = del_mode;
    }

    public String getDel_mode() {
        return del_mode;
    }

    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String msg = valueExp.getValue(elContext).toString();
        return msg;
    }

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.registerOutParameter(7, VARCHAR);
            st.registerOutParameter(8, VARCHAR);
            st.registerOutParameter(9, VARCHAR);
            st.registerOutParameter(10, VARCHAR);
            st.executeUpdate();
            try {
                setAdd_mode(st.getObject(7).toString());
                setEdit_mode((st.getObject(8).toString()));
                setView_mode(st.getObject(9).toString());
                setDel_mode(st.getObject(10).toString());
            } catch (NullPointerException e) {
                System.out.println(e);
                e.printStackTrace();
            }
            return st.getObject(1);

        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {

                }
            }
        }
    }


    public Integer on_load_page() {
        int count = 0;
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        Integer usr_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        callStoredFunction(VARCHAR, "APP.fn_get_usr_doc_access_param(?,?,?,?,?,?,?,?,?)", new Object[] {
                           cld_id, sloc_id, org_id, 35, usr_id
        });
        String calledFrom = resolvEl("#{pageFlowScope.PARAM_PG_CALLED}").toString();
        if (add_mode.equalsIgnoreCase("Y") == false && add_mode.equalsIgnoreCase("N") == false) {
            count = 1;
        } else if (edit_mode.equalsIgnoreCase("Y") == false && edit_mode.equalsIgnoreCase("N") == false) {
            count = 1;
        } else if (view_mode.equalsIgnoreCase("Y") == false && view_mode.equalsIgnoreCase("N") == false) {
            count = 1;
        } else if (del_mode.equalsIgnoreCase("Y") == false && del_mode.equalsIgnoreCase("N") == false) {
            count = 1;
        } else if (calledFrom.equalsIgnoreCase("P") == false && calledFrom.equalsIgnoreCase("M") == false) {
            count = 1;
        }
        Map paramMap = RequestContext.getCurrentInstance().getPageFlowScope();
        paramMap.put("PARAM_PG_ADD_MD", add_mode);
        paramMap.put("PARAM_PG_EDIT_MD", edit_mode);
        paramMap.put("PARAM_PG_VIEW_MD", view_mode);
        paramMap.put("PARAM_PG_DEL_MD", del_mode);
        return count;
    }

    /**
     * Container's getter for SrchTrns1.
     * @return SrchTrns1
     */
    public ViewObjectImpl getSrchTrns1() {
        return (ViewObjectImpl) findViewObject("SrchTrns1");
    }

    /**
     * Container's getter for LovCcId1.
     * @return LovCcId1
     */
    public ViewObjectImpl getLovCcId1() {
        return (ViewObjectImpl) findViewObject("LovCcId1");
    }


    public void searchAction() {
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        String ho_org_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        String org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        ViewObjectImpl srchVo = this.getSrchTrns1();
        Row srchRow = srchVo.getCurrentRow();
        AppCurrConvVOImpl CurrVo = this.getAppCurrConv1();
        CurrVo.setNamedWhereClauseParam("BindCldId", cld_id);
        CurrVo.setNamedWhereClauseParam("BindHoOrgId", ho_org_id);
        CurrVo.setNamedWhereClauseParam("BindOrgId", org_id);
        CurrVo.setNamedWhereClauseParam("BindCurrId", srchRow.getAttribute("CurrencyTo"));
        CurrVo.setNamedWhereClauseParam("BindCurrIdTxn", srchRow.getAttribute("CurrencyFrom"));
        CurrVo.setNamedWhereClauseParam("BindEffDt", srchRow.getAttribute("EffDate"));
        CurrVo.setNamedWhereClauseParam("BindEffFromDt", srchRow.getAttribute("transEffToDate"));
        CurrVo.executeQuery();
    }


    public void resetAction() {

        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        String ho_org_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        AppCurrConvVOImpl CurrVo = this.getAppCurrConv1();
        CurrVo.setNamedWhereClauseParam("BindCldId", cld_id);
        CurrVo.setNamedWhereClauseParam("BindCurrId", null);
        CurrVo.setNamedWhereClauseParam("BindCurrIdTxn", null);
        CurrVo.setNamedWhereClauseParam("BindEffDt", null);
        CurrVo.setNamedWhereClauseParam("BindHoOrgId", ho_org_id);
        CurrVo.setNamedWhereClauseParam("BindOrgId", null);
        CurrVo.executeQuery();
        this.getSrchTrns1().executeQuery();
    }

    public void applySelection(Integer currId) {


    }

    public void setBindVar() {
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        String ho_org_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        String org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        AppCurrConvVOImpl CurrVo = this.getAppCurrConv1();
        CurrVo.setNamedWhereClauseParam("BindCldId", cld_id);
        CurrVo.setNamedWhereClauseParam("BindHoOrgId", ho_org_id);
        CurrVo.setNamedWhereClauseParam("BindOrgId", org_id);
        CurrVo.executeQuery();
        AppCurrConvVOImpl CurrConvVO = this.getAppCurrConvVO();
        CurrConvVO.setNamedWhereClauseParam("BindCldId", cld_id);
        CurrConvVO.setNamedWhereClauseParam("BindHoOrgId", ho_org_id);
        CurrConvVO.setNamedWhereClauseParam("BindOrgId", org_id);
        CurrConvVO.executeQuery();
    }

    /**
     * Container's getter for LovCcIdTxn1.
     * @return LovCcIdTxn1
     */
    public LovCcIdTxnVOImpl getLovCcIdTxnVO() {
        return (LovCcIdTxnVOImpl) findViewObject("LovCcIdTxnVO");
    }

    public void setCurrIdTxn() {
        Integer currId = 73;
        AppCurrConvVOImpl appCurrConvVO = this.getAppCurrConv1();
        ViewObjectImpl ccIdVO = this.getLovCcId1();

        ccIdVO.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        ccIdVO.setNamedWhereClauseParam("BindSlocid", EbizParams.GLBL_APP_SERV_LOC());
        ccIdVO.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        ccIdVO.executeQuery();
        Row[] row = ccIdVO.getFilteredRows("OrgId", EbizParams.GLBL_APP_USR_ORG());
        if (row.length > 0)
            currId = Integer.parseInt(row[0].getAttribute("CurrId").toString());

        appCurrConvVO.getCurrentRow().setAttribute("CcCurrId", currId);

    }

    public String setBuyOrCellCurrVal(Integer currIdTxn) {
        AppCurrConvVOImpl appCurrConvVO = this.getAppCurrConv1();
        Row currRow = appCurrConvVO.getCurrentRow();
        Integer currId = Integer.parseInt(currRow.getAttribute("CcCurrId").toString());
        if (currId.intValue() == currIdTxn.intValue()) {
            currRow.setAttribute("CcBuy", new Number(1));
            currRow.setAttribute("CcSell", new Number(1));
            return "Y";
        } else {
            currRow.setAttribute("CcBuy", new Number(0));
            currRow.setAttribute("CcSell", new Number(0));
            return "N";
        }
    }

    public void setSpecificBuyCurr(Number baseBuyCurr) {
        Number specificBuyCurr = new Number(0);
        AppCurrConvVOImpl appCurrConvVO = this.getAppCurrConv1();
        Row currRow = appCurrConvVO.getCurrentRow();
        if (baseBuyCurr != null && (baseBuyCurr.compareTo(new Number(0)) > 0))
            specificBuyCurr = new Number(1).divide(baseBuyCurr);
        currRow.setAttribute("CcBuyRev",
                             specificBuyCurr.round(Integer.parseInt(EbizParams.GLBL_AMT_DIGIT().toString())));

    }

    public void setSpecificSellCurr(Number baseSellCurr) {
        Number specificSellCurr = new Number(0);
        AppCurrConvVOImpl appCurrConvVO = this.getAppCurrConv1();
        Row currRow = appCurrConvVO.getCurrentRow();
        if (baseSellCurr != null && (baseSellCurr.compareTo(new Number(0)) > 0))
            specificSellCurr = new Number(1).divide(baseSellCurr);
        currRow.setAttribute("CcSellRev",
                             specificSellCurr.round(Integer.parseInt(EbizParams.GLBL_AMT_DIGIT().toString())));
    }

    public String checkForDupliCCDate(Date currEffDt) {
        Integer currTxnId = 0;
        HashSet dtset = new HashSet();
        ViewObjectImpl appCurrConvVO = this.getAppCurrConvVO();
        AppCurrConvVOImpl appCurrConv1 = this.getAppCurrConv1();
        appCurrConvVO.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        appCurrConvVO.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        appCurrConvVO.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        appCurrConvVO.executeQuery();
        RowSetIterator itr = appCurrConvVO.createRowSetIterator(null);
        Row currRow = appCurrConv1.getCurrentRow();
        if (currRow.getAttribute("CcCurrIdTxn") != null)
            currTxnId = Integer.parseInt(currRow.getAttribute("CcCurrIdTxn").toString());

        while (itr.hasNext()) {
            Row row = itr.next();
            if (!(row.getKey().equals(currRow.getKey()))) {
                if (currTxnId.intValue() == Integer.parseInt(row.getAttribute("CcCurrIdTxn").toString()))
                    dtset.add(row.getAttribute("CcEffDate"));
            }
        }
        if (dtset.size() > 0) {
            Object obj = Collections.max(dtset);
            if (dtset.contains(currEffDt))
                return "Y";
            else if (currEffDt.toString().compareTo(obj.toString()) < 0) {
                return "E";
            } else
                return "N";
        } else
            return "N";

        /* Object maxDt =
            ADFModelUtils.callFunction(this.getRootApplicationModule(),
                                       new StringBuilder("APP.fn_get_eff_dt_for_curr_conv(?,?,?,?,?,?)"), new Object[] {
                                       EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                       EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                       Integer.parseInt(currRow.getAttribute("CcCurrIdTxn").toString()),
                                       Integer.parseInt(currRow.getAttribute("CcCurrId").toString())
        }, Types.DATE);
        System.out.println("maximum date iss==" + maxDt); */
    }

    public String checkDplicateBaseAndBuyingCurr() {
        ViewObjectImpl appCurrConVO = this.getAppCurrConvVO();
        ViewObjectImpl appCurrCon1VO = this.getAppCurrConv1();
        appCurrConVO.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        appCurrConVO.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        appCurrConVO.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        appCurrConVO.executeQuery();
        Row currRow = appCurrCon1VO.getCurrentRow();
        RowSetIterator itr = appCurrConVO.createRowSetIterator(null);
        HashSet<Object> currset = new HashSet<Object>();
        while (itr.hasNext()) {
            Row row = itr.next();
            if (!(row.getKey().equals(currRow.getKey())))
                currset.add(row.getAttribute("CcCurrIdTxn"));
        }
        if (Integer.parseInt(currRow.getAttribute("CcCurrId").toString()) ==
            Integer.parseInt(currRow.getAttribute("CcCurrIdTxn").toString())) {
            if (currset.contains(currRow.getAttribute("CcCurrId")))
                return "N";
            else
                return "Y";
        } else
            return "Y";
    }

    public String checkEditAllow() {
        Object currEffDt = null;
        ArrayList maxEffDt = new ArrayList();
        AppCurrConvVOImpl appCurrConv1VO = this.getAppCurrConv1();
        ViewObjectImpl appCurrConvVO = this.getAppCurrConvVO();
        RowSetIterator itr = appCurrConvVO.createRowSetIterator(null);
        Row currentRow = appCurrConv1VO.getCurrentRow();
        if (currentRow.getAttribute("CcEffDate") != null)
            currEffDt = currentRow.getAttribute("CcEffDate");
        while (itr.hasNext()) {
            Row row = itr.next();
            if (!(row.getKey().equals(currentRow.getKey()))) {
                if (Integer.parseInt(row.getAttribute("CcCurrIdTxn").toString()) ==
                    Integer.parseInt(currentRow.getAttribute("CcCurrIdTxn").toString())) {
                    maxEffDt.add(row.getAttribute("CcEffDate"));
                }
            }
        }
        if (maxEffDt.size() > 0) {
            Object ob = Collections.max(maxEffDt);
            if (currEffDt.toString().compareTo(ob.toString()) < 0)
                return "N";
                else
                return "Y";
        } else
            return "Y";
    }

    /**
     * Container's getter for AppCurrConv2.
     * @return AppCurrConv2
     */
    public AppCurrConvVOImpl getAppCurrConvVO() {
        return (AppCurrConvVOImpl) findViewObject("AppCurrConvVO");
    }

    public String getValueFromAppProfile(String mode) {
        ViewObjectImpl appPrfVO = this.getAppPrfVO();
        Row[] allRowsInRange = appPrfVO.getAllRowsInRange();
        if (allRowsInRange.length > 0) {
            if (mode.toString().equalsIgnoreCase("mul"))
                return allRowsInRange[0].getAttribute("AlwMultiCurrConvOnDt").toString();
            if (mode.toString().equalsIgnoreCase("rep"))
                return allRowsInRange[0].getAttribute("AlwRepCurrConvCntryOrg").toString();
        } else {
            if (mode.toString().equalsIgnoreCase("mul"))
                return "N";
            if (mode.toString().equalsIgnoreCase("rep"))
                return "Y";
        }
        return "N";
    }

    public void replicateToAllOrganization() {
        this.getDBTransaction().commit();
        AppCurrConvVOImpl appCurrConv = this.getAppCurrConv1();
        Row currentRow = appCurrConv.getCurrentRow();
        Integer baseCurr = Integer.parseInt(currentRow.getAttribute("CcCurrId").toString());
        Integer txnCurr = Integer.parseInt(currentRow.getAttribute("CcCurrIdTxn").toString());
        Timestamp convDate = (Timestamp) currentRow.getAttribute("CcEffDate");
          ADFModelUtils.callFunction(this, new StringBuilder("APP.fn_rep_curr_conv_to_org(?,?,?,?,?,?)"), new Object[] {
                                   EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_HO_ORG_ID(),
                                   EbizParams.GLBL_APP_USR_ORG(), baseCurr, txnCurr,
                                   StaticValue.getTruncatedDt(convDate)
        }, VARCHAR);
        }

    /**
     * Container's getter for AppPrfVO1.
     * @return AppPrfVO1
     */
    public ViewObjectImpl getAppPrfVO() {
        return (ViewObjectImpl) findViewObject("AppPrfVO");
    }
}

