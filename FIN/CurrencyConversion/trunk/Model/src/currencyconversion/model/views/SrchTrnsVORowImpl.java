package currencyconversion.model.views;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.RowSet;
import oracle.jbo.domain.Date;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Jan 04 15:13:34 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SrchTrnsVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Dummy {
            public Object get(SrchTrnsVORowImpl obj) {
                return obj.getDummy();
            }

            public void put(SrchTrnsVORowImpl obj, Object value) {
                obj.setDummy((String)value);
            }
        }
        ,
        CurrencyFrom {
            public Object get(SrchTrnsVORowImpl obj) {
                return obj.getCurrencyFrom();
            }

            public void put(SrchTrnsVORowImpl obj, Object value) {
                obj.setCurrencyFrom((Integer)value);
            }
        }
        ,
        CurrencyTo {
            public Object get(SrchTrnsVORowImpl obj) {
                return obj.getCurrencyTo();
            }

            public void put(SrchTrnsVORowImpl obj, Object value) {
                obj.setCurrencyTo((Integer)value);
            }
        }
        ,
        EffDate {
            public Object get(SrchTrnsVORowImpl obj) {
                return obj.getEffDate();
            }

            public void put(SrchTrnsVORowImpl obj, Object value) {
                obj.setEffDate((Date)value);
            }
        }
        ,
        HoOrgId {
            public Object get(SrchTrnsVORowImpl obj) {
                return obj.getHoOrgId();
            }

            public void put(SrchTrnsVORowImpl obj, Object value) {
                obj.setHoOrgId((String)value);
            }
        }
        ,
        CldId {
            public Object get(SrchTrnsVORowImpl obj) {
                return obj.getCldId();
            }

            public void put(SrchTrnsVORowImpl obj, Object value) {
                obj.setCldId((String)value);
            }
        }
        ,
        LovCcIdVO1 {
            public Object get(SrchTrnsVORowImpl obj) {
                return obj.getLovCcIdVO1();
            }

            public void put(SrchTrnsVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(SrchTrnsVORowImpl object);

        public abstract void put(SrchTrnsVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int DUMMY = AttributesEnum.Dummy.index();
    public static final int CURRENCYFROM = AttributesEnum.CurrencyFrom.index();
    public static final int CURRENCYTO = AttributesEnum.CurrencyTo.index();
    public static final int EFFDATE = AttributesEnum.EffDate.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int LOVCCIDVO1 = AttributesEnum.LovCcIdVO1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public SrchTrnsVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute Dummy.
     * @return the Dummy
     */
    public String getDummy() {
        return (String) getAttributeInternal(DUMMY);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Dummy.
     * @param value value to set the  Dummy
     */
    public void setDummy(String value) {
        setAttributeInternal(DUMMY, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CurrencyFrom.
     * @return the CurrencyFrom
     */
    public Integer getCurrencyFrom() {
        return (Integer) getAttributeInternal(CURRENCYFROM);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CurrencyFrom.
     * @param value value to set the  CurrencyFrom
     */
    public void setCurrencyFrom(Integer value) {
        setAttributeInternal(CURRENCYFROM, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CurrencyTo.
     * @return the CurrencyTo
     */
    public Integer getCurrencyTo() {
        return (Integer) getAttributeInternal(CURRENCYTO);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CurrencyTo.
     * @param value value to set the  CurrencyTo
     */
    public void setCurrencyTo(Integer value) {
        setAttributeInternal(CURRENCYTO, value);
    }

    /**
     * Gets the attribute value for the calculated attribute EffDate.
     * @return the EffDate
     */
    public Date getEffDate() {
        return (Date) getAttributeInternal(EFFDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute EffDate.
     * @param value value to set the  EffDate
     */
    public void setEffDate(Date value) {
        setAttributeInternal(EFFDATE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute HoOrgId.
     * @return the HoOrgId
     */
    public String getHoOrgId() {
        String hoOrgId=(String)resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
                if(hoOrgId != null)
                {return hoOrgId;}
        return (String) getAttributeInternal(HOORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute HoOrgId.
     * @param value value to set the  HoOrgId
     */
    public void setHoOrgId(String value) {
        setAttributeInternal(HOORGID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CldId.
     * @return the CldId
     */
    public String getCldId() {
        String cldId=(String)resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
               if(cldId != null)
               {return cldId;}
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CldId.
     * @param value value to set the  CldId
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovCcIdVO1.
     */
    public RowSet getLovCcIdVO1() {
        return (RowSet)getAttributeInternal(LOVCCIDVO1);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
    
    public Object resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        Object Message = valueExp.getValue(elContext);
        return Message;
    }
}
