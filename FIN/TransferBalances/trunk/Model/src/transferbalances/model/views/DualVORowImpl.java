package transferbalances.model.views;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.ApplicationModule;
import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Dec 10 12:53:59 PST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DualVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        Cldid {
            public Object get(DualVORowImpl obj) {
                return obj.getCldid();
            }

            public void put(DualVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        Slocid {
            public Object get(DualVORowImpl obj) {
                return obj.getSlocid();
            }

            public void put(DualVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        Hoorgid {
            public Object get(DualVORowImpl obj) {
                return obj.getHoorgid();
            }

            public void put(DualVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        Orgid {
            public Object get(DualVORowImpl obj) {
                return obj.getOrgid();
            }

            public void put(DualVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        Usrid {
            public Object get(DualVORowImpl obj) {
                return obj.getUsrid();
            }

            public void put(DualVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        Fyid {
            public Object get(DualVORowImpl obj) {
                return obj.getFyid();
            }

            public void put(DualVORowImpl obj, Object value) {
                obj.setFyid((Integer) value);
            }
        }
        ,
        Asondate {
            public Object get(DualVORowImpl obj) {
                return obj.getAsondate();
            }

            public void put(DualVORowImpl obj, Object value) {
                obj.setAsondate((Date) value);
            }
        }
        ,
        Trxdate {
            public Object get(DualVORowImpl obj) {
                return obj.getTrxdate();
            }

            public void put(DualVORowImpl obj, Object value) {
                obj.setTrxdate((Date) value);
            }
        }
        ,
        Narration {
            public Object get(DualVORowImpl obj) {
                return obj.getNarration();
            }

            public void put(DualVORowImpl obj, Object value) {
                obj.setNarration((String) value);
            }
        }
        ,
        IEClosingBal {
            public Object get(DualVORowImpl obj) {
                return obj.getIEClosingBal();
            }

            public void put(DualVORowImpl obj, Object value) {
                obj.setIEClosingBal((Number) value);
            }
        }
        ,
        IEClosingBalType {
            public Object get(DualVORowImpl obj) {
                return obj.getIEClosingBalType();
            }

            public void put(DualVORowImpl obj, Object value) {
                obj.setIEClosingBalType((String) value);
            }
        }
        ,
        ALClosingBal {
            public Object get(DualVORowImpl obj) {
                return obj.getALClosingBal();
            }

            public void put(DualVORowImpl obj, Object value) {
                obj.setALClosingBal((Number) value);
            }
        }
        ,
        ALClosingBalType {
            public Object get(DualVORowImpl obj) {
                return obj.getALClosingBalType();
            }

            public void put(DualVORowImpl obj, Object value) {
                obj.setALClosingBalType((String) value);
            }
        }
        ,
        LovOrgFyVO1 {
            public Object get(DualVORowImpl obj) {
                return obj.getLovOrgFyVO1();
            }

            public void put(DualVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(DualVORowImpl object);

        public abstract void put(DualVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }

    public static Object resolveElExp(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        Object msg = valueExp.getValue(elContext);
        return msg;
    }


    public static final int CLDID = AttributesEnum.Cldid.index();
    public static final int SLOCID = AttributesEnum.Slocid.index();
    public static final int HOORGID = AttributesEnum.Hoorgid.index();
    public static final int ORGID = AttributesEnum.Orgid.index();
    public static final int USRID = AttributesEnum.Usrid.index();
    public static final int FYID = AttributesEnum.Fyid.index();
    public static final int ASONDATE = AttributesEnum.Asondate.index();
    public static final int TRXDATE = AttributesEnum.Trxdate.index();
    public static final int NARRATION = AttributesEnum.Narration.index();
    public static final int IECLOSINGBAL = AttributesEnum.IEClosingBal.index();
    public static final int IECLOSINGBALTYPE = AttributesEnum.IEClosingBalType.index();
    public static final int ALCLOSINGBAL = AttributesEnum.ALClosingBal.index();
    public static final int ALCLOSINGBALTYPE = AttributesEnum.ALClosingBalType.index();
    public static final int LOVORGFYVO1 = AttributesEnum.LovOrgFyVO1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public DualVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute Cldid.
     * @return the Cldid
     */
    public String getCldid() {
        if(resolveElExp("#{pageFlowScope.GLBL_APP_CLD_ID}")!=null)
            return resolveElExp("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Gets the attribute value for the calculated attribute Slocid.
     * @return the Slocid
     */
    public Integer getSlocid() {
        if(resolveElExp("#{pageFlowScope.GLBL_APP_SERV_LOC}")!=null)
            return Integer.parseInt(resolveElExp("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Gets the attribute value for the calculated attribute Hoorgid.
     * @return the Hoorgid
     */
    public String getHoorgid() {
        if(resolveElExp("#{pageFlowScope.GLBL_HO_ORG_ID}")!=null)
            return resolveElExp("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        return (String) getAttributeInternal(HOORGID);
    }

    /**
     * Gets the attribute value for the calculated attribute Orgid.
     * @return the Orgid
     */
    public String getOrgid() {
        if(resolveElExp("#{pageFlowScope.GLBL_APP_USR_ORG}")!=null)
            return resolveElExp("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Gets the attribute value for the calculated attribute Usrid.
     * @return the Usrid
     */
    public Integer getUsrid() {
        if(resolveElExp("#{pageFlowScope.GLBL_APP_USR}")!=null)
            return Integer.parseInt(resolveElExp("#{pageFlowScope.GLBL_APP_USR}").toString());
        return (Integer) getAttributeInternal(USRID);
    }

    /**
     * Gets the attribute value for the calculated attribute Fyid.
     * @return the Fyid
     */
    public Integer getFyid() {
        return (Integer) getAttributeInternal(FYID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Fyid.
     * @param value value to set the  Fyid
     */
    public void setFyid(Integer value) {
        setAttributeInternal(FYID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Asondate.
     * @return the Asondate
     */
    public Date getAsondate() {
        return (Date) getAttributeInternal(ASONDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Asondate.
     * @param value value to set the  Asondate
     */
    public void setAsondate(Date value) {
        setAttributeInternal(ASONDATE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Trxdate.
     * @return the Trxdate
     */
    public Date getTrxdate() {
        return (Date) getAttributeInternal(TRXDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Trxdate.
     * @param value value to set the  Trxdate
     */
    public void setTrxdate(Date value) {
        setAttributeInternal(TRXDATE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Narration.
     * @return the Narration
     */
    public String getNarration() {
        return (String) getAttributeInternal(NARRATION);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Narration.
     * @param value value to set the  Narration
     */
    public void setNarration(String value) {
        setAttributeInternal(NARRATION, value);
    }

    /**
     * Gets the attribute value for the calculated attribute IEClosingBal.
     * @return the IEClosingBal
     */
    public Number getIEClosingBal() {
        return (Number) getAttributeInternal(IECLOSINGBAL);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute IEClosingBal.
     * @param value value to set the  IEClosingBal
     */
    public void setIEClosingBal(Number value) {
        setAttributeInternal(IECLOSINGBAL, value);
    }

    /**
     * Gets the attribute value for the calculated attribute IEClosingBalType.
     * @return the IEClosingBalType
     */
    public String getIEClosingBalType() {
        return (String) getAttributeInternal(IECLOSINGBALTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute IEClosingBalType.
     * @param value value to set the  IEClosingBalType
     */
    public void setIEClosingBalType(String value) {
        setAttributeInternal(IECLOSINGBALTYPE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ALClosingBal.
     * @return the ALClosingBal
     */
    public Number getALClosingBal() {
        /*     ApplicationModule am = getApplicationModule();
        ViewObject al = am.findViewObject("AssetsLiability");
       // ViewObjectImpl al = getAssetsLiability();
        RowSetIterator rsi = al.createRowSetIterator(null);
        Number netAmt=new Number(0);
        while(rsi.hasNext()){
            Row next = rsi.next();
            System.out.println("netAmt  in al  = "+netAmt);
            if(next.getAttribute("TransferredBalance")!=null){
                if (next.getAttribute("TrafBalType")!=null && next.getAttribute("TrafBalType").equals("Cr")) {
                    netAmt = netAmt.add((Number) next.getAttribute("TransferredBalance"));
                }else if (next.getAttribute("TrafBalType")!=null && next.getAttribute("TrafBalType").equals("Dr")) {
                    netAmt = netAmt.subtract((Number) next.getAttribute("TransferredBalance"));
                }
            }
            
        }
        rsi.closeRowSetIterator();
        return netAmt; */
        return (Number) getAttributeInternal(ALCLOSINGBAL);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ALClosingBal.
     * @param value value to set the  ALClosingBal
     */
    public void setALClosingBal(Number value) {
        setAttributeInternal(ALCLOSINGBAL, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ALClosingBalType.
     * @return the ALClosingBalType
     */
    public String getALClosingBalType() {
        if(getALClosingBal().compareTo(0)<0){
            return "Cr";
        }else
            return "Dr";
       // return (String) getAttributeInternal(ALCLOSINGBALTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ALClosingBalType.
     * @param value value to set the  ALClosingBalType
     */
    public void setALClosingBalType(String value) {
        setAttributeInternal(ALCLOSINGBALTYPE, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovOrgFyVO1.
     */
    public RowSet getLovOrgFyVO1() {
        return (RowSet) getAttributeInternal(LOVORGFYVO1);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}

