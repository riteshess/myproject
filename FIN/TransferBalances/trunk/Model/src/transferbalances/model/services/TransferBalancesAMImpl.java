package transferbalances.model.services;

import adf.utils.bean.ADFBeanUtils;
import adf.utils.ebiz.EbizParams;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import oracle.binding.BindingContainer;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.uicli.binding.JUCtrlListBinding;

import transferbalances.model.services.common.TransferBalancesAM;
import transferbalances.model.views.LovOrgFyVOImpl;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Aug 11 12:41:04 IST 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TransferBalancesAMImpl extends ApplicationModuleImpl implements TransferBalancesAM {
    /**
     * This is the default constructor (do not remove).
     */
    public TransferBalancesAMImpl() {
    }

    /**
     * Container's getter for IncomeExpence.
     * @return IncomeExpence
     */
    public ViewObjectImpl getIncomeExpence() {
        return (ViewObjectImpl) findViewObject("IncomeExpence");
    }

    /**
     * Container's getter for AssetsLiability.
     * @return AssetsLiability
     */
    public ViewObjectImpl getAssetsLiability() {
        return (ViewObjectImpl) findViewObject("AssetsLiability");
    }
    private int STRING = Types.VARCHAR;
    private int NUMBER = Types.NUMERIC;

    /**
     * @param userid user id
     * @param OrgId organisation id
     * @param slocid server location id
     * @param docId document id (in case of temporary voucher it is 55 )
     * @return next voucher id
     */
    public String callmaxno(Integer userid, String OrgId, Integer slocid, Integer docId) {
        /** call db function "pkg_app.get_txn_id" */
        return (String) callStoredFunction(STRING, "app.pkg_app.get_txn_id(?,?,?,?)", new Object[] {
                                           userid, OrgId, slocid, docId
    });
    }

    public void generateDocNo(String vouId, Integer usrId, Date vouDt) {

        callStoredFunction(STRING, "app.pkg_app.ins_disp_doc_tab (?,?,?)", new Object[] { vouId, usrId, vouDt });

    }

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.executeUpdate();
            return st.getObject(1);
        } catch (SQLException e) {
            int end = e.getMessage().indexOf("\n");

            throw new JboException(e.getMessage().substring(11, end));
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {

                }
            }
        }
    }

    protected Object callStoredFunctionForExisttest(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.executeUpdate();
            return st.getObject(1);
        } catch (SQLException e) {
            int end = e.getMessage().indexOf("\n");

            throw new JboException(e.getMessage().substring(11, end));
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {

                }
            }
        }
    }


    /**
     * Container's getter for LovOrgFy.
     * @return LovOrgFy
     */
    public LovOrgFyVOImpl getLovOrgFy() {
        return (LovOrgFyVOImpl) findViewObject("LovOrgFy");
    }

    public Number getClosingBalances(Integer P_SLOC_ID, String P_ORG_ID, Date P_ASON_DT, Integer P_COA_ID,
                                     String P_INC_TEMP, String P_INC_POST, String P_INC_OP_BAL) {
        System.out.println(P_SLOC_ID + " " + P_ORG_ID + " " + P_ASON_DT + " " + P_COA_ID + " " + P_INC_TEMP + " " +
                           P_INC_POST + " " + P_INC_OP_BAL);
        /*  System.out.println(callStoredFunction(NUMBER, "PKG_FIN.GET_COA_CL_BAL_ASONDT(?,?,?,?,?,?,?)",
                                          new Object[] { P_SLOC_ID, P_ORG_ID, P_ASON_DT, P_COA_ID, P_INC_TEMP,
                                                         P_INC_POST, P_INC_OP_BAL })); */
        return (Number) callStoredFunction(NUMBER, "PKG_FIN.GET_COA_CL_BAL_ASONDT(?,?,?,?,?,?,?)", new Object[] {
                                           P_SLOC_ID, P_ORG_ID, P_ASON_DT, P_COA_ID, P_INC_TEMP, P_INC_POST,
                                           P_INC_OP_BAL
    });
    }


    /**
     * Container's getter for FinPrdClose1.
     * @return FinPrdClose1
     */
    public ViewObjectImpl getFinPrdClose1() {
        return (ViewObjectImpl) findViewObject("FinPrdClose1");
    }
    private Date startDt = null;
    private Date endDate = null;

    public void filterFinancialPrd(String OrgId, String CldId, String HoOrgId, Integer SlocId) {

        System.out.println("CldId = " + CldId + " OrgId = " + OrgId);
        ViewObjectImpl prd = getFinPrdClose1();
        ViewObjectImpl vouInTvouVO = this.gettotalVouInTvouVO();
        ViewObjectImpl vouInBatchVO = this.getVouInBatchVO();
        ViewObjectImpl vouInPdcVO = this.getVouInPdcVO();

        prd.setNamedWhereClauseParam("BindCldId", CldId);
        prd.setNamedWhereClauseParam("BindOrgId", OrgId);
        prd.executeQuery();
        Row[] row = prd.getAllRowsInRange();
        if (row.length > 0) {
            startDt = (Date) row[0].getAttribute("CurrStrtDt");
            endDate = (Date) row[0].getAttribute("CurrEndDate");
        }
        vouInTvouVO.setNamedWhereClauseParam("BindCldId", CldId);
        vouInTvouVO.setNamedWhereClauseParam("BindSlcId", SlocId);
        vouInTvouVO.setNamedWhereClauseParam("BindHoOrgId", HoOrgId);
        vouInTvouVO.setNamedWhereClauseParam("BindOrgId", OrgId);
        vouInTvouVO.setNamedWhereClauseParam("BindFrmDate", startDt);
        vouInTvouVO.setNamedWhereClauseParam("BindToDate", endDate);
        vouInTvouVO.executeQuery();

        vouInBatchVO.setNamedWhereClauseParam("AP_CLD_ID_BIND", CldId);
        vouInBatchVO.setNamedWhereClauseParam("AP_SLOC_ID_BIND", SlocId);
        vouInBatchVO.setNamedWhereClauseParam("AP_HO_ORG_ID_BIND", HoOrgId);
        vouInBatchVO.setNamedWhereClauseParam("AP_ORG_ID_BIND", OrgId);
        vouInBatchVO.setNamedWhereClauseParam("BindVouFrmDt", startDt);
        vouInBatchVO.setNamedWhereClauseParam("BindVouToDt", endDate);
        vouInBatchVO.executeQuery();

        vouInPdcVO.setNamedWhereClauseParam("BindCldId", CldId);
        vouInPdcVO.setNamedWhereClauseParam("BindSlocId", SlocId);
        vouInPdcVO.setNamedWhereClauseParam("BindHoOrgId", HoOrgId);
        vouInPdcVO.setNamedWhereClauseParam("BindOrgId", OrgId);
        vouInPdcVO.setNamedWhereClauseParam("BindVouFrmDt", startDt);
        vouInPdcVO.setNamedWhereClauseParam("BindVouToDt", endDate);
        vouInPdcVO.executeQuery();

    }
    Number netProfit = new Number(0);
    String balType = null;

    public void callStoredProcedure(String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = getDBTransaction().createCallableStatement("begin " + stmt + "; end;", 0);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 1, bindVars[z]);
                }
            }
            st.registerOutParameter(7, Types.NUMERIC);
            st.registerOutParameter(8, Types.VARCHAR);

            st.executeUpdate();

            try {
                netProfit = new Number(st.getObject(7));
                balType = (String) st.getObject(8);
            } catch (SQLException sqle) {
                // TODO: Add catch code
                sqle.printStackTrace();
            }
        } catch (SQLException e) {
            if (e.getMessage().length() < 11) {

                throw new JboException(e.getMessage());
            } else {
                int end = e.getMessage().indexOf("\n");
                throw new JboException(e.getMessage().substring(11, end));
            }
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    throw new JboException(e.getMessage());
                }
            }
        }
    }

    public String ExistedDataTest(Date EndDate) {
        Object callStoredFunctionForExisttest =
            callStoredFunctionForExisttest(Types.VARCHAR, "APP.fn_chk_org_fy_close_allowed(?,?,?,?,?,?,?)", new Object[] {
                                           EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_HO_ORG_ID(),
                                           EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_USR_ORG(), EndDate
        });

        return null;
    }

    public String preFinancialYearClosingCheck(String cld_id, String Org_id, Integer fy_id, Date endDate,
                                               String incTemp, String Posted, Integer Sloc_id, String Ho_Org_id,
                                               String Inactive) {
        // if asondate is dre then take asondate instead of end date
        ViewObjectImpl prd = getFinPrdClose1();
        Row currentRow = prd.getCurrentRow();
        Date dt = (Date) new Date().getCurrentDate();
        if (currentRow != null) {
            Object FyId = currentRow.getAttribute("FyId");
            endDate = (Date) currentRow.getAttribute("CurrEndDate");
            dt = (Date) currentRow.getAttribute("Currentdate");

            System.out.println("FyId = " + FyId);
            if (FyId != null)
                fy_id = (Integer) FyId;

        }
        Integer usr_id = EbizParams.GLBL_APP_USR();

        //
        //  Date dt = endDate;
        System.out.println("cldid = " + cld_id + " Org_id = " + Org_id + " endDate = " + endDate + " incTemp = " +
                           incTemp + " Posted = " + Posted + "Sloc_id = " + Sloc_id + " Ho_Org_id = " + Ho_Org_id +
                           " new Date() = " + dt);
        // endDate="31-DEC-2014";
        callStoredProcedure("FIN.proc_get_org_fy_net_profit(?,?,?,?,?,?,?,?)", new Object[] {
                            cld_id, Org_id, fy_id, endDate, "N", "P"
        });
        if (netProfit != null) {
            //netProfit=new Number(1);
            System.out.println("netProfit.compareTo(0)=" + netProfit.compareTo(0) + " netProfit = " + netProfit);
            if (netProfit.compareTo(0) !=
                0) {
                // now check rr account
                Integer coa =
                                      reserveAccount(cld_id, Org_id, fy_id, endDate, incTemp, Posted, Sloc_id, Ho_Org_id,
                                                     Inactive, dt, usr_id);
                System.out.println("number of rr =" + coa);
                if (coa == 0) {
                    return "no";
                } else if (coa == 1) {
                    //genearted voucher in rr account function
                    Date strt_date = (Date) currentRow.getAttribute("NxtStrtDt");
                    Date end_date = (Date) currentRow.getAttribute("NxtEndDt");
                    System.out.println(strt_date + "-----------" + end_date);
                    currentRow.setAttribute("Tran_strt_date", strt_date);
                    currentRow.setAttribute("Tran_end_date", end_date);
                    return "generate&close";
                } else {
                    return "transfer";
                }
            } else {
                // close financialyear
                Date strt_date = (Date) currentRow.getAttribute("NxtStrtDt");
                Date end_date = (Date) currentRow.getAttribute("NxtEndDt");
                System.out.println(strt_date + "-----------" + end_date);
                currentRow.setAttribute("Tran_strt_date", strt_date);
                currentRow.setAttribute("Tran_end_date", end_date);
                return "close";
            }
        }
        return null;
    }

    public Integer reserveAccount(String cld_id, String Org_id, Integer fy_id, Date endDate, String incTemp,
                                  String Posted, Integer Sloc_id, String Ho_Org_id, String Inactive, Date vouDate,
                                  Integer usr_id) {
        Object count = callStoredFunction(Types.NUMERIC, "FIN.fn_get_rr_coa_count(?,?,?,?)", new Object[] {
                                          cld_id, Sloc_id, Ho_Org_id, "N"
        });
        System.out.println("number of reserve account = " + count);
        if (count != null) {
            int i = ((BigDecimal) count).intValue();

            return i;
        }
        return null;
    }
    // String called="transfer";
    public Integer generateVoucher(String cld_id, String Org_id, Integer fy_id, Date endDate, String incTemp,
                                   String Posted, Integer Sloc_id, String Ho_Org_id, String Inactive, Date vouDate,
                                   Integer usr_id) {
        //fn_trf_rr_fyc_vou
        System.out.println("in generate");

        if (endDate.dateValue().toString().compareTo(vouDate.dateValue().toString()) > 0) {
            endDate = vouDate;
        }

        System.out.println(cld_id + " = " + Sloc_id + "=" + Ho_Org_id + "=" + Org_id + "=" + vouDate + "=" + usr_id +
                           "=" + fy_id + "=" + endDate);

        callStoredFunction(Types.NUMERIC, "FIN.fn_trf_rr_fyc_vou2(?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                           cld_id, Sloc_id, Ho_Org_id, Org_id, 1, vouDate, usr_id, fy_id, endDate, "N", null, "P",
                           "Voucher of  RR Account is available22"
        });
        return null;
    }

    /**
     * Container's getter for DualVO1.
     * @return DualVO1
     */
    public ViewObjectImpl getDualVO1() {
        return (ViewObjectImpl) findViewObject("DualVO1");
    }

    public String filterIncomeExpenseVO() {
        ViewObjectImpl exp = getIncomeExpence();
        ViewObjectImpl al = getAssetsLiability();

        ViewObjectImpl a = getDualVO1();
        Row currentRow = a.getCurrentRow();
        if (currentRow != null) {
            Object Cldid = currentRow.getAttribute("Cldid");
            Object Orgid = currentRow.getAttribute("Orgid");
            Object Hoorgid = currentRow.getAttribute("Hoorgid");
            Object Slocid = currentRow.getAttribute("Slocid");
            Object Fyid = currentRow.getAttribute("Fyid");
            Object Asondate = currentRow.getAttribute("Asondate");


            exp.setNamedWhereClauseParam("BindCldId", Cldid);
            exp.setNamedWhereClauseParam("BindOrgId", Orgid);
            exp.setNamedWhereClauseParam("BindPosted", "P");
            exp.setNamedWhereClauseParam("BindFyId", Fyid);
            exp.setNamedWhereClauseParam("BindDt", Asondate);

            al.setNamedWhereClauseParam("BindCldId", Cldid);
            al.setNamedWhereClauseParam("BindHoOrgId", Hoorgid);
            al.setNamedWhereClauseParam("BindSlocId", Slocid);

            exp.executeQuery();
            al.executeQuery();

            Number ie = netIncomeExpense();
            if (ie != null) {
                if (ie.compareTo(0) < 0) {
                    // positive for cr and negative for dr

                    currentRow.setAttribute("IEClosingBal", ie.multiply(-1));
                    currentRow.setAttribute("IEClosingBalType", "Dr");

                } else {
                    currentRow.setAttribute("IEClosingBal", ie);
                    currentRow.setAttribute("IEClosingBalType", "Cr");
                }
            }
        }
        return null;
    }
    public String netIeType = null;

    public Number netIncomeExpense() {
        ViewObjectImpl expence = getIncomeExpence();
        RowSetIterator rsi = expence.createRowSetIterator(null);

        Number netAmt = new Number(0);
        while (rsi.hasNext()) {
            Row next = rsi.next();
            System.out.println("netAmt  in income  = " + netAmt);
            if (next.getAttribute("ClBal") != null) {
                if (next.getAttribute("ClBalType") != null && next.getAttribute("ClBalType").equals("Cr")) {
                    netAmt = netAmt.add((Number) next.getAttribute("ClBal"));
                } else if (next.getAttribute("ClBalType") != null && next.getAttribute("ClBalType").equals("Dr")) {
                    netAmt = netAmt.subtract((Number) next.getAttribute("ClBal"));
                }
            }

        }
        rsi.closeRowSetIterator();

        if (netAmt.compareTo(0) < 0) {
            netIeType = "Dr";
        } else {
            netIeType = "Cr";

        }
        return netAmt;

    }
    public String netAlType = null;

    public Number netAssetLiability() {
        ViewObjectImpl al = getAssetsLiability();
        RowSetIterator rsi = al.createRowSetIterator(null);
        Number netAmt = new Number(0);
        while (rsi.hasNext()) {
            Row next = rsi.next();
            System.out.println("netAmt  in al  = " + netAmt);
            if (next.getAttribute("TransferredBalance") != null) {
                if (next.getAttribute("TrafBalType") != null && next.getAttribute("TrafBalType").equals("Cr")) {
                    netAmt = netAmt.add((Number) next.getAttribute("TransferredBalance"));
                } else if (next.getAttribute("TrafBalType") != null && next.getAttribute("TrafBalType").equals("Dr")) {
                    netAmt = netAmt.subtract((Number) next.getAttribute("TransferredBalance"));
                }
            }

        }
        rsi.closeRowSetIterator();
        if (netAmt.compareTo(0) < 0) {
            netAlType = "Dr";
        } else {
            netAlType = "Cr";

        }
        return netAmt;
    }

    public String generateVoucher_Transfer(String CldId, Integer SlocId, String HoOrgId, String OrgId, Integer InstId,
                                           Integer userId, Integer CoaId, Date VouDt, Date FyClsDt, String Narr,
                                           Integer TypeId, Integer subTypeId, Integer FyId, Number amount,
                                           String Type) {
        System.out.println("In generate Voucher");
        System.out.println("CldId = " + CldId + " SlocId = " + SlocId + " HoOrgId = " + HoOrgId + " OrgId = " + OrgId +
                           " InstId = " + InstId + " userId = " + userId + " TypeId = " + TypeId + " subTypeId = " +
                           subTypeId + " FyId = " + FyId);
        Number ie = ADFBeanUtils.roundOff(netIncomeExpense());
        Number al = ADFBeanUtils.roundOff(netAssetLiability());
        if (ie.compareTo(al) == 0 && netAlType.equalsIgnoreCase(netIeType)) {

            ViewObjectImpl aslb = getAssetsLiability();
            RowSetIterator rsi = aslb.createRowSetIterator(null);
            while (rsi.hasNext()) {
                Row next = rsi.next();
                Object CoaIdRR = next.getAttribute("CoaId");
                Object TransferredBalance = next.getAttribute("TransferredBalance");
                Object TrafBalType = next.getAttribute("TrafBalType");
                System.out.println("CoaIdRR = " + CoaIdRR + " TransferredBalance = " + TransferredBalance +
                                   " TrafBalType = " + TrafBalType);
                if (TrafBalType.equals("Cr"))
                    TrafBalType = "Dr";
                else
                    TrafBalType = "Cr";

                callStoredFunction(Types.VARCHAR, "fin.fn_coa_upd_op_bal(?,?,?,?,?,?,?,?,?)", new Object[] {
                                   CldId, SlocId, HoOrgId, OrgId, FyId, CoaIdRR, TransferredBalance, TrafBalType, userId
                });
                getDBTransaction().commit();
            }

            return "voucher";
        } else {
            return "nezero";
        }
        //return null;
    }

    public String closeFinancialYear(String CldId, Integer SlocId, String OrgId, Integer UsrId, Date nFyStDt,
                                     Date nFyEnddt) {

        CldId = EbizParams.GLBL_APP_CLD_ID();
        SlocId = EbizParams.GLBL_APP_SERV_LOC();
        OrgId = EbizParams.GLBL_APP_USR_ORG();
        UsrId = Integer.parseInt(EbizParams.GLBL_APP_USR().toString());
        String HoOrgId = EbizParams.GLBL_HO_ORG_ID();
        Date asOnDt = (Date) new Date().getCurrentDate();
        Integer CurrfyId = new Integer(1);
        String TranCloseType = null;
        ViewObjectImpl amtVO = this.getFycTransferBalAmtVO();
        ViewObjectImpl vouInTvouVO = this.gettotalVouInTvouVO();
        ViewObjectImpl cl = getFinPrdClose1();
        Row currentRow = cl.getCurrentRow();
        amtVO.setNamedWhereClauseParam("BindCldId", CldId);
        amtVO.setNamedWhereClauseParam("BindHoOrgId", HoOrgId);
        amtVO.setNamedWhereClauseParam("BindOrgId", OrgId);
        amtVO.setNamedWhereClauseParam("BindSlocId", SlocId);
        amtVO.executeQuery();

        if (currentRow != null) {
            nFyStDt = (Date) currentRow.getAttribute("NxtStrtDt");
            nFyEnddt = (Date) currentRow.getAttribute("NxtEndDt");
            asOnDt = (Date) currentRow.getAttribute("CurrEndDate");
            CurrfyId = Integer.parseInt(currentRow.getAttribute("FyId").toString());
            TranCloseType = (String) currentRow.getAttribute("TranCloseType");
            System.out.println("TranCloseType in " + TranCloseType);
        }
        System.out.println("CldId = " + CldId + "SlocId = " + SlocId + " OrgId = " + OrgId + " UsrId = " + UsrId +
                           "nFyStDt =" + nFyStDt + " nFyEnddt = " + nFyEnddt + " asOnDt = " + asOnDt + " CurrfyId = " +
                           CurrfyId + "TranCloseType = " + TranCloseType);
        /* Object callStoredFunction = callStoredFunction(Types.VARCHAR, "app.fn_ins_new_fy(?,?,?,?,?,?,?,?)", new Object[]{CldId,SlocId,OrgId,UsrId,nFyStDt,nFyEnddt,"Y","Y"});
        System.out.println("callStoredFunction = "+callStoredFunction);
        if(callStoredFunction.equals("Y")){
            getDBTransaction().commit();
        } */
        //Object openFY = callStoredFunction(Types.VARCHAR, "app.fn_org_close_fy_allowed(?,?,?)", new Object[]{CldId,SlocId,OrgId});

        //fn_prd_close_coa_rep
        System.out.println("TranCloseType = " + TranCloseType);
        Object callStoredFunction = callStoredFunction(Types.VARCHAR, "app.fn_org_fy_close(?,?,?,?,?)", new Object[] {
                                                       CldId, OrgId, CurrfyId, TranCloseType, UsrId
        });
        if (callStoredFunction.equals("Y")) {
            if (TranCloseType.equals("V")) {
                getDBTransaction().postChanges();

                BindingContainer bc = ADFBeanUtils.getBindingContainer();
                JUCtrlListBinding vouTypeList = (JUCtrlListBinding) bc.get("LovVouTypeVO1");
                Object[] al = vouTypeList.getSelectedValues();
                int l = al.length;
                System.out.println(al + "al = " + al.length);


                for (int i = 0; i < l; i++) {
                    Integer a = (Integer) al[i];
                    System.out.println("al = " + a + " al.length = " + l);
                    Object aa = callStoredFunction(Types.VARCHAR, "app.fn_org_doc_fy_close(?,?,?,?,?,?)", new Object[] {
                                                   CldId, SlocId, OrgId, CurrfyId, 55, a
                    });
                }
                vouTypeList.clearSelectedIndices();
                vouTypeList.executeQuery();
            }
            //    callStoredFunction(sqlReturnType, stmt, bindVars)
            System.out.println("out side fun");
            getFinPrdClose1().executeQuery();
            System.out.println("out side atere ex");
            // getLovVouTypeVO1().executeQuery();
            getDBTransaction().commit();
            System.out.println("out side atere commit");
            vouInTvouVO.setNamedWhereClauseParam("BindCldId", CldId);
            vouInTvouVO.setNamedWhereClauseParam("BindSlcId", SlocId);
            vouInTvouVO.setNamedWhereClauseParam("BindHoOrgId", HoOrgId);
            vouInTvouVO.setNamedWhereClauseParam("BindOrgId", OrgId);
            vouInTvouVO.executeQuery();
            return "Y";
        }


        return null;
    }

    /**
     * Container's getter for OrgDocFyVO1.
     * @return OrgDocFyVO1
     */
    public ViewObjectImpl getOrgDocFyVO1() {
        return (ViewObjectImpl) findViewObject("OrgDocFyVO1");
    }

    /**
     * Container's getter for PrdClsToOrgDocFyVL1.
     * @return PrdClsToOrgDocFyVL1
     */
    public ViewLinkImpl getPrdClsToOrgDocFyVL1() {
        return (ViewLinkImpl) findViewLink("PrdClsToOrgDocFyVL1");
    }

    public String filterOrgDocWithFy(String FyId) {
        ViewObjectImpl close = getFinPrdClose1();
        Row currentRow = close.getCurrentRow();
        if (currentRow != null) {
            Object FyId1 = currentRow.getAttribute("FyId");
            ViewObjectImpl docFy = getOrgDocFyVO1();
            docFy.setNamedWhereClauseParam("BindFyId", FyId1);
            docFy.executeQuery();
        }
        return null;
    }


    /**
     * Container's getter for LovVouTypeVO1.
     * @return LovVouTypeVO1
     */
    public ViewObjectImpl getLovVouTypeVO1() {
        return (ViewObjectImpl) findViewObject("LovVouTypeVO1");
    }

    /**
     * Container's getter for FinPrdToVouTypeVL1.
     * @return FinPrdToVouTypeVL1
     */
    public ViewLinkImpl getFinPrdToVouTypeVL1() {
        return (ViewLinkImpl) findViewLink("FinPrdToVouTypeVL1");
    }

    /**
     * Container's getter for totalVouInTvouVO.
     * @return totalVouInTvouVO
     */
    public ViewObjectImpl gettotalVouInTvouVO() {
        return (ViewObjectImpl) findViewObject("totalVouInTvouVO");
    }

    /**
     * Container's getter for VouInBatchVO.
     * @return VouInBatchVO
     */
    public ViewObjectImpl getVouInBatchVO() {
        return (ViewObjectImpl) findViewObject("VouInBatchVO");
    }


    public ViewObjectImpl getVouInPdcVO() {
        return (ViewObjectImpl) findViewObject("VouInPdcVO");
    }

    /**
     * Container's getter for FycTransferBalAmtVO1.
     * @return FycTransferBalAmtVO1
     */
    public ViewObjectImpl getFycTransferBalAmtVO() {
        return (ViewObjectImpl) findViewObject("FycTransferBalAmtVO");
    }

}
