package mnfjobcardapp.model.module;

import adf.utils.ebiz.EbizParams;
import adf.utils.model.ADFModelUtils;

import appCostCenterSevice.model.service.AppCostCenterServiceAMImpl;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

import javax.el.ELContext;
import javax.el.ValueExpression;

import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import javax.sql.RowSet;

import mnfjobcardapp.model.module.common.MNFJobcardAppAM;
import mnfjobcardapp.model.views.LOVItemNameVOImpl;
import mnfjobcardapp.model.views.MnfAdhocOutItmVOImpl;
import mnfjobcardapp.model.views.MnfAdhocOutItmVORowImpl;
import mnfjobcardapp.model.views.MnfJcOpInputItemVOImpl;
import mnfjobcardapp.model.views.MnfJcOpInputItemVORowImpl;
import mnfjobcardapp.model.views.MnfJcOpItmBinRqmtVwVOImpl;
import mnfjobcardapp.model.views.MnfJcOpItmBinVwVOImpl;
import mnfjobcardapp.model.views.MnfJcOpItmLotRqmtVwVOImpl;
import mnfjobcardapp.model.views.MnfJcOpItmLotVwVOImpl;
import mnfjobcardapp.model.views.MnfJcOpItmSrRqmtVwVOImpl;
import mnfjobcardapp.model.views.MnfJcOpItmSrVwVOImpl;
import mnfjobcardapp.model.views.MnfJcOpItmVOImpl;
import mnfjobcardapp.model.views.MnfJcOpItmVORowImpl;
import mnfjobcardapp.model.views.MnfJcSrcVOImpl;
import mnfjobcardapp.model.views.MnfJcVOImpl;
import mnfjobcardapp.model.views.MnfJcVORowImpl;

import oracle.adf.share.ADFContext;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.ApplicationModule;
import oracle.jbo.AttributeDef;
import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewObject;
import oracle.jbo.client.Configuration;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.apache.myfaces.trinidad.context.RequestContext;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Sep 10 13:41:27 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MNFJobcardAppAMImpl extends ApplicationModuleImpl implements MNFJobcardAppAM {
    /**
     * This is the default constructor (do not remove).
     */
    private static ADFLogger adfLog = (ADFLogger) ADFLogger.createADFLogger(MNFJobcardAppAMImpl.class);
    public MNFJobcardAppAMImpl() {
       // System.out.println("In am impl");
        
    }

    /*--------------------------Master filter in MNF$JC Table----------------------*/
    public void setFilterData(String CldId, Integer SlocId, String HoOrgId, String OrgId) {
        adfLog.info("CldId::"+CldId+"SlocId::"+SlocId+"HoOrgId::"+HoOrgId+"OrgId::"+OrgId);
        ViewObjectImpl Voimpl = this.getMnfJc1();
        ViewCriteria criteria = Voimpl.getViewCriteria("MnfJcVOCriteria1");
        Voimpl.applyViewCriteria(criteria);
        Voimpl.setNamedWhereClauseParam("CldIdBindVar", CldId);
        Voimpl.setNamedWhereClauseParam("SlocIdBindVar", SlocId);
        Voimpl.setNamedWhereClauseParam("HoOrgIdBindVar", HoOrgId);
        Voimpl.setNamedWhereClauseParam("OrgBindVar", OrgId);
        Voimpl.executeQuery();
        
        LOVItemNameVOImpl vo=this.getLOVItemName1();
        vo.setBindCldId(EbizParams.GLBL_APP_CLD_ID());
        vo.setBindHoOrgId(EbizParams.GLBL_HO_ORG_ID());
        vo.setBindSlocId(EbizParams.GLBL_APP_SERV_LOC());
        vo.setBindOrgId(OrgId);
        vo.executeQuery();
        
    }

    /*--------------------------Method for Search Job Card------------------------*/
    public void SearchJobCard(String CldId, String HoOrgId, String OrgId, Integer SlocId, String JcId, Integer Stat,
                              String ShiftId, Date fromDate, Date toDate, String itemOutput) {
        ViewObjectImpl impl = this.getMnfJc1();
        ViewCriteria criteria = impl.getViewCriteria("MnfJcVOCriteria1");
        impl.applyViewCriteria(criteria);
        impl.setNamedWhereClauseParam("JcIdBindVar", (JcId == null ? null : JcId));
        impl.setNamedWhereClauseParam("shiftIdBindVar", (ShiftId == null ? null : ShiftId));
        impl.setNamedWhereClauseParam("statusBindVar", (Stat == null ? null : Stat));
        impl.setNamedWhereClauseParam("outputItmBind", (itemOutput == null ? null : itemOutput));
        impl.setNamedWhereClauseParam("FromDtBindVar", (fromDate == null ? null : fromDate));
        impl.setNamedWhereClauseParam("TodtBindVar", (toDate == null ? null : toDate));
        impl.setNamedWhereClauseParam("CldIdBindVar", CldId);
        impl.setNamedWhereClauseParam("SlocIdBindVar", SlocId);
        impl.setNamedWhereClauseParam("HoOrgIdBindVar", HoOrgId);
        impl.setNamedWhereClauseParam("OrgBindVar", OrgId);
        impl.executeQuery();
    }

    /*--------------------------Method for Reset Job Card------------------------*/
    public void ResetJobCard(String CldId, String HoOrgId, String OrgId, Integer SlocId) {
        getTransient1().executeQuery();
        ViewObjectImpl impl = this.getMnfJc1();
        ViewCriteria criteria = impl.getViewCriteria("MnfJcVOCriteria1");
        impl.applyViewCriteria(criteria);
        impl.setNamedWhereClauseParam("CldIdBindVar", CldId);
        impl.setNamedWhereClauseParam("SlocIdBindVar", SlocId);
        impl.setNamedWhereClauseParam("HoOrgIdBindVar", HoOrgId);
        impl.setNamedWhereClauseParam("OrgBindVar", OrgId);
        impl.executeQuery();
    }

    /*-----------------------Method for generate Doc_Txn_Id-------------------------------*/
    public String getDocTxnId(String cldId, Integer slcId, String orgId, Integer docId, Integer docTypeId,
                              Integer userId) {
        try {
            return callStoredFunction(VARCHAR, "APP.GET_TXN_ID(?,?,?,?,?,?)", new Object[] {
                                      cldId, slcId,orgId, userId, docId, docTypeId
        }).toString();

        } catch (Exception e) {
            e.printStackTrace();
        }
        return "0";
    }

    /*-------------------------Method for generate Job card Serial No.-----------------------*/
    public String getJobCardSNO(Integer slcId, String cldId, String hoOrgId, Integer docId, String hexDocId,
                                Integer docTypId, String tabNm, Integer fyId, String docSubTypId) {
        adfLog.info("slocId:::"+slcId+"cldId:::"+cldId+"hoOrgId::"+hoOrgId+"docId::"+docId+"hexDocId::"+hexDocId);
        adfLog.info("docTypId::"+docTypId+"tabNm::"+tabNm+"fyId::"+fyId+"docSubTypId::"+docSubTypId);
        try {
            return callStoredFunction(VARCHAR, "MNF.FN_MNF_GEN_DISP_DOC_ID(?,?,?,?,?,?,?,?,?)", new Object[] {
                                      slcId, cldId, hoOrgId, docId, hexDocId, docTypId, tabNm, fyId, docSubTypId
        }).toString();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return "0";
    }

    /*-------------------------------Method for generate Fy_Id------------------------------*/
    public Integer getFyId(String cldId, String hoOrgId, Date txnDt) {
        try {
            String usrOrg = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
            return (Integer) callStoredFunction(NUMBER, "APP.GET_ORG_FY_ID(?,?,?)", new Object[] { cldId, usrOrg, txnDt});
        } catch (Exception e) {
            e.printStackTrace();
        }
        return 0;
    }

    /*------------------------Declaration of Type Oracle---------------------------*/
    private static int NUMBER = Types.INTEGER;
    private static int NUMERIC = Types.NUMERIC;
    private static int VARCHAR = Types.VARCHAR;

    /**
     * Function to call a database function .
     * */
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {

        CallableStatement st = null;
        try {
            // 1. Create a JDBC CallabledStatement
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            // 2. Register the first bind variable for the return value
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                // 3. Loop over values for the bind variables passed in, if any
                for (int z = 0; z < bindVars.length; z++) {
                    // 4. Set the value of user-supplied bind vars in the stmt
                    //   System.out.println("bindVars " + z + " " + bindVars[z]);
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            // 5. Set the value of user-supplied bind vars in the stmt
            st.executeUpdate();
            // 6. Return the value of the first bind variable
            //  System.out.println("Function return " + st.getObject(1));
            return st.getObject(1);
        } catch (Exception e) {
            e.printStackTrace();
            //   System.out.println("In Exception exch and Op and generate-->");

            String msg = e.getMessage();
            //  System.out.println(msg);
            FacesMessage ermsg = new FacesMessage(msg);
            ermsg.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, ermsg);
            return null;
        } finally {
            if (st != null) {
                try {
                    // 7. Close the statement
                    st.close();
                } catch (SQLException e) {
                    throw new JboException(e.getMessage());
                }
            }
        }
    }

    /**
     * Generalized method used to display the facesmessages.
     * Created by Vishal Kumar on 09-09-2014.
     * @param msgHdr is to set the header for message dialog
     * @param msgDtl is to set if further detail information in meassage is required.
     * @param msgSeverity is to set severity mode.
     * @param msgMode is kept to incorporate conditional activities.
     * **/
    public void showFacesMsg(String msgHdr, String msgDtl, javax.faces.application.FacesMessage.Severity msgSeverity,
                             String msgMode) {
        FacesMessage msg = new FacesMessage(msgHdr);
        msg.setDetail(msgDtl);
        msg.setSeverity(msgSeverity);
        FacesContext.getCurrentInstance().addMessage(null, msg);
    }

    /*----------------------------Resolve Expression for PafeFlowScope----------------------*/
    public Object resolvEl(String data) {
        ADFContext adfCtx = ADFContext.getCurrent();
        ELContext elContext = adfCtx.getELContext();
        ValueExpression valueExp = adfCtx.getExpressionFactory().createValueExpression(elContext, data, Object.class);
        Object Message = valueExp.getValue(elContext);
        return Message;
    }

    /*--------------------------ResolveEdic Message Method----------------------------*/
    public Object resolvElDCMsg(String data) {
        ADFContext adfCtx = ADFContext.getCurrent();
        ELContext elContext = adfCtx.getELContext();
        ValueExpression valueExp = adfCtx.getExpressionFactory().createValueExpression(elContext, data, Object.class);
        return valueExp.getValue(elContext);
    }

    /*-----------------------Item populate Function----------------------*/
    public String PopulateITM(String P_CLD_ID, Integer P_SLOC_ID, String P_HO_ORG_ID, String P_ORG_ID, String P_DOC_ID,
                              Date P_DOC_DT, Integer P_USR_ID, Date P_USR_DT, String P_MODE, Integer P_OP_SR_NO) {
        Object Val;
        try {
            adfLog.info("in the populate Function...");
            DeleteRecords(P_HO_ORG_ID, P_ORG_ID, P_SLOC_ID, P_CLD_ID, P_DOC_ID);
            ViewObjectImpl impl = this.getMnfJcSrcVO1();
            Row currentRow = impl.getCurrentRow();
            if (currentRow != null) {
                Integer JcBasis = 0;
                Integer DocTypeSrc = (Integer) currentRow.getAttribute("DocTypeSrc");
                if (DocTypeSrc == 82) {
                    JcBasis = 26001;
                } else if (DocTypeSrc == 93) {
                    JcBasis = 26003;
                } else if (DocTypeSrc == 83) {
                    JcBasis = 26002;
                }
                String DocIdSrc = (String) currentRow.getAttribute("DocIdSrc");
                String P_OP_ID = (String) this.getMnfJc1().getCurrentRow().getAttribute("OpId");
                Object actqtyval = this.getMnfJc1().getCurrentRow().getAttribute("ActOutptItmQty");
                Object OutptItmQty = this.getMnfJc1().getCurrentRow().getAttribute("OutptItmQty");
                //  System.out.println("Bill Values 1 :"+DocTypeSrc+DocIdSrc+P_OP_ID+actqtyval);
                if (DocTypeSrc != null && DocIdSrc != null && P_OP_ID != null) {
                    Val = callStoredFunction(NUMBER, "MNF.FN_MNF_INS_SRC_TO_JC_RC(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                             P_CLD_ID, P_SLOC_ID, P_HO_ORG_ID, P_ORG_ID, JcBasis, DocIdSrc, P_DOC_ID,
                                             P_DOC_DT, P_USR_ID, P_USR_DT, P_MODE, P_OP_ID, P_OP_SR_NO, null, null,
                                             OutptItmQty, actqtyval
                    }).toString();
                    if (Val != null) {
                        //this.getDBTransaction().Changes();
                        return Val.toString();
                    }
                }
            }
            //this.getDBTransaction().postChanges();
            this.getMnfJcOpInputItm().executeQuery();
            this.getMnfJcOpOutputItm().executeQuery();
            this.getMnfJcOpCoproductsByproductItm().executeQuery();
            this.getMnfJcOpItmAll().executeQuery();
        } catch (Exception e) {
            e.printStackTrace();
            StringBuilder saveMsg = new StringBuilder("<html><body><p><b>No Data Found.</b></p>");
            saveMsg.append("</body></html>");
            showFacesMsg(saveMsg.toString(), null, FacesMessage.SEVERITY_ERROR, null);
        }
        return "0";
    }

    /*----------------------------------Delete Records in Item tables--------------------------------------*/
    public void DeleteRecords(String Ho_Org_Id, String Org_Id, Integer Sloc_Id, String Cld_Id, String Doc_Id) {
        PreparedStatement stat = null;
        try {
            String sql =
                "DELETE FROM MNF$JC$OP$ITM WHERE CLD_ID='" + Cld_Id + "' AND SLOC_ID='" + Sloc_Id +
                "' AND HO_ORG_ID='" + Ho_Org_Id + "' AND ORG_ID='" + Org_Id + "' AND DOC_ID='" + Doc_Id + "'";
            stat = this.getDBTransaction().createPreparedStatement(sql, 1);
            stat.executeUpdate();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (stat != null) {
                try {
                    stat.close();
                } catch (SQLException e) {
                }
            }
        }
    }

    /*-----------------------Insert Warehouse id in mnfJcSrc table and mnfopitem table------------------*/
    public void InsertWhAndReqAreaId() {
        RowSetIterator itmRsi = this.getMnfJcOpItmAll().createRowSetIterator(null);
        System.out.println("length of Itm rsi :" + itmRsi.getAllRowsInRange().length);
        Object whId = this.getMnfJc1().getCurrentRow().getAttribute("WhId");
        Object RqmtAreaId = this.getMnfJc1().getCurrentRow().getAttribute("RqmtAreaId");
        while (itmRsi.hasNext()) {
            Row itmNext = itmRsi.next();
            if (whId != null && RqmtAreaId != null) {
                itmNext.setAttribute("WhId", whId.toString());
                itmNext.setAttribute("RqmtAreaId", RqmtAreaId);
            }
        }
        this.getMnfJcSrcVO1().getCurrentRow().setAttribute("WhId", whId.toString());
    }

    /*-------------------------Check Duplicate in Pramter name-------------------*/
    public String chkDuplicateInParamNm(String DocId, String paramNm, String CldId, String HoOrgId, Integer SlocID) {
        RowQualifier rq = new RowQualifier(this.getMnfJcParamOverhead());
        rq.setWhereClause("DocId='" + DocId + "' and TransParamNm='" + paramNm + "'");
        System.out.println("Query=" + rq.getExprStr());
        Row fr[] = this.getMnfJcParamOverhead().getFilteredRows(rq);
        System.out.println("Total no. of same rows=" + fr.length);
        for (Row r : fr) {
            System.out.println("Row=" + r + " and current row=" + this.getMnfJcParamOverhead().getCurrentRow());
            if (!(r.equals(this.getMnfJcParamOverhead().getCurrentRow()))) {
                return "Y";
            }
        }
        return "N";
    }

    /*----------------------Check duplicate in machine downtime--------------------*/
    public String chkDuplicateInParamNmDT(String DocId, String paramNm, String CldId, String HoOrgId, Integer SlocID) {
        RowQualifier rq = new RowQualifier(this.getMnfJcParam1MachineDT());
        rq.setWhereClause("DocId='" + DocId + "' and TransParamNm='" + paramNm + "'");
        System.out.println("Query=" + rq.getExprStr());
        Row fr[] = this.getMnfJcParam1MachineDT().getFilteredRows(rq);
        System.out.println("Total no. of same rows=" + fr.length);
        for (Row r : fr) {
            System.out.println("Row=" + r + " and current row=" + this.getMnfJcParam1MachineDT().getCurrentRow());
            if (!(r.equals(this.getMnfJcParam1MachineDT().getCurrentRow()))) {
                return "Y";
            }
        }
        return "N";
    }

    /*--------------------------Method for Insert data in ATTCH Table----------------------*/

    public String insertInMnfOpAttch(String CldId, String HoOrgId, String OrgId, Integer Sloc_id, Integer UserId,
                                     String DocId, String AttchFileExtn, String AttchFilepath, String AttchExtn,
                                     String DispFlNm) {
        ViewObjectImpl attch1 = this.getMnfJcAttch1();
        ViewObjectImpl attch2 = this.getMnfJcAttch2();
        Row createRow = attch1.createRow();
        int count = attch2.getRowCount();
        String Nm = "MNF-JC-ATTACH" + count;
        //   System.out.println(Nm);
        createRow.setAttribute("CldId", CldId);
        createRow.setAttribute("SlocId", Sloc_id);
        createRow.setAttribute("HoOrgId", HoOrgId);
        createRow.setAttribute("OrgId", OrgId);
        createRow.setAttribute("DocId", DocId);
        createRow.setAttribute("AttchFlNm", Nm);
        createRow.setAttribute("AttchFlExtn", AttchFileExtn);
        createRow.setAttribute("AttchFlPath", AttchFilepath + Nm + AttchExtn);
        createRow.setAttribute("DispFlNm", DispFlNm);
        createRow.setAttribute("UsrIdCreate", UserId);
        createRow.setAttribute("UsrIdCreateDt", new Timestamp(System.currentTimeMillis()));
        attch1.insertRow(createRow);
        return Nm;
    }

    /*-----------------------------------Work Flow Setup----------------------------------------*/

    /**
     * Method used to call work flow function.
     * calls db functions APP.WF_GET_USR_LEVEL & APP.WF_INS_TXN
     * Created by Vishal Kumar on 09-09-2014.
     * **/

    public String callWfFunctions(String cldId, Integer slcId, String orgId, Integer usrId, String txnId, Integer docId,
                                  Integer docTypId) {
        String wfId = getWfId(cldId, slcId, orgId, docId, docTypId);
        Object level;
        try {
            level = callStoredFunction(NUMBER, "APP.WF_GET_USR_LEVEL(?,?,?,?,?,?,?)", new Object[] {
                                       slcId, cldId, orgId, usrId, wfId, docId, docTypId
            });
            callStoredFunction(NUMBER, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                               slcId, cldId, orgId, docId, docTypId, wfId, txnId, usrId, usrId, level, level, "I", "A",
                               0
            });
        } catch (Exception nfe) {
            showFacesMsg(resolvElDCMsg("#{bundle['MSG.1113']}").toString(), null, FacesMessage.SEVERITY_ERROR, null);
            nfe.printStackTrace();
        }
        return null;
    }

    /**
     * Method used to get the Work flow id for a document.
     * Created by Vishal Kumar on 09-09-2014.
     * **/

    public String getWfId(String cldId, Integer slcId, String orgId, Integer docId, Integer docTypId) {
        try {
            return callStoredFunction(VARCHAR, "APP.WF_GET_ID(?,?,?,?,?)", new Object[] {
                                      slcId, cldId, orgId, docId, docTypId }).toString();
        } catch (Exception e) {
            e.printStackTrace();
            StringBuilder saveMsg = new StringBuilder("<html><body><p><b>Error in getting Work Flow Details. </b></p>");
            saveMsg.append("</body></html>");
            showFacesMsg(saveMsg.toString(), null, FacesMessage.SEVERITY_ERROR, null);
        }
        return "0";
    }

    /**
     * Method created to call DB fucntion to get the user at which the document is pending
     * Created by Vishal Kumar on 09-09-2014.
     * **/

    public Integer getDocUsrFromWF(String cldId, Integer slcId, String orgId, Integer usrId, String txnId,
                                   Integer docId, Integer docTypId) {
        Object fnRetVal;
        try {
            fnRetVal = callStoredFunction(NUMBER, "APP.WF_GET_CUR_USR(?,?,?,?,?,?)", new Object[] {
                                          slcId, cldId, orgId, docId, txnId, docTypId
            });
            if (fnRetVal != null) {
                return Integer.parseInt(fnRetVal.toString());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        showFacesMsg("Error while fetching user work flow details", null, FacesMessage.SEVERITY_ERROR, null);
        return 0;
    }

    /*---------------------------------Get User Name for Given UserId-------------------------------------*/
    public String getUserName(Integer u_Id, Integer slc_id) {
        String uname = "";
        ViewObjectImpl impl = this.getLOVUserNmWF1();
        impl.setNamedWhereClauseParam("UsrIdBindVar", u_Id);
        impl.setNamedWhereClauseParam("SlocIDBindVar", slc_id);
        impl.executeQuery();
        Row[] allRowsInRange = impl.getAllRowsInRange();
        if (allRowsInRange.length > 0) {
            Object a = allRowsInRange[0].getAttribute("UsrName");
            String s = (a == null ? null : a.toString());
            uname = s;
        }
        return uname;
    }

    /*-----------------------------Auto Consumption check-----------------------*/
    public String AutoConsumptionCheck(String CldId, Integer SlocId, String OrgId, String P_Col) {
        try {
            return callStoredFunction(VARCHAR, "MNF.FN_MNF_CHK_ORG_PRF(?,?,?,?)", new Object[] {
                                      CldId, SlocId, OrgId, "AUTO_CONSMPTN_BASIS" }).toString();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return "0";
    }

    /*-----------------------Barcode generate------------------------*/
    public Integer GenBarcode(String CldId, Integer SlocId, String HoOrgId, String OrgId, String DocId, Integer UserId,
                              Date UserDt, String Mode, Integer BcQty) {
        Object fnRetValue;
        try {
            DeleteBarcodes(HoOrgId, OrgId, SlocId, CldId, DocId);
            fnRetValue = callStoredFunction(NUMBER, "MNF.FN_MNF_INS_BARCODE_JC_RC(?,?,?,?,?,?,?,?,?)", new Object[] {
                                            CldId, SlocId, HoOrgId, OrgId, DocId, UserId, UserDt, Mode, BcQty
            });
            if (fnRetValue != null) {
                insertBrcktQty(BcQty);
                return Integer.parseInt(fnRetValue.toString());
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            this.getMnfJcBarcode1().executeQuery();
        }
        showFacesMsg("Error IN FETCHING", null, FacesMessage.SEVERITY_ERROR, null);
        return 0;
    }

    /*----------------------------------Delete Records in Item tables--------------------------------------*/
    public void DeleteBarcodes(String Ho_Org_Id, String Org_Id, Integer Sloc_Id, String Cld_Id, String Doc_Id) {
        PreparedStatement stat = null;
        try {
            String sql =
                "DELETE FROM MNF$JC$BARCODE WHERE CLD_ID='" + Cld_Id + "' AND SLOC_ID='" + Sloc_Id +
                "' AND HO_ORG_ID='" + Ho_Org_Id + "' AND ORG_ID='" + Org_Id + "' AND DOC_ID='" + Doc_Id + "'";
            stat = this.getDBTransaction().createPreparedStatement(sql, 1);
            stat.executeUpdate();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (stat != null) {
                try {
                    stat.close();
                } catch (SQLException e) {
                }
            }
        }
    }

    /*------------------Update in Mnf$JC for Approved-------------------*/
    public void updateWfStatus(String doc_txn_id, String wf_mode) {
        //  System.out.println("wf_mode " + wf_mode);
        String DocTxn = resolvEl("#{pageFlowScope.GLBL_DOC_TXN_ID}").toString();
        //wf_mode : V - revert, I - Initialize, F - Forwarded, A - Approved, R - Reject
        ViewObjectImpl impl = this.getMnfJc1();
        Row r = impl.getCurrentRow();
        /* if ("I".equals(wf_mode))
            {
                r.setAttribute("JcMode", 47);
            }  */
        if ("F".equals(wf_mode)) {
            r.setAttribute("JcMode", 78);
        } else if ("A".equals(wf_mode)) {
            r.setAttribute("JcStat", 72);
            r.setAttribute("JcMode", 76);
            this.GenerateMrsDocument();
        }
        getDBTransaction().commit();
        if ("A".equals(wf_mode)) {
            statusUpdate();
        }
        ViewCriteria Fr = impl.getViewCriteria("FilterOnRelease");
        impl.applyViewCriteria(Fr);
        impl.setNamedWhereClauseParam("DocTxnIdBindVar", DocTxn);
        impl.executeQuery();
    }

    /*------------------------------MRS Generate Function----------------------*/
    public void GenerateMrsDocument() {
        try {
            ViewObjectImpl impl = this.getMnfJc1();
            Row currentRow = impl.getCurrentRow();
            String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
            Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
            String ho_org_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
            String org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
            Integer user_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
            System.out.println("Parameters for MRS is :"+ 
                                    " "+cld_id +" "+  sloc_id +" "+ ho_org_id +" "+ org_id +" "+ 26004 +" "+
                                    currentRow.getAttribute("DocId") +" "+ user_id +" "+
                                    new Timestamp(System.currentTimeMillis()) +" "+
                                    currentRow.getAttribute("FyId")+" "+currentRow.getAttribute("WhId")+" "+
                                    currentRow.getAttribute("RqmtAreaId")
                               );
            if (currentRow != null && currentRow.getAttribute("DocId") != null) {
                Object val = callStoredFunction(Types.INTEGER, "MNF.FN_MNF_GEN_MRS(?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                cld_id, sloc_id, ho_org_id, org_id, 26004,
                                                currentRow.getAttribute("DocId"), user_id,
                                                new Timestamp(System.currentTimeMillis()),
                                                currentRow.getAttribute("FyId"), currentRow.getAttribute("WhId"),
                                                currentRow.getAttribute("RqmtAreaId")
                });

                if (val != null && Integer.parseInt(val.toString()) != 1) {
                    FacesMessage msg = new FacesMessage("Problem occurred while generating MRS.");
                    msg.setSeverity(FacesMessage.SEVERITY_ERROR);
                    FacesContext.getCurrentInstance().addMessage(null, msg);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            FacesMessage msg = new FacesMessage("Problem occurred while generating MRS.");
            msg.setSeverity(FacesMessage.SEVERITY_WARN);
            FacesContext.getCurrentInstance().addMessage(null, msg);
        }
    }


    /*----------------------Update MnfJc for Bracket Qty-------------------------*/
    public void insertBrcktQty(Integer bcQty) {
        ViewObjectImpl impl = this.getMnfJc1();
        Row currentRow = impl.getCurrentRow();
        currentRow.setAttribute("QtyBrct", bcQty);
        getDBTransaction().commit();
    }

    /*--------------------------Relaese Method--------------------*/
    public String ReleaseStatus(String cld_id, Integer sloc_id, String Ho_org_id, String Org_id, Integer user_id) {
        adfLog.info("Call of ReleaseStat:::");
       Boolean result=true;
        if(InsertGlItemStock(cld_id, sloc_id, Ho_org_id, Org_id, user_id)){
            
           result=result&&true;
            
        }else{
            System.out.println("Error while Insert to FIN");
            result=result&&false;
        }
        if(InsertItemIntoMM(cld_id, sloc_id, Ho_org_id, Org_id, user_id)){
            result=result&&true;
        }else{
            result=result&&false;
            System.out.println("Error while Insert to MM");
        }
        adfLog.info("Value of resutl in ReleaseStat:::"+result);
        if(result){
            Row r = getMnfJc1().getCurrentRow();
            r.setAttribute("JcStat", 74);
            adfLog.info("czdsdfsdf");
            adfLog.info("commit from release status method ind the ampl is called...");
            this.getDBTransaction().commit();
            return "SUCCESS";
        }else{
            return "ERROR";    
        }
        
    }

    /*--------------------------Function to generate MRS Entry-------------------------------*/
    public Boolean InsertGlItemStock(String cld_id, Integer sloc_id, String Ho_org_id, String Org_id, Integer user_id) {
        Object val;

        try {
            if (this.getMnfJc1().getCurrentRow().getAttribute("FyId") != null &&
                this.getMnfJc1().getCurrentRow().getAttribute("DocId") != null &&
                this.getMnfJc1().getCurrentRow().getAttribute("DocDt") != null) {
                val = callStoredFunction(NUMBER, "MNF.MNF_INS_GL_CONSM_OUTPT_STK(?,?,?,?,?,?,?,?)", new Object[] {
                                         sloc_id, cld_id, Ho_org_id, Org_id,
                                         this.getMnfJc1().getCurrentRow().getAttribute("FyId"),
                                         this.getMnfJc1().getCurrentRow().getAttribute("DocId"),
                                         this.getMnfJc1().getCurrentRow().getAttribute("DocDt"), user_id
                });
                if (val == 1) {
                    return true;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return false;
    }

    /*------------------------Function which will insert into MM FN_MNF_TO_MM_RC_ITM---------------------------*/
    public Boolean InsertItemIntoMM(String cld_id, Integer sloc_id, String Ho_org_id, String Org_id, Integer user_id) {
        Object val;
        //to be tested........
        this.getDBTransaction().commit();

        try {
            if (this.getMnfJc1().getCurrentRow().getAttribute("FyId") != null &&
                this.getMnfJc1().getCurrentRow().getAttribute("WhId") != null &&
                this.getMnfJc1().getCurrentRow().getAttribute("DocId") != null &&
                this.getMnfJc1().getCurrentRow().getAttribute("DocDt") != null) {
                val = callStoredFunction(NUMBER, "MNF.FN_MNF_TO_MM_JC_ITM(?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                         cld_id, sloc_id, Ho_org_id, Org_id,
                                         this.getMnfJc1().getCurrentRow().getAttribute("WhId"),
                                         this.getMnfJc1().getCurrentRow().getAttribute("FyId"),
                                         this.getMnfJc1().getCurrentRow().getAttribute("DocDt"),
                                         this.getMnfJc1().getCurrentRow().getAttribute("DocId"),
                                         this.getMnfJc1().getCurrentRow().getAttribute("DocDt"), null, user_id,
                                         new Timestamp(System.currentTimeMillis()),
                                         this.getMnfJc1().getCurrentRow().getAttribute("RqmtAreaId")
                });
                if (val == 1) {
                    return true;
                }
            }
        } catch (Exception e) {
            adfLog.info(" in the catch block");
            adfLog.info("error in the InsertMNF%JC$ITM");
            e.printStackTrace();
        }
        return false;
    }

    /*-------------------------Method to Auto Issue item from Stock in case of LIFO/FIFO--------------------*/
    public Integer IssueAutoItem(String CldId, String HoOrgId, String OrgId, Integer SlocId) {
        Object retVal;
        try {
            ViewObject mnfRc = this.getMnfJc1();
            Row rcRow = mnfRc.getCurrentRow();
            ViewObject pickItm = this.getMnfJcOpItmAll();
            Row itmRow = pickItm.getCurrentRow();
            String binChkFlg = resolvEl("#{pageFlowScope.GLBL_ORG_BIN_CHK}").toString();
            String flag=(String)itmRow.getAttribute("RwrkFlg");
            String reworkFlag=flag.equals("Y")?"R":"S";
            adfLog.info("Auto Issue Reworkable flag::"+reworkFlag);
            
            

            retVal = callStoredFunction(NUMBER, "MNF.FN_MNF_JC_ISSU_AUTO(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                        CldId, SlocId, HoOrgId, OrgId, rcRow.getAttribute("WhId"),
                                        itmRow.getAttribute("ItmId"), itmRow.getAttribute("ActItmQty"),
                                        itmRow.getAttribute("ItmPickOrderTrans"),
                                        itmRow.getAttribute("ItmSerializedFlgTrans"), binChkFlg,
                                        itmRow.getAttribute("DocId"), itmRow.getAttribute("PdoId"),
                                        itmRow.getAttribute("OpId"), itmRow.getAttribute("OpSrNo"),
                                        itmRow.getAttribute("ItmType"), itmRow.getAttribute("ItmUom"),
                                        itmRow.getAttribute("ItmUom"), 1,reworkFlag
            });
            if (retVal != null) {
                if (retVal == 1) {
                    //this.getDBTransaction().Changes();
                }
                return Integer.parseInt(retVal.toString());
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            this.getMnfJcOpItmLot1().executeQuery();
            this.getMnfJcOpItmBin1().executeQuery();
            this.getMnfJcOpItmSr1().executeQuery();
        }
        showFacesMsg("Error IN FETCHING", null, FacesMessage.SEVERITY_ERROR, null);
        return 0;
    }

    /*-----------------------Incase of shop floor issue auto------------------------------------*/
    public Integer IssueAutoItemFromShopFloor(String CldId, String HoOrgId, String OrgId, Integer SlocId) {
        Object retVal;
        try {
            ViewObject mnfRc = this.getMnfJc1();
            Row rcRow = mnfRc.getCurrentRow();
            ViewObject pickItm = this.getMnfJcOpItmAll();
            Row itmRow = pickItm.getCurrentRow();
            String binChkFlg = resolvEl("#{pageFlowScope.GLBL_ORG_BIN_CHK}").toString();
            String flag=(String)itmRow.getAttribute("RwrkFlg");
            String reworkFlag=flag.equals("Y")?"R":"S";
            adfLog.info("Auto Issue shopFloor Reworkable flag::"+reworkFlag);

            retVal = callStoredFunction(NUMBER, "MNF.FN_MNF_JC_ISSU_AUTO_RQMT(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                        CldId, SlocId, HoOrgId, OrgId, rcRow.getAttribute("WhId"),
                                        itmRow.getAttribute("ItmId"), itmRow.getAttribute("ActItmQty"),
                                        itmRow.getAttribute("ItmPickOrderTrans"),
                                        itmRow.getAttribute("ItmSerializedFlgTrans"), binChkFlg,
                                        itmRow.getAttribute("DocId"), itmRow.getAttribute("PdoId"),
                                        itmRow.getAttribute("OpId"), itmRow.getAttribute("OpSrNo"),
                                        itmRow.getAttribute("ItmType"), itmRow.getAttribute("ItmUom"),
                                        itmRow.getAttribute("ItmUom"), 1, itmRow.getAttribute("RqmtAreaId"),reworkFlag
            });
            if (retVal != null) {
                System.out.println("Return Value : " + retVal);
                if (retVal == 1) {
                    //this.getDBTransaction().Changes();
                }
                return Integer.parseInt(retVal.toString());
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            this.getMnfJcOpItmLot1().executeQuery();
            this.getMnfJcOpItmBin1().executeQuery();
            this.getMnfJcOpItmSr1().executeQuery();
        }
        showFacesMsg("Error IN FETCHING", null, FacesMessage.SEVERITY_ERROR, null);
        return 0;
    }

    /**Method to filter Serial Number View ,as per Item Selected In case of BackFlush
     * */
    public void FilterSrNoAsPerItem() {
        ViewObject mnfjc = this.getMnfJc1();
        Row jcRow = mnfjc.getCurrentRow();
        String reworkFlg=(String)this.getMnfJcOpItmAll().getCurrentRow().getAttribute("RwrkFlg");
        String flag=reworkFlg.equals("Y")?"R":"S";
        adfLog.info("flag"+flag);

        if (jcRow != null) {
            ViewObject stkLot = this.getMnfJcOpItmSrVw1();
            System.out.println("Total Row in Bin-" + stkLot.getRowCount());
            stkLot.setNamedWhereClauseParam("BindWhId", jcRow.getAttribute("WhId"));
            stkLot.setNamedWhereClauseParam("BindCldId", jcRow.getAttribute("CldId"));
            stkLot.setNamedWhereClauseParam("BindOrgId", jcRow.getAttribute("OrgId"));
            stkLot.setNamedWhereClauseParam("BindItmId", this.getMnfJcOpItmAll().getCurrentRow().getAttribute("ItmId"));
            stkLot.setNamedWhereClauseParam("BindSlocId", jcRow.getAttribute("SlocId"));
            stkLot.setNamedWhereClauseParam("BindStktype",flag);
            stkLot.executeQuery();
            System.out.println("Total Row in Bin after filter-" + stkLot.getRowCount());
        }
    }

    /**Method to filter Serial Number View ,as per Item Selected In case of Manual(Shop Floor)
     * */
    public void FilterSrNoAsPerItemSF() {
        ViewObject mnfjc = this.getMnfJc1();
        Row jcRow = mnfjc.getCurrentRow();
        String reworkFlg=(String)this.getMnfJcOpItmAll().getCurrentRow().getAttribute("RwrkFlg");
        String flag=reworkFlg.equals("Y")?"R":"S";
        adfLog.info("flag"+flag);

        if (jcRow != null) {
            ViewObject stkLot = this.getMnfJcOpItmSrRqmtVw1();
            System.out.println("Total Row in Bin-" + stkLot.getRowCount());
            stkLot.setNamedWhereClauseParam("BindWhId", jcRow.getAttribute("WhId"));
            stkLot.setNamedWhereClauseParam("BindCldId", jcRow.getAttribute("CldId"));
            stkLot.setNamedWhereClauseParam("BindOrgId", jcRow.getAttribute("OrgId"));
            stkLot.setNamedWhereClauseParam("BindItmId", this.getMnfJcOpItmAll().getCurrentRow().getAttribute("ItmId"));
            stkLot.setNamedWhereClauseParam("BindSlocId", jcRow.getAttribute("SlocId"));
            stkLot.setNamedWhereClauseParam("BindReqArId",
                                            this.getMnfJcOpItmAll().getCurrentRow().getAttribute("RqmtAreaId"));
            stkLot.setNamedWhereClauseParam("BindStktype",flag);
            stkLot.executeQuery();
            //   System.out.println("Warehouse="+jcRow.getAttribute("WhId")+" cld="+jcRow.getAttribute("CldId")+" org="+jcRow.getAttribute("OrgId")+" itm="+this.getMnfJcOpItmAll().getCurrentRow().getAttribute("ItmId"));
            System.out.println("Total Row in Bin after filter-" + stkLot.getRowCount());
        }
    }

    /**Method to filter Stock Lot data warehouse wise*/

    public void FilterLotWhWise() {
        ViewObject mnfJc = this.getMnfJc1();
        Row jcRow = mnfJc.getCurrentRow();
        String reworkFlg=(String)this.getMnfJcOpItmAll().getCurrentRow().getAttribute("RwrkFlg");
        String flag=reworkFlg.equals("Y")?"R":"S";
        adfLog.info("flag"+flag);
        if (jcRow != null) {
            ViewObject stkLot = this.getMnfJcOpItmLotVw1();
            System.out.println("Total Row in Bin-" + stkLot.getRowCount());
            stkLot.setNamedWhereClauseParam("BindWhId", jcRow.getAttribute("WhId"));
            stkLot.setNamedWhereClauseParam("BindCldId", jcRow.getAttribute("CldId"));
            stkLot.setNamedWhereClauseParam("BindOrgId", jcRow.getAttribute("OrgId"));
            stkLot.setNamedWhereClauseParam("BindItmId", this.getMnfJcOpItmAll().getCurrentRow().getAttribute("ItmId"));
            stkLot.setNamedWhereClauseParam("BindSlocId", jcRow.getAttribute("SlocId"));
            stkLot.setNamedWhereClauseParam("BindStktype",flag);
            stkLot.executeQuery();
            //   System.out.println("Warehouse="+jcRow.getAttribute("WhId")+" cld="+jcRow.getAttribute("CldId")+" org="+jcRow.getAttribute("OrgId")+" itm="+this.getMnfJcOpItmAll().getCurrentRow().getAttribute("ItmId"));
            System.out.println("Total Row in Bin after filter-" + stkLot.getRowCount());
        }
    }

    /**Method to filter Stock Lot data warehouse wise In case Of Manual(Shop Floor)*/

    public void FilterLotWhWiseSF() {
        ViewObject mnfJc = this.getMnfJc1();
        Row jcRow = mnfJc.getCurrentRow();
        String reworkFlg=(String)this.getMnfJcOpItmAll().getCurrentRow().getAttribute("RwrkFlg");
        String flag=reworkFlg.equals("Y")?"R":"S";
        adfLog.info("flag"+flag);
        if (jcRow != null) {
            ViewObject stkLot = this.getMnfJcOpItmLotRqmtVw1();
            System.out.println("Total Row in Bin-" + stkLot.getRowCount());
            stkLot.setNamedWhereClauseParam("BindWhId", jcRow.getAttribute("WhId"));
            stkLot.setNamedWhereClauseParam("BindCldId", jcRow.getAttribute("CldId"));
            stkLot.setNamedWhereClauseParam("BindOrgId", jcRow.getAttribute("OrgId"));
            stkLot.setNamedWhereClauseParam("BindItmId", this.getMnfJcOpItmAll().getCurrentRow().getAttribute("ItmId"));
            stkLot.setNamedWhereClauseParam("BindSlocId", jcRow.getAttribute("SlocId"));
            stkLot.setNamedWhereClauseParam("BindReqArId",
                                            this.getMnfJcOpItmAll().getCurrentRow().getAttribute("RqmtAreaId"));
            stkLot.setNamedWhereClauseParam("BindStktype",flag);
            stkLot.executeQuery();
            //   System.out.println("Warehouse="+jcRow.getAttribute("WhId")+" cld="+jcRow.getAttribute("CldId")+" org="+jcRow.getAttribute("OrgId")+" itm="+this.getMnfJcOpItmAll().getCurrentRow().getAttribute("ItmId"));
            System.out.println("Total Row in Bin after filter-" + stkLot.getRowCount());
        }
    }

    /**Method to filter Stock Bin data warehouse wise*/

    public void FilterBinWhWise() {
        ViewObject mnfJc = this.getMnfJc1();
        Row jcRow = mnfJc.getCurrentRow();
        String reworkFlg=(String)this.getMnfJcOpItmAll().getCurrentRow().getAttribute("RwrkFlg");
        String flag=reworkFlg.equals("Y")?"R":"S";
        adfLog.info("flag"+flag);
        if (jcRow != null) {
            ViewObject stkLot = this.getMnfJcOpItmBinVw1();
            System.out.println("Total Row in Bin-" + stkLot.getRowCount());
            stkLot.setNamedWhereClauseParam("BindWhId", jcRow.getAttribute("WhId"));
            stkLot.setNamedWhereClauseParam("BindCldId", jcRow.getAttribute("CldId"));
            stkLot.setNamedWhereClauseParam("BindOrgId", jcRow.getAttribute("OrgId"));
            stkLot.setNamedWhereClauseParam("BindItmId", this.getMnfJcOpItmAll().getCurrentRow().getAttribute("ItmId"));
            stkLot.setNamedWhereClauseParam("BindSlocId", jcRow.getAttribute("SlocId"));
            stkLot.setNamedWhereClauseParam("BindStktype",flag);
            stkLot.executeQuery();
            //   System.out.println("Warehouse="+jcRow.getAttribute("WhId")+" cld="+jcRow.getAttribute("CldId")+" org="+jcRow.getAttribute("OrgId")+" itm="+this.getMnfJcOpItmAll().getCurrentRow().getAttribute("ItmId"));
            System.out.println("Total Row in Bin after filter-" + stkLot.getRowCount());
        }
    }

    /*-------------------------In case Of Shop Floor Filter Bin Data Warehouse Wise----------------*/
    public void FilterBinWhWiseSF() {
        ViewObject mnfJc = this.getMnfJc1();
        Row jcRow = mnfJc.getCurrentRow();
        String reworkFlg=(String)this.getMnfJcOpItmAll().getCurrentRow().getAttribute("RwrkFlg");
        String flag=reworkFlg.equals("Y")?"R":"S";
        adfLog.info("flag"+flag);
        if (jcRow != null) {
            System.out.println("Warehouse="+jcRow.getAttribute("WhId")+" cld="+jcRow.getAttribute("CldId")+" org="+jcRow.getAttribute("OrgId")+" itm="+
                               this.getMnfJcOpItmAll().getCurrentRow().getAttribute("ItmId")+" sloc : "+jcRow.getAttribute("SlocId")+
                               "Req : "+this.getMnfJcOpItmAll().getCurrentRow().getAttribute("RqmtAreaId"));
            ViewObject stkLot = this.getMnfJcOpItmBinRqmtVw1();
            System.out.println("Total Row in Bin-" + stkLot.getRowCount());
            stkLot.setNamedWhereClauseParam("BindWhId", jcRow.getAttribute("WhId"));
            stkLot.setNamedWhereClauseParam("BindCldId", jcRow.getAttribute("CldId"));
            stkLot.setNamedWhereClauseParam("BindOrgId", jcRow.getAttribute("OrgId"));
            stkLot.setNamedWhereClauseParam("BindItmId", this.getMnfJcOpItmAll().getCurrentRow().getAttribute("ItmId"));
            stkLot.setNamedWhereClauseParam("BindSlocId", jcRow.getAttribute("SlocId"));
            stkLot.setNamedWhereClauseParam("BindReqArId",
                                            this.getMnfJcOpItmAll().getCurrentRow().getAttribute("RqmtAreaId"));
            stkLot.setNamedWhereClauseParam("BindStktype",flag);
            stkLot.executeQuery();
            System.out.println("Total Row in Bin after filter-" + stkLot.getRowCount());
        }
    }


    /**To Select Bin,Lot and SrNo for Item
      * Method to select lot, bin and SrNo for item (If Organisation is using/not using bin and Items  serialised)
      */

    /**To Select Bin,Lot and SrNo for Item
     * Method to select lot, bin and SrNo for item (If Organisation is using/not using bin and Items  serialised)
     */
    public void InsertIntoPickItmSr(String CldId, String HoOrgId, String OrgId, Integer SlocId) {
        ViewObjectImpl rcItm = this.getMnfJcOpItmAll();
        ViewObjectImpl rcItmSr = this.getMnfJcOpItmSr1();
        ViewObjectImpl rcItmBin = this.getMnfJcOpItmBin1();
        ViewObjectImpl rcItmLot = this.getMnfJcOpItmLot1();
        ViewObjectImpl viewSummSr = this.getMnfJcOpItmSrVw1();
        ViewObject mnfRc = this.getMnfJc1();
        Row rcRow = mnfRc.getCurrentRow();
        Row currItm = rcItm.getCurrentRow();
        String binChkFlg = resolvEl("#{pageFlowScope.GLBL_ORG_BIN_CHK}").toString();
        Row[] srRow = this.getMnfJcOpItmSrVw1().getFilteredRows("ItmId", currItm.getAttribute("ItmId"));
        ArrayList<String> arrlist = new ArrayList<String>();
        // add  selected  lotId in a arraylist
        if (srRow.length > 0) {
            for (Row r1 : srRow) {
                if (r1.getAttribute("SelectSrNoStkTrans") != null) {
                    if ("Y".equalsIgnoreCase(r1.getAttribute("SelectSrNoStkTrans").toString())) {
                        String lotId = r1.getAttribute("LotId").toString();
                        //
                        arrlist.add(lotId);
                        //   System.out.println("Lot id new : " + lotId);
                    }
                }
            }
            // System.out.println("No of lots added : " + arrlist);
        }
        // Using Set for remove duplicate LotId
        Set<String> lotset = new HashSet<String>(arrlist);
        for (String key : lotset) {
            // Create new row in lot table Key as LotId and lotVal use quantity for SR No Selection
            Integer lotQty = Collections.frequency(arrlist, key);
            Number lotvalu = new Number(0);
            try {
                lotvalu = new Number(lotQty);
            } catch (Exception e) {
                e.printStackTrace();
                //   System.out.println("Error in AMimpl");
            }
            //    System.out.println(key + ": " + Collections.frequency(arrlist, key) + "------" + lotvalu);
            // RowQualifier for filter Lot table to check Lot exist or not.....
            RowQualifier rowQualifier = new RowQualifier(rcItmLot);
            rowQualifier.setWhereClause(" DocId ='" + currItm.getAttribute("DocId") + "' and ItmId = '" +
                                        currItm.getAttribute("ItmId") + "' and LotId = '" + key + "'");
            Row[] rows = rcItmLot.getFilteredRows(rowQualifier);
            //    System.out.println("" + rowQualifier.getExprStr());
            if (rows.length > 0) { // update lot quantity if lot already exist......:
                //       System.out.println(" ALREADY PRESENT  LOT-----");
                for (Row r : rows) {
                    String lotId = (String) r.getAttribute("LotId");
                    //      System.out.println(" Lot id is : -----" + lotId);
                    Number prLotVal = (Number) r.getAttribute("ItmQty");
                    Number newQty = prLotVal.add(lotvalu);
                    //    System.out.println("new vale FOR LOT----------  " + newQty);
                    r.setAttribute("ItmQty", newQty);
                    r.setAttribute("ItmQtyBs", newQty);

                    BigDecimal avail = new BigDecimal(0);
                    try {
                        String whId = rcRow.getAttribute("WhId").toString();
                        /*  p_cld_id        VARCHAR2,
                            p_sloc_id       NUMBER,
                            p_org_id        VARCHAR2,
                            p_wh_id         VARCHAR2,
                            p_itm_id        VARCHAR2,
                            p_lot_id VARCHAR2,
                            P_FYID NUMBER     */
                        avail =
                            (BigDecimal) callStoredFunction(Types.NUMERIC, "MNF.FN_MNF_GET_ITM_LOT_PRICE(?,?,?,?,?,?,?,?)", new Object[] {
                                                            CldId, SlocId, OrgId, whId, currItm.getAttribute("ItmId"),
                                                            lotId, rcRow.getAttribute("FyId"),currItm.getAttribute("IssuType")
                        });
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    if (avail.compareTo(new BigDecimal(-1)) == 0) {
                        avail = new BigDecimal(0);
                    }
                    Number multiply = new Number(0);
                    try {
                        multiply = newQty.multiply(new Number(avail));
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                    //   System.out.println("Item Lot Cost : " + multiply);
                    r.setAttribute("ItmLotCost", multiply);
                }
            } else {
                //   System.out.println("CREATE NEW  LOT-----");
                Row insrtLot = rcItmLot.createRow();
                insrtLot.setAttribute("LotId", key);
                insrtLot.setAttribute("ItmQty", lotvalu);
                insrtLot.setAttribute("ItmQtyBs", lotvalu);
                insrtLot.setAttribute("WhId", rcRow.getAttribute("WhId"));
                insrtLot.setAttribute("ItmUom", currItm.getAttribute("ItmUom"));
                BigDecimal avail = new BigDecimal(0);
                try {
                    String whId = rcRow.getAttribute("WhId").toString();

                    avail = (BigDecimal) callStoredFunction(Types.NUMERIC, "MNF.FN_MNF_GET_ITM_LOT_PRICE(?,?,?,?,?,?,?,?)", new Object[] {
                                                            CldId, SlocId, OrgId, whId, currItm.getAttribute("ItmId"),
                                                            key, rcRow.getAttribute("FyId"),currItm.getAttribute("IssuType")
                    });


                    //    System.out.println("Lot price is : " + avail);

                } catch (Exception e) {
                    e.printStackTrace();
                }
                if (avail.compareTo(new BigDecimal(-1)) == 0) {
                    avail = new BigDecimal(0);
                }
                Number multiply = new Number(0);
                try {
                    multiply = lotvalu.multiply(new Number(avail));
                } catch (SQLException e) {
                    e.printStackTrace();
                }
                //    System.out.println("Lot inserted");
                insrtLot.setAttribute("ItmLotCost", multiply);
                rcItmLot.insertRow(insrtLot);
                //rcItmLot.executeQuery();
            }
        }
        Iterator i = lotset.iterator();
        //    System.out.println("----------" + lotset);
        // Adding Bin in bin Table for using lotSet Value When organisation using Bin concept binChkFlg == Y
        if ("Y".equalsIgnoreCase(binChkFlg)) {
            while (i.hasNext()) {
                String lot = (String) i.next();
                ArrayList<String> arrListbin = new ArrayList<String>(); // for Storing all bin selected paticular lot
                //  System.out.println("--------------" + lot);
                for (Row r2 : srRow) {
                    if (r2.getAttribute("SelectSrNoStkTrans") != null) {
                        if ("Y".equalsIgnoreCase(r2.getAttribute("SelectSrNoStkTrans").toString()) &&
                            r2.getAttribute("LotId").toString().equals(lot)) {
                            arrListbin.add(r2.getAttribute("BinId").toString());
                        }
                    }
                }
                // Using Set for remove duplicate Bin
                Set<String> binSet = new HashSet<String>(arrListbin);
                for (String key : binSet) {
                    // Create new row in bin table Key as BinIds and lotVal use quantity for SR No Selection
                    Integer binQty = Collections.frequency(arrListbin, key);
                    Number binvalu = new Number(0);
                    try {
                        binvalu = new Number(binQty);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    // RowQualifier for filter bin table to check bin exist or not.....
                    RowQualifier rowQualifier = new RowQualifier(rcItmBin);
                    rowQualifier.setWhereClause(" DocId ='" + currItm.getAttribute("DocId") + "' and ItmId = '" +
                                                currItm.getAttribute("ItmId") + "' and LotId = '" + lot +
                                                "' and BinId ='" + key + "'");
                    Row[] rows = rcItmBin.getFilteredRows(rowQualifier);
                    //   System.out.println("" + rowQualifier.getExprStr());
                    if (rows.length > 0) {
                        //    System.out.println("BIN ALREADY PRESENT FOR LOT-----");
                        for (Row r : rows) {
                            Number prBinVal = (Number) r.getAttribute("ItmQty");
                            Number newQty = prBinVal.add(binvalu);
                            //   System.out.println("new vale FOR BIN----------  " + newQty);
                            r.setAttribute("ItmQty", newQty);
                            r.setAttribute("ItmQtyBs", newQty);
                        }
                    } else {
                        //   System.out.println("Create new Bin For Lot-----");
                        Row binInst = rcItmBin.createRow();
                        binInst.setAttribute("LotId", lot);
                        binInst.setAttribute("BinId", key);
                        binInst.setAttribute("ItmQty", binvalu);
                        binInst.setAttribute("ItmQtyBs", binvalu);
                        //  System.out.println("Values in Bin-" + lot + "Bin id-" + key + "quant-" + binvalu);

                        binInst.setAttribute("WhId", rcRow.getAttribute("WhId"));
                        binInst.setAttribute("ItmUom", currItm.getAttribute("ItmUom"));

                        rcItmBin.insertRow(binInst);
                        //rcItmBin.executeQuery();
                        //   System.out.println(key + ": " + Collections.frequency(arrListbin, key) + "-------" + binvalu);
                    }
                }
                //  System.out.println("" + arrListbin);
                // System.out.println("" + binSet);
            }
        }
        if (srRow.length > 0) {
            for (Row rr : srRow) {
                if (rr.getAttribute("SelectSrNoStkTrans") != null) {
                    if ("Y".equalsIgnoreCase(rr.getAttribute("SelectSrNoStkTrans").toString())) {
                        //  System.out.println("Create SrNo for Selected Serials");
                        Row srInst = rcItmSr.createRow();
                        srInst.setAttribute("LotId", rr.getAttribute("LotId"));
                        srInst.setAttribute("BinId", rr.getAttribute("BinId"));
                        srInst.setAttribute("SrNo", rr.getAttribute("SrNo"));
                        srInst.setAttribute("ItmQty", new Number(1));
                        srInst.setAttribute("ItmQtyBs", new Number(1));
                        srInst.setAttribute("WhId", rcRow.getAttribute("WhId"));
                        srInst.setAttribute("ItmUom", currItm.getAttribute("ItmUom"));

                        rcItmSr.insertRow(srInst);
                        //rcItmSr.executeQuery();
                    }
                }
            }
        }
        /* this.getMnfJcOpItmLot1().executeQuery();
        this.getMnfJcOpItmBin1().executeQuery();
        this.getMnfJcOpItmSr1().executeQuery();
        viewSummSr.executeQuery(); */
        //this.getDBTransaction().Changes();
    }

    /*------------------------------For Manual Entry(Shop floor)-------------------------*/
    public void InsertIntoPickItmSrSF(String CldId, String HoOrgId, String OrgId, Integer SlocId) {
        ViewObjectImpl rcItm = this.getMnfJcOpItmAll();
        ViewObjectImpl rcItmSr = this.getMnfJcOpItmSr1();
        ViewObjectImpl rcItmBin = this.getMnfJcOpItmBin1();
        ViewObjectImpl rcItmLot = this.getMnfJcOpItmLot1();
        ViewObjectImpl viewSummSr = this.getMnfJcOpItmSrRqmtVw1();
        ViewObject mnfRc = this.getMnfJc1();
        Row rcRow = mnfRc.getCurrentRow();
        Row currItm = rcItm.getCurrentRow();
        String binChkFlg = resolvEl("#{pageFlowScope.GLBL_ORG_BIN_CHK}").toString();
        Row[] srRow = this.getMnfJcOpItmSrRqmtVw1().getFilteredRows("ItmId", currItm.getAttribute("ItmId"));
        ArrayList<String> arrlist = new ArrayList<String>();
        // add  selected  lotId in a arraylist
        if (srRow.length > 0) {
            for (Row r1 : srRow) {
                if (r1.getAttribute("SelectSrNoStkTransSF") != null) {
                    if ("Y".equalsIgnoreCase(r1.getAttribute("SelectSrNoStkTransSF").toString())) {
                        String lotId = r1.getAttribute("LotId").toString();
                        //
                        arrlist.add(lotId);
                        //   System.out.println("Lot id new : " + lotId);
                    }
                }
            }
            // System.out.println("No of lots added : " + arrlist);
        }
        // Using Set for remove duplicate LotId
        Set<String> lotset = new HashSet<String>(arrlist);
        for (String key : lotset) {
            // Create new row in lot table Key as LotId and lotVal use quantity for SR No Selection
            Integer lotQty = Collections.frequency(arrlist, key);
            Number lotvalu = new Number(0);
            try {
                lotvalu = new Number(lotQty);
            } catch (Exception e) {
                e.printStackTrace();
                //   System.out.println("Error in AMimpl");
            }
            //    System.out.println(key + ": " + Collections.frequency(arrlist, key) + "------" + lotvalu);
            // RowQualifier for filter Lot table to check Lot exist or not.....
            RowQualifier rowQualifier = new RowQualifier(rcItmLot);
            rowQualifier.setWhereClause(" DocId ='" + currItm.getAttribute("DocId") + "' and ItmId = '" +
                                        currItm.getAttribute("ItmId") + "' and LotId = '" + key + "'");
            Row[] rows = rcItmLot.getFilteredRows(rowQualifier);
            //    System.out.println("" + rowQualifier.getExprStr());
            if (rows.length > 0) { // update lot quantity if lot already exist......:
                //       System.out.println(" ALREADY PRESENT  LOT-----");
                for (Row r : rows) {
                    String lotId = (String) r.getAttribute("LotId");
                    //      System.out.println(" Lot id is : -----" + lotId);
                    Number prLotVal = (Number) r.getAttribute("ItmQty");
                    Number newQty = prLotVal.add(lotvalu);
                    //    System.out.println("new vale FOR LOT----------  " + newQty);
                    r.setAttribute("ItmQty", newQty);
                    r.setAttribute("ItmQtyBs", newQty);

                    BigDecimal avail = new BigDecimal(0);
                    try {
                        String whId = rcRow.getAttribute("WhId").toString();
                        /*  p_cld_id        VARCHAR2,
                            p_sloc_id       NUMBER,
                            p_org_id        VARCHAR2,
                            p_wh_id         VARCHAR2,
                            p_itm_id        VARCHAR2,
                            p_lot_id VARCHAR2,
                            P_FYID NUMBER     */
                        avail =
                            (BigDecimal) callStoredFunction(Types.NUMERIC, "MNF.FN_MNF_GET_ITM_LOT_PRICE(?,?,?,?,?,?,?,?)", new Object[] {
                                                            CldId, SlocId, OrgId, whId, currItm.getAttribute("ItmId"),
                                                            lotId, rcRow.getAttribute("FyId"),currItm.getAttribute("IssuType")
                        });
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    if (avail.compareTo(new BigDecimal(-1)) == 0) {
                        avail = new BigDecimal(0);
                    }
                    Number multiply = new Number(0);
                    try {
                        multiply = newQty.multiply(new Number(avail));
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                    //   System.out.println("Item Lot Cost : " + multiply);
                    r.setAttribute("ItmLotCost", multiply);
                }
            } else {
                //   System.out.println("CREATE NEW  LOT-----");
                Row insrtLot = rcItmLot.createRow();
                insrtLot.setAttribute("LotId", key);
                insrtLot.setAttribute("ItmQty", lotvalu);
                insrtLot.setAttribute("ItmQtyBs", lotvalu);
                insrtLot.setAttribute("WhId", rcRow.getAttribute("WhId"));
                insrtLot.setAttribute("ItmUom", currItm.getAttribute("ItmUom"));
                BigDecimal avail = new BigDecimal(0);
                try {
                    String whId = rcRow.getAttribute("WhId").toString();

                    avail = (BigDecimal) callStoredFunction(Types.NUMERIC, "MNF.FN_MNF_GET_ITM_LOT_PRICE(?,?,?,?,?,?,?,?)", new Object[] {
                                                            CldId, SlocId, OrgId, whId, currItm.getAttribute("ItmId"),
                                                            key, rcRow.getAttribute("FyId"),currItm.getAttribute("IssuType")
                    });


                    //    System.out.println("Lot price is : " + avail);
                } catch (Exception e) {
                    e.printStackTrace();
                }
                if (avail.compareTo(new BigDecimal(-1)) == 0) {
                    avail = new BigDecimal(0);
                }
                Number multiply = new Number(0);
                try {
                    multiply = lotvalu.multiply(new Number(avail));
                } catch (SQLException e) {
                    e.printStackTrace();
                }
                //    System.out.println("Lot inserted");
                insrtLot.setAttribute("ItmLotCost", multiply);
                rcItmLot.insertRow(insrtLot);
                //rcItmLot.executeQuery();
                
            }
        }
        Iterator i = lotset.iterator();
        //    System.out.println("----------" + lotset);
        // Adding Bin in bin Table for using lotSet Value When organisation using Bin concept binChkFlg == Y
        if ("Y".equalsIgnoreCase(binChkFlg)) {
            while (i.hasNext()) {
                String lot = (String) i.next();
                ArrayList<String> arrListbin = new ArrayList<String>(); // for Storing all bin selected paticular lot
                //  System.out.println("--------------" + lot);
                for (Row r2 : srRow) {
                    if (r2.getAttribute("SelectSrNoStkTransSF") != null) {
                        if ("Y".equalsIgnoreCase(r2.getAttribute("SelectSrNoStkTransSF").toString()) &&
                            r2.getAttribute("LotId").toString().equals(lot)) {
                            arrListbin.add(r2.getAttribute("BinId").toString());
                        }
                    }
                }
                // Using Set for remove duplicate Bin
                Set<String> binSet = new HashSet<String>(arrListbin);
                for (String key : binSet) {
                    // Create new row in bin table Key as BinIds and lotVal use quantity for SR No Selection
                    Integer binQty = Collections.frequency(arrListbin, key);
                    Number binvalu = new Number(0);
                    try {
                        binvalu = new Number(binQty);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    // RowQualifier for filter bin table to check bin exist or not.....
                    RowQualifier rowQualifier = new RowQualifier(rcItmBin);
                    rowQualifier.setWhereClause(" DocId ='" + currItm.getAttribute("DocId") + "' and ItmId = '" +
                                                currItm.getAttribute("ItmId") + "' and LotId = '" + lot +
                                                "' and BinId ='" + key + "'");
                    Row[] rows = rcItmBin.getFilteredRows(rowQualifier);
                    //   System.out.println("" + rowQualifier.getExprStr());
                    if (rows.length > 0) {
                        //    System.out.println("BIN ALREADY PRESENT FOR LOT-----");
                        for (Row r : rows) {
                            Number prBinVal = (Number) r.getAttribute("ItmQty");
                            Number newQty = prBinVal.add(binvalu);
                            //   System.out.println("new vale FOR BIN----------  " + newQty);
                            r.setAttribute("ItmQty", newQty);
                            r.setAttribute("ItmQtyBs", newQty);
                        }
                    } else {
                        //   System.out.println("Create new Bin For Lot-----");
                        Row binInst = rcItmBin.createRow();
                        binInst.setAttribute("LotId", lot);
                        binInst.setAttribute("BinId", key);
                        binInst.setAttribute("ItmQty", binvalu);
                        binInst.setAttribute("ItmQtyBs", binvalu);
                        //  System.out.println("Values in Bin-" + lot + "Bin id-" + key + "quant-" + binvalu);

                        binInst.setAttribute("WhId", rcRow.getAttribute("WhId"));
                        binInst.setAttribute("ItmUom", currItm.getAttribute("ItmUom"));

                        rcItmBin.insertRow(binInst);
                        //rcItmBin.executeQuery();
                        //   System.out.println(key + ": " + Collections.frequency(arrListbin, key) + "-------" + binvalu);
                    }
                }
                //  System.out.println("" + arrListbin);
                // System.out.println("" + binSet);
            }
        }
        if (srRow.length > 0) {
            for (Row rr : srRow) {
                if (rr.getAttribute("SelectSrNoStkTransSF") != null) {
                    if ("Y".equalsIgnoreCase(rr.getAttribute("SelectSrNoStkTransSF").toString())) {
                        //  System.out.println("Create SrNo for Selected Serials");
                        Row srInst = rcItmSr.createRow();
                        srInst.setAttribute("LotId", rr.getAttribute("LotId"));
                        srInst.setAttribute("BinId", rr.getAttribute("BinId"));
                        srInst.setAttribute("SrNo", rr.getAttribute("SrNo"));
                        srInst.setAttribute("ItmQty", new Number(1));
                        srInst.setAttribute("ItmQtyBs", new Number(1));
                        srInst.setAttribute("WhId", rcRow.getAttribute("WhId"));
                        srInst.setAttribute("ItmUom", currItm.getAttribute("ItmUom"));

                        rcItmSr.insertRow(srInst);
                        //rcItmSr.executeQuery();
                    }
                }
            }
        }
        /* this.getMnfJcOpItmLot1().executeQuery();
        this.getMnfJcOpItmBin1().executeQuery();
        this.getMnfJcOpItmSr1().executeQuery();
        viewSummSr.executeQuery();
        this.getDBTransaction().Changes(); */
    }

    /**To Add Item Lot Wise
     * Method to select lot for item (If Organisation is not using bin and Items are not serialised)
     */

    public void InsertIntoRcItmLot(String CldID, String HoOrgId, String OrgId, Integer SlocId) {

        ViewObjectImpl mtlItm = this.getMnfJcOpItmAll();
        ViewObjectImpl mtlLot = this.getMnfJcOpItmLot1();
        ViewObject mnfRc = this.getMnfJc1();

        Row currItm = mtlItm.getCurrentRow();
        Row rcRow = mnfRc.getCurrentRow();

        oracle.jbo.domain.Number zero = new oracle.jbo.domain.Number(0);
        Row[] srRow = this.getMnfJcOpItmLotVw1().getFilteredRows("ItmId", currItm.getAttribute("ItmId"));
        //    System.out.println("lenth sr     " + srRow.length);

        if (srRow.length > 0) {
            for (Row rr : srRow) {
                if (rr.getAttribute("TransIssuQtyValue") != null) {
                    if (((oracle.jbo.domain.Number) rr.getAttribute("TransIssuQtyValue")).compareTo(zero) >= 0) {

                        // Filter Lot Table to ckeck Lot exist or not, Basis of DocId , SoId , ItmId and LotId

                        RowQualifier rowQualifier = new RowQualifier(mtlLot);
                        rowQualifier.setWhereClause("DocId = '" + currItm.getAttribute("DocId") + "' and ItmId = '" +
                                                    currItm.getAttribute("ItmId") + "' and LotId = '" +
                                                    rr.getAttribute("LotId").toString() + "'");
                        Row[] rows = mtlLot.getFilteredRows(rowQualifier);
                        //    System.out.println("RowQuali String-" + rowQualifier.getExprStr());

                        // Check that Lot exist or not for that item
                        if (rows.length > 0) {
                            for (Row r : rows) {
                                if (((oracle.jbo.domain.Number) rr.getAttribute("TransIssuQtyValue")).compareTo(zero) ==
                                    0) {

                                    //      System.out.println("Lot remove-------------------");
                                    r.remove();
                                } else if (((oracle.jbo.domain.Number) rr.getAttribute("TransIssuQtyValue")).compareTo(zero) >
                                           0) {

                                    //      System.out.println("Lot Update -------------------");
                                    r.setAttribute("ItmQty", rr.getAttribute("TransIssuQtyValue"));
                                    r.setAttribute("ItmQtyBs", rr.getAttribute("TransIssuQtyValue"));
                                    String LotId = (String) r.getAttribute("LotId");
                                    //      System.out.println("Lot Already Exists | Lot Number is : " + LotId);

                                    //-------------------------------------------------------------------------------------------------------------
                                    BigDecimal avail = new BigDecimal(0);
                                    try {
                                        String whId = rcRow.getAttribute("WhId").toString();

                                        avail =
                                            (BigDecimal) callStoredFunction(Types.NUMERIC,
                                                                            "MNF.FN_MNF_GET_ITM_LOT_PRICE(?,?,?,?,?,?,?,?)", new Object[] {
                                                                            CldID, SlocId, OrgId, whId,
                                                                            currItm.getAttribute("ItmId"), LotId,
                                                                            rcRow.getAttribute("FyId"),currItm.getAttribute("IssuType")
                                        });
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                    }
                                    if (avail.compareTo(new BigDecimal(-1)) == 0) {
                                        avail = new BigDecimal(0);
                                    }
                                    Number lotQty = new Number(0);
                                    lotQty = (Number) rr.getAttribute("TransIssuQtyValue");
                                    Number multiply = new Number(0);
                                    try {
                                        multiply = lotQty.multiply(new Number(avail));
                                    } catch (SQLException e) {
                                        e.printStackTrace();
                                    }
                                    //     System.out.println("Item Lot Cost : " + multiply);
                                    r.setAttribute("ItmLotCost", multiply);

                                    //-------------------------------------------------------------------------------------------------------------
                                }
                            }
                        } else {
                            if (((oracle.jbo.domain.Number) rr.getAttribute("TransIssuQtyValue")).compareTo(zero) > 0) {
                                Row lotInst = mtlLot.createRow();
                                lotInst.setAttribute("LotId", rr.getAttribute("LotId"));
                                lotInst.setAttribute("ItmQty", rr.getAttribute("TransIssuQtyValue"));
                                lotInst.setAttribute("ItmQtyBs", rr.getAttribute("TransIssuQtyValue"));
                                lotInst.setAttribute("ItmUom", currItm.getAttribute("ItmUom"));
                                //    System.out.println("Warehouse is--" + rr.getAttribute("WhId"));
                                lotInst.setAttribute("WhId", rr.getAttribute("WhId"));
                                //-------------------------------------------------------------------------------------------------------------
                                String LotId = (String) rr.getAttribute("LotId");
                                //   System.out.println("Lot Do not Exists | New Lot Number is generated : " + LotId);
                                BigDecimal avail = new BigDecimal(0);
                                try {
                                    String whId = rcRow.getAttribute("WhId").toString();

                                    avail =
                                        (BigDecimal) callStoredFunction(Types.NUMERIC,
                                                                        "MNF.FN_MNF_GET_ITM_LOT_PRICE(?,?,?,?,?,?,?,?)", new Object[] {
                                                                        CldID, SlocId, OrgId, whId,
                                                                        currItm.getAttribute("ItmId"), LotId,
                                                                        rcRow.getAttribute("FyId"),currItm.getAttribute("IssuType")
                                    });
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }
                                Number lotQty = new Number(0);
                                lotQty = (Number) rr.getAttribute("TransIssuQtyValue");
                                if (avail.compareTo(new BigDecimal(-1)) == 0) {
                                    avail = new BigDecimal(0);
                                }
                                Number multiply = new Number(0);
                                try {
                                    multiply = lotQty.multiply(new Number(avail));
                                } catch (SQLException e) {
                                    e.printStackTrace();
                                }
                                //    System.out.println("Item Lot Cost : " + multiply);
                                lotInst.setAttribute("ItmLotCost", multiply);
                                mtlLot.insertRow(lotInst);
                                //mtlLot.executeQuery();
                            }
                        }
                    }
                }
            }
        }
        //mtlItm.executeQuery();
        //this.getDBTransaction().Changes();
    }

    /*---------------------------In case Manual(Shop floor)-----------------------------*/
    public void InsertIntoRcItmLotSF(String CldID, String HoOrgId, String OrgId, Integer SlocId) {
        //System.out.println("Inner Insert lot function....");
        ViewObjectImpl mtlItm = this.getMnfJcOpItmAll();
        ViewObjectImpl mtlLot = this.getMnfJcOpItmLot1();
        ViewObject mnfRc = this.getMnfJc1();

        Row currItm = mtlItm.getCurrentRow();
        Row rcRow = mnfRc.getCurrentRow();

        oracle.jbo.domain.Number zero = new oracle.jbo.domain.Number(0);
        Row[] srRow = this.getMnfJcOpItmLotRqmtVw1().getFilteredRows("ItmId", currItm.getAttribute("ItmId"));
            //System.out.println("lenth sr    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% " + srRow.length);

        if (srRow.length > 0) {
            for (Row rr : srRow) {
                if (rr.getAttribute("TransIssuQtyValueSF") != null) {
                    if (((oracle.jbo.domain.Number) rr.getAttribute("TransIssuQtyValueSF")).compareTo(zero) >= 0) {

                        // Filter Lot Table to ckeck Lot exist or not, Basis of DocId , SoId , ItmId and LotId

                        RowQualifier rowQualifier = new RowQualifier(mtlLot);
                        rowQualifier.setWhereClause("DocId = '" + currItm.getAttribute("DocId") + "' and ItmId = '" +
                                                    currItm.getAttribute("ItmId") + "' and LotId = '" +
                                                    rr.getAttribute("LotId").toString() + "'");
                        Row[] rows = mtlLot.getFilteredRows(rowQualifier);
                        //    System.out.println("RowQuali String-" + rowQualifier.getExprStr());

                        // Check that Lot exist or not for that item
                        if (rows.length > 0) {
                            for (Row r : rows) {
                                if (((oracle.jbo.domain.Number) rr.getAttribute("TransIssuQtyValueSF")).compareTo(zero) ==
                                    0) {

                                    //      System.out.println("Lot remove-------------------");
                                    r.remove();
                                } else if (((oracle.jbo.domain.Number) rr.getAttribute("TransIssuQtyValueSF")).compareTo(zero) >
                                           0) {

                                    //      System.out.println("Lot Update -------------------");
                                    r.setAttribute("ItmQty", rr.getAttribute("TransIssuQtyValueSF"));
                                    r.setAttribute("ItmQtyBs", rr.getAttribute("TransIssuQtyValueSF"));
                                    String LotId = (String) r.getAttribute("LotId");
                                    //      System.out.println("Lot Already Exists | Lot Number is : " + LotId);

                                    //-------------------------------------------------------------------------------------------------------------
                                    BigDecimal avail = new BigDecimal(0);
                                    try {
                                        String whId = rcRow.getAttribute("WhId").toString();

                                        avail =
                                            (BigDecimal) callStoredFunction(Types.NUMERIC,
                                                                            "MNF.FN_MNF_GET_ITM_LOT_PRICE(?,?,?,?,?,?,?,?)", new Object[] {
                                                                            CldID, SlocId, OrgId, whId,
                                                                            currItm.getAttribute("ItmId"), LotId,
                                                                            rcRow.getAttribute("FyId"),currItm.getAttribute("IssuType")
                                        });
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                    }
                                    if (avail.compareTo(new BigDecimal(-1)) == 0) {
                                        avail = new BigDecimal(0);
                                    }
                                    Number lotQty = new Number(0);
                                    lotQty = (Number) rr.getAttribute("TransIssuQtyValueSF");
                                    Number multiply = new Number(0);
                                    try {
                                        multiply = lotQty.multiply(new Number(avail));
                                    } catch (SQLException e) {
                                        e.printStackTrace();
                                    }
                                    //     System.out.println("Item Lot Cost : " + multiply);
                                    r.setAttribute("ItmLotCost", multiply);

                                    //-------------------------------------------------------------------------------------------------------------
                                }
                            }
                        } else {
                            if (((oracle.jbo.domain.Number) rr.getAttribute("TransIssuQtyValueSF")).compareTo(zero) >
                                0) {
                                Row lotInst = mtlLot.createRow();
                                lotInst.setAttribute("LotId", rr.getAttribute("LotId"));
                                lotInst.setAttribute("ItmQty", rr.getAttribute("TransIssuQtyValueSF"));
                                lotInst.setAttribute("ItmQtyBs", rr.getAttribute("TransIssuQtyValueSF"));
                                lotInst.setAttribute("ItmUom", currItm.getAttribute("ItmUom"));
                                //    System.out.println("Warehouse is--" + rr.getAttribute("WhId"));
                                lotInst.setAttribute("WhId", rr.getAttribute("WhId"));
                                //-------------------------------------------------------------------------------------------------------------
                                String LotId = (String) rr.getAttribute("LotId");
                                //   System.out.println("Lot Do not Exists | New Lot Number is generated : " + LotId);
                                BigDecimal avail = new BigDecimal(0);
                                try {
                                    String whId = rcRow.getAttribute("WhId").toString();

                                    avail =
                                        (BigDecimal) callStoredFunction(Types.NUMERIC,
                                                                        "MNF.FN_MNF_GET_ITM_LOT_PRICE(?,?,?,?,?,?,?,?)", new Object[] {
                                                                        CldID, SlocId, OrgId, whId,
                                                                        currItm.getAttribute("ItmId"), LotId,
                                                                        rcRow.getAttribute("FyId"),currItm.getAttribute("IssuType")
                                    });
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }
                                Number lotQty = new Number(0);
                                lotQty = (Number) rr.getAttribute("TransIssuQtyValueSF");
                                if (avail.compareTo(new BigDecimal(-1)) == 0) {
                                    avail = new BigDecimal(0);
                                }
                                Number multiply = new Number(0);
                                try {
                                    multiply = lotQty.multiply(new Number(avail));
                                } catch (SQLException e) {
                                    e.printStackTrace();
                                }
                                //    System.out.println("Item Lot Cost : " + multiply);
                                lotInst.setAttribute("ItmLotCost", multiply);

                                mtlLot.insertRow(lotInst);
//                                mtlLot.executeQuery();
                            }
                        }
                    }
                }
            }
        }
//        mtlItm.executeQuery();
//        this.getDBTransaction().Changes();
    }

    /**To Select Bin and Lot for Item
     * Method to select lot and bin for item (If Organisation is using bin and Items are not serialised)
     * @param
     */
    public void InsertIntoRcItmBin(String CldID, String HoOrgId, String OrgId, Integer SlocId) {
        ViewObjectImpl mtlItm = this.getMnfJcOpItmAll();
        ViewObjectImpl mtlBin = this.getMnfJcOpItmBin1();

        ViewObjectImpl mtlLot = this.getMnfJcOpItmLot1();
        Row currItm = mtlItm.getCurrentRow();

        ViewObject mnfRc = this.getMnfJc1();
        Row rcRow = mnfRc.getCurrentRow();
        Number zero = new Number(0);
        ViewObjectImpl stkSummBin = this.getMnfJcOpItmBinVw1();
        Row[] binRow = this.getMnfJcOpItmBinVw1().getFilteredRows("ItmId", currItm.getAttribute("ItmId"));

        ArrayList<String> arrlist = new ArrayList<String>();

        if (binRow.length > 0) {
            for (Row r1 : binRow) {
                if (r1.getAttribute("TransIssueQty") != null) {
                    if (((Number) r1.getAttribute("TransIssueQty")).compareTo(zero) > 0) {
                        String lotId = r1.getAttribute("LotId").toString();
                        arrlist.add(lotId);
                        //  System.out.println("lot id Bin-- " + lotId);
                    }
                }
            }
            //    System.out.println("Lot ArrayList size " + arrlist.size());
        }
        Set<String> lotset = new HashSet<String>(arrlist);

        Iterator itr = lotset.iterator();
        while (itr.hasNext()) {
            String lotId = itr.next().toString();
            Number lotQty = new Number(0);
            for (Row r1 : binRow) {
                if (r1.getAttribute("TransIssueQty") != null) {
                    if (((Number) r1.getAttribute("TransIssueQty")).compareTo(zero) > 0 &&
                        r1.getAttribute("LotId").toString().equals(lotId)) {
                        lotQty = lotQty.add((Number) r1.getAttribute("TransIssueQty"));
                    }
                }
            }
            //       System.out.println(" lot id   ---" + lotId + "----qty------" + lotQty);

            // Check lot already created or not

            RowQualifier rowQualifier = new RowQualifier(mtlLot);
            rowQualifier.setWhereClause(" DocId ='" + currItm.getAttribute("DocId") + "' and ItmId = '" +
                                        currItm.getAttribute("ItmId") + "' and LotId = '" + lotId + "'");
            Row[] rows = mtlLot.getFilteredRows(rowQualifier);
            //  System.out.println("" + rowQualifier.getExprStr());
            if (rows.length > 0) {
                for (Row r : rows) {
                    r.setAttribute("ItmQty", lotQty);
                    r.setAttribute("ItmQtyBs", lotQty);
                }
            } else {
                RowQualifier rq = new RowQualifier(stkSummBin);
                rq.setWhereClause("ItmId='" + currItm.getAttribute("ItmId"));
                Row binRows[] = stkSummBin.getFilteredRows(rq);
                //system.out.println("Total Item for This Lot -" + binRows.length);

                Row instLot = mtlLot.createRow();
                mtlLot.insertRow(instLot);
                instLot.setAttribute("LotId", lotId);
                instLot.setAttribute("ItmQty", lotQty);
                instLot.setAttribute("ItmQtyBs", lotQty);
                instLot.setAttribute("ItmUom", currItm.getAttribute("ItmUom"));
                instLot.setAttribute("WhId", rcRow.getAttribute("WhId"));
                BigDecimal avail = new BigDecimal(0);
                try {
                    String whId = rcRow.getAttribute("WhId").toString();

                    avail = (BigDecimal) callStoredFunction(Types.NUMERIC, "MNF.FN_MNF_GET_ITM_LOT_PRICE(?,?,?,?,?,?,?,?)", new Object[] {
                                                            CldID, SlocId, OrgId, whId, currItm.getAttribute("ItmId"),
                                                            lotId, rcRow.getAttribute("FyId"),currItm.getAttribute("IssuType")
                    });

                } catch (Exception e) {
                    e.printStackTrace();
                }
                if (avail.compareTo(new BigDecimal(-1)) == 0) {
                    avail = new BigDecimal(0);
                }
                Number multiply = new Number(0);
                try {
                    multiply = (Number) lotQty.multiply(new Number(avail));
                } catch (SQLException e) {
                    e.printStackTrace();
                }
                //    System.out.println("Item Lot Cost : " + multiply);
                instLot.setAttribute("ItmLotCost", multiply);

                //mtlLot.executeQuery();
            }
        }
        //      System.out.println("----------" + lotset);
        if (binRow.length > 0) {
            for (Row rr : binRow) {
                if (rr.getAttribute("TransIssueQty") != null) {
                    if (((Number) rr.getAttribute("TransIssueQty")).compareTo(zero) >= 0) {
                        //      System.out.println("Condition true create Bin");

                        // Check bin already created or not

                        RowQualifier rowQualifier = new RowQualifier(mtlBin);
                        rowQualifier.setWhereClause(" DocId ='" + currItm.getAttribute("DocId") + "' and ItmId = '" +
                                                    currItm.getAttribute("ItmId") + "' and LotId = '" +
                                                    rr.getAttribute("LotId").toString() + "' and BinId = '" +
                                                    rr.getAttribute("BinId").toString() + "'");
                        Row[] rows = mtlBin.getFilteredRows(rowQualifier);
                        //       System.out.println("" + rowQualifier.getExprStr());
                        //      System.out.println("length   " + rows.length);
                        if (rows.length > 0) {
                            for (Row r : rows) {
                                if (((Number) rr.getAttribute("TransIssueQty")).compareTo(zero) == 0) {
                                    //       System.out.println("row removed ----------");
                                    r.remove();
                                } else if (((Number) rr.getAttribute("TransIssueQty")).compareTo(zero) > 0) {
                                    // Update created bin quantity.
                                    //        System.out.println("row update ----------");
                                    r.setAttribute("ItmQty", rr.getAttribute("TransIssueQty"));
                                    r.setAttribute("ItmQtyBs", rr.getAttribute("TransIssueQty"));
                                }
                            }
                        } else {
                            // if row  not exist create new Bin row  .
                            if (((Number) rr.getAttribute("TransIssueQty")).compareTo(zero) > 0) {
                                //      System.out.println("row created ----------");
                                Row binInst = mtlBin.createRow();
                                binInst.setAttribute("LotId", rr.getAttribute("LotId"));
                                binInst.setAttribute("BinId", rr.getAttribute("BinId"));
                                binInst.setAttribute("ItmQty", rr.getAttribute("TransIssueQty"));
                                binInst.setAttribute("ItmQtyBs", rr.getAttribute("TransIssueQty"));
                                binInst.setAttribute("WhId", rcRow.getAttribute("WhId"));
                                binInst.setAttribute("ItmUom", currItm.getAttribute("ItmUom"));

                                mtlBin.insertRow(binInst);
                                //mtlBin.executeQuery();
                            }
                        }
                    }
                }
            }
        }
        //this.getDBTransaction().Changes();
    }

    /*-----------------In case of Shop Floor Manual enrtry is done----------------------*/
    public void InsertIntoRcItmBinSF(String CldID, String HoOrgId, String OrgId, Integer SlocId) {
        ViewObjectImpl mtlItm = this.getMnfJcOpItmAll();
        ViewObjectImpl mtlBin = this.getMnfJcOpItmBin1();

        ViewObjectImpl mtlLot = this.getMnfJcOpItmLot1();
        Row currItm = mtlItm.getCurrentRow();

        ViewObject mnfRc = this.getMnfJc1();
        Row rcRow = mnfRc.getCurrentRow();
        Number zero = new Number(0);
        ViewObjectImpl stkSummBin = this.getMnfJcOpItmBinRqmtVw1();
        Row[] binRow = this.getMnfJcOpItmBinRqmtVw1().getFilteredRows("ItmId", currItm.getAttribute("ItmId"));

        ArrayList<String> arrlist = new ArrayList<String>();

        if (binRow.length > 0) {
            for (Row r1 : binRow) {
                if (r1.getAttribute("TransIssueQtySF") != null) {
                    if (((Number) r1.getAttribute("TransIssueQtySF")).compareTo(zero) > 0) {
                        String lotId = r1.getAttribute("LotId").toString();
                        arrlist.add(lotId);
                        //  System.out.println("lot id Bin-- " + lotId);
                    }
                }
            }
            //    System.out.println("Lot ArrayList size " + arrlist.size());
        }
        Set<String> lotset = new HashSet<String>(arrlist);

        Iterator itr = lotset.iterator();
        while (itr.hasNext()) {
            String lotId = itr.next().toString();
            Number lotQty = new Number(0);
            for (Row r1 : binRow) {
                if (r1.getAttribute("TransIssueQtySF") != null) {
                    if (((Number) r1.getAttribute("TransIssueQtySF")).compareTo(zero) > 0 &&
                        r1.getAttribute("LotId").toString().equals(lotId)) {
                        lotQty = lotQty.add((Number) r1.getAttribute("TransIssueQtySF"));
                    }
                }
            }
            //       System.out.println(" lot id   ---" + lotId + "----qty------" + lotQty);

            // Check lot already created or not

            RowQualifier rowQualifier = new RowQualifier(mtlLot);
            rowQualifier.setWhereClause(" DocId ='" + currItm.getAttribute("DocId") + "' and ItmId = '" +
                                        currItm.getAttribute("ItmId") + "' and LotId = '" + lotId + "'");
            Row[] rows = mtlLot.getFilteredRows(rowQualifier);
            //  System.out.println("" + rowQualifier.getExprStr());
            if (rows.length > 0) {
                for (Row r : rows) {
                    r.setAttribute("ItmQty", lotQty);
                    r.setAttribute("ItmQtyBs", lotQty);
                }
            } else {
                RowQualifier rq = new RowQualifier(stkSummBin);
                rq.setWhereClause("ItmId='" + currItm.getAttribute("ItmId"));
                Row binRows[] = stkSummBin.getFilteredRows(rq);
                //system.out.println("Total Item for This Lot -" + binRows.length);

                Row instLot = mtlLot.createRow();
                mtlLot.insertRow(instLot);
                instLot.setAttribute("LotId", lotId);
                instLot.setAttribute("ItmQty", lotQty);
                instLot.setAttribute("ItmQtyBs", lotQty);
                instLot.setAttribute("ItmUom", currItm.getAttribute("ItmUom"));
                instLot.setAttribute("WhId", rcRow.getAttribute("WhId"));
                BigDecimal avail = new BigDecimal(0);
                try {
                    String whId = rcRow.getAttribute("WhId").toString();

                    avail = (BigDecimal) callStoredFunction(Types.NUMERIC, "MNF.FN_MNF_GET_ITM_LOT_PRICE(?,?,?,?,?,?,?,?)", new Object[] {
                                                            CldID, SlocId, OrgId, whId, currItm.getAttribute("ItmId"),
                                                            lotId, rcRow.getAttribute("FyId"),currItm.getAttribute("IssuType")
                    });

                } catch (Exception e) {
                    e.printStackTrace();
                }
                if (avail.compareTo(new BigDecimal(-1)) == 0) {
                    avail = new BigDecimal(0);
                }
                Number multiply = new Number(0);
                try {
                    multiply = (Number) lotQty.multiply(new Number(avail));
                } catch (SQLException e) {
                    e.printStackTrace();
                }
                System.out.println("1111Item Lot Cost : " + multiply);
                instLot.setAttribute("ItmLotCost", multiply);

                //mtlLot.executeQuery();
            }
        }
        //      System.out.println("----------" + lotset);
        if (binRow.length > 0) {
            for (Row rr : binRow) {
                if (rr.getAttribute("TransIssueQtySF") != null) {
                    if (((Number) rr.getAttribute("TransIssueQtySF")).compareTo(zero) >= 0) {
                        //      System.out.println("Condition true create Bin");

                        // Check bin already created or not

                        RowQualifier rowQualifier = new RowQualifier(mtlBin);
                        rowQualifier.setWhereClause(" DocId ='" + currItm.getAttribute("DocId") + "' and ItmId = '" +
                                                    currItm.getAttribute("ItmId") + "' and LotId = '" +
                                                    rr.getAttribute("LotId").toString() + "' and BinId = '" +
                                                    rr.getAttribute("BinId").toString() + "'");
                        Row[] rows = mtlBin.getFilteredRows(rowQualifier);
                        //       System.out.println("" + rowQualifier.getExprStr());
                        //      System.out.println("length   " + rows.length);
                        if (rows.length > 0) {
                            for (Row r : rows) {
                                if (((Number) rr.getAttribute("TransIssueQtySF")).compareTo(zero) == 0) {
                                    //       System.out.println("row removed ----------");
                                    r.remove();
                                } else if (((Number) rr.getAttribute("TransIssueQtySF")).compareTo(zero) > 0) {
                                    // Update created bin quantity.
                                    //        System.out.println("row update ----------");
                                    r.setAttribute("ItmQty", rr.getAttribute("TransIssueQtySF"));
                                    r.setAttribute("ItmQtyBs", rr.getAttribute("TransIssueQtySF"));
                                }
                            }
                        } else {
                            // if row  not exist create new Bin row  .
                            if (((Number) rr.getAttribute("TransIssueQtySF")).compareTo(zero) > 0) {
                                //      System.out.println("row created ----------");
                                Row binInst = mtlBin.createRow();
                                binInst.setAttribute("LotId", rr.getAttribute("LotId"));
                                binInst.setAttribute("BinId", rr.getAttribute("BinId"));
                                binInst.setAttribute("ItmQty", rr.getAttribute("TransIssueQtySF"));
                                binInst.setAttribute("ItmQtyBs", rr.getAttribute("TransIssueQtySF"));
                                binInst.setAttribute("WhId", rcRow.getAttribute("WhId"));
                                binInst.setAttribute("ItmUom", currItm.getAttribute("ItmUom"));

                                mtlBin.insertRow(binInst);
                                //mtlBin.executeQuery();
                            }
                        }
                    }
                }
            }
        }
        /* this.getMnfJcOpItmBin1().executeQuery();
        this.getMnfJcOpItmLot1().executeQuery();
        this.getMnfJcOpItmAll().executeQuery();
        this.getDBTransaction().Changes(); */
    }

    /*------------------------Check validation-----------------------*/
    public Integer chkValidateMethod() {
        try {
            System.out.println("In checking Validate function");
            ViewObjectImpl impl = this.getMnfJc1();
            Row currentRow = impl.getCurrentRow();
            String opId = (String) currentRow.getAttribute("OpId");
            System.out.println("Operation Id : ============" + opId);
            String workStationId = (String) currentRow.getAttribute("WsId");
            Integer RqmtAreaId = (Integer) currentRow.getAttribute("RqmtAreaId");
            String WhId = (String) currentRow.getAttribute("WhId");
            String ShiftId = (String) currentRow.getAttribute("ShiftId");
            Integer EmpId = (Integer) currentRow.getAttribute("EmpId");
            Object actQtyVal = currentRow.getAttribute("ActOutptItmQty");
            Integer jcBs = (Integer) currentRow.getAttribute("JcBasis");
            //OutptItmQty
            Number OutputQty=(Number)currentRow.getAttribute("OutptItmQty");
            MnfJcSrcVOImpl jcSrcVO1 = this.getMnfJcSrcVO1();
            Row row=jcSrcVO1.first();
            
            String docSrcId = (String) row.getAttribute("DocIdSrc");


            Integer itemCount = this.getMnfAdhocOutItm1().getRowCount();
            if (docSrcId == null) {
                return 1;
            } else if (opId == null || opId.length() <= 0) {
                return 2;
            } else if (workStationId == null) {
                return 3;
            } else if (ShiftId == null) {
                return 4;
            } else if (EmpId == null) {
                return 5;
            } else if (RqmtAreaId == null) {
                return 6;
            } else if (WhId == null) {
                return 7;
            } else if (OutputQty == null) {
                            return 11;
            } else if (jcBs == 144||jcBs == 153) {
                if (itemCount == 0)
                    return 10;
                else
                    return 9;
            } else if (actQtyVal == null) {
                return 8;
            } else {
                return 9;
            }
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
            return 0;
        }
    }

    /*-----------------------Check for operation status on job card save---------------------------*/
    public void UpdateDocumentOpStatus(String cld_id, String ho_org_id, String org_id, Integer sloc_id, String Flag) {
        System.out.println("Flag Coming :" + Flag);
        Row currentRow = this.getMnfJc1().getCurrentRow();
        Integer docId = 0;
        Integer DocTypeSrc = (Integer) this.getMnfJcSrcVO1().getCurrentRow().getAttribute("DocTypeSrc");
        if (DocTypeSrc == 82) {
            docId = 26001;
        } else if (DocTypeSrc == 93) {
            docId = 26003;
        } else if (DocTypeSrc == 83) {
            docId = 26002;
        }
        String docHexId = (String) this.getMnfJcSrcVO1().getCurrentRow().getAttribute("DocIdSrc");
        if (currentRow != null && docId != null && docHexId != null) {
            try {
                callStoredFunction(Types.VARCHAR, "MNF.FN_MNF_UPD_DOC_OP_STAT(?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                   cld_id, sloc_id, ho_org_id, org_id, docId, docHexId, currentRow.getAttribute("OpId"),
                                   currentRow.getAttribute("OpSrNo"), currentRow.getAttribute("UsrIdCreate"),
                                   currentRow.getAttribute("UsrIdCreateDt"), 108, currentRow.getAttribute("OutptItmId"),
                                   currentRow.getAttribute("OutptItmQty"), Flag
                });
            } catch (Exception e) {
                e.printStackTrace();
                showFacesMsg("Error while closing Operation Status", null, FacesMessage.SEVERITY_ERROR, null);
            }
        }
    }

    /*------------------------Allow jobcard for future and Previous Date Function--------------------*/
    public String AllowJcPrevious(String cld_id, Integer sloc_id, String org_id) {
        /* p_cld_id    VARCHAR2,
            p_sloc_id   NUMBER,
            p_org_id    VARCHAR2,
            p_col       VARCHAR2 */
        Object retval;
        try {
            retval = callStoredFunction(VARCHAR, "mnf.fn_mnf_chk_org_prf(?,?,?,?)", new Object[] {
                                        cld_id, sloc_id, org_id, "ALLOW_JC_PREV_DT"
            });
            if (retval != null) {
                // System.out.println("Value in Previous date :" + retval);
                return retval.toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        showFacesMsg("Error while fetching user work flow details", null, FacesMessage.SEVERITY_ERROR, null);
        return "0";
    }

    public String AllowJcFuture(String cld_id, Integer sloc_id, String org_id) {
        /* p_cld_id    VARCHAR2,
           p_sloc_id   NUMBER,
           p_org_id    VARCHAR2,
           p_col       VARCHAR2 */
        Object retval1;
        try {
            retval1 = callStoredFunction(VARCHAR, "mnf.fn_mnf_chk_org_prf(?,?,?,?)", new Object[] {
                                         cld_id, sloc_id, org_id, "ALLOW_JC_FUT_DT"
            });
            if (retval1 != null) {
                //   System.out.println("Value in Future date :" + retval1);
                return retval1.toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        showFacesMsg("Error while fetching user work flow details", null, FacesMessage.SEVERITY_ERROR, null);
        return "0";
    }

    /*---------------Allow Work Sation for JOb card function---------------------*/
    public String AllowJcWorkStation(String cld_id, Integer sloc_id, String org_id) {
        /* p_cld_id    VARCHAR2,
           p_sloc_id   NUMBER,
           p_org_id    VARCHAR2,
           p_col       VARCHAR2 */
        Object retval2;
        try {
            retval2 = callStoredFunction(VARCHAR, "mnf.fn_mnf_chk_org_prf(?,?,?,?)", new Object[] {
                                         cld_id, sloc_id, org_id, "ALLOW_JC_WS"
            });
            if (retval2 != null) {
                //   System.out.println("Value in WorkSation :" + retval2);
                return retval2.toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        showFacesMsg("Error while fetching user work flow details", null, FacesMessage.SEVERITY_ERROR, null);
        return "0";
    }

    /*-------------------------Validate Job Card Date-----------------------*/
    public String validDateJc(String cld_id, Integer sloc_id, String org_id, java.sql.Date doc_dt) throws SQLException {
        Object retVal3;
        try {
            retVal3 = callStoredFunction(VARCHAR, "mnf.fn_is_jc_dt_valid(?,?,?,?)", new Object[] {
                                         cld_id, sloc_id, org_id, doc_dt
            });
            if (retVal3 != null) {
                System.out.println("Value of Validity" + retVal3);
                return retVal3.toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        showFacesMsg("Error while fetching user work flow details", null, FacesMessage.SEVERITY_ERROR, null);
        return "0";
    }

    /*------------------------------Filter OP Id--------------------------*/
    public void opIdExe() {
        System.out.println("---------------------Into the OPIdExe Function--------------------");
        ViewObjectImpl jc1 = this.getMnfJc1();
        MnfJcVORowImpl mnfj = (MnfJcVORowImpl) jc1.getCurrentRow();
        mnfj.getLOVMnfMppPdoOPVO1();
    }

    /*-------------------------------LOT Entry for output Item-----------------------*/
    public void AddLotEntry(String CldId, String OrgId, String HoOrgId, Integer SlocId, String DocId, String lotId,
                            Number lotQty, Integer UserId) {
        ViewObjectImpl stkImpl = this.getMnfJcItmStkVOLot();
        Row r=null;
        String jcBasis=(String)this.getMnfJc1().getCurrentRow().getAttribute("JcBasis").toString();
        if(jcBasis.equals("144")||jcBasis.equals("153")){
            r=this.getMnfAdhocOutItm1().first();
        }
        else {
            r=this.getMnfJcOpOutputItm().getCurrentRow();
            
        }
       // Row r= this.getMnfJc1().getCurrentRow().getAttribute("JcBasis").toString().trim().equals("144") ? this.getMnfAdhocOutItm1().first(): this.getMnfJcOpOutputItm().getCurrentRow();
        Row CR = stkImpl.getCurrentRow();
        //   Row CR = stkImpl.createRow();
        CR.setAttribute("CldId", CldId);
        CR.setAttribute("DocId", DocId);
        CR.setAttribute("HoOrgId", HoOrgId);
        CR.setAttribute("ItmId", r.getAttribute("ItmId"));
        CR.setAttribute("ItmType", 67);
        CR.setAttribute("ItmUom", r.getAttribute("ItmUom"));
        CR.setAttribute("LotId", lotId);
        CR.setAttribute("OpId", r.getAttribute("OpId"));
        CR.setAttribute("OpSrNo",r.getAttribute("OpSrNo"));
        CR.setAttribute("OrgId", OrgId);
        //if(Integer.parseInt(this.getMnfJc1().getCurrentRow().getAttribute("arg0").toString())==93){
             CR.setAttribute("PdoId", r.getAttribute("PdoId"));
       // }else{
            // CR.setAttribute("PdoId", this.getMnfJcOpOutputItm().getCurrentRow().getAttribute("PdoId"));  
       // }
        CR.setAttribute("SlocId", SlocId);
        CR.setAttribute("SrNo", 0);
        CR.setAttribute("TotQty", lotQty);
        CR.setAttribute("UsrIdCreate", UserId);
        CR.setAttribute("UsrIdCreateDt", new Timestamp(System.currentTimeMillis()));
     //   stkImpl.insertRow(CR);
        this.getDBTransaction().postChanges();
    }

    /*----------------------------------Serial Entry for Output Item---------------------------*/
    public void AddSerialEntry(String lotId, String serial) {
        ViewObjectImpl stkImpl = this.getMnfJcItmStkVOSerial();
        Row CR = stkImpl.createRow();
        CR.setAttribute("CldId", this.getMnfJcItmStkVOLot().getCurrentRow().getAttribute("CldId"));
        CR.setAttribute("DocId", this.getMnfJcItmStkVOLot().getCurrentRow().getAttribute("DocId"));
        CR.setAttribute("HoOrgId", this.getMnfJcItmStkVOLot().getCurrentRow().getAttribute("HoOrgId"));
        CR.setAttribute("ItmId", this.getMnfJcItmStkVOLot().getCurrentRow().getAttribute("ItmId"));
        CR.setAttribute("ItmType", this.getMnfJcItmStkVOLot().getCurrentRow().getAttribute("ItmType"));
        CR.setAttribute("ItmUom", this.getMnfJcItmStkVOLot().getCurrentRow().getAttribute("ItmUom"));
        CR.setAttribute("LotId", lotId);
        CR.setAttribute("OpId", this.getMnfJcItmStkVOLot().getCurrentRow().getAttribute("OpId"));
        CR.setAttribute("OpSrNo", this.getMnfJcItmStkVOLot().getCurrentRow().getAttribute("OpSrNo"));
        CR.setAttribute("OrgId", this.getMnfJcItmStkVOLot().getCurrentRow().getAttribute("OrgId"));
        CR.setAttribute("PdoId", this.getMnfJcItmStkVOLot().getCurrentRow().getAttribute("PdoId"));
        CR.setAttribute("SlocId", this.getMnfJcItmStkVOLot().getCurrentRow().getAttribute("SlocId"));
        CR.setAttribute("SrNo", serial);
        CR.setAttribute("TotQty", 1);
        CR.setAttribute("UsrIdCreate", this.getMnfJcItmStkVOLot().getCurrentRow().getAttribute("UsrIdCreate"));
        CR.setAttribute("UsrIdCreateDt", new Timestamp(System.currentTimeMillis()));
        CR.setAttribute("ItmMvmtType", this.getMnfJcItmStkVOLot().getCurrentRow().getAttribute("ItmMvmtType"));
        stkImpl.insertRow(CR);
        //this.getDBTransaction().Changes();
    }

    /*--------------------------Function for get lot number-----------------------*/
    public String GetlotNo() {
        ViewObjectImpl lotImpl = this.getMnfJc1();
        Row lotRow = lotImpl.getCurrentRow();
        Object rVal;
        try {
            rVal = callStoredFunction(VARCHAR, "MNF.FN_MNF_GET_LOT_NO(?,?,?,?,?)", new Object[] {
                                      lotRow.getAttribute("CldId"), lotRow.getAttribute("SlocId"),
                                      lotRow.getAttribute("OrgId"), lotRow.getAttribute("WhId"),
                                      lotRow.getAttribute("OutptItmId")
            });
            if (rVal != null) {
                System.out.println("Value of Validity" + rVal);
                return rVal.toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        showFacesMsg("Error while fetching user work flow details", null, FacesMessage.SEVERITY_ERROR, null);
        return "0";
    }

    /*--------------------------------Allow Lot Id Editable-----------------------------------*/
    public String AllowLotIdEditable(String cld_id, Integer sloc_id, String org_id) {
        Object retval;
        try {
            retval = callStoredFunction(VARCHAR, "mm.mm_chk_org_prf(?,?,?,?)", new Object[] {
                                        cld_id, sloc_id, org_id, "AUTO_LOT_GEN" });
            if (retval != null) {
                System.out.println("Value in Stk Point :" + retval);
                return retval.toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        showFacesMsg("Error while fetching user work flow details", null, FacesMessage.SEVERITY_ERROR, null);
        return "0";
    }

    /*------------------------------------Check output Item Serialized----------------------------*/
    public String ChkOutputItmSerialized() {
        ViewObjectImpl chkSer = this.getLOVChkItmSerializedVO1();
        chkSer.setNamedWhereClauseParam("BindCldId", this.getMnfJc1().getCurrentRow().getAttribute("CldId"));
        chkSer.setNamedWhereClauseParam("BindHoOrgId", this.getMnfJc1().getCurrentRow().getAttribute("HoOrgId"));
        chkSer.setNamedWhereClauseParam("BindItmId", this.getMnfJc1().getCurrentRow().getAttribute("OutptItmId"));
        chkSer.setNamedWhereClauseParam("BindSlocId", this.getMnfJc1().getCurrentRow().getAttribute("SlocId"));
        chkSer.executeQuery();
        Row[] allRowsInRange = chkSer.getAllRowsInRange();
        System.out.println("Count is : " + allRowsInRange.length);
        if (allRowsInRange.length > 0) {
            Object a = allRowsInRange[0].getAttribute("SerializedFlg");
            String Ser = (a == null ? null : a.toString());
            return Ser;
        }
        return "0";
    }

    /*------------------------Validation for check Lot Entry of Input Items-------------------------*/
    public String CheckforInputItmLot() {
        RowSetIterator csItr=null;
        Row cR = this.getMnfJc1().getCurrentRow();
        String jcBasis=cR.getAttribute("JcBasis").toString();
        if(jcBasis.equals("144")||jcBasis.equals("153")){
            csItr=this.getMnfJcOpAdhocInItem1().createRowSetIterator(null);
        }
        else {
            csItr=this.getMnfJcOpInputItm().createRowSetIterator(null);  
        }
        //RowSetIterator csItr = cR.getAttribute("JcBasis").toString().trim().equals("144")? this.getMnfJcOpAdhocInItem1().createRowSetIterator(null):this.getMnfJcOpInputItm().createRowSetIterator(null);
        //RowSetIterator csItr = cR.getAttribute("JcBasis").toString().trim().equals("144")? this.getMnfJcOpAdhocInItem1().createRowSetIterator(null):this.getMnfJcOpInputItm().createRowSetIterator(null);
       System.out.println("Vo is "+ (cR.getAttribute("JcBasis").toString().trim().equals("144")? this.getMnfJcOpAdhocInItem1().getName():this.getMnfJcOpInputItm().getName()) );
        ArrayList<String> al = new ArrayList<String>();
        while (csItr.hasNext()) {
            Row nxt = csItr.next();
            Object itmId = nxt.getAttribute("ItmId");
            al.add(itmId.toString());
        }
        System.out.println("Input item is "+al);
        for (String val : al) {
           // ViewObjectImpl voVal = this.getLOVMnfJcItmStkLotVO1();
            ViewObjectImpl voVal = this.getMnfJcOpItmLot2();
            voVal.executeQuery();
            RowQualifier rq = new RowQualifier(voVal);
            rq.setWhereClause("SlocId=" + cR.getAttribute("SlocId") + " and CldId='" + cR.getAttribute("CldId") +
                              "' and OrgId='" + cR.getAttribute("OrgId") + "' and HoOrgId='" +
                              cR.getAttribute("HoOrgId") + "' and DocId='" + cR.getAttribute("DocId") +
                              "' and ItmId='" + val + "'");
            Row fltrdrow[] = voVal.getFilteredRows(rq);
            if (fltrdrow.length <= 0) {
                ViewObjectImpl il = this.getLOVgetItemNmVO1();
                il.setNamedWhereClauseParam("BindCldId", cR.getAttribute("CldId"));
                il.setNamedWhereClauseParam("BindHoOrgId", cR.getAttribute("HoOrgId"));
                il.setNamedWhereClauseParam("BindItemId", val);
                il.setNamedWhereClauseParam("BindSlocId", cR.getAttribute("SlocId"));
                il.executeQuery();
                Row[] aR = il.getAllRowsInRange();
                if (aR.length > 0) {
                    return aR[0].getAttribute("ItmDesc").toString();
                }
            }
        }
        return "checked";
    }

    /*----------------------------Validate Source DOc Id-------------------------*/

    public String checkSourceDocIdValidate(String SrcDispId) {
        String PdoDocId = null;
        Row cR = this.getMnfJc1().getCurrentRow();
        ArrayList<String> al = new ArrayList<String>();
        ViewObjectImpl voImpl = this.getLOVgetMnfRcSrcVO1();
        voImpl.executeQuery();
        RowQualifier rq = new RowQualifier(voImpl);
        rq.setWhereClause("SlocId=" + cR.getAttribute("SlocId") + " and CldId='" + cR.getAttribute("CldId") +
                          "' and OrgId='" + cR.getAttribute("OrgId") + "' and HoOrgId='" + cR.getAttribute("HoOrgId") +
                          "'");
        Row fltrdrow[] = voImpl.getFilteredRows(rq);
        for (int i = 0; i < fltrdrow.length; ++i) {
            al.add(fltrdrow[i].getAttribute("DocIdSrc").toString());
        }
        ViewObjectImpl il = this.getLOVGetMnfPdoVO1();
        il.setNamedWhereClauseParam("CldIdBind", cR.getAttribute("CldId"));
        il.setNamedWhereClauseParam("HoOrgIdBind", cR.getAttribute("HoOrgId"));
        il.setNamedWhereClauseParam("OrgIdBind", cR.getAttribute("OrgId"));
        il.setNamedWhereClauseParam("SlocIdBind", cR.getAttribute("SlocId"));
        il.setNamedWhereClauseParam("PdoIdBind", SrcDispId);
        il.executeQuery();
        Row[] aR = il.getAllRowsInRange();
        if (aR.length > 0) {
            PdoDocId = aR[0].getAttribute("DocId").toString();
        }
        if (al.contains(PdoDocId) && cR.getAttribute("JcBasis") == 82) {
            return "Y";
        } else {
            return "N";
        }
    }
    
    public String getItmIssueCheckFunc(Integer slocId, String CldId, String OrgId, String HoOrgId, String ItmId, String DocId){
        ViewObjectImpl lotVO = this.getMnfJcOpItmLot1();
        lotVO.executeQuery();
        RowQualifier rq = new RowQualifier(lotVO);
        rq.setWhereClause("SlocId=" + slocId + " and CldId='" + CldId + "' and OrgId='" +
                          OrgId + "' and HoOrgId='" + HoOrgId + "' and ItmId='" +
                          ItmId + "' and DocId='"+DocId+"'");
        Row fltrdrow[] = lotVO.getFilteredRows(rq);
       // System.out.println("Rq-"+rq.getExprStr()+" tot row in Lot : "+fltrdrow.length);
        if (fltrdrow.length > 0) {
            return "Y";
        } 
        else{
            return "N";
        }
    }

    /*-------------------------------------END----------------------------------------*/

    /**
     * Container's getter for MnfJc1.
     * @return MnfJc1
     */
    public MnfJcVOImpl getMnfJc1() {
        return (MnfJcVOImpl) findViewObject("MnfJc1");
    }


    /**
     * Container's getter for Transient1.
     * @return Transient1
     */
    public ViewObjectImpl getTransient1() {
        return (ViewObjectImpl) findViewObject("Transient1");
    }

    /**
     * Container's getter for LOVUsrNm1.
     * @return LOVUsrNm1
     */
    public ViewObjectImpl getLOVUsrNm1() {
        return (ViewObjectImpl) findViewObject("LOVUsrNm1");
    }


    /**
     * Container's getter for LOVJcStatus1.
     * @return LOVJcStatus1
     */
    public ViewObjectImpl getLOVJcStatus1() {
        return (ViewObjectImpl) findViewObject("LOVJcStatus1");
    }

    /**
     * Container's getter for LOVJcMode1.
     * @return LOVJcMode1
     */
    public ViewObjectImpl getLOVJcMode1() {
        return (ViewObjectImpl) findViewObject("LOVJcMode1");
    }


    /**
     * Container's getter for LOVOpLocType1.
     * @return LOVOpLocType1
     */
    public ViewObjectImpl getLOVOpLocType1() {
        return (ViewObjectImpl) findViewObject("LOVOpLocType1");
    }

    /**
     * Container's getter for MnfJcTOoPLocTypeVL1.
     * @return MnfJcTOoPLocTypeVL1
     */
    public ViewLinkImpl getMnfJcTOoPLocTypeVL1() {
        return (ViewLinkImpl) findViewLink("MnfJcTOoPLocTypeVL1");
    }


    /**
     * Container's getter for LOVMnfOpDesc1.
     * @return LOVMnfOpDesc1
     */
    public ViewObjectImpl getLOVMnfOpDesc1() {
        return (ViewObjectImpl) findViewObject("LOVMnfOpDesc1");
    }

    /**
     * Container's getter for MnfJcTOLovMnfOpDescVL1.
     * @return MnfJcTOLovMnfOpDescVL1
     */
    public ViewLinkImpl getMnfJcTOLovMnfOpDescVL1() {
        return (ViewLinkImpl) findViewLink("MnfJcTOLovMnfOpDescVL1");
    }

    /**
     * Container's getter for MnfJcAttch1.
     * @return MnfJcAttch1
     */
    public ViewObjectImpl getMnfJcAttch1() {
        return (ViewObjectImpl) findViewObject("MnfJcAttch1");
    }

    /**
     * Container's getter for MnfJcTOMnfJcAttchVL1.
     * @return MnfJcTOMnfJcAttchVL1
     */
    public ViewLinkImpl getMnfJcTOMnfJcAttchVL1() {
        return (ViewLinkImpl) findViewLink("MnfJcTOMnfJcAttchVL1");
    }


    /**
     * Container's getter for MnfJcOpItm3.
     * @return MnfJcOpItm3
     */
    public MnfJcOpItmVOImpl getMnfJcOpInputItm() {
        return (MnfJcOpItmVOImpl) findViewObject("MnfJcOpInputItm");
    }

    /**
     * Container's getter for MnfJcTOMnfJcOpItmVL3.
     * @return MnfJcTOMnfJcOpItmVL3
     */
    public ViewLinkImpl getMnfJcTOMnfJcOpItmVL3() {
        return (ViewLinkImpl) findViewLink("MnfJcTOMnfJcOpItmVL3");
    }

    /**
     * Container's getter for MnfJcOpItm1.
     * @return MnfJcOpItm1
     */
    public MnfJcOpItmVOImpl getMnfJcOpOutputItm() {
        return (MnfJcOpItmVOImpl) findViewObject("MnfJcOpOutputItm");
    }

    /**
     * Container's getter for MnfJcTOMnfJcOpItmVL1.
     * @return MnfJcTOMnfJcOpItmVL1
     */
    public ViewLinkImpl getMnfJcTOMnfJcOpItmVL1() {
        return (ViewLinkImpl) findViewLink("MnfJcTOMnfJcOpItmVL1");
    }


    /**
     * Container's getter for MnfJcOpItm1.
     * @return MnfJcOpItm1
     */
    public MnfJcOpItmVOImpl getMnfJcOpCoproductsByproductItm() {
        return (MnfJcOpItmVOImpl) findViewObject("MnfJcOpCoproductsByproductItm");
    }

    /**
     * Container's getter for MnfJcTOMnfJcOpItmVL2.
     * @return MnfJcTOMnfJcOpItmVL2
     */
    public ViewLinkImpl getMnfJcTOMnfJcOpItmVL2() {
        return (ViewLinkImpl) findViewLink("MnfJcTOMnfJcOpItmVL2");
    }

    /**
     * Container's getter for MnfJcOpItm1.
     * @return MnfJcOpItm1
     */
    public MnfJcOpItmVOImpl getMnfJcOpItmAll() {
        return (MnfJcOpItmVOImpl) findViewObject("MnfJcOpItmAll");
    }

    /**
     * Container's getter for MnfJcTOMnfJcOpItmVL4.
     * @return MnfJcTOMnfJcOpItmVL4
     */
    public ViewLinkImpl getMnfJcTOMnfJcOpItmVL4() {
        return (ViewLinkImpl) findViewLink("MnfJcTOMnfJcOpItmVL4");
    }

    /**
     * Container's getter for MnfJcParam1.
     * @return MnfJcParam1
     */
    public ViewObjectImpl getMnfJcParamOverhead() {
        return (ViewObjectImpl) findViewObject("MnfJcParamOverhead");
    }

    /**
     * Container's getter for MnfJcTOMnfJcParamVL1.
     * @return MnfJcTOMnfJcParamVL1
     */
    public ViewLinkImpl getMnfJcTOMnfJcParamVL1() {
        return (ViewLinkImpl) findViewLink("MnfJcTOMnfJcParamVL1");
    }


    /**
     * Container's getter for MnfJcParamFetch1.
     * @return MnfJcParamFetch1
     */
    public ViewObjectImpl getMnfJcParamFetch1() {
        return (ViewObjectImpl) findViewObject("MnfJcParamFetch1");
    }

    /**
     * Container's getter for MnfJcParam1_1.
     * @return MnfJcParam1_1
     */
    public ViewObjectImpl getMnfJcParam1MachineDT() {
        return (ViewObjectImpl) findViewObject("MnfJcParam1MachineDT");
    }

    /**
     * Container's getter for MnfJcTOMnfJcParam1VL1.
     * @return MnfJcTOMnfJcParam1VL1
     */
    public ViewLinkImpl getMnfJcTOMnfJcParam1VL1() {
        return (ViewLinkImpl) findViewLink("MnfJcTOMnfJcParam1VL1");
    }

    /**
     * Container's getter for LOVMnfJcParamMDTFetch1.
     * @return LOVMnfJcParamMDTFetch1
     */
    public ViewObjectImpl getLOVMnfJcParamMDTFetch1() {
        return (ViewObjectImpl) findViewObject("LOVMnfJcParamMDTFetch1");
    }

    /**
     * Container's getter for MnfJcAttch2.
     * @return MnfJcAttch2
     */
    public ViewObjectImpl getMnfJcAttch2() {
        return (ViewObjectImpl) findViewObject("MnfJcAttch2");
    }

    /**
     * Container's getter for LOVUserNmWF1.
     * @return LOVUserNmWF1
     */
    public ViewObjectImpl getLOVUserNmWF1() {
        return (ViewObjectImpl) findViewObject("LOVUserNmWF1");
    }

    /**
     * Container's getter for MnfWc1.
     * @return MnfWc1
     */
    public ViewObjectImpl getMnfWc1() {
        return (ViewObjectImpl) findViewObject("MnfWc1");
    }

    /**
     * Container's getter for MnfJcTOMnfWcVL1.
     * @return MnfJcTOMnfWcVL1
     */
    public ViewLinkImpl getMnfJcTOMnfWcVL1() {
        return (ViewLinkImpl) findViewLink("MnfJcTOMnfWcVL1");
    }


    /**
     * Container's getter for MnfEmpNm1.
     * @return MnfEmpNm1
     */
    public ViewObjectImpl getMnfEmpNm1() {
        return (ViewObjectImpl) findViewObject("MnfEmpNm1");
    }

    /**
     * Container's getter for MnfJcBarcode1.
     * @return MnfJcBarcode1
     */
    public ViewObjectImpl getMnfJcBarcode1() {
        return (ViewObjectImpl) findViewObject("MnfJcBarcode1");
    }

    /**
     * Container's getter for MnfJcTOMnfJcBarcodeVL1.
     * @return MnfJcTOMnfJcBarcodeVL1
     */
    public ViewLinkImpl getMnfJcTOMnfJcBarcodeVL1() {
        return (ViewLinkImpl) findViewLink("MnfJcTOMnfJcBarcodeVL1");
    }


    /**
     * Container's getter for LOVItemNm1.
     * @return LOVItemNm1
     */
    public ViewObjectImpl getLOVItemNm1() {
        return (ViewObjectImpl) findViewObject("LOVItemNm1");
    }

    /**
     * Container's getter for LOVMnfPdoNm1.
     * @return LOVMnfPdoNm1
     */
    public ViewObjectImpl getLOVMnfPdoNm1() {
        return (ViewObjectImpl) findViewObject("LOVMnfPdoNm1");
    }

    /**
     * Container's getter for MnfJcOpItmBin1.
     * @return MnfJcOpItmBin1
     */
    public ViewObjectImpl getMnfJcOpItmBin1() {
        return (ViewObjectImpl) findViewObject("MnfJcOpItmBin1");
    }

    /**
     * Container's getter for MnfJcOpItmTOMnfJcOpItmBinVL1.
     * @return MnfJcOpItmTOMnfJcOpItmBinVL1
     */
    public ViewLinkImpl getMnfJcOpItmTOMnfJcOpItmBinVL1() {
        return (ViewLinkImpl) findViewLink("MnfJcOpItmTOMnfJcOpItmBinVL1");
    }

    /**
     * Container's getter for MnfJcOpItmLot1.
     * @return MnfJcOpItmLot1
     */
    public ViewObjectImpl getMnfJcOpItmLot1() {
        return (ViewObjectImpl) findViewObject("MnfJcOpItmLot1");
    }

    /**
     * Container's getter for MnfJcOpItmTOMnfJcOpItmLotVL1.
     * @return MnfJcOpItmTOMnfJcOpItmLotVL1
     */
    public ViewLinkImpl getMnfJcOpItmTOMnfJcOpItmLotVL1() {
        return (ViewLinkImpl) findViewLink("MnfJcOpItmTOMnfJcOpItmLotVL1");
    }

    /**
     * Container's getter for MnfJcOpItmSr1.
     * @return MnfJcOpItmSr1
     */
    public ViewObjectImpl getMnfJcOpItmSr1() {
        return (ViewObjectImpl) findViewObject("MnfJcOpItmSr1");
    }

    /**
     * Container's getter for MnfJcOpItmTOMnfJcOpItmSrVL1.
     * @return MnfJcOpItmTOMnfJcOpItmSrVL1
     */
    public ViewLinkImpl getMnfJcOpItmTOMnfJcOpItmSrVL1() {
        return (ViewLinkImpl) findViewLink("MnfJcOpItmTOMnfJcOpItmSrVL1");
    }

    /**
     * Container's getter for MnfJcOpItmBinVw1.
     * @return MnfJcOpItmBinVw1
     */
    public MnfJcOpItmBinVwVOImpl getMnfJcOpItmBinVw1() {
        return (MnfJcOpItmBinVwVOImpl) findViewObject("MnfJcOpItmBinVw1");
    }

    /**
     * Container's getter for MnfJcOpItmTOMnfJcOpItmBinVwVL1.
     * @return MnfJcOpItmTOMnfJcOpItmBinVwVL1
     */
    public ViewLinkImpl getMnfJcOpItmTOMnfJcOpItmBinVwVL1() {
        return (ViewLinkImpl) findViewLink("MnfJcOpItmTOMnfJcOpItmBinVwVL1");
    }

    /**
     * Container's getter for MnfJcOpItmLotVw1.
     * @return MnfJcOpItmLotVw1
     */
    public MnfJcOpItmLotVwVOImpl getMnfJcOpItmLotVw1() {
        return (MnfJcOpItmLotVwVOImpl) findViewObject("MnfJcOpItmLotVw1");
    }

    /**
     * Container's getter for MnfJcOpItmTOMnfJcOpItmLotVwVL1.
     * @return MnfJcOpItmTOMnfJcOpItmLotVwVL1
     */
    public ViewLinkImpl getMnfJcOpItmTOMnfJcOpItmLotVwVL1() {
        return (ViewLinkImpl) findViewLink("MnfJcOpItmTOMnfJcOpItmLotVwVL1");
    }

    /**
     * Container's getter for MnfJcOpItmSrVw1.
     * @return MnfJcOpItmSrVw1
     */
    public MnfJcOpItmSrVwVOImpl getMnfJcOpItmSrVw1() {
        return (MnfJcOpItmSrVwVOImpl) findViewObject("MnfJcOpItmSrVw1");
    }

    /**
     * Container's getter for MnfJcOpItmTOMnfJcOpItmSrVwVL1.
     * @return MnfJcOpItmTOMnfJcOpItmSrVwVL1
     */
    public ViewLinkImpl getMnfJcOpItmTOMnfJcOpItmSrVwVL1() {
        return (ViewLinkImpl) findViewLink("MnfJcOpItmTOMnfJcOpItmSrVwVL1");
    }

    /**
     * Container's getter for LOVItemName1.
     * @return LOVItemName1
     */
    public LOVItemNameVOImpl getLOVItemName1() {
        return (LOVItemNameVOImpl) findViewObject("LOVItemName1");
    }

    /**
     * Container's getter for LOVWhName1.
     * @return LOVWhName1
     */
    public ViewObjectImpl getLOVWhName1() {
        return (ViewObjectImpl) findViewObject("LOVWhName1");
    }


    /**
     * Container's getter for LovFetchShiftNm1.
     * @return LovFetchShiftNm1
     */
    public ViewObjectImpl getLovFetchShiftNm1() {
        return (ViewObjectImpl) findViewObject("LovFetchShiftNm1");
    }

    /**
     * Container's getter for LOVOpDescNmVO1.
     * @return LOVOpDescNmVO1
     */
    public ViewObjectImpl getLOVOpDescNmVO1() {
        return (ViewObjectImpl) findViewObject("LOVOpDescNmVO1");
    }

    /**
     * Container's getter for LOVReqAreaIdDispVO1.
     * @return LOVReqAreaIdDispVO1
     */
    public ViewObjectImpl getLOVReqAreaIdDispVO1() {
        return (ViewObjectImpl) findViewObject("LOVReqAreaIdDispVO1");
    }


    /**
     * Container's getter for LOVUsrNmMdVO1.
     * @return LOVUsrNmMdVO1
     */
    public ViewObjectImpl getLOVUsrNmMdVO1() {
        return (ViewObjectImpl) findViewObject("LOVUsrNmMdVO1");
    }


    /**
     * Container's getter for MnfJcSrcVO1.
     * @return MnfJcSrcVO1
     */
    public MnfJcSrcVOImpl getMnfJcSrcVO1() {
        return (MnfJcSrcVOImpl) findViewObject("MnfJcSrcVO1");
    }

    /**
     * Container's getter for MnfJcTOMnfJcSrcVL1.
     * @return MnfJcTOMnfJcSrcVL1
     */
    public ViewLinkImpl getMnfJcTOMnfJcSrcVL1() {
        return (ViewLinkImpl) findViewLink("MnfJcTOMnfJcSrcVL1");
    }


    /**
     * Container's getter for LOVOpDispIdVO1.
     * @return LOVOpDispIdVO1
     */
    public ViewObjectImpl getLOVOpDispIdVO1() {
        return (ViewObjectImpl) findViewObject("LOVOpDispIdVO1");
    }

    /**
     * Container's getter for LOVOutputItmNmVO1.
     * @return LOVOutputItmNmVO1
     */
    public ViewObjectImpl getLOVOutputItmNmVO1() {
        return (ViewObjectImpl) findViewObject("LOVOutputItmNmVO1");
    }

    /**
     * Container's getter for LOVSourceDispIdVO1.
     * @return LOVSourceDispIdVO1
     */
    public ViewObjectImpl getLOVSourceDispIdVO1() {
        return (ViewObjectImpl) findViewObject("LOVSourceDispIdVO1");
    }

    /**
     * Container's getter for MnfJcItmStkVO1.
     * @return MnfJcItmStkVO1
     */
    public ViewObjectImpl getMnfJcItmStkVOLot() {
        return (ViewObjectImpl) findViewObject("MnfJcItmStkVOLot");
    }

    /**
     * Container's getter for MnfJcTOMnfJcItmStkVL1.
     * @return MnfJcTOMnfJcItmStkVL1
     */
    public ViewLinkImpl getMnfJcTOMnfJcItmStkVL1() {
        return (ViewLinkImpl) findViewLink("MnfJcTOMnfJcItmStkVL1");
    }

    /**
     * Container's getter for MnfJcItmStkVO1.
     * @return MnfJcItmStkVO1
     */
    public ViewObjectImpl getMnfJcItmStkVOSerial() {
        return (ViewObjectImpl) findViewObject("MnfJcItmStkVOSerial");
    }

    /**
     * Container's getter for MnfJcTOMnfJcItmStkVL2.
     * @return MnfJcTOMnfJcItmStkVL2
     */
    public ViewLinkImpl getMnfJcTOMnfJcItmStkVL2() {
        return (ViewLinkImpl) findViewLink("MnfJcTOMnfJcItmStkVL2");
    }

    /**
     * Container's getter for LOVChkItmSerializedVO1.
     * @return LOVChkItmSerializedVO1
     */
    public ViewObjectImpl getLOVChkItmSerializedVO1() {
        return (ViewObjectImpl) findViewObject("LOVChkItmSerializedVO1");
    }

    /**
     * Container's getter for MnfJcOpItmBinRqmtVwVO1.
     * @return MnfJcOpItmBinRqmtVwVO1
     */
    public MnfJcOpItmBinRqmtVwVOImpl getMnfJcOpItmBinRqmtVw1() {
        return (MnfJcOpItmBinRqmtVwVOImpl) findViewObject("MnfJcOpItmBinRqmtVw1");
    }

    /**
     * Container's getter for MnfJcOpItmTOMnfJcOpItmBinRqmtVwVL1.
     * @return MnfJcOpItmTOMnfJcOpItmBinRqmtVwVL1
     */
    public ViewLinkImpl getMnfJcOpItmTOMnfJcOpItmBinRqmtVwVL1() {
        return (ViewLinkImpl) findViewLink("MnfJcOpItmTOMnfJcOpItmBinRqmtVwVL1");
    }

    /**
     * Container's getter for MnfJcOpItmLotRqmtVwVO1.
     * @return MnfJcOpItmLotRqmtVwVO1
     */
    public MnfJcOpItmLotRqmtVwVOImpl getMnfJcOpItmLotRqmtVw1() {
        return (MnfJcOpItmLotRqmtVwVOImpl) findViewObject("MnfJcOpItmLotRqmtVw1");
    }

    /**
     * Container's getter for MnfJcOpItmTOMnfJcOpItmLotRqmtVwVL1.
     * @return MnfJcOpItmTOMnfJcOpItmLotRqmtVwVL1
     */
    public ViewLinkImpl getMnfJcOpItmTOMnfJcOpItmLotRqmtVwVL1() {
        return (ViewLinkImpl) findViewLink("MnfJcOpItmTOMnfJcOpItmLotRqmtVwVL1");
    }

    /**
     * Container's getter for MnfJcOpItmSrRqmtVwVO1.
     * @return MnfJcOpItmSrRqmtVwVO1
     */
    public MnfJcOpItmSrRqmtVwVOImpl getMnfJcOpItmSrRqmtVw1() {
        return (MnfJcOpItmSrRqmtVwVOImpl) findViewObject("MnfJcOpItmSrRqmtVw1");
    }

    /**
     * Container's getter for MnfJcOpItmTOMnfJcOpItmSrRqmtVwVL1.
     * @return MnfJcOpItmTOMnfJcOpItmSrRqmtVwVL1
     */
    public ViewLinkImpl getMnfJcOpItmTOMnfJcOpItmSrRqmtVwVL1() {
        return (ViewLinkImpl) findViewLink("MnfJcOpItmTOMnfJcOpItmSrRqmtVwVL1");
    }

    /**
     * Container's getter for LOVgetItemNmVO1.
     * @return LOVgetItemNmVO1
     */
    public ViewObjectImpl getLOVgetItemNmVO1() {
        return (ViewObjectImpl) findViewObject("LOVgetItemNmVO1");
    }

    /**
     * Container's getter for LOVMnfJcItmStkLotVO1.
     * @return LOVMnfJcItmStkLotVO1
     */
    public ViewObjectImpl getLOVMnfJcItmStkLotVO1() {
        return (ViewObjectImpl) findViewObject("LOVMnfJcItmStkLotVO1");
    }

    /**
     * Container's getter for LOVgetMnfRcSrcVO1.
     * @return LOVgetMnfRcSrcVO1
     */
    public ViewObjectImpl getLOVgetMnfRcSrcVO1() {
        return (ViewObjectImpl) findViewObject("LOVgetMnfRcSrcVO1");
    }

    /**
     * Container's getter for LOVGetMnfPdoVO1.
     * @return LOVGetMnfPdoVO1
     */
    public ViewObjectImpl getLOVGetMnfPdoVO1() {
        return (ViewObjectImpl) findViewObject("LOVGetMnfPdoVO1");
    }

    /**
     * Container's getter for LOVworkStationNmVO1.
     * @return LOVworkStationNmVO1
     */
    public ViewObjectImpl getLOVworkStationNmVO1() {
        return (ViewObjectImpl) findViewObject("LOVworkStationNmVO1");
    }


    /**
     * Container's getter for MnfJcOpItmLotVO1.
     * @return MnfJcOpItmLotVO1
     */
    public ViewObjectImpl getMnfJcOpItmLotVO1() {
        return (ViewObjectImpl) findViewObject("MnfJcOpItmLotVO1");
    }

    /**
     * Container's getter for MnfJcOpItmLot2.
     * @return MnfJcOpItmLot2
     */
    public ViewObjectImpl getMnfJcOpItmLot2() {
        return (ViewObjectImpl) findViewObject("MnfJcOpItmLot2");
    }


    /**
     * Container's getter for MnfJcItmStk1.
     * @return MnfJcItmStk1
     */
    public ViewObjectImpl getMnfJcItmStk1() {
        return (ViewObjectImpl) findViewObject("MnfJcItmStk1");
    }
    /*------------------------Validation for check Lot Entry of Output Items-------------------------*/
       public String CheckforOutputItmLot() {
           Row cR = this.getMnfJc1().getCurrentRow();
           //RowSetIterator csItr = this.getMnfJcOpInputItm().createRowSetIterator(null);
           RowSetIterator csItr = this.getMnfJcOpItmAll().createRowSetIterator(null);
           ArrayList<String> al = new ArrayList<String>();
           while (csItr.hasNext()) {
               Row nxt = csItr.next();
               Object itmId = nxt.getAttribute("ItmId");
               System.out.println("Itm Id : "+itmId);
               if(Integer.parseInt(nxt.getAttribute("ItmType").toString())==67){
               al.add(itmId.toString());
               }
           }
           for (String val : al) {
               System.out.println("Itm Id : "+val);
               ViewObjectImpl voVal = this.getMnfJcItmStk1();
               RowQualifier rq = new RowQualifier(voVal);
               rq.setWhereClause("SlocId=" + cR.getAttribute("SlocId") + " and CldId='" + cR.getAttribute("CldId") +
                                 "' and OrgId='" + cR.getAttribute("OrgId") + "' and HoOrgId='" +
                                 cR.getAttribute("HoOrgId") + "' and DocId='" + cR.getAttribute("DocId") +
                                 "' and ItmId='" + val + "'");
               System.out.println("Query string: "+rq.getExprStr());
               Row fltrdrow[] = voVal.getFilteredRows(rq);
               System.out.println("length is "+fltrdrow.length);
               if (fltrdrow.length <= 0) {
                   System.out.println("Length is "+fltrdrow.length);
                   ViewObjectImpl il = this.getLOVgetItemNmVO1();
                   il.setNamedWhereClauseParam("BindCldId", cR.getAttribute("CldId"));
                   il.setNamedWhereClauseParam("BindHoOrgId", cR.getAttribute("HoOrgId"));
                   il.setNamedWhereClauseParam("BindItemId", val);
                   il.setNamedWhereClauseParam("BindSlocId", cR.getAttribute("SlocId"));
                   il.executeQuery();
                   Row[] aR = il.getAllRowsInRange();
                   if (aR.length > 0) {
                       return aR[0].getAttribute("ItmDesc").toString();
                   }
               }
           }
           return "checked";
       }
       
//--------------------------------Parameter Validation---------------------------------------------------------
        public int chkNmDuplicate(String val , String Type){
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String ho_org_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        String org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        System.out.println("Value in AM "+val+ " And Type is : "+Type);
        ViewObjectImpl pa = null;
        ViewObjectImpl par = null;
        Row[] row = null;
        Row r = null;
        if(Type.equals("O")){
            System.out.println("If");
            pa=this.getLOVMnfParamNm1();
            pa.setNamedWhereClauseParam("BindCldId", cld_id);
            pa.setNamedWhereClauseParam("BindHoOrgId", ho_org_id);
            pa.setNamedWhereClauseParam("BindSlocId", sloc_id);
            pa.executeQuery();
            par=this.getMnfJcParamOverhead();
            r=this.getMnfJcParamOverhead().getCurrentRow();
        }
        else{
            pa=this.getLOVMachineDownTime1();
            pa.setNamedWhereClauseParam("BindCldId", cld_id);
            pa.setNamedWhereClauseParam("BindHoOrgId", ho_org_id);
            pa.setNamedWhereClauseParam("BindSlocId", sloc_id);
            pa.executeQuery();
            par=this.getMnfJcParam1MachineDT();
            r=this.getMnfJcParam1MachineDT().getCurrentRow();
        }
        row = pa.getFilteredRows("ParamDesc", val);
        System.out.println(row.length);
        if(row.length > 0){
        String paramId = row[0].getAttribute("ParamId").toString();
        String docId =(String)r.getAttribute("DocId");
        System.out.println(paramId+ " "+ docId);
        RowQualifier rq= new RowQualifier(par);
        
        rq.setWhereClause("CldId='"+cld_id+"' and SlocId="+sloc_id+" and OrgId='"+org_id+
                          "' and DocId='"+docId+"' and ParamId='"+paramId+"'");
        System.out.println(rq.getExprStr());
        Row r1[]=par.getFilteredRows(rq);
        System.out.println(r1.length);
        if(r1.length>0) {
           // r.remove();
            for(Row dupliRow : r1)
            {
            if(dupliRow.equals(r))//match object
            {
            System.out.println("Same Row");
            }else
            return 1;
            }
        }
        }
     return 0;
    }

    /**
     * Container's getter for LOVMachineDownTime1.
     * @return LOVMachineDownTime1
     */
    public ViewObjectImpl getLOVMachineDownTime1() {
        return (ViewObjectImpl) findViewObject("LOVMachineDownTime1");
    }

    /**
     * Container's getter for LOVMnfParamNm1.
     * @return LOVMnfParamNm1
     */
    public ViewObjectImpl getLOVMnfParamNm1() {
        return (ViewObjectImpl) findViewObject("LOVMnfParamNm1");
    }
    public void deleteStkLot(){
        ViewObjectImpl impl = this.getMnfJcItmStkVOLot();
        impl.getCurrentRow().remove();
        impl.executeQuery(); 
        this.getDBTransaction().postChanges();
    }
    
    public int chkSrDuplicate(String val){
                System.out.println("Value in AM "+val);
                String cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
                Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
                String hoId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
                String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
                RowSetIterator csItr = this.getMnfJcOpItmAll().createRowSetIterator(null);
                String itmId = "";
                while (csItr.hasNext()) {
                    Row nxt = csItr.next();
                    Object id = nxt.getAttribute("ItmId");
                    System.out.println("Itm Id : "+itmId);
                    if(Integer.parseInt(nxt.getAttribute("ItmType").toString())==67){
                    itmId = id.toString();
                    }
                }
                    csItr.closeRowSetIterator();
                ViewObjectImpl se=this.getMnfJcItmStk1();
                RowQualifier rq= new RowQualifier(se);
                rq.setWhereClause("CldId='"+cldId+"' and SlocId="+slocId+" and OrgId='"+orgId+
                                "' and HoOrgId='"+hoId+"' and ItmId='"+itmId+"' and SrNo='"+val+"'");
                        System.out.println(rq.getExprStr());
                        Row r1[]=se.getFilteredRows(rq);
                        System.out.println(r1.length);
                        if(r1.length>0) {
                            for(Row dupliRow : r1)
                            {
//                            if(dupliRow.equals(r))
//                            {
//                            System.out.println("Same Row");
//                            }else
                            
                            }
                            return 1;
                        }
                     return 0;
            }
    
    public boolean duplicateParamEo(String paramName) {
        RowSetIterator rSetIter = getMnfJcParamOverhead().createRowSetIterator(null);
        Integer countVal = 0;
        if (paramName != null) {
            while (rSetIter.hasNext()) {
                Row r = rSetIter.next();
                if (paramName.equals(r.getAttribute("TransParamNm"))) {
                    //System.out.println("1 Org Found : " + shiftName.equals(r.getAttribute("TransShiftName")));
                    countVal = countVal + 1;
                }
            }
            rSetIter.closeRowSetIterator();
            Row currentRow = getMnfJcParamOverhead().getCurrentRow();
     
            if (paramName.equals(currentRow.getAttribute("TransParamNm"))) {
                // System.out.println("2 Org Id Found : " + shiftName.equals(currentRow.getAttribute("TransShiftName")));
                countVal = countVal - 1;
            }
        }
        return countVal == 1 ? true : false;
    }
    
    public boolean duplicateParamEo1(String paramName) {
        System.out.println("Param NM :  "+paramName);
        RowSetIterator rSetIter = getMnfJcParam1MachineDT().createRowSetIterator(null);
        Integer countVal = 0;
        if (paramName != null) {
            while (rSetIter.hasNext()) {
                Row r = rSetIter.next();
                if (paramName.equals(r.getAttribute("TransParamNm"))) {
                    System.out.println("1 Org Found : ");
                    countVal = countVal + 1;
                }
            }
            rSetIter.closeRowSetIterator();
            Row currentRow = getMnfJcParam1MachineDT().getCurrentRow();
            if (paramName.equals(currentRow.getAttribute("TransParamNm"))) {
                System.out.println("2 Org Id Found : ");
                countVal = countVal - 1;
            }
        }
        System.out.println("Count Value : "+countVal);
        return countVal == 1 ? true : false;
    }
    
    public boolean duplicateParamEo2(String paramName) {
        System.out.println("Param NM :  "+paramName);
        RowSetIterator rSetIter = getMnfjcOpQcParam1().createRowSetIterator(null);
        Integer countVal = 0;
        if (paramName != null) {
            while (rSetIter.hasNext()) {
                Row r = rSetIter.next();
                if (paramName.equals(r.getAttribute("TransParamDesc"))) {
                    System.out.println("1 Org Found : ");
                    countVal = countVal + 1;
                }
            }
            rSetIter.closeRowSetIterator();
            Row currentRow = getMnfjcOpQcParam1().getCurrentRow();
            if (paramName.equals(currentRow.getAttribute("TransParamDesc"))) {
                System.out.println("2 Org Id Found : ");
                countVal = countVal - 1;
            }
        }
        System.out.println("Count Value : "+countVal);
        return countVal == 1 ? true : false;
    }

    /**
     * Container's getter for MnfjcOpQcParam1.
     * @return MnfjcOpQcParam1
     */
    public ViewObjectImpl getMnfjcOpQcParam1() {
        return (ViewObjectImpl) findViewObject("MnfjcOpQcParam1");
    }

    /**
     * Container's getter for JcToQcParamVL1.
     * @return JcToQcParamVL1
     */
    public ViewLinkImpl getJcToQcParamVL1() {
        return (ViewLinkImpl) findViewLink("JcToQcParamVL1");
    }

    /**
     * Container's getter for LovTransQcNm1.
     * @return LovTransQcNm1
     */
    public ViewObjectImpl getLovTransQcNm1() {
        return (ViewObjectImpl) findViewObject("LovTransQcNm1");
    }

    /**
     * Container's getter for MnfjcOpQcParam2.
     * @return MnfjcOpQcParam2
     */
    public ViewObjectImpl getMnfjcOpQcParam2() {
        return (ViewObjectImpl) findViewObject("MnfjcOpQcParam2");
    }
    public int chkNmDuplicate1(String val){
    String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
    Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
    String ho_org_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
    String org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
    System.out.println("Value in AM "+val);
    ViewObjectImpl param = this.getLovTransQcNm1();
    param.setNamedWhereClauseParam("BindCldId", cld_id);
    param.setNamedWhereClauseParam("BindOrgId", org_id);
    param.setNamedWhereClauseParam("BindSlocId", sloc_id);
    param.executeQuery();
    Row[] parm = param.getFilteredRows("ParamNm", val);
    String paramId ="";
    if(parm.length>0){
        paramId = parm[0].getAttribute("ParamId").toString();
    }
    ViewObjectImpl par = this.getMnfjcOpQcParam1();
    Row r = par.getCurrentRow();
    System.out.println("Param Id : "+paramId);
    ViewObjectImpl pa = this.getMnfjcOpQcParam2();
    RowQualifier rq= new RowQualifier(pa);
    rq.setWhereClause("CldId='"+cld_id+"' and SlocId="+sloc_id+" and OrgId='"+org_id+
      "' and HoOrgId='"+ho_org_id+"' and ParamId='"+paramId+"' and DocId='"+r.getAttribute("DocId").toString()+"'");
    System.out.println(rq.getExprStr());
    Row[] row = pa.getFilteredRows(rq);
    System.out.println(row.length);
    if(row.length > 1){
        return 1;
    }
    return 0;
    }
    
    public Number checkYearFyId(){
            BigDecimal pdoFyId = new BigDecimal(0.0);
            String cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
            String usrOrg = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
            try {
                pdoFyId = (BigDecimal) callStoredFunction(Types.NUMERIC, "APP.GET_ORG_FY_ID(?,?,?)", new Object[] {
                                                      cldId, usrOrg, new Timestamp(System.currentTimeMillis())
                });
            } catch (NumberFormatException nfe) {
                // TODO: Add catch code
                nfe.printStackTrace();
            }
            //System.out.println(" financial id   " + pdoFyId );
            System.out.println(pdoFyId);
            Number val = null;
        try {
            val = new Number(pdoFyId);
        } catch (SQLException e) {
        }
        return val;
    }
    public Number checkQtyValue(){
        Number n = new Number(0);
        n = (Number)this.getMnfJc1().getCurrentRow().getAttribute("transQtVal");
        System.out.println(n.intValue());
        return n;
    }
    
    public Number statusUpdate(){
        String cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String hoId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        System.out.println("Row count for doc Id src "+this.getMnfJcSrcVO1().getRowCount());
        Row r=getMnfJcSrcVO1().getCurrentRow()==null ?getMnfJcSrcVO1().first() :getMnfJcSrcVO1().getCurrentRow();
        String docId = r.getAttribute("DocIdSrc").toString();
        String docTySrc = r.getAttribute("DocTypeSrc").toString();
        String opId = getMnfJc1().getCurrentRow().getAttribute("OpId").toString();
        String opSrNo= getMnfJc1().getCurrentRow().getAttribute("OpSrNo").toString();
        System.out.println(cldId+" "+slocId+" "+hoId+" "+orgId+" "+docId+" "+docTySrc+" "+opId+" "+opSrNo);
        Number out = null;
        BigDecimal pdoFyId = new BigDecimal(0.0);
        try {
            pdoFyId = (BigDecimal) callStoredFunction(Types.NUMERIC, "MNF.fn_mnf_jc_to_src_back_upd_stat(?,?,?,?,?,?,?,?)", new Object[] {
                                              cldId, slocId, hoId, orgId, docId, docTySrc, opId, opSrNo
            });
           out = new Number(pdoFyId);
        } catch (Exception nfe) {
            // TODO: Add catch code
            nfe.printStackTrace();
        }
        adfLog.info("statusUpdate is called  from the commit is called");
        this.getDBTransaction().commit();
        return out;
    }

    /**
     * Container's getter for LOVMnfMppPdoOP1.
     * @return LOVMnfMppPdoOP1
     */
    public ViewObjectImpl getLOVMnfMppPdoOP1() {
        return (ViewObjectImpl) findViewObject("LOVMnfMppPdoOP1");
    }
    
    public void processItemChange(){
       // this.getMnfJcOpInputItm().setBindInput(62);
        this.getMnfJcOpAdhocInItem1().executeQuery();
        this.getMnfAdhocOutItm1().executeQuery();
//               System.out.println("Current attribute of all item type is "+this.getMnfJcOpItmAll().getCurrentRow().getAttribute("ItmType")); 
//               ViewObjectImpl vo = this.getMnfJcOpInputItm();
////
//                ViewCriteria vc = vo.getViewCriteria("InputItemCriteria");
//                vo.removeApplyViewCriteriaName("InputItemCriteria");
//                vo.executeQuery();
//                RowSetIterator iter =vo.createRowSetIterator(null);
//                
//                while(iter.hasNext()){
//                    System.out.println("Current attribute of input item type is "+(iter.next()).getAttribute("ItmType")); 
//                }
//                System.out.println("Current attribute of item type is "+this.getMnfJcOpItmAll().getCurrentRow().getAttribute("ItmType")); 
//                System.out.println("Row count for input is "+this.getMnfJcOpInputItm().getRowCount());
//                vo.applyViewCriteria(vc);
//                
//            
//                vo.executeQuery();
//                
//                System.out.println("Executing query is "+vo.getQuery());
//                
//                  
//                System.out.println("Row count for input is "+this.getMnfJcOpInputItm().getRowCount());
//        
        
    }
    
    
    public void setopQuntity(String flag){
        MnfJcVOImpl vo=this.getMnfJc1();
        MnfJcVORowImpl curRow=(MnfJcVORowImpl) vo.getCurrentRow();
        
        System.out.println("Flag is "+flag);
        
        /**
         * It has been considererd that Output Item vo has only one row
         * */
        
        MnfAdhocOutItmVORowImpl row = (MnfAdhocOutItmVORowImpl) this.getMnfAdhocOutItm1().first();
         
         String itemId=null;
         Number itemQ=null;
         
        if(row!=null){
            itemId=row.getItmId();
            itemQ=row.getItmQty();

        }else  {
            itemId=null;
            itemQ=new Number(0);
        }
        curRow.setOutptItmId(itemId);
        curRow.setOutptItmQty(itemQ);
        curRow.setQtyBrct(itemQ);
        curRow.setActOutptItmQty(itemQ);
        curRow.setBalOpQty(itemQ);
        //curRow.setTmpBalOpQty(itemQ);
        curRow.setTmpBalOpQty(new Number(0));
        
       
        //UPDATE in case of adhoc job card
        MnfJcOpItmVORowImpl  r=((MnfJcOpItmVORowImpl)this.getMnfJcOpItmAll().getCurrentRow());
        
        Number qty = r.getItmQty();
        r.setActItmQty(qty);
    }
    
    
    /**
     * for  settting the current row of  ItemVoAll By given Item Id 
     * */
    
    public void setCurrentRow(String itemId,Integer itemType){
        MnfJcOpItmVOImpl vo=this.getMnfJcOpItmAll();
      //  System.out.println("Lengthof VO is "+vo.getRowCount());
      RowQualifier rq= new RowQualifier(this.getMnfJcOpItmAll());
      rq.setWhereClause("ItmId='"+itemId+"' and ItmType="+itemType+"");
        
        Row[] rs=vo.getFilteredRows(rq);
        
        if(rs.length>0){
            Row r =  rs[0];
            Integer range=vo.getRangeIndexOf(r);
            Key key=r.getKey();
            
            vo.findAndSetCurrentRowByKey(key, range);
        }
    }


    /**
     * Container's getter for MnfAdhocOutItm3.
     * @return MnfAdhocOutItm3
     */
    public MnfAdhocOutItmVOImpl getMnfAdhocOutItm3() {
        return (MnfAdhocOutItmVOImpl) findViewObject("MnfAdhocOutItm3");
    }

    /**
     * Container's getter for JcToOutPutItmVL2.
     * @return JcToOutPutItmVL2
     */
    public ViewLinkImpl getJcToOutPutItmVL2() {
        return (ViewLinkImpl) findViewLink("JcToOutPutItmVL2");
    }

    /**
     * Container's getter for MnfAdhocOutItm1.
     * @return MnfAdhocOutItm1
     */
    public MnfAdhocOutItmVOImpl getMnfAdhocOutItm1() {
        return (MnfAdhocOutItmVOImpl) findViewObject("MnfAdhocOutItm1");
    }

    /**
     * Container's getter for JcToOutPutItmVL1.
     * @return JcToOutPutItmVL1
     */
    public ViewLinkImpl getJcToOutPutItmVL1() {
        return (ViewLinkImpl) findViewLink("JcToOutPutItmVL1");
    }

    /**
     * Container's getter for MnfJcOpInputItem1.
     * @return MnfJcOpInputItem1
     */
    public MnfJcOpInputItemVOImpl getMnfJcOpAdhocInItem1() {
        return (MnfJcOpInputItemVOImpl) findViewObject("MnfJcOpAdhocInItem1");
    }

    /**
     * Container's getter for JcToInputItemVL1.
     * @return JcToInputItemVL1
     */
    public ViewLinkImpl getJcToInputItemVL1() {
        return (ViewLinkImpl) findViewLink("JcToInputItemVL1");
    }
    
    
    public ArrayList<String> valAndUpAdhoc(){
        ArrayList<String> list=new ArrayList<String>();
            
        MnfJcOpItmVORowImpl cur = (MnfJcOpItmVORowImpl) this.getMnfJcOpItmAll().getCurrentRow();
       
        if(cur!=null){
       
            if(cur.getItemNameTrans()==null|| cur.getItemNameTrans().trim().length()==0){
                list.add("Item Name is Mandatory");
            }
            if(!(cur.getItmQty().compareTo(new Number(0))>0)){
                list.add("Item Quantity should be positive");
            }
            if(!(cur.getItmPrice().compareTo(new Number(0))>0)){
                list.add("Item Price should be positive");
            }
            if((cur.getItmScrapPer().compareTo(new Number(0))<0||cur.getItmScrapPer().compareTo(new Number(100))>0)){
                list.add("Scrap Percentage should not be less than 0 and greater than 100");
            }
            if(list.size()>0){
                return list;
            }else{
                // write code for tranisient value updtaion.
                return null;
            }
        }else{
            return null;
        }
    }
    
    public String valBfForward(){
        String message ="Y";
        ArrayList<String> list=new ArrayList<String>();
        Integer count=0;
        
        MnfJcOpInputItemVOImpl inp=this.getMnfJcOpAdhocInItem1();
        
        MnfJcOpInputItemVORowImpl inRow = (MnfJcOpInputItemVORowImpl) inp.getCurrentRow();
        
        MnfAdhocOutItmVOImpl oup=this.getMnfAdhocOutItm1();
        
        MnfAdhocOutItmVORowImpl opRow = (MnfAdhocOutItmVORowImpl) oup.getCurrentRow();
        adfLog.info("input counts:::"+inp.getRowCount());
       
        if(inp.getRowCount()==0){
            message="Please Enter atleast one Input Item.";
            return message;
        }
    
        Integer jcBasis = (Integer) this.getMnfJc1().getCurrentRow().getAttribute("JcBasis");
        if(jcBasis.equals(new Integer(153))) {
            adfLog.info(" jc basis is:::"+jcBasis);
            ViewObjectImpl opitm=this.getMnfJcOpItmVO1();
           String docId=this.getMnfJcOpItmAll().getCurrentRow().getAttribute("DocId").toString();
            //Integer itmtype=62;
            String itmtype="62,63";
            RowQualifier rq= new RowQualifier(this.getMnfJcOpItmVO1());
//            rq.setWhereClause("CldId='"+EbizParams.GLBL_APP_CLD_ID()+"' and SlocId="+EbizParams.GLBL_APP_SERV_LOC()+" and OrgId='"+EbizParams.GLBL_APP_USR_ORG()+
//              "' and HoOrgId='"+EbizParams.GLBL_HO_ORG_ID()+"' and DocId='"+docId+"' and ItmType="+itmtype+"");
            
            rq.setWhereClause("CldId='"+EbizParams.GLBL_APP_CLD_ID()+"' and SlocId="+EbizParams.GLBL_APP_SERV_LOC()+" and OrgId='"+EbizParams.GLBL_APP_USR_ORG()+
              "' and HoOrgId='"+EbizParams.GLBL_HO_ORG_ID()+"' and DocId='"+docId+"' and ItmType in("+itmtype+")");
            adfLog.info("Expression"+rq.getExprStr());
            Row[] rs = this.getMnfJcOpItmVO1().getFilteredRows(rq);
            adfLog.info("length::"+rs.length);
            
            for(Row rr:rs) {
                //count=0;
                String val=(String)rr.getAttribute("RwrkFlg");
                if(val.equals("Y"))
                count++;
                }
            
            if(count==0){
            message="One Item should be reworkable in input items.";
            }else if(count>1){
                    message="More than One Item can not be reworkable in input items.";
            }
            else {
              
                for(Row rr:rs) {
                    String val=(String)rr.getAttribute("RwrkFlg"); 
                    if(val.equals("Y")) {
                        String itemid=(String)rr.getAttribute("ItmId");
                        
                        RowQualifier rq1= new RowQualifier(this.getMnfJcOpItmVO2());
                        rq1.setWhereClause("CldId='"+EbizParams.GLBL_APP_CLD_ID()+"' and SlocId="+EbizParams.GLBL_APP_SERV_LOC()+" and OrgId='"+EbizParams.GLBL_APP_USR_ORG()+
                          "' and HoOrgId='"+EbizParams.GLBL_HO_ORG_ID()+"' and DocId='"+docId+"' and ItmType="+67+"");
                     
                        Row[] rs1 = this.getMnfJcOpItmVO2().getFilteredRows(rq1);
                        adfLog.info("No. of Output Item in the vo::"+rs1.length);
                        for(Row rr1:rs1){
                            String itemid1=(String)rr1.getAttribute("ItmId");
                            list.add(itemid1);
                        }
                        adfLog.info("Length of list:::"+list.size());
                        if(list.contains(itemid)){
                            
                        }
                        else {
                            message="Reworkable Input Item Should be available as Output Item.";
                        }
                        
                    }
                }
            }
            
        }
        return message;
    }
    
    public String isDuplicate(String name){
        Integer jcBasis = (Integer) this.getMnfJc1().getCurrentRow().getAttribute("JcBasis");
        adfLog.info("isDuplicate:");
        adfLog.info("in thee validator of item name jcBasis:::"+jcBasis);
        if(jcBasis.equals(new Integer(144))){
        LOVItemNameVOImpl vo=this.getLOVItemName1();
        vo.setBindCldId(EbizParams.GLBL_APP_CLD_ID());
        vo.setBindHoOrgId(EbizParams.GLBL_HO_ORG_ID());
        vo.setBindSlocId(EbizParams.GLBL_APP_SERV_LOC());
        vo.setBindItmDesc(name.toString().trim());
        vo.setBindOrgId(EbizParams.GLBL_APP_USR_ORG());
        vo.executeQuery();
        //System.out.println("Name is "+name);
        
        //System.out.println("Row count is "+rs1.length);
        adfLog.info("Row Count::::"+vo.getRowCount());
        if (vo.getRowCount()>0) {
            String itemId =vo.first().getAttribute("ItmId").toString();
            Row[] rs = this.getMnfJcOpItmAll().getFilteredRows("ItmId", itemId.toString().trim());
            if (rs.length > 1) {
                return "Y";
            } else {
                if (rs.length == 0) {
                    return "N";
                } else {
                    if (this.getMnfJcOpItmAll().getCurrentRow().equals(rs[0])) {
                        return "N";
                    } else {
                        return "Y";
                    }
                }
            }
        }
        
        return "N";
        }
        else {
            adfLog.info(" in the reworkable Job card Block...");
            LOVItemNameVOImpl vo=this.getLOVItemName1();
            vo.setBindCldId(EbizParams.GLBL_APP_CLD_ID());
            vo.setBindHoOrgId(EbizParams.GLBL_HO_ORG_ID());
            vo.setBindSlocId(EbizParams.GLBL_APP_SERV_LOC());
            vo.setBindItmDesc(name.toString().trim());
            vo.setBindOrgId(EbizParams.GLBL_APP_USR_ORG());
            vo.executeQuery();
            //System.out.println("Name is "+name);
            
            //System.out.println("Row count is "+rs1.length);
            adfLog.info("Row Count::::"+vo.getRowCount());
            if (vo.getRowCount()>0) {
                String itemId =vo.first().getAttribute("ItmId").toString();
                String docId=this.getMnfJcOpItmAll().getCurrentRow().getAttribute("DocId").toString();
                Integer itmtype=(Integer)this.getMnfJcOpItmAll().getCurrentRow().getAttribute("ItmType");
                RowQualifier rq= new RowQualifier(this.getMnfJcOpItmAll());
                rq.setWhereClause("CldId='"+EbizParams.GLBL_APP_CLD_ID()+"' and SlocId="+EbizParams.GLBL_APP_SERV_LOC()+" and OrgId='"+EbizParams.GLBL_APP_USR_ORG()+
                  "' and HoOrgId='"+EbizParams.GLBL_HO_ORG_ID()+"' and ItmId='"+itemId+"' and DocId='"+docId+"' and ItmType="+itmtype+"");
                adfLog.info("Expression Validation::"+rq.getExprStr());
                Row[] rs = this.getMnfJcOpItmAll().getFilteredRows(rq);
                adfLog.info(" length of rs arry:::"+rs.length);
                if (rs.length > 1) {
                    return "Y";
                } else {
                    if (rs.length == 0) {
                        return "N";
                    } else {
                        if (this.getMnfJcOpItmAll().getCurrentRow().equals(rs[0])) {
                            return "N";
                        } else {
                            return "Y";
                        }
                    }
                }
            }
        }
        return "N";
    }


    /**
     * Container's getter for AppCcVw1.
     * @return AppCcVw1
     */
    public ViewObjectImpl getAppCcVwVO1() {
        return (ViewObjectImpl) findViewObject("AppCcVwVO1");
    }

    /**
     * Container's getter for AppCcDoc1.
     * @return AppCcDoc1
     */
    public ViewObjectImpl getAppCcDocVO1() {
        return (ViewObjectImpl) findViewObject("AppCcDocVO1");
    }
    
    
    /***
     * Code for Cost centre service added on 6 june 2015
     * 
     * */
    
    public AppCostCenterServiceAMImpl getAppAM() {
        String appModuleName = "appCostCenterSevice.model.service.AppCostCenterServiceAM";
        String appModuleConfig = "AppCostCenterServiceAMLocal";
        return (AppCostCenterServiceAMImpl) Configuration.createRootApplicationModule(appModuleName, appModuleConfig);
    }


    public void releaseAppAM(AppCostCenterServiceAMImpl appCostCenter) {
        Configuration.releaseRootApplicationModule((ApplicationModule) appCostCenter, true);
    }

    @Override
    protected void finalize() throws Throwable {

        releaseAppAM(getAppAM());

        super.finalize();
    }
    
    

    /**
     * Method which will let us know whether cost center is applicable for this current document or not
     */
    public Boolean chkCcApplicableOrNot() {
        Boolean val = false;

        ViewObjectImpl appCcDocVO1 = this.getAppCcDocVO1();
        appCcDocVO1.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        appCcDocVO1.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        appCcDocVO1.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        appCcDocVO1.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        appCcDocVO1.setNamedWhereClauseParam("BindDocId", 26004);
        appCcDocVO1.executeQuery();

        Row[] allRowsInRange = appCcDocVO1.getAllRowsInRange();
        if (allRowsInRange.length > 0) {
            val = true;
        }

        return val;
    }
    
    
    /**
       * Method which will be called when user click on generate Cost Ceneter based on header wise
       */
      public void generateCostCenterHeaderWise() {
          
          if (chkCcApplicableOrNot()) {
              AppCostCenterServiceAMImpl amCC = getAppAM();
              /*
          * @param cldId
          * @param slocId
          * @param hoOrgId
          * @param orgId
          * @param tempId
          * @param tempSrc
          * @param docId
          * @param usrId
          * @param tempCcId
          * @param amount
          * @param pCcLevel1
          * @param pCcLevel2
          * @param pCcLevel3
          * @param pCcLevel4
          * @param pCcLevel5
          */
              MnfJcVOImpl impl = this.getMnfJc1();
              Row currentRow = impl.getCurrentRow();

              if (currentRow != null) {
                  declareGlblValuesForCC();

                  amCC.generateCostCenterApp(EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                             EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                             currentRow.getAttribute("DocId").toString(), "H", 26004,
                                             EbizParams.GLBL_APP_USR(), currentRow.getAttribute("DocId").toString(),
                                             new Number(0), (String) resolvEl("#{pageFlowScope.P_CC_LEVEL1}"),
                                             (String) resolvEl("#{pageFlowScope.P_CC_LEVEL2}"),
                                             (String) resolvEl("#{pageFlowScope.P_CC_LEVEL3}"),
                                             (String) resolvEl("#{pageFlowScope.P_CC_LEVEL4}"),
                                             (String) resolvEl("#{pageFlowScope.P_CC_LEVEL5}"));

              }
          }
      }


      /**
       * Method which will set Global Parameter Values and will be called before opening AppCostCenterServicesTF
       */
      public void declareGlblValuesForCC() {
          
          ViewObjectImpl appCcVwVO1 = this.getAppCcVwVO1();
          appCcVwVO1.setRangeSize(-1);

          appCcVwVO1.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
          appCcVwVO1.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
          appCcVwVO1.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
          appCcVwVO1.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
          appCcVwVO1.setNamedWhereClauseParam("BindDocId", 26004);

          Row currentRow =  this.getMnfJcOpItmAll().getCurrentRow();
          if (currentRow != null) {
              for (int i = 1; i <= 5; i++) {
                  appCcVwVO1.setNamedWhereClauseParam("BindCcPos", i);
                  appCcVwVO1.executeQuery();

                  Row[] allRowsInRange = appCcVwVO1.getAllRowsInRange();
                  if (allRowsInRange.length > 0) {
                      String columnName = null;
                      for (Row r : allRowsInRange) {
                          AttributeDef[] attributeDef = this.getMnfJcOpItmAll().getAttributeDefs();

                          for (int j = 0; j < attributeDef.length; j++) {
                             
                             if (attributeDef[j].getColumnName() != null &&
                                  attributeDef[j].getColumnName().equals(r.getAttribute("DbobColNm"))) {
                                  columnName = attributeDef[j].getName();
                              }
                              
                          }
                          System.out.println("Column Name is " + columnName);

                          if (columnName != null) {

                              System.out.println("i is " + i + " Cost center Value is " +
                                                 currentRow.getAttribute(columnName));


                              RequestContext.getCurrentInstance().getPageFlowScope().put("P_CC_LEVEL" + i,
                                                                                         currentRow.getAttribute(columnName));
                          }
                      }
                  } else {
                      System.out.println("i is" + i + " cost center value is null");

                      RequestContext.getCurrentInstance().getPageFlowScope().put("P_CC_LEVEL" + i, null);

                  }
              }
          }
      }
      
      

    /**
        * Method which will call cost center bean
        */
       public void deleteCostCenterItem() {
          
           if (chkCcApplicableOrNot()) {
               System.out.println("Inside delete method");

               MnfJcOpItmVOImpl impl = this.getMnfJcOpItmAll();
               Row currentRow = impl.getCurrentRow();
               if (currentRow != null && currentRow.getAttribute("CcId") != null) {
                   AppCostCenterServiceAMImpl amCC = getAppAM();
                   System.out.println("Inside Am after cresting object");
                   if (amCC != null) {
                       System.out.println("------------------ Not null");
                       amCC.deleteCCLines(EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                               EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                               currentRow.getAttribute("DocId").toString(), "L", 26004,
                                               EbizParams.GLBL_APP_USR(), currentRow.getAttribute("CcId").toString(),
                                               (Number) currentRow.getAttribute("ItmTotAmt"),
                                               (String) resolvEl("#{pageFlowScope.P_CC_LEVEL1}"),
                                               (String) resolvEl("#{pageFlowScope.P_CC_LEVEL2}"),
                                               (String) resolvEl("#{pageFlowScope.P_CC_LEVEL3}"),
                                               (String) resolvEl("#{pageFlowScope.P_CC_LEVEL4}"),
                                               (String) resolvEl("#{pageFlowScope.P_CC_LEVEL5}"));
                   }
               }
               System.out.println("After calling delete method");
           }
       }

       /**
        * Method which will update amount present in cost center table
        */
       public void updateCostCenterAmt() {
           if (chkCcApplicableOrNot()) {
               System.out.println("Inside cost ceneter update amount method");
               
               MnfJcOpItmVOImpl impl = this.getMnfJcOpItmAll();
               Row currentRow = impl.getCurrentRow();
               if (currentRow != null && currentRow.getAttribute("CcId") != null &&
                   currentRow.getAttribute("ItmTotAmt") != null) {
                   AppCostCenterServiceAMImpl amCC = getAppAM();
                   System.out.println("Inside Am after cresting object");
                   if (amCC != null) {

                       declareGlblValuesForCC();

                       System.out.println("------------------ Not null");
                       Boolean amount =
                           amCC.updateCCAmount(EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                               EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                               currentRow.getAttribute("DocId").toString(), "L", 26004,
                                               EbizParams.GLBL_APP_USR(), currentRow.getAttribute("CcId").toString(),
                                               (Number) currentRow.getAttribute("ItmTotAmt"),
                                               (String) resolvEl("#{pageFlowScope.P_CC_LEVEL1}"),
                                               (String) resolvEl("#{pageFlowScope.P_CC_LEVEL2}"),
                                               (String) resolvEl("#{pageFlowScope.P_CC_LEVEL3}"),
                                               (String) resolvEl("#{pageFlowScope.P_CC_LEVEL4}"),
                                               (String) resolvEl("#{pageFlowScope.P_CC_LEVEL5}"));
                       if (!amount) {
                           ADFModelUtils.showFormattedFacesMessage("Update Cost Center",
                                                                   "Please Update Cost Center Values.",
                                                                   FacesMessage.SEVERITY_ERROR);
                       }
                   }
               }
               System.out.println("After calling Update method");
           }
       }
    
       public void updateCostCenter(String docId,Integer jcBasis){
           
        
        try {
            
               
           
                callStoredFunction(Types.VARCHAR, "APP.FN_SAVE_COST_CENTER(?,?,?,?,?,?,?,?)", new Object[] {
                                   EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                   EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(), 26004, "MNF",
                                   "MNF$JC$COST$CENTER", docId
                });
            
        } catch (Exception e) {
            e.printStackTrace();
        }
       }
       
       public void updateTempCostTable(){
           
        try {
            Row curItemRow = this.getMnfJcOpItmAll().getCurrentRow();
            Integer curIndex = null;
            Key curKey = null;
            if (curItemRow != null) {
                curIndex = this.getMnfJcOpItmAll().getRangeIndexOf(curItemRow);
                curKey = curItemRow.getKey();
            }
            RowSetIterator iter = this.getMnfJcOpItmAll().createRowSetIterator(null);
            Row r = null;
            while (iter.hasNext()) {
                r = iter.next();
                this.getMnfJcOpItmAll().setCurrentRow(r);
                this.updateCostCenterAmt();
            }

            if (curItemRow != null) {
                this.getMnfJcOpItmAll().findAndSetCurrentRowByKey(curKey, curIndex);
            }

        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        } finally {

        }
           
       }
       
       public Boolean isCostCenterAppli(){
           BigDecimal num=(BigDecimal)this.callStoredFunction(Types.NUMERIC, "App.fn_is_cost_center_present(?,?,?,?,?)",
                                                      new Object[]{ EbizParams.GLBL_APP_CLD_ID(),
                                                      EbizParams.GLBL_APP_SERV_LOC(),
                                                      EbizParams.GLBL_HO_ORG_ID(),
                                                      EbizParams.GLBL_APP_USR_ORG(),
                                                      26004}
                                                        );
        
        if(num.compareTo(new BigDecimal(0))>0){
               return true;
           }else
           return false;
       }

    /**
     * Container's getter for ValidDays1.
     * @return ValidDays1
     */
    public ViewObjectImpl getValidDays1() {
        return (ViewObjectImpl) findViewObject("ValidDays1");
    }
    
    public Integer[] getDays(){
        Integer[] val=new Integer[2];
        
        ViewObjectImpl dateVo=this.getValidDays1();
        dateVo.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        dateVo.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        dateVo.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        dateVo.executeQuery();
            
        val[0] = (Integer)this.getValidDays1().first().getAttribute("PDays");
        val[1] =(Integer) this.getValidDays1().first().getAttribute("FDays");
        return val;
    }
    
    
    public void  insertIntoSubContrator()
    {
        ViewObjectImpl impl = this.getMnfJc1();
        Row currentRow = impl.getCurrentRow();
        Integer retVal = 0;
        System.out.println("Call of SubContractor function");
        try {
        this.callStoredFunction(Types.INTEGER,
                                    "MNF.fn_mnf_gen_sco_from_jc_rc(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                    currentRow.getAttribute("CldId") , 
                                    currentRow.getAttribute("SlocId"), 
                                    currentRow.getAttribute("HoOrgId"),
                                    currentRow.getAttribute("OrgId"), 
                                    currentRow.getAttribute("DocId"),
                                    26004,
                                    currentRow.getAttribute("DocDt"),
                                    currentRow.getAttribute("UsrIdCreate"),
                                    currentRow.getAttribute("UsrIdCreateDt"), 105, null, null,
                                    currentRow.getAttribute("OutptItmQty"),
                                    currentRow.getAttribute("FyId"),
                                    currentRow.getAttribute("JcRmrk"),
                                    currentRow.getAttribute("EoId"),
                                    
            });
           
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("ERROR IN CALLING FUNCTION FN_MNF_INS_PDO_TO_JC_RC at AMIMPL:" + e.getMessage());
        }
    }
     
   
     
   // }


    /**
     * Container's getter for LovSubContracterNmVO1.
     * @return LovSubContracterNmVO1
     */
    public ViewObjectImpl getLovSubContracterNmVO1() {
        return (ViewObjectImpl) findViewObject("LovSubContracterNmVO1");
    }

    /**
     * Container's getter for LovMnfOpTypeVO1.
     * @return LovMnfOpTypeVO1
     */
    public ViewObjectImpl getLovMnfOpTypeVO1() {
        return (ViewObjectImpl) findViewObject("LovMnfOpTypeVO1");
    }

    /**
     * Container's getter for LovMnfOpEoVO1.
     * @return LovMnfOpEoVO1
     */
    public ViewObjectImpl getLovMnfOpEoVO() {
        return (ViewObjectImpl) findViewObject("LovMnfOpEoVO");
    }

    /**
     * Container's getter for LovSubContractCurrIdVO1.
     * @return LovSubContractCurrIdVO1
     */
    public ViewObjectImpl getLovSubContractCurrIdVO1() {
        return (ViewObjectImpl) findViewObject("LovSubContractCurrIdVO1");
    }

    /**
     * Container's getter for LovConvnFactrVO1.
     * @return LovConvnFactrVO1
     */
    public ViewObjectImpl getLovConvnFactrVO1() {
        return (ViewObjectImpl) findViewObject("LovConvnFactrVO1");
    }
    
    public void setDefaultSubContracterName(String OpNo) {
        if(OpNo!=null)
        {
        adfLog.info("Value change listerner is invoked"+OpNo);
        String opId=null;
      //  MNFJobcardAppAMImpl am=(MNFJobcardAppAMImpl)this.getApplicationModule();
        ViewObjectImpl oper=this.getLovAllOpVO1();
        oper.setNamedWhereClauseParam("bindCldId",EbizParams.GLBL_APP_CLD_ID());
        oper.setNamedWhereClauseParam("bindSlocId",EbizParams.GLBL_APP_SERV_LOC());
        oper.setNamedWhereClauseParam("bindHoOrgId",EbizParams.GLBL_HO_ORG_ID());
        oper.executeQuery();
        Row []op=oper.getFilteredRows("OpId",OpNo);
        if(op.length>0) {
            opId=(String)op[0].getAttribute("DocId");
        }
        ViewObjectImpl opeo=this.getLovMnfOpEoVO();
        opeo.setNamedWhereClauseParam("CldIdBind",EbizParams.GLBL_APP_CLD_ID());
        opeo.setNamedWhereClauseParam("HoOrgIdBind",EbizParams.GLBL_HO_ORG_ID());
        opeo.setNamedWhereClauseParam("SlocIdBind",EbizParams.GLBL_APP_SERV_LOC());
        opeo.executeQuery();
        //String opId=(String)this.getMnfJc1().getCurrentRow().getAttribute("OpId");
         //Object opId = getAttrsVal("MnfJc1Iterator", "OpId");
        adfLog.info("value of op id from Operation VCL::"+opId);
        if(opId!=null) {
            Row []rr=opeo.getFilteredRows("DocId",opId);
            for(Row r1:rr){
                String d1=(String)r1.getAttribute("DfltEoFlg");
                adfLog.info("Value of d1::"+d1);
                if(d1.equals("Y")) {
                    Number eoid=(Number)r1.getAttribute("EoId");
                    ViewObjectImpl sub=this.getLovSubContracterNmVO1();
                    sub.setNamedWhereClauseParam("CldIdBind",EbizParams.GLBL_APP_CLD_ID());
                    sub.setNamedWhereClauseParam("HoOrgIdBind",EbizParams.GLBL_HO_ORG_ID());
                    //sub.setNamedWhereClauseParam("OrgIdBind",EbizParams.GLBL_APP_USR_ORG());
                    sub.setNamedWhereClauseParam("SlocIdBind",EbizParams.GLBL_APP_SERV_LOC());
                    sub.executeQuery();
                    adfLog.info("value of eoid::"+eoid);
                    if(eoid !=null) {
                      this.getMnfJc1().getCurrentRow().setAttribute("EoId",eoid);
                      //  setEoId(eoid);
                        ViewObjectImpl curr=this.getLovSubContractCurrIdVO1();
                        curr.setNamedWhereClauseParam("CldIdBind",EbizParams.GLBL_APP_CLD_ID());
                        curr.setNamedWhereClauseParam("HoOrgIdBind",EbizParams.GLBL_HO_ORG_ID());
                        curr.setNamedWhereClauseParam("OrgIdBind",EbizParams.GLBL_APP_USR_ORG());
                        curr.setNamedWhereClauseParam("SlocIdBind",EbizParams.GLBL_APP_SERV_LOC());
                        curr.setNamedWhereClauseParam("EoIdBind",eoid);
                        curr.executeQuery();
                        //setEoId(eoid);
                        Row []rr2=curr.getFilteredRows("EoId",eoid);
                        if(rr2.length>0) {
                            Integer currid=(Integer)rr2[0].getAttribute("CurrIdSp");
                            adfLog.info("value of curridsp:"+currid);
                            if(currid!=null)
                            {
                                this.getMnfJc1().getCurrentRow().setAttribute("TransCurrIdSp",currid);
                            //setTransCurrIdSp(currid);
                            }
                        }
                        Row []rr1=sub.getFilteredRows("EoId",eoid);
                        if(rr1.length>0) {
                            String nm=(String)rr1[0].getAttribute("EoNm");
                            adfLog.info("Name of subcontracter:"+nm);
                            this.getMnfJc1().getCurrentRow().setAttribute("TransEoName",nm);
                            //return nm;
                        }
                    }
                }
            }
        
    }
        }
}

    /**
     * Container's getter for LovAllOpVO1.
     * @return LovAllOpVO1
     */
    public ViewObjectImpl getLovAllOpVO1() {
        return (ViewObjectImpl) findViewObject("LovAllOpVO1");
    }

    /**
     * Container's getter for LovMnfPdoMppOpDispVO1.
     * @return LovMnfPdoMppOpDispVO1
     */
    public ViewObjectImpl getLovMnfPdoMppOpDispVO1() {
        return (ViewObjectImpl) findViewObject("LovMnfPdoMppOpDispVO1");
    }
    public String ChkQcRequired() {
           String dummy = "N";
           try {
               dummy = (String) callStoredFunction(Types.VARCHAR, "MM.MM_GET_QC_REQD_FLG(?,?,?,?,?)", new Object[] {
                                                   EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_HO_ORG_ID(),
                                                   (String)this.getMnfJc1().getCurrentRow().getAttribute("OutptItmId"),
                                                   EbizParams.GLBL_APP_USR_ORG() });
               System.out.println("Retun val is : " + dummy);
     
           } catch (Exception ex) {
           }
     
           return dummy;
    }

    /**
     * Container's getter for OrgMnfPrfVO1.
     * @return OrgMnfPrfVO1
     */
    public ViewObjectImpl getOrgMnfPrfVO1() {
        return (ViewObjectImpl) findViewObject("OrgMnfPrfVO1");
    }
    
    public String ChkCalcYieldPerFlg() {
        String flg="N";
        ViewObjectImpl prf=this.getOrgMnfPrfVO1();
        prf.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        prf.setNamedWhereClauseParam("BindSlocId",EbizParams.GLBL_APP_SERV_LOC());
        prf.setNamedWhereClauseParam("BindHoOrgId",EbizParams.GLBL_HO_ORG_ID());
        prf.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        prf.executeQuery();
       RowSetIterator iter=prf.createRowSetIterator(null);
       while(iter.hasNext()) {
           Row r=iter.next();
            flg=(String)r.getAttribute("CalcOpYield1");
           adfLog.info("flg:::::"+flg);
           return flg;
       }
        return flg;
        
    }
    public String checkShortCloseForPartialQty() {
        adfLog.info("in the checkShortCloseForPartialQty ");
        String retVal="N";
        ViewObjectImpl impl = this.getMnfJc1();
        Row currentRow = impl.getCurrentRow();
        retVal=callStoredFunction(VARCHAR, "MNF.fn_mnf_pdo_jc_rc_partial_check(?,?,?,?,?,?)", new Object[] {
                                              EbizParams.GLBL_APP_CLD_ID(),EbizParams.GLBL_APP_SERV_LOC(),EbizParams.GLBL_APP_USR_ORG(),
                                              EbizParams.GLBL_HO_ORG_ID(),currentRow.getAttribute("DocId"),"JC"}).toString();
        adfLog.info("Function Return:::"+retVal);
        return retVal;
        
    }

    /**
     * Container's getter for AppItmPrfVO1.
     * @return AppItmPrfVO1
     */
    public ViewObjectImpl getAppItmPrfVO1() {
        return (ViewObjectImpl) findViewObject("AppItmPrfVO1");
    }
    // To check the decimal quantity 
    public String isItemSerialized() {
        String flag="R";
        String  outputItmId = (String)this.getMnfJc1().getCurrentRow().getAttribute("OutptItmId");
        adfLog.info("Item id::"+outputItmId);
        ViewObjectImpl impl = this.getAppItmPrfVO1();
        impl.setNamedWhereClauseParam("bindCldId", EbizParams.GLBL_APP_CLD_ID());
        impl.setNamedWhereClauseParam("bindSlocId",EbizParams.GLBL_APP_SERV_LOC());
        impl.setNamedWhereClauseParam("bindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        impl.executeQuery();
       Row[] rr=impl.getFilteredRows("ItmId",outputItmId);
       if(rr.length>0) {
           flag=(String)rr[0].getAttribute("SerializedFlg");
           adfLog.info("Value of flag::"+flag);
           return flag;
       }
       return flag;
        
    }

    /**
     * Container's getter for MnfJcOpItmVO1.
     * @return MnfJcOpItmVO1
     */
    public MnfJcOpItmVOImpl getMnfJcOpItmVO1() {
        return (MnfJcOpItmVOImpl) findViewObject("MnfJcOpItmVO1");
    }

    /**
     * Container's getter for MnfJcOpItmVO2.
     * @return MnfJcOpItmVO2
     */
    public MnfJcOpItmVOImpl getMnfJcOpItmVO2() {
        return (MnfJcOpItmVOImpl) findViewObject("MnfJcOpItmVO2");
    }
    
    public String insertIntoJobCardItemStk() {
        adfLog.info("insertIntoJobCardItemStk");
        this.getDBTransaction().postChanges();
        Row jcRow =  this.getMnfJc1().getCurrentRow();//.getAttribute("OpId");
       
        String result=(String)callStoredFunction(VARCHAR, "MNF.FN_MNF_INS_RWK_LOT_IN_STK(?,?,?,?,?,?,?)", new Object[] {
                                  EbizParams.GLBL_APP_CLD_ID(),EbizParams.GLBL_APP_SERV_LOC(),EbizParams.GLBL_HO_ORG_ID(),EbizParams.GLBL_APP_USR_ORG(), jcRow.getAttribute("DocId"),
                                  jcRow.getAttribute("OpId"),jcRow.getAttribute("OpSrNo")});

        adfLog.info("function return::"+result);
        this.getDBTransaction().postChanges();
        this.getMnfJcItmStk1().executeQuery();
        this.getMnfJcItmStkVOLot().executeQuery();
        this.getMnfJcItmStkVOSerial().executeQuery();
        
        return result;
    }
}
