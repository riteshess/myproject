
package mnfRoutingApp.model.services;


import java.io.File;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.el.ELContext;
import javax.el.ValueExpression;

import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import mnfRoutingApp.model.services.common.MNFRoutingAM;
import mnfRoutingApp.model.views.DualForSearchVOImpl;
import mnfRoutingApp.model.views.LOVOperationDescVOImpl;
import mnfRoutingApp.model.views.LOVOperationVOImpl;
import mnfRoutingApp.model.views.LOVOrganizationVOImpl;
import mnfRoutingApp.model.views.LOVPreviousRtVOImpl;
import mnfRoutingApp.model.views.LOVUserVOImpl;
import mnfRoutingApp.model.views.LOVWorkCenterVOImpl;
import mnfRoutingApp.model.views.MnfSearchVOImpl;
import mnfRoutingApp.model.views.OrgMnfRtVOImpl;

import oracle.adf.share.ADFContext;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.ApplicationModule;
import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.TransactionEvent;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Aug 04 17:16:34 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MNFRoutingAMImpl extends ApplicationModuleImpl implements MNFRoutingAM {
    /**
     * This is the default constructor (do not remove).
     */
    private static ADFLogger adfLog = (ADFLogger) ADFLogger.createADFLogger(MNFRoutingAMImpl.class);
    Integer usrId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
    String CldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
    String OrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
    String HoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
    Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
    
    public MNFRoutingAMImpl() {
    }

    /**
     * Container's getter for DualForSearchVO.
     * @return DualForSearchVO
     */
    public DualForSearchVOImpl getDualForSearchVO() {
        return (DualForSearchVOImpl) findViewObject("DualForSearchVO");
    }

    /**
     * Container's getter for LOVOperation1.
     * @return LOVOperation1
     */
    public LOVOperationVOImpl getLOVOperation1() {
        return (LOVOperationVOImpl) findViewObject("LOVOperation1");
    }

    /**
     * Container's getter for LOVWorkCenter1.
     * @return LOVWorkCenter1
     */
    public LOVWorkCenterVOImpl getLOVWorkCenter() {
        return (LOVWorkCenterVOImpl) findViewObject("LOVWorkCenter");
    }

    @Override
    public void beforeCommit(TransactionEvent transactionEvent) {
        // TODO Implement this method

        super.beforeCommit(transactionEvent);
    }

    /**
     * Method to set the parameter value on initilazation of routeSearchTF
     * **/
    public void setSearchParameter(String cld_id, Integer slc_id, String ho_org_id, String org_id, Integer usr_id) {
        /*  System.out.println("cld_id " + cld_id + " slc_id " + slc_id + " ho_org_id " + ho_org_id + " org_id " + org_id +
                           " usr_id " + usr_id); */
        setDualForSearchParam(cld_id, slc_id, ho_org_id, org_id, usr_id);

        ViewObject searchVO = getMnfSearchVO().getViewObject();
        searchVO.setNamedWhereClauseParam("BindHoOrgId", 0);
        getMnfSearchVO().executeQuery();
    }


    /**
     * Method to set the parameter value on initilazation of routeCreateEditTF
     * **/
    public void setGlobalParameter(String cld_id, Integer slc_id, String ho_org_id, String org_id, Integer usr_id,
                                   String doc_id) {
        /*   System.out.println("cld_id " + cld_id + " slc_id " + slc_id + " ho_org_id " + ho_org_id + " org_id " + org_id +
                           " usr_id " + usr_id + " doc_id " + doc_id); */



        setMnfRtVOParameter(cld_id, slc_id, ho_org_id, doc_id);
        setLOVOperationParameter(cld_id, slc_id, ho_org_id);
        setLovOrganizationParam(cld_id, slc_id, ho_org_id, org_id, usr_id);
        //set search view param for RT copy list
        setMnfSearch(cld_id, slc_id, ho_org_id);
        setLovPreviousRtParam(cld_id, slc_id, ho_org_id);

        setLovUserParam(slc_id);
        setLovOperationDescription(cld_id, slc_id, ho_org_id);
    }

    private void setLovOperationDescription(String cld_id, Integer slc_id, String ho_org_id) {

        getLOVOrganizationVO().setNamedWhereClauseParam("BindCldId", cld_id);
        getLOVOrganizationVO().setNamedWhereClauseParam("BindSlcId", slc_id);
        getLOVOrganizationVO().setNamedWhereClauseParam("BindHoOrgId", ho_org_id);
       // getLOVOrganizationVO().setNamedWhereClauseParam("BindOrgId", null);
        getLOVOrganizationVO().executeQuery();

    }

    private void setLovOrganizationParam(String cld_id, Integer slc_id, String ho_org_id, String org_id,
                                         Integer usr_id) {

        getLOVOrganizationVO().setNamedWhereClauseParam("BindCldId", cld_id);
        getLOVOrganizationVO().setNamedWhereClauseParam("BindSlcId", slc_id);
        getLOVOrganizationVO().setNamedWhereClauseParam("BindHoOrgId", ho_org_id);
       // getLOVOrganizationVO().setNamedWhereClauseParam("BindOrgId", null);
        getLOVOrganizationVO().executeQuery();

    }

    private void setLovUserParam(Integer slc_id) {

        getLOVUserVO().setNamedWhereClauseParam("BindSlcId", slc_id);
    }

    private void setLovPreviousRtParam(String cld_id, Integer slc_id, String ho_org_id) {

        getLOVPreviousRtVO().setNamedWhereClauseParam("BindCldId", cld_id);
        getLOVPreviousRtVO().setNamedWhereClauseParam("BindSlcId", slc_id);
        getLOVPreviousRtVO().setNamedWhereClauseParam("BindHoOrgId", ho_org_id);
        getLOVPreviousRtVO().executeQuery();

    }

    private void setDualForSearchParam(String cld_id, Integer slc_id, String ho_org_id, String org_id, Integer usr_id) {


        getDualForSearchVO().setNamedWhereClauseParam("BindCldId", cld_id);
        getDualForSearchVO().setNamedWhereClauseParam("BindSlcId", slc_id);
        getDualForSearchVO().setNamedWhereClauseParam("BindHoOrgId", ho_org_id);
        getDualForSearchVO().setNamedWhereClauseParam("BindOrgId", org_id);
        getDualForSearchVO().executeQuery();


    }

    private void setMnfRtVOParameter(String cld_id, Integer slc_id, String ho_org_id, String doc_id) {

        getMnfRtVO().setNamedWhereClauseParam("BindCldId", cld_id);
        getMnfRtVO().setNamedWhereClauseParam("BindSlcId", slc_id);
        getMnfRtVO().setNamedWhereClauseParam("BindHoOrgId", ho_org_id);
        getMnfRtVO().setNamedWhereClauseParam("BindDocId", doc_id);
        getMnfRtVO().executeQuery();
        RowSetIterator set = getMnfRtVO().createRowSetIterator(null);
        while(set.hasNext()) {
            Row rr=(Row)set.next();
            String freeze=(String)rr.getAttribute("RtFreezePred");
            ADFContext.getCurrent().getPageFlowScope().put("FREEZE_FLG", freeze);
            
        }
            
        }

    private void setLOVOperationParameter(String cld_id, Integer slc_id, String ho_org_id) {

        getLOVWorkCenter().setNamedWhereClauseParam("BindCldId", cld_id);
        getLOVWorkCenter().setNamedWhereClauseParam("BindSlcId", slc_id);
        getLOVWorkCenter().setNamedWhereClauseParam("BindHoOrgId", ho_org_id);
        getLOVWorkCenter().executeQuery();

        getLOVOperation1().setNamedWhereClauseParam("BindCldId", cld_id);
        getLOVOperation1().setNamedWhereClauseParam("BindSlcId", slc_id);
        getLOVOperation1().setNamedWhereClauseParam("BindHoOrgId", ho_org_id);
        getLOVOperation1().executeQuery();


    }

    private void setMnfSearch(String cld_id, Integer slc_id, String ho_org_id) {

        ViewObject searchVO = getMnfSearchVO().getViewObject();
        searchVO.setNamedWhereClauseParam("BindCldId", cld_id);
        searchVO.setNamedWhereClauseParam("BindSlcId", slc_id);
        searchVO.setNamedWhereClauseParam("BindHoOrgId", ho_org_id);
        searchVO.executeQuery();

    }

    /**
     * Method to set the existing opertaion in the list of operations
     * Created by Priyank khare on 19/08/2014
     * Do not Execute View object after setting value for check box;
     * **/

    public void setSelectedOperation() {

        Set<String> selectedOperationSet = getAttrsSet(getMnfRtOp(), "OpId");
        System.out.println("selectedOperationSet " + selectedOperationSet.size());
        getLOVOperation1().executeQuery();

        RowSetIterator opRit = getLOVOperation1().createRowSetIterator(null);
        Row opR = null;
        Integer counter = 0;
        String opId = null;

        //compare and mark as selected; rows which have operations that are present in MnfRtOPVo

        while (opRit.hasNext()) {
            opR = opRit.next();

            opId = opR.getAttribute("DocId").toString();

            if (selectedOperationSet.contains(opId)) {
                counter++;
                opR.setAttribute("selectValTrans", "Y");
                System.out.println("selected " + counter);
            }
        }
        opRit.closeRowSetIterator();

    }

    /**
     * Generalized method to get Attribute set.
     * Accepts ViewObjectImpl and Attribute Name as paramters.
     * Distinct values for the attribute will be returned as Set.
     * Created by Priyank khare on 19/08/2014
     * **/

    private Set<String> getAttrsSet(ViewObjectImpl vo, String attrsNm) {

        Set<String> operationSet = new HashSet<String>();

        RowSetIterator opRit = vo.createRowSetIterator(null);
        Row opR = null;

        //Iterate and store value of attrsNm from vo in Set
        while (opRit.hasNext()) {

            opR = opRit.next();

            operationSet.add(opR.getAttribute(attrsNm).toString());
            // System.out.println("operation added in set "+opR.getAttribute(attrsNm));

        }
        opRit.closeRowSetIterator();

        return operationSet;
    }

    /**
     * Generalized method to get selected Operation set for LOVOperation .
     * Accepts ViewObjectImpl and Attribute Name as paramters.
     * Distinct values for the attribute will be returned as Set.
     * Created by Priyank khare on 19/08/2014
     * **/

    private Set<String> getSelectedOperationSet(ViewObjectImpl vo, String attrsNm) {

        Set<String> operationSet = new HashSet<String>();

        RowSetIterator opRit = vo.createRowSetIterator(null);
        Row opR = null;

        //Iterate and store value of attrsNm from vo in Set
        while (opRit.hasNext()) {

            opR = opRit.next();
            if ("Y".equals(opR.getAttribute("selectValTrans")))
                operationSet.add(opR.getAttribute(attrsNm).toString());

        }
        opRit.closeRowSetIterator();

        return operationSet;
    }

    /**
     * This method will check for selected operations in LOVoperation and will compare it with operations in MnfRtOPVo
     * In case of mismatch operations will be added or removed accordingly.
     * Created by Priyank khare on 19/08/2014
     **/

    public void checkOperations() {

        //get all the selected operations in a set
        Set<String> selectedOperationSet = getSelectedOperationSet(getLOVOperation1(), "DocId");
        List<String> itemsForRemoval = new ArrayList<String>();

        System.out.println("selectedOperationSet " + selectedOperationSet);

        RowSetIterator mnfRtOpRit = getMnfRtOp().createRowSetIterator(null);
        Row mnfRtOpRow = null;
        String opId = null;

        while (mnfRtOpRit.hasNext()) {

            mnfRtOpRow = mnfRtOpRit.next();
            opId = mnfRtOpRow.getAttribute("OpId").toString();

            //compare Operation set with existing operations

            if (selectedOperationSet.contains(opId)) {
                //in case operation set has this operation then remove the operation from the Set.
                selectedOperationSet.remove(opId);
            } else {
                //in case of mismatch add it into itemsForRemoval list.
                itemsForRemoval.add(opId);
            }

            // int lastRowIndex = mnfRtOpRit.getRangeIndexOf(mnfRtOpRow);
            //System.out.println("lastRowIndex " + lastRowIndex);
        }
        mnfRtOpRit.closeRowSetIterator();


        //Remove rows for with operation in itemsForRemoval
        if (itemsForRemoval.size() > 0) {

            for (String s : itemsForRemoval)
                removeOperation(s);
        }
        getMnfRtOp().executeQuery();
        //Create rows for remaining operations in the Set
        if (selectedOperationSet.size() > 0) {

            for (String s : selectedOperationSet)
                createOperation(s);
        }
    }

    /**
     * Method to remove operation in MnfRtOPVo.
     * This method requires docId for operation to be removed.
     * Created by Priyank khare on 19/08/2014
     * **/
    private void removeOperation(String docIdVal) {
        System.out.println("remove items" + " docIdVal" + docIdVal);
        removeRows(getMnfRtOp(), "OpId", docIdVal);

    }

    /**
     * Method to Create new Operation in  MnfRtOPVo.
     * This method requires docId for operation to be created.
     * Created by Priyank khare on 19/08/2014
     * **/

    public void createOperation(String docId) {

        Integer srNo = getMnfRtSerialNo();

        if (getMnfRtOp().hasNext()) {

            Row lastRow = getMnfRtOp().last();
            //obtain the index of the last row
            int lastRowIndex = getMnfRtOp().getRangeIndexOf(lastRow);
            //create a new row
            Row newRow = getMnfRtOp().createRow();

            if (docId != null)
                newRow.setAttribute("OpId", docId);

            newRow.setAttribute("OpSrNo", srNo);

            //initialize the row
            newRow.setNewRowState(Row.STATUS_INITIALIZED);
            //add row to last index + 1 so it becomes last in the range set
            getMnfRtOp().insertRowAtRangeIndex(lastRowIndex + 1, newRow);

            //make row the current row so it is displayed correctly
            getMnfRtOp().setCurrentRow(newRow);

        } else {

            //System.out.println("getMnfRtSerialNo() " + srNo);

            Row r = getMnfRtOp().createRow();

            if (docId != null)
                r.setAttribute("OpId", docId);

            r.setAttribute("OpSrNo", srNo);

            getMnfRtOp().insertRow(r);
            getMnfRtOp().setCurrentRow(r);
        }
    }

    /**
     * Method to remove rows having given value for an attribute from a view object.
     * This method should be called with paramaters for view object name, attribute name and its value.
     * Created by Priyank khare on 19/08/2014
     * **/

    private void removeRows(ViewObjectImpl vwObjNm, String attrsNm, Object val) {
        System.out.println("remove rows");
        RowSetIterator rit = vwObjNm.createRowSetIterator(null);
        Row r = null;
        Object rowVal;
        //System.out.println("rit " + rit.getRowCount());

        while (rit.hasNext()) {
            r = rit.next();
            rowVal = r.getAttribute(attrsNm);
            System.out.println("rowVal " + rowVal + " val" + val);
            if (rowVal != null && rowVal.equals(val)) {
                System.out.println("row removed");
                r.remove();
            }
        }
        rit.closeRowSetIterator();
    }

    /**
     * Method to get new serial no for MnfRtOp.
     * Serial no generated should be in multiples of 10
     * **/

    public Integer getMnfRtSerialNo() {
        RowSetIterator mnfRtOpRit = getMnfRtOp().createRowSetIterator(null);
        Row mnfRtOpRow = null;
        Integer opSrNo = 0;
        Integer currNo = 0;

        while (mnfRtOpRit.hasNext()) {
            mnfRtOpRow = mnfRtOpRit.next();

            currNo = (Integer) mnfRtOpRow.getAttribute("OpSrNo");

            if (currNo.compareTo(opSrNo) == 1) {
                opSrNo = currNo;
            }
        }
        mnfRtOpRit.closeRowSetIterator();

        return (opSrNo + 1);
    }

    /**
     * Method to Delete selected operation from MnfRtOpVo and reorder the serial no.
     * This method should be called after selection of current row for MnfRtOpVo.
     * Create by Priyank Khare on 21/08/2014.
     * **/

    public void deleteOp() {

        RowSetIterator mnfOp = getMnfRtOp().createRowSetIterator(null);
        Integer srNo = null;
        Row mnfOpRow = getMnfRtOp().getCurrentRow();

        if (mnfOpRow != null && mnfOpRow.getAttribute("OpSrNo") != null) {

            srNo = (Integer) mnfOpRow.getAttribute("OpSrNo");
        }

        //iterate through mnfOpRow reorder all the serial number greater then the selected serial no

        while (mnfOp.hasNext()) {

            mnfOpRow = mnfOp.next();
            Integer currSrNo = (Integer) mnfOpRow.getAttribute("OpSrNo");

            if ((currSrNo).compareTo(srNo) == 1) {
                mnfOpRow.setAttribute("OpSrNo", currSrNo - 10);
            }
        }
        mnfOp.closeRowSetIterator();

        //now remove the row requested for deletion
        getMnfRtOp().getCurrentRow().remove();

    }

    /**
     *
     * **/

    public void reorderSrNo(Integer dragSrNo, Integer dropSrNo) {

        //System.out.println("dragSrNo " + dragSrNo + " dropSrNo " + dropSrNo);
        //check for null values
        if (dragSrNo != null && dropSrNo != null) {

            RowSetIterator mnfRtOpRit = getMnfRtOp().createRowSetIterator(null);
            Row currRow = null;
            Integer currSrNo = null;


            //CASE 1. An operation is moved down in row
            if (dropSrNo.compareTo(dragSrNo) == 1) {

                while (mnfRtOpRit.hasNext()) {

                    currRow = mnfRtOpRit.next();
                    currSrNo = (Integer) currRow.getAttribute("OpSrNo");

                    //deduct sr no for rows beneath draged upto the droped row is found
                    if (currSrNo.compareTo(dragSrNo) == 1 &&
                        (currSrNo.compareTo(dropSrNo) == 0 || currSrNo.compareTo(dropSrNo) == -1)) {

                        currRow.setAttribute("OpSrNo", currSrNo - 1);
                        //  System.out.println("currSrNo reduce " + currSrNo);

                        //swap the serial no for dragged row with the droped row serial no
                    } else if (currSrNo.compareTo(dragSrNo) == 0) {

                        currRow.setAttribute("OpSrNo", dropSrNo);
                        // System.out.println("currSrNo swap " + currSrNo);
                    }
                }
                mnfRtOpRit.closeRowSetIterator();

            } //CASE 2. An operation is moved up in row
            else if (dropSrNo.compareTo(dragSrNo) == -1) {

                while (mnfRtOpRit.hasNext()) {

                    currRow = mnfRtOpRit.next();
                    currSrNo = (Integer) currRow.getAttribute("OpSrNo");

                    //swap the serial no for dragged row with the droped row serial no
                    if (currSrNo.compareTo(dragSrNo) == 0) {

                        currRow.setAttribute("OpSrNo", dropSrNo);
                        System.out.println("currSrNo swap " + currSrNo);

                        //increase the serial no for rows beneath dropped row untill
                    } else if (currSrNo.compareTo(dragSrNo) == -1 &&
                               (currSrNo.compareTo(dropSrNo) == 0 || currSrNo.compareTo(dropSrNo) == 1)) {

                        currRow.setAttribute("OpSrNo", currSrNo + 1);
                        System.out.println("currSrNo increase " + currSrNo);

                    }
                }
                mnfRtOpRit.closeRowSetIterator();

            }
        }
    }

    public Object resolvEl(String data) {

        ADFContext adfCtx = ADFContext.getCurrent();
        ELContext elContext = adfCtx.getELContext();
        ValueExpression valueExp = adfCtx.getExpressionFactory().createValueExpression(elContext, data, Object.class);
        Object Message = valueExp.getValue(elContext).toString();

        return Message;
    }

    /**
     * Container's getter for MnfSearchVO1.
     * @return MnfSearchVO1
     */
    public MnfSearchVOImpl getMnfSearchVO() {
        return (MnfSearchVOImpl) findViewObject("MnfSearchVO");
    }

    /**
     * Mtethod to perform search action in search page
     * **/

    public void performSearch() {

        Row r = getDualForSearchVO().first();
        System.out.println(" ws  " + r.getAttribute("WcId"));
        ViewObject searchVO = getMnfSearchVO().getViewObject();
        searchVO.setNamedWhereClauseParam("BindCldId", r.getAttribute("CldId"));
        searchVO.setNamedWhereClauseParam("BindSlcId", r.getAttribute("SlocId"));
        searchVO.setNamedWhereClauseParam("BindHoOrgId", r.getAttribute("HoOrgId"));
        searchVO.setNamedWhereClauseParam("BindDocId", r.getAttribute("DocId"));
        searchVO.setNamedWhereClauseParam("BindOpId", r.getAttribute("OpId"));
        searchVO.setNamedWhereClauseParam("BindOpType", r.getAttribute("OpType"));
        searchVO.setNamedWhereClauseParam("BindWcId", r.getAttribute("WcId"));
        searchVO.setNamedWhereClauseParam("BindRtTyp", r.getAttribute("RouteTyp"));
        searchVO.setNamedWhereClauseParam("BindStrtDt", r.getAttribute("CreateDtFrm"));
        searchVO.setNamedWhereClauseParam("BindEndDt", r.getAttribute("CreateDtTo"));
        searchVO.executeQuery();
    }


    /**
     * Method to reset search view
     * **/

    public void performReset() {

        getDualForSearchVO().executeQuery();

        ViewObject searchVO = getMnfSearchVO().getViewObject();
        searchVO.setNamedWhereClauseParam("BindCldId", null);
        searchVO.setNamedWhereClauseParam("BindSlcId", null);
        searchVO.setNamedWhereClauseParam("BindHoOrgId", null);
        searchVO.setNamedWhereClauseParam("BindDocId", null);
        searchVO.setNamedWhereClauseParam("BindOpId", null);
        searchVO.setNamedWhereClauseParam("BindOpType", null);
        searchVO.setNamedWhereClauseParam("BindWcId", null);
        searchVO.setNamedWhereClauseParam("BindEndDt", null);
        searchVO.setNamedWhereClauseParam("BindStrtDt", null);
        searchVO.executeQuery();
    }

    /**
     * Container's getter for MnfRtVO1.
     * @return MnfRtVO1
     */
    public ViewObjectImpl getMnfRtVO() {
        return (ViewObjectImpl) findViewObject("MnfRtVO");
    }

    /**
     * Container's getter for MnfRtOpVO1.
     * @return MnfRtOpVO1
     */
    public ViewObjectImpl getMnfRtOp() {
        return (ViewObjectImpl) findViewObject("MnfRtOp");
    }

    /**
     * Container's getter for MnfRtToMnfRtOpVL1.
     * @return MnfRtToMnfRtOpVL1
     */
    public ViewLinkImpl getMnfRtToMnfRtOpVL1() {
        return (ViewLinkImpl) findViewLink("MnfRtToMnfRtOpVL1");
    }

    /**
     * Method to save Organization profile for route.
     * New profile is created automatically for Head Organization.
     * **/

    public void beforeSave(String cld_id, Integer slc_id, String ho_org_id, Integer usr_id, String doc_id) {
        
        adfLog.info("beforeSave:::");
        /*
        Integer orgProfileCnt = 0;

        RowSetIterator rsetIter = getOrgMnfRtVO().createRowSetIterator(null);
        Row r = null;

        while (rsetIter.hasNext()) {
            r = rsetIter.next();

            if (r.getAttribute("OrgId").equals(ho_org_id)) {
                orgProfileCnt = orgProfileCnt + 1;
            }
        }
        rsetIter.closeRowSetIterator();

        // System.out.println("profile count " + orgProfileCnt);
        if (orgProfileCnt.compareTo(0) == 0) {

            //create default ptrofile
            createOrgMnfRt(cld_id, slc_id, ho_org_id, usr_id, doc_id);
        } */
        replicateAllOrg(cld_id, slc_id, ho_org_id, ho_org_id, doc_id, usr_id);
    }

    /**
     * Method to create OrgMnfRtVO rows for given values.
     * **/

    public void createOrgMnfRt(String cld_id, Integer slc_id, String ho_org_id, Integer usr_id, String doc_id) {
    }

    public void createOrgMnfRt(String ho_org_id) {
        System.out.println("addeing org is  " + ho_org_id);
        Row r = (Row) getOrgMnfRtVO().createRow();
        r.setAttribute("RtActv", "Y");
        r.setAttribute("OrgId", ho_org_id);
        // r.setAttribute("UsrIdCreate", usr_id);
        //r.setAttribute("UsrIdCreateDt", new Timestamp(System.currentTimeMillis()));
        getOrgMnfRtVO().insertRow(r);
    }

    private static int NUMBER = Types.INTEGER;
    private static int NUMERIC = Types.NUMERIC;
    private static int VARCHAR = Types.VARCHAR;

    /**
     * Function to call a database function .
     * */
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {

        CallableStatement st = null;
        try {
            // 1. Create a JDBC CallabledStatement
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            // 2. Register the first bind variable for the return value
            st.registerOutParameter(1, sqlReturnType);

            if (bindVars != null) {
                // 3. Loop over values for the bind variables passed in, if any
                for (int z = 0; z < bindVars.length; z++) {
                    // 4. Set the value of user-supplied bind vars in the stmt
                    //System.out.println("bindVars " + z + " " + bindVars[z]);
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            // 5. Set the value of user-supplied bind vars in the stmt
            st.executeUpdate();
            // 6. Return the value of the first bind variable
            //System.out.println("Function return " + st.getObject(1));
            return st.getObject(1);
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("In Exception exch and Op and generate-->");
            //int end = e.getMessage().indexOf("\n");
            //  throw new JboException(e.getMessage().substring(11, end));
            //  String msg = e.getMessage().substring(11, end);

            String msg = e.getMessage();
            System.out.println(msg);
            FacesMessage ermsg = new FacesMessage(msg);
            ermsg.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, ermsg);
            return null;


        } finally {
            if (st != null) {
                try {
                    // 7. Close the statement
                    st.close();
                } catch (SQLException e) {
                    throw new JboException(e.getMessage());
                }
            }
        }
    }

    /**
     * Generalized method used to display the facesmessages.
     * Created by Priyank Khare on 03-06-2014.
     * @param msgHdr is to set the header for message dialog
     * @param msgDtl is to set if further detail information in meassage is required.
     * @param msgSeverity is to set severity mode.
     * **/
    public void showFacesMsg(String msgHdr, String msgDtl, javax.faces.application.FacesMessage.Severity msgSeverity,
                             String msgMode) {

        FacesMessage msg = new FacesMessage(msgHdr);
        msg.setDetail(msgDtl);
        msg.setSeverity(msgSeverity);
        FacesContext.getCurrentInstance().addMessage(msgMode, msg);

    }

    /**
     * Method used to call work flow function.
     * calls db functions APP.WF_GET_USR_LEVEL & APP.WF_INS_TXN
     * Created on 03-06-2014 by priyank Khare
     * **/

    public String callWfFunctions(String cldId, Integer slcId, String orgId, Integer usrId, String txnId, Integer docId,
                                  Integer docTypId) {

        /* System.out.println("callWfFunctions--- slcId " + slcId + " cldId " + cldId + "  " + " orgId " + orgId +
                           " usrId " + usrId + " docId " + docId + " txnId " + txnId + " docTypId " + docTypId); */

        //get the work flow for the document 25507
        String wfId = getWfId(cldId, slcId, orgId, docId, docTypId);
        //String action = "I";
        //String remark = "A";
        //Number amount11 = new Number(0);
        // System.out.println("wfId " + wfId);
        Object level;
        try {
            level = callStoredFunction(NUMBER, "APP.WF_GET_USR_LEVEL(?,?,?,?,?,?,?)", new Object[] {
                                       slcId, cldId, orgId, usrId, wfId, docId, docTypId
            });
            //  System.out.println("level " + level);
            callStoredFunction(NUMBER, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                               slcId, cldId, orgId, docId, docTypId, wfId, txnId, usrId, usrId, level, level, "I", "A",
                               new Number(0)
            });

        } catch (Exception nfe) {

            showFacesMsg(resolvElDCMsg("#{bundle['MSG.1113']}").toString(), null, FacesMessage.SEVERITY_ERROR, null);

            nfe.printStackTrace();
        }

        return null;
    }

    /**
     * Method used to get the Work flow id for a document.
     * Created by Priyank Khare on 30-05-2014.
     * **/

    public String getWfId(String cldId, Integer slcId, String orgId, Integer docId, Integer docTypId) {
        System.out.println("getWfId--- slcId " + slcId + " cldId " + cldId + "  " + " orgId " + orgId + " docId " +
                           docId + " docTypId " + docTypId);
        try {
            return callStoredFunction(VARCHAR, "APP.WF_GET_ID(?,?,?,?,?)", new Object[] {
                                      slcId, cldId, orgId, docId, docTypId }).toString();
        } catch (Exception e) {
            e.printStackTrace();

            StringBuilder saveMsg = new StringBuilder("<html><body><p><b>Error in getting Work Flow Details. </b></p>");

            saveMsg.append("</body></html>");

            showFacesMsg(saveMsg.toString(), null, FacesMessage.SEVERITY_ERROR, null);

        }
        return "0";
    }

    /**
     * Method created to call DB fucntion to get the user at which the document is pending
     * Created by Priyank Khare on 04-06-2014.
     * **/

    public Integer getDocUsrFromWF(String cldId, Integer slcId, String orgId, Integer usrId, String txnId,
                                   Integer docId, Integer docTypId) {
        Object fnRetVal;

        System.out.println("getDocUsrFromWF--- slcId " + slcId + " cldId " + cldId + "  " + " orgId " + orgId +
                           " txnId " + txnId + " docId " + docId + " docTypId " + docTypId);

        /* if (this.getMnfRtVO().getCurrentRow() != null)
            txnId = (String) this.getMnfRtVO().getCurrentRow().getAttribute("DocId"); */


        try {
            fnRetVal = callStoredFunction(NUMBER, "APP.WF_GET_CUR_USR(?,?,?,?,?,?)", new Object[] {
                                          slcId, cldId, orgId, 25507, txnId, 0
            });

System.out.println("Return func Val" + fnRetVal);
            if (fnRetVal != null) {

                if (fnRetVal.equals(-1)) {
                    showFacesMsg("Error while fetching user work flow details",
                                 "Error while fetching user work flow details", FacesMessage.SEVERITY_ERROR, null);
                }

                return Integer.parseInt(fnRetVal.toString());
            }

        } catch (Exception e) {

            e.printStackTrace();

        }
        showFacesMsg("Error while fetching user work flow details", null, FacesMessage.SEVERITY_ERROR, null);
        return 1;
    }

    public Object resolvElDCMsg(String data) {
        ADFContext adfCtx = ADFContext.getCurrent();
        ELContext elContext = adfCtx.getELContext();
        ValueExpression valueExp = adfCtx.getExpressionFactory().createValueExpression(elContext, data, Object.class);
        return valueExp.getValue(elContext);
    }

    /**
     * Container's getter for MnfRtAttchVO1.
     * @return MnfRtAttchVO1
     */
    public ViewObjectImpl getMnfRtAttchVO() {
        return (ViewObjectImpl) findViewObject("MnfRtAttchVO");
    }

    /**
     * Container's getter for MnfRtToMnfRtAttchVL1.
     * @return MnfRtToMnfRtAttchVL1
     */
    public ViewLinkImpl getMnfRtToMnfRtAttchVL1() {
        return (ViewLinkImpl) findViewLink("MnfRtToMnfRtAttchVL1");
    }

    /**
     * Container's getter for OrgMnfRtVO1.
     * @return OrgMnfRtVO1
     */
    public OrgMnfRtVOImpl getOrgMnfRtVO() {
        return (OrgMnfRtVOImpl) findViewObject("OrgMnfRtVO");
    }

    /**
     * Container's getter for MnfRtToOrgMnfRtVL1.
     * @return MnfRtToOrgMnfRtVL1
     */
    public ViewLinkImpl getMnfRtToOrgMnfRtVL1() {
        return (ViewLinkImpl) findViewLink("MnfRtToOrgMnfRtVL1");
    }

    public String createAttchmntRow(String cldId, Integer slcId, String hoOrgId, String orgId, String contentTyp,
                                    String fileNm, String extn) {

        String path = getUpFilePath(slcId);
     //   System.out.println("path " + path);

        String fileId = getUpFileId(cldId, slcId, hoOrgId, orgId, null);
        //System.out.println("fileId " + fileId);

        Row r = getMnfRtAttchVO().createRow();

       // System.out.println("contentTyp " + contentTyp);
        r.setAttribute("AttchFlExtn", contentTyp);
        r.setAttribute("DispFlNm", fileNm);
        r.setAttribute("AttchFlNm", fileId);
        r.setAttribute("AttchFlPath", path + fileId + extn);

        getMnfRtAttchVO().insertRow(r);


        return path + fileId;
    }

    /**
     * Method to get system generated file no
     * **/
    public String getUpFileId(String cldId, Integer slcId, String hoOrgId, String orgId, String tabNm) {

        Object fnRetVal;

        try {
            fnRetVal = callStoredFunction(VARCHAR, "APP.FN_APP_GEN_FILE_ATTCH_ID(?,?,?,?,?)", new Object[] {
                                          slcId, cldId, hoOrgId, orgId, "MNF$RT$ATTCH"
            });

            if (fnRetVal != null) {

                if (fnRetVal.equals(-1)) {
                    showFacesMsg("Error while fetching file Id details", null, FacesMessage.SEVERITY_ERROR, null);
                }

                return fnRetVal.toString();
            }

        } catch (Exception e) {

            e.printStackTrace();

        }
        showFacesMsg("Error while fetching file Id details", null, FacesMessage.SEVERITY_ERROR, null);

        return "0";
    }

    /**
     * Method to get default file location
     * **/
    public String getUpFilePath(Integer slcId) {
        Object fnRetVal;

        try {
            fnRetVal = callStoredFunction(VARCHAR, "APP.FN_GET_APP_DOC_ATTACH_PATH(?)", new Object[] { slcId });

            if (fnRetVal != null) {

                if (fnRetVal.equals(-1)) {
                    showFacesMsg("Error while fetching file path details", null, FacesMessage.SEVERITY_ERROR, null);
                }

                return fnRetVal.toString();
            }

        } catch (Exception e) {

            e.printStackTrace();

        }
        showFacesMsg("Error while fetching file path details", null, FacesMessage.SEVERITY_ERROR, null);

        return null;
    }

    /**
     * method to copy existing route into new route
     * **/

    public void copyRouteFromFunction(String cld_id, Integer slc_id, String ho_org_id, String org_id, Integer usr_id,
                                      String doc_id, String rt_id) {


        Object refIdObj = getMnfRtVO().getCurrentRow().getAttribute("RefRtId");
        System.out.println("refIdObj " + refIdObj);

        if (refIdObj != null) {

            String newDocId = getMnfRtVO().getCurrentRow().getAttribute("DocId").toString();
            System.out.println("newDocId " + newDocId);
            String refId = getMnfRtVO().getCurrentRow().getAttribute("RefRtId").toString();

            //set BindVars for MNF$RT
            getMnfRtVO().setNamedWhereClauseParam("BindDocId", newDocId);

            Object fnRetVal;

            try {

                fnRetVal = callStoredFunction(VARCHAR, "FN_MNF_COPY_PRF(?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                              cld_id, slc_id, ho_org_id, ho_org_id, usr_id, "MNF.MNF$RT", rt_id, null,
                                              newDocId, refId, "Default RT"
                });

                System.out.println("fnRetVal " + fnRetVal);
            } catch (Exception e) {

                e.printStackTrace();
            }

            getMnfRtOp().executeQuery();

            getOrgMnfRtVO().executeQuery();

            //disable reserve mode which has been enabled in Value change event of reference Id.
            disableReservedMode();
        }
    }

    public void reviseRoute(String cld_id, Integer slc_id, String ho_org_id, String org_id, Integer usr_id,
                            String doc_id, String rt_id) {

        System.out.println("copy from doc_id " + doc_id);
        if (doc_id != null) {

            /* getMnfRtVOForCopy().setNamedWhereClauseParam("BindCldId", cld_id);
            getMnfRtVOForCopy().setNamedWhereClauseParam("BindSlcId", slc_id);
            getMnfRtVOForCopy().setNamedWhereClauseParam("BindHoOrgId", ho_org_id);
            getMnfRtVOForCopy().setNamedWhereClauseParam("BindDocId", doc_id);

            Row[] mnfRTRows = getMnfRtVOForCopy().getFilteredRows("DocId", doc_id);

            //System.out.println("mnfRTRows " + mnfRTRows.length);

            if (mnfRTRows.length > 0) {

                //set revision flag for current row
                getMnfRtVO().getCurrentRow().setAttribute("RtMode", 44);

                System.out.println("set mode of current row " );

                Row mnfRTCopyRow = mnfRTRows[0];
                String disp_no = mnfRTCopyRow.getAttribute("RtId").toString();
                //Integer rev_no = getRevisionNo(cld_id, slc_id, ho_org_id, org_id, doc_id, disp_no);
                Integer rev_no = Integer.parseInt(mnfRTCopyRow.getAttribute("RtRevNo").toString());

                System.out.println("rev_no " + rev_no);
                //create MNF$RT rows
                Row newMnfRTRow = getMnfRtVO().createRow();

                newMnfRTRow.setAttribute("UsrIdCreate", usr_id);
                newMnfRTRow.setAttribute("RtType", mnfRTCopyRow.getAttribute("RtType"));
                newMnfRTRow.setAttribute("RtBasis", mnfRTCopyRow.getAttribute("RtBasis"));
                // newMnfRTRow.setAttribute("RefRtId", mnfRTCopyRow.getAttribute("RefRtId"));
                newMnfRTRow.setAttribute("RtLegCd", mnfRTCopyRow.getAttribute("RtLegCd"));
                newMnfRTRow.setAttribute("RtRmrk", mnfRTCopyRow.getAttribute("RtRmrk"));
                newMnfRTRow.setAttribute("RtId", mnfRTCopyRow.getAttribute("RtId"));
                newMnfRTRow.setAttribute("RtDesc", mnfRTCopyRow.getAttribute("RtDesc"));
                newMnfRTRow.setAttribute("RtRevNo", (rev_no + 1));

                if (mnfRTCopyRow.getAttribute("RtBasis").equals(15)) {
                    System.out.println(" copy previous");
                    newMnfRTRow.setAttribute("RefRtId", mnfRTCopyRow.getAttribute("RefRtId"));
                } else {
                    newMnfRTRow.setAttribute("RefRtId", doc_id);
                }
                getMnfRtVO().insertRow(newMnfRTRow);

                getMnfRtVO().setCurrentRow(newMnfRTRow);

                String newDocId = getMnfRtVO().getCurrentRow().getAttribute("DocId").toString();

                //set BindVars for MNF$RT
                getMnfRtVO().setNamedWhereClauseParam("BindDocId", newDocId);

                Object fnRetVal;

                try {

                    fnRetVal = callStoredFunction(VARCHAR, "MNF.FN_MNF_COPY_PRF(?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                  cld_id, slc_id, ho_org_id, ho_org_id, usr_id, "MNF.MNF$RT", rt_id,
                                                  null, newDocId, doc_id, "Default RT"
                    });

                    //System.out.println("fnRetVal " + fnRetVal);
                } catch (Exception e) {

                    e.printStackTrace();
                }

                getMnfRtOp().executeQuery();

                getOrgMnfRtVO().executeQuery();

                //getMnfRtVO().executeQuery();

                //disable reserve mode which has been enabled in Value change event of reference Id.
                disableReservedMode();

            } */

            /**
          * Modified by Nisha Mam
          *
          * **/
            System.out.println("set mode of current row ");
            Row mnfRTCopyRow = getMnfRtVO().getCurrentRow();
            mnfRTCopyRow.setAttribute("RtMode", 44);

            System.out.println("set mode of current row ");

            //Row mnfRTCopyRow = mnfRTRows[0];
            String disp_no = mnfRTCopyRow.getAttribute("RtId").toString();
            //Integer rev_no = getRevisionNo(cld_id, slc_id, ho_org_id, org_id, doc_id, disp_no);
            Integer rev_no = (Integer) mnfRTCopyRow.getAttribute("RtRevNo");
            Integer rttype = (Integer) mnfRTCopyRow.getAttribute("RtType");
            Integer rtbasis = (Integer) mnfRTCopyRow.getAttribute("RtBasis");
            String legcycode =
                mnfRTCopyRow.getAttribute("RtLegCd") == null ? "" : (String) mnfRTCopyRow.getAttribute("RtLegCd");
            String remarks =
                mnfRTCopyRow.getAttribute("RtRmrk") == null ? "" : mnfRTCopyRow.getAttribute("RtRmrk").toString();
            String rtid = mnfRTCopyRow.getAttribute("RtId") == null ? "" : (String) mnfRTCopyRow.getAttribute("RtId");
            String rtdesc =
                mnfRTCopyRow.getAttribute("RtDesc") == null ? "" : (String) mnfRTCopyRow.getAttribute("RtDesc");
            adfLog.info("rev_no " + rtid + rtdesc + rev_no);


            //create MNF$RT rows
            Row newMnfRTRow = getMnfRtVO().createRow();
            getMnfRtVO().insertRow(newMnfRTRow);
            newMnfRTRow.setAttribute("UsrIdCreate", usr_id);
            newMnfRTRow.setAttribute("RtType", rttype);
            newMnfRTRow.setAttribute("RtBasis", rtbasis);
            // newMnfRTRow.setAttribute("RefRtId", mnfRTCopyRow.getAttribute("RefRtId"));
            newMnfRTRow.setAttribute("RtLegCd", legcycode);
            newMnfRTRow.setAttribute("RtRmrk", remarks);
            newMnfRTRow.setAttribute("RtId", rtid);
            newMnfRTRow.setAttribute("RtDesc", rtdesc);
            newMnfRTRow.setAttribute("RtRevNo", rev_no + 1);
            System.out.println("--------------------------- ");

            if (mnfRTCopyRow.getAttribute("RtBasis").equals(15)) {
                System.out.println(" copy previous");
                newMnfRTRow.setAttribute("RefRtId", mnfRTCopyRow.getAttribute("RefRtId"));
            } else {
                newMnfRTRow.setAttribute("RefRtId", doc_id);
            }

            getMnfRtVO().setCurrentRow(newMnfRTRow);
            String newDocId = getMnfRtVO().getCurrentRow().getAttribute("DocId").toString();
            //set BindVars for MNF$RT
            getMnfRtVO().setNamedWhereClauseParam("BindDocId", newDocId);
            Object fnRetVal;
            try {
                fnRetVal = callStoredFunction(VARCHAR, "FN_MNF_COPY_PRF(?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                              cld_id, slc_id, ho_org_id, ho_org_id, usr_id, "MNF.MNF$RT", rt_id, null,
                                              newDocId, doc_id, "Default RT"
                });
            } catch (Exception e) {
                e.printStackTrace();
            }
            getMnfRtOp().executeQuery();
            getOrgMnfRtVO().executeQuery();
            //getMnfRtVO().executeQuery();
            //disableReservedMode();

        }
    }

    /**
     * Method to get revision
     * **/
    protected Integer getRevisionNo(String cld_id, Integer slc_id, String ho_org_id, String org_id, String doc_id,
                                    String display_no) {
        System.out.println("cld_id " + cld_id + " slc_id " + slc_id + " ho_org_id " + ho_org_id + "org_id " + org_id +
                           " doc_id " + doc_id + " display_no " + display_no);
        Object fnRetVal;

        try {

            fnRetVal = callStoredFunction(NUMERIC, "FN_MNF_GET_DOC_REV_NO(?,?,?,?,?,?,?,?)", new Object[] {
                                          slc_id, cld_id, ho_org_id, ho_org_id, 25507, doc_id, display_no, "MNF$RT"
            });

            System.out.println("fnRetVal " + fnRetVal);
            if (fnRetVal != null)
                return Integer.parseInt(fnRetVal.toString());

        } catch (Exception e) {

            e.printStackTrace();
        }

        return 1;
    }

    /**
     * Container's getter for MnfRtOpVO1.
     * @return MnfRtOpVO1
     */
    public ViewObjectImpl getMnfRtOpForCopy() {
        return (ViewObjectImpl) findViewObject("MnfRtOpForCopy");
    }

    /**
     * Container's getter for MnfRtVO1.
     * @return MnfRtVO1
     */
    public ViewObjectImpl getMnfRtVOForCopy() {
        return (ViewObjectImpl) findViewObject("MnfRtVOForCopy");
    }

    /**
     * Method to check if route can be deleted and hence, perform same action
     * Return Y if Deleted succesfully else return message from function.
     * **/
    public String deleteRoute() {

        //call function to check the status for the route.

        boolean delete = true;

        if (delete) {
            //Delete rows from Operations
            removeRows("MnfRtOp");

            //delete rows from Org Rt profile
            removeRows("OrgMnfRtVO");

            //Delete rows from attachments
            removeRows("MnfRtAttchVO");

            //Delete attachments from file System

            //Delete current row from RT
            getMnfRtVO().getCurrentRow().remove();

        } else {
            return "Y";
        }

        return "Y";
    }

    /**
     * A generalized method to remove all rows of a VO.
     * @param voName which the name of VO.
     * Created by Priyank Khare on 10-06-2014
     * **/

    private void removeRows(String voName) {

        while (findViewObject(voName).createRowSetIterator(null).hasNext()) {

            findViewObject(voName).createRowSetIterator(null).next().remove();

            System.out.println(voName + " row removed ");
        }
    }

    public void updateWfStatus(String doc_txn_id, String wf_mode) {

        System.out.println("wf_mode " + wf_mode);
        //wf_mode : V - revert, I - Initialize, F - Forwarded, A - Approved, R - Reject
        Row r = getMnfRtVO().getCurrentRow();
        System.out.println("Current Row : " + r);
        if ("I".equals(wf_mode)) {
            r.setAttribute("RtMode", 47);
        } else if ("F".equals(wf_mode)) {
            r.setAttribute("RtMode", 46);

        } else if ("A".equals(wf_mode)) {

            r.setAttribute("RtMode", 43);

        } else if ("R".equals(wf_mode)) {

            r.setAttribute("RtMode", 45);

        }

        getDBTransaction().commit();
    }

    /**
     * Check unique name validation for Route Desc.
     * Route description is not case sensitive
     * @returns Y if name exists otherwise N
     * **/

    public String validateRtNm(String cldId, Integer slcId, String hoOrgId, String tabFlg, String rtDesc,
                               String doc_txn_id) {

        try {
            return callStoredFunction(VARCHAR, "FN_PRE_NM_EXIST(?,?,?,?,?,?)", new Object[] {
                                      cldId, slcId, hoOrgId, "RT", rtDesc, doc_txn_id
        }).toString();
        } catch (Exception e) {
            e.printStackTrace();

            StringBuilder saveMsg = new StringBuilder("<html><body><p><b>Error in Validating Route Name. </b></p>");

            saveMsg.append("</body></html>");

            showFacesMsg(saveMsg.toString(), null, FacesMessage.SEVERITY_ERROR, null);

        }
        return "N";
    }

    public void createNewRoute() {

        Row newMnfRTRow = getMnfRtVO().createRow();
        getMnfRtVO().insertRow(newMnfRTRow);
        getMnfRtVO().setCurrentRow(newMnfRTRow);

        String newDocId = getMnfRtVO().getCurrentRow().getAttribute("DocId").toString();
        getMnfRtVO().setNamedWhereClauseParam("BindDocId", newDocId);
        ADFContext.getCurrent().getPageFlowScope().put("FREEZE_FLG","N");

    }

    /**
     * Container's getter for LOVUser1.
     * @return LOVUser1
     */
    public LOVUserVOImpl getLOVUserVO() {
        return (LOVUserVOImpl) findViewObject("LOVUserVO");
    }


    public void enableReservedMode() {
        if (getReleaseLevel() != ApplicationModule.RELEASE_LEVEL_RESERVED) {
            System.out.println("Setting release level as RELEASE_LEVEL_RESERVED.....");

            setReleaseLevel(ApplicationModule.RELEASE_LEVEL_RESERVED);
        }
    }

    public void disableReservedMode() {
        if (getReleaseLevel() != ApplicationModule.RELEASE_LEVEL_MANAGED) {
            System.out.println("Setting release level as RELEASE_LEVEL_MANAGED.....");

            setReleaseLevel(ApplicationModule.RELEASE_LEVEL_MANAGED);
        }
    }

    /**
     * Container's getter for LOVOrganization1.
     * @return LOVOrganization1
     */
    public LOVOrganizationVOImpl getLOVOrganizationVO() {
        return (LOVOrganizationVOImpl) findViewObject("LOVOrganizationVO");
    }

    public void replicateAllOrg(String cld_id, Integer slc_id, String ho_org_id, String org_id, String doc_id,
                                Integer usr_id) {
        adfLog.info("replicateAllOrg method is called ");
        adfLog.info("Value of revision no::"+(Integer) this.getMnfRtVO().getCurrentRow().getAttribute("RtRevNo"));
        adfLog.info("user id create value::"+this.getMnfRtVO().getCurrentRow().getAttribute("UsrIdCreate"));
        if ((Integer) this.getMnfRtVO().getCurrentRow().getAttribute("RtRevNo") == 0 &&
            this.getMnfRtVO().getCurrentRow().getAttribute("UsrIdCreate") != null) {
            removeAllRows("OrgMnfRtVO");
            RowSetIterator rowSetIter = getLOVOrganizationVO().createRowSetIterator(null);
            adfLog.info("size of iterator:::"+rowSetIter.getAllRowsInRange());
            Row r = null;

            while (rowSetIter.hasNext()) {
                r = rowSetIter.next();
                System.out.println("org------->" + r.getAttribute("OrgId"));
                //   createOrgMnfRt(cld_id, slc_id, r.getAttribute("OrgId").toString(), usr_id, doc_id);
                createOrgMnfRt(r.getAttribute("OrgId").toString());
            }
            rowSetIter.closeRowSetIterator();
            getOrgMnfRtVO().executeQuery();
            //disableReservedMode();
        }
    }

    /**
     * A generalized method to remove all rows of a VO.
     * @param voName which the name of VO.
     * Created by Priyank Khare on 10-06-2014
     * **/

    private void removeAllRows(String voName) {
          adfLog.info("removeAll Rows...");
        while (findViewObject(voName).createRowSetIterator(null).hasNext()) {

            findViewObject(voName).createRowSetIterator(null).next().remove();

            System.out.println(voName + " row removed ");
        }
    }

    /**
     * Container's getter for LOVPreviousRtVO1.
     * @return LOVPreviousRtVO1
     */
    public LOVPreviousRtVOImpl getLOVPreviousRtVO() {
        return (LOVPreviousRtVOImpl) findViewObject("LOVPreviousRtVO");
    }

    /**
     * Container's getter for LOVOperationDescVO1.
     * @return LOVOperationDescVO1
     */
    public LOVOperationDescVOImpl getLOVOperationDescVO1() {
        return (LOVOperationDescVOImpl) findViewObject("LOVOperationDescVO1");
    }
    /**
     * To Delete Attached Document
     * @return void
     */
    public void deleteAttachFileRow(String path) {
            RowSetIterator rowSetIterator = null;
            try{
            System.out.println("File path in AMimpl : " + path);
            String filePath = "";
            String fileNm = "",cldId = "",horgId ="",docId ="";
            int slocId =1;
            ViewObjectImpl attch1 = this.getMnfRtAttchVO();
            Row[] rows = attch1.getFilteredRows("AttchFlPath", path);
                System.out.println(rows.length);
                if(rows.length>0){
                   fileNm = (String)rows[0].getAttribute("AttchFlNm");
                   cldId  = (String)rows[0].getAttribute("CldId");
                   horgId = (String)rows[0].getAttribute("HoOrgId");
                   slocId = Integer.parseInt(rows[0].getAttribute("SlocId").toString());
                   docId = (String)rows[0].getAttribute("DocId");
                }
                            rowSetIterator = attch1.getRowSetIterator();
                                Key key = new Key(new Object[] {fileNm, cldId,docId,horgId,slocId });
                                Row[] ro = rowSetIterator.findByKey(key, 1);
                                //System.out.println("Filtered Row : "+ro.length);
                                Row row = rowSetIterator.findByKey(key, 1)[0];
                                rowSetIterator.setCurrentRow(row);
            Row r = this.getMnfRtAttchVO().getCurrentRow();
            filePath = (String)r.getAttribute("AttchFlPath");
            //System.out.println("Current Row File Path : "+filePath);
            filePath = (String)row.getAttribute("AttchFlPath");
            //System.out.println("Row File Path : "+filePath);                
            File f = new File(filePath);
                if(f.exists()){
                boolean success = f.delete();
                System.out.println("File Deleted");
                }
            } catch (Exception x) {
     
                System.err.format("%s: no such" + " file or directory%n", path);
            }
            rowSetIterator.removeCurrentRow();
        }

    /**
     * Container's getter for MnfRtOpPredVO1.
     * @return MnfRtOpPredVO1
     */
    public ViewObjectImpl getMnfRtOpPredVO1() {
        return (ViewObjectImpl) findViewObject("MnfRtOpPredVO1");
    }

    /**
     * Container's getter for MnfRtOToMnfRtOpPredVL1.
     * @return MnfRtOToMnfRtOpPredVL1
     */
    public ViewLinkImpl getMnfRtOToMnfRtOpPredVL1() {
        return (ViewLinkImpl) findViewLink("MnfRtOToMnfRtOpPredVL1");
    }

    /**
     * Container's getter for LOVOperationDescVO2.
     * @return LOVOperationDescVO2
     */
    public LOVOperationDescVOImpl getLOVOperationDescVO2() {
        return (LOVOperationDescVOImpl) findViewObject("LOVOperationDescVO2");
    }
 
 
     public void createMnfPredesorRow() {
        this.getDBTransaction().postChanges();
     
 }
     public String duplicatePredOperation(String predOp) {
         String pred_opno=null;
         String op_id=null;
         ViewObjectImpl desc=this.getLOVOperationDescVO1();
         desc.setNamedWhereClauseParam("BindCldId",CldId);
         desc.setNamedWhereClauseParam("BindHoOrgId",HoOrgId);
         desc.setNamedWhereClauseParam("BindSlcId",SlocId);
         desc.executeQuery();
        Row[] rr = desc.getFilteredRows("OpDesc",predOp);
        adfLog.info("value of rr::"+rr.length+" predOp"+predOp);
        if(rr.length>0) {
            pred_opno=(String)rr[0].getAttribute("DocId");
            op_id=(String)this.getMnfRtOpPredVO1().getCurrentRow().getAttribute("OpId");
            if(pred_opno.equals(op_id))
            return "X";
        }
        ViewObjectImpl pred=this.getMnfRtOpPredVO1();
         Row curr=pred.getCurrentRow();
         String cld_id=(String)curr.getAttribute("CldId");
         Integer sloc_id=(Integer)curr.getAttribute("SlocId");
         String ho_org_id=(String)curr.getAttribute("HoOrgId");
         String doc_id=(String)curr.getAttribute("DocId");
         op_id=(String)curr.getAttribute("OpId");
         Integer opSr_no=(Integer)curr.getAttribute("OpSrNo");
         // pred_opno=(String)curr.getAttribute("PredOpId");
         adfLog.info("cldid"+cld_id+"slocid"+sloc_id+"hoorgid"+ho_org_id+"docid"+doc_id+"opid"+op_id+"opsrno:"+opSr_no+"pred:"+pred_opno);
             
         RowQualifier rq = new RowQualifier(pred);
         rq.setWhereClause(" CldId ='"+cld_id+ "' and HoOrgId = '" +
                                     ho_org_id + "' and DocId = '"+doc_id +"' and SlocId="+sloc_id+" and OpId='"+op_id+"' and OpSrNo="+
                                     opSr_no+" and PredOpId='"+pred_opno+"'");
         Row[] rows = pred.getFilteredRows(rq);
         adfLog.info("valueof rows::"+rows.length+rq.getExprStr());
         for(Row r : rows){
             if(r!=curr)
                return "Y";
            else
                 return "N";
             }
             return "N";
         }
         
         
     
     
     
     public String checkOperationSrNo() {
         ViewObjectImpl rt=this.getMnfRtOp();
         Integer opsrno=(Integer)rt.getCurrentRow().getAttribute("OpSrNo");
         String opid=(String)rt.getCurrentRow().getAttribute("OpId");
         adfLog.info("value of opsrno::"+opsrno);
         if(opsrno== 1)
         return "N";
         else
         return "Y";
     }
     
     public String checkOpPercentage(Number per) {
         
         oracle.jbo.domain.Number a1=new oracle.jbo.domain.Number(0);
         oracle.jbo.domain.Number b1=new oracle.jbo.domain.Number(0);
         ViewObjectImpl pred1=this.getMnfRtOpPredVO2();
         ViewObjectImpl pred=this.getMnfRtOpPredVO1();
          Row curr=pred.getCurrentRow();
          String cld_id=(String)curr.getAttribute("CldId");
          Integer sloc_id=(Integer)curr.getAttribute("SlocId");
          String ho_org_id=(String)curr.getAttribute("HoOrgId");
          String doc_id=(String)curr.getAttribute("DocId");
          String pred_opno=(String)curr.getAttribute("PredOpId");
         RowQualifier rq = new RowQualifier(pred);
         rq.setWhereClause(" CldId ='"+cld_id+ "' and HoOrgId = '" +
                                     ho_org_id + "' and DocId = '"+doc_id +"' and SlocId="+sloc_id+" and PredOpId='"+pred_opno+"'");
         Row[] rows = pred1.getFilteredRows(rq);
         for(Row rr:rows) {
            if(!(rr.getKey().equals(curr.getKey()))){
           b1=(oracle.jbo.domain.Number)rr.getAttribute("PredUsePer");
            if(b1!=null)
             a1=a1.add(b1);
             }
            }
         if(per!=null) {
         a1=a1.add(per);
         }
         
        //adfLog.info("Value of add::"+a1);
         if(a1.compareTo(new oracle.jbo.domain.Number(100))==1)
         return "N";
         else
         return "Y";
     }

    /**
     * Container's getter for MnfRtOpPredVO2.
     * @return MnfRtOpPredVO2
     */
    public ViewObjectImpl getMnfRtOpPredVO2() {
        return (ViewObjectImpl) findViewObject("MnfRtOpPredVO2");
    }
    
    public Integer checkRouteUsage() {
        Integer r1=null;
        String docId=(String)this.getMnfRtVO().getCurrentRow().getAttribute("DocId");
        adfLog.info("Value of docId:::"+docId);
    
        BigDecimal result= (BigDecimal)callStoredFunction(NUMERIC, "MNF.fn_mnf_can_prf_inactivated(?,?,?,?,?)", new Object[] {
                                 CldId, SlocId, HoOrgId, docId,new oracle.jbo.domain.Number(0)
        });
         r1=result.intValue();
        return r1;
    }
    
    public String moveDownOperation() {
        adfLog.info("in the moveDownOperation");
        ViewObjectImpl rtOperation = this.getMnfRtOp();
                if (rtOperation != null) {
                    Row[] allOperation = rtOperation.getAllRowsInRange();
                    System.out.println("allRowsInRange = " + allOperation.length);
                    int l = allOperation.length;
                    Row currentRow = rtOperation.getCurrentRow();
                   
                    Integer srno = 0;
                    String newOpId=null;
                    String OpId=null;
                    if (currentRow != null) {
                        //  TaxRuleSlno = (Integer)currentRow.getAttribute("TaxRuleSlno");
                        srno = (Integer) currentRow.getAttribute("OpSrNo");
                        OpId=(String)currentRow.getAttribute("OpId");
                        System.out.println("serial noo = " + srno + " ----- >>");
                        if (srno < l) {
                            Row[] filteredRows = rtOperation.getFilteredRows("OpSrNo", srno + 1);
                            if (filteredRows.length > 0) {
                                newOpId=(String)filteredRows[0].getAttribute("OpId");
                                if(!(OpId.equals(newOpId)))
                                filteredRows[0].setAttribute("OpSrNo", srno);
                                else{
                                    String error = "Same Operation Can't Move Downwards.";
                                    FacesContext ctx = FacesContext.getCurrentInstance();
                                    FacesMessage fm = new FacesMessage(FacesMessage.SEVERITY_ERROR, error, "");
                                    ctx.addMessage(null, fm); 
                                    return "N";
                                    
                                }
                            }
                            currentRow.setAttribute("OpSrNo", srno + 1);
                            //this.getDBTransaction().postChanges();
                            rtOperation.executeQuery();
                            //getAm().getTransaction().commit();
                            //AdfFacesContext.getCurrentInstance().addPartialTarget(taxRuleLineTable);
                        } else {
                            String error = "Cannot Move Downward.";
                            FacesContext ctx = FacesContext.getCurrentInstance();
                            FacesMessage fm = new FacesMessage(FacesMessage.SEVERITY_ERROR, error, "");

                            ctx.addMessage(null, fm);
                        }
                    }
    }
                return null;
    }
    
    
    //Metod to move operation upwards MNF$RT$OP
    public String  moveUpOperation() {
        adfLog.info(" in the moveUpAction");
          ViewObjectImpl rtOperation = this.getMnfRtOp();
               if (rtOperation != null) {
                   Row[] allOperation = rtOperation.getAllRowsInRange();
                   adfLog.info("allRowsInRange = " + allOperation.length);
                   int l = allOperation.length;
                   Row currentRow = rtOperation.getCurrentRow();
                   //Integer TaxRuleSlno = 1;
                   Integer srno = 0;
                   String OpId=null;
                   String newOpId=null;
                   if (currentRow != null) {
                       // TaxRuleSlno = (Integer)currentRow.getAttribute("TaxRuleSlno");
                       srno = (Integer) currentRow.getAttribute("OpSrNo");
                       OpId=(String)currentRow.getAttribute("OpId");
                       adfLog.info("srnooo = " + srno + " ----- >>");
                       if (srno > 1) {
                           Row[] filteredRows = rtOperation.getFilteredRows("OpSrNo", srno - 1);
                           if (filteredRows.length > 0) {
                               newOpId=(String)filteredRows[0].getAttribute("OpId");
                               if(!(OpId.equals(newOpId)))
                               filteredRows[0].setAttribute("OpSrNo", srno);
                               else{
                                   String error = "Same Operation Can't Move Upwards.";
                                   FacesContext ctx = FacesContext.getCurrentInstance();
                                   FacesMessage fm = new FacesMessage(FacesMessage.SEVERITY_ERROR, error, "");
                                   ctx.addMessage(null, fm); 
                                   return "N";
                                   
                               }
                           }
                           currentRow.setAttribute("OpSrNo", srno - 1);
                           //this.getDBTransaction().postChanges();
                           rtOperation.executeQuery();
                           //getAm().getTransaction().commit();
                           //AdfFacesContext.getCurrentInstance().addPartialTarget(taxRuleLineTable);
                       } else {
                           String error = "Cannot Move Upwards.";

                           FacesContext ctx = FacesContext.getCurrentInstance();
                           FacesMessage fm = new FacesMessage(FacesMessage.SEVERITY_ERROR, error, "");

                           ctx.addMessage(null, fm);
                       }
                   }
    }
               return null;
    }

}

