package mnfRoutingApp.model.entities;

import adf.utils.ebiz.EbizParams;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import javax.el.ELContext;
import javax.el.ValueExpression;

import oracle.adf.share.ADFContext;

import oracle.jbo.AttributeList;
import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.RowInconsistentException;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Aug 06 11:12:39 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MnfRtEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CldId,
        SlocId,
        HoOrgId,
        RtId,
        RtDesc,
        RtLegCd,
        RtRevNo,
        RtType,
        RtActv,
        RtInactvReason,
        RtInacttvDt,
        RtRmrk,
        UsrIdCreate,
        UsrIdCreateDt,
        UsrIdMod,
        UsrIdModDt,
        DocId,
        RtStat,
        RtRevDt,
        RtMode,
        RefRtId,
        RtBasis,
        RtExecType,
        RtFreezePred,
        MnfRtOp,
        MnfRtAttch,
        OrgMnfRt;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int RTID = AttributesEnum.RtId.index();
    public static final int RTDESC = AttributesEnum.RtDesc.index();
    public static final int RTLEGCD = AttributesEnum.RtLegCd.index();
    public static final int RTREVNO = AttributesEnum.RtRevNo.index();
    public static final int RTTYPE = AttributesEnum.RtType.index();
    public static final int RTACTV = AttributesEnum.RtActv.index();
    public static final int RTINACTVREASON = AttributesEnum.RtInactvReason.index();
    public static final int RTINACTTVDT = AttributesEnum.RtInacttvDt.index();
    public static final int RTRMRK = AttributesEnum.RtRmrk.index();
    public static final int USRIDCREATE = AttributesEnum.UsrIdCreate.index();
    public static final int USRIDCREATEDT = AttributesEnum.UsrIdCreateDt.index();
    public static final int USRIDMOD = AttributesEnum.UsrIdMod.index();
    public static final int USRIDMODDT = AttributesEnum.UsrIdModDt.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int RTSTAT = AttributesEnum.RtStat.index();
    public static final int RTREVDT = AttributesEnum.RtRevDt.index();
    public static final int RTMODE = AttributesEnum.RtMode.index();
    public static final int REFRTID = AttributesEnum.RefRtId.index();
    public static final int RTBASIS = AttributesEnum.RtBasis.index();
    public static final int RTEXECTYPE = AttributesEnum.RtExecType.index();
    public static final int RTFREEZEPRED = AttributesEnum.RtFreezePred.index();
    public static final int MNFRTOP = AttributesEnum.MnfRtOp.index();
    public static final int MNFRTATTCH = AttributesEnum.MnfRtAttch.index();
    public static final int ORGMNFRT = AttributesEnum.OrgMnfRt.index();

    /**
     * This is the default constructor (do not remove).
     */
    public MnfRtEOImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("mnfRoutingApp.model.entities.MnfRtEO");
    }


    /**
     * Gets the attribute value for CldId, using the alias name CldId.
     * @return the value of CldId
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CldId.
     * @param value value to set the CldId
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for SlocId, using the alias name SlocId.
     * @return the value of SlocId
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for SlocId.
     * @param value value to set the SlocId
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for HoOrgId, using the alias name HoOrgId.
     * @return the value of HoOrgId
     */
    public String getHoOrgId() {
        return (String) getAttributeInternal(HOORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for HoOrgId.
     * @param value value to set the HoOrgId
     */
    public void setHoOrgId(String value) {
        setAttributeInternal(HOORGID, value);
    }

    /**
     * Gets the attribute value for RtId, using the alias name RtId.
     * @return the value of RtId
     */
    public String getRtId() {
        return (String) getAttributeInternal(RTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for RtId.
     * @param value value to set the RtId
     */
    public void setRtId(String value) {
        setAttributeInternal(RTID, value);
    }

    /**
     * Gets the attribute value for RtDesc, using the alias name RtDesc.
     * @return the value of RtDesc
     */
    public String getRtDesc() {
        return (String) getAttributeInternal(RTDESC);
    }

    /**
     * Sets <code>value</code> as the attribute value for RtDesc.
     * @param value value to set the RtDesc
     */
    public void setRtDesc(String value) {
        setAttributeInternal(RTDESC, value);
    }

    /**
     * Gets the attribute value for RtLegCd, using the alias name RtLegCd.
     * @return the value of RtLegCd
     */
    public String getRtLegCd() {
        return (String) getAttributeInternal(RTLEGCD);
    }

    /**
     * Sets <code>value</code> as the attribute value for RtLegCd.
     * @param value value to set the RtLegCd
     */
    public void setRtLegCd(String value) {
        setAttributeInternal(RTLEGCD, value);
    }

    /**
     * Gets the attribute value for RtRevNo, using the alias name RtRevNo.
     * @return the value of RtRevNo
     */
    public Integer getRtRevNo() {
        return (Integer) getAttributeInternal(RTREVNO);
    }

    /**
     * Sets <code>value</code> as the attribute value for RtRevNo.
     * @param value value to set the RtRevNo
     */
    public void setRtRevNo(Integer value) {
        setAttributeInternal(RTREVNO, value);
    }

    /**
     * Gets the attribute value for RtType, using the alias name RtType.
     * @return the value of RtType
     */
    public Integer getRtType() {
        return (Integer) getAttributeInternal(RTTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for RtType.
     * @param value value to set the RtType
     */
    public void setRtType(Integer value) {
        setAttributeInternal(RTTYPE, value);
    }

    /**
     * Gets the attribute value for RtActv, using the alias name RtActv.
     * @return the value of RtActv
     */
    public String getRtActv() {
        return (String) getAttributeInternal(RTACTV);
    }

    /**
     * Sets <code>value</code> as the attribute value for RtActv.
     * @param value value to set the RtActv
     */
    public void setRtActv(String value) {
        setAttributeInternal(RTACTV, value);
    }

    /**
     * Gets the attribute value for RtInactvReason, using the alias name RtInactvReason.
     * @return the value of RtInactvReason
     */
    public String getRtInactvReason() {
        return (String) getAttributeInternal(RTINACTVREASON);
    }

    /**
     * Sets <code>value</code> as the attribute value for RtInactvReason.
     * @param value value to set the RtInactvReason
     */
    public void setRtInactvReason(String value) {
        setAttributeInternal(RTINACTVREASON, value);
    }

    /**
     * Gets the attribute value for RtInacttvDt, using the alias name RtInacttvDt.
     * @return the value of RtInacttvDt
     */
    public Timestamp getRtInacttvDt() {
        return (Timestamp) getAttributeInternal(RTINACTTVDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for RtInacttvDt.
     * @param value value to set the RtInacttvDt
     */
    public void setRtInacttvDt(Timestamp value) {
        setAttributeInternal(RTINACTTVDT, value);
    }

    /**
     * Gets the attribute value for RtRmrk, using the alias name RtRmrk.
     * @return the value of RtRmrk
     */
    public String getRtRmrk() {
        return (String) getAttributeInternal(RTRMRK);
    }

    /**
     * Sets <code>value</code> as the attribute value for RtRmrk.
     * @param value value to set the RtRmrk
     */
    public void setRtRmrk(String value) {
        setAttributeInternal(RTRMRK, value);
    }

    /**
     * Gets the attribute value for UsrIdCreate, using the alias name UsrIdCreate.
     * @return the value of UsrIdCreate
     */
    public Integer getUsrIdCreate() {
        return (Integer) getAttributeInternal(USRIDCREATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdCreate.
     * @param value value to set the UsrIdCreate
     */
    public void setUsrIdCreate(Integer value) {
        setAttributeInternal(USRIDCREATE, value);
    }

    /**
     * Gets the attribute value for UsrIdCreateDt, using the alias name UsrIdCreateDt.
     * @return the value of UsrIdCreateDt
     */
    public Timestamp getUsrIdCreateDt() {
        return (Timestamp) getAttributeInternal(USRIDCREATEDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdCreateDt.
     * @param value value to set the UsrIdCreateDt
     */
    public void setUsrIdCreateDt(Timestamp value) {
        setAttributeInternal(USRIDCREATEDT, value);
    }

    /**
     * Gets the attribute value for UsrIdMod, using the alias name UsrIdMod.
     * @return the value of UsrIdMod
     */
    public Integer getUsrIdMod() {
        return (Integer) getAttributeInternal(USRIDMOD);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdMod.
     * @param value value to set the UsrIdMod
     */
    public void setUsrIdMod(Integer value) {
        setAttributeInternal(USRIDMOD, value);
    }

    /**
     * Gets the attribute value for UsrIdModDt, using the alias name UsrIdModDt.
     * @return the value of UsrIdModDt
     */
    public Timestamp getUsrIdModDt() {
        return (Timestamp) getAttributeInternal(USRIDMODDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdModDt.
     * @param value value to set the UsrIdModDt
     */
    public void setUsrIdModDt(Timestamp value) {
        setAttributeInternal(USRIDMODDT, value);
    }

    /**
     * Gets the attribute value for DocId, using the alias name DocId.
     * @return the value of DocId
     */
    public String getDocId() {
        return (String) getAttributeInternal(DOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for DocId.
     * @param value value to set the DocId
     */
    public void setDocId(String value) {
        setAttributeInternal(DOCID, value);
    }


    /**
     * Gets the attribute value for RtStat, using the alias name RtStat.
     * @return the value of RtStat
     */
    public Integer getRtStat() {
        return (Integer) getAttributeInternal(RTSTAT);
    }

    /**
     * Sets <code>value</code> as the attribute value for RtStat.
     * @param value value to set the RtStat
     */
    public void setRtStat(Integer value) {
        setAttributeInternal(RTSTAT, value);
    }

    /**
     * Gets the attribute value for RtRevDt, using the alias name RtRevDt.
     * @return the value of RtRevDt
     */
    public Timestamp getRtRevDt() {
        return (Timestamp) getAttributeInternal(RTREVDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for RtRevDt.
     * @param value value to set the RtRevDt
     */
    public void setRtRevDt(Timestamp value) {
        setAttributeInternal(RTREVDT, value);
    }


    /**
     * Gets the attribute value for RtMode, using the alias name RtMode.
     * @return the value of RtMode
     */
    public Integer getRtMode() {
        return (Integer) getAttributeInternal(RTMODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for RtMode.
     * @param value value to set the RtMode
     */
    public void setRtMode(Integer value) {
        setAttributeInternal(RTMODE, value);
    }

    /**
     * Gets the attribute value for RefRtId, using the alias name RefRtId.
     * @return the value of RefRtId
     */
    public String getRefRtId() {
        return (String) getAttributeInternal(REFRTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for RefRtId.
     * @param value value to set the RefRtId
     */
    public void setRefRtId(String value) {
        setAttributeInternal(REFRTID, value);
    }

    /**
     * Gets the attribute value for RtBasis, using the alias name RtBasis.
     * @return the value of RtBasis
     */
    public Integer getRtBasis() {
        return (Integer) getAttributeInternal(RTBASIS);
    }

    /**
     * Sets <code>value</code> as the attribute value for RtBasis.
     * @param value value to set the RtBasis
     */
    public void setRtBasis(Integer value) {
        setAttributeInternal(RTBASIS, value);
    }

    /**
     * Gets the attribute value for RtExecType, using the alias name RtExecType.
     * @return the value of RtExecType
     */
    public Integer getRtExecType() {
        return (Integer) getAttributeInternal(RTEXECTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for RtExecType.
     * @param value value to set the RtExecType
     */
    public void setRtExecType(Integer value) {
        setAttributeInternal(RTEXECTYPE, value);
    }

    /**
     * Gets the attribute value for RtFreezePred, using the alias name RtFreezePred.
     * @return the value of RtFreezePred
     */
    public String getRtFreezePred() {
        return (String) getAttributeInternal(RTFREEZEPRED);
    }

    /**
     * Sets <code>value</code> as the attribute value for RtFreezePred.
     * @param value value to set the RtFreezePred
     */
    public void setRtFreezePred(String value) {
        setAttributeInternal(RTFREEZEPRED, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getMnfRtOp() {
        return (RowIterator) getAttributeInternal(MNFRTOP);
    }


    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getMnfRtAttch() {
        return (RowIterator) getAttributeInternal(MNFRTATTCH);
    }


    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getOrgMnfRt() {
        return (RowIterator) getAttributeInternal(ORGMNFRT);
    }


    /**
     * @param cldId key constituent
     * @param slocId key constituent
     * @param hoOrgId key constituent
     * @param docId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(String cldId, Integer slocId, String hoOrgId, String docId) {
        return new Key(new Object[] { cldId, slocId, hoOrgId, docId });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
       // System.out.println("create AttributeList for MnfRtEO-----");
       
        setUsrIdCreateDt(new Timestamp(System.currentTimeMillis()));

        setRtActv("Y");
        setRtRevNo(0);
        setRtType(1);
        setRtType(35);
        setRtStat(41);
        setRtMode(47);
        setRtBasis(16);

        //setCldId(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
        //setUsrIdCreate(Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString()));        
       // setSlocId(Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString()));
       // setHoOrgId(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString());

        if(EbizParams.GLBL_APP_USR() != null)
        {
            setUsrIdCreate(EbizParams.GLBL_APP_USR());
        }
        if(EbizParams.GLBL_APP_CLD_ID() != null)
        {
            setCldId(EbizParams.GLBL_APP_CLD_ID());
        }
        if(EbizParams.GLBL_APP_SERV_LOC() != null)
        {
            setSlocId(EbizParams.GLBL_APP_SERV_LOC());
        }
        if(EbizParams.GLBL_HO_ORG_ID() != null)
        {
            setHoOrgId(EbizParams.GLBL_HO_ORG_ID());
        }


        //Global document Id for Routing is 25507
        //adfLog.info("Doc id Created::"+)
            String docId=getTxnId(getCldId(), getSlocId(), getHoOrgId(), getUsrIdCreate(), 25507).toString();
        System.out.println("Doc id Created::"+docId);
        //setDocId(getTxnId(getCldId(), getSlocId(), getHoOrgId(), getUsrIdCreate(), 25507).toString());
        setDocId(getTxnId(getCldId(), getSlocId(), getHoOrgId(), getUsrIdCreate(), 25507).toString());
        //set the Task Flow parameter
        setTFparam();

      //  System.out.println("create ends");
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
       super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        try {
            super.lock();
        } catch (RowInconsistentException e) {
            refresh(REFRESH_WITH_DB_ONLY_IF_UNCHANGED | REFRESH_CONTAINEES);
            super.lock();
        }
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        System.out.println("do DML");
        if (operation == DML_UPDATE) {
            setModifyHistParam();
        }
        if (getRtId() != null) {

            //do nothing
            System.out.println("do nothing" + getRtId());
        } else {
            System.out.println("get RouteId");
            setRtId(getRouteId());

        }

        super.doDML(operation, e);
    }

    /**
     * @param userid user id
     * @param OrgId organisation id
     * @param slocid server location id
     * @param docId document id ()
     * @return next Doc id
     */
    public String getTxnId(String cldId, Integer slocid, String OrgId, Integer userid, Integer docId) {


        return (String) callStoredFunction(STRING, "app.get_txn_id(?,?,?,?,?,?)", new Object[] {
                                           cldId, slocid, OrgId, userid, docId, 0
    });
    }

    /**
     * @param userid user id
     * @param OrgId organisation id
     * @param slocid server location id
     * @param docId document id ()
     * @return next route id
     */
    public String getRouteId() {


        return (String) callStoredFunction(STRING, "mnf.fn_mnf_get_prf_id(?,?,?,?,?,?,?,?)", new Object[] {
                                           getSlocId(), getCldId(), getHoOrgId(), getHoOrgId(), 25507, null,
                                           "MNF$RT", 0
    });
    }
    private static int STRING = Types.VARCHAR;

    /** helper method for executing DB function
     * @param sqlReturnType return type of database function
     * @param stmt statement of executing function in database quary
     * @param bindVars input and out parameter of database function.
     * @return
     */
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.executeUpdate();
            System.out.println("st.getObject(1) " + st.getObject(1));
            return st.getObject(1);
        } catch (SQLException e) {
            e.printStackTrace();
            int end = e.getMessage().indexOf("\n");
            throw new JboException(e.getMessage().substring(11, end));

        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    throw new JboException(e.getMessage());
                }
            }
        }
    }

    /**
     *Method to set the task flow parameter after create
     * **/
    public void setTFparam() {

        //set the value in task from parameter
        //the value is used whenever the task flow is revisited after calling other TF
        //Task Value will be used to set ensure current row for header

        ADFContext.getCurrent().getPageFlowScope().put("MNF_DOC_ID", getDocId());
    }

    /**
     * Method to set the row modification history
     * **/

    public void setModifyHistParam() {
        System.out.println("setModifyHistParam");
        if(EbizParams.GLBL_APP_USR() != null)
        {
            setUsrIdMod(EbizParams.GLBL_APP_USR());
        }
        setUsrIdModDt(new Timestamp(System.currentTimeMillis()));

        /* if (resolvEl("#{pageFlowScope.GLBL_APP_USR}") != null) {
            setUsrIdMod(Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString()));
        } */

    }

    public Object resolvEl(String data) {

        ADFContext adfCtx = ADFContext.getCurrent();
        ELContext elContext = adfCtx.getELContext();
        ValueExpression valueExp = adfCtx.getExpressionFactory().createValueExpression(elContext, data, Object.class);
        Object Message = valueExp.getValue(elContext).toString();

        return Message;
    }

}

