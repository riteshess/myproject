package mnfBillOfMaterialsApp.model.services;

import adf.utils.bean.ADFBeanUtils;

import java.io.File;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;
import java.util.Set;
import java.util.StringTokenizer;

import appexcelimpexpapp.model.util.UpdatedData;

import java.util.Map.Entry;

import javax.el.ELContext;
import javax.el.ValueExpression;

import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import mnfBillOfMaterialsApp.model.services.common.MNFBillOfMaterialsAM;
import mnfBillOfMaterialsApp.model.views.LOVItemViewVOImpl;
import mnfBillOfMaterialsApp.model.views.LOVOrganizationVOImpl;
import mnfBillOfMaterialsApp.model.views.LOVRouteVOImpl;
import mnfBillOfMaterialsApp.model.views.LOVRtOperationVOImpl;
import mnfBillOfMaterialsApp.model.views.MnfBomCoProductItmVOImpl;
import mnfBillOfMaterialsApp.model.views.MnfBomOpItmAllVOImpl;
import mnfBillOfMaterialsApp.model.views.MnfBomOpItmVOImpl;
import mnfBillOfMaterialsApp.model.views.MnfBomOpVOImpl;
import mnfBillOfMaterialsApp.model.views.MnfBomParamVOImpl;
import mnfBillOfMaterialsApp.model.views.MnfBomVOImpl;
import mnfBillOfMaterialsApp.model.views.OrgMnfBomVOImpl;

import oracle.adf.share.ADFContext;

import oracle.jbo.ApplicationModule;
import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Number;
import oracle.jbo.rules.JboPrecisionScaleValidator;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Sep 11 16:24:12 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MNFBillOfMaterialsAMImpl extends ApplicationModuleImpl implements MNFBillOfMaterialsAM {
    /**
     * This is the default constructor (do not remove).
     */
    public MNFBillOfMaterialsAMImpl() {
    }

    /**
     * Container's getter for MnfBomVO.
     * @return MnfBomVO
     */
    public MnfBomVOImpl getMnfBomVO() {
        return (MnfBomVOImpl) findViewObject("MnfBomVO");
    }

    /**
     * Container's getter for MnfBomAttchVO.
     * @return MnfBomAttchVO
     */
    public ViewObjectImpl getMnfBomAttchVO() {
        return (ViewObjectImpl) findViewObject("MnfBomAttchVO");
    }


    /**
     * Container's getter for MnfBomRelVO.
     * @return MnfBomRelVO
     */
    public ViewObjectImpl getMnfBomRelVO() {
        return (ViewObjectImpl) findViewObject("MnfBomRelVO");
    }

    /**
     * Container's getter for OrgMnfBomVO.
     * @return OrgMnfBomVO
     */
    public OrgMnfBomVOImpl getOrgMnfBomVO() {
        return (OrgMnfBomVOImpl) findViewObject("OrgMnfBomVO");
    }

    /**
     * Container's getter for MnfBomToMnfBomAttchVL1.
     * @return MnfBomToMnfBomAttchVL1
     */
    public ViewLinkImpl getMnfBomToMnfBomAttchVL1() {
        return (ViewLinkImpl) findViewLink("MnfBomToMnfBomAttchVL1");
    }


    /**
     * Container's getter for MnfBomToMnfBomRelVL1.
     * @return MnfBomToMnfBomRelVL1
     */
    public ViewLinkImpl getMnfBomToMnfBomRelVL1() {
        return (ViewLinkImpl) findViewLink("MnfBomToMnfBomRelVL1");
    }

    /**
     * Container's getter for MnfBomToOrgMnfBomVL1.
     * @return MnfBomToOrgMnfBomVL1
     */
    public ViewLinkImpl getMnfBomToOrgMnfBomVL1() {
        return (ViewLinkImpl) findViewLink("MnfBomToOrgMnfBomVL1");
    }

    /**
     * Container's getter for MnfBomOp1.
     * @return MnfBomOp1
     */
    public MnfBomOpVOImpl getMnfBomOp() {
        return (MnfBomOpVOImpl) findViewObject("MnfBomOp");
    }

    /**
     * Container's getter for MnfBomToMnfBomOpVL1.
     * @return MnfBomToMnfBomOpVL1
     */
    public ViewLinkImpl getMnfBomToMnfBomOpVL1() {
        return (ViewLinkImpl) findViewLink("MnfBomToMnfBomOpVL1");
    }

    /**
     * Container's getter for MnfBomOpItm1.
     * @return MnfBomOpItm1
     */
    public MnfBomOpItmVOImpl getMnfBomOpItmVO() {
        return (MnfBomOpItmVOImpl) findViewObject("MnfBomOpItmVO");
    }

    /**
     * Container's getter for MnfBomOpToMnfBomOpItmVL1.
     * @return MnfBomOpToMnfBomOpItmVL1
     */
    public ViewLinkImpl getMnfBomOpToMnfBomOpItmVL1() {
        return (ViewLinkImpl) findViewLink("MnfBomOpToMnfBomOpItmVL1");
    }

    public void setSearchTFParam(String cld_id, Integer sloc_id, String ho_org_id, String org_id, String doc_id) {

        setAllOperationDesc(cld_id, sloc_id, ho_org_id);
        setAllItemVoParam(cld_id, sloc_id, ho_org_id);
        setAllQcparam(cld_id, sloc_id, ho_org_id);
        setAllOverhead(cld_id, sloc_id, ho_org_id);
        setDualSearchVOParam(cld_id, sloc_id, ho_org_id, org_id, null);


        ViewObject searchVO = getBomSearchVO().getViewObject();
        searchVO.setNamedWhereClauseParam("BindCldId", null);
        searchVO.executeQuery();
    }

    /**
     * Method to set Bind variables for LOVAllItemVO
     * **/
    public void setAllItemVoParam(String cld_id, Integer sloc_id, String ho_org_id) {

        getLOVAllItemDescVO().setNamedWhereClauseParam("BindCldId", cld_id);
        getLOVAllItemDescVO().setNamedWhereClauseParam("BindSlocId", sloc_id);
        getLOVAllItemDescVO().setNamedWhereClauseParam("BindHoOrgId", ho_org_id);
        getLOVAllItemDescVO().executeQuery();

    }

    public void setAllQcparam(String cld_id, Integer sloc_id, String ho_org_id) {

        getLOVAllQcParameter().setNamedWhereClauseParam("BindCldId", cld_id);
        getLOVAllQcParameter().setNamedWhereClauseParam("BindSlocId", sloc_id);
        getLOVAllQcParameter().setNamedWhereClauseParam("BindOrgId", ho_org_id);
        getLOVAllQcParameter().executeQuery();

    }

    /**
     * Method to set Bind variables for LOVAllOverheadVO
     * **/
    public void setAllOverhead(String cld_id, Integer sloc_id, String ho_org_id) {

        getLOVAllOverheadVO().setNamedWhereClauseParam("BindCldId", cld_id);
        getLOVAllOverheadVO().setNamedWhereClauseParam("BindSlocId", sloc_id);
        getLOVAllOverheadVO().setNamedWhereClauseParam("BindHoOrgId", ho_org_id);
        getLOVAllOverheadVO().executeQuery();

    }

    /**
     * Method to set Bind variables for LOVDualOverheadVO
     * **/
    public void setDualOerhead() {
        //System.out.println("++++++++++++++++++ " + getDocId());
        getDualOverheadVO().setNamedWhereClauseParam("BindCldId", getCldId());
        getDualOverheadVO().setNamedWhereClauseParam("BindSlcId", getSlocId());
        getDualOverheadVO().setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        getDualOverheadVO().setNamedWhereClauseParam("BindDocId", getDocId());
        getDualOverheadVO().setNamedWhereClauseParam("BindOrgId", getOrgId());
        getDualOverheadVO().executeQuery();

    }

    /**
     * Method to set Bind variables for LOVOperDesc
     * **/
    public void setAllOperationDesc(String cld_id, Integer sloc_id, String ho_org_id) {

        getLOVOperationDescVO().setNamedWhereClauseParam("BindCldId", cld_id);
        getLOVOperationDescVO().setNamedWhereClauseParam("BindSlocId", sloc_id);
        getLOVOperationDescVO().setNamedWhereClauseParam("BindHoOrgId", ho_org_id);
        getLOVOperationDescVO().executeQuery();

    }

    /**
     * Method to set Bind variables for LOVRouteDesc
     * **/
    public void setAllRouteDesc(String cld_id, Integer sloc_id, String ho_org_id) {

        getLOVAllRouteDesc().setNamedWhereClauseParam("BindCldId", cld_id);
        getLOVAllRouteDesc().setNamedWhereClauseParam("BindSlocId", sloc_id);
        getLOVAllRouteDesc().setNamedWhereClauseParam("BindHoOrgId", ho_org_id);
        getLOVOperationDescVO().executeQuery();

    }

    /**
     * Method to set Bind variables for Operation from BOM
     * **/
    public void setAllOperationFromBOM() {

        getLOVOperationFromBOMVO().setNamedWhereClauseParam("BindCldId", getCldId());
        getLOVOperationFromBOMVO().setNamedWhereClauseParam("BindSlocId", getSlocId());
        getLOVOperationFromBOMVO().setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        getLOVOperationFromBOMVO().setNamedWhereClauseParam("BindDocId", getDocId());
        getLOVOperationFromBOMVO().executeQuery();

    }

    public void resetOperationForOverhead() {

        getLOVOperationFromBOMVO().setNamedWhereClauseParam("BindCldId", null);
        getLOVOperationFromBOMVO().setNamedWhereClauseParam("BindSlocId", null);
        getLOVOperationFromBOMVO().setNamedWhereClauseParam("BindHoOrgId", null);
        getLOVOperationFromBOMVO().setNamedWhereClauseParam("BindDocId", null);
        getLOVOperationFromBOMVO().executeQuery();
    }

    private void setDualSearchVOParam(String cld_id, Integer sloc_id, String ho_org_id, String org_id, String doc_id) {

        getDualForSearchVO().setNamedWhereClauseParam("BindCldId", cld_id);
        getDualForSearchVO().setNamedWhereClauseParam("BindSlcId", sloc_id);
        getDualForSearchVO().setNamedWhereClauseParam("BindHoOrgId", ho_org_id);
        getDualForSearchVO().setNamedWhereClauseParam("BindOrgId", org_id);
        getDualForSearchVO().setNamedWhereClauseParam("BindDocId", doc_id);
        getDualForSearchVO().executeQuery();
    }

    public void setDualForAllItemSearch() {
        getDualAllItemSearch().setNamedWhereClauseParam("BindCldId", getCldId());
        getDualAllItemSearch().setNamedWhereClauseParam("BindSlocId", getSlocId());
        getDualAllItemSearch().setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        getDualAllItemSearch().setNamedWhereClauseParam("BindDocId", getDocId());
        getDualAllItemSearch().executeQuery();
    }

    public void setCreateEditTFParam(String cld_id, Integer sloc_id, String ho_org_id, String org_id, String doc_id) {

        setMnfBomVOParam(cld_id, sloc_id, ho_org_id, org_id, doc_id);

        setLovItemVoParam(cld_id, sloc_id, ho_org_id, org_id);
        setLovBomVoParam(cld_id, sloc_id, ho_org_id);
        setLovOrganizationParam(cld_id, sloc_id, ho_org_id);
        setDualSearchVOParam(cld_id, sloc_id, ho_org_id, org_id, doc_id);
        setLovUserParam(sloc_id);
        setAllOperationDesc(cld_id, sloc_id, ho_org_id);
        setAllOperationFromBOM();
        setDualOerhead();
        setDualForAllItemSearch();
        setAllRouteDesc(cld_id, sloc_id, ho_org_id);
        setAllItemVoParam(cld_id, sloc_id, ho_org_id);
        setAllQcparam(cld_id, sloc_id, ho_org_id);

    }

    /**
     * method to set bind varibale for Header table
     * **/
    private void setMnfBomVOParam(String cld_id, Integer sloc_id, String ho_org_id, String org_id, String doc_id) {
        // System.out.println("doc_Id " + doc_id);
        getMnfBomVO().setBindCldId(cld_id);
        getMnfBomVO().setBindSlcId(sloc_id);
        getMnfBomVO().setBindHoOrgId(ho_org_id);
        getMnfBomVO().setBindDocId(doc_id);
        getMnfBomVO().executeQuery();
    }

    /**
     * Method to set Bind variables for LOVItemVO
     * **/
    public void setLovItemVoParam(String cld_id, Integer sloc_id, String ho_org_id, String org_id) {

        getLOVItemViewVO().setNamedWhereClauseParam("BindCldId", cld_id);
        getLOVItemViewVO().setNamedWhereClauseParam("BindSlcId", sloc_id);
        getLOVItemViewVO().setNamedWhereClauseParam("BindHoOrgId", ho_org_id);
        //getLOVItemViewVO().setNamedWhereClauseParam("BindOrgId", org_id);
        getLOVItemViewVO().setNamedWhereClauseParam("ITM_ATT", null);
        getLOVItemViewVO().setNamedWhereClauseParam("ITM_TYPE", null);
        getLOVItemViewVO().executeQuery();

    }

    /**
     * Method to set Bind variables for LOVBomVO
     * **/

    public void setLovBomVoParam(String cld_id, Integer sloc_id, String ho_org_id) {

        getLOVBomVO().setNamedWhereClauseParam("BindCldId", cld_id);
        getLOVBomVO().setNamedWhereClauseParam("BindSlcId", sloc_id);
        getLOVBomVO().setNamedWhereClauseParam("BindHoOrgId", ho_org_id);
        getLOVBomVO().executeQuery();

    }

    /**
     * Method to set Bind variables for LovOrganizationVO
     * **/

    public void setLovOrganizationParam(String cld_id, Integer sloc_id, String ho_org_id) {

        getLOVOrganizationVO().setNamedWhereClauseParam("BindCldId", cld_id);
        getLOVOrganizationVO().setNamedWhereClauseParam("BindSlcId", sloc_id);
        getLOVOrganizationVO().setNamedWhereClauseParam("BindHoOrgId", ho_org_id);
        getLOVOrganizationVO().executeQuery();

    }


    /**
     * Method to save Organization profile for route.
     * New profile is created automatically for Head Organization.
     * **/

    public void beforeSave(String cld_id, Integer slc_id, String ho_org_id, Integer usr_id, String doc_id) {
        // replicateAllOrg(cld_id, slc_id, ho_org_id, ho_org_id, doc_id, usr_id);
        Integer orgProfileCnt = 0;

        RowSetIterator rsetIter = getOrgMnfBomVO().createRowSetIterator(null);
        Row r = null;

        while (rsetIter.hasNext()) {
            r = rsetIter.next();

            if (r.getAttribute("OrgId").equals(ho_org_id)) {
                orgProfileCnt = orgProfileCnt + 1;
            }
        }
        rsetIter.closeRowSetIterator();

        // System.out.println("profile count " + orgProfileCnt);
        if (orgProfileCnt.compareTo(0) == 0) {

            //create default ptrofile
            createOrgMnfBom(cld_id, slc_id, ho_org_id, usr_id, doc_id);
        }
        if (getMnfBomVO().getCurrentRow().getAttribute("BomId") != null) {
            //do nothing
            // System.out.println("do nothing" + getRtId());




        } else {
            getMnfBomVO().getCurrentRow().setAttribute("BomId", getBOMId());
        }
    }

    /**
     * @param userid user id
     * @param OrgId organisation id
     * @param slocid server location id
     * @param docId document id ()
     * @return next BOM id
     */
    public String getBOMId() {


        return (String) callStoredFunction(VARCHAR, "mnf.fn_mnf_get_prf_id(?,?,?,?,?,?,?,?)", new Object[] {
                                           getSlocId(), getCldId(), getHoOrgId(), getHoOrgId(), 25508, null, "MNF$BOM",
                                           0
    });
    }

    /**
     * Method to create OrgMnfRtVO rows for given values.
     * **/

    public void createOrgMnfBom(String cld_id, Integer slc_id, String ho_org_id, Integer usr_id, String doc_id) {

        Row r = getOrgMnfBomVO().createRow();

        r.setAttribute("OrgId", ho_org_id);
        if (chkOrgWiseItemRep(ho_org_id) == -1) {
            r.setAttribute("OrgBomActv", "N");
            //   r.setAttribute("InactvReason", "Inactive");
            //   r.setAttribute("InactvDt", new Timestamp(System.currentTimeMillis()));

        } else
            r.setAttribute("OrgBomActv", "Y");
        r.setAttribute("UsrIdCreate", usr_id);
        r.setAttribute("UsrIdCreateDt", new Timestamp(System.currentTimeMillis()));

        getOrgMnfBomVO().insertRow(r);

    }
    private static int NUMBER = Types.INTEGER;
    // private static int NUMERIC = Types.NUMERIC;
    private static int VARCHAR = Types.VARCHAR;

    /**
     * Function to call a database function .
     * */
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {

        CallableStatement st = null;
        try {
            // 1. Create a JDBC CallabledStatement
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            // 2. Register the first bind variable for the return value
            st.registerOutParameter(1, sqlReturnType);

            if (bindVars != null) {
                // 3. Loop over values for the bind variables passed in, if any
                for (int z = 0; z < bindVars.length; z++) {
                    // 4. Set the value of user-supplied bind vars in the stmt
                    //System.out.println("bindVars " + z + " " + bindVars[z]);
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            // 5. Set the value of user-supplied bind vars in the stmt
            st.executeUpdate();
            // 6. Return the value of the first bind variable
            //  System.out.println("Function return " + st.getObject(1));
            return st.getObject(1);
        } catch (Exception e) {
            e.printStackTrace();
            //System.out.println("In Exception exch and Op and generate-->");
            //int end = e.getMessage().indexOf("\n");
            //  throw new JboException(e.getMessage().substring(11, end));
            //  String msg = e.getMessage().substring(11, end);

            String msg = e.getMessage();
            //System.out.println(msg);
            FacesMessage ermsg = new FacesMessage(msg);
            ermsg.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, ermsg);
            return null;


        } finally {
            if (st != null) {
                try {
                    // 7. Close the statement
                    st.close();
                } catch (SQLException e) {
                    throw new JboException(e.getMessage());
                }
            }
        }
    }

    /**
     * Generalized method used to display the facesmessages.
     * Created by Priyank Khare on 03-06-2014.
     * @param msgHdr is to set the header for message dialog
     * @param msgDtl is to set if further detail information in meassage is required.
     * @param msgSeverity is to set severity mode.
     * **/
    public void showFacesMsg(String msgHdr, String msgDtl, javax.faces.application.FacesMessage.Severity msgSeverity,
                             String msgMode) {

        FacesMessage msg = new FacesMessage(msgHdr);
        msg.setDetail(msgDtl);
        msg.setSeverity(msgSeverity);
        FacesContext.getCurrentInstance().addMessage(null, msg);

    }

    /**
     * Method used to call work flow function.
     * calls db functions APP.WF_GET_USR_LEVEL & APP.WF_INS_TXN
     * Created on 03-06-2014 by priyank Khare
     * **/

    public String callWfFunctions(String cldId, Integer slcId, String orgId, Integer usrId, String txnId, Integer docId,
                                  Integer docTypId) {

        /* System.out.println("callWfFunctions--- slcId " + slcId + " cldId " + cldId + "  " + " orgId " + orgId +
                           " usrId " + usrId + " docId " + docId + " txnId " + txnId + " docTypId " + docTypId); */

        //get the work flow for the document 25508
        String wfId = getWfId(cldId, slcId, orgId, docId, docTypId);
        // System.out.println("Work Flow Id " + wfId);
        //String action = "I";
        //String remark = "A";
        //Number amount11 = new Number(0);
        // System.out.println("wfId " + wfId);
        Object level;
        try {
            level = callStoredFunction(NUMBER, "APP.WF_GET_USR_LEVEL(?,?,?,?,?,?,?)", new Object[] {
                                       slcId, cldId, orgId, usrId, wfId, docId, docTypId
            });
            //System.out.println("level " + level);
            callStoredFunction(NUMBER, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                               slcId, cldId, orgId, docId, docTypId, wfId, txnId, usrId, usrId, level, level, "I", "A",
                               new Number(0)
            });

        } catch (Exception nfe) {

            showFacesMsg(resolvElDCMsg("#{bundle['MSG.1113']}").toString(), null, FacesMessage.SEVERITY_ERROR, null);

            nfe.printStackTrace();
        }

        return null;
    }

    /**
     * Method used to get the Work flow id for a document.
     * Created by Priyank Khare on 30-05-2014.
     * **/

    public String getWfId(String cldId, Integer slcId, String orgId, Integer docId, Integer docTypId) {
        /*  System.out.println("getWfId--- slcId " + slcId + " cldId " + cldId + "  " + " orgId " + orgId + " docId " +
                           docId + " docTypId " + docTypId); */
        try {
            return callStoredFunction(VARCHAR, "APP.WF_GET_ID(?,?,?,?,?)", new Object[] {
                                      slcId, cldId, orgId, docId, docTypId }).toString();
        } catch (Exception e) {
            e.printStackTrace();

            StringBuilder saveMsg = new StringBuilder("<html><body><p><b>Error in getting Work Flow Details. </b></p>");

            saveMsg.append("</body></html>");

            showFacesMsg(saveMsg.toString(), null, FacesMessage.SEVERITY_ERROR, null);


        }
        return "0";
    }

    /**
     * Method created to call DB fucntion to get the user at which the document is pending
     * Created by Priyank Khare on 04-06-2014.
     * **/

    public Integer getDocUsrFromWF(String cldId, Integer slcId, String orgId, Integer usrId, String txnId,
                                   Integer docId, Integer docTypId) {
        Object fnRetVal;

        //System.out.println("getDocUsrFromWF--- slcId " + slcId + " cldId " + cldId + "  " + " orgId " + orgId +
        //                   " docId " + docId + " txnId " + txnId + " docTypId " + docTypId);
        try {
            fnRetVal = callStoredFunction(NUMBER, "APP.WF_GET_CUR_USR(?,?,?,?,?,?)", new Object[] {
                                          slcId, cldId, orgId, docId, txnId, docTypId
            });

            if (fnRetVal != null) {

                if (fnRetVal.equals(-1)) {
                    showFacesMsg("BOM Access Error", "Error while fetching user work flow details",
                                 FacesMessage.SEVERITY_ERROR, null);
                }
                return Integer.parseInt(fnRetVal.toString());
            }

        } catch (Exception e) {

            e.printStackTrace();

        }
        //  showFacesMsg("Error while fetching user work flow details", null, FacesMessage.SEVERITY_ERROR, null);
        return 1;
    }

    public Object resolvElDCMsg(String data) {
        ADFContext adfCtx = ADFContext.getCurrent();
        ELContext elContext = adfCtx.getELContext();
        ValueExpression valueExp = adfCtx.getExpressionFactory().createValueExpression(elContext, data, Object.class);
        return valueExp.getValue(elContext);
    }

    /**
     * A generalized method to remove all rows of a VO.
     * @param voName which the name of VO.
     * Created by Priyank Khare on 10-06-2014
     * **/

    private void removeRows(String voName) {

        while (findViewObject(voName).createRowSetIterator(null).hasNext()) {

            findViewObject(voName).createRowSetIterator(null).next().remove();

            // System.out.println(voName + " row removed ");
        }
    }


    public String createAttchmntRow(String cldId, Integer slcId, String hoOrgId, String orgId, String contentTyp,
                                    String fileNm, String extn) {


        String path = getUpFilePath(slcId);
        //System.out.println("path " + path);

        String fileId = getUpFileId(cldId, slcId, hoOrgId, orgId, null);
        //System.out.println("fileId " + fileId);

        Row r = getMnfBomAttchVO().createRow();

        //System.out.println("contentTyp " + contentTyp);
        r.setAttribute("AttchFlExtn", contentTyp);
        r.setAttribute("DispFlNm", fileNm);
        r.setAttribute("AttchFlNm", fileId);
        r.setAttribute("AttchFlPath", path + fileId + extn);

        getMnfBomAttchVO().insertRow(r);


        return path + fileId;
    }

    /**
     * Method to get system generated file no
     * **/
    public String getUpFileId(String cldId, Integer slcId, String hoOrgId, String orgId, String tabNm) {

        Object fnRetVal;

        try {
            fnRetVal = callStoredFunction(VARCHAR, "APP.FN_APP_GEN_FILE_ATTCH_ID(?,?,?,?,?)", new Object[] {
                                          slcId, cldId, hoOrgId, orgId, "MNF$BOM$ATTCH"
            });

            if (fnRetVal != null) {

                if (fnRetVal.equals(-1)) {
                    showFacesMsg("Error while fetching file Id details", null, FacesMessage.SEVERITY_ERROR, null);
                }

                return fnRetVal.toString();
            }

        } catch (Exception e) {

            e.printStackTrace();

        }
        showFacesMsg("Error while fetching file Id details", null, FacesMessage.SEVERITY_ERROR, null);

        return "0";
    }

    /**
     * Method to get default file location
     * **/
    public String getUpFilePath(Integer slcId) {
        Object fnRetVal;

        try {
            fnRetVal = callStoredFunction(VARCHAR, "APP.FN_GET_APP_DOC_ATTACH_PATH(?)", new Object[] { slcId });

            if (fnRetVal != null) {

                if (fnRetVal.equals(-1)) {
                    showFacesMsg("Error while fetching file path details", null, FacesMessage.SEVERITY_ERROR, null);
                }

                return fnRetVal.toString();
            }

        } catch (Exception e) {

            e.printStackTrace();

        }
        showFacesMsg("Error while fetching file path details", null, FacesMessage.SEVERITY_ERROR, null);

        return null;
    }

    /**
     * Container's getter for LOVRoute1.
     * @return LOVRoute1
     */
    public LOVRouteVOImpl getLOVRouteVO() {
        return (LOVRouteVOImpl) findViewObject("LOVRouteVO");
    }

    public void createBomOperations(String cldId, Integer slcId, String hoOrgId, String docId) {

        // System.out.println("docId " + docId + " row count " + getLOVRtOperationVO().getEstimatedRowCount());

        getLOVRtOperationVO().setBindCldId(cldId);
        getLOVRtOperationVO().setBindHoOrgId(hoOrgId);
        getLOVRtOperationVO().setBindSlcId(slcId);
        getLOVRtOperationVO().setBindDocId(docId);
        getLOVRtOperationVO().executeQuery();
        //System.out.println("row count -----" + getLOVRtOperationVO().getEstimatedRowCount());

        //System.out.println(" route id  +++++++++++++++++  " + docId);
        Row[] rtRows = getLOVRtOperationVO().getFilteredRows("DocId", docId);
        //System.out.println(" rtRows " + rtRows.length);
        for (Row r : rtRows) {

            createOperation(docId, r.getAttribute("OpId"), r.getAttribute("OpSrNo"), r.getAttribute("WcId"),
                            r.getAttribute("OpLocType"));
        }
    }

    private void createOperation(Object rtId, Object opId, Object opSrNo, Object wcId, Object opLocType) {

        //System.out.println(opLocType + " ================");
        if (opLocType == null) {
            opLocType = 3;
        }
        //System.out.println(opLocType + " ================");
        // System.out.println("opSrNo--- " + opSrNo);
        Row mnfBomOpRow = getMnfBomOp().createRow();
        mnfBomOpRow.setAttribute("RtId", rtId);
        mnfBomOpRow.setAttribute("OpId", opId);
        mnfBomOpRow.setAttribute("OpSrNo", opSrNo);
        mnfBomOpRow.setAttribute("WcId", wcId);
        mnfBomOpRow.setAttribute("OpLocType", opLocType);
        //mnfBomOpRow.setAttribute("OpLocType", 5);
        getMnfBomOp().insertRow(mnfBomOpRow);
    }

    /**
     * Container's getter for LOVRtOperation1.
     * @return LOVRtOperation1
     */
    public LOVRtOperationVOImpl getLOVRtOperationVO() {
        return (LOVRtOperationVOImpl) findViewObject("LOVRtOperationVO");
    }

    /**
     * Container's getter for DualForSearch1.
     * @return DualForSearch1
     */
    public ViewObjectImpl getDualForSearchVO() {
        return (ViewObjectImpl) findViewObject("DualForSearchVO");
    }


    public void createItemRow() {

        Row mnfBomOpItmRow = getMnfBomOpItmVO().createRow();
        mnfBomOpItmRow.setAttribute("ItmPriceType", getMnfBomVO().getCurrentRow().getAttribute("ItmPriceType"));
        mnfBomOpItmRow.setAttribute("OpYieldPer", 100);
        getMnfBomOpItmVO().insertRow(mnfBomOpItmRow);
        getMnfBomOpItmVO().setCurrentRow(mnfBomOpItmRow);
        //  this.getDBTransaction().postChanges();

    }

    /**
     * Container's getter for LOVItemView1.
     * @return LOVItemView1
     */
    public LOVItemViewVOImpl getLOVItemViewVO() {
        return (LOVItemViewVOImpl) findViewObject("LOVItemViewVO");
    }


    public void executeInputOutputVO() {
        this.getMnfBomInputItmVO().executeQuery();
        this.getMnfBomOutputItmVO().executeQuery();
    }

    /**
     * Container's getter for MnfBomInputItm1.
     * @return MnfBomInputItm1
     */
    public ViewObjectImpl getMnfBomInputItmVO() {
        return (ViewObjectImpl) findViewObject("MnfBomInputItmVO");
    }

    /**
     * Container's getter for MnfBomOpToMnfBomInputItmVL1.
     * @return MnfBomOpToMnfBomInputItmVL1
     */
    public ViewLinkImpl getMnfBomOpToMnfBomInputItmVL1() {
        return (ViewLinkImpl) findViewLink("MnfBomOpToMnfBomInputItmVL1");
    }

    /**
     * Container's getter for MnfBomOutputItm1.
     * @return MnfBomOutputItm1
     */
    public ViewObjectImpl getMnfBomOutputItmVO() {
        return (ViewObjectImpl) findViewObject("MnfBomOutputItmVO");
    }

    /**
     * Container's getter for MnfBomOpToMnfBomOutputItmVL1.
     * @return MnfBomOpToMnfBomOutputItmVL1
     */
    public ViewLinkImpl getMnfBomOpToMnfBomOutputItmVL1() {
        return (ViewLinkImpl) findViewLink("MnfBomOpToMnfBomOutputItmVL1");
    }

    /**
     * Container's getter for MnfBomCoProductItm1.
     * @return MnfBomCoProductItm1
     */
    public MnfBomCoProductItmVOImpl getMnfBomCoProductItmVO() {
        return (MnfBomCoProductItmVOImpl) findViewObject("MnfBomCoProductItmVO");
    }

    /**
     * Container's getter for MnfBomOpToMnfBomCoProductItmVL1.
     * @return MnfBomOpToMnfBomCoProductItmVL1
     */
    public ViewLinkImpl getMnfBomOpToMnfBomCoProductItmVL1() {
        return (ViewLinkImpl) findViewLink("MnfBomOpToMnfBomCoProductItmVL1");
    }

    public String validateBomNm(String cldId, Integer slcId, String hoOrgId, String tabFlg, String bomDesc,
                                String doc_txn_id) {

        try {
            return callStoredFunction(VARCHAR, "MNF.FN_PRE_NM_EXIST(?,?,?,?,?,?)", new Object[] {
                                      cldId, slcId, hoOrgId, "BOM", bomDesc, doc_txn_id
        }).toString();
        } catch (Exception e) {
            e.printStackTrace();

            StringBuilder saveMsg = new StringBuilder("<html><body><p><b>Error in Validating Bom Name. </b></p>");

            saveMsg.append("</body></html>");

            showFacesMsg(saveMsg.toString(), null, FacesMessage.SEVERITY_ERROR, null);

        }
        return "N";
    }

    public void updateWfStatus(String doc_txn_id, String wf_mode) {

        //System.out.println("wf_mode " + wf_mode);

        //wf_mode : V - revert, I - Initialize, F - Forwarded, A - Approved, R - Reject

        Row r = getMnfBomVO().getCurrentRow();

        if ("I".equals(wf_mode)) {

            r.setAttribute("BomMode", 47);

        } else if ("F".equals(wf_mode)) {

            r.setAttribute("BomMode", 46);

        } else if ("A".equals(wf_mode)) {

            r.setAttribute("BomMode", 43);

        } else if ("R".equals(wf_mode)) {

            r.setAttribute("BomMode", 45);

        }

        getDBTransaction().commit();
    }

    /**
     * Mtethod to perform search action in search page
     * **/

    public void performSearch() {

        Row r = getDualForSearchVO().first();
        Row rr = this.getDualForSearchVO().getCurrentRow();
        System.out.println("roww " + rr.getKey());
        System.out.println(" Doc Id for Curr  " + rr.getAttribute("BomDocId"));
        System.out.println("DOC ID :" + r.getAttribute("BomDocId"));


        ViewObject searchVO = getBomSearchVO().getViewObject();
        searchVO.setNamedWhereClauseParam("BindCldId", r.getAttribute("CldId"));
        searchVO.setNamedWhereClauseParam("BindSlcId", r.getAttribute("SlocId"));
        searchVO.setNamedWhereClauseParam("BindHoOrgId", r.getAttribute("HoOrgId"));
        searchVO.setNamedWhereClauseParam("BindBomTyp", r.getAttribute("BomType"));
        searchVO.setNamedWhereClauseParam("BindOutputItmId", r.getAttribute("ItemId"));
        searchVO.setNamedWhereClauseParam("BindDocId", r.getAttribute("BomDocId"));
        searchVO.setNamedWhereClauseParam("BindBomAtt", r.getAttribute("BomAtt"));
        searchVO.setNamedWhereClauseParam("BindOpId", r.getAttribute("OpDocId"));
        searchVO.setNamedWhereClauseParam("BindRtDocId", r.getAttribute("RouteDocId"));
        searchVO.setNamedWhereClauseParam("BindStrtDt", r.getAttribute("createDtFrm"));
        searchVO.setNamedWhereClauseParam("BindEndDt", r.getAttribute("createDtTo"));
        searchVO.executeQuery();
    }

    /**
     * Method to reset search view
     * **/

    public void performReset() {

        getDualForSearchVO().executeQuery();
        ViewObject searchVO = getBomSearchVO().getViewObject();
        searchVO.setNamedWhereClauseParam("BindCldId", null);
        searchVO.setNamedWhereClauseParam("BindSlcId", null);
        searchVO.setNamedWhereClauseParam("BindHoOrgId", null);
        searchVO.setNamedWhereClauseParam("BindBomTyp", null);
        searchVO.setNamedWhereClauseParam("BindOutputItmId", null);
        searchVO.setNamedWhereClauseParam("BindDocId", null);
        searchVO.setNamedWhereClauseParam("BindBomAtt", null);
        searchVO.setNamedWhereClauseParam("BindOpId", null);
        searchVO.setNamedWhereClauseParam("BindRtDocId", null);
        searchVO.setNamedWhereClauseParam("BindStrtDt", null);
        searchVO.setNamedWhereClauseParam("BindEndDt", null);
        searchVO.executeQuery();
    }

    /**
     * Container's getter for BomSearch1.
     * @return BomSearch1
     */
    public ViewObjectImpl getBomSearchVO() {
        return (ViewObjectImpl) findViewObject("BomSearchVO");
    }

    public void setBomParam(String doc_id) {

        getMnfBomVO().setBindDocId(doc_id);
        getDualForSearchVO().setNamedWhereClauseParam("BindDocId", doc_id);
        getDualForSearchVO().executeQuery();
    }

    /**
     * Container's getter for MnfBomOpItmAll1.
     * @return MnfBomOpItmAll1
     */
    public MnfBomOpItmAllVOImpl getMnfBomOpItmAllVO() {
        return (MnfBomOpItmAllVOImpl) findViewObject("MnfBomOpItmAllVO");
    }

    /**
     * Container's getter for MnfBomToMnfBomOpItmAllVL1.
     * @return MnfBomToMnfBomOpItmAllVL1
     */
    public ViewLinkImpl getMnfBomToMnfBomOpItmAllVL1() {
        return (ViewLinkImpl) findViewLink("MnfBomToMnfBomOpItmAllVL1");
    }

    public void updateOpItmPer(String doc_id, String opId, Number currSrNo, String ItmId, Number per, String preOpId,
                               Number opPreSrNo) {

        RowSetIterator rSet1 = getMnfBomOpItmAllVO().createRowSetIterator(null);

        Row rc = null;
        System.out.println("rdet value get is ---------- " + rSet1.getRowCount());
        //  for (Row rc : rSet1) {
        while (rSet1.hasNext()) {
            rc = rSet1.next();
            System.out.println("op inside update == " + rc.getAttribute("OpId") + "    " + opId);
            if (opId.equals(rc.getAttribute("OpId")) && currSrNo.equals(rc.getAttribute("OpSrNo")) &&
                (((Integer) rc.getAttribute("ItmType")).compareTo(62) == 0)) {
                if (ItmId.equals(rc.getAttribute("ItmId").toString())) {
                    // Number num = predOpPer.get(rc.getAttribute("ItmId").toString());
                    System.out.println(" itm is :" + rc.getAttribute("ItmId").toString() + "   " + per);

                    Number qtyBefr = (Number) rc.getAttribute("ItmQty");

                    System.out.println("Befr qty is :" + qtyBefr);

                    Number qtyAfter = (qtyBefr.multiply(per)).divide(new Number(100));

                    System.out.println("Aftr qty is :" + qtyAfter);
                    rc.setAttribute("ItmQty", qtyAfter.round(6));
                    System.out.println("UPDATED !!");
                }
            }
        }
        rSet1.closeRowSetIterator();

    }


    /**
     * Method to validate the Input/Output Items present in BOM
     * validation point : 1. Each Operation can have only one items of any type
     *                    2. All operations will contain atleast one Input(type 62) and one Operation-output items(type 67).
     *                    3. Operation-output item of an operation should be consumed as Input item in its immediate next operation.
     * **/
    public String validateAllItems(String doc_id, String bom_itm) {

        //************************ changes for Parallel Operation in BOM
        int rtExeTyp = 0;
        String predFlag = "N";
        String RouteId = getMnfBomVO().getCurrentRow().getAttribute("RtId").toString();
        ViewObjectImpl execTypVO1 = getLOVRtExecTypVO1();
        execTypVO1.setNamedWhereClauseParam("bindRtDocId", RouteId);
        execTypVO1.setNamedWhereClauseParam("bindCldId", getCldId());
        execTypVO1.setNamedWhereClauseParam("bindSlocId", getSlocId());
        execTypVO1.setNamedWhereClauseParam("bindHoOrgId", getHoOrgId());
        execTypVO1.executeQuery();

        Row[] row = execTypVO1.getFilteredRows("DocId", RouteId);
        if (row.length > 0) {
            rtExeTyp = (Integer) row[0].getAttribute("RtExecType");
            predFlag = row[0].getAttribute("RtFreezePred").toString();
        }
        //************************************************************************************
        RowSetIterator mnfOp = getMnfBomOp().createRowSetIterator(null);
        Row[] rSet = getMnfBomOpItmAllVO().getFilteredRows("DocId", doc_id);
        Row[] rSet1 = getMnfBomOpItmVO().getFilteredRows("DocId", doc_id);
        // RowSetIterator rSet1 = getMnfBomOpItmVO().createRowSetIterator(null);

        Integer errCount = 0;
        Integer temp = 0;
        Integer cop = 0;

        Number currSrNo = new Number(0);
        Number maxSrNo = currSrNo;
        Number subNo = new Number(1);

        Set<String> prevOpOutputItem = new HashSet<String>();
        List<String> oprIputItem = new ArrayList<String>();
        Map<String, Number> predOpPer = new HashMap<String, Number>();
        String errMsg = "";
        Number per = new Number(0);
        Row mnfOpRow = null;
        //***************************   for parallel operation **************
        if (rtExeTyp == 142) {

            if (predFlag.equals("Y")) {

                while (mnfOp.hasNext()) {
                    mnfOpRow = mnfOp.next();
                    currSrNo = (Number) mnfOpRow.getAttribute("OpSrNo");
                    String opId = mnfOpRow.getAttribute("OpId").toString();
                    System.out.println("inside of parallel exection 1111 " + currSrNo + opId);
                    if (!(currSrNo.compareTo(new Number(1)) == 0)) {
                        predOpPer = new HashMap<String, Number>();

                        System.out.println("Map value is : " + predOpPer);
                        String preOpId = null;
                        Number opSrNo = new Number(0);
                        ViewObjectImpl impl = this.getLOVPredessorOpVO1();
                        impl.setNamedWhereClauseParam("bindRtDocId", RouteId);
                        impl.setNamedWhereClauseParam("bindCldId", getCldId());
                        impl.setNamedWhereClauseParam("bindSlocId", getSlocId());
                        impl.setNamedWhereClauseParam("bindHoOrgId", getHoOrgId());
                        impl.setNamedWhereClauseParam("bindOpId", opId);
                        impl.setNamedWhereClauseParam("bindOpSrNo", currSrNo);
                        impl.executeQuery();
                        System.out.println("inside of parallel exection 222 ");
                        //Row[] rp = impl.getAllRowsInRange();
                        RowSetIterator rp = impl.createRowSetIterator(null);
                        System.out.println("inside of parallel exection  333 ");
                        //if(rp.length>0)
                        // if(Row we : rp)
                        while (rp.hasNext()) {
                            //for(Row r : rp){
                            predOpPer = new HashMap<String, Number>();
                            Row r = rp.next();
                            preOpId = (String) r.getAttribute("PredOpId");
                            opSrNo = (Number) r.getAttribute("PredOpSrNo");
                            per = (Number) r.getAttribute("PredUsePer");
                            System.out.println("inside of parallel exection  444 " + preOpId + opSrNo);
                            for (Row rc : rSet) {
                                if (preOpId.equals(rc.getAttribute("OpId")) &&
                                    opSrNo.equals(rc.getAttribute("OpSrNo")) &&
                                    (((Integer) rc.getAttribute("ItmType")).compareTo(67) == 0)) {
                                    System.out.println("itm to be added " + rc.getAttribute("ItmId").toString());
                                    prevOpOutputItem.add(rc.getAttribute("ItmId").toString());
                                    predOpPer.put(rc.getAttribute("ItmId").toString(), per);
                                    System.out.println("Map value is : " + predOpPer);
                                }
                            }
                            temp = 0;
                            for (Row rb : rSet) {
                                if (opId.equals(rb.getAttribute("OpId")) &&
                                    currSrNo.equals(rb.getAttribute("OpSrNo")) &&
                                    (((Integer) rb.getAttribute("ItmType")).compareTo(62) == 0)) {
                                    if (prevOpOutputItem.contains(rb.getAttribute("ItmId").toString())) {
                                        //System.out.println("itm to be added " + rb.getAttribute("ItmId").toString());
                                        temp = temp + 1;
                                    }
                                }
                            }

                            Iterator<Map.Entry<String, Number>> entries = predOpPer.entrySet().iterator();
                            while (entries.hasNext()) {
                                Map.Entry<String, Number> entry = entries.next();
                                System.out.println("Key = " + entry.getKey() + ", Value = " + entry.getValue());
                                updateOpItmPer(doc_id, opId, currSrNo, entry.getKey().toString(), entry.getValue(),
                                               preOpId, opSrNo);
                            }

                            System.out.println("temp val is : " + temp);
                            if (temp.compareTo(0) == 0) {
                                System.out.println("====>> " + temp);
                                errCount = errCount + 1;
                            }
                        }


                    }
                }
                mnfOp.closeRowSetIterator();

                System.out.println("error count is : " + errCount);
                //prepare error mesage
                if (errCount.compareTo(0) == 1) {
                    errMsg =
                        " <br/><ul><li>Operation output for an Parallel operation does not exist as Input in  Operation! </li></ul><br/> ";
                }

            } else {
                errMsg = " <br/><ul><li>Routing Profile is not Freezed for Parallel Operation ! </li></ul><br/> ";
            }
        } else {
            //***************************************************************
            while (mnfOp.hasNext()) {
                mnfOpRow = mnfOp.next();
                currSrNo = (Number) mnfOpRow.getAttribute("OpSrNo");
                if (currSrNo.compareTo(maxSrNo) == 1) {
                    maxSrNo = currSrNo;
                }
                //System.out.println("currSrNo " + currSrNo + " maxSrNo " + maxSrNo);
                //start the Output Item check after serial no greater than 1
                if (currSrNo.compareTo(1) == 1) {
                    for (Row r :
                         rSet) {
                        //get all the operation output items for previous serial no.
                        if ((currSrNo.sub(subNo)).equals(r.getAttribute("OpSrNo")) &&
                            (((Integer) r.getAttribute("ItmType")).compareTo(67) == 0)) {
                            prevOpOutputItem.add(r.getAttribute("ItmId").toString());
                        }
                    }
                    temp = 0;
                    //Increment the temporary counter if input Item for current serial no matches with item in prevOpOutputItem
                    for (Row r : rSet) {
                        if (currSrNo.equals(r.getAttribute("OpSrNo")) &&
                            (((Integer) r.getAttribute("ItmType")).compareTo(62) == 0)) {
                            if (prevOpOutputItem.contains(r.getAttribute("ItmId").toString())) {
                                temp = temp + 1;
                            }
                        }
                    }
                    //update the error counter if the temporary counter(temp) is zero
                    if (temp.compareTo(0) == 0) {
                        errCount = errCount + 1;
                    }
                }
            }
            mnfOp.closeRowSetIterator();
            //prepare error mesage
            if (errCount.compareTo(0) == 1) {
                errMsg =
                    " <br/><ul><li>Operation output for an operation does not exist as Input in  Operation! </li></ul><br/> ";
            }
        }


        //check for  bom output item in last operation
        prevOpOutputItem = new HashSet<String>();
        List<String> allOutputItem = new ArrayList<String>();

        //Adding all the output Item to check duplicate output item in all operation
        for (Row r : rSet) {

            if (((Integer) r.getAttribute("ItmType")).compareTo(67) == 0) {
                allOutputItem.add(r.getAttribute("ItmId").toString());
            }
        }
        if (checkDuplicateOutputItem(allOutputItem)) {
            errMsg = errMsg + "<br/><ul><li> Duplicate Operation Output Item detected!</li></ul><br> ";
        }

        Set<String> allInputItem = new HashSet<String>();
        for (Row r : rSet) {
            if (((Integer) r.getAttribute("ItmType")).compareTo(62) == 0) {
                //System.out.println(r.getAttribute("ItmId").toString());
                allInputItem.add(r.getAttribute("ItmId").toString());
            }
        }
        if (isBomItemInput(allInputItem)) {
            errMsg = errMsg + "<br/><ul><li> Bom Operation Output Item cannot be input item! </li></ul><br/>";
        }

        for (Row r :
             rSet) {
            //get all the operation output items for previous serial no.
            if ((currSrNo).equals(r.getAttribute("OpSrNo")) &&
                (((Integer) r.getAttribute("ItmType")).compareTo(67) == 0)) {

                prevOpOutputItem.add(r.getAttribute("ItmId").toString());
            }
        }

        if (prevOpOutputItem.contains(bom_itm)) {

            //System.out.println("The actual item id  ========= " + bom_itm);
            Row r[] = getMnfBomOpItmVO().getFilteredRows("ItmId", bom_itm);
            if (((Integer) r[0].getAttribute("ItmType")).compareTo(67) == 0) {
                //System.out.println("The inside of filtered row item id  ========= " + bom_itm);

                Number reQty = (Number) (r[0].getAttribute("ItmQty"));
                //System.out.println("The requied item quantity  ========= " + reQty);
                Number CurQty = (Number) (getMnfBomVO().getCurrentRow().getAttribute("OutptItmQty"));
                //System.out.println("The bom quantity is  ========= " + CurQty);

                if (reQty.compareTo(CurQty) < 0 || reQty.compareTo(CurQty) > 0) {
                    cop++;
                }
            }
        }

        for (Row r : rSet) {
            if (((Integer) r.getAttribute("ItmType")).compareTo(62) == 0 &&
                (((Number) r.getAttribute("OpSrNo")).compareTo(1) == 0)) {
                oprIputItem.add(r.getAttribute("ItmId").toString());
            }
        }

        if (cop.compareTo(0) == 1) {
            errMsg =
                errMsg +
                "<br/> <ul><li>Last Operation Output Item Quantity must match the Output Quantity defined in BOM! </li></ul><br/>";
        }

        if (!prevOpOutputItem.contains(bom_itm)) {
            errMsg =
                errMsg +
                " <br/><ul><li> Output Item of BOM is not present as Operation output Item in last operation! </li></ul><br/> ";
        }
        //System.out.println( " total no. of input items   " + oprIputItem.size());
        if (oprIputItem.size() == 0) {
            errMsg = errMsg + " <br/><ul><li> Input Item is not present in operation! </li></ul><br/>";
        }


        return errMsg;
    }

    /**
     * Method to check duplicate output Item in a BOM
     *
     */
    public Boolean checkDuplicateOutputItem(List<String> listContainingDuplicate) {
        //System.out.println("Checking duplicate output Item");
        Set<String> inputSet = new HashSet<String>(listContainingDuplicate);
        if (inputSet.size() != listContainingDuplicate.size())
            return true;

        return false;
    }

    /**method to check input as output item in operations
     *
     */
    public Boolean isBomItemInput(Set<String> allInputitm) {
        if (getMnfBomVO().getCurrentRow().getAttribute("OutptItmId") != null) {

            String bomItem = getMnfBomVO().getCurrentRow().getAttribute("OutptItmId").toString();

            for (String str : allInputitm) {
                // System.out.println(" Looping over HashSet in Java element : " + str);
                if (str.equalsIgnoreCase(bomItem)) {
                    //    System.out.println(" Looping over HashSet in Java element : " + str);
                    return true;
                }
            }
        }
        return false;
    }

    /**
     * Method to check more than two operation output item in single operation
     * Method not in use
     */
    public Boolean checkMultipleOutItmInOpr(String doc_id, String currOprSr) {

        Row[] row = getMnfBomOpItmVO().getFilteredRows("DocId", doc_id);
        Set<String> outItm = new HashSet<String>();

        for (int a = 0; a < row.length; a++) {
            if (row[a].getAttribute("OpSrNo").equals(currOprSr) && row[a].getAttribute("ItmType") != null &&
                (Integer) row[a].getAttribute("ItmType") == 67 && row[a].getAttribute("ItmId") != null) {
                outItm.add(row[a].getAttribute("ItmId").toString());
            }
        }

        // System.out.println("No of items  ======== " + outItm.size());
        if (outItm.size() > 1) {
            return true;
        }

        return false;
    }

    /**
     * Method to calculate amount for output Item in each operation
     *
     */
    public Number calcTotalOuputAmount(String doc_id, Number currOprSr) {

        RowSetIterator OpItm = getMnfBomOpItmVO().createRowSetIterator(null);

        Number totalAmount = new Number(0);

        Row mnfOpRow = null;

        while (OpItm.hasNext()) {
            mnfOpRow = OpItm.next();
            if (mnfOpRow != null && mnfOpRow.getAttribute("DocId").toString().equalsIgnoreCase(doc_id) &&
                mnfOpRow.getAttribute("OpSrNo").equals(currOprSr) &&
                ((Integer) mnfOpRow.getAttribute("ItmType") == 63 ||
                 (Integer) mnfOpRow.getAttribute("ItmType") == 62)) {

                totalAmount = totalAmount.add((Number) mnfOpRow.getAttribute("ItmTotAmt"));

            }
        }
        OpItm.closeRowSetIterator();
        // System.out.println("total amount  =====================  "+totalAmount);

        return totalAmount;
    }

    /**
     * Method to calculate amount for output Item in each operation
     *
     */
    public void refreshItmPrice(String doc_id, Number currOprSr) {

        RowSetIterator OpItm = getMnfBomOpItmVO().createRowSetIterator(null);

        Row mnfOpRow = null;
        //System.out.println(" ============ doc id " + doc_id);

        while (OpItm.hasNext()) {
            mnfOpRow = OpItm.next();
            if (mnfOpRow != null && mnfOpRow.getAttribute("DocId").toString().equalsIgnoreCase(doc_id) &&
                mnfOpRow.getAttribute("OpSrNo").equals(currOprSr) && (Integer) mnfOpRow.getAttribute("ItmType") == 67 //) {
                // && new Number(0).compareTo((Number) mnfOpRow.getAttribute("ItmTotAmt")) == 1 &&
                && new Number(0).compareTo((Number) mnfOpRow.getAttribute("ItmQty")) == -1) {

                Number amnt = (Number) mnfOpRow.getAttribute("ItmTotAmt");
                Number qty = (Number) mnfOpRow.getAttribute("ItmQty");

                Number itm_price = ADFBeanUtils.roundOff(amnt.divide(qty));
                // System.out.println("==================== " + itm_price + " with out round ");
                if (itm_price.compareTo(0) != 0)
                    mnfOpRow.setAttribute("ItmPrice", itm_price);

            }
        }
        OpItm.closeRowSetIterator();
    }

    /**
     * Method to set all consumption flag for individual raw material
     */
    public void setConsmtnFlg() {

        List<String> allInputItem = new ArrayList<String>();
        List<String> allOutItem = new ArrayList<String>();

        RowSetIterator itr = getMnfBomOpItmAllVO().createRowSetIterator(null);
        Row r = null;
        while (itr.hasNext()) {
            r = itr.next();
            Integer x = (Integer) r.getAttribute("ItmType");
            if (x.compareTo(62) == 0 || x.compareTo(63) == 0) {
                allInputItem.add(r.getAttribute("ItmId").toString());
            }
            if (x.compareTo(67) == 0) {
                allOutItem.add(r.getAttribute("ItmId").toString());
            }
        }

        itr.closeRowSetIterator();

        allInputItem.removeAll(allOutItem);

        RowSetIterator rti = getMnfBomOpItmAllVO().createRowSetIterator(null);
        while (rti.hasNext()) {
            r = rti.next();
            if (allInputItem.contains(r.getAttribute("ItmId").toString())) {
                r.setAttribute("ConsmptnFlg", "Y");
            }
        }

        rti.closeRowSetIterator();

        RowSetIterator tri = getMnfBomOpItmAllVO().createRowSetIterator(null);
        while (tri.hasNext()) {
            r = tri.next();
            if (allOutItem.contains(r.getAttribute("ItmId").toString())) {
                r.setAttribute("ConsmptnFlg", "N");
            }
        }

        tri.closeRowSetIterator();

    }

    /**
     * Method to set the global parameter when create triggered from search page.
     * **/
    public void setCreateEditTFParamOnCreate(String cld_id, Integer sloc_id, String ho_org_id, String org_id,
                                             String doc_id) {

        getMnfBomVO().setBindCldId(cld_id);
        getMnfBomVO().setBindSlcId(sloc_id);
        getMnfBomVO().setBindHoOrgId(ho_org_id);
        getMnfBomVO().setBindDocId(doc_id);

        setLovItemVoParam(cld_id, sloc_id, ho_org_id, org_id);
        setLovBomVoParam(cld_id, sloc_id, ho_org_id);
        setLovOrganizationParam(cld_id, sloc_id, ho_org_id);
        setDualSearchVOParam(cld_id, sloc_id, ho_org_id, org_id, doc_id);
        setLovUserParam(sloc_id);
        setAllOperationDesc(cld_id, sloc_id, ho_org_id);
        setAllOperationFromBOM();
        setDualOerhead();
        setDualForAllItemSearch();
        setAllRouteDesc(cld_id, sloc_id, ho_org_id);
        setAllItemVoParam(cld_id, sloc_id, ho_org_id);
        setAllQcparam(cld_id, sloc_id, ho_org_id);
        setParentNode(cld_id, sloc_id, ho_org_id, doc_id);
        setChildNode(cld_id, sloc_id, ho_org_id, doc_id);

    }

    public void setParentNode(String cld_id, Integer sloc_id, String ho_org_id, String docid) {
        /*  ViewCriteria criteria = getLOVParentNodeVO1().getViewCriteria("LOVParentNodeVOCriteria");
        getLOVParentNodeVO1().applyViewCriteria(criteria);

        getLOVParentNodeVO1().setNamedWhereClauseParam("BindCldId", cld_id);
        getLOVParentNodeVO1().setNamedWhereClauseParam("BindSlocId", sloc_id);
        getLOVParentNodeVO1().setNamedWhereClauseParam("BindHoOrgId", ho_org_id);
        getLOVParentNodeVO1().setNamedWhereClauseParam("bom_doc_id", docid);
        getLOVParentNodeVO1().executeQuery(); */



    }

    public void setChildNode(String cld_id, Integer sloc_id, String ho_org_id, String docId) {


        /* getLOCChildNodeVO1().setNamedWhereClauseParam("BinSlocId", sloc_id);
        getLOCChildNodeVO1().setNamedWhereClauseParam("BindOrgID", ho_org_id);
        getLOCChildNodeVO1().setNamedWhereClauseParam("BindHoOrgID", ho_org_id);
        getLOCChildNodeVO1().setNamedWhereClauseParam("BindCldId", cld_id);
        getLOCChildNodeVO1().setNamedWhereClauseParam("bom_doc_id", docId);
        getLOCChildNodeVO1().executeQuery(); */

    }

    private void setLovUserParam(Integer slc_id) {

        getLOVUserVO().setNamedWhereClauseParam("BindSlcId", slc_id);
    }

    /**
     * Container's getter for LOVBom1.
     * @return LOVBom1
     */
    public ViewObjectImpl getLOVBomVO() {
        return (ViewObjectImpl) findViewObject("LOVBomVO");
    }

    /**
     * Method to copy referenced Bom if variant BOM is selected
     * **/
    public void copyReferencedBom(String cld_id, Integer slc_id, String ho_org_id, String org_id, Integer usr_id,
                                  String doc_id, String bom_id) {

        Object refIdObj = getMnfBomVO().getCurrentRow().getAttribute("RefBomId");
        //System.out.println("doc_id " + doc_id);

        if (doc_id != null && refIdObj != null) {

            String refId = refIdObj.toString();

            Object fnRetVal;

            try {

                fnRetVal = callStoredFunction(VARCHAR, "MNF.FN_MNF_COPY_PRF(?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                              cld_id, slc_id, ho_org_id, ho_org_id, usr_id, "MNF.MNF$BOM", bom_id, null,
                                              doc_id, refId, "Default BOM"
                });

                // System.out.println("fnRetVal " + fnRetVal);
            } catch (Exception e) {

                e.printStackTrace();
            }


            getMnfBomRelVO().executeQuery();
            getMnfBomQcParam().executeQuery();
            getMnfBomParam().executeQuery();
            getMnfBomOp().executeQuery();
            getOrgMnfBomVO().executeQuery();
            getMnfBomAttchVO().executeQuery();

            getMnfBomOpItmAllVO().executeQuery();
            getMnfBomOpItmVO().executeQuery();
            getMnfBomInputItmVO().executeQuery();
            getMnfBomOutputItmVO().executeQuery();
            getMnfBomCoProductItmVO().executeQuery();

            //disable reserve mode which has been enabled in Value change event of reference Id.
            disableReservedMode();
        }

    }

    /**
     * Method to copy referenced Bom if variant BOM is selected
     * **/
    public void reviseBom(String cld_id, Integer slc_id, String ho_org_id, String org_id, Integer usr_id, String doc_id,
                          String bom_id) {

        //Object refIdObj = bom_id;
        //System.out.println("doc_id " + doc_id);

        if (doc_id != null) {

            //set revision no for current
            getMnfBomVO().getCurrentRow().setAttribute("BomMode", 44);
            Integer rev_no = Integer.parseInt(getMnfBomVO().getCurrentRow().getAttribute("BomRevNo").toString());

            Row currRow = getMnfBomVO().getCurrentRow();

            Row newRow = getMnfBomVO().createRow();
            newRow.setAttribute("BomId", currRow.getAttribute("BomId"));
            newRow.setAttribute("BomDesc", currRow.getAttribute("BomDesc"));
            newRow.setAttribute("BomType", currRow.getAttribute("BomType"));
            newRow.setAttribute("OutptItmId", currRow.getAttribute("OutptItmId"));
            newRow.setAttribute("OutptItmQty", currRow.getAttribute("OutptItmQty"));
            newRow.setAttribute("BomAtt", currRow.getAttribute("BomAtt"));
            newRow.setAttribute("BomPriceType", currRow.getAttribute("BomPriceType"));
            newRow.setAttribute("ItmPriceType", currRow.getAttribute("ItmPriceType"));
            newRow.setAttribute("BomRevNo", rev_no + 1);
            newRow.setAttribute("BomRevDt", new oracle.jbo.domain.Timestamp(System.currentTimeMillis()));
            newRow.setAttribute("GrpBom", currRow.getAttribute("GrpBom"));
            newRow.setAttribute("BomUsage", currRow.getAttribute("BomUsage"));
            newRow.setAttribute("RtId", currRow.getAttribute("RtId"));
            newRow.setAttribute("ItmTypeFlg", currRow.getAttribute("ItmTypeFlg"));
            newRow.setAttribute("BomLegCd", currRow.getAttribute("BomLegCd"));
            newRow.setAttribute("BomRmrk", currRow.getAttribute("BomRmrk"));
            newRow.setAttribute("RefBomId", doc_id);
            newRow.setAttribute("OutptItmLeadTm", currRow.getAttribute("OutptItmLeadTm"));
            newRow.setAttribute("TotOutptItmAmt", currRow.getAttribute("TotOutptItmAmt"));
            newRow.setAttribute("BomDfltFlg", "N");
            getMnfBomVO().insertRow(newRow);
            getMnfBomVO().setCurrentRow(newRow);
            String newDocId = getMnfBomVO().getCurrentRow().getAttribute("DocId").toString();
            //set BindVars for MNF$RT
            getMnfBomVO().setNamedWhereClauseParam("BindDocId", newDocId);
            Object fnRetVal;
            try {
                fnRetVal = callStoredFunction(VARCHAR, "MNF.FN_MNF_COPY_PRF(?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                              cld_id, slc_id, ho_org_id, ho_org_id, usr_id, "MNF.MNF$BOM", bom_id, null,
                                              newDocId, doc_id, "Default BOM"
                });

                //System.out.println("fnRetVal " + fnRetVal);
            } catch (Exception e) {

                e.printStackTrace();
            }

            getMnfBomOp().executeQuery();
            getOrgMnfBomVO().executeQuery();
            getMnfBomAttchVO().executeQuery();
            getMnfBomOpItmAllVO().executeQuery();
            getMnfBomOpItmVO().executeQuery();
            getMnfBomInputItmVO().executeQuery();
            getMnfBomOutputItmVO().executeQuery();
            getMnfBomCoProductItmVO().executeQuery();
            getMnfBomParam().executeQuery();
            getMnfBomQcParam().executeQuery();

            //disable reserve mode which has been enabled in Value change event of reference Id.
            disableReservedMode();
        }

    }

    public void enableReservedMode() {
        if (getReleaseLevel() != ApplicationModule.RELEASE_LEVEL_RESERVED) {
            //System.out.println("Setting release level as RELEASE_LEVEL_RESERVED.....");

            setReleaseLevel(ApplicationModule.RELEASE_LEVEL_RESERVED);
        }
    }

    public void disableReservedMode() {
        if (getReleaseLevel() != ApplicationModule.RELEASE_LEVEL_MANAGED) {
            //System.out.println("Setting release level as RELEASE_LEVEL_MANAGED.....");

            setReleaseLevel(ApplicationModule.RELEASE_LEVEL_MANAGED);
        }
    }


    public void replicateAllOrg(String cld_id, Integer slc_id, String ho_org_id, String org_id, String doc_id,
                                Integer usr_id) {

        if (this.getMnfBomOpItmAllVO().getRowCount() > 0) {
            removeAllRows("OrgMnfBomVO");

            //create row for all Organizations
            RowSetIterator rSetIter = getLOVOrganizationVO().createRowSetIterator(null);
            Row r = null;

            while (rSetIter.hasNext()) {

                r = rSetIter.next();
                //System.out.println("org-----------> " + r.getAttribute("OrgId"));
                createOrgMnfBom(cld_id, slc_id, r.getAttribute("OrgId").toString(), usr_id, doc_id);
            }

            // getOrgMnfBomVO().executeQuery();


        } else {
            FacesContext.getCurrentInstance().addMessage(null,
                                                         new FacesMessage(FacesMessage.SEVERITY_ERROR, "Error",
                                                                          "Please add Items"));
        }
        disableReservedMode();
    }

    /**
     * A generalized method to remove all rows of a VO.
     * @param voName which the name of VO.
     * Created by Priyank Khare on 10-06-2014
     * **/

    private void removeAllRows(String voName) {

        while (findViewObject(voName).createRowSetIterator(null).hasNext()) {

            findViewObject(voName).createRowSetIterator(null).next().remove();

            // System.out.println(voName + " row removed ");
        }
    }

    /**
     * Container's getter for LOVOrganization1.
     * @return LOVOrganization1
     */
    public LOVOrganizationVOImpl getLOVOrganizationVO() {
        return (LOVOrganizationVOImpl) findViewObject("LOVOrganizationVO");
    }


    public Number getTotAmt() {

        RowSetIterator rit = getMnfBomOpItmAllVO().createRowSetIterator(null);
        Row r = null;
        Number sum = new Number(0);

        while (rit.hasNext()) {

            r = rit.next();

            if (r.getAttribute("ItmTotAmt") != null && r.getAttribute("ItmType") != null &&
                (r.getAttribute("ItmType").equals(62) || r.getAttribute("ItmType").equals(63))) {
                //System.out.println(" ItmTotAmt----> " + r.getAttribute("ItmTotAmt"));
                sum = sum.add((Number) r.getAttribute("ItmTotAmt"));
                //System.out.println("sum " + sum);
            }

        }
        rit.closeRowSetIterator();

        return sum;
    }

    /**
     * Method to check duplicate value for Item and Item type
     * **/
    public boolean duplicateItmAndItmType(Object itmNm, Object itmTyp) {


        RowSetIterator rSetIter = getMnfBomOpItmVO().createRowSetIterator(null);
        // System.out.println("am validator: row count "+rSetIter.getRowCount());

        Integer countVal = 0;

        //check the null values
        if (itmNm != null && itmTyp != null) {

            while (rSetIter.hasNext()) {
                Row r = rSetIter.next();
                //System.out.println("attrsNm "+r.getAttribute("ItmId"));

                if (itmNm.equals(r.getAttribute("ItmId")) && itmTyp.equals(r.getAttribute("ItmType"))) {
                    countVal = countVal + 1;
                }
            }
            rSetIter.closeRowSetIterator();

            //exclude count from current row
            Row currentRow = getMnfBomOpItmVO().getCurrentRow();

            if (itmNm.equals(currentRow.getAttribute("ItmId")) && itmTyp.equals(currentRow.getAttribute("ItmType"))) {
                countVal = countVal - 1;
            }
        }

        return countVal == 1 ? true : false;
    }

    /**
     *Method to check duplicate overhead parameter attached
     * @param paramName
     * @return
     */
    public boolean duplicateParam(String paramName) {
        RowSetIterator rSetIter = getMnfBomParam().createRowSetIterator(null);
        Integer countVal = 0;
        if (paramName != null) {
            while (rSetIter.hasNext()) {
                Row r = rSetIter.next();
                if (paramName.equals(r.getAttribute("paramDescTrans"))) {
                    //System.out.println("1 Org Found : " + shiftName.equals(r.getAttribute("TransShiftName")));
                    countVal = countVal + 1;
                }
            }
            rSetIter.closeRowSetIterator();
            Row currentRow = getMnfBomParam().getCurrentRow();

            if (paramName.equals(currentRow.getAttribute("paramDescTrans"))) {
                // System.out.println("2 Org Id Found : " + shiftName.equals(currentRow.getAttribute("TransShiftName")));
                countVal = countVal - 1;
            }
        }
        return countVal == 1 ? true : false;
    }


    /**
     *Method to get the image path
     * @param sloc_id
     * @return
     */
    public String getImagePathFromServer(Integer sloc_id) {

        Object path;
        try {
            path = callStoredFunction(VARCHAR, "APP.FN_GET_APP_IMG_PATH(?)", new Object[] { sloc_id });


            // System.out.println(" path in am " + path);
            if (path != null)
                return path.toString();

        } catch (Exception e) {
            e.printStackTrace();

        }

        return null;
    }

    /**
     *Method to check the default BOM in exist
     * @param itmId
     */
    public boolean chkDefaultBom(String itmId) {

        RowSetIterator defR = getMnfBomVO().createRowSetIterator(null);
        Row[] r = getMnfBomVO().getFilteredRows("OutptItmId", itmId);
        Set<String> bomId = new HashSet<String>();

        for (int i = 0; i < r.length; i++) {
            if (r[i] != getMnfBomVO().getCurrentRow()) {
                bomId.add(r[i].getAttribute("DocId").toString());
            }
        }

        for (String bom : bomId) {
            defR = getMnfBomVO().createRowSetIterator(null);
            while (defR.hasNext()) {

                Row c = defR.next();

                if (c.getAttribute("DocId").equals(bom) && c.getAttribute("BomDfltFlg") != null &&
                    c.getAttribute("BomDfltFlg").toString().equalsIgnoreCase("Y")) {
                    return true;
                }
            }
            defR.closeRowSetIterator();

        }
        return false;
    }


    /**
     *Method to chk the existense of more than one principle Item
     * @param itmId
     * @return
     */
    public boolean chkDoublePrincpleItem(String itmId) {

        RowSetIterator src = getMnfBomOpItmAllVO().createRowSetIterator(null);
        Row r = null;
        System.out.println("Inside the methode to check principle Item");
        Integer count = 0;

        //ArrayList<String> pl = new ArrayList<String>();
        while (src.hasNext()) {
            r = src.next();
            src.getRowCount();
            if (r.getAttribute("DocId") != null && itmId.equalsIgnoreCase(r.getAttribute("DocId").toString()) &&
                r.getAttribute("PrncplInpt") != null && r.getAttribute("PrncplInpt").toString().equalsIgnoreCase("Y")) {
                count++;
            }
        }
        System.out.println(count + " total no of principle Item");
        src.closeRowSetIterator();

        return count > 1 ? true : false;

    }

    /**
     * Container's getter for MnfBomParam1.
     * @return MnfBomParam1
     */
    public MnfBomParamVOImpl getMnfBomParam() {
        return (MnfBomParamVOImpl) findViewObject("MnfBomParam");
    }

    /**
     * Container's getter for MnfBomToMnfBomParamVL1.
     * @return MnfBomToMnfBomParamVL1
     */
    public ViewLinkImpl getMnfBomToMnfBomParamVL1() {
        return (ViewLinkImpl) findViewLink("MnfBomToMnfBomParamVL1");
    }

    /**
     * Container's getter for LOVOverheadParam1.
     * @return LOVOverheadParam1
     */
    public ViewObjectImpl getLOVOverheadParam1() {
        return (ViewObjectImpl) findViewObject("LOVOverheadParam1");
    }

    /**
     * Container's getter for LOVUserVO1.
     * @return LOVUserVO1
     */
    public ViewObjectImpl getLOVUserVO() {
        return (ViewObjectImpl) findViewObject("LOVUserVO");
    }

    /**
     * Container's getter for LOVAllItemDescVO1.
     * @return LOVAllItemDescVO1
     */
    public ViewObjectImpl getLOVAllItemDescVO() {
        return (ViewObjectImpl) findViewObject("LOVAllItemDescVO");
    }

    /**
     * Container's getter for LOVAllOverheadVO1.
     * @return LOVAllOverheadVO1
     */
    public ViewObjectImpl getLOVAllOverheadVO() {
        return (ViewObjectImpl) findViewObject("LOVAllOverheadVO");
    }

    /**
     * Container's getter for LOVOperationFromBOMVO1.
     * @return LOVOperationFromBOMVO1
     */
    public ViewObjectImpl getLOVOperationFromBOMVO() {
        return (ViewObjectImpl) findViewObject("LOVOperationFromBOMVO");
    }

    /**
     * Container's getter for LOVOperationDescVO1.
     * @return LOVOperationDescVO1
     */
    public ViewObjectImpl getLOVOperationDescVO() {
        return (ViewObjectImpl) findViewObject("LOVOperationDescVO");
    }

    public void attachOverhead(String operation) {

        Row r = getDualOverheadVO().getCurrentRow();

        String parm_Id = r.getAttribute("ParamId") != null ? r.getAttribute("ParamId").toString() : null;
        String setparam = r.getAttribute("ParamSetId") != null ? r.getAttribute("ParamSetId").toString() : null;
        Number parmValue = r.getAttribute("Value") != null ? (Number) r.getAttribute("Value") : null;
        String routeId =
            getMnfBomOp().getCurrentRow().getAttribute("RtId") != null ?
            getMnfBomOp().getCurrentRow().getAttribute("RtId").toString() : null;
        String doc_Id =
            getMnfBomVO().getCurrentRow().getAttribute("DocId") != null ?
            getMnfBomVO().getCurrentRow().getAttribute("DocId").toString() : null;
        //System.out.println(doc_Id + " this is header doc id");
        // System.out.println(getDocId() + " this is page doc id");

        Number opSr = new Number(1);

        //        removeAllParm(param);
        String newDlimitedDocId =
            (r.getAttribute("OperationId") == null ? null : r.getAttribute("OperationId").toString());
        //System.out.println(newDlimitedDocId);
        StringTokenizer newValueTokens = new StringTokenizer(newDlimitedDocId, ",");

        if (doc_Id != null && parm_Id != null) {
            while (newValueTokens.hasMoreTokens()) {
                String currentToken = (newValueTokens.nextToken().toString());
                opSr = getOprSrFromCurrOpr(currentToken);
                removeAllParm(doc_Id, parm_Id, currentToken);
                insertOprForParam(currentToken, parm_Id, setparam, parmValue, routeId, opSr);
            }
        }

        resetOverhead();
        setDualOerhead();
        //setDualOerhead(G, sloc_id, ho_org_id, doc_id, org_id);
        // setAllOperationFromBOM(cld_id, sloc_id, ho_org_id, doc_id);


    }

    public void insertOprForParam(String oprID, String param, String setparam, Number paramVal, String rtId,
                                  Number opSr) {

        // System.out.println(oprID + " Operation ID");
        Row docIdRow = getMnfBomParam().createRow();
        docIdRow.setAttribute("OpId", oprID);
        docIdRow.setAttribute("ParamId", param);
        docIdRow.setAttribute("ParamSetId", setparam);
        docIdRow.setAttribute("ParamType", 39);
        docIdRow.setAttribute("ParamVal", paramVal);
        docIdRow.setAttribute("RtId", rtId);
        docIdRow.setAttribute("OpSrNo", opSr);
        getMnfBomParam().insertRow(docIdRow);
        getMnfBomParam().setCurrentRow(docIdRow);

    }

    public void resetOverhead() {
        reAssignParam();
        setDualOerhead();
        if (getDualOverheadVO().getCurrentRow() != null) {
            Row r = getDualOverheadVO().getCurrentRow();

            r.setAttribute("ParamId", null);
            r.setAttribute("ParamSetId", null);
            r.setAttribute("OperationId", "");
            r.setAttribute("Value", null);
            getDualOverheadVO().executeQuery();
        }

    }

    public void reAssignParam() {
        // System.out.println(" ------------- " + getDocId());
        getLOVOperationFromBOMVO().setNamedWhereClauseParam("BindCldId", getCldId());
        getLOVOperationFromBOMVO().setNamedWhereClauseParam("BindSlocId", getSlocId());
        getLOVOperationFromBOMVO().setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        getLOVOperationFromBOMVO().setNamedWhereClauseParam("BindDocId", getDocId());
        getLOVOperationFromBOMVO().executeQuery();
    }

    public void removeAllParm(String doc_id, String parmId, String oprId) {
        //Assuming not many child rows. Can have better logic if child rows are large
        if (doc_id != null && parmId != null && oprId != null) {

            RowSetIterator rtr = getMnfBomParam().createRowSetIterator(null);
            Row cr = null;
            while (rtr.hasNext()) {
                cr = rtr.next();
                if (cr.getAttribute("DocId").toString().equalsIgnoreCase(doc_id) &&
                    cr.getAttribute("ParamId").toString().equalsIgnoreCase(parmId) &&
                    cr.getAttribute("OpId").toString().equalsIgnoreCase(oprId)) {
                    cr.remove();
                }
            }
            rtr.closeRowSetIterator();
        }

    }

    public Number getOprSrFromCurrOpr(String oprId) {

        Row[] a = getMnfBomOp().getFilteredRows("OpId", oprId);
        if (a.length > 0) {
            return (Number) a[0].getAttribute("OpSrNo");
        }
        return new Number(1);
    }

    public Integer chckQuantityValidator(Number opr_sr, String itm_id, Number qty) {

        RowSetIterator rSetIter = getMnfBomOpItmAllVO().createRowSetIterator(null);

        //************************* For Parllel Execution  ****************
        int rtExeTyp = 0;
        String predFlag = "Y";
        String RouteId = getMnfBomVO().getCurrentRow().getAttribute("RtId").toString();
        ViewObjectImpl execTypVO1 = getLOVRtExecTypVO1();
        execTypVO1.setNamedWhereClauseParam("bindRtDocId", RouteId);
        execTypVO1.setNamedWhereClauseParam("bindCldId", getCldId());
        execTypVO1.setNamedWhereClauseParam("bindSlocId", getSlocId());
        execTypVO1.setNamedWhereClauseParam("bindHoOrgId", getHoOrgId());
        execTypVO1.executeQuery();

        Row[] row = execTypVO1.getFilteredRows("DocId", RouteId);
        if (row.length > 0) {
            rtExeTyp = (Integer) row[0].getAttribute("RtExecType");
            predFlag = row[0].getAttribute("RtFreezePred").toString();
        }

        if (rtExeTyp == 142 && predFlag.equals("Y")) {


        } else {
            Row r = null;
            while (rSetIter.hasNext()) {
                r = rSetIter.next();
                if ( //r.getAttribute("OpSrNo") != null && opr_sr.compareTo((Number) r.getAttribute("OpSrNo")) != 0 &&
                    (Integer) r.getAttribute("ItmType") == 67 && r.getAttribute("ItmId") != null &&
                    itm_id.equalsIgnoreCase((String) r.getAttribute("ItmId")) && r.getAttribute("ItmQty") != null &&
                    qty.compareTo((Number) r.getAttribute("ItmQty")) != 0) {
                    return 1;
                }
            }
            rSetIter.closeRowSetIterator();
        }
        return 0;

    }

    //setting the final operation output quantity as the Bom Quantity
    public Number getlastOprTotalAmount() {
        Row[] rSet = getMnfBomOp().getFilteredRows("DocId", getDocId());
        Integer maxSr = rSet.length;

        Number finalAmount = new Number(0);

        RowQualifier rq = new RowQualifier(getMnfBomOpItmAllVO());

        rq.setWhereClause("SlocId=" + getSlocId() + " and CldId='" + getCldId() + "' and HoOrgId='" + getHoOrgId() +
                          "' and DocId='" + getDocId() + "' and ItmType =" + 67 + " and OpSrNo=" + maxSr);
        Row fltrdrow[] = getMnfBomOpItmAllVO().getFilteredRows(rq);

        if (fltrdrow.length > 0) {
            finalAmount = (Number) fltrdrow[0].getAttribute("ItmTotAmt");
        }

        return finalAmount;
    }

    public Number calcAllInputItmAmnt(Integer opr_sr) {

        RowQualifier rq = new RowQualifier(getMnfBomOpItmAllVO());

        Number totalAmount = new Number(0);
        // System.out.println( " new value  ========= " + totalAmount);

        rq.setWhereClause("SlocId=" + getSlocId() + " and CldId='" + getCldId() + "' and HoOrgId='" + getHoOrgId() +
                          "' and DocId='" + getDocId() + "' and (ItmType =" + 62 + " or ItmType = " + 63 +
                          ") and OpSrNo=" + opr_sr);
        Row fltrdrow[] = getMnfBomOpItmAllVO().getFilteredRows(rq);

        if (fltrdrow.length > 0) {

            for (Integer i = 0; i < fltrdrow.length; i++) {

                totalAmount = totalAmount.add((Number) fltrdrow[i].getAttribute("ItmTotAmt"));
            }
        }

        // System.out.println(totalAmount +" == total Amount");

        return totalAmount;
    }


    public void setOutOprItemAmnt(Integer opr_sr, Number totalAmount) {

        RowQualifier rq = new RowQualifier(getMnfBomOpItmAllVO());

        rq.setWhereClause("SlocId=" + getSlocId() + " and CldId='" + getCldId() + "' and HoOrgId='" + getHoOrgId() +
                          "' and DocId='" + getDocId() + "' and ItmType =" + 67 + " and OpSrNo=" + opr_sr);
        Row fltrdrow[] = getMnfBomOpItmAllVO().getFilteredRows(rq);

        if (fltrdrow.length > 0) {

            fltrdrow[0].setAttribute("ItmTotAmt", totalAmount);

        }
    }

    public String getOutOprItemId(Integer opr_sr) {
        String itmId = "";
        RowQualifier rq = new RowQualifier(getMnfBomOpItmAllVO());

        rq.setWhereClause("SlocId=" + getSlocId() + " and CldId='" + getCldId() + "' and HoOrgId='" + getHoOrgId() +
                          "' and DocId='" + getDocId() + "' and ItmType =" + 67 + " and OpSrNo=" + opr_sr);
        Row fltrdrow[] = getMnfBomOpItmAllVO().getFilteredRows(rq);

        if (fltrdrow.length > 0) {

            itmId = fltrdrow[0].getAttribute("ItmId") != null ? fltrdrow[0].getAttribute("ItmId").toString() : null;

        }
        return itmId;
    }

    public Number getOutOprItemAmnt(Integer opr_sr) {

        RowQualifier rq = new RowQualifier(getMnfBomOpItmAllVO());

        Number outAmount = new Number(0);

        rq.setWhereClause("SlocId=" + getSlocId() + " and CldId='" + getCldId() + "' and HoOrgId='" + getHoOrgId() +
                          "' and DocId='" + getDocId() + "' and ItmType =" + 67 + " and OpSrNo=" + opr_sr);
        Row fltrdrow[] = getMnfBomOpItmAllVO().getFilteredRows(rq);

        if (fltrdrow.length > 0) {

            outAmount =
                fltrdrow[0].getAttribute("ItmTotAmt") != null ? (Number) fltrdrow[0].getAttribute("ItmTotAmt") :
                new Number(0);

        }
        //System.out.println( " prev amount ========= "+ outAmount);
        return outAmount;
    }

    public Number getOutOprItemprice(Integer opr_sr) {
        Number itm_price = new Number(0);
        RowQualifier rq = new RowQualifier(getMnfBomOpItmAllVO());

        rq.setWhereClause("SlocId=" + getSlocId() + " and CldId='" + getCldId() + "' and HoOrgId='" + getHoOrgId() +
                          "' and DocId='" + getDocId() + "' and ItmType =" + 67 + " and OpSrNo=" + opr_sr);
        Row fltrdrow[] = getMnfBomOpItmAllVO().getFilteredRows(rq);

        if (fltrdrow.length > 0) {

            itm_price =
                fltrdrow[0].getAttribute("ItmPrice") != null ? (Number) fltrdrow[0].getAttribute("ItmPrice") : null;

        }
        return itm_price;
    }

    public Number getOutOprItemQty(Integer opr_sr) {
        Number itm_qty = new Number(0);
        RowQualifier rq = new RowQualifier(getMnfBomOpItmAllVO());

        rq.setWhereClause("SlocId=" + getSlocId() + " and CldId='" + getCldId() + "' and HoOrgId='" + getHoOrgId() +
                          "' and DocId='" + getDocId() + "' and ItmType =" + 67 + " and OpSrNo=" + opr_sr);
        Row fltrdrow[] = getMnfBomOpItmAllVO().getFilteredRows(rq);

        if (fltrdrow.length > 0) {

            itm_qty = fltrdrow[0].getAttribute("ItmQty") != null ? (Number) fltrdrow[0].getAttribute("ItmQty") : null;

        }
        return itm_qty;
    }

    public void setInOprItemValues(Integer opr_sr, String itm_id, Number itm_qty, Number itm_amnt, Number itm_price) {
        RowQualifier rq = new RowQualifier(getMnfBomOpItmAllVO());

        rq.setWhereClause("SlocId=" + getSlocId() + " and CldId='" + getCldId() + "' and HoOrgId='" + getHoOrgId() +
                          "' and DocId='" + getDocId() + "' and ItmType =" + 62 + " and OpSrNo=" + opr_sr +
                          " and ItmId='" + itm_id + "'");
        Row fltrdrow[] = getMnfBomOpItmAllVO().getFilteredRows(rq);
        String exeType = parallelExec();
        if (exeType.equals("SEQ")) { //************SEQUENTIAL OPERATION>..........
            if (fltrdrow.length > 0) {

                fltrdrow[0].setAttribute("ItmQty", itm_qty);
                fltrdrow[0].setAttribute("ItmPrice", itm_price);
                fltrdrow[0].setAttribute("ItmTotAmt", itm_amnt);

            }
        }
    }

    public boolean checkItmExist(Integer opr_sr) {

        Integer prevOprSr = opr_sr - 1;
        String itm_id = getOutOprItemId(prevOprSr);

        RowQualifier rq = new RowQualifier(getMnfBomOpItmAllVO());

        rq.setWhereClause("SlocId=" + getSlocId() + " and CldId='" + getCldId() + "' and HoOrgId='" + getHoOrgId() +
                          "' and DocId='" + getDocId() + "' and ItmType =" + 62 + " and OpSrNo=" + opr_sr);

        Row fltrdrow[] = getMnfBomOpItmAllVO().getFilteredRows(rq);

        if (fltrdrow.length > 0) {
            for (Integer i = 0; i < fltrdrow.length; i++) {

                if (fltrdrow[i].getAttribute("ItmId") != null &&
                    itm_id.equalsIgnoreCase(fltrdrow[i].getAttribute("ItmId").toString())) {
                    return true;
                }
            }
        }

        return false;
    }

    public void refreshAllItem() {

        Row[] oprRow = getMnfBomOp().getFilteredRows("DocId", getDocId());
        Integer maxSrNo = oprRow.length;

        Number totalInItmAmount = new Number(0);
        Number outItmAmount = new Number(0);
        Number outItmQty = new Number(0);
        Number outItmprice = new Number(0);
        // Number totalInItmAmount = new Number(0);

        Integer prevOprSr = 0;
        String itm_id = "";

        for (Integer currSrNo = 1; currSrNo <= maxSrNo; currSrNo++) {

            prevOprSr = currSrNo - 1;
            if (prevOprSr > 0) {
                if (checkItmExist(currSrNo)) {
                    setInOprItemValues(currSrNo, getOutOprItemId(prevOprSr), outItmQty, outItmAmount, outItmprice);
                }
            }

            totalInItmAmount = calcAllInputItmAmnt(currSrNo);
            itm_id = getOutOprItemId(currSrNo);
            if (itm_id != null || itm_id.equalsIgnoreCase("")) {

                setOutOprItemAmnt(currSrNo, totalInItmAmount);

                outItmAmount = getOutOprItemAmnt(currSrNo);
                outItmQty = getOutOprItemQty(currSrNo);
                outItmprice = getOutOprItemprice(currSrNo);
            }
        }
    }


    /**
     * Container's getter for DualOverheadVO1.
     * @return DualOverheadVO1
     */
    public ViewObjectImpl getDualOverheadVO() {
        return (ViewObjectImpl) findViewObject("DualOverheadVO");
    }

    /**
     * Container's getter for LOVAllRouteDesc1.
     * @return LOVAllRouteDesc1
     */
    public ViewObjectImpl getLOVAllRouteDesc() {
        return (ViewObjectImpl) findViewObject("LOVAllRouteDesc");
    }

    public Integer getSlocId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC }").toString());
    }

    public String getCldId() {
        return (resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
    }

    public String getOrgId() {
        return (resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
    }

    public String getHoOrgId() {
        return (resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString());
    }

    public Integer getUsrId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
    }

    public String getDocId() {
        return (resolvEl("#{pageFlowScope.MNF_BOM_DOC_ID}").toString());
    }


    public oracle.jbo.domain.Timestamp getCurrentDate() {
        return new oracle.jbo.domain.Timestamp(System.currentTimeMillis());
    }

    public Object resolvEl(String data) {
        ADFContext adfCtx = ADFContext.getCurrent();
        ELContext elContext = adfCtx.getELContext();
        ValueExpression valueExp = adfCtx.getExpressionFactory().createValueExpression(elContext, data, Object.class);
        Object Message = valueExp.getValue(elContext).toString();

        return Message;
    }


    /**
     * Container's getter for DualAllItemSearch1.
     * @return DualAllItemSearch1
     */
    public ViewObjectImpl getDualAllItemSearch() {
        return (ViewObjectImpl) findViewObject("DualAllItemSearch");
    }

    /**
     *Method to delete the attached file in the application
     * @param path
     */
    public void deleteAttachFileRow(String path) {
        RowSetIterator rowSetIterator = null;
        try {
            //System.out.println("File path in AMimpl : " + path);
            String filePath = "";
            String fileNm = "", cldId = "", horgId = "", docId = "";
            int slocId = 1;
            ViewObjectImpl attch1 = this.getMnfBomAttchVO();
            Row[] rows = attch1.getFilteredRows("AttchFlPath", path);
            System.out.println(rows.length);
            if (rows.length > 0) {
                fileNm = (String) rows[0].getAttribute("AttchFlNm");
                cldId = (String) rows[0].getAttribute("CldId");
                horgId = (String) rows[0].getAttribute("HoOrgId");
                slocId = Integer.parseInt(rows[0].getAttribute("SlocId").toString());
                docId = (String) rows[0].getAttribute("DocId");
            }
            rowSetIterator = attch1.getRowSetIterator();
            Key key = new Key(new Object[] { fileNm, cldId, docId, horgId, slocId });
            Row[] ro = rowSetIterator.findByKey(key, 1);
            //System.out.println("Filtered Row : "+ro.length);
            Row row = rowSetIterator.findByKey(key, 1)[0];
            rowSetIterator.setCurrentRow(row);
            Row r = this.getMnfBomAttchVO().getCurrentRow();
            filePath = (String) r.getAttribute("AttchFlPath");
            //System.out.println("Current Row File Path : "+filePath);
            filePath = (String) row.getAttribute("AttchFlPath");
            //System.out.println("Row File Path : "+filePath);
            File f = new File(filePath);
            if (f.exists()) {
                boolean success = f.delete();
                System.out.println("File Deleted");
            }
        } catch (Exception x) {

            System.err.format("%s: no such" + " file or directory%n", path);
        }
        rowSetIterator.removeCurrentRow();
    }


    /**
     * Container's getter for MnfBomQcParam2.
     * @return MnfBomQcParam2
     */
    public ViewObjectImpl getMnfBomQcParam() {
        return (ViewObjectImpl) findViewObject("MnfBomQcParam");
    }

    /**
     * Container's getter for MnfBomToMnfBomQcParamVL1.
     * @return MnfBomToMnfBomQcParamVL1
     */
    public ViewLinkImpl getMnfBomToMnfBomQcParamVL1() {
        return (ViewLinkImpl) findViewLink("MnfBomToMnfBomQcParamVL1");
    }

    /**
     * Method to check duplicate value for Item and Item type
     * **/
    public boolean duplicateQcparamAndOper(Object paramName, Object oprId) {


        RowSetIterator rSetIter = getMnfBomQcParam().createRowSetIterator(null);
        // System.out.println("am validator: row count "+rSetIter.getRowCount());

        Integer countVal = 0;

        //check the null values
        if (paramName != null && oprId != null) {

            while (rSetIter.hasNext()) {
                Row r = rSetIter.next();
                //System.out.println("attrsNm "+r.getAttribute("ItmId"));

                if (paramName.equals(r.getAttribute("TransQcParamDesc")) && oprId.equals(r.getAttribute("OpId"))) {
                    countVal = countVal + 1;
                }
            }
            rSetIter.closeRowSetIterator();

            //exclude count from current row
            Row currentRow = getMnfBomQcParam().getCurrentRow();

            if (paramName.equals(currentRow.getAttribute("TransQcParamDesc")) &&
                oprId.equals(currentRow.getAttribute("OpId"))) {
                countVal = countVal - 1;
            }
        }

        return countVal == 1 ? true : false;
    }

    /**
     * Container's getter for LOVAllQcParameter1.
     * @return LOVAllQcParameter1
     */
    public ViewObjectImpl getLOVAllQcParameter() {
        return (ViewObjectImpl) findViewObject("LOVAllQcParameter");
    }


    /**
     * Container's getter for LOVParentNode1.
     * @return LOVParentNode1
     */
    public ViewObjectImpl getLOVParentNodeVO1() {
        return (ViewObjectImpl) findViewObject("LOVParentNodeVO1");
    }

    /**
     * Container's getter for MnfBomToLovParentVL1.
     * @return MnfBomToLovParentVL1
     */
    public ViewLinkImpl getMnfBomToLovParentVL1() {
        return (ViewLinkImpl) findViewLink("MnfBomToLovParentVL1");
    }

    /**
     * Container's getter for LovOperationChild1.
     * @return LovOperationChild1
     */
    public ViewObjectImpl getLovOperationChildVO1() {
        return (ViewObjectImpl) findViewObject("LovOperationChildVO1");
    }

    /**
     * Container's getter for LOVParentToLovOperationChildVL1.
     * @return LOVParentToLovOperationChildVL1
     */
    public ViewLinkImpl getLOVParentToLovOperationChildVL1() {
        return (ViewLinkImpl) findViewLink("LOVParentToLovOperationChildVL1");
    }

    /**
     * Container's getter for LOCChildNode1.
     * @return LOCChildNode1
     */
    public ViewObjectImpl getLOCChildNodeVO1() {
        return (ViewObjectImpl) findViewObject("LOCChildNodeVO1");
    }

    /**
     * Container's getter for LOVOperationChildToLovChildNodeVL1.
     * @return LOVOperationChildToLovChildNodeVL1
     */
    public ViewLinkImpl getLOVOperationChildToLovChildNodeVL1() {
        return (ViewLinkImpl) findViewLink("LOVOperationChildToLovChildNodeVL1");
    }

    /**
     * Container's getter for LOCChildNode1.
     * @return LOCChildNode1
     */
    public ViewObjectImpl getLOCChildNodeVO2() {
        return (ViewObjectImpl) findViewObject("LOCChildNodeVO2");
    }

    /**
     * Container's getter for LovChildSelfVL1.
     * @return LovChildSelfVL1
     */
    public ViewLinkImpl getLovChildSelfVL1() {
        return (ViewLinkImpl) findViewLink("LovChildSelfVL1");
    }

    /**
     * Container's getter for LOVAllBOMVO1.
     * @return LOVAllBOMVO1
     */
    public ViewObjectImpl getLOVAllBOMVO1() {
        return (ViewObjectImpl) findViewObject("LOVAllBOMVO1");
    }

    public Integer chkDefaultWsVal(String wcId) {
        String DocId = this.getMnfBomVO().getCurrentRow().getAttribute("DocId").toString();
        Integer level = 0;
        if (wcId != null) {
            try {
                level = Integer.parseInt(callStoredFunction(NUMBER, "MNF.MNF_UPD_BOM_DFLT_FLG(?,?,?,?,?)", new Object[] {
                                                            this.getCldId(), this.getSlocId(), this.getHoOrgId(), DocId,
                                                            wcId
                }).toString());
                return level;

            } catch (Exception nfe) {

                //showFacesMsg(resolvElDCMsg("#{bundle['MSG.1113']}").toString(), null, FacesMessage.SEVERITY_ERROR, null);

                nfe.printStackTrace();
            }
        }

        return level;

        /* Integer returnVal = 0;
        wcId = (String) this.getMnfBomVO().getCurrentRow().getAttribute("OutptItmId");
        RowSetIterator rsetIter = getLOVAllBOMVO1().createRowSetIterator(null);
        ViewObjectImpl impl = getMnfBomVO();
        ViewObjectImpl wsVo = getLOVAllBOMVO1();
        // wsVo.setWhereClause("CldId="+this.getCldId()+" and HoOrgId='"+this.getHoOrgId()+" and SlocId='" + this.getSlocId());
        //  wsVo.executeQuery();
        RowQualifier rowQualifier = new RowQualifier(wsVo);
        rowQualifier.setWhereClause(" CldId ='" + this.getCldId() + "' and HoOrgId = '" + this.getHoOrgId() +
                                    "' and SlocId = '" + this.getSlocId() + "' and OutptItmId = '" + wcId + "'");

        Row[] r2 = wsVo.getFilteredRows(rowQualifier);
       Row r = null;
        Set<String> bomId = new HashSet<String>();
        for (int i = 0; i < r2.length; i++) {
            if (r2[i] != getMnfBomVO().getCurrentRow()) {
                bomId.add(r2[i].getAttribute("DocId").toString());
            }
        }

        for (String bom : bomId) {
            //    System.out.println("m here");
            while (rsetIter.hasNext()) {
                r = rsetIter.next();
                //  System.out.println("this here this " + " ====== " + wcId);
            //   if(r != impl.getCurrentRow()){
                if (r.getAttribute("BomDfltFlg").toString().equalsIgnoreCase("Y") && r.getAttribute("BomDfltFlg") != null &&
                    r.getAttribute("OutptItmId").toString().equalsIgnoreCase(wcId)) {
                    returnVal = returnVal + 1;
                }
             //   }
            }
            rsetIter.closeRowSetIterator();
        }

        if (returnVal > 0) {
            return "true";
        }
        return "false"; */

    }

    public Integer chkOrgWiseItemRep(String orgId) {
        //    this.getDBTransaction().postChanges();
        String DocId = this.getMnfBomVO().getCurrentRow().getAttribute("DocId").toString();
        //  orgId = this.getOrgMnfBomVO().getCurrentRow().getAttribute("OrgId").toString();
        Integer level = 0;
        try {
            level = Integer.parseInt(callStoredFunction(NUMBER, "MNF.fn_mnf_chk_bom_org_validation(?,?,?,?,?)", new Object[] {
                                                        this.getCldId(), this.getSlocId(), this.getHoOrgId(), orgId,
                                                        DocId
            }).toString());
            System.out.println("---" + level);
            return level;

        } catch (Exception nfe) {

            //showFacesMsg(resolvElDCMsg("#{bundle['MSG.1113']}").toString(), null, FacesMessage.SEVERITY_ERROR, null);

            nfe.printStackTrace();
        }


        return level;
    }

    public void dataBeforeCommit() {
        System.out.println("Row Count is " + this.getMnfBomOpItmAllVO().getRowCount());
        if (this.getMnfBomOpItmAllVO().getRowCount() > 0)
            this.getDBTransaction().postChanges();

    }

    /**
     * Get User Name for Given UserId
     *
     * */
    public String getUserName(Integer UsrId) {
        String uname = "0";
        ViewObjectImpl impl = this.getLOVUserVO();
        impl.setNamedWhereClauseParam("BindUsrId", UsrId);
        impl.setNamedWhereClauseParam("BindSlcId", this.getSlocId());
        impl.executeQuery();
        Row[] allRowsInRange = impl.getAllRowsInRange();
        if (allRowsInRange.length > 0) {
            Object a = allRowsInRange[0].getAttribute("UsrName");
            String s = (a == null ? null : a.toString());
            uname = s;
        }
        return uname;
    }

    /**
     * Container's getter for LOVForQCOrganizationVO1.
     * @return LOVForQCOrganizationVO1
     */
    public ViewObjectImpl getLOVForQCOrganizationVO1() {
        return (ViewObjectImpl) findViewObject("LOVForQCOrganizationVO1");
    }

    /**
     * Container's getter for LOVRtExecTypVO1.
     * @return LOVRtExecTypVO1
     */
    public ViewObjectImpl getLOVRtExecTypVO1() {
        return (ViewObjectImpl) findViewObject("LOVRtExecTypVO1");
    }

    /**
     * Container's getter for LOVPredessorOpVO1.
     * @return LOVPredessorOpVO1
     */
    public ViewObjectImpl getLOVPredessorOpVO1() {
        return (ViewObjectImpl) findViewObject("LOVPredessorOpVO1");
    }

    public String parallelExec() {

        int rtExeTyp = 0;
        String predFlag = "N";
        String retVal = null;

        String RouteId = getMnfBomVO().getCurrentRow().getAttribute("RtId").toString();
        ViewObjectImpl execTypVO1 = getLOVRtExecTypVO1();
        execTypVO1.setNamedWhereClauseParam("bindRtDocId", RouteId);
        execTypVO1.setNamedWhereClauseParam("bindCldId", getCldId());
        execTypVO1.setNamedWhereClauseParam("bindSlocId", getSlocId());
        execTypVO1.setNamedWhereClauseParam("bindHoOrgId", getHoOrgId());
        execTypVO1.executeQuery();

        Row[] row = execTypVO1.getFilteredRows("DocId", RouteId);
        if (row.length > 0) {
            rtExeTyp = (Integer) row[0].getAttribute("RtExecType");
            predFlag = row[0].getAttribute("RtFreezePred").toString();

            if (rtExeTyp == 142 && predFlag.equals("Y")) {
                return "PARA";
            }
        }
        return "SEQ";
    }

    /**
     * To get Latest Price of an Item
     * **/
    public Number bomLatestPrice(String itm_id, Integer itm_typ) {
        System.out.println("itemid is : " + itm_id + "   " + itm_typ);
        oracle.jbo.domain.Number dummy = new oracle.jbo.domain.Number(0);
        try {
            BigDecimal val = (BigDecimal) callStoredFunction(Types.NUMERIC, "MNF.fn_mnf_get_bom_itm_price(?,?,?,?,?,?)", new Object[] {
                                                             getCldId(), getSlocId(), getHoOrgId(), getOrgId(), itm_id,
                                                             itm_typ
            });
            if (val != null)
                dummy = new oracle.jbo.domain.Number(val);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return dummy;
    }

    /**
     * To upload Excel data to insert Record.
     *
     * **/

    public void uploadExcelRecordToInsert() {

        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String ho_org_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        String org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        Integer usr_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());

        Object data = resolvElO("#{pageFlowScope.InsertionRows}");
        Object udata = resolvElO("#{pageFlowScope.UpdationRows}");

        MnfBomOpItmVOImpl impl = this.getMnfBomOpItmVO();
        System.out.println("updatedRows r :" + udata);

        if (data != null) {
            List datalist = (List) data;
            ListIterator iterator = datalist.listIterator();
            while (iterator.hasNext()) {
                List e = (List) iterator.next();
                
                boolean check = this.chkDuplicateItmId(e.get(6),e.get(7),e.get(8),e.get(10),e.get(3),e.get(5));
                Integer errCode = validateNumber(5, 0, e.get(14));
                if (check == false) {
                    if (!(errCode.compareTo(2) == 0  || errCode.compareTo(3) == 0 || errCode.compareTo(1) == 0 )){
                    //}else{
                    Row createRow = impl.createRow();
                    impl.insertRow(createRow);
                    System.out.println("Came here---- " + e);
                    createRow.setAttribute("OpId", e.get(6));
                    createRow.setAttribute("OpSrNo", e.get(7));
                    createRow.setAttribute("ItmId", e.get(10));
                    createRow.setAttribute("ItmQty", e.get(14));
                    createRow.setAttribute("ItmType", e.get(8));
                    createRow.setAttribute("ItmPriceType", getMnfBomVO().getCurrentRow().getAttribute("ItmPriceType"));
                    createRow.setAttribute("OpYieldPer", 100);
                    createRow.setAttribute("ItmRtrnQty", new Number(0));
                    createRow.setAttribute("InptBomId", new Number(0));
                    createRow.setAttribute("IssuType", getDefaultIssueType());
                    createRow.setAttribute("ItmRtrnFlg", "N");
                    createRow.setAttribute("ItmScrapPer", new Number(0));
                    createRow.setAttribute("ItmRtrnType",89);
                    createRow.setAttribute("ItmUom",(getLOVAllItemDescVO().getFilteredRows("ItmId",
                                                                      e.get(10)))[0].getAttribute("UomBasic").toString());
                    createRow.setAttribute("ItmPrice",(getLOVAllItemDescVO().getFilteredRows("ItmId",
                                                                      e.get(10)))[0].getAttribute("PriceSls"));
                    Object  d = e.get(14);
                    Number qty = new Number(0);
                    try {
                        qty = new Number(d);
                    } catch (SQLException f) {
                    }
                    Number price = (Number)(getLOVAllItemDescVO().getFilteredRows("ItmId",e.get(10)))[0].getAttribute("PriceSls");
                   System.out.println("Price for an item is :" + price);
                    createRow.setAttribute("ItmTotAmt",qty.multiply(price).round(getAmtRoundDigit()));
                }
            }
        }

        }

        if (udata != null) {
            List list = (List) udata;
            Iterator<UpdatedData> iterator = list.iterator();
            while (iterator.hasNext()) {
                UpdatedData data1 = iterator.next();

                Map Pkeys = data1.getPrimaryKeys();
                Map column = data1.getUpdatedColumn();
                System.out.println("Pkeys are: " + Pkeys);
                System.out.println("Column data are: " + column);
                //    RowSetIterator OpItm = getMnfBomOpItmAllVO().createRowSetIterator(null);
                MnfBomOpItmAllVOImpl allVO = getMnfBomOpItmAllVO();
                RowQualifier rq = new RowQualifier(allVO);
                rq.setWhereClause("CldId = '" + cld_id + "' and SlocId = " + sloc_id + " and HoOrgId = '" + ho_org_id +
                                  "' and DocId= '" + Pkeys.get("DocId") + "' and RtId = '" + Pkeys.get("RtId") +
                                  "' and OpId = '" + Pkeys.get("OpId") + "' and OpSrNo = " + Pkeys.get("OpSrNo") +
                                  " and ItmId= '" + Pkeys.get("ItmId") + "' and ItmType =" + Pkeys.get("ItmType"));
                System.out.println("Row Qualifier : " + rq.getExprStr());
                Row fltrdrow[] = allVO.getFilteredRows(rq);

                if (fltrdrow.length > 0) {
                    fltrdrow[0].setAttribute("ItmQty", column.get("ItmQty"));
                    Object  d = column.get("ItmQty");
                    Number qty = new Number(0);
                    try {
                        qty = new Number(d);
                    } catch (SQLException f) {
                    }
                   // Number price = (Number)(getLOVAllItemDescVO().getFilteredRows("ItmId",e.get(10)))[0].getAttribute("PriceSls");
                  Number price = (Number)fltrdrow[0].getAttribute("ItmPrice");
                    fltrdrow[0].setAttribute("ItmTotAmt",qty.multiply(price).round(getAmtRoundDigit()));
                }
            }
       }
       
       // this.getDBTransaction().commit();
        getMnfBomOpItmAllVO().executeQuery();
        getMnfBomInputItmVO().executeQuery();
        getMnfBomOutputItmVO().executeQuery();
        impl.executeQuery();
        this.getDBTransaction().postChanges();
    }

    public Object resolvElO(String data) {
        ADFContext adfCtx = ADFContext.getCurrent();
        ELContext elContext = adfCtx.getELContext();
        ValueExpression valueExp = adfCtx.getExpressionFactory().createValueExpression(elContext, data, Object.class);
        Object Message = valueExp.getValue(elContext);

        return Message;
    }


    /**
     * Method to get Group Flag value from Org Profile
     * **/
    private Integer getDefaultIssueType() {
        try {
            return Integer.parseInt((callStoredFunction(Types.VARCHAR, "mnf.fn_mnf_chk_org_prf(?,?,?,?)", new Object[] {
                                                        getCldId(), getSlocId(), getHoOrgId(), "DEF_ISSUE_TYPE"
        })).toString());
        } catch (Exception e) {
            e.printStackTrace();
            return 25;
        }
    }
    public Integer getAmtRoundDigit() {

        if (resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}") != null)
            return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}").toString());

        return 2;
    }
    
    public boolean chkDuplicateItmId(Object OpId, Object OpSrno, Object ItmTyp, Object itmId, Object DocId, Object RtId) {
        if (itmId == null){
            return true;
        }
        MnfBomOpItmAllVOImpl allVO = getMnfBomOpItmAllVO();
        RowQualifier rq = new RowQualifier(allVO);
        rq.setWhereClause("CldId = '" + this.getCldId() + "' and SlocId = " + this.getSlocId() + " and HoOrgId = '" + this.getHoOrgId() +
                          "' and DocId= '" + DocId + "' and RtId = '" + RtId +
                          "' and OpId = '" + OpId + "' and OpSrNo = " + OpSrno +
                          " and ItmId= '" + itmId + "' and ItmType =" + ItmTyp);
        System.out.println("Row Qualifier : " + rq.getExprStr());
        Row fltrdrow[] = allVO.getFilteredRows(rq);

        if (fltrdrow.length > 0) {
            return true;
        }
        
        return false;
    }
    /**
     * Method to validate Number field for negative value and given precision
     * returns 2 if number is negative
     * returns 1 if number is out of precision
     * returns 0 if no error
     * **/

    protected Integer validateNumber(Integer precision, Integer scale, Object num) {

        if (num != null && precision != null && scale != null) {

            Number val = new Number(0);
            
            try {
                val = new Number(num);
            } catch (SQLException f) {
            }

            if (!isPrecisionValid(precision, scale, val)) {
                return 1;
            }
            if (val.compareTo(0) == -1) {
                return 2;
            }
            if (val.compareTo(0) == 0) {
                return 3;
            }
        }
        return 0;
    }
    
    public Boolean isPrecisionValid(Integer precision, Integer scale, Number total) {

        JboPrecisionScaleValidator vc = new JboPrecisionScaleValidator();
        vc.setPrecision(precision);
        vc.setScale(scale);

        return vc.validateValue(total);
    }
}

