package mnfBillOfMaterialsApp.model.views;

import javax.el.ELContext;
import javax.el.ValueExpression;

import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import mnfBillOfMaterialsApp.model.entities.MnfBomParamEOImpl;

import mnfBillOfMaterialsApp.model.services.MNFBillOfMaterialsAMImpl;
import mnfBillOfMaterialsApp.model.services.common.MNFBillOfMaterialsAM;

import oracle.adf.share.ADFContext;

import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.domain.NClobDomain;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Dec 09 12:48:57 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MnfBomParamVORowImpl extends ViewRowImpl {


    public static final int ENTITY_MNFBOMPARAMEO = 0;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CldId,
        DocId,
        HoOrgId,
        ParamId,
        ParamVal,
        SlocId,
        UsrIdCreate,
        UsrIdCreateDt,
        UsrIdMod,
        UsrIdModDt,
        paramDescTrans,
        RowKey,
        OpId,
        OpSrNo,
        RtId,
        ParamSetId,
        ParamType,
        SetDescTrans,
        RtRevNo,
        paramBasis,
        LOVOverheadParamVO1,
        LOVDsAttVO,
        LOVOverheadParamSetO,
        LOVOperationDescVO,
        LOVAllRouteDescVO;
        static AttributesEnum[] vals = null;
        ;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    String AttributeName = "";


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int PARAMID = AttributesEnum.ParamId.index();
    public static final int PARAMVAL = AttributesEnum.ParamVal.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int USRIDCREATE = AttributesEnum.UsrIdCreate.index();
    public static final int USRIDCREATEDT = AttributesEnum.UsrIdCreateDt.index();
    public static final int USRIDMOD = AttributesEnum.UsrIdMod.index();
    public static final int USRIDMODDT = AttributesEnum.UsrIdModDt.index();
    public static final int PARAMDESCTRANS = AttributesEnum.paramDescTrans.index();
    public static final int ROWKEY = AttributesEnum.RowKey.index();
    public static final int OPID = AttributesEnum.OpId.index();
    public static final int OPSRNO = AttributesEnum.OpSrNo.index();
    public static final int RTID = AttributesEnum.RtId.index();
    public static final int PARAMSETID = AttributesEnum.ParamSetId.index();
    public static final int PARAMTYPE = AttributesEnum.ParamType.index();
    public static final int SETDESCTRANS = AttributesEnum.SetDescTrans.index();
    public static final int RTREVNO = AttributesEnum.RtRevNo.index();
    public static final int PARAMBASIS = AttributesEnum.paramBasis.index();
    public static final int LOVOVERHEADPARAMVO1 = AttributesEnum.LOVOverheadParamVO1.index();
    public static final int LOVDSATTVO = AttributesEnum.LOVDsAttVO.index();
    public static final int LOVOVERHEADPARAMSETO = AttributesEnum.LOVOverheadParamSetO.index();
    public static final int LOVOPERATIONDESCVO = AttributesEnum.LOVOperationDescVO.index();
    public static final int LOVALLROUTEDESCVO = AttributesEnum.LOVAllRouteDescVO.index();

    /**
     * This is the default constructor (do not remove).
     */
    public MnfBomParamVORowImpl() {
    }

    /**
     * Gets MnfBomParamEO entity object.
     * @return the MnfBomParamEO
     */
    public MnfBomParamEOImpl getMnfBomParamEO() {
        return (MnfBomParamEOImpl) getEntity(ENTITY_MNFBOMPARAMEO);
    }

    /**
     * Gets the attribute value for CLD_ID using the alias name CldId.
     * @return the CLD_ID
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as attribute value for CLD_ID using the alias name CldId.
     * @param value value to set the CLD_ID
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for DOC_ID using the alias name DocId.
     * @return the DOC_ID
     */
    public String getDocId() {
        return (String) getAttributeInternal(DOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for DOC_ID using the alias name DocId.
     * @param value value to set the DOC_ID
     */
    public void setDocId(String value) {
        setAttributeInternal(DOCID, value);
    }

    /**
     * Gets the attribute value for HO_ORG_ID using the alias name HoOrgId.
     * @return the HO_ORG_ID
     */
    public String getHoOrgId() {
        return (String) getAttributeInternal(HOORGID);
    }

    /**
     * Sets <code>value</code> as attribute value for HO_ORG_ID using the alias name HoOrgId.
     * @param value value to set the HO_ORG_ID
     */
    public void setHoOrgId(String value) {
        setAttributeInternal(HOORGID, value);
    }

    /**
     * Gets the attribute value for PARAM_ID using the alias name ParamId.
     * @return the PARAM_ID
     */
    public String getParamId() {
        return (String) getAttributeInternal(PARAMID);
    }

    /**
     * Sets <code>value</code> as attribute value for PARAM_ID using the alias name ParamId.
     * @param value value to set the PARAM_ID
     */
    public void setParamId(String value) {     
        /* if(!getAm().duplicateParam(getparamDescTrans())){
            setAttributeInternal(PARAMID, value);
        }
        else {
            showFacesMsg("Duplicate Parameter!! ", " ", FacesMessage.SEVERITY_ERROR, null);
        } */
        setAttributeInternal(PARAMID, value);
    }

    /**
     * Gets the attribute value for PARAM_VAL using the alias name ParamVal.
     * @return the PARAM_VAL
     */
    public Number getParamVal() {
        return (Number) getAttributeInternal(PARAMVAL);
    }

    /**
     * Sets <code>value</code> as attribute value for PARAM_VAL using the alias name ParamVal.
     * @param value value to set the PARAM_VAL
     */
    public void setParamVal(Number value) {
        /*  if(!getAm().duplicateParam(getparamDescTrans())){
            setAttributeInternal(PARAMVAL, value);
        } */
       // System.out.println(value + " =============  "+getRowKey());
        setAttributeInternal(PARAMVAL, value);
    }

    /**
     * Gets the attribute value for SLOC_ID using the alias name SlocId.
     * @return the SLOC_ID
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for SLOC_ID using the alias name SlocId.
     * @param value value to set the SLOC_ID
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for USR_ID_CREATE using the alias name UsrIdCreate.
     * @return the USR_ID_CREATE
     */
    public Integer getUsrIdCreate() {
        return (Integer) getAttributeInternal(USRIDCREATE);
    }

    /**
     * Sets <code>value</code> as attribute value for USR_ID_CREATE using the alias name UsrIdCreate.
     * @param value value to set the USR_ID_CREATE
     */
    public void setUsrIdCreate(Integer value) {
        setAttributeInternal(USRIDCREATE, value);
    }

    /**
     * Gets the attribute value for USR_ID_CREATE_DT using the alias name UsrIdCreateDt.
     * @return the USR_ID_CREATE_DT
     */
    public Timestamp getUsrIdCreateDt() {
        return (Timestamp) getAttributeInternal(USRIDCREATEDT);
    }

    /**
     * Sets <code>value</code> as attribute value for USR_ID_CREATE_DT using the alias name UsrIdCreateDt.
     * @param value value to set the USR_ID_CREATE_DT
     */
    public void setUsrIdCreateDt(Timestamp value) {
        setAttributeInternal(USRIDCREATEDT, value);
    }

    /**
     * Gets the attribute value for USR_ID_MOD using the alias name UsrIdMod.
     * @return the USR_ID_MOD
     */
    public Integer getUsrIdMod() {
        return (Integer) getAttributeInternal(USRIDMOD);
    }

    /**
     * Sets <code>value</code> as attribute value for USR_ID_MOD using the alias name UsrIdMod.
     * @param value value to set the USR_ID_MOD
     */
    public void setUsrIdMod(Integer value) {
        setAttributeInternal(USRIDMOD, value);
    }

    /**
     * Gets the attribute value for USR_ID_MOD_DT using the alias name UsrIdModDt.
     * @return the USR_ID_MOD_DT
     */
    public Timestamp getUsrIdModDt() {
        return (Timestamp) getAttributeInternal(USRIDMODDT);
    }

    /**
     * Sets <code>value</code> as attribute value for USR_ID_MOD_DT using the alias name UsrIdModDt.
     * @param value value to set the USR_ID_MOD_DT
     */
    public void setUsrIdModDt(Timestamp value) {
        setAttributeInternal(USRIDMODDT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute paramDescTrans.
     * @return the paramDescTrans
     */
    public String getparamDescTrans() {        
        
         if (getParamId() != null) {             
            if (getAm().getLOVAllOverheadVO().getFilteredRows("ParamId", getParamId()).length > 0) {
                 return (getAm().getLOVAllOverheadVO().getFilteredRows("ParamId",
                                                                    getParamId()))[0].getAttribute("ParamDesc").toString();              
             }
         }

        return (String) getAttributeInternal(PARAMDESCTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute paramDescTrans.
     * @param value value to set the  paramDescTrans
     */
    public void setparamDescTrans(String value) {
        setAttributeInternal(PARAMDESCTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute RowKey.
     * @return the RowKey
     */
    public Object getRowKey() {
        return getKey();
        //return (Object) getAttributeInternal(ROWKEY);
    }

    /**
     * Gets the attribute value for OP_ID using the alias name OpId.
     * @return the OP_ID
     */
    public String getOpId() {
        return (String) getAttributeInternal(OPID);
    }

    /**
     * Sets <code>value</code> as attribute value for OP_ID using the alias name OpId.
     * @param value value to set the OP_ID
     */
    public void setOpId(String value) {
        setAttributeInternal(OPID, value);
    }

    /**
     * Gets the attribute value for OP_SR_NO using the alias name OpSrNo.
     * @return the OP_SR_NO
     */
    public Number getOpSrNo() {
        return (Number) getAttributeInternal(OPSRNO);
    }

    /**
     * Sets <code>value</code> as attribute value for OP_SR_NO using the alias name OpSrNo.
     * @param value value to set the OP_SR_NO
     */
    public void setOpSrNo(Number value) {
        setAttributeInternal(OPSRNO, value);
    }

    /**
     * Gets the attribute value for RT_ID using the alias name RtId.
     * @return the RT_ID
     */
    public String getRtId() {
        return (String) getAttributeInternal(RTID);
    }

    /**
     * Sets <code>value</code> as attribute value for RT_ID using the alias name RtId.
     * @param value value to set the RT_ID
     */
    public void setRtId(String value) {
        setAttributeInternal(RTID, value);
    }

    /**
     * Gets the attribute value for PARAM_SET_ID using the alias name ParamSetId.
     * @return the PARAM_SET_ID
     */
    public String getParamSetId() {
        return (String) getAttributeInternal(PARAMSETID);
    }

    /**
     * Sets <code>value</code> as attribute value for PARAM_SET_ID using the alias name ParamSetId.
     * @param value value to set the PARAM_SET_ID
     */
    public void setParamSetId(String value) {
        
            setAttributeInternal(PARAMSETID, value);        
    }

    /**
     * Gets the attribute value for PARAM_TYPE using the alias name ParamType.
     * @return the PARAM_TYPE
     */
    public Integer getParamType() {
        return (Integer) getAttributeInternal(PARAMTYPE);
    }

    /**
     * Sets <code>value</code> as attribute value for PARAM_TYPE using the alias name ParamType.
     * @param value value to set the PARAM_TYPE
     */
    public void setParamType(Integer value) {
        /*   if(!getAm().duplicateParam(getparamDescTrans())){
            setAttributeInternal(PARAMTYPE, value);
        } */
        setAttributeInternal(PARAMTYPE, value);
        
    }

    /**
     * Gets the attribute value for the calculated attribute SetDescTrans.
     * @return the SetDescTrans
     */
    public String getSetDescTrans() {
        if (getParamId() != null) {             
           if (getAm().getLOVAllOverheadVO().getFilteredRows("ParamSetId", getParamSetId()).length > 0) {
                return (getAm().getLOVAllOverheadVO().getFilteredRows("ParamSetId",
                                                                   getParamSetId()))[0].getAttribute("ParamSetDesc").toString();              
            }
        }
        return (String) getAttributeInternal(SETDESCTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute SetDescTrans.
     * @param value value to set the  SetDescTrans
     */
    public void setSetDescTrans(String value) {
        setAttributeInternal(SETDESCTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute RtRevNo.
     * @return the RtRevNo
     */
    public Number getRtRevNo() {
        
        if (getRtId() != null) {             
           if (getAm().getLOVAllRouteDesc().getFilteredRows("DocId", getRtId()).length > 0) {
                return (Number)(getAm().getLOVAllRouteDesc().getFilteredRows("DocId",
                                                                   getRtId()))[0].getAttribute("RtRevNo");              
            }
        }
        
        return (Number) getAttributeInternal(RTREVNO);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute RtRevNo.
     * @param value value to set the  RtRevNo
     */
    public void setRtRevNo(Number value) {
        setAttributeInternal(RTREVNO, value);
    }

    /**
     * Gets the attribute value for the calculated attribute paramBasis.
     * @return the paramBasis
     */
    public Integer getparamBasis() {
        if (getParamId() != null) {             
           if (getAm().getLOVAllOverheadVO().getFilteredRows("ParamId", getParamId()).length > 0) {
                return (Integer)(getAm().getLOVAllOverheadVO().getFilteredRows("ParamId",
                                                                   getParamId()))[0].getAttribute("ParamBasis");              
            }
        }

        return (Integer) getAttributeInternal(PARAMBASIS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute paramBasis.
     * @param value value to set the  paramBasis
     */
    public void setparamBasis(Integer value) {
        setAttributeInternal(PARAMBASIS, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LOVOverheadParamVO1.
     */
    public RowSet getLOVOverheadParamVO1() {
        return (RowSet) getAttributeInternal(LOVOVERHEADPARAMVO1);
    }


    /**
     * Gets the view accessor <code>RowSet</code> LOVDsAttVO.
     */
    public RowSet getLOVDsAttVO() {
        return (RowSet) getAttributeInternal(LOVDSATTVO);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LOVOverheadParamSetO.
     */
    public RowSet getLOVOverheadParamSetO() {
        return (RowSet) getAttributeInternal(LOVOVERHEADPARAMSETO);
    }


    /**
     * Gets the view accessor <code>RowSet</code> LOVOperationDescVO.
     */
    public RowSet getLOVOperationDescVO() {
        return (RowSet) getAttributeInternal(LOVOPERATIONDESCVO);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LOVAllRouteDescVO.
     */
    public RowSet getLOVAllRouteDescVO() {
        return (RowSet) getAttributeInternal(LOVALLROUTEDESCVO);
    }

    /**Method to resolve page flow scope parameter.*/
    public Object resolvEl(String data) {
        ADFContext adfCtx = ADFContext.getCurrent();
        ELContext elContext = adfCtx.getELContext();
        ValueExpression valueExp = adfCtx.getExpressionFactory().createValueExpression(elContext, data, Object.class);
        Object Message = valueExp.getValue(elContext);
        return Message;
    }

    /**----------------------------------------------------------------**/
    public void showFacesMsg(String msgHdr, String msgDtl, javax.faces.application.FacesMessage.Severity msgSeverity,
                             String msgMode) {

        FacesMessage msg = new FacesMessage(msgHdr);
        msg.setDetail(msgDtl);
        msg.setSeverity(msgSeverity);
        FacesContext.getCurrentInstance().addMessage(null, msg);

    }

    /** To getAM() */

    private MNFBillOfMaterialsAMImpl getAm() {
        return (MNFBillOfMaterialsAMImpl) getApplicationModule();
    }
}

