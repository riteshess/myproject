package mnfjobcardexecutionapp.model.services;

import adf.utils.bean.ADFBeanUtils;
import adf.utils.ebiz.EbizParams;

import adf.utils.model.ADFModelUtils;

import appCostCenterSevice.model.service.AppCostCenterServiceAMImpl;



import com.tangosol.coherence.component.net.management.Model;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.Set;

import javax.el.ELContext;
import javax.el.ValueExpression;

import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;



import mnfjobcardexecutionapp.model.services.common.MNFJobCardExecutionAM;
import mnfjobcardexecutionapp.model.views.LOVParameterSetVOImpl;
import mnfjobcardexecutionapp.model.views.LOVParametersVOImpl;
import mnfjobcardexecutionapp.model.views.LovStoreTrnasferVOImpl;
import mnfjobcardexecutionapp.model.views.MNFJeOpItmBinRqmtVwVOImpl;
import mnfjobcardexecutionapp.model.views.MNFJeOpItmLotRqmtVwVOImpl;
import mnfjobcardexecutionapp.model.views.MNFJeOpItmSrRqmtVwVOImpl;

import mnfjobcardexecutionapp.model.views.MnfJeOpItmBinVwVOImpl;
import mnfjobcardexecutionapp.model.views.MnfJeOpItmLotVwVOImpl;
import mnfjobcardexecutionapp.model.views.MnfJeOpItmSrVwVOImpl;

import mnfjobcardexecutionapp.model.views.MnfJeOpItmVOImpl;
import mnfjobcardexecutionapp.model.views.MnfJeVOImpl;

import oracle.adf.share.ADFContext;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.ApplicationModule;
import oracle.jbo.AttributeDef;
import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewObject;
import oracle.jbo.client.Configuration;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.TransactionEvent;
import oracle.jbo.server.ViewLinkImpl;

import oracle.jbo.server.ViewObjectImpl;

import org.apache.myfaces.trinidad.context.RequestContext;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Nov 24 11:55:42 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MNFJobCardExecutionAMImpl extends ApplicationModuleImpl implements MNFJobCardExecutionAM {
    private Object cldId;
    private static ADFLogger adfLog = (ADFLogger) ADFLogger.createADFLogger(MNFJobCardExecutionAMImpl.class);

    /**
     * This is the default constructor (do not remove).
     */
    public MNFJobCardExecutionAMImpl() {
    }

    public StringBuffer getCldId() {
        return new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());

    }

    public StringBuffer getDocId() {
        return new StringBuffer(resolvEl("#{pageFlowScope.globalDocId}").toString());
    }

    public Integer getSlocId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());

    }

    public StringBuffer getHoId() {
        return new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString());

    }

    public StringBuffer getOrgId() {
        return new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());

    }

    public Integer getUsrId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());

    }

    public void setGlobalParameters() {
        setGPmnfJe();
        setGPmnfJeParam();
        setGPmnfJeSrc();
        setGPmnfJeBarcode();
        setGPmnfJeOp();
        setGPmnfJeOpItmLot();
        setGPmnfJeOpItmBin();
        setGPmnfJeOpItmSr();
        setGPmnfJc();
        setGPmnfRc();
        setGPmnfParamSet();
        setGPmnfParam();
        setGPmnfOperations();
        setGPmnfJeSearch();
        setGPmnfTransientSearch();
        setGPmnfJeIdSearch();
        setGPmnfJeStatusSearch();
        setGPmnfJeModeSearch();
        setGPmnfJeRefDocIdSearch();
        setGPmnfJeUsrIdSearch();
        setGPmnfItmSearch();
        setItmSerializedGP();
        setGPForAllParameters();
        setGPForAllJobRouteCard();
        String flag = setAutoLotGenPageFlowParam();
        ADFContext.getCurrent().getPageFlowScope().put("AUTO_LOT_GEN", flag);
        
    }

    private String setAutoLotGenPageFlowParam() {
        return (String) callStoredFunction(Types.VARCHAR, "MM.MM_CHK_ORG_PRF(?,?,?,?)", new Object[] {
                                           getCldId().toString(), getSlocId(), getOrgId().toString(), "AUTO_LOT_GEN"
    });
    }

    public void setCreateTFParamOnView() {
        Integer check_cc=new Integer(0);
        String docId = "";
        if (ADFContext.getCurrent().getPageFlowScope().get("globalDocId") != null) {
            docId = ADFContext.getCurrent().getPageFlowScope().get("globalDocId").toString();
        } else {
            docId = this.getMnfJeSearchView1().getCurrentRow().getAttribute("DocId").toString();
        }
        ViewCriteria vc = this.getMnfJe1().getViewCriteria("MnfJeVOCriteria1");
        this.getMnfJe1().applyViewCriteria(vc);
        this.getMnfJe1().setNamedWhereClauseParam("BindDocId", docId);
        this.getMnfJe1().executeQuery();

        ViewObject itemVw = this.getDualItemNameSearchView1();
        itemVw.setNamedWhereClauseParam("BindDocId", docId);
        itemVw.executeQuery();

        ViewCriteria srcVC = this.getMnfJeSrc1().getViewCriteria("MnfJeSrcVOCriteria1");
        this.getMnfJeSrc1().applyViewCriteria(srcVC);
        this.getMnfJeSrc1().setNamedWhereClauseParam("BindDocId", docId);
        this.getMnfJeSrc1().executeQuery();
        this.getMnfJeSrc1().executeQuery();

        Row[] r = this.getMnfJeSrc2().getFilteredRows("DocId", docId);
        this.getMnfJeSrc2().executeQuery();
        if (r != null) {
            String srcDocId = r[0].getAttribute("DocIdSrc").toString();
            this.getLOVSourceOperations1().setNamedWhereClauseParam("BindDocId", srcDocId);
            this.getLOVSourceOperations1().executeQuery();
        }
        try
        {
            
            
            
        BigDecimal result=(BigDecimal) callStoredFunction(Types.NUMERIC, "APP.fn_is_cost_center_present(?,?,?,?,?)", new Object[] {
                                           getCldId().toString(),getSlocId(),getHoId().toString(),getOrgId().toString(),new Number(26006)});
        check_cc= result.intValue();
        
        }
        catch(Exception e) {
            e.printStackTrace();
            
        }
        System.out.println("Value of check_cc::"+check_cc);
        if(check_cc.compareTo(new Integer(0)) >=0){
        RequestContext.getCurrentInstance().getPageFlowScope().put("CHECK_CC",check_cc);
        }
    
    }

    public Object resolvEl(String data) {
        ADFContext adfCtx = ADFContext.getCurrent();
        ELContext elContext = adfCtx.getELContext();
        ValueExpression valueExp = adfCtx.getExpressionFactory().createValueExpression(elContext, data, Object.class);
        Object Message = valueExp.getValue(elContext);
        return Message;
    }

    private void setGPmnfJe() {
        ViewObject mnfJeVO = this.getMnfJe1();
        mnfJeVO.setNamedWhereClauseParam("BindCldId", getCldId().toString());
        mnfJeVO.setNamedWhereClauseParam("BindHoId", getHoId().toString());
        mnfJeVO.setNamedWhereClauseParam("BindOrgId", getOrgId().toString());
        mnfJeVO.setNamedWhereClauseParam("BindSlocId", getSlocId());
        mnfJeVO.executeQuery();
    }

    private void setGPmnfJeParam() {
        ViewObject mnfJeParamVO = this.getMnfJeParam1();
        mnfJeParamVO.setNamedWhereClauseParam("BindCldId", getCldId().toString());
        mnfJeParamVO.setNamedWhereClauseParam("BindHoId", getHoId().toString());
        mnfJeParamVO.setNamedWhereClauseParam("BindOrgId", getOrgId().toString());
        mnfJeParamVO.setNamedWhereClauseParam("BindSlocId", getSlocId());
        mnfJeParamVO.executeQuery();
    }

    private void setGPmnfJeSrc() {
        ViewObject mnfJeVO = this.getMnfJeSrc1();
        mnfJeVO.setNamedWhereClauseParam("BindCldId", getCldId().toString());
        mnfJeVO.setNamedWhereClauseParam("BindHoId", getHoId().toString());
        mnfJeVO.setNamedWhereClauseParam("BindOrgId", getOrgId().toString());
        mnfJeVO.setNamedWhereClauseParam("BindSlocId", getSlocId());
        mnfJeVO.executeQuery();
    }

    private void setGPmnfJeBarcode() {
        ViewObject mnfJeBarcodeVO = this.getMnfJeBarcode1();
        mnfJeBarcodeVO.setNamedWhereClauseParam("BindCldId", getCldId().toString());
        mnfJeBarcodeVO.setNamedWhereClauseParam("BindHoId", getHoId().toString());
        mnfJeBarcodeVO.setNamedWhereClauseParam("BindOrgId", getOrgId().toString());
        mnfJeBarcodeVO.setNamedWhereClauseParam("BindSlocId", getSlocId());
        mnfJeBarcodeVO.executeQuery();
    }

    private void setGPmnfJeOp() {
        ViewObject mnfJeOpVO = this.getMnfJeOp1();
        mnfJeOpVO.setNamedWhereClauseParam("BindCldId", getCldId().toString());
        mnfJeOpVO.setNamedWhereClauseParam("BindHoId", getHoId().toString());
        mnfJeOpVO.setNamedWhereClauseParam("BindOrgId", getOrgId().toString());
        mnfJeOpVO.setNamedWhereClauseParam("BindSlocId", getSlocId());
        mnfJeOpVO.executeQuery();
    }

    private void setGPmnfJeOpItm() {
        ViewObject mnfJeOpItmVO = this.getMnfJeOpItm1();
        mnfJeOpItmVO.setNamedWhereClauseParam("BindCldId", getCldId().toString());
        mnfJeOpItmVO.setNamedWhereClauseParam("BindHoId", getHoId().toString());
        mnfJeOpItmVO.setNamedWhereClauseParam("BindOrgId", getOrgId().toString());
        mnfJeOpItmVO.setNamedWhereClauseParam("BindSlocId", getSlocId());
        mnfJeOpItmVO.executeQuery();
    }

    private void setGPmnfJeOpItmLot() {
        //ViewObject mnfJeOpItmLotVO = this.getMnfJeOpItmLot1();
        ViewObject mnfJeOpItmLotVO = this.getMnfJeOpItmLott1();
        mnfJeOpItmLotVO.setNamedWhereClauseParam("BindCldId", getCldId().toString());
        mnfJeOpItmLotVO.setNamedWhereClauseParam("BindHoId", getHoId().toString());
        mnfJeOpItmLotVO.setNamedWhereClauseParam("BindOrgId", getOrgId().toString());
        mnfJeOpItmLotVO.setNamedWhereClauseParam("BindSlocId", getSlocId());
        mnfJeOpItmLotVO.executeQuery();
    }

    private void setGPmnfJeOpItmBin() {
        ViewObject mnfJeOpItmBinVO = this.getMnfJeOpItmBin1();
        mnfJeOpItmBinVO.setNamedWhereClauseParam("BindCldId", getCldId().toString());
        mnfJeOpItmBinVO.setNamedWhereClauseParam("BindHoId", getHoId().toString());
        mnfJeOpItmBinVO.setNamedWhereClauseParam("BindOrgId", getOrgId().toString());
        mnfJeOpItmBinVO.setNamedWhereClauseParam("BindSlocId", getSlocId());
        mnfJeOpItmBinVO.executeQuery();
    }

    private void setGPmnfJeOpItmSr() {
        ViewObject mnfJeOpItmSrVO = this.getMnfJeOpItmSr1();
        mnfJeOpItmSrVO.setNamedWhereClauseParam("BindCldId", getCldId().toString());
        mnfJeOpItmSrVO.setNamedWhereClauseParam("BindHoId", getHoId().toString());
        mnfJeOpItmSrVO.setNamedWhereClauseParam("BindOrgId", getOrgId().toString());
        mnfJeOpItmSrVO.setNamedWhereClauseParam("BindSlocId", getSlocId());
        mnfJeOpItmSrVO.executeQuery();
    }

    private void setGPmnfJc() {
        ViewObject mnfJcVO = this.getLOVMnfJc1();
        mnfJcVO.setNamedWhereClauseParam("BindCldId", getCldId().toString());
        mnfJcVO.setNamedWhereClauseParam("BindHoId", getHoId().toString());
        mnfJcVO.setNamedWhereClauseParam("BindOrgId", getOrgId().toString());
        mnfJcVO.setNamedWhereClauseParam("BindSlocId", getSlocId());
        mnfJcVO.executeQuery();
    }

    private void setGPmnfRc() {
        ViewObject mnfRcVO = this.getLOVMnfRc1();
        mnfRcVO.setNamedWhereClauseParam("BindCldId", getCldId().toString());
        mnfRcVO.setNamedWhereClauseParam("BindHoId", getHoId().toString());
        mnfRcVO.setNamedWhereClauseParam("BindOrgId", getOrgId().toString());
        mnfRcVO.setNamedWhereClauseParam("BindSlocId", getSlocId());
        mnfRcVO.executeQuery();
    }

    private void setGPForAllJobRouteCard() {
        ViewObject mnfAllJcVO = this.getLOVAllJobCard1();
        mnfAllJcVO.setNamedWhereClauseParam("BindCldId", getCldId().toString());
        mnfAllJcVO.setNamedWhereClauseParam("BindHoId", getHoId().toString());
        mnfAllJcVO.setNamedWhereClauseParam("BindOrgId", getOrgId().toString());
        mnfAllJcVO.setNamedWhereClauseParam("BindSlocId", getSlocId());
        mnfAllJcVO.executeQuery();

        ViewObject mnfAllRcVO = this.getLOVAllRouteCard1();
        mnfAllRcVO.setNamedWhereClauseParam("BindCldId", getCldId().toString());
        mnfAllRcVO.setNamedWhereClauseParam("BindHoId", getHoId().toString());
        mnfAllRcVO.setNamedWhereClauseParam("BindOrgId", getOrgId().toString());
        mnfAllRcVO.setNamedWhereClauseParam("BindSlocId", getSlocId());
        mnfAllRcVO.executeQuery();
    }

    private void setGPmnfParamSet() {
        ViewObject mnfParamSetVO = this.getLOVParameterSet1();
        mnfParamSetVO.setNamedWhereClauseParam("BindCldId", getCldId().toString());
        mnfParamSetVO.setNamedWhereClauseParam("BindHoId", getHoId().toString());
        mnfParamSetVO.setNamedWhereClauseParam("BindSlocId", getSlocId());
        mnfParamSetVO.executeQuery();
    }

    private void setGPmnfParam() {
        ViewObject mnfParamVO = this.getLOVParameters1();
        mnfParamVO.setNamedWhereClauseParam("BindCldId", getCldId().toString());
        mnfParamVO.setNamedWhereClauseParam("BindHoId", getHoId().toString());
        mnfParamVO.setNamedWhereClauseParam("BindSlocId", getSlocId());
        mnfParamVO.executeQuery();
    }

    private void setGPmnfOperations() {
        ViewObject mnfOprVO = this.getLOVSourceOperations1();
        mnfOprVO.setNamedWhereClauseParam("BindCldId", getCldId().toString());
        mnfOprVO.setNamedWhereClauseParam("BindHoId", getHoId().toString());
        mnfOprVO.setNamedWhereClauseParam("BindOrgId", getOrgId().toString());
        mnfOprVO.setNamedWhereClauseParam("BindSlocId", getSlocId());
        mnfOprVO.executeQuery();
    }

    private void setGPmnfTransientSearch() {
        ViewObject mnfSearchVO = this.getTransientJeSearch1();
        mnfSearchVO.setNamedWhereClauseParam("BindCldId", getCldId().toString());
        mnfSearchVO.setNamedWhereClauseParam("BindHoId", getHoId().toString());
        mnfSearchVO.setNamedWhereClauseParam("BindOrgId", getOrgId().toString());
        mnfSearchVO.setNamedWhereClauseParam("BindSlocId", getSlocId());
        mnfSearchVO.executeQuery();
    }

    private void setGPmnfJeSearch() {
        ViewObject mnfSearchVO = this.getMnfJeSearchView1();
        mnfSearchVO.setNamedWhereClauseParam("BindCldId", getCldId().toString());
        mnfSearchVO.setNamedWhereClauseParam("BindHoId", "-1");
        mnfSearchVO.setNamedWhereClauseParam("BindOrgId", getOrgId().toString());
        mnfSearchVO.setNamedWhereClauseParam("BindSlocId", getSlocId());
        mnfSearchVO.executeQuery();
    }

    private void setGPmnfJeIdSearch() {
        ViewObject mnfJeIdSearchVO = this.getSearchJeId1();
        mnfJeIdSearchVO.setNamedWhereClauseParam("BindCldId", getCldId().toString());
        mnfJeIdSearchVO.setNamedWhereClauseParam("BindHoId", getHoId().toString());
        mnfJeIdSearchVO.setNamedWhereClauseParam("BindOrgId", getOrgId().toString());
        mnfJeIdSearchVO.setNamedWhereClauseParam("BindSlocId", getSlocId());
        mnfJeIdSearchVO.executeQuery();
    }

    private void setGPmnfJeStatusSearch() {
        ViewObject mnfJeStatusSearchVO = this.getSearchJeStatus1();
        mnfJeStatusSearchVO.setNamedWhereClauseParam("BindCldId", getCldId().toString());
        mnfJeStatusSearchVO.setNamedWhereClauseParam("BindHoId", getHoId().toString());
        mnfJeStatusSearchVO.setNamedWhereClauseParam("BindOrgId", getOrgId().toString());
        mnfJeStatusSearchVO.setNamedWhereClauseParam("BindSlocId", getSlocId());
        mnfJeStatusSearchVO.executeQuery();
    }

    private void setGPmnfJeModeSearch() {
        ViewObject mnfJeModeSearchVO = this.getSearchJeMode1();
        mnfJeModeSearchVO.setNamedWhereClauseParam("BindCldId", getCldId().toString());
        mnfJeModeSearchVO.setNamedWhereClauseParam("BindHoId", getHoId().toString());
        mnfJeModeSearchVO.setNamedWhereClauseParam("BindOrgId", getOrgId().toString());
        mnfJeModeSearchVO.setNamedWhereClauseParam("BindSlocId", getSlocId());
        mnfJeModeSearchVO.executeQuery();
    }

    private void setGPmnfJeRefDocIdSearch() {
        ViewObject mnfJeRefIdSearchVO = this.getSearchRefDocId1();
        mnfJeRefIdSearchVO.setNamedWhereClauseParam("BindCldId", getCldId().toString());
        mnfJeRefIdSearchVO.setNamedWhereClauseParam("BindHoId", getHoId().toString());
        mnfJeRefIdSearchVO.setNamedWhereClauseParam("BindOrgId", getOrgId().toString());
        mnfJeRefIdSearchVO.setNamedWhereClauseParam("BindSlocId", getSlocId());
        mnfJeRefIdSearchVO.executeQuery();
    }

    private void setGPmnfJeUsrIdSearch() {
        ViewObject mnfJeUsrSearchVO = this.getSearchUsrId1();
        mnfJeUsrSearchVO.setNamedWhereClauseParam("BindCldId", getCldId().toString());
        mnfJeUsrSearchVO.setNamedWhereClauseParam("BindHoId", getHoId().toString());
        mnfJeUsrSearchVO.setNamedWhereClauseParam("BindOrgId", getOrgId().toString());
        mnfJeUsrSearchVO.setNamedWhereClauseParam("BindSlocId", getSlocId());
        mnfJeUsrSearchVO.executeQuery();
    }

    private void setGPmnfItmSearch() {
        ViewObject mnfJeItmSearchVO = this.getDualItemNameSearchView1();
        mnfJeItmSearchVO.setNamedWhereClauseParam("BindCldId", getCldId().toString());
        mnfJeItmSearchVO.setNamedWhereClauseParam("BindHoId", getHoId().toString());
        mnfJeItmSearchVO.setNamedWhereClauseParam("BindOrgId", getOrgId().toString());
        mnfJeItmSearchVO.setNamedWhereClauseParam("BindSlocId", getSlocId());
        mnfJeItmSearchVO.executeQuery();
    }

    private void setItmSerializedGP() {
        ViewObject mnfJeItmSerializedVO = this.getChkOutputItemSerialized1();
        mnfJeItmSerializedVO.setNamedWhereClauseParam("BindCldId", getCldId().toString());
        mnfJeItmSerializedVO.setNamedWhereClauseParam("BindHoId", getHoId().toString());
        mnfJeItmSerializedVO.setNamedWhereClauseParam("BindSlocId", getSlocId());
        mnfJeItmSerializedVO.executeQuery();
    }

    private void setGPForAllParameters() {
        ViewObject paramSetVO = this.getLOVAllParameterSetForViewMode1();
        paramSetVO.setNamedWhereClauseParam("BindCldId", getCldId().toString());
        paramSetVO.setNamedWhereClauseParam("BindHoId", getHoId().toString());
        paramSetVO.setNamedWhereClauseParam("BindSlocId", getSlocId());
        paramSetVO.executeQuery();

        ViewObject paramVO = this.getLOVAllParameterForViewMode1();
        paramVO.setNamedWhereClauseParam("BindCldId", getCldId().toString());
        paramVO.setNamedWhereClauseParam("BindHoId", getHoId().toString());
        paramVO.setNamedWhereClauseParam("BindSlocId", getSlocId());
        paramVO.executeQuery();
    }

    /**
     * Container's getter for MnfJe1.
     * @return MnfJe1
     */
    public MnfJeVOImpl getMnfJe1() {
        return (MnfJeVOImpl) findViewObject("MnfJe1");
    }

    /**
     * Container's getter for MnfJeSrc1.
     * @return MnfJeSrc1
     */
    public ViewObjectImpl getMnfJeSrc1() {
        return (ViewObjectImpl) findViewObject("MnfJeSrc1");
    }

    /**
     * Container's getter for MnfJeToMnfJeSrcVL1.
     * @return MnfJeToMnfJeSrcVL1
     */
    public ViewLinkImpl getMnfJeToMnfJeSrcVL1() {
        return (ViewLinkImpl) findViewLink("MnfJeToMnfJeSrcVL1");
    }

    /**
     * Container's getter for LOVMnfRc1.
     * @return LOVMnfRc1
     */
    public ViewObjectImpl getLOVMnfRc1() {
        return (ViewObjectImpl) findViewObject("LOVMnfRc1");
    }

    /**
     * Container's getter for LOVMnfJc1.
     * @return LOVMnfJc1
     */
    public ViewObjectImpl getLOVMnfJc1() {
        return (ViewObjectImpl) findViewObject("LOVMnfJc1");
    }


    /**
     * Container's getter for MnfJeParam1.
     * @return MnfJeParam1
     */
    public ViewObjectImpl getMnfJeParam1() {
        return (ViewObjectImpl) findViewObject("MnfJeParam1");
    }

    /**
     * Container's getter for MnfJeToMnfJeParamVL1.
     * @return MnfJeToMnfJeParamVL1
     */
    public ViewLinkImpl getMnfJeToMnfJeParamVL1() {
        return (ViewLinkImpl) findViewLink("MnfJeToMnfJeParamVL1");
    }

    /**
     * Container's getter for LOVParameterSet1.
     * @return LOVParameterSet1
     */
    public LOVParameterSetVOImpl getLOVParameterSet1() {
        return (LOVParameterSetVOImpl) findViewObject("LOVParameterSet1");
    }

    /**
     * Container's getter for LOVParameters1.
     * @return LOVParameters1
     */
    public LOVParametersVOImpl getLOVParameters1() {
        return (LOVParametersVOImpl) findViewObject("LOVParameters1");
    }

    /**
     * Container's getter for LOVSourceOperations1.
     * @return LOVSourceOperations1
     */
    public ViewObjectImpl getLOVSourceOperations1() {
        return (ViewObjectImpl) findViewObject("LOVSourceOperations1");
    }

    public void jeSrcInsertion(Integer basis, String docId) {
        adfLog.info("jeSrc Insertion function called ");
        ViewObject jeSrc = this.getMnfJeSrc1();
//        RowSetIterator createRowSetIterator = jeSrc.createRowSetIterator(null);
//        while (createRowSetIterator.hasNext()) {
//            Row r = createRowSetIterator.next();
//            r.remove();
//        }
        Row srcRow = jeSrc.createRow();
        String docSrcDt = "";
        if (basis == 109) {
            String doc = this.getLOVMnfJc1().getFilteredRows("JcId", docId)[0].getAttribute("DocId").toString();
            srcRow.setAttribute("DocTypeSrc", basis);
            docSrcDt = this.getLOVMnfJc1().getFilteredRows("DocId", doc)[0].getAttribute("DocDt").toString();
            srcRow.setAttribute("DocDtSrc", docSrcDt);
            srcRow.setAttribute("DocIdSrc", doc);
            jeSrc.insertRow(srcRow);
            //jeSrc.setCurrentRow(srcRow);
        } else {
            String doc = this.getLOVMnfRc1().getFilteredRows("RcId", docId)[0].getAttribute("DocId").toString();
            srcRow.setAttribute("DocTypeSrc", basis);
            srcRow.setAttribute("DocIdSrc", doc);
            docSrcDt = this.getLOVMnfRc1().getFilteredRows("DocId", doc)[0].getAttribute("DocDt").toString();
            srcRow.setAttribute("DocDtSrc", docSrcDt);
            jeSrc.insertRow(srcRow);
            //jeSrc.setCurrentRow(srcRow);
        }
    }

    @SuppressWarnings("oracle.jdeveloper.java.semantic-warning")
    public Integer generateBarcode(Integer itmQty) {
        Object fnRetValue = null;
        String docId = "";
        Integer UserId = 0;
        try {
            Row jeRow = this.getMnfJe1().getCurrentRow();
            if (jeRow != null && jeRow.getAttribute("DocId") != null) {
                docId = jeRow.getAttribute("DocId").toString();
                UserId = Integer.parseInt(jeRow.getAttribute("UsrIdCreate").toString());
                Date UserDt = new Date(Date.getCurrentDate());
                fnRetValue = callStoredFunction(Types.NUMERIC, "MNF.FN_MNF_INS_BARCODE_JC_RC(?,?,?,?,?,?,?,?,?)", new Object[] {
                                                getCldId().toString(), getSlocId(), getHoId().toString(),
                                                getOrgId().toString(), docId, UserId, UserDt, "JE", itmQty
                });
            }
            if (fnRetValue != null) {
                ViewObjectImpl impl = this.getMnfJe1();
                Row currentRow = impl.getCurrentRow();
                currentRow.setAttribute("QtyBrct", itmQty);
                this.getMnfJeBarcode1().executeQuery();
                this.getDBTransaction().commit();
                return Integer.parseInt(fnRetValue.toString());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return 0;
    }

    /********************    STORED Function    *************************************/

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    System.out.println("Bind Variables " + (z + 1) + " : " + bindVars[z] + "\n");
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.executeUpdate();
            return st.getObject(1);
        } catch (SQLException e) {
            e.printStackTrace();
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    /**
     * Container's getter for MnfJeBarcode1.
     * @return MnfJeBarcode1
     */
    public ViewObjectImpl getMnfJeBarcode1() {
        return (ViewObjectImpl) findViewObject("MnfJeBarcode1");
    }

    /**
     * Container's getter for MnfJeToMnfJeBarcodeVL1.
     * @return MnfJeToMnfJeBarcodeVL1
     */
    public ViewLinkImpl getMnfJeToMnfJeBarcodeVL1() {
        return (ViewLinkImpl) findViewLink("MnfJeToMnfJeBarcodeVL1");
    }

    /*------------------Update in Mnf$JE for Approved-------------------*/
    public void updateWfStatus() {
        String wf_mode = resolvEl("#{pageFlowScope.WorkFlowReturnValue}").toString();
        //WorkFlow Mode : V - revert, I - Initialize, F - Forwarded, A - Approved, R - Reject
        ViewObjectImpl impl = this.getMnfJe1();
        Row r = impl.getCurrentRow();
        String DocTxn = r.getAttribute("DocId").toString();
        if ("F".equalsIgnoreCase(wf_mode)) {
            r.setAttribute("JeMode", 46);
        } else if ("A".equalsIgnoreCase(wf_mode)) {
            r.setAttribute("JeStat", 73);
            r.setAttribute("JeMode", 43);
        }
        getDBTransaction().commit();
        ViewCriteria Fr = impl.getViewCriteria("MnfJeVOCriteria1");
        impl.applyViewCriteria(Fr);
        impl.setNamedWhereClauseParam("BindDocId", DocTxn);
        impl.executeQuery();
    }

    /**
     * Method used to get the Work flow id for a document.
     * **/

    public String getWfId() {
        try {
            Object val = callStoredFunction(Types.VARCHAR, "APP.WF_GET_ID(?,?,?,?,?)", new Object[] {
                                            getSlocId(), getCldId().toString(), getOrgId().toString(), 26006, 0
            });
            if (val != null) {
                return val.toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
            StringBuilder saveMsg = new StringBuilder("<html><body><p><b>Error in getting Work Flow Details. </b></p>");
            saveMsg.append("</body></html>");
            showFacesMsg(saveMsg.toString(), null, FacesMessage.SEVERITY_ERROR, null);
        }
        return "0";
    }

    public void showFacesMsg(String msgHdr, String msgDtl, javax.faces.application.FacesMessage.Severity msgSeverity,
                             String msgMode) {
        FacesMessage msg = new FacesMessage(msgHdr);
        msg.setDetail(msgDtl);
        msg.setSeverity(msgSeverity);
        FacesContext.getCurrentInstance().addMessage(null, msg);

    }

    /**
     * Method used to call work flow function.
     * calls db functions APP.WF_GET_USR_LEVEL & APP.WF_INS_TXN
     * **/

    public String callWorkFlow() {
        String wfId = getWfId();
        String doc = "";
        String srcDoc = "";
        Timestamp dt = new Timestamp();
        if (this.getMnfJe1().getCurrentRow().getAttribute("DocId") != null) {
            doc = this.getMnfJe1().getCurrentRow().getAttribute("DocId").toString();
            srcDoc = this.getMnfJe1().getCurrentRow().getAttribute("DocId").toString();
            dt = (Timestamp) this.getMnfJe1().getCurrentRow().getAttribute("UsrIdCreateDt");
        }
        Object level;
        try {
            level = callStoredFunction(Types.NUMERIC, "APP.WF_GET_USR_LEVEL(?,?,?,?,?,?,?)", new Object[] {
                                       getSlocId(), getCldId().toString(), getOrgId().toString(), getUsrId(), wfId,
                                       26006, 0
            });
            callStoredFunction(Types.NUMERIC, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                               getSlocId(), getCldId().toString(), getOrgId().toString(), 26006, 0, wfId, doc,
                               getUsrId(), getUsrId(), level, level, "I", "A", 0, "S"
            });
        } catch (Exception ex) {
            showFacesMsg("Hi", null, FacesMessage.SEVERITY_ERROR, null);
            ex.printStackTrace();
        }
        return null;
    }

    public void resetActionListener() {
        ViewObject mnfSearchVO = this.getMnfJeSearchView1();
        mnfSearchVO.setNamedWhereClauseParam("BindCldId", getCldId().toString());
        mnfSearchVO.setNamedWhereClauseParam("BindHoId", "-1");
        mnfSearchVO.setNamedWhereClauseParam("BindOrgId", getOrgId().toString());
        mnfSearchVO.setNamedWhereClauseParam("BindSlocId", getSlocId());
        mnfSearchVO.executeQuery();

        Row transSearchRow = this.getTransientJeSearch1().getCurrentRow();
        transSearchRow.setAttribute("transJeId", null);
        transSearchRow.setAttribute("transRefDispDocId", null);
        transSearchRow.setAttribute("transUsrName", null);
        transSearchRow.setAttribute("transStatus", null);
        transSearchRow.setAttribute("transMode", null);
        transSearchRow.setAttribute("transCreatedFrom", null);
        transSearchRow.setAttribute("transCreatedTo", null);
        this.getTransientJeSearch1().executeQuery();
    }

    public void searchActionListener() {
        Row transSearchRow = this.getTransientJeSearch1().getCurrentRow();
        ViewObject searchVO = this.getMnfJeSearchView1();
        searchVO.setNamedWhereClauseParam("BindCldId", getCldId().toString());
        searchVO.setNamedWhereClauseParam("BindHoId", getHoId().toString());
        searchVO.setNamedWhereClauseParam("BindOrgId", getOrgId().toString());
        searchVO.setNamedWhereClauseParam("BindSlocId", getSlocId());
        searchVO.setNamedWhereClauseParam("BindFrmDt",
                                          (oracle.jbo.domain.Timestamp) (transSearchRow.getAttribute("transCreatedFrom")));
        searchVO.setNamedWhereClauseParam("BindToDt",
                                          (oracle.jbo.domain.Timestamp) (transSearchRow.getAttribute("transCreatedTo")));
        searchVO.setNamedWhereClauseParam("BindRefDocId", transSearchRow.getAttribute("RefDocId"));
        searchVO.setNamedWhereClauseParam("BindModeId",
                                          transSearchRow.getAttribute("transMode") != null ?
                                          transSearchRow.getAttribute("transMode").toString() : "");
        searchVO.setNamedWhereClauseParam("BindDocId", transSearchRow.getAttribute("JeId"));
        searchVO.setNamedWhereClauseParam("BindStatusId",
                                          transSearchRow.getAttribute("transStatus") != null ?
                                          transSearchRow.getAttribute("transStatus").toString() : "");
        searchVO.setNamedWhereClauseParam("BindUsrId", transSearchRow.getAttribute("UsrId"));
        searchVO.executeQuery();
    }

    /**
     * Container's getter for TransientJeSearch1.
     * @return TransientJeSearch1
     */
    public ViewObjectImpl getTransientJeSearch1() {
        return (ViewObjectImpl) findViewObject("TransientJeSearch1");
    }

    /**
     * Container's getter for MnfJeSearchView1.
     * @return MnfJeSearchView1
     */
    public ViewObjectImpl getMnfJeSearchView1() {
        return (ViewObjectImpl) findViewObject("MnfJeSearchView1");
    }

    /**
     * Container's getter for SearchJeId1.
     * @return SearchJeId1
     */
    public ViewObjectImpl getSearchJeId1() {
        return (ViewObjectImpl) findViewObject("SearchJeId1");
    }

    /**
     * Container's getter for SearchJeStatus1.
     * @return SearchJeStatus1
     */
    public ViewObjectImpl getSearchJeStatus1() {
        return (ViewObjectImpl) findViewObject("SearchJeStatus1");
    }

    /**
     * Container's getter for SearchJeMode1.
     * @return SearchJeMode1
     */
    public ViewObjectImpl getSearchJeMode1() {
        return (ViewObjectImpl) findViewObject("SearchJeMode1");
    }

    /**
     * Container's getter for SearchRefDocId1.
     * @return SearchRefDocId1
     */
    public ViewObjectImpl getSearchRefDocId1() {
        return (ViewObjectImpl) findViewObject("SearchRefDocId1");
    }

    /**
     * Container's getter for SearchUsrId1.
     * @return SearchUsrId1
     */
    public ViewObjectImpl getSearchUsrId1() {
        return (ViewObjectImpl) findViewObject("SearchUsrId1");
    }


    public void insertOpItm() {
        String a = "";
        String srcDocId = "";
        Integer srcDoctype = 0;
        String opid = "";
        String docId = this.getMnfJe1().getCurrentRow().getAttribute("DocId").toString();

        ViewObject itemVw = this.getDualItemNameSearchView1();
        itemVw.setNamedWhereClauseParam("BindDocId", docId);
        itemVw.executeQuery();

        Row[] r = this.getMnfJeSrc2().getFilteredRows("DocId", docId);
        if (r != null) {
            srcDocId = r[0].getAttribute("DocIdSrc").toString();
            srcDoctype = Integer.parseInt(r[0].getAttribute("DocTypeSrc").toString());
        }
        try {
            String op_id = null;
            Integer opSrNo = null;
            Integer DocTypeSrc = srcDoctype;
            String DocIdSrc = srcDocId;
            this.getLOVSourceOperations1().setNamedWhereClauseParam("BindDocId", DocIdSrc);
            this.getLOVSourceOperations1().executeQuery();
            String P_DOC_ID = (String) this.getMnfJe1().getCurrentRow().getAttribute("DocId");
            Timestamp P_DOC_DT = (Timestamp) this.getMnfJe1().getCurrentRow().getAttribute("DocDt");
            Integer P_USR_ID = (Integer) this.getMnfJe1().getCurrentRow().getAttribute("UsrIdCreate");
            Timestamp P_USR_DT = (Timestamp) this.getMnfJe1().getCurrentRow().getAttribute("UsrIdCreateDt");
            Integer empId = (Integer) this.getMnfJe1().getCurrentRow().getAttribute("transEmpId");
            String shiftId = (String) this.getMnfJe1().getCurrentRow().getAttribute("transShiftId");
            op_id = (String) this.getMnfJe1().getCurrentRow().getAttribute("transOpId");
            opSrNo = (Integer) this.getMnfJe1().getCurrentRow().getAttribute("transOpSrNo");
            oracle.jbo.domain.Number outputQty =
                (oracle.jbo.domain.Number) this.getMnfJe1().getCurrentRow().getAttribute("OutptItmQty");
            Object actqtyval = this.getMnfJe1().getCurrentRow().getAttribute("ActOutptItmQty");
            if(DocTypeSrc == 109){
            a = callStoredFunction(Types.NUMERIC, "MNF.FN_MNF_INS_SRC_TO_JE(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                   getCldId().toString(), getSlocId(), getHoId().toString(), getOrgId().toString(),
                                   DocTypeSrc, DocIdSrc, P_DOC_ID, P_DOC_DT, P_USR_ID, P_USR_DT, shiftId, empId,
                                   outputQty, actqtyval, op_id, opSrNo
            }).toString();
            }else{
                a = callStoredFunction(Types.NUMERIC, "MNF.FN_MNF_INS_SRC_TO_JE(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                       getCldId().toString(), getSlocId(), getHoId().toString(), getOrgId().toString(),
                                       DocTypeSrc, DocIdSrc, P_DOC_ID, P_DOC_DT, P_USR_ID, P_USR_DT, shiftId, empId,
                                       outputQty, actqtyval, null, null
                }).toString();
            }
            this.getMnfJeOp1().executeQuery();
            System.out.println("Je Op : "+this.getMnfJeOp1().getRowCount());
            this.getMnfJeOpItm1().executeQuery();
            System.out.println("Je Itm : "+this.getMnfJeOpItm1().getRowCount());
            this.getDBTransaction().postChanges();
//            int count = 0;
//            RowSetIterator itr = this.getMnfJeOpItm1().createRowSetIterator(null);
//            while(itr.hasNext()){
//                Row next = itr.next();
//                if(Integer.parseInt(next.getAttribute("ItmType").toString())!=67){
//                    count++;
//                }
//            }
//            itr.closeRowSetIterator();
//            System.out.println("Number of Count : "+count);
        } catch (Exception e) {
            e.printStackTrace();
            StringBuilder saveMsg =
                new StringBuilder("<html><body><p><b>Error in getting Operation Items Details. </b></p>");
            saveMsg.append("</body></html>");
            showFacesMsg(saveMsg.toString(), null, FacesMessage.SEVERITY_ERROR, null);
        }
    }

    /**
     * Container's getter for MnfJeOp1.
     * @return MnfJeOp1
     */
    public ViewObjectImpl getMnfJeOp1() {
        return (ViewObjectImpl) findViewObject("MnfJeOp1");
    }

    /**
     * Container's getter for MnfJeToMnfJeOpVL1.
     * @return MnfJeToMnfJeOpVL1
     */
    public ViewLinkImpl getMnfJeToMnfJeOpVL1() {
        return (ViewLinkImpl) findViewLink("MnfJeToMnfJeOpVL1");
    }


    /**
     * Container's getter for LOVItemName1.
     * @return LOVItemName1
     */
    public ViewObjectImpl getLOVItemName1() {
        return (ViewObjectImpl) findViewObject("LOVItemName1");
    }


    /**
     * Container's getter for LOVItemType1.
     * @return LOVItemType1
     */
    public ViewObjectImpl getLOVItemType1() {
        return (ViewObjectImpl) findViewObject("LOVItemType1");
    }

    public Integer AutoIssueItem() {
        Object retVal;
        try {
            ViewObject mnfRc = this.getMnfJe1();
            Row jeRow = mnfRc.getCurrentRow();
            ViewObject pickItm = this.getMnfJeOpItm1();
            Row itmRow = pickItm.getCurrentRow();
            String flag=(String)itmRow.getAttribute("RwrkFlg");
            String reworkFlag=flag.equals("Y")?"R":"S";
            String binChkFlg = resolvEl("#{pageFlowScope.GLBL_ORG_BIN_CHK}").toString();

            retVal = callStoredFunction(Types.NUMERIC, "MNF.FN_MNF_JE_ISSU_AUTO(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                        getCldId().toString(), getSlocId(), getHoId().toString(), getOrgId().toString(),
                                        jeRow.getAttribute("WhId"), itmRow.getAttribute("ItmId"),
                                        itmRow.getAttribute("ActItmQty"), itmRow.getAttribute("transItmPckOrder"),
                                        itmRow.getAttribute("transItmSerializedFlg"), binChkFlg,
                                        itmRow.getAttribute("DocId"), itmRow.getAttribute("PdoId"),
                                        itmRow.getAttribute("OpId"), itmRow.getAttribute("OpSrNo"),
                                        itmRow.getAttribute("ItmType"), itmRow.getAttribute("ItmUom"),
                                        itmRow.getAttribute("ItmUom"), 1,reworkFlag
            });
            if (retVal != null) {
                return Integer.parseInt(retVal.toString());
            }
        } catch (Exception e) {
            StringBuilder saveMsg = new StringBuilder("<html><body><p><b>Error in Item Issue function. </b></p>");
            saveMsg.append("</body></html>");
            showFacesMsg(saveMsg.toString(), null, FacesMessage.SEVERITY_ERROR, null);
            e.printStackTrace();
        } finally {
            this.getMnfJeOpItmLott1().executeQuery();
            this.getMnfJeOpItmBin1().executeQuery();
            this.getMnfJeOpItmSr1().executeQuery();
            this.getDBTransaction().postChanges();
        }
        showFacesMsg("Error IN FETCHING", null, FacesMessage.SEVERITY_ERROR, null);
        return 0;
    }

    public Integer FilterSrNo() {
        ViewObject mnfje = this.getMnfJe1();
        String reworkFlg=(String)this.getMnfJeOpItm1().getCurrentRow().getAttribute("RwrkFlg");//.getAttribute("RwrkFlg");
        String flag=reworkFlg.equals("Y")?"R":"S";
        adfLog.info("serial rework flag::"+flag);
        Row jeRow = mnfje.getCurrentRow();
        if (jeRow != null) {
            ViewObject stkLot = this.getMnfJeOpItmSrVw1();
            stkLot.setNamedWhereClauseParam("BindWhId", jeRow.getAttribute("WhId"));
            stkLot.setNamedWhereClauseParam("BindCldId", jeRow.getAttribute("CldId"));
            stkLot.setNamedWhereClauseParam("BindOrgId", jeRow.getAttribute("OrgId"));
            stkLot.setNamedWhereClauseParam("BindItmId", this.getMnfJeOpItm1().getCurrentRow().getAttribute("ItmId"));
            stkLot.setNamedWhereClauseParam("BindSlocId", jeRow.getAttribute("SlocId"));
            stkLot.setNamedWhereClauseParam("BindStkType",flag);
            stkLot.executeQuery();
        }
        return 0;
    }

    public Integer FilterSrNoManually() {
        ViewObject mnfje = this.getMnfJe1();
        String reworkFlg=(String)this.getMnfJeOpItm1().getCurrentRow().getAttribute("RwrkFlg");//.getAttribute("RwrkFlg");
        String flag=reworkFlg.equals("Y")?"R":"S";
        adfLog.info("serial rework flag::"+flag);
        Row jeRow = mnfje.getCurrentRow();
        if (jeRow != null) {
            ViewObject stkLot = this.getMNFJeOpItmSrRqmtVw1();
            stkLot.setNamedWhereClauseParam("BindWhId", jeRow.getAttribute("WhId"));
            stkLot.setNamedWhereClauseParam("BindCldId", jeRow.getAttribute("CldId"));
            stkLot.setNamedWhereClauseParam("BindOrgId", jeRow.getAttribute("OrgId"));
            stkLot.setNamedWhereClauseParam("BindItmId", this.getMnfJeOpItm1().getCurrentRow().getAttribute("ItmId"));
            stkLot.setNamedWhereClauseParam("BindSlocId", jeRow.getAttribute("SlocId"));
            stkLot.setNamedWhereClauseParam("BindReqId", jeRow.getAttribute("RqmtAreaId"));
            stkLot.setNamedWhereClauseParam("BindStkType",flag);
            stkLot.executeQuery();
        }
        return 0;
    }
    
    public Integer FilterLotWise() {
        ViewObject mnfJe = this.getMnfJe1();
        Row jeRow = mnfJe.getCurrentRow();
        String reworkFlg=(String)this.getMnfJeOpItm1().getCurrentRow().getAttribute("RwrkFlg");//.getAttribute("RwrkFlg");
         String flag=reworkFlg.equals("Y")?"R":"S";
        adfLog.info("lot rework flag::"+flag);

        if (jeRow != null) {
            ViewObject stkLot = this.getMnfJeOpItmLotVw1();
            stkLot.setNamedWhereClauseParam("BindWhId", jeRow.getAttribute("WhId"));
            stkLot.setNamedWhereClauseParam("BindCldId", getCldId().toString());
            stkLot.setNamedWhereClauseParam("BindOrgId", getOrgId().toString());
            stkLot.setNamedWhereClauseParam("BindItmId", this.getMnfJeOpItm1().getCurrentRow().getAttribute("ItmId"));
            stkLot.setNamedWhereClauseParam("BindSlocId", getSlocId());
            stkLot.setNamedWhereClauseParam("BindStkType",flag);
            stkLot.executeQuery();
            System.out.println("lot view row count : "+stkLot.getRowCount());
        }
        return 0;
    }

    public Integer FilterLotWiseManually() {
        System.out.println("Inner FilterLotWiseManually");
        String reworkFlg=(String)this.getMnfJeOpItm1().getCurrentRow().getAttribute("RwrkFlg");//.getAttribute("RwrkFlg");
        String flag=reworkFlg.equals("Y")?"R":"S";
        adfLog.info("serial rework flag::"+flag);
        ViewObject mnfJe = this.getMnfJe1();
        Row jeRow = mnfJe.getCurrentRow();
        if (jeRow != null) {
            ViewObject stkLot = this.getMNFJeOpItmLotRqmtVw1();
            stkLot.setNamedWhereClauseParam("BindWhId", jeRow.getAttribute("WhId"));
            stkLot.setNamedWhereClauseParam("BindCldId", getCldId().toString());
            stkLot.setNamedWhereClauseParam("BindOrgId", getOrgId().toString());
            stkLot.setNamedWhereClauseParam("BindItmId", this.getMnfJeOpItm1().getCurrentRow().getAttribute("ItmId"));
            stkLot.setNamedWhereClauseParam("BindSlocId", getSlocId());
            stkLot.setNamedWhereClauseParam("BindReqId", jeRow.getAttribute("RqmtAreaId"));
            stkLot.setNamedWhereClauseParam("BindStkType",flag);
            stkLot.executeQuery();
        }
        System.out.println("End FilterLotWiseManually");
        return 0;
    }
    
    public Integer FilterBinWise() {
        ViewObject mnfJe = this.getMnfJe1();
        Row jeRow = mnfJe.getCurrentRow();
        String reworkFlg=(String)this.getMnfJeOpItm1().getCurrentRow().getAttribute("RwrkFlg");//.getAttribute("RwrkFlg");
        String flag=reworkFlg.equals("Y")?"R":"S";
        adfLog.info("Bin rework flag::"+flag);
        adfLog.info("value"+jeRow.getAttribute("WhId")+" "+jeRow.getAttribute("CldId")+" "+jeRow.getAttribute("OrgId")+" "+this.getMnfJeOpItm1().getCurrentRow().getAttribute("ItmId")+" "+jeRow.getAttribute("SlocId"));
        
        
        if (jeRow != null) {
            ViewObject stkLot = this.getMnfJeOpItmBinVw1();
            stkLot.setNamedWhereClauseParam("BindWhId", jeRow.getAttribute("WhId"));
            stkLot.setNamedWhereClauseParam("BindCldId", jeRow.getAttribute("CldId"));
            stkLot.setNamedWhereClauseParam("BindOrgId", jeRow.getAttribute("OrgId"));
            stkLot.setNamedWhereClauseParam("BindItmId", this.getMnfJeOpItm1().getCurrentRow().getAttribute("ItmId"));
            stkLot.setNamedWhereClauseParam("BindSlocId", jeRow.getAttribute("SlocId"));
            stkLot.setNamedWhereClauseParam("BindStkType",flag);
            stkLot.executeQuery();
        }
        return 0;
    }

    public Integer FilterBinWiseManually() {
        ViewObject mnfJe = this.getMnfJe1();
        String reworkFlg=(String)this.getMnfJeOpItm1().getCurrentRow().getAttribute("RwrkFlg");//.getAttribute("RwrkFlg");
        String flag=reworkFlg.equals("Y")?"R":"S";
        adfLog.info("serial rework flag::"+flag);
        Row jeRow = mnfJe.getCurrentRow();
        if (jeRow != null) {
            ViewObject stkLot = this.getMNFJeOpItmBinRqmtVw1();
            stkLot.setNamedWhereClauseParam("BindWhId", jeRow.getAttribute("WhId"));
            stkLot.setNamedWhereClauseParam("BindCldId", jeRow.getAttribute("CldId"));
            stkLot.setNamedWhereClauseParam("BindOrgId", jeRow.getAttribute("OrgId"));
            stkLot.setNamedWhereClauseParam("BindItmId", this.getMnfJeOpItm1().getCurrentRow().getAttribute("ItmId"));
            stkLot.setNamedWhereClauseParam("BindSlocId", jeRow.getAttribute("SlocId"));
            stkLot.setNamedWhereClauseParam("BindReqId", jeRow.getAttribute("RqmtAreaId"));
            stkLot.setNamedWhereClauseParam("BindStkType",flag);
            stkLot.executeQuery();
        }
        return 0;
    }


    /**
     * Container's getter for MnfJeSrc2.
     * @return MnfJeSrc2
     */
    public ViewObjectImpl getMnfJeSrc2() {
        return (ViewObjectImpl) findViewObject("MnfJeSrc2");
    }

    /**
     * Container's getter for MNFJeDowntimeParam1.
     * @return MNFJeDowntimeParam1
     */
    public ViewObjectImpl getMNFJeDowntimeParam1() {
        return (ViewObjectImpl) findViewObject("MNFJeDowntimeParam1");
    }

    /**
     * Container's getter for MNFJeToMNFJeDowntimeParamVL1.
     * @return MNFJeToMNFJeDowntimeParamVL1
     */
    public ViewLinkImpl getMNFJeToMNFJeDowntimeParamVL1() {
        return (ViewLinkImpl) findViewLink("MNFJeToMNFJeDowntimeParamVL1");
    }

    /**
     * Container's getter for MNFJeCostingParam1.
     * @return MNFJeCostingParam1
     */
    public ViewObjectImpl getMNFJeCostingParam1() {
        return (ViewObjectImpl) findViewObject("MNFJeCostingParam1");
    }

    /**
     * Container's getter for MNFJeToMNFJeCostingParamVL1.
     * @return MNFJeToMNFJeCostingParamVL1
     */
    public ViewLinkImpl getMNFJeToMNFJeCostingParamVL1() {
        return (ViewLinkImpl) findViewLink("MNFJeToMNFJeCostingParamVL1");
    }


    /**To Select Bin,Lot and SrNo for Item
     * Method to select lot, bin and SrNo for item (If Organisation is using/not using bin and Items  serialised)
     */
    public void InsertIntoPickItmSr() {
        ViewObjectImpl opItm = this.getMnfJeOpItm1();
        ViewObjectImpl opItmSr = this.getMnfJeOpItmSr1();
        ViewObjectImpl opItmBin = this.getMnfJeOpItmBin1();
        ViewObjectImpl opItmLot = this.getMnfJeOpItmLott1();
        ViewObjectImpl viewSummSr = this.getMnfJeOpItmSrVw1();
        ViewObject mnfJe = this.getMnfJe1();
        Row jeRow = mnfJe.getCurrentRow();
        Row currItm = opItm.getCurrentRow();
        String binChkFlg = resolvEl("#{pageFlowScope.GLBL_ORG_BIN_CHK}").toString();
        Row[] srRow = this.getMnfJeOpItmSrVw1().getFilteredRows("ItmId", currItm.getAttribute("ItmId"));
        ArrayList<String> arrlist = new ArrayList<String>();
        if (srRow.length > 0) {
            for (Row r1 : srRow) {
                if (r1.getAttribute("transSelectSrNoStk") != null) {
                    if ("Y".equalsIgnoreCase(r1.getAttribute("transSelectSrNoStk").toString())) {
                        String lotId = r1.getAttribute("LotId").toString();
                        arrlist.add(lotId);
                    }
                }
            }
        }
        Set<String> lotset = new HashSet<String>(arrlist);
        for (String key : lotset) {
            Integer lotQty = Collections.frequency(arrlist, key);
            Number lotvalu = new Number(0);
            try {
                lotvalu = new Number(lotQty);
            } catch (Exception e) {
                e.printStackTrace();
            }
            RowQualifier rowQualifier = new RowQualifier(opItmLot);
            rowQualifier.setWhereClause(" DocId ='" + currItm.getAttribute("DocId") + "' and ItmId = '" +
                                        currItm.getAttribute("ItmId") + "' and LotId = '" + key + "'");
            Row[] rows = opItmLot.getFilteredRows(rowQualifier);
            if (rows.length > 0) {
                for (Row r : rows) {
                    String lotId = (String) r.getAttribute("LotId");
                    Number prLotVal = (Number) r.getAttribute("ItmQty");
                    Number newQty = prLotVal.add(lotvalu);
                    r.setAttribute("ItmQty", newQty);
                    r.setAttribute("ItmQtyBs", newQty);

                    BigDecimal avail = new BigDecimal(0);
                    try {
                        String whId = jeRow.getAttribute("WhId").toString();
                        avail =
                            (BigDecimal) callStoredFunction(Types.NUMERIC, "MNF.FN_MNF_GET_ITM_LOT_PRICE(?,?,?,?,?,?,?)", new Object[] {
                                                            getCldId().toString(), getSlocId(), getOrgId().toString(),
                                                            whId, currItm.getAttribute("ItmId"), lotId,
                                                            jeRow.getAttribute("FyId")
                        });
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    if (avail.compareTo(new BigDecimal(-1)) == 0) {
                        avail = new BigDecimal(0);
                    }
                    Number multiply = new Number(0);
                    try {
                        multiply = newQty.multiply(new Number(avail));
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                    r.setAttribute("ItmLotCost", multiply);
                }
            } else {
                Row insrtLot = opItmLot.createRow();
                insrtLot.setAttribute("LotId", key);
                insrtLot.setAttribute("ItmQty", lotvalu);
                insrtLot.setAttribute("ItmQtyBs", lotvalu);
                insrtLot.setAttribute("WhId", jeRow.getAttribute("WhId"));
                insrtLot.setAttribute("ItmUom", currItm.getAttribute("ItmUom"));
                BigDecimal avail = new BigDecimal(0);
                try {
                    String whId = jeRow.getAttribute("WhId").toString();

                    avail = (BigDecimal) callStoredFunction(Types.NUMERIC, "MNF.FN_MNF_GET_ITM_LOT_PRICE(?,?,?,?,?,?,?)", new Object[] {
                                                            getCldId().toString(), getSlocId(), getOrgId().toString(),
                                                            whId, currItm.getAttribute("ItmId"), key,
                                                            jeRow.getAttribute("FyId")
                    });
                } catch (Exception e) {
                    e.printStackTrace();
                }
                if (avail.compareTo(new BigDecimal(-1)) == 0) {
                    avail = new BigDecimal(0);
                }
                Number multiply = new Number(0);
                try {
                    multiply = lotvalu.multiply(new Number(avail));
                } catch (SQLException e) {
                    e.printStackTrace();
                }
                insrtLot.setAttribute("ItmLotCost", multiply);
                opItmLot.insertRow(insrtLot);
                //opItmLot.executeQuery();
            }
        }
        Iterator i = lotset.iterator();
        if ("Y".equalsIgnoreCase(binChkFlg)) {
            while (i.hasNext()) {
                String lot = (String) i.next();
                ArrayList<String> arrListbin = new ArrayList<String>();
                for (Row r2 : srRow) {
                    if (r2.getAttribute("transSelectSrNoStk") != null) {
                        if ("Y".equalsIgnoreCase(r2.getAttribute("transSelectSrNoStk").toString()) &&
                            r2.getAttribute("LotId").toString().equals(lot)) {
                            arrListbin.add(r2.getAttribute("BinId").toString());
                        }
                    }
                }
                Set<String> binSet = new HashSet<String>(arrListbin);
                for (String key : binSet) {
                    Integer binQty = Collections.frequency(arrListbin, key);
                    Number binvalu = new Number(0);
                    try {
                        binvalu = new Number(binQty);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    RowQualifier rowQualifier = new RowQualifier(opItmBin);
                    rowQualifier.setWhereClause(" DocId ='" + currItm.getAttribute("DocId") + "' and ItmId = '" +
                                                currItm.getAttribute("ItmId") + "' and LotId = '" + lot +
                                                "' and BinId ='" + key + "'");
                    Row[] rows = opItmBin.getFilteredRows(rowQualifier);
                    if (rows.length > 0) {
                        for (Row r : rows) {
                            Number prBinVal = (Number) r.getAttribute("ItmQty");
                            Number newQty = prBinVal.add(binvalu);
                            r.setAttribute("ItmQty", newQty);
                            r.setAttribute("ItmQtyBs", newQty);
                        }
                    } else {
                        Row binInst = opItmBin.createRow();
                        binInst.setAttribute("LotId", lot);
                        binInst.setAttribute("BinId", key);
                        binInst.setAttribute("ItmQty", binvalu);
                        binInst.setAttribute("ItmQtyBs", binvalu);
                        binInst.setAttribute("WhId", jeRow.getAttribute("WhId"));
                        binInst.setAttribute("ItmUom", currItm.getAttribute("ItmUom"));
                        opItmBin.insertRow(binInst);
                        //opItmBin.executeQuery();
                    }
                }
            }
        }
        if (srRow.length > 0) {
            for (Row rr : srRow) {
                if (rr.getAttribute("transSelectSrNoStk") != null) {
                    if ("Y".equalsIgnoreCase(rr.getAttribute("transSelectSrNoStk").toString())) {
                        Row srInst = opItmSr.createRow();
                        srInst.setAttribute("LotId", rr.getAttribute("LotId"));
                        srInst.setAttribute("BinId", rr.getAttribute("BinId"));
                        srInst.setAttribute("SrNo", rr.getAttribute("SrNo"));
                        srInst.setAttribute("ItmQty", new Number(1));
                        srInst.setAttribute("ItmQtyBs", new Number(1));
                        srInst.setAttribute("WhId", jeRow.getAttribute("WhId"));
                        srInst.setAttribute("ItmUom", currItm.getAttribute("ItmUom"));
                        opItmSr.insertRow(srInst);
                        //opItmSr.executeQuery();
                    }
                }
            }
        }
//        this.getMnfJeOpItmLot1().executeQuery();
//        this.getMnfJeOpItmBin1().executeQuery();
//        this.getMnfJeOpItmSr1().executeQuery();
//        viewSummSr.executeQuery();
        this.getDBTransaction().postChanges();
    }

    public void InsertIntoPickItmSrFromRqmtVw() {
        ViewObjectImpl opItm = this.getMnfJeOpItm1();
        ViewObjectImpl opItmSr = this.getMnfJeOpItmSr1();
        ViewObjectImpl opItmBin = this.getMnfJeOpItmBin1();
        ViewObjectImpl opItmLot = this.getMnfJeOpItmLott1();
        ViewObjectImpl viewSummSr = this.getMNFJeOpItmSrRqmtVw1();
        ViewObject mnfJe = this.getMnfJe1();
        Row jeRow = mnfJe.getCurrentRow();
        Row currItm = opItm.getCurrentRow();
        String binChkFlg = resolvEl("#{pageFlowScope.GLBL_ORG_BIN_CHK}").toString();
        Row[] srRow = this.getMNFJeOpItmSrRqmtVw1().getFilteredRows("ItmId", currItm.getAttribute("ItmId"));
        ArrayList<String> arrlist = new ArrayList<String>();
        if (srRow.length > 0) {
            for (Row r1 : srRow) {
                if (r1.getAttribute("transManualSelectSrNoStk") != null) {
                    if ("Y".equalsIgnoreCase(r1.getAttribute("transManualSelectSrNoStk").toString())) {
                        String lotId = r1.getAttribute("LotId").toString();
                        arrlist.add(lotId);
                    }
                }
            }
        }
        Set<String> lotset = new HashSet<String>(arrlist);
        for (String key : lotset) {
            Integer lotQty = Collections.frequency(arrlist, key);
            Number lotvalu = new Number(0);
            try {
                lotvalu = new Number(lotQty);
            } catch (Exception e) {
                e.printStackTrace();
            }
            RowQualifier rowQualifier = new RowQualifier(opItmLot);
            rowQualifier.setWhereClause(" DocId ='" + currItm.getAttribute("DocId") + "' and ItmId = '" +
                                        currItm.getAttribute("ItmId") + "' and LotId = '" + key + "'");
            Row[] rows = opItmLot.getFilteredRows(rowQualifier);
            if (rows.length > 0) {
                for (Row r : rows) {
                    String lotId = (String) r.getAttribute("LotId");
                    Number prLotVal = (Number) r.getAttribute("ItmQty");
                    Number newQty = prLotVal.add(lotvalu);
                    r.setAttribute("ItmQty", newQty);
                    r.setAttribute("ItmQtyBs", newQty);

                    BigDecimal avail = new BigDecimal(0);
                    try {
                        String whId = jeRow.getAttribute("WhId").toString();
                        avail =
                            (BigDecimal) callStoredFunction(Types.NUMERIC, "MNF.FN_MNF_GET_ITM_LOT_PRICE(?,?,?,?,?,?,?)", new Object[] {
                                                            getCldId().toString(), getSlocId(), getOrgId().toString(),
                                                            whId, currItm.getAttribute("ItmId"), lotId,
                                                            jeRow.getAttribute("FyId")
                        });
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    if (avail.compareTo(new BigDecimal(-1)) == 0) {
                        avail = new BigDecimal(0);
                    }
                    Number multiply = new Number(0);
                    try {
                        multiply = newQty.multiply(new Number(avail));
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                    r.setAttribute("ItmLotCost", multiply);
                }
            } else {
                Row insrtLot = opItmLot.createRow();
                insrtLot.setAttribute("LotId", key);
                insrtLot.setAttribute("ItmQty", lotvalu);
                insrtLot.setAttribute("ItmQtyBs", lotvalu);
                insrtLot.setAttribute("WhId", jeRow.getAttribute("WhId"));
                insrtLot.setAttribute("ItmUom", currItm.getAttribute("ItmUom"));
                BigDecimal avail = new BigDecimal(0);
                try {
                    String whId = jeRow.getAttribute("WhId").toString();

                    avail = (BigDecimal) callStoredFunction(Types.NUMERIC, "MNF.FN_MNF_GET_ITM_LOT_PRICE(?,?,?,?,?,?,?)", new Object[] {
                                                            getCldId().toString(), getSlocId(), getOrgId().toString(),
                                                            whId, currItm.getAttribute("ItmId"), key,
                                                            jeRow.getAttribute("FyId")
                    });
                } catch (Exception e) {
                    e.printStackTrace();
                }
                if (avail.compareTo(new BigDecimal(-1)) == 0) {
                    avail = new BigDecimal(0);
                }
                Number multiply = new Number(0);
                try {
                    multiply = lotvalu.multiply(new Number(avail));
                } catch (SQLException e) {
                    e.printStackTrace();
                }
                insrtLot.setAttribute("ItmLotCost", multiply);
                opItmLot.insertRow(insrtLot);
                //opItmLot.executeQuery();
            }
        }
        Iterator i = lotset.iterator();
        if ("Y".equalsIgnoreCase(binChkFlg)) {
            while (i.hasNext()) {
                String lot = (String) i.next();
                ArrayList<String> arrListbin = new ArrayList<String>();
                for (Row r2 : srRow) {
                    if (r2.getAttribute("transManualSelectSrNoStk") != null) {
                        if ("Y".equalsIgnoreCase(r2.getAttribute("transManualSelectSrNoStk").toString()) &&
                            r2.getAttribute("LotId").toString().equals(lot)) {
                            arrListbin.add(r2.getAttribute("BinId").toString());
                        }
                    }
                }
                Set<String> binSet = new HashSet<String>(arrListbin);
                for (String key : binSet) {
                    Integer binQty = Collections.frequency(arrListbin, key);
                    Number binvalu = new Number(0);
                    try {
                        binvalu = new Number(binQty);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    RowQualifier rowQualifier = new RowQualifier(opItmBin);
                    rowQualifier.setWhereClause(" DocId ='" + currItm.getAttribute("DocId") + "' and ItmId = '" +
                                                currItm.getAttribute("ItmId") + "' and LotId = '" + lot +
                                                "' and BinId ='" + key + "'");
                    Row[] rows = opItmBin.getFilteredRows(rowQualifier);
                    if (rows.length > 0) {
                        for (Row r : rows) {
                            Number prBinVal = (Number) r.getAttribute("ItmQty");
                            Number newQty = prBinVal.add(binvalu);
                            r.setAttribute("ItmQty", newQty);
                            r.setAttribute("ItmQtyBs", newQty);
                        }
                    } else {
                        Row binInst = opItmBin.createRow();
                        binInst.setAttribute("LotId", lot);
                        binInst.setAttribute("BinId", key);
                        binInst.setAttribute("ItmQty", binvalu);
                        binInst.setAttribute("ItmQtyBs", binvalu);
                        binInst.setAttribute("WhId", jeRow.getAttribute("WhId"));
                        binInst.setAttribute("ItmUom", currItm.getAttribute("ItmUom"));
                        opItmBin.insertRow(binInst);
                        //opItmBin.executeQuery();
                    }
                }
            }
        }
        if (srRow.length > 0) {
            for (Row rr : srRow) {
                if (rr.getAttribute("transManualSelectSrNoStk") != null) {
                    if ("Y".equalsIgnoreCase(rr.getAttribute("transManualSelectSrNoStk").toString())) {
                        Row srInst = opItmSr.createRow();
                        srInst.setAttribute("LotId", rr.getAttribute("LotId"));
                        srInst.setAttribute("BinId", rr.getAttribute("BinId"));
                        srInst.setAttribute("SrNo", rr.getAttribute("SrNo"));
                        srInst.setAttribute("ItmQty", new Number(1));
                        srInst.setAttribute("ItmQtyBs", new Number(1));
                        srInst.setAttribute("WhId", jeRow.getAttribute("WhId"));
                        srInst.setAttribute("ItmUom", currItm.getAttribute("ItmUom"));
                        opItmSr.insertRow(srInst);
                        //opItmSr.executeQuery();
                    }
                }
            }
        }
        //this.getMnfJeOpItmLot1().executeQuery();
        //this.getMnfJeOpItmBin1().executeQuery();
        //this.getMnfJeOpItmSr1().executeQuery();
        //viewSummSr.executeQuery();
        this.getDBTransaction().postChanges();
    }
    
    public void InsertIntoJeItmLot() {
        ViewObjectImpl mtlItm = this.getMnfJeOpItm1();
                
                ViewObjectImpl mtlLot = this.getMnfJeOpItmLott1();
                ViewObject mnfJe = this.getMnfJe1();
                Row currItm = mtlItm.getCurrentRow();
                Row jeRow = mnfJe.getCurrentRow();
                
                oracle.jbo.domain.Number zero = new oracle.jbo.domain.Number(0);
                Row[] srRow = this.getMnfJeOpItmLotVw1().getFilteredRows("ItmId", currItm.getAttribute("ItmId"));
                if (srRow.length > 0) {
                    for (Row rr : srRow) {
                        if (rr.getAttribute("transIssuQtyValue") != null) {
                            if (((oracle.jbo.domain.Number) rr.getAttribute("transIssuQtyValue")).compareTo(zero) >= 0) {
                                RowQualifier rowQualifier = new RowQualifier(mtlLot);
                                rowQualifier.setWhereClause("DocId = '" + currItm.getAttribute("DocId") + "' and ItmId = '" +
                                                            currItm.getAttribute("ItmId") + "' and LotId = '" +
                                                            rr.getAttribute("LotId").toString() + "'");
                                Row[] rows = mtlLot.getFilteredRows(rowQualifier);
                                if (rows.length > 0) {
                                    for (Row r : rows) {
                                        if (((oracle.jbo.domain.Number) rr.getAttribute("TransIssuQtyValue")).compareTo(zero) ==
                                            0) {
                                            r.remove();
                                        } else if (((oracle.jbo.domain.Number) rr.getAttribute("TransIssuQtyValue")).compareTo(zero) >
                                                   0) {
                                            r.setAttribute("ItmQty", rr.getAttribute("TransIssuQtyValue"));
                                            r.setAttribute("ItmQtyBs", rr.getAttribute("TransIssuQtyValue"));
                                            String LotId = (String) r.getAttribute("LotId");
                                            BigDecimal avail = new BigDecimal(0);
                                            try {
                                                String whId = jeRow.getAttribute("WhId").toString();

                                                avail =
                                                    (BigDecimal) callStoredFunction(Types.NUMERIC,
                                                                                    "MNF.FN_MNF_GET_ITM_LOT_PRICE(?,?,?,?,?,?,?)", new Object[] {
                                                                                    getCldId().toString(), getSlocId(),
                                                                                    getOrgId().toString(), whId,
                                                                                    currItm.getAttribute("ItmId"), LotId,
                                                                                    jeRow.getAttribute("FyId")
                                                });
                                            } catch (Exception e) {
                                                e.printStackTrace();
                                            }
                                            if (avail.compareTo(new BigDecimal(-1)) == 0) {
                                                avail = new BigDecimal(0);
                                            }
                                            Number lotQty = new Number(0);
                                            lotQty = (Number) rr.getAttribute("transIssuQtyValue");
                                            Number multiply = new Number(0);
                                            try {
                                                multiply = lotQty.multiply(new Number(avail));
                                            } catch (SQLException e) {
                                                e.printStackTrace();
                                            }
                                            r.setAttribute("ItmLotCost", multiply);
                                        }
                                    }
                                } else {
                                    if (((oracle.jbo.domain.Number) rr.getAttribute("transIssuQtyValue")).compareTo(zero) > 0) {
                                        Row lotInst = mtlLot.createRow();
                                        lotInst.setAttribute("LotId", rr.getAttribute("LotId"));
                                        lotInst.setAttribute("ItmQty", rr.getAttribute("transIssuQtyValue"));
                                        lotInst.setAttribute("ItmQtyBs", rr.getAttribute("transIssuQtyValue"));
                                        lotInst.setAttribute("ItmUom", currItm.getAttribute("ItmUom"));
                                        lotInst.setAttribute("WhId", rr.getAttribute("WhId"));
                                        //-------------------------------------------------------------------------------------------------------------
                                        String LotId = (String) rr.getAttribute("LotId");
                                        BigDecimal avail = new BigDecimal(0);
                                        try {
                                            String whId = jeRow.getAttribute("WhId").toString();

                                            avail =
                                                (BigDecimal) callStoredFunction(Types.NUMERIC,
                                                                                "MNF.FN_MNF_GET_ITM_LOT_PRICE(?,?,?,?,?,?,?)", new Object[] {
                                                                                getCldId().toString(), getSlocId(), getOrgId().toString(),
                                                                                whId, currItm.getAttribute("ItmId"), LotId,
                                                                                (Integer) jeRow.getAttribute("FyId")
                                            });
                                        } catch (Exception e) {
                                            e.printStackTrace();
                                        }
                                        Number lotQty = new Number(0);
                                        lotQty = (Number) rr.getAttribute("transIssuQtyValue");
                                        if (avail.compareTo(new BigDecimal(-1)) == 0) {
                                            avail = new BigDecimal(0);
                                        }
                                        Number multiply = new Number(0);
                                        try {
                                            multiply = lotQty.multiply(new Number(avail));
                                        } catch (SQLException e) {
                                            e.printStackTrace();
                                        }
                                        lotInst.setAttribute("ItmLotCost", multiply);

                                        mtlLot.insertRow(lotInst);
                                        //mtlLot.executeQuery();
                                    }
                                }
                            }
                        }
                    }
                }
                //mtlItm.executeQuery();
                this.getDBTransaction().postChanges();
    }

    public void InsertIntoJeItmLotFromRqmtView() {
        System.out.println("Select Lot M : -----------------------------------------------------");
        ViewObjectImpl mtlItm = this.getMnfJeOpItm1();
        ViewObjectImpl mtlLot = this.getMnfJeOpItmLott1();
        ViewObject mnfJe = this.getMnfJe1();

        Row currItm = mtlItm.getCurrentRow();
        Row jeRow = mnfJe.getCurrentRow();

        oracle.jbo.domain.Number zero = new oracle.jbo.domain.Number(0);
        Row[] srRow = this.getMNFJeOpItmLotRqmtVw1().getFilteredRows("ItmId", currItm.getAttribute("ItmId"));
        System.out.println(srRow.length+" Length");
        if (srRow.length > 0) {
            for (Row rr : srRow) {
                if (rr.getAttribute("transManualIssuQtyValue") != null) {
                    if (((oracle.jbo.domain.Number) rr.getAttribute("transManualIssuQtyValue")).compareTo(zero) >= 0) {
                        RowQualifier rowQualifier = new RowQualifier(mtlLot);
                        rowQualifier.setWhereClause("DocId = '" + currItm.getAttribute("DocId") + "' and ItmId = '" +
                                                    currItm.getAttribute("ItmId") + "' and LotId = '" +
                                                    rr.getAttribute("LotId").toString() + "'");
                        Row[] rows = mtlLot.getFilteredRows(rowQualifier);
                        if (rows.length > 0) {
                            for (Row r : rows) {
                                if (((oracle.jbo.domain.Number) rr.getAttribute("transManualIssuQtyValue")).compareTo(zero) ==
                                    0) {
                                    System.out.println(" remove row lot");
                                    r.remove();
                                } else if (((oracle.jbo.domain.Number) rr.getAttribute("transManualIssuQtyValue")).compareTo(zero) >
                                           0) {
                                    System.out.println(" update  row lot :::::");
                                    r.setAttribute("ItmQty", rr.getAttribute("transManualIssuQtyValue"));
                                    r.setAttribute("ItmQtyBs", rr.getAttribute("transManualIssuQtyValue"));
                                    String LotId = (String) r.getAttribute("LotId");
                                    BigDecimal avail = new BigDecimal(0);
                                    try {
                                        String whId = jeRow.getAttribute("WhId").toString();

                                        avail =
                                            (BigDecimal) callStoredFunction(Types.NUMERIC,
                                                                            "MNF.FN_MNF_GET_ITM_LOT_PRICE(?,?,?,?,?,?,?)", new Object[] {
                                                                            getCldId().toString(), getSlocId(),
                                                                            getOrgId().toString(), whId,
                                                                            currItm.getAttribute("ItmId"), LotId,
                                                                            jeRow.getAttribute("FyId")
                                        });
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                    }
                                    if (avail.compareTo(new BigDecimal(-1)) == 0) {
                                        avail = new BigDecimal(0);
                                    }
                                    Number lotQty = new Number(0);
                                    lotQty = (Number) rr.getAttribute("transManualIssuQtyValue");
                                    Number multiply = new Number(0);
                                    try {
                                        multiply = lotQty.multiply(new Number(avail));
                                    } catch (SQLException e) {
                                        e.printStackTrace();
                                    }
                                    r.setAttribute("ItmLotCost", multiply);
                                }
                            }
                        } else {
                            System.out.println(rr.getAttribute("transManualIssuQtyValue")+" ======= Else");
                           System.out.println(" codition "+((oracle.jbo.domain.Number) rr.getAttribute("transManualIssuQtyValue")).compareTo(zero));
                            if (((oracle.jbo.domain.Number) rr.getAttribute("transManualIssuQtyValue")).compareTo(zero) > 0) {
                                System.out.println(" create row lot");
                                Row lotInst = mtlLot.createRow();
                                lotInst.setAttribute("LotId", rr.getAttribute("LotId"));
                                lotInst.setAttribute("ItmQty", rr.getAttribute("transManualIssuQtyValue"));
                                lotInst.setAttribute("ItmQtyBs", rr.getAttribute("transManualIssuQtyValue"));
                                lotInst.setAttribute("ItmUom", currItm.getAttribute("ItmUom"));
                                lotInst.setAttribute("WhId", rr.getAttribute("WhId"));
                                //-------------------------------------------------------------------------------------------------------------
                                String LotId = (String) rr.getAttribute("LotId");
                                BigDecimal avail = new BigDecimal(0);
                                
                                try {
                                    String whId = jeRow.getAttribute("WhId").toString();
                                    System.out.println(getCldId().toString()+" "+ getSlocId()+" "+getOrgId()+" "+whId+" "+
                                                       currItm.getAttribute("ItmId")+" "+LotId+" "+
                                                                        (Integer) jeRow.getAttribute("FyId"));
                                    avail =
                                        (BigDecimal) callStoredFunction(Types.NUMERIC,
                                                                        "MNF.FN_MNF_GET_ITM_LOT_PRICE(?,?,?,?,?,?,?)", new Object[] {
                                                                        getCldId().toString(), getSlocId(), getOrgId().toString(),
                                                                        whId, currItm.getAttribute("ItmId"), LotId,
                                                                        (Integer) jeRow.getAttribute("FyId")
                                    });
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }
                                Number lotQty = new Number(0);
                                lotQty = (Number) rr.getAttribute("transManualIssuQtyValue");
                                if (avail.compareTo(new BigDecimal(-1)) == 0) {
                                    avail = new BigDecimal(0);
                                }
                                Number multiply = new Number(0);
                                try {
                                    multiply = lotQty.multiply(new Number(avail));
                                } catch (SQLException e) {
                                    e.printStackTrace();
                                }
                                System.out.println("multiply    ::: "+multiply);
                                lotInst.setAttribute("ItmLotCost", multiply);

                                mtlLot.insertRow(lotInst);
                               // mtlLot.executeQuery();
                            }
                        }
                    }
                }
            }
        }
        //mtlItm.executeQuery();
        //mtlLot.executeQuery();

        System.out.println("total no of rows------- "+mtlLot.getRowCount());
        this.getDBTransaction().postChanges();
    }
    
    public void setOperationValues() {
        String jcDocId = "";
        String opDesc = "";
        String itemId = "";
        String itemNm = "";
        Integer opSrNo = 0;
        String opDocId = "";
        Number itemQty = new Number();
        Row jeRow = this.getMnfJe1().getCurrentRow();
        Row[] r = null;
        if (((Integer) jeRow.getAttribute("JeBasis")) == 109) {
            r = this.getLOVMnfJc1().getFilteredRows("JcId", jeRow.getAttribute("transJcId"));
        } else {
            r = this.getLOVMnfRc1().getFilteredRows("RcId", jeRow.getAttribute("transRcId"));
        }

        if (r.length > 0) {
            jcDocId = r[0].getAttribute("DocId").toString();
        }
        ViewObject mnfOprVO = this.getLOVSourceOperations1();
        mnfOprVO.setNamedWhereClauseParam("BindCldId", getCldId().toString());
        mnfOprVO.setNamedWhereClauseParam("BindHoId", getHoId().toString());
        mnfOprVO.setNamedWhereClauseParam("BindOrgId", getOrgId().toString());
        mnfOprVO.setNamedWhereClauseParam("BindSlocId", getSlocId());
        mnfOprVO.setNamedWhereClauseParam("BindDocId", jcDocId);
        mnfOprVO.executeQuery();
        Row[] opRow = mnfOprVO.getFilteredRows("DocId", jcDocId);
        if (opRow.length > 0) {
            opDocId = opRow[0].getAttribute("OpId").toString();
            opDesc = opRow[0].getAttribute("OpDesc").toString();
            itemId = opRow[0].getAttribute("OpItmId").toString();
            itemNm = opRow[0].getAttribute("OutptItmDesc").toString();
            opSrNo = (Integer) opRow[0].getAttribute("OpSrNo");
            itemQty = (Number) opRow[0].getAttribute("OpItmPrf");
        }
        jeRow.setAttribute("transDocId", jcDocId);
        jeRow.setAttribute("transOperationDesc", opDesc);
        jeRow.setAttribute("OutptItmId", itemId);
        jeRow.setAttribute("transOpItmDesc", itemNm);
        jeRow.setAttribute("transOpSrNo", opSrNo);
        jeRow.setAttribute("OutptItmQty", itemQty);
        jeRow.setAttribute("transOpId", opDocId);
    }

    /**
     * Container's getter for DualItemNameSearchView1.
     * @return DualItemNameSearchView1
     */
    public ViewObjectImpl getDualItemNameSearchView1() {
        return (ViewObjectImpl) findViewObject("DualItemNameSearchView1");
    }

    public String chkDuplicate(String tab, String val) {
        if (tab.equals("overheadParam") || tab == "overheadParam") {
            adfLog.info("duplicateCostingParamID::"+duplicateOverheadParamID(val));
            return duplicateOverheadParamID(val);
        }
        if (tab.equals("costingParam") || tab == "costingParam") {
            adfLog.info("duplicateCostingParamID::"+duplicateCostingParamID(val));
            return duplicateCostingParamID(val);
        }
        if (tab.equals("downtimeParam") || tab == "downtimeParam") {
            return duplicateDowntimeParamID(val);
        }
        return "NONE";
    }


    /**
     * Function to check duplicate Parameter
     * **/
    private String duplicateOverheadParamID(String paramVal) {
        if (paramVal != null) {
            ViewObjectImpl voimpl = this.getMnfJeParam1();
            Row[] paramName = voimpl.getFilteredRows("transParamDesc", paramVal);
            adfLog.info("desc:::"+paramVal+"count::"+paramName.length);
//            if (paramName.length > 0 && paramName[0] != voimpl.getCurrentRow()) {
             if (paramName.length > 1) {
                return "true";
            } else {
                return "false";
            }
        }
        return "false";
    }

    /**
     * Function to check duplicate Parameter
     * **/
    private String duplicateDowntimeParamID(String paramVal) {
        if (paramVal != null) {
            ViewObjectImpl voimpl = this.getMNFJeDowntimeParam1();
            Row[] paramName = voimpl.getFilteredRows("transParamDesc", paramVal);
//            if (paramName.length > 0 && paramName[0] != voimpl.getCurrentRow()) {
            if (paramName.length > 1) {
                return "true";
            } else {
                return "false";
            }
        }
        return "false";
    }

    /**
     * Function to check duplicate Parameter
     * **/
    private String duplicateCostingParamID(String paramVal) {
        if (paramVal != null) {
            ViewObjectImpl voimpl = this.getMNFJeCostingParam1();
            Row[] paramName = voimpl.getFilteredRows("transParamDesc", paramVal);
            adfLog.info("param desc=:::"+paramVal+"count::"+paramName.length);
//            if (paramName.length > 0 && paramName[0] != voimpl.getCurrentRow()) {
            if (paramName.length > 1) {
                return "true";
            } else {
                return "false";
            }
        }
        return "false";
    }


    /*-------------------------------LOT Entry for output Item-----------------------*/
    public void AddLotEntry(String lotId, String lotQty,Timestamp expdt) {
        adfLog.info("Value of expiry date::"+expdt);
        String pdoId="",opId="";
        int opSrNo = 0;
        Row row = this.getMnfJe1().getCurrentRow();
        int jeBases = Integer.parseInt(this.getMnfJe1().getCurrentRow().getAttribute("JeBasis").toString());
        String itmId = this.getMnfJe1().getCurrentRow().getAttribute("OutptItmId").toString();
        String docId = this.getMnfJe1().getCurrentRow().getAttribute("DocId").toString();
        if(jeBases==109){
            Row[] rows = this.getMnfJeOpItm1().getFilteredRows("DocId", docId);
            if(rows.length>0){
                pdoId = rows[0].getAttribute("PdoId").toString();
                opId = rows[0].getAttribute("OpId").toString();
                opSrNo = (Integer)rows[0].getAttribute("OpSrNo");
            }
        }else{
            ViewObjectImpl impl = this.getMnfJeOpItm1();
            RowQualifier rq = new RowQualifier(impl);
            rq.setWhereClause("SlocId =" + getSlocId() + " and CldId='" + getCldId() +
                              "' and OrgId='" + getOrgId() + "' and HoOrgId='" +
                              getHoId() + "' and DocId='" + docId +
                              "' and ItmId='" + itmId + "' and ItmType="+67);
            System.out.println("Query string: "+rq.getExprStr());
            Row fltrdrow[] = impl.getFilteredRows(rq);
            if(fltrdrow.length>0){
                pdoId = fltrdrow[0].getAttribute("PdoId").toString();
                opId = fltrdrow[0].getAttribute("OpId").toString();
                opSrNo = (Integer)fltrdrow[0].getAttribute("OpSrNo");
            }
        }
        ViewObject itemVO = this.getLOVItemName1();
        itemVO.setNamedWhereClauseParam("BindCldId", getCldId().toString());
        itemVO.setNamedWhereClauseParam("BindHoId", getHoId().toString());
        itemVO.setNamedWhereClauseParam("BindOrgId", getOrgId().toString());
        itemVO.setNamedWhereClauseParam("BindItemId", itmId);
        itemVO.setNamedWhereClauseParam("BindSlocId", getSlocId());
        itemVO.executeQuery();
        String uom = this.getLOVItemName1().getFilteredRows("ItmId", itmId)[0].getAttribute("UomBasic").toString();
        ViewObjectImpl stkImpl = this.getMNFJeItmStkLot1();
        Integer id = (Integer) this.getLovStoreTrnasfer1().getCurrentRow().getAttribute("TransAttId");
        Row CR = stkImpl.createRow();
        //Row CR = stkImpl.getCurrentRow();
        CR.setAttribute("CldId", getCldId().toString());
        CR.setAttribute("SlocId", getSlocId());
        CR.setAttribute("HoOrgId", getHoId().toString());
        CR.setAttribute("OrgId", getOrgId().toString());
        CR.setAttribute("DocId", docId);
        CR.setAttribute("PdoId", pdoId);
        CR.setAttribute("OpId", opId);
        CR.setAttribute("OpSrNo", opSrNo);
        CR.setAttribute("ItmId", itmId);
        CR.setAttribute("ItmType", 67);
        CR.setAttribute("ItmUom", uom);
        CR.setAttribute("LotId", lotId);
        CR.setAttribute("SrNo", 0);
        CR.setAttribute("TotQty", lotQty);
        CR.setAttribute("UsrIdCreate", getUsrId());
        CR.setAttribute("UsrIdCreateDt", new Timestamp(System.currentTimeMillis()));
        CR.setAttribute("ItmMvmtType", id);
        CR.setAttribute("ExpiryDt",expdt);
       stkImpl.insertRow(CR);
        stkImpl.setCurrentRow(CR);
        this.getDBTransaction().postChanges();
    }

    /*--------------------------Function for get lot number-----------------------*/
    public String GetlotNo() {
        ViewObjectImpl lotImpl = this.getMnfJe1();
        Row lotRow = lotImpl.getCurrentRow();
        Object rVal;
        try {
            rVal = callStoredFunction(Types.VARCHAR, "MNF.FN_MNF_GET_LOT_NO(?,?,?,?,?)", new Object[] {
                                      getCldId().toString(), getSlocId(), getOrgId().toString(),
                                      lotRow.getAttribute("WhId"), lotRow.getAttribute("OutptItmId")
            });
            if (rVal != null) {
                return rVal.toString();
            }
            this.getMNFJeItmStkLot1().executeQuery();
        } catch (Exception e) {
            e.printStackTrace();
        }
        showFacesMsg("Error while fetching user work flow details", null, FacesMessage.SEVERITY_ERROR, null);
        return "0";
    }

    public void AddSerialEntry(String lotId, String serial) {
        System.out.println("Insert Sr no");
        ViewObjectImpl stkImpl = this.getMNFJeItmStkSerial1();
        Row CR = stkImpl.createRow();
        CR.setAttribute("CldId", this.getMNFJeItmStkLot1().getCurrentRow().getAttribute("CldId"));
        CR.setAttribute("DocId", this.getMNFJeItmStkLot1().getCurrentRow().getAttribute("DocId"));
        CR.setAttribute("HoOrgId", this.getMNFJeItmStkLot1().getCurrentRow().getAttribute("HoOrgId"));
        CR.setAttribute("OpId", this.getMNFJeItmStkLot1().getCurrentRow().getAttribute("OpId"));
        CR.setAttribute("OpSrNo", this.getMNFJeItmStkLot1().getCurrentRow().getAttribute("OpSrNo"));
        CR.setAttribute("OrgId", this.getMNFJeItmStkLot1().getCurrentRow().getAttribute("OrgId"));
        CR.setAttribute("PdoId", this.getMNFJeItmStkLot1().getCurrentRow().getAttribute("PdoId"));
        CR.setAttribute("SlocId", this.getMNFJeItmStkLot1().getCurrentRow().getAttribute("SlocId"));
        CR.setAttribute("ItmMvmtType", this.getMNFJeItmStkLot1().getCurrentRow().getAttribute("ItmMvmtType"));
        CR.setAttribute("ItmId", this.getMNFJeItmStkLot1().getCurrentRow().getAttribute("ItmId"));
        CR.setAttribute("ItmType", 67);
        CR.setAttribute("ItmUom", this.getMNFJeItmStkLot1().getCurrentRow().getAttribute("ItmUom"));
        CR.setAttribute("LotId", lotId);
        CR.setAttribute("SrNo", serial);
        CR.setAttribute("TotQty", 1);
        CR.setAttribute("UsrIdCreate", getUsrId());
        CR.setAttribute("UsrIdCreateDt", new Timestamp(System.currentTimeMillis()));
        stkImpl.insertRow(CR);
        //stkImpl.setCurrentRow(CR);
        //stkImpl.executeQuery();
        System.out.println("End Insert Sr no");
    }

    /**
     * Container's getter for ChkOutputItemSerialized1.
     * @return ChkOutputItemSerialized1
     */
    public ViewObjectImpl getChkOutputItemSerialized1() {
        return (ViewObjectImpl) findViewObject("ChkOutputItemSerialized1");
    }

    /*------------------------------------Check output Item Serialized----------------------------*/
    public String ChkOutputItmSerialized() {
        ViewObjectImpl chkSer = this.getChkOutputItemSerialized1();
        chkSer.setNamedWhereClauseParam("BindItmId", this.getMnfJe1().getCurrentRow().getAttribute("OutptItmId"));
        chkSer.executeQuery();
        Row[] allRowsInRange = chkSer.getAllRowsInRange();
        if (allRowsInRange.length > 0) {
            Object a = allRowsInRange[0].getAttribute("SerializedFlg");
            String Ser = (a == null ? null : a.toString());
            System.out.println("Ser : "+ Ser);
            return Ser;
        }
        return "N";
    }

    /**
     * Container's getter for LOVAllParameterForViewMode1.
     * @return LOVAllParameterForViewMode1
     */
    public ViewObjectImpl getLOVAllParameterForViewMode1() {
        return (ViewObjectImpl) findViewObject("LOVAllParameterForViewMode1");
    }

    /**
     * Container's getter for LOVAllParameterSetForViewMode1.
     * @return LOVAllParameterSetForViewMode1
     */
    public ViewObjectImpl getLOVAllParameterSetForViewMode1() {
        return (ViewObjectImpl) findViewObject("LOVAllParameterSetForViewMode1");
    }

    /**
     * Container's getter for LOVAllRouteCard1.
     * @return LOVAllRouteCard1
     */
    public ViewObjectImpl getLOVAllRouteCard1() {
        return (ViewObjectImpl) findViewObject("LOVAllRouteCard1");
    }

    /**
     * Container's getter for LOVAllJobCard1.
     * @return LOVAllJobCard1
     */
    public ViewObjectImpl getLOVAllJobCard1() {
        return (ViewObjectImpl) findViewObject("LOVAllJobCard1");
    }

    public boolean duplicateOverheadParam(String paramName) {
        RowSetIterator rSetIter = getMnfJeParam1().createRowSetIterator(null);
        Integer countVal = 0;
        if (paramName != null) {
            while (rSetIter.hasNext()) {
                Row r = rSetIter.next();
                if (paramName.equals(r.getAttribute("transParamDesc"))) {
                    countVal = countVal + 1;
                }
            }
            rSetIter.closeRowSetIterator();
            Row currentRow = getMnfJeParam1().getCurrentRow();

            if (paramName.equals(currentRow.getAttribute("transParamDesc"))) {
                countVal = countVal - 1;
            }
        }

        return countVal == 1 ? true : false;
    }

    public boolean duplicateDowntimeParam(String paramName) {
        RowSetIterator rSetIter = getMNFJeDowntimeParam1().createRowSetIterator(null);
        Integer countVal = 0;
        if (paramName != null) {
            while (rSetIter.hasNext()) {
                Row r = rSetIter.next();
                if (paramName.equals(r.getAttribute("transParamDesc"))) {
                    countVal = countVal + 1;
                }
            }
            rSetIter.closeRowSetIterator();
            Row currentRow = getMNFJeDowntimeParam1().getCurrentRow();

            if (paramName.equals(currentRow.getAttribute("transParamDesc"))) {
                countVal = countVal - 1;
            }
        }

        return countVal == 1 ? true : false;
    }

    public boolean duplicateCostingParam(String paramName) {
        RowSetIterator rSetIter = getMNFJeCostingParam1().createRowSetIterator(null);
        Integer countVal = 0;
        if (paramName != null) {
            while (rSetIter.hasNext()) {
                Row r = rSetIter.next();
                if (paramName.equals(r.getAttribute("transParamDesc"))) {
                    countVal = countVal + 1;
                }
            }
            rSetIter.closeRowSetIterator();
            Row currentRow = getMNFJeCostingParam1().getCurrentRow();

            if (paramName.equals(currentRow.getAttribute("transParamDesc"))) {
                countVal = countVal - 1;
            }
        }

        return countVal == 1 ? true : false;
    }

    public void InsertIntoJeItmLotBin() {
        ViewObjectImpl mtlItm = this.getMnfJeOpItm1();
        ViewObjectImpl mtlBin = this.getMnfJeOpItmBin1();

        ViewObjectImpl mtlLot = this.getMnfJeOpItmLott1();
        Row currItm = mtlItm.getCurrentRow();

        ViewObject mnfJe = this.getMnfJe1();
        Row jeRow = mnfJe.getCurrentRow();
        Number zero = new Number(0);
        ViewObjectImpl stkSummBin = this.getMnfJeOpItmBinVw1();
        Row[] binRow = this.getMnfJeOpItmBinVw1().getFilteredRows("ItmId", currItm.getAttribute("ItmId"));

        ArrayList<String> arrlist = new ArrayList<String>();

        if (binRow.length > 0) {
            for (Row r1 : binRow) {
                if (r1.getAttribute("transIssueQuantity") != null) {
                    if (((Number) r1.getAttribute("transIssueQuantity")).compareTo(zero) > 0) {
                        String lotId = r1.getAttribute("LotId").toString();
                        arrlist.add(lotId);
                    }
                }
            }
        }
        Set<String> lotset = new HashSet<String>(arrlist);

        Iterator itr = lotset.iterator();
        while (itr.hasNext()) {
            String lotId = itr.next().toString();
            Number lotQty = new Number(0);
            for (Row r1 : binRow) {
                if (r1.getAttribute("transIssueQuantity") != null) {
                    if (((Number) r1.getAttribute("transIssueQuantity")).compareTo(zero) > 0 &&
                        r1.getAttribute("LotId").toString().equals(lotId)) {
                        lotQty = lotQty.add((Number) r1.getAttribute("transIssueQuantity"));
                    }
                }
            }

            RowQualifier rowQualifier = new RowQualifier(mtlLot);
            rowQualifier.setWhereClause(" DocId ='" + currItm.getAttribute("DocId") + "' and ItmId = '" +
                                        currItm.getAttribute("ItmId") + "' and LotId = '" + lotId + "'");
            Row[] rows = mtlLot.getFilteredRows(rowQualifier);
            if (rows.length > 0) {
                for (Row r : rows) {
                    r.setAttribute("ItmQty", lotQty);
                    r.setAttribute("ItmQtyBs", lotQty);
                }
            } else {
                RowQualifier rq = new RowQualifier(stkSummBin);
                rq.setWhereClause("ItmId='" + currItm.getAttribute("ItmId"));
                Row binRows[] = stkSummBin.getFilteredRows(rq);

                Row instLot = mtlLot.createRow();
                mtlLot.insertRow(instLot);
                instLot.setAttribute("LotId", lotId);
                instLot.setAttribute("ItmQty", lotQty);
                instLot.setAttribute("ItmQtyBs", lotQty);
                instLot.setAttribute("ItmUom", currItm.getAttribute("ItmUom"));
                instLot.setAttribute("WhId", jeRow.getAttribute("WhId"));
                BigDecimal avail = new BigDecimal(0);
                try {
                    String whId = jeRow.getAttribute("WhId").toString();
                    avail = (BigDecimal) callStoredFunction(Types.NUMERIC, "MNF.FN_MNF_GET_ITM_LOT_PRICE(?,?,?,?,?,?,?)", new Object[] {
                                                            getCldId().toString(), getSlocId(), getOrgId().toString(),
                                                            whId, currItm.getAttribute("ItmId"), lotId,
                                                            jeRow.getAttribute("FyId")
                    });

                } catch (Exception e) {
                    e.printStackTrace();
                }
                if (avail.compareTo(new BigDecimal(-1)) == 0) {
                    avail = new BigDecimal(0);
                }
                Number multiply = new Number(0);
                try {
                    multiply = (Number) lotQty.multiply(new Number(avail));
                } catch (SQLException e) {
                    e.printStackTrace();
                }
                instLot.setAttribute("ItmLotCost", multiply);

                //mtlLot.executeQuery();
            }
        }
        if (binRow.length > 0) {
            for (Row rr : binRow) {
                if (rr.getAttribute("transIssueQuantity") != null) {
                    if (((Number) rr.getAttribute("transIssueQuantity")).compareTo(zero) >= 0) {
                        RowQualifier rowQualifier = new RowQualifier(mtlBin);
                        rowQualifier.setWhereClause(" DocId ='" + currItm.getAttribute("DocId") + "' and ItmId = '" +
                                                    currItm.getAttribute("ItmId") + "' and LotId = '" +
                                                    rr.getAttribute("LotId").toString() + "' and BinId = '" +
                                                    rr.getAttribute("BinId").toString() + "'");
                        Row[] rows = mtlBin.getFilteredRows(rowQualifier);
                        if (rows.length > 0) {
                            for (Row r : rows) {
                                if (((Number) rr.getAttribute("transIssueQuantity")).compareTo(zero) == 0) {
                                    r.remove();
                                } else if (((Number) rr.getAttribute("transIssueQuantity")).compareTo(zero) > 0) {
                                    r.setAttribute("ItmQty", rr.getAttribute("transIssueQuantity"));
                                    r.setAttribute("ItmQtyBs", rr.getAttribute("transIssueQuantity"));
                                }
                            }
                        } else {
                            if (((Number) rr.getAttribute("transIssueQuantity")).compareTo(zero) > 0) {
                                Row binInst = mtlBin.createRow();
                                binInst.setAttribute("LotId", rr.getAttribute("LotId"));
                                binInst.setAttribute("BinId", rr.getAttribute("BinId"));
                                binInst.setAttribute("ItmQty", rr.getAttribute("transIssueQuantity"));
                                binInst.setAttribute("ItmQtyBs", rr.getAttribute("transIssueQuantity"));
                                binInst.setAttribute("WhId", jeRow.getAttribute("WhId"));
                                binInst.setAttribute("ItmUom", currItm.getAttribute("ItmUom"));

                                mtlBin.insertRow(binInst);
                                //mtlBin.executeQuery();
                            }
                        }
                    }
                }
            }
        }
        //this.getMnfJeOpItmBin1().executeQuery();
        //this.getMnfJeOpItmLott1().executeQuery();
        //this.getMnfJeOpItm1().executeQuery();
    this.getDBTransaction().postChanges();
    }
   
    public void InsertIntoJeItmLotBinFromRqmtVw() {
        System.out.println("Inner Insert Function:=================================");
        ViewObjectImpl mtlItm = this.getMnfJeOpItm1();
        ViewObjectImpl mtlBin = this.getMnfJeOpItmBin1();

        ViewObjectImpl mtlLot = this.getMnfJeOpItmLott1();
        Row currItm = mtlItm.getCurrentRow();

        ViewObject mnfJe = this.getMnfJe1();
        Row jeRow = mnfJe.getCurrentRow();
        Number zero = new Number(0);
        ViewObjectImpl stkSummBin = this.getMNFJeOpItmBinRqmtVw1();
        Row[] binRow = this.getMNFJeOpItmBinRqmtVw1().getFilteredRows("ItmId", currItm.getAttribute("ItmId"));

        ArrayList<String> arrlist = new ArrayList<String>();

        if (binRow.length > 0) {
            for (Row r1 : binRow) {
                if (r1.getAttribute("transManualIssueQuantity") != null) {
                    if (((Number) r1.getAttribute("transManualIssueQuantity")).compareTo(zero) > 0) {
                        String lotId = r1.getAttribute("LotId").toString();
                        arrlist.add(lotId);
                    }
                }
            }
        }
        Set<String> lotset = new HashSet<String>(arrlist);

        Iterator itr = lotset.iterator();
        while (itr.hasNext()) {
            String lotId = itr.next().toString();
            Number lotQty = new Number(0);
            for (Row r1 : binRow) {
                if (r1.getAttribute("transManualIssueQuantity") != null) {
                    if (((Number) r1.getAttribute("transManualIssueQuantity")).compareTo(zero) > 0 &&
                        r1.getAttribute("LotId").toString().equals(lotId)) {
                        lotQty = lotQty.add((Number) r1.getAttribute("transManualIssueQuantity"));
                    }
                }
            }

            RowQualifier rowQualifier = new RowQualifier(mtlLot);
            rowQualifier.setWhereClause(" DocId ='" + currItm.getAttribute("DocId") + "' and ItmId = '" +
                                        currItm.getAttribute("ItmId") + "' and LotId = '" + lotId + "'");
            Row[] rows = mtlLot.getFilteredRows(rowQualifier);
            if (rows.length > 0) {
                for (Row r : rows) {
                    r.setAttribute("ItmQty", lotQty);
                    r.setAttribute("ItmQtyBs", lotQty);
                }
            } else {
                RowQualifier rq = new RowQualifier(stkSummBin);
                rq.setWhereClause("ItmId='" + currItm.getAttribute("ItmId"));
                Row binRows[] = stkSummBin.getFilteredRows(rq);

                Row instLot = mtlLot.createRow();
                mtlLot.insertRow(instLot);
                instLot.setAttribute("LotId", lotId);
                instLot.setAttribute("ItmQty", lotQty);
                instLot.setAttribute("ItmQtyBs", lotQty);
                instLot.setAttribute("ItmUom", currItm.getAttribute("ItmUom"));
                instLot.setAttribute("WhId", jeRow.getAttribute("WhId"));
                BigDecimal avail = new BigDecimal(0);
                try {
                    String whId = jeRow.getAttribute("WhId").toString();

                    avail = (BigDecimal) callStoredFunction(Types.NUMERIC, "MNF.FN_MNF_GET_ITM_LOT_PRICE(?,?,?,?,?,?,?)", new Object[] {
                                                            getCldId().toString(), getSlocId(), getOrgId().toString(),
                                                            whId, currItm.getAttribute("ItmId"), lotId,
                                                            jeRow.getAttribute("FyId")
                    });

                } catch (Exception e) {
                    e.printStackTrace();
                }
                if (avail.compareTo(new BigDecimal(-1)) == 0) {
                    avail = new BigDecimal(0);
                }
                Number multiply = new Number(0);
                try {
                    multiply = (Number) lotQty.multiply(new Number(avail));
                } catch (SQLException e) {
                    e.printStackTrace();
                }
                instLot.setAttribute("ItmLotCost", multiply);

                //mtlLot.executeQuery();
            }
        }
        if (binRow.length > 0) {
            for (Row rr : binRow) {
                if (rr.getAttribute("transManualIssueQuantity") != null) {
                    if (((Number) rr.getAttribute("transManualIssueQuantity")).compareTo(zero) >= 0) {
                        RowQualifier rowQualifier = new RowQualifier(mtlBin);
                        rowQualifier.setWhereClause(" DocId ='" + currItm.getAttribute("DocId") + "' and ItmId = '" +
                                                    currItm.getAttribute("ItmId") + "' and LotId = '" +
                                                    rr.getAttribute("LotId").toString() + "' and BinId = '" +
                                                    rr.getAttribute("BinId").toString() + "'");
                        Row[] rows = mtlBin.getFilteredRows(rowQualifier);
                        if (rows.length > 0) {
                            for (Row r : rows) {
                                if (((Number) rr.getAttribute("transManualIssueQuantity")).compareTo(zero) == 0) {
                                    r.remove();
                                } else if (((Number) rr.getAttribute("transManualIssueQuantity")).compareTo(zero) > 0) {
                                    r.setAttribute("ItmQty", rr.getAttribute("transManualIssueQuantity"));
                                    r.setAttribute("ItmQtyBs", rr.getAttribute("transManualIssueQuantity"));
                                }
                            }
                        } else {
                            if (((Number) rr.getAttribute("transManualIssueQuantity")).compareTo(zero) > 0) {
                                Row binInst = mtlBin.createRow();
                                binInst.setAttribute("LotId", rr.getAttribute("LotId"));
                                binInst.setAttribute("BinId", rr.getAttribute("BinId"));
                                binInst.setAttribute("ItmQty", rr.getAttribute("transManualIssueQuantity"));
                                binInst.setAttribute("ItmQtyBs", rr.getAttribute("transManualIssueQuantity"));
                                binInst.setAttribute("WhId", jeRow.getAttribute("WhId"));
                                binInst.setAttribute("ItmUom", currItm.getAttribute("ItmUom"));

                                mtlBin.insertRow(binInst);
                                //mtlBin.executeQuery();
                            }
                        }
                    }
                }
            }
        }
        //this.getMnfJeOpItmBin1().executeQuery();
        //this.getMnfJeOpItmLot1().executeQuery();
        //this.getMnfJeOpItm1().executeQuery();
        System.out.println("End of Insert Function : ===============================");
        this.getDBTransaction().postChanges();
    }
    
    private void release(){
        ViewObjectImpl impl = this.getMnfJe1();
        impl.getCurrentRow().setAttribute("JeStat", 74);
        System.out.println("setting status 74");
    }
    // Function which is not currently called..as the receipt is created from the function FN_MNF_INS_TO_MM_JE_ITM
    public String releaseJE(){
        System.out.println("releaseJE is called");
        String doc = "";
        String srcDoc = "";
        String srcType = "";
        String outputItmId = "";
        Integer opSrNo = 0;
        String opDoc = "";
        Number outputItmQty = new Number(0);
        Integer opStat = 0;
        String wh_id = "";
        Integer fy_id = 0;
        Integer req_area_id = 0;
        Timestamp doc_dt = new Timestamp();
        Timestamp dt = new Timestamp();
        if (this.getMnfJe1().getCurrentRow().getAttribute("DocId") != null) {
            doc = this.getMnfJe1().getCurrentRow().getAttribute("DocId").toString();
            doc_dt = (Timestamp)this.getMnfJe1().getCurrentRow().getAttribute("DocDt");
            wh_id = this.getMnfJe1().getCurrentRow().getAttribute("WhId").toString();
            fy_id = (Integer)this.getMnfJe1().getCurrentRow().getAttribute("FyId");
            req_area_id = (Integer)this.getMnfJe1().getCurrentRow().getAttribute("RqmtAreaId");
            srcDoc = this.getMnfJe1().getCurrentRow().getAttribute("DocId").toString();
            dt = (Timestamp) this.getMnfJe1().getCurrentRow().getAttribute("UsrIdCreateDt");
            outputItmId = this.getMnfJe1().getCurrentRow().getAttribute("OutptItmId").toString();
            outputItmQty = (Number) this.getMnfJe1().getCurrentRow().getAttribute("ActOutptItmQty");
            if (this.getLOVSourceOperations1().getFilteredRows("DocId", srcDoc).length > 1) {
                srcType =
                    this.getLOVSourceOperations1().getFilteredRows("DocId",
                                                                   srcDoc)[0].getAttribute("JcRcType").toString();
                opSrNo =
                    (Integer) this.getLOVSourceOperations1().getFilteredRows("DocId", srcDoc)[0].getAttribute("OpSrNo");
                opDoc =
                    this.getLOVSourceOperations1().getFilteredRows("DocId", srcDoc)[0].getAttribute("OpId").toString();
                opStat =
                    this.getLOVSourceOperations1().getFilteredRows("DocId", srcDoc)[0].getAttribute("OpStat") != null ?
                    (Integer) this.getLOVSourceOperations1().getFilteredRows("DocId",
                                                                             srcDoc)[0].getAttribute("OpStat") : 107;
            }
        }
        //Object level;
        try {
            /* level = callStoredFunction(Types.NUMERIC, "MNF.fn_mnf_UPD_DOC_OP_STAT(?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                               getCldId().toString(), getSlocId(), getHoId().toString(), getOrgId().toString(), srcType,
                               srcDoc, opDoc, opSrNo, getUsrId(), dt, opStat, outputItmId, outputItmQty,"Y"
            }); */
//            callStoredFunction(Types.NUMERIC, "MNF.FN_MNF_TO_MM_JE_ITM(?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
//                                           getCldId().toString(), getSlocId(), getHoId().toString(), getOrgId().toString(), wh_id, fy_id,
//                                           doc, doc_dt, srcType, getUsrId(), dt, req_area_id
//            });
            Integer id = (Integer) this.getLovStoreTrnasfer1().getCurrentRow().getAttribute("TransAttId");
            //Integer id = 123;
            callStoredFunction(Types.VARCHAR, "MNF.fn_mnf_ins_mm_je_to_rcpt(?,?,?,?,?,?,?,?,?)", new Object[] {
                                           getCldId().toString(), getSlocId(), getOrgId().toString(), 
                                           wh_id, doc, fy_id, getUsrId(),id,req_area_id
            });
            //release();
        } catch (Exception ex) {
            showFacesMsg("Erro in Function", null, FacesMessage.SEVERITY_ERROR, null);
            ex.printStackTrace();
        }
        return null;
    }


    public int chkNmDuplicate(String val){
            System.out.println("Value in AM "+val);
            ViewObjectImpl pa=this.getLOVParameters1();
            Row[] row = pa.getFilteredRows("ParamNme", val);
            if(row.length>0){
            String paramId = row[0].getAttribute("ParamId").toString();;
            ViewObjectImpl par=this.getMNFJeDowntimeParam1();
            Row r=this.getMNFJeDowntimeParam1().getCurrentRow();
            String docId =(String)r.getAttribute("DocId");
            System.out.println( docId);
            RowQualifier rq= new RowQualifier(par);
            rq.setWhereClause("CldId='"+getCldId()+"' and SlocId="+getSlocId()+" and OrgId='"+getOrgId()+
                                      "' and DocId='"+docId+"' and ParamId='"+paramId+"'");
                    System.out.println(rq.getExprStr());
                    Row r1[]=par.getFilteredRows(rq);
                    System.out.println(r1.length);
                    if(r1.length>0) {
                        for(Row dupliRow : r1)
                        {
                        if(dupliRow.equals(r))
                        {
                        System.out.println("Same Row");
                        }else
                        return 1;
                        }
                    }
            }
                 return 0;
            
        }
    public String QcCheck(){
        String out = "";
        try {
            out = (String) callStoredFunction(Types.VARCHAR, "MM.MM_GET_QC_REQD_FLG(?,?,?,?,?)", new Object[] {
                                              getCldId().toString(), getSlocId(), getHoId().toString(),
                                              this.getMnfJe1().getCurrentRow().getAttribute("OutptItmId"),
                                              getOrgId().toString()
            });

        } catch (Exception e) {
            e.printStackTrace();
        }
        return out;
    }
    
    public oracle.jbo.domain.Number mnfTomm(){
        adfLog.info("mnfTomm is called");
        ViewObjectImpl impl = this.getMnfJe1();
        Row cRow = impl.getCurrentRow();
        Timestamp docDt = (oracle.jbo.domain.Timestamp)cRow.getAttribute("DocDt");
        Timestamp usrDt = (oracle.jbo.domain.Timestamp)cRow.getAttribute("UsrIdCreateDt");
        Number outVal = new Number(0);
        BigDecimal out = new BigDecimal(0.0);
        try {
            out = (BigDecimal) callStoredFunction(Types.NUMERIC, "MNF.FN_MNF_TO_MM_JE_ITM(?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                              getCldId().toString(), getSlocId(), getHoId().toString(),getOrgId().toString(),
                     cRow.getAttribute("WhId"),cRow.getAttribute("FyId"),cRow.getAttribute("DocId"),
                     docDt,cRow.getAttribute("JeBasis"),cRow.getAttribute("UsrIdCreate"),
                                              usrDt,(Integer)cRow.getAttribute("RqmtAreaId")                   
            });
            outVal = new Number(out);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return outVal;
    }
    public void changeStatus(int value){
        ViewObjectImpl imp = this.getMnfJe1();
        Row cRow = imp.getCurrentRow();
        String docId = (String)cRow.getAttribute("DocId");
        String opId = (String)cRow.getAttribute("transOpId");
        String itmId = (String)cRow.getAttribute("OutptItmId");
        ViewObjectImpl impl = this.getMnfJeOp1();
        RowQualifier rq = new RowQualifier(impl);
        rq.setWhereClause("CldId='"+getCldId()+"' and SlocId="+getSlocId()+" and OrgId='"+getOrgId()+"' and HoOrgId='"+getHoId()+
                                  "' and DocId='"+docId+"' and OpId='"+opId+"' and OutptItmId='"+itmId+"'");
        Row[] filteredRows = impl.getFilteredRows(rq);
        if(filteredRows.length>0){
            filteredRows[0].setAttribute("OpStat", value);
        }
    }

    /**
     * Container's getter for storeTransfer1.
     * @return storeTransfer1
     */
    public ViewObjectImpl getstoreTransfer1() {
        return (ViewObjectImpl) findViewObject("storeTransfer1");
    }

    /**
     * Container's getter for LovStoreTrnasfer1.
     * @return LovStoreTrnasfer1
     */
    public LovStoreTrnasferVOImpl getLovStoreTrnasfer1() {
        return (LovStoreTrnasferVOImpl) findViewObject("LovStoreTrnasfer1");
    }
//    public Number getTotalManualIssueQtySr() {
//        MNFJeOpItmSrRqmtVwVOImpl fsr = this.getMNFJeOpItmSrRqmtVw1();
//        RowSetIterator itr = fsr.createRowSetIterator(null);
//        while(itr.hasNext()){
//            Row next = itr.next();
//            System.out.println("Attribute found " + next.getAttribute("transManualSelectSrNoStk"));
//        }
//        itr.closeRowSetIterator();
//        int totalCount = fsr.getRowCount();
//        fsr.setRangeSize(totalCount);
//        Row[] rr = fsr.getAllRowsInRange();
//        System.out.println("Row Count : " + rr.length);
//        Number totIssue = new Number(0);
//        for (Row r : rr) 
//        {
//            System.out.println("Attribute found " + r.getAttribute("transManualSelectSrNoStk"));
//            if (r.getAttribute("transManualSelectSrNoStk") != null) 
//            {
//                if ("Y".equalsIgnoreCase(r.getAttribute("transManualSelectSrNoStk").toString())) 
//                {
//                    totIssue = totIssue.add(new Number(1));
//                }
//            }
//        }
//        return totIssue;
//    }
    
     /*------------------------Validation for check Lot Entry of Input Items-------------------------*/
    public String CheckforInputItmLot() {
        Row cR = this.getMnfJe1().getCurrentRow();
        //this.getMnfJeOpInputItm()
        RowSetIterator csItr = this.getMnfJeOpItm1().createRowSetIterator(null);
        //RowSetIterator kritr = this.getMnfJeOpItm3().createRowSetIterator(null);
        //RowSetIterator csItr = this.getMnfJeOpItm1().createRowSetIterator(null);
        ArrayList<String> al = new ArrayList<String>();
        ArrayList<String> outItm = new ArrayList<String>();
        while (csItr.hasNext()) {
            Row nxt = csItr.next();
            System.out.println("Item Id : "+nxt.getAttribute("ItmType"));
            Object itmId = nxt.getAttribute("ItmId");
            if(Integer.parseInt(nxt.getAttribute("ItmType").toString())==67){
            outItm.add(itmId.toString());
            }else{
                al.add(itmId.toString());
            }
        }
        System.out.println("Size before" + al.size());
        Iterator<String> iterator = outItm.listIterator();
        while (iterator.hasNext()) {
            Object itm = iterator.next();
            //Object itm = nt.getAttribute("ItmId");
            al.remove(itm);
        }
        for (String val : al) {
            ViewObjectImpl voVal = this.getMnfJeOpItmLott2();
           // voVal.executeQuery();
            System.out.println("Row count: "+voVal.getRowCount());
            RowQualifier rq = new RowQualifier(voVal);
            rq.setWhereClause("SlocId =" + cR.getAttribute("SlocId") + " and CldId='" + cR.getAttribute("CldId") +
                              "' and OrgId='" + cR.getAttribute("OrgId") + "' and HoOrgId='" +
                              cR.getAttribute("HoOrgId") + "' and DocId='" + cR.getAttribute("DocId") +
                              "' and ItmId='" + val + "'");
            System.out.println("Query string: "+rq.getExprStr());
            Row fltrdrow[] = voVal.getFilteredRows(rq);
            System.out.println(fltrdrow.length);
            if (fltrdrow.length <= 0) {
                ViewObjectImpl il = this.getLOVItemNmSearch1();
                il.setNamedWhereClauseParam("BindCldId", cR.getAttribute("CldId"));
                il.setNamedWhereClauseParam("BindHoOrgId", cR.getAttribute("HoOrgId"));
                il.setNamedWhereClauseParam("BindItemId", val);
                il.setNamedWhereClauseParam("BindSlocId", Integer.parseInt(cR.getAttribute("SlocId").toString()));
                il.executeQuery();
                Row[] aR = il.getAllRowsInRange();
                if (aR.length > 0) {
                    return aR[0].getAttribute("ItmDesc").toString();
                }
            }
        }
        return "checked";
    }


    /**
     * Container's getter for LovMnfJeOpItmLot1.
     * @return LovMnfJeOpItmLot1
     */
    public ViewObjectImpl getLovMnfJeOpItmLot1() {
        return (ViewObjectImpl) findViewObject("LovMnfJeOpItmLot1");
    }

    /**
     * Container's getter for LOVItemNmSearch1.
     * @return LOVItemNmSearch1
     */
    public ViewObjectImpl getLOVItemNmSearch1() {
        return (ViewObjectImpl) findViewObject("LOVItemNmSearch1");
    }


    /**
     * Container's getter for MnfJeOpItmLott2.
     * @return MnfJeOpItmLott2
     */
    public ViewObjectImpl getMnfJeOpItmLott2() {
        return (ViewObjectImpl) findViewObject("MnfJeOpItmLott2");
    }
    
    /*------------------------Validation for check Lot Entry of Output Items-------------------------*/
    public String CheckforOutputItmLot() {
        String SerialFlg = "";
       Row cR = this.getMnfJe1().getCurrentRow();
       //RowSetIterator csItr = this.getMnfJeOpItm3().createRowSetIterator(null);
       ArrayList<String> al = new ArrayList<String>();
       al.add(cR.getAttribute("OutptItmId").toString());
       /* while (csItr.hasNext()) {
           Row nxt = csItr.next();
           System.out.println("Item Id : "+nxt.getAttribute("ItmType"));
           Object itmId = nxt.getAttribute("ItmId");
           if(cR.getAttribute("OutptItmId").toString().equals(itmId.toString()))
           al.add(itmId.toString());
       } */
       for (String val : al) {
           ViewObjectImpl it = this.getLOVItemNmSearch1();
           it.setNamedWhereClauseParam("BindCldId", cR.getAttribute("CldId"));
           it.setNamedWhereClauseParam("BindHoOrgId", cR.getAttribute("HoOrgId"));
           it.setNamedWhereClauseParam("BindItemId", val);
           it.setNamedWhereClauseParam("BindSlocId", Integer.parseInt(cR.getAttribute("SlocId").toString()));
           it.executeQuery();
           Row[] aS = it.getAllRowsInRange();
           if (aS.length > 0) {
            SerialFlg = aS[0].getAttribute("SerializedFlg").toString();
           }
           System.out.println("Serialized Flg : "+SerialFlg);
           ViewObjectImpl voVal = this.getMNFJeItmStkLot2();
           System.out.println("Row count: "+voVal.getRowCount());
           RowQualifier rq = new RowQualifier(voVal);
           rq.setWhereClause("SlocId =" + cR.getAttribute("SlocId") + " and CldId='" + cR.getAttribute("CldId") +
                             "' and OrgId='" + cR.getAttribute("OrgId") + "' and HoOrgId='" +
                             cR.getAttribute("HoOrgId") + "' and DocId='" + cR.getAttribute("DocId") +
                             "' and ItmId='" + val + "'");
           System.out.println("Query string: "+rq.getExprStr());
           Row fltrdrow[] = voVal.getFilteredRows(rq);
           System.out.println(fltrdrow.length);
           if (fltrdrow.length <= 0) {
               ViewObjectImpl il = this.getLOVItemNmSearch1();
               il.setNamedWhereClauseParam("BindCldId", cR.getAttribute("CldId"));
               il.setNamedWhereClauseParam("BindHoOrgId", cR.getAttribute("HoOrgId"));
               il.setNamedWhereClauseParam("BindItemId", val);
               il.setNamedWhereClauseParam("BindSlocId", Integer.parseInt(cR.getAttribute("SlocId").toString()));
               il.executeQuery();
               Row[] aR = il.getAllRowsInRange();
               if (aR.length > 0) {
                   return aR[0].getAttribute("ItmDesc").toString();
               }
           }
       }
       return "checked";
    }

    /**
     * Container's getter for MNFJeItmStkLot2.
     * @return MNFJeItmStkLot2
     */
    public ViewObjectImpl getMNFJeItmStkLot2() {
        return (ViewObjectImpl) findViewObject("MNFJeItmStkLot2");
    }
    
    public int chkSrDuplicate(String val){
                   System.out.println("Value in AM "+val);
                   String cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
                   Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
                   String hoId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
                   String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
                   RowSetIterator csItr = this.getMnfJeOpItm1().createRowSetIterator(null);
                   String itmId = "";
                   while (csItr.hasNext()) {
                       Row nxt = csItr.next();
                       Object id = nxt.getAttribute("ItmId");
                       if(Integer.parseInt(nxt.getAttribute("ItmType").toString())==67){
                       itmId = id.toString();
                       }
                   }
                       csItr.closeRowSetIterator();
                   System.out.println("Itm Id : "+itmId);
                   ViewObjectImpl se=this.getMNFJeItmStkLot2();
                   RowQualifier rq= new RowQualifier(se);
                   rq.setWhereClause("CldId='"+cldId+"' and SlocId="+slocId+" and OrgId='"+orgId+
                                   "' and HoOrgId='"+hoId+"' and ItmId='"+itmId+"' and SrNo='"+val+"'");
                           System.out.println(rq.getExprStr());
                           Row r1[]=se.getFilteredRows(rq);
                           System.out.println(r1.length);
                           if(r1.length>0) {
                               return 1;
                           }
                        return 0;
               }
    public void deleteStkLot(){
        adfLog.info("in the deleteStkLot");
        String srno="0";
          Row cR = this.getMnfJe1().getCurrentRow();
          ViewObjectImpl impl = this.getMNFJeItmStkLot2();
//          adfLog.info("Key::"+impl.getCurrentRow().getKey());
//          impl.getCurrentRow().remove();
//          impl.executeQuery(); 
          RowQualifier rq= new RowQualifier(impl);
          rq.setWhereClause("CldId='"+getCldId()+"' AND SlocId="+getSlocId()+" AND OrgId='"+getOrgId()+
                          "' AND HoOrgId='"+getHoId()+"' AND DocId='"+cR.getAttribute("DocId")+
                          "' AND SrNo='"+srno+"'");
          adfLog.info(rq.getExprStr());
          
          Row[] rr=impl.getFilteredRows(rq);
          //adfLog.info("Value of Length array:"+rr.length);
          if(rr.length>0) {
              //adfLog.info("Value of Length array:"+rr.length);
              rr[0].remove();
          }
          getDBTransaction().commit();
      }
    
    public Number checkYearFyId(){
                BigDecimal pdoFyId = new BigDecimal(0.0);
                String cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
                String usrOrg = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
                try {
                    pdoFyId = (BigDecimal) callStoredFunction(Types.NUMERIC, "APP.GET_ORG_FY_ID(?,?,?)", new Object[] {
                                                          cldId, usrOrg, new Timestamp(System.currentTimeMillis())
                    });
                } catch (NumberFormatException nfe) {
                    // TODO: Add catch code
                    nfe.printStackTrace();
                }
                //System.out.println(" financial id   " + pdoFyId );
                System.out.println(pdoFyId);
                Number val = null;
            try {
                val = new Number(pdoFyId);
            } catch (SQLException e) {
            }
            return val;
        }


    /**
     * Container's getter for MnfJeOpItm2.
     * @return MnfJeOpItm2
     */
    public MnfJeOpItmVOImpl getMnfJeOpItm2() {
        return (MnfJeOpItmVOImpl) findViewObject("MnfJeOpItm2");
    }

    /**
     * Container's getter for MnfJeOpToMnfJeOpItmVL2.
     * @return MnfJeOpToMnfJeOpItmVL2
     */
    public ViewLinkImpl getMnfJeOpToMnfJeOpItmVL2() {
        return (ViewLinkImpl) findViewLink("MnfJeOpToMnfJeOpItmVL2");
    }

    /**
     * Container's getter for MnfJeOpItm3.
     * @return MnfJeOpItm3
     */
    public MnfJeOpItmVOImpl getMnfJeOpItm3() {
        return (MnfJeOpItmVOImpl) findViewObject("MnfJeOpItm3");
    }

    /**
     * Container's getter for MnfJeOpToMnfJeOpItmVL3.
     * @return MnfJeOpToMnfJeOpItmVL3
     */
    public ViewLinkImpl getMnfJeOpToMnfJeOpItmVL3() {
        return (ViewLinkImpl) findViewLink("MnfJeOpToMnfJeOpItmVL3");
    }

    /**
     * Container's getter for MnfJeOpItm4.
     * @return MnfJeOpItm4
     */
    public MnfJeOpItmVOImpl getMnfJeOpItm1() {
        return (MnfJeOpItmVOImpl) findViewObject("MnfJeOpItm1");
    }

    /**
     * Container's getter for MnfJeToMnfJeOpItmVL1.
     * @return MnfJeToMnfJeOpItmVL1
     */
    public ViewLinkImpl getMnfJeToMnfJeOpItmVL1() {
        return (ViewLinkImpl) findViewLink("MnfJeToMnfJeOpItmVL1");
    }

    /**
     * Container's getter for MNFJeItmStkLot3.
     * @return MNFJeItmStkLot3
     */
    public ViewObjectImpl getMNFJeItmStkLot1() {
        return (ViewObjectImpl) findViewObject("MNFJeItmStkLot1");
    }

    /**
     * Container's getter for MNFJeOpItmToMNFJeOpItmStkLotVL2.
     * @return MNFJeOpItmToMNFJeOpItmStkLotVL2
     */
    public ViewLinkImpl getMNFJeOpItmToMNFJeOpItmStkLotVL1() {
        return (ViewLinkImpl) findViewLink("MNFJeOpItmToMNFJeOpItmStkLotVL1");
    }

    /**
     * Container's getter for MNFJeItmStkSerial2.
     * @return MNFJeItmStkSerial2
     */
    public ViewObjectImpl getMNFJeItmStkSerial1() {
        return (ViewObjectImpl) findViewObject("MNFJeItmStkSerial1");
    }

    /**
     * Container's getter for MNFJeOpItmToMNFJeOpItmStkSerialVL2.
     * @return MNFJeOpItmToMNFJeOpItmStkSerialVL2
     */
    public ViewLinkImpl getMNFJeOpItmToMNFJeOpItmStkSerialVL1() {
        return (ViewLinkImpl) findViewLink("MNFJeOpItmToMNFJeOpItmStkSerialVL1");
    }

    /**
     * Container's getter for MNFJeOpItmBinRqmtVw2.
     * @return MNFJeOpItmBinRqmtVw2
     */
    public MNFJeOpItmBinRqmtVwVOImpl getMNFJeOpItmBinRqmtVw1() {
        return (MNFJeOpItmBinRqmtVwVOImpl) findViewObject("MNFJeOpItmBinRqmtVw1");
    }

    /**
     * Container's getter for MNFJeOpItmToMNFJeOpItmBinRqmtVL2.
     * @return MNFJeOpItmToMNFJeOpItmBinRqmtVL2
     */
    public ViewLinkImpl getMNFJeOpItmToMNFJeOpItmBinRqmtVL1() {
        return (ViewLinkImpl) findViewLink("MNFJeOpItmToMNFJeOpItmBinRqmtVL1");
    }

    /**
     * Container's getter for MnfJeOpItmBin2.
     * @return MnfJeOpItmBin2
     */
    public ViewObjectImpl getMnfJeOpItmBin1() {
        return (ViewObjectImpl) findViewObject("MnfJeOpItmBin1");
    }

    /**
     * Container's getter for MnfJeOpItmToMnfJeOpItmBinVL2.
     * @return MnfJeOpItmToMnfJeOpItmBinVL2
     */
    public ViewLinkImpl getMnfJeOpItmToMnfJeOpItmBinVL1() {
        return (ViewLinkImpl) findViewLink("MnfJeOpItmToMnfJeOpItmBinVL1");
    }

    /**
     * Container's getter for MnfJeOpItmBinVw2.
     * @return MnfJeOpItmBinVw2
     */
    public MnfJeOpItmBinVwVOImpl getMnfJeOpItmBinVw1() {
        return (MnfJeOpItmBinVwVOImpl) findViewObject("MnfJeOpItmBinVw1");
    }

    /**
     * Container's getter for MNFJeOpItmToMNFJeOpItmBinVwVL2.
     * @return MNFJeOpItmToMNFJeOpItmBinVwVL2
     */
    public ViewLinkImpl getMNFJeOpItmToMNFJeOpItmBinVwVL1() {
        return (ViewLinkImpl) findViewLink("MNFJeOpItmToMNFJeOpItmBinVwVL1");
    }

    /**
     * Container's getter for MNFJeOpItmLotRqmtVw2.
     * @return MNFJeOpItmLotRqmtVw2
     */
    public MNFJeOpItmLotRqmtVwVOImpl getMNFJeOpItmLotRqmtVw1() {
        return (MNFJeOpItmLotRqmtVwVOImpl) findViewObject("MNFJeOpItmLotRqmtVw1");
    }

    /**
     * Container's getter for MNFJeOpItmToMNFJeOpItmLotRqmtVL2.
     * @return MNFJeOpItmToMNFJeOpItmLotRqmtVL2
     */
    public ViewLinkImpl getMNFJeOpItmToMNFJeOpItmLotRqmtVL1() {
        return (ViewLinkImpl) findViewLink("MNFJeOpItmToMNFJeOpItmLotRqmtVL1");
    }

    /**
     * Container's getter for MnfJeOpItmLott3.
     * @return MnfJeOpItmLott3
     */
    public ViewObjectImpl getMnfJeOpItmLott1() {
        return (ViewObjectImpl) findViewObject("MnfJeOpItmLott1");
    }

    /**
     * Container's getter for MnfJeOpItmToLotVL2.
     * @return MnfJeOpItmToLotVL2
     */
    public ViewLinkImpl getMnfJeOpItmToLotVL1() {
        return (ViewLinkImpl) findViewLink("MnfJeOpItmToLotVL1");
    }

    /**
     * Container's getter for MnfJeOpItmLot2.
     * @return MnfJeOpItmLot2
     */
    public ViewObjectImpl getMnfJeOpItmLot1() {
        return (ViewObjectImpl) findViewObject("MnfJeOpItmLot1");
    }

    /**
     * Container's getter for MnfJeOpItmToMnfJeOpItmLotVL2.
     * @return MnfJeOpItmToMnfJeOpItmLotVL2
     */
    public ViewLinkImpl getMnfJeOpItmToMnfJeOpItmLotVL1() {
        return (ViewLinkImpl) findViewLink("MnfJeOpItmToMnfJeOpItmLotVL1");
    }

    /**
     * Container's getter for MnfJeOpItmLotVw2.
     * @return MnfJeOpItmLotVw2
     */
    public MnfJeOpItmLotVwVOImpl getMnfJeOpItmLotVw1() {
        return (MnfJeOpItmLotVwVOImpl) findViewObject("MnfJeOpItmLotVw1");
    }

    /**
     * Container's getter for MNFJeOpItmToMNFJeOpItmLotVwVL2.
     * @return MNFJeOpItmToMNFJeOpItmLotVwVL2
     */
    public ViewLinkImpl getMNFJeOpItmToMNFJeOpItmLotVwVL1() {
        return (ViewLinkImpl) findViewLink("MNFJeOpItmToMNFJeOpItmLotVwVL1");
    }

    /**
     * Container's getter for MNFJeOpItmSrRqmtVw2.
     * @return MNFJeOpItmSrRqmtVw2
     */
    public MNFJeOpItmSrRqmtVwVOImpl getMNFJeOpItmSrRqmtVw1() {
        return (MNFJeOpItmSrRqmtVwVOImpl) findViewObject("MNFJeOpItmSrRqmtVw1");
    }

    /**
     * Container's getter for MNFJeOpItmToMNFJeOpItmSrRqmtVL2.
     * @return MNFJeOpItmToMNFJeOpItmSrRqmtVL2
     */
    public ViewLinkImpl getMNFJeOpItmToMNFJeOpItmSrRqmtVL1() {
        return (ViewLinkImpl) findViewLink("MNFJeOpItmToMNFJeOpItmSrRqmtVL1");
    }

    /**
     * Container's getter for MnfJeOpItmSr2.
     * @return MnfJeOpItmSr2
     */
    public ViewObjectImpl getMnfJeOpItmSr1() {
        return (ViewObjectImpl) findViewObject("MnfJeOpItmSr1");
    }

    /**
     * Container's getter for MnfJeOpItmToMnfJeOpItmSrVL2.
     * @return MnfJeOpItmToMnfJeOpItmSrVL2
     */
    public ViewLinkImpl getMnfJeOpItmToMnfJeOpItmSrVL1() {
        return (ViewLinkImpl) findViewLink("MnfJeOpItmToMnfJeOpItmSrVL1");
    }

    /**
     * Container's getter for MnfJeOpItmSrVw2.
     * @return MnfJeOpItmSrVw2
     */
    public MnfJeOpItmSrVwVOImpl getMnfJeOpItmSrVw1() {
        return (MnfJeOpItmSrVwVOImpl) findViewObject("MnfJeOpItmSrVw1");
    }

    /**
     * Container's getter for MNFJeOpItmToMNFJeOpItmSrVwVL2.
     * @return MNFJeOpItmToMNFJeOpItmSrVwVL2
     */
    public ViewLinkImpl getMNFJeOpItmToMNFJeOpItmSrVwVL1() {
        return (ViewLinkImpl) findViewLink("MNFJeOpItmToMNFJeOpItmSrVwVL1");
    }
    
    public String findItmNm(String itmNm) {
        String nm = "";
        ViewObject itmVO = this.getLOVItemNmSearch1();
        itmVO.setNamedWhereClauseParam("BindCldId", getCldId().toString());
        itmVO.setNamedWhereClauseParam("BindHoOrgId", getHoId().toString());
        itmVO.setNamedWhereClauseParam("BindItemId", itmNm);
        itmVO.setNamedWhereClauseParam("BindSlocId", getSlocId());
        itmVO.executeQuery();
        Row[] rows = itmVO.getAllRowsInRange();
        if(rows.length>0){
            nm = rows[0].getAttribute("ItmDesc").toString();
        }
        System.out.println("Item Name : "+nm);
        return nm;
    }

    /**
     * Container's getter for MnfJeOpQcParam1.
     * @return MnfJeOpQcParam1
     */
    public ViewObjectImpl getMnfJeOpQcParam1() {
        return (ViewObjectImpl) findViewObject("MnfJeOpQcParam1");
    }

    /**
     * Container's getter for MnfJeToQcParamVL1.
     * @return MnfJeToQcParamVL1
     */
    public ViewLinkImpl getMnfJeToQcParamVL1() {
        return (ViewLinkImpl) findViewLink("MnfJeToQcParamVL1");
    }
    
    public Number statusUpdate(){
        Number out=null;
        adfLog.info("statucUpdate Function called ");
//        this.getDBTransaction().postChanges();
        String jeDocId = this.getMnfJe1().getCurrentRow().getAttribute("DocId").toString();
       adfLog.info("Value of jeDocId:::"+jeDocId);
//        String docId=(String)this.getMnfJeSrc1().getCurrentRow().getAttribute("DocIdSrc");
//        int docTySrc=Integer.parseInt(this.getMnfJeSrc1().getCurrentRow().getAttribute("DocTypeSrc").toString());
//        adfLog.info("docId::"+docId+"docTySrc::"+docTySrc);
       ///Integer count1=(Integer)this.getMnfJeSrc1().getRowCount();
        //Integer count=(Integer)this.getMnfJeSrc1().getRowCount();
        //adfLog.info("count1::"+count1+"count::"+count);
        Row[] row = this.getMnfJeSrc1().getFilteredRows("DocId", jeDocId);
        //adfLog.info("value of row:::"+row.length);
        //Row[] row1 = this.getMnfJeSrc2().getFilteredRows("DocId", jeDocId);
        //adfLog.info("value of row1::"+row1.length);
       if(row.length>0){
        String docId = row[0].getAttribute("DocIdSrc").toString();
        int docTySrc =Integer.parseInt(row[0].getAttribute("DocTypeSrc").toString());
        adfLog.info("docId::"+docId+"docTySrc::"+docTySrc);
        BigDecimal pdoFyId = new BigDecimal(0.0);
        try {
            pdoFyId = (BigDecimal) callStoredFunction(Types.NUMERIC, "MNF.fn_mnf_je_to_src_back_upd_stat(?,?,?,?,?,?)", new Object[] {
                                              getCldId().toString(), getSlocId(), getHoId().toString(), getOrgId().toString(),
                                              docId, docTySrc
            });
            out = new Number(pdoFyId);
        }catch (Exception nfe) {
            nfe.printStackTrace();
        }
        }
        System.out.println("Function :------------------------------------ "+out);
        return out;
    }
    public void filterCurrentR(){
        Row cRow = this.getMnfJe1().getCurrentRow();
        String doc = (String)cRow.getAttribute("DocId");
        String itm = (String)cRow.getAttribute("OutptItmId");
        ViewObjectImpl se = this.getMnfJeOpItm1();
        RowQualifier rq= new RowQualifier(se);
        rq.setWhereClause("CldId='"+getCldId()+"' and SlocId="+getSlocId()+" and OrgId='"+getOrgId()+
                        "' and HoOrgId='"+getHoId()+"' and ItmId='"+itm+"' and DocId='"+doc+
                        "' and ItmType="+67+"");
        Row r1[]=se.getFilteredRows(rq);
        String opId = (String)r1[0].getAttribute("OpId");
        Integer sr = Integer.parseInt(r1[0].getAttribute("OpSrNo").toString());
        String pdoId = (String)r1[0].getAttribute("PdoId");
        ViewObjectImpl itm1 = this.getMnfJeOpItm1();
        System.out.println(itm1.getKeyAttributeDefs());
        System.out.println(itm1.getByKeyFinderRS());
        Key key = new Key(new Object[] { getCldId().toString(),doc,getHoId().toString(),itm,67,
                                         opId,sr,getOrgId().toString(),pdoId,getSlocId()});
        RowSetIterator rowSetIterator = itm1.getRowSetIterator();
        Row row = rowSetIterator.findByKey(key, 1)[0];
        rowSetIterator.setCurrentRow(row);
    }

    /**
     * Container's getter for LovAllOpDescNmVO1.
     * @return LovAllOpDescNmVO1
     */
    public ViewObjectImpl getLovAllOpDescNmVO1() {
        return (ViewObjectImpl) findViewObject("LovAllOpDescNmVO1");
    }

    /**
     * Container's getter for LOVAllOPDescVO1.
     * @return LOVAllOPDescVO1
     */
    public ViewObjectImpl getLOVAllOPDescVO1() {
        return (ViewObjectImpl) findViewObject("LOVAllOPDescVO1");
    }
    
    public AppCostCenterServiceAMImpl getAppAM() {
            String appModuleName = "appCostCenterSevice.model.service.AppCostCenterServiceAM";
            String appModuleConfig = "AppCostCenterServiceAMLocal";
            return (AppCostCenterServiceAMImpl) Configuration.createRootApplicationModule(appModuleName, appModuleConfig);
        }


        public void releaseAppAM(AppCostCenterServiceAMImpl appCostCenter) {
            Configuration.releaseRootApplicationModule((ApplicationModule) appCostCenter, true);
        }

        @Override
        protected void finalize() throws Throwable {

            releaseAppAM(getAppAM());

            super.finalize();
        }


    /**
     * Container's getter for AppCcDocVO1.
     * @return AppCcDocVO1
     */
    public ViewObjectImpl getAppCcDocVO1() {
        return (ViewObjectImpl) findViewObject("AppCcDocVO1");
    }

    /**
     * Container's getter for AppCcVwVO1.
     * @return AppCcVwVO1
     */
    public ViewObjectImpl getAppCcVwVO1() {
        return (ViewObjectImpl) findViewObject("AppCcVwVO1");
    }
    
    
    /**
        * Method which will let us know whether cost center is applicable for this current document or not
        */
       public Boolean chkCcApplicableOrNot() {
           Boolean val = false;

           ViewObjectImpl appCcDocVO1 = this.getAppCcDocVO1();
           appCcDocVO1.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
           appCcDocVO1.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
           appCcDocVO1.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
           appCcDocVO1.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
           appCcDocVO1.setNamedWhereClauseParam("BindDocId", 26006);
           appCcDocVO1.executeQuery();

           Row[] allRowsInRange = appCcDocVO1.getAllRowsInRange();
           if (allRowsInRange.length > 0) {
               val = true;
           }

           return val;
       }
    
    /**
         * Method which will be called when user click on generate Cost Ceneter based on header wise
         */
        public void generateCostCenterHeaderWise() {
            if (chkCcApplicableOrNot()) {
                AppCostCenterServiceAMImpl amCC = getAppAM();
                /*
            * @param cldId
            * @param slocId
            * @param hoOrgId
            * @param orgId
            * @param tempId
            * @param tempSrc
            * @param docId
            * @param usrId
            * @param tempCcId
            * @param amount
            * @param pCcLevel1
            * @param pCcLevel2
            * @param pCcLevel3
            * @param pCcLevel4
            * @param pCcLevel5
            */
                MnfJeVOImpl impl = this.getMnfJe1();
                Row currentRow = impl.getCurrentRow();

                if (currentRow != null) {
                    declareGlblValuesForCC();

                    amCC.generateCostCenterApp(EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                               EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                               currentRow.getAttribute("DocId").toString(), "H", 26006,
                                               EbizParams.GLBL_APP_USR(), currentRow.getAttribute("DocId").toString(),
                                               new Number(0), (String) resolvEl("#{pageFlowScope.P_CC_LEVEL1}"),
                                               (String) resolvEl("#{pageFlowScope.P_CC_LEVEL2}"),
                                               (String) resolvEl("#{pageFlowScope.P_CC_LEVEL3}"),
                                               (String) resolvEl("#{pageFlowScope.P_CC_LEVEL4}"),
                                               (String) resolvEl("#{pageFlowScope.P_CC_LEVEL5}"));

                }
            }
        }


        /**
         * Method which will set Global Parameter Values and will be called before opening AppCostCenterServicesTF
         */
        public void declareGlblValuesForCC() {
            ViewObjectImpl appCcVwVO1 = this.getAppCcVwVO1();
            appCcVwVO1.setRangeSize(-1);

            appCcVwVO1.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
            appCcVwVO1.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
            appCcVwVO1.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
            appCcVwVO1.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
            appCcVwVO1.setNamedWhereClauseParam("BindDocId", 26006);

            Row currentRow = this.getMnfJeOpItm1().getCurrentRow();
            if (currentRow != null) {
                for (int i = 1; i <= 5; i++) {
                    appCcVwVO1.setNamedWhereClauseParam("BindCcPos", i);
                    appCcVwVO1.executeQuery();

                    Row[] allRowsInRange = appCcVwVO1.getAllRowsInRange();
                    if (allRowsInRange.length > 0) {
                        String columnName = null;
                        for (Row r : allRowsInRange) {
                            AttributeDef[] attributeDef = this.getMnfJeOpItm1().getAttributeDefs();

                            for (int j = 0; j < attributeDef.length; j++) {
                                /*  System.out.println("j value is " + attributeDef[j].getColumnName());
                                System.out.println("------------ null value is " + r.getAttribute("DbobColNm"));
                                System.out.println("attributeDef[j].getColumnName().equalsIgnoreCase(r.getAttribute(\"DbobColNm\").toString()) " +
                                                   attributeDef[j].getColumnName().equals(r.getAttribute("DbobColNm")));
                                */
                                if (attributeDef[j].getColumnName() != null &&
                                    attributeDef[j].getColumnName().equals(r.getAttribute("DbobColNm"))) {
                                    columnName = attributeDef[j].getName();
                                }
                            }
                            System.out.println("Column Name is " + columnName);

                            if (columnName != null) {

                                System.out.println("i is " + i + " Cost center Value is " +
                                                   currentRow.getAttribute(columnName));


                                RequestContext.getCurrentInstance().getPageFlowScope().put("P_CC_LEVEL" + i,
                                                                                           currentRow.getAttribute(columnName));
                            }
                        }
                    } else {
                        System.out.println("i is" + i + " cost center value is null");

                        RequestContext.getCurrentInstance().getPageFlowScope().put("P_CC_LEVEL" + i, null);

                    }
                }
            }
        }
        
        
    /**
         * Method which will update amount present in cost center table
         */
        public void updateCostCenterAmt() {
            if (chkCcApplicableOrNot()) {
                System.out.println("Inside cost ceneter update amount method");
           Row currentRow=null;
                RowSetIterator  itr=this.getMnfJeOpItm1().createRowSetIterator(null);
                while(itr.hasNext()) {
                    currentRow=(Row)itr.next();
                    System.out.println("value ofcurrent::"+currentRow +"ccid::"+currentRow.getAttribute("CcId")+"itm amt::"+currentRow.getAttribute("ItmTotAmt"));
                if (currentRow != null && currentRow.getAttribute("CcId") != null &&
                    currentRow.getAttribute("ItmTotAmt") != null) {
                    AppCostCenterServiceAMImpl amCC = getAppAM();
                    System.out.println("Inside Am after cresting object");
                    if (amCC != null) {

                        declareGlblValuesForCC();

                        System.out.println("------------------ Not null");
                        Boolean amount =
                            amCC.updateCCAmount(EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                                EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                                currentRow.getAttribute("DocId").toString(), "L", 26006,
                                                EbizParams.GLBL_APP_USR(), currentRow.getAttribute("CcId").toString(),
                                                (Number) currentRow.getAttribute("ItmTotAmt"),
                                                (String) resolvEl("#{pageFlowScope.P_CC_LEVEL1}"),
                                                (String) resolvEl("#{pageFlowScope.P_CC_LEVEL2}"),
                                                (String) resolvEl("#{pageFlowScope.P_CC_LEVEL3}"),
                                                (String) resolvEl("#{pageFlowScope.P_CC_LEVEL4}"),
                                                (String) resolvEl("#{pageFlowScope.P_CC_LEVEL5}"));
                        if (!amount) {
                            ADFModelUtils.showFormattedFacesMessage("Update Cost Center",
                                                                    "Please Update Cost Center Values.",
                                                                    FacesMessage.SEVERITY_ERROR);
                        }
                    }
                }
                System.out.println("After calling Update method");
                }
                itr.closeRowSetIterator();
            }
           
        }
            
            
            /**
            * Method which will push data of Cost Center from TempCostCenter to SlsSoCostCenter Table
            */
            public void sendDateFromTempCcToSlsSoCc() {
                System.out.println("sendDateFromTempCcToSlsSoCc");
            if (chkCcApplicableOrNot()) {
            String result=(String)callStoredFunction(Types.VARCHAR, "APP.FN_SAVE_COST_CENTER(?,?,?,?,?,?,?,?)", new Object[] {
                               EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                               EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(), 26006,"MNF","MNF$JE$COST$CENTER",
                               this.getMnfJeOpItm1().getCurrentRow().getAttribute("DocId")
            });
            System.out.println("Value of result:::"+result);
            }
            
        }
    public void createStkItmRow() {
        adfLog.info("MmJeItmStk row created");
        ViewObjectImpl  lot=this.getMNFJeItmStkLot1();
        Row r=lot.createRow();
        lot.insertRow(r);
    }

    public String insertFinanaceEntry() {
        adfLog.info("in the insertFinanceEntry... ");
        String voucherId=null;
        Row mnfje = this.getMnfJe1().getCurrentRow();
        //Row jeRow = mnfRc.getCurrentRow();DocDt
        String result=(String) callStoredFunction(Types.VARCHAR, "MNF.fn_mnf_ins_je_gl_stk(?,?,?,?,?,?,?,?)", new Object[] {
                                                   getCldId().toString(), getSlocId(), getHoId().toString(),getOrgId().toString(),mnfje.getAttribute("DocId"),mnfje.getAttribute("DocDt"),EbizParams.GLBL_APP_USR(),new Timestamp(System.currentTimeMillis())
            });
        adfLog.info("value of result::"+result);
        voucherId=(String) callStoredFunction(Types.VARCHAR, "MNF.FN_MNF_GET_VOU_NO(?,?,?,?,?,?,?)", new Object[] {
                                                mnfje.getAttribute("DocId"),EbizParams.GLBL_APP_USR(),getOrgId().toString(),getSlocId(),getHoId().toString(),getCldId().toString(),"JE"});
        adfLog.info("value of VoucherId:::"+voucherId);
//        if(result!=null)
//        {
//        mnfje.setAttribute("arg0",result);
//        }
        return voucherId;
    }
    
    public String ChkQcRequired() {
           String dummy = "N";
           try {
               dummy = (String) callStoredFunction(Types.VARCHAR, "MM.MM_GET_QC_REQD_FLG(?,?,?,?,?)", new Object[] {
                                                   EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_HO_ORG_ID(),
                                                   (String)this.getMnfJe1().getCurrentRow().getAttribute("OutptItmId"),
                                                   EbizParams.GLBL_APP_USR_ORG() });
               System.out.println("Retun val is : " + dummy);
     
           } catch (Exception ex) {
           }
     
           return dummy;
    }

    /**
     * Container's getter for MNFJeItmStkLotVO1.
     * @return MNFJeItmStkLotVO1
     */
    public ViewObjectImpl getMNFJeItmStkLotVO2() {
        return (ViewObjectImpl) findViewObject("MNFJeItmStkLotVO2");
    }
}
