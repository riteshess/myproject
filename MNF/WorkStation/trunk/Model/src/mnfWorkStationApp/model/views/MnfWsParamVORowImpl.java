package mnfWorkStationApp.model.views;

import java.math.BigDecimal;

import javax.el.ELContext;
import javax.el.ValueExpression;

import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import mnfWorkStationApp.model.entities.MnfWsParamEOImpl;

import mnfWorkStationApp.model.services.MNFWorkStationAppAMImpl;

import oracle.adf.share.ADFContext;

import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.domain.NClobDomain;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Sep 06 14:14:19 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MnfWsParamVORowImpl extends ViewRowImpl {


    public static final int ENTITY_MNFWSPARAMEO = 0;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CldId,
        HoOrgId,
        ParamId,
        ParamVal,
        SlocId,
        UsrIdCreate,
        UsrIdCreateDt,
        UsrIdMod,
        UsrIdModDt,
        WsId,
        TransParamDesc,
        TransAttributeName,
        TransParamSet,
        TransParamSetId,
        TransParamSetType,
        TransSet,
        TransParamBasis,
        TransParamBasisID,
        TransKey,
        TlrncLower,
        TlrncType,
        TlrncUpper,
        UpperLimit,
        LowerLimit,
        ParamUom,
        TransPaValTyp,
        ParamSetId,
        ParamType,
        LOVManufactureParamVO,
        LOVUserVO,
        LOVUserVO1,
        LOVParamSetVO,
        LOVParamBasis1,
        LOVParamSetTypeVO1,
        LOVParamValTypVO1,
        LOVUomVO1;
        static AttributesEnum[] vals = null;
        ;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    String AttributeName = "";


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int PARAMID = AttributesEnum.ParamId.index();
    public static final int PARAMVAL = AttributesEnum.ParamVal.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int USRIDCREATE = AttributesEnum.UsrIdCreate.index();
    public static final int USRIDCREATEDT = AttributesEnum.UsrIdCreateDt.index();
    public static final int USRIDMOD = AttributesEnum.UsrIdMod.index();
    public static final int USRIDMODDT = AttributesEnum.UsrIdModDt.index();
    public static final int WSID = AttributesEnum.WsId.index();
    public static final int TRANSPARAMDESC = AttributesEnum.TransParamDesc.index();
    public static final int TRANSATTRIBUTENAME = AttributesEnum.TransAttributeName.index();
    public static final int TRANSPARAMSET = AttributesEnum.TransParamSet.index();
    public static final int TRANSPARAMSETID = AttributesEnum.TransParamSetId.index();
    public static final int TRANSPARAMSETTYPE = AttributesEnum.TransParamSetType.index();
    public static final int TRANSSET = AttributesEnum.TransSet.index();
    public static final int TRANSPARAMBASIS = AttributesEnum.TransParamBasis.index();
    public static final int TRANSPARAMBASISID = AttributesEnum.TransParamBasisID.index();
    public static final int TRANSKEY = AttributesEnum.TransKey.index();
    public static final int TLRNCLOWER = AttributesEnum.TlrncLower.index();
    public static final int TLRNCTYPE = AttributesEnum.TlrncType.index();
    public static final int TLRNCUPPER = AttributesEnum.TlrncUpper.index();
    public static final int UPPERLIMIT = AttributesEnum.UpperLimit.index();
    public static final int LOWERLIMIT = AttributesEnum.LowerLimit.index();
    public static final int PARAMUOM = AttributesEnum.ParamUom.index();
    public static final int TRANSPAVALTYP = AttributesEnum.TransPaValTyp.index();
    public static final int PARAMSETID = AttributesEnum.ParamSetId.index();
    public static final int PARAMTYPE = AttributesEnum.ParamType.index();
    public static final int LOVMANUFACTUREPARAMVO = AttributesEnum.LOVManufactureParamVO.index();
    public static final int LOVUSERVO = AttributesEnum.LOVUserVO.index();
    public static final int LOVUSERVO1 = AttributesEnum.LOVUserVO1.index();
    public static final int LOVPARAMSETVO = AttributesEnum.LOVParamSetVO.index();
    public static final int LOVPARAMBASIS1 = AttributesEnum.LOVParamBasis1.index();
    public static final int LOVPARAMSETTYPEVO1 = AttributesEnum.LOVParamSetTypeVO1.index();
    public static final int LOVPARAMVALTYPVO1 = AttributesEnum.LOVParamValTypVO1.index();
    public static final int LOVUOMVO1 = AttributesEnum.LOVUomVO1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public MnfWsParamVORowImpl() {
    }

    /**
     * Gets MnfWsParamEO entity object.
     * @return the MnfWsParamEO
     */
    public MnfWsParamEOImpl getMnfWsParamEO() {
        return (MnfWsParamEOImpl) getEntity(ENTITY_MNFWSPARAMEO);
    }

    /**
     * Gets the attribute value for CLD_ID using the alias name CldId.
     * @return the CLD_ID
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as attribute value for CLD_ID using the alias name CldId.
     * @param value value to set the CLD_ID
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for HO_ORG_ID using the alias name HoOrgId.
     * @return the HO_ORG_ID
     */
    public String getHoOrgId() {
        return (String) getAttributeInternal(HOORGID);
    }

    /**
     * Sets <code>value</code> as attribute value for HO_ORG_ID using the alias name HoOrgId.
     * @param value value to set the HO_ORG_ID
     */
    public void setHoOrgId(String value) {
        setAttributeInternal(HOORGID, value);
    }

    /**
     * Gets the attribute value for PARAM_ID using the alias name ParamId.
     * @return the PARAM_ID
     */
    public String getParamId() {
        return (String) getAttributeInternal(PARAMID);
    }

    /**
     * Sets <code>value</code> as attribute value for PARAM_ID using the alias name ParamId.
     * @param value value to set the PARAM_ID
     */
    public void setParamId(String value) {
        if(!getAm().duplicateParamEo(getTransParamDesc())){
            setAttributeInternal(PARAMID, value);
        }
        else {
            showFacesMsg("Duplicate Parameter!! ", " ", FacesMessage.SEVERITY_ERROR, null);
        }
        
    }

    /**
     * Gets the attribute value for PARAM_VAL using the alias name ParamVal.
     * @return the PARAM_VAL
     */
    public Number getParamVal() {
        return (Number) getAttributeInternal(PARAMVAL);
    }

    /**
     * Sets <code>value</code> as attribute value for PARAM_VAL using the alias name ParamVal.
     * @param value value to set the PARAM_VAL
     */
    public void setParamVal(Number value) {
        if(!getAm().duplicateParamEo(getTransParamDesc())){
            setAttributeInternal(PARAMVAL, value);
        }
       
    }

    /**
     * Gets the attribute value for SLOC_ID using the alias name SlocId.
     * @return the SLOC_ID
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for SLOC_ID using the alias name SlocId.
     * @param value value to set the SLOC_ID
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for USR_ID_CREATE using the alias name UsrIdCreate.
     * @return the USR_ID_CREATE
     */
    public Integer getUsrIdCreate() {
        return (Integer) getAttributeInternal(USRIDCREATE);
    }

    /**
     * Sets <code>value</code> as attribute value for USR_ID_CREATE using the alias name UsrIdCreate.
     * @param value value to set the USR_ID_CREATE
     */
    public void setUsrIdCreate(Integer value) {
        setAttributeInternal(USRIDCREATE, value);
    }

    /**
     * Gets the attribute value for USR_ID_CREATE_DT using the alias name UsrIdCreateDt.
     * @return the USR_ID_CREATE_DT
     */
    public Timestamp getUsrIdCreateDt() {
        return (Timestamp) getAttributeInternal(USRIDCREATEDT);
    }

    /**
     * Sets <code>value</code> as attribute value for USR_ID_CREATE_DT using the alias name UsrIdCreateDt.
     * @param value value to set the USR_ID_CREATE_DT
     */
    public void setUsrIdCreateDt(Timestamp value) {
        setAttributeInternal(USRIDCREATEDT, value);
    }

    /**
     * Gets the attribute value for USR_ID_MOD using the alias name UsrIdMod.
     * @return the USR_ID_MOD
     */
    public Integer getUsrIdMod() {
        return (Integer) getAttributeInternal(USRIDMOD);
    }

    /**
     * Sets <code>value</code> as attribute value for USR_ID_MOD using the alias name UsrIdMod.
     * @param value value to set the USR_ID_MOD
     */
    public void setUsrIdMod(Integer value) {
        setAttributeInternal(USRIDMOD, value);
    }

    /**
     * Gets the attribute value for USR_ID_MOD_DT using the alias name UsrIdModDt.
     * @return the USR_ID_MOD_DT
     */
    public Timestamp getUsrIdModDt() {
        return (Timestamp) getAttributeInternal(USRIDMODDT);
    }

    /**
     * Sets <code>value</code> as attribute value for USR_ID_MOD_DT using the alias name UsrIdModDt.
     * @param value value to set the USR_ID_MOD_DT
     */
    public void setUsrIdModDt(Timestamp value) {
        setAttributeInternal(USRIDMODDT, value);
    }

    /**
     * Gets the attribute value for WS_ID using the alias name WsId.
     * @return the WS_ID
     */
    public String getWsId() {
        return (String) getAttributeInternal(WSID);
    }

    /**
     * Sets <code>value</code> as attribute value for WS_ID using the alias name WsId.
     * @param value value to set the WS_ID
     */
    public void setWsId(String value) {
        setAttributeInternal(WSID, value);
    }


    /** To getAM() */

    private MNFWorkStationAppAMImpl getAm() {
        return (MNFWorkStationAppAMImpl) getApplicationModule();
    }


    String ParamBasis = null;
    Integer ParamBasisID = 0;
    Integer setId = 0;
    Integer parmValTyp = 0;
    Integer setType = null;

    /**
     * Gets the attribute value for the calculated attribute TransParamDesc.
     * @return the TransParamDesc
     */
    public String getTransParamDesc() {
        //System.out.println("Param Description " );
        if (getParamId() != null) {
            ViewObjectImpl paramDescvoimpl = getAm().getLOVManufactureParam1();
            Row[] paramDesc = paramDescvoimpl.getFilteredRows("ParamId", getParamId());
            if (paramDesc.length > 0) {
                if (paramDesc[0].getAttribute("ParamNme") != null)
                    AttributeName = paramDesc[0].getAttribute("AttNme").toString();
                //setTransParamSetId(paramDesc[0].getAttribute("ParamSetId").toString());
                ParamBasisID = Integer.parseInt(paramDesc[0].getAttribute("Parambasis").toString());
                //parmValTyp = Integer.parseInt(paramDesc[0].getAttribute("ParamValType").toString());
                setType = Integer.parseInt(paramDesc[0].getAttribute("Paramsettype").toString());
                return (getAm().getLOVAllParameterVO().getFilteredRows("ParamId",
                                                                   getParamId()))[0].getAttribute("ParamDesc").toString();
            }
        }
        
       /* if (getParamId() != null) {

            if (getAm().getLOVAllParameterVO().getFilteredRows("ParamId", getParamId()).length > 0) {
                return (getAm().getLOVAllParameterVO().getFilteredRows("ParamId",
                                                                   getParamId()))[0].getAttribute("ParamDesc").toString();
            }
        }*/


        return (String) getAttributeInternal(TRANSPARAMDESC);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransParamDesc.
     * @param value value to set the  TransParamDesc
     */
    public void setTransParamDesc(String value) {
        setAttributeInternal(TRANSPARAMDESC, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransAttributeName.
     * @return the TransAttributeName
     */
    public String getTransAttributeName() {
        if (AttributeName != null)
            return AttributeName;
        else
            return (String) getAttributeInternal(TRANSATTRIBUTENAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransAttributeName.
     * @param value value to set the  TransAttributeName
     */
    public void setTransAttributeName(String value) {

        setAttributeInternal(TRANSATTRIBUTENAME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransParamSet.
     * @return the TransParamSet
     */
    public String getTransParamSet() {
        /*if (getParamId() != null && getTransParamSetId() != null) {
            ViewObjectImpl paramDescvoimpl = getAm().getLOVParamSet1();
            Row[] paramDesc = paramDescvoimpl.getFilteredRows("ParamSetId", getTransParamSetId());
            if (paramDesc.length > 0) {
                if (paramDesc[0].getAttribute("ParamSetId") != null)
                    return paramDesc[0].getAttribute("ParamSetDesc").toString();
            }
        }*/
         if (getParamId() != null  && getTransParamSetId() != null || getParamId() != null  && getParamSetId() != null) {

            // if (getAm().getLOVAllParamSetVO().getFilteredRows("ParamSetId", getTransParamSetId()).length > 0) {
            if (getAm().getLOVAllParamSetVO().getFilteredRows("ParamSetId", getParamSetId()).length > 0) {
                 return (getAm().getLOVAllParamSetVO().getFilteredRows("ParamSetId",
                                                                    getTransParamSetId()))[0].getAttribute("ParamSetDesc").toString();
             }
         }
        return (String) getAttributeInternal(TRANSPARAMSET);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransParamSet.
     * @param value value to set the  TransParamSet
     */
    public void setTransParamSet(String value) {
        if (getParamId() != null && getTransParamSetId() != null) {
            ViewObjectImpl paramDescvoimpl = getAm().getLOVParamSet1();
            Row[] paramDesc = paramDescvoimpl.getFilteredRows("ParamSetId", getTransParamSetId());
            if (paramDesc.length > 0) {
                if (paramDesc[0].getAttribute("ParamSetId") != null)
                    setAttributeInternal(TRANSPARAMSET, paramDesc[0].getAttribute("ParamSetDesc").toString());
            }
        } else {
            setAttributeInternal(TRANSPARAMSET, value);
        }
    }

    /**
     * Gets the attribute value for the calculated attribute TransParamSetId.
     * @return the TransParamSetId
     */
    public String getTransParamSetId() {
        if (getParamId() != null) {
            ViewObjectImpl paramDescvoimpl = getAm().getLOVManufactureParam1();
            Row[] paramDesc = paramDescvoimpl.getFilteredRows("ParamId", getParamId());
            if (paramDesc.length > 0) {
                if (paramDesc[0].getAttribute("ParamId") != null)
                    return paramDesc[0].getAttribute("ParamSetId").toString();
            }
        }
        return (String) getAttributeInternal(TRANSPARAMSETID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransParamSetId.
     * @param value value to set the  TransParamSetId
     */
    public void setTransParamSetId(String value) {
        if (getParamId() != null) {
            ViewObjectImpl paramDescvoimpl = getAm().getLOVManufactureParam1();
            Row[] paramDesc = paramDescvoimpl.getFilteredRows("ParamId", getParamId());
            if (paramDesc.length > 0) {
                if (paramDesc[0].getAttribute("ParamId") != null)
                    setAttributeInternal(TRANSPARAMSETID, paramDesc[0].getAttribute("ParamSetId").toString());
            }
        } else {
            setAttributeInternal(TRANSPARAMSETID, value);
        }
    }

    /**
     * Gets the attribute value for the calculated attribute TransParamSetType.
     * @return the TransParamSetType
     */
    public Integer getTransParamSetType() {
        if (getParamId() != null) {
            ViewObjectImpl paramDescvoimpl = getAm().getLOVManufactureParam1();
            Row[] paramDesc = paramDescvoimpl.getFilteredRows("ParamId", getParamId());
            if (paramDesc.length > 0) {
                /* if (setType != null) {
            if (setType == 37)
                return setType;
            else if (setType == 38)
                return setType;
            else if (setType == 39)
                return setType;
            else if(setType == 40)
                return setType; */
                return Integer.parseInt(paramDesc[0].getAttribute("Paramsettype").toString());
            }
        }
        return (Integer) getAttributeInternal(TRANSPARAMSETTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransParamSetType.
     * @param value value to set the  TransParamSetType
     */
    public void setTransParamSetType(Integer value) {
        if(value != null){
           // System.out.println("SET PARAM TYPE");
            setParamType(value);
            setAttributeInternal(TRANSPARAMSETTYPE, value);
        }
      
    }

    /**
     * Gets the attribute value for the calculated attribute TransSet.
     * @return the TransSet
     */
    public String getTransSet() {
        return (String) getAttributeInternal(TRANSSET);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransSet.
     * @param value value to set the  TransSet
     */
    public void setTransSet(String value) {
        setAttributeInternal(TRANSSET, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransParamBasis.
     * @return the TransParamBasis
     */
    public String getTransParamBasis() {
        if (ParamBasisID != null) {
            if (ParamBasisID == 31)
                return "FIXED";
            else if (ParamBasisID == 32)
                return "VARIABLE";
        } //else
        return (String) getAttributeInternal(TRANSPARAMBASIS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransParamBasis.
     * @param value value to set the  TransParamBasis
     */
    public void setTransParamBasis(String value) {
        if (ParamBasisID != null) {
            if (ParamBasisID == 31)
                setAttributeInternal(TRANSPARAMBASIS, "FIXED");
            else
                setAttributeInternal(TRANSPARAMBASIS, "VARIABLE");
        }
        setAttributeInternal(TRANSPARAMBASIS, value);
    }


    /**
     * Gets the attribute value for the calculated attribute TransParamBasisID.
     * @return the TransParamBasisID
     */
    public Integer getTransParamBasisID() {
        return (Integer) getAttributeInternal(TRANSPARAMBASISID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransParamBasisID.
     * @param value value to set the  TransParamBasisID
     */
    public void setTransParamBasisID(Integer value) {
        if(!getAm().duplicateParamEo(getTransParamDesc())){
            setAttributeInternal(TRANSPARAMBASISID, value);
        }
        
    }

    /**
     * Gets the attribute value for the calculated attribute TransKey.
     * @return the TransKey
     */
    public Object getTransKey() {
        return getKey();
        //return (Object) getAttributeInternal(TRANSKEY);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransKey.
     * @param value value to set the  TransKey
     */
    public void setTransKey(Object value) {
        setAttributeInternal(TRANSKEY, value);
    }

    /**
     * Gets the attribute value for TLRNC_LOWER using the alias name TlrncLower.
     * @return the TLRNC_LOWER
     */
    public oracle.jbo.domain.Number getTlrncLower() {
        return (oracle.jbo.domain.Number) getAttributeInternal(TLRNCLOWER);
    }

    /**
     * Sets <code>value</code> as attribute value for TLRNC_LOWER using the alias name TlrncLower.
     * @param value value to set the TLRNC_LOWER
     */
    public void setTlrncLower(oracle.jbo.domain.Number value) {
        setAttributeInternal(TLRNCLOWER, value);
    }

    /**
     * Gets the attribute value for TLRNC_TYPE using the alias name TlrncType.
     * @return the TLRNC_TYPE
     */
    public String getTlrncType() {
        return (String) getAttributeInternal(TLRNCTYPE);
    }

    /**
     * Sets <code>value</code> as attribute value for TLRNC_TYPE using the alias name TlrncType.
     * @param value value to set the TLRNC_TYPE
     */
    public void setTlrncType(String value) {
        setAttributeInternal(TLRNCTYPE, value);
    }

    /**
     * Gets the attribute value for TLRNC_UPPER using the alias name TlrncUpper.
     * @return the TLRNC_UPPER
     */
    public oracle.jbo.domain.Number getTlrncUpper() {
        return (oracle.jbo.domain.Number) getAttributeInternal(TLRNCUPPER);
    }

    /**
     * Sets <code>value</code> as attribute value for TLRNC_UPPER using the alias name TlrncUpper.
     * @param value value to set the TLRNC_UPPER
     */
    public void setTlrncUpper(oracle.jbo.domain.Number value) {
        setAttributeInternal(TLRNCUPPER, value);
    }

    /**
     * Gets the attribute value for UPPER_LIMIT using the alias name UpperLimit.
     * @return the UPPER_LIMIT
     */
    public oracle.jbo.domain.Number getUpperLimit() {
        return (oracle.jbo.domain.Number) getAttributeInternal(UPPERLIMIT);
    }

    /**
     * Sets <code>value</code> as attribute value for UPPER_LIMIT using the alias name UpperLimit.
     * @param value value to set the UPPER_LIMIT
     */
    public void setUpperLimit(oracle.jbo.domain.Number value) {
        setAttributeInternal(UPPERLIMIT, value);
    }

    /**
     * Gets the attribute value for LOWER_LIMIT using the alias name LowerLimit.
     * @return the LOWER_LIMIT
     */
    public oracle.jbo.domain.Number getLowerLimit() {
        return (oracle.jbo.domain.Number) getAttributeInternal(LOWERLIMIT);
    }

    /**
     * Sets <code>value</code> as attribute value for LOWER_LIMIT using the alias name LowerLimit.
     * @param value value to set the LOWER_LIMIT
     */
    public void setLowerLimit(oracle.jbo.domain.Number value) {
        setAttributeInternal(LOWERLIMIT, value);
    }

    /**
     * Gets the attribute value for PARAM_UOM using the alias name ParamUom.
     * @return the PARAM_UOM
     */
    public String getParamUom() {
        return (String) getAttributeInternal(PARAMUOM);
    }

    /**
     * Sets <code>value</code> as attribute value for PARAM_UOM using the alias name ParamUom.
     * @param value value to set the PARAM_UOM
     */
    public void setParamUom(String value) {
        if(!getAm().duplicateParamEo(getTransParamDesc())){
            setAttributeInternal(PARAMUOM, value);
        }
       
    }

    /**
     * Gets the attribute value for the calculated attribute TransPaValTyp.
     * @return the TransPaValTyp
     */
    public Integer getTransPaValTyp() {
        if (getParamId() != null) {
            ViewObjectImpl paramDescvoimpl = getAm().getLOVManufactureParam1();
            Row[] paramDesc = paramDescvoimpl.getFilteredRows("ParamId", getParamId());
            if (paramDesc.length > 0 && paramDesc[0].getAttribute("ParamValType")!=null) {
                return Integer.parseInt(paramDesc[0].getAttribute("ParamValType").toString());
            }
        }
        return (Integer) getAttributeInternal(TRANSPAVALTYP);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransPaValTyp.
     * @param value value to set the  TransPaValTyp
     */
    public void setTransPaValTyp(Integer value) {
        if (getParamId() != null && (!getAm().duplicateParamEo(getTransParamDesc()))) {
            ViewObjectImpl paramDescvoimpl = getAm().getLOVManufactureParam1();
            Row[] paramDesc = paramDescvoimpl.getFilteredRows("ParamId", getParamId());
            if (paramDesc.length > 0 && paramDesc[0].getAttribute("ParamValType")!=null) {
                setAttributeInternal(TRANSPAVALTYP,  Integer.parseInt(paramDesc[0].getAttribute("ParamValType").toString()));
            }
        }
        else {
            setAttributeInternal(TRANSPAVALTYP, value);
        }
    }

    /**
     * Gets the attribute value for PARAM_SET_ID using the alias name ParamSetId.
     * @return the PARAM_SET_ID
     */
    public String getParamSetId() {
        return (String) getAttributeInternal(PARAMSETID);
    }

    /**
     * Sets <code>value</code> as attribute value for PARAM_SET_ID using the alias name ParamSetId.
     * @param value value to set the PARAM_SET_ID
     */
    public void setParamSetId(String value) {
        setAttributeInternal(PARAMSETID, value);
    }

    /**
     * Gets the attribute value for PARAM_TYPE using the alias name ParamType.
     * @return the PARAM_TYPE
     */
    public Integer getParamType() {
         if (getParamId() != null) {
            ViewObjectImpl paramDescvoimpl = getAm().getLOVManufactureParam1();
            Row[] paramDesc = paramDescvoimpl.getFilteredRows("ParamId", getParamId());
            if (paramDesc.length > 0) {
                 return Integer.parseInt(paramDesc[0].getAttribute("Paramsettype").toString());
            }
        } 
        return (Integer) getAttributeInternal(PARAMTYPE);
    }

    /**
     * Sets <code>value</code> as attribute value for PARAM_TYPE using the alias name ParamType.
     * @param value value to set the PARAM_TYPE
     */
    public void setParamType(Integer value) {
        setAttributeInternal(PARAMTYPE, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LOVManufactureParamVO.
     */
    public RowSet getLOVManufactureParamVO() {

        RowSet rs = (RowSet) getAttributeInternal(LOVMANUFACTUREPARAMVO);
        rs.getViewObject().clearCache();
        rs.setNamedWhereClauseParam("ParamSetIdBindVar", getTransParamSetId());
        rs.resetExecuted();
        return rs;

        // return (RowSet) getAttributeInternal(LOVMANUFACTUREPARAMVO);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LOVUserVO.
     */
    public RowSet getLOVUserVO() {
        return (RowSet) getAttributeInternal(LOVUSERVO);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LOVUserVO1.
     */
    public RowSet getLOVUserVO1() {
        return (RowSet) getAttributeInternal(LOVUSERVO1);
    }

    /**----------------------------------------------------------------**/

    /**
     * Gets the view accessor <code>RowSet</code> LOVParamSetVO.
     */
    public RowSet getLOVParamSetVO() {
        return (RowSet) getAttributeInternal(LOVPARAMSETVO);
    }


    /**
     * Gets the view accessor <code>RowSet</code> LOVParamBasis1.
     */
    public RowSet getLOVParamBasis1() {
        return (RowSet) getAttributeInternal(LOVPARAMBASIS1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LOVParamSetTypeVO1.
     */
    public RowSet getLOVParamSetTypeVO1() {
        return (RowSet) getAttributeInternal(LOVPARAMSETTYPEVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LOVParamValTypVO1.
     */
    public RowSet getLOVParamValTypVO1() {
        return (RowSet) getAttributeInternal(LOVPARAMVALTYPVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LOVUomVO1.
     */
    public RowSet getLOVUomVO1() {
        return (RowSet) getAttributeInternal(LOVUOMVO1);
    }

    /**Method to resolve page flow scope parameter.*/
    public Object resolvEl(String data) {
        ADFContext adfCtx = ADFContext.getCurrent();
        ELContext elContext = adfCtx.getELContext();
        ValueExpression valueExp = adfCtx.getExpressionFactory().createValueExpression(elContext, data, Object.class);
        Object Message = valueExp.getValue(elContext);
        return Message;
    }

    /**----------------------------------------------------------------**/
    public void showFacesMsg(String msgHdr, String msgDtl, javax.faces.application.FacesMessage.Severity msgSeverity,
                             String msgMode) {
     
        FacesMessage msg = new FacesMessage(msgHdr);
        msg.setDetail(msgDtl);
        msg.setSeverity(msgSeverity);
        FacesContext.getCurrentInstance().addMessage(null, msg);
        
     
    }

}

