package mnfWorkStationApp.model.views;

import oracle.jbo.domain.Date;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ViewObjectImpl;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import oracle.jbo.ViewCriteria;
import oracle.jbo.server.QueryCollection;
import oracle.jbo.server.SQLBuilder;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.ViewRowSetImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Sep 12 15:06:03 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class LOVWorkStationViewVOImpl extends ViewObjectImpl {
    /**
     * This is the default constructor (do not remove).
     */
    public LOVWorkStationViewVOImpl() {
    }

    /**
     * Returns the variable value for BindWsID.
     * @return variable value for BindWsID
     */
    public String getBindWsID() {
        return (String) ensureVariableManager().getVariableValue("BindWsID");
    }

    /**
     * Sets <code>value</code> for variable BindWsID.
     * @param value value to bind as BindWsID
     */
    public void setBindWsID(String value) {
        ensureVariableManager().setVariableValue("BindWsID", value);
    }

    /**
     * Returns the variable value for BindWsActv.
     * @return variable value for BindWsActv
     */
    public String getBindWsActv() {
        return (String) ensureVariableManager().getVariableValue("BindWsActv");
    }

    /**
     * Sets <code>value</code> for variable BindWsActv.
     * @param value value to bind as BindWsActv
     */
    public void setBindWsActv(String value) {
        ensureVariableManager().setVariableValue("BindWsActv", value);
    }


    /**
     * Returns the variable value for BindWorkCenterName.
     * @return variable value for BindWorkCenterName
     */
    public String getBindWorkCenterName() {
        return (String) ensureVariableManager().getVariableValue("BindWorkCenterName");
    }

    /**
     * Sets <code>value</code> for variable BindWorkCenterName.
     * @param value value to bind as BindWorkCenterName
     */
    public void setBindWorkCenterName(String value) {
        ensureVariableManager().setVariableValue("BindWorkCenterName", value);
    }

    /**
     * Returns the variable value for BindWsInvDt.
     * @return variable value for BindWsInvDt
     */
    public Timestamp getBindWsInvDt() {
        return (Timestamp) ensureVariableManager().getVariableValue("BindWsInvDt");
    }

    /**
     * Sets <code>value</code> for variable BindWsInvDt.
     * @param value value to bind as BindWsInvDt
     */
    public void setBindWsInvDt(Timestamp value) {
        ensureVariableManager().setVariableValue("BindWsInvDt", value);
    }


    /**
     * Returns the variable value for BindCldId.
     * @return variable value for BindCldId
     */
    public String getBindCldId() {
        return (String) ensureVariableManager().getVariableValue("BindCldId");
    }

    /**
     * Sets <code>value</code> for variable BindCldId.
     * @param value value to bind as BindCldId
     */
    public void setBindCldId(String value) {
        ensureVariableManager().setVariableValue("BindCldId", value);
    }

    /**
     * Returns the variable value for BindHoOrgId.
     * @return variable value for BindHoOrgId
     */
    public String getBindHoOrgId() {
        return (String) ensureVariableManager().getVariableValue("BindHoOrgId");
    }

    /**
     * Sets <code>value</code> for variable BindHoOrgId.
     * @param value value to bind as BindHoOrgId
     */
    public void setBindHoOrgId(String value) {
        ensureVariableManager().setVariableValue("BindHoOrgId", value);
    }

    /**
     * Returns the variable value for BindSlocId.
     * @return variable value for BindSlocId
     */
    public Integer getBindSlocId() {
        return (Integer) ensureVariableManager().getVariableValue("BindSlocId");
    }

    /**
     * Sets <code>value</code> for variable BindSlocId.
     * @param value value to bind as BindSlocId
     */
    public void setBindSlocId(Integer value) {
        ensureVariableManager().setVariableValue("BindSlocId", value);
    }
    protected boolean showSql = false;

    @Override
    public long getEstimatedRowCount() {
        long init = System.currentTimeMillis();
        long counter = super.getEstimatedRowCount();
        long end = System.currentTimeMillis() - init;

        if (showSql)
            System.out.println("VO: " + this.getName() + ", from AM: " + this.getApplicationModule().getName() + ", executes SQL Count in: " + end + " (miliseconds)");

        return counter;
    }

    @Override
    protected void executeQueryForCollection(Object qc, Object[] params, int noUserParams) {
        short fetchSize = 10;
        if (this.getRangeSize() > 0) {
            fetchSize = ((short) (this.getRangeSize() + 3));
        }
        if (this.getRangeSize() < 10) {
            // System.out.println("Potentially small range size : " + this.getRangeSize() + " for table VO : " +
            //             this.getViewObject().getDefFullName());
            fetchSize = 10;
        }

        // System.out.println("Original fetch size : " + this.getFetchSize() + ", Updated fetch size : " + fetchSize +
        //             " for : " + this.getViewObject().getDefFullName());
        if (fetchSize > this.getFetchSize()) {
            //  System.out.println("Updating fetch size : " + fetchSize);
            this.setFetchSize(fetchSize);
        } else {
            // System.out.println("Current fetch size : " + this.getFetchSize() + " for : " +
            //             this.getViewObject().getDefFullName());
        }

        long init = System.currentTimeMillis();
        super.executeQueryForCollection(qc, params, noUserParams);
        long end = System.currentTimeMillis() - init;

        //if (showSql)
        //     System.out.println("VO: " + this.getName() + ", from AM: " + this.getApplicationModule().getName() +
        //                  ", executes SQL in: " + end + " (miliseconds)");
    }

    @Override
    protected void bindParametersForCollection(QueryCollection queryCollection, Object[] object,
                                               PreparedStatement preparedStatement) throws SQLException, SQLException {
        // TODO Implement this method
         if (showSql)
             logQueryStatementAndBindParameters(queryCollection, object);

        super.bindParametersForCollection(queryCollection, object, preparedStatement);
    }

    /**
     * method used to introspect the query produced at runtime by the vo.
     * @param qc
     * @param params
     */
    private void logQueryStatementAndBindParameters(QueryCollection qc, Object[] params) {
        String vrsiName = null;
        if (qc != null) {
            ViewRowSetImpl vrsi = qc.getRowSetImpl();
            vrsiName = vrsi.isDefaultRS() ? "<Default>" : vrsi.getName();
        }
        String voName = getName();
        String voDefName = getDefFullName();
        if (qc != null) {
            // System.out.println("----[Exec query for VO=" + voName + ", RS=" + vrsiName + "]----");

        } else {
            // System.out.println("----[Exec COUNT query for VO=" + voName + "]----");
        }
        // System.out.println("VO Definition Name = {0}"+ voDefName);

        String dbVCs = appliedCriteriaString(ViewCriteria.CRITERIA_MODE_QUERY);
        if (!dbVCs.isEmpty()) {
            // System.out.println("Applied Database VCs = {0} "+ dbVCs);
        }

        String memVCs = appliedCriteriaString(ViewCriteria.CRITERIA_MODE_CACHE);
        if (!memVCs.isEmpty()) {
            //System.out.println("Applied In-Memory VCs = {0} "+ memVCs);
        }

        String bothVCs = appliedCriteriaString(ViewCriteria.CRITERIA_MODE_QUERY | ViewCriteria.CRITERIA_MODE_CACHE);
        if (!bothVCs.isEmpty()) {
            // System.out.println("Applied 'Both' VCs = {0}"+ bothVCs);
        }

        System.out.println("Generated query : {0}" + getQuery());

        if (params != null) {
            if (getBindingStyle() == SQLBuilder.BINDING_STYLE_ORACLE_NAME) {
                Map<String, Object> bindsMap = new HashMap<String, Object>(params.length);
                for (Object param : params) {
                    Object[] nameValue = (Object[]) param;
                    String name = (String) nameValue[0];
                    Object value = nameValue[1];
                    bindsMap.put(name, value);
                }
                System.out.println("Bind Variables : {0}" + bindsMap);
            }
        }
    }

    @Override
    public ViewRowImpl createInstanceFromResultSet(QueryCollection queryCollection, ResultSet resultSet) {
        ViewRowImpl row = super.createInstanceFromResultSet(queryCollection, resultSet);
        if (showSql)
            System.out.println("Fetching " + this.getViewObject().getName() + " row with the key " + row.getKey());
        return row;

    }

    private String appliedCriteriaString(int mode) {
        ViewCriteria[] appliedCriterias = getApplyViewCriterias(mode);
        String result = "";
        if (appliedCriterias != null && appliedCriterias.length > 0) {
            List<String> list = new ArrayList<String>(appliedCriterias.length);
            for (ViewCriteria vc : appliedCriterias) {
                list.add(vc.getName());
            }
            result = list.toString();
        }
        return result;
    }


    /**
     * Returns the bind variable value for BindWsFromDt.
     * @return bind variable value for BindWsFromDt
     */
    public java.sql.Timestamp getBindWsFromDt() {
        return (java.sql.Timestamp) getNamedWhereClauseParam("BindWsFromDt");
    }

    /**
     * Sets <code>value</code> for bind variable BindWsFromDt.
     * @param value value to bind as BindWsFromDt
     */
    public void setBindWsFromDt(java.sql.Timestamp value) {
        setNamedWhereClauseParam("BindWsFromDt", value);
    }

    /**
     * Returns the bind variable value for BindWsToDt.
     * @return bind variable value for BindWsToDt
     */
    public java.sql.Timestamp getBindWsToDt() {
        return (java.sql.Timestamp) getNamedWhereClauseParam("BindWsToDt");
    }

    /**
     * Sets <code>value</code> for bind variable BindWsToDt.
     * @param value value to bind as BindWsToDt
     */
    public void setBindWsToDt(java.sql.Timestamp value) {
        setNamedWhereClauseParam("BindWsToDt", value);
    }

    /**
     * Returns the bind variable value for BindEmpId.
     * @return bind variable value for BindEmpId
     */
    public Integer getBindEmpId() {
        return (Integer) getNamedWhereClauseParam("BindEmpId");
    }

    /**
     * Sets <code>value</code> for bind variable BindEmpId.
     * @param value value to bind as BindEmpId
     */
    public void setBindEmpId(Integer value) {
        setNamedWhereClauseParam("BindEmpId", value);
    }


    /**
     * Returns the bind variable value for BindWcId.
     * @return bind variable value for BindWcId
     */
    public String getBindWcId() {
        return (String) getNamedWhereClauseParam("BindWcId");
    }

    /**
     * Sets <code>value</code> for bind variable BindWcId.
     * @param value value to bind as BindWcId
     */
    public void setBindWcId(String value) {
        setNamedWhereClauseParam("BindWcId", value);
    }

    /**
     * Returns the bind variable value for BindWsId.
     * @return bind variable value for BindWsId
     */
    public String getBindWsId() {
        return (String) getNamedWhereClauseParam("BindWsId");
    }

    /**
     * Sets <code>value</code> for bind variable BindWsId.
     * @param value value to bind as BindWsId
     */
    public void setBindWsId(String value) {
        setNamedWhereClauseParam("BindWsId", value);
    }

    /**
     * Returns the bind variable value for BindInvDt.
     * @return bind variable value for BindInvDt
     */
    public Date getBindInvDt() {
        return (Date) getNamedWhereClauseParam("BindInvDt");
    }

    /**
     * Sets <code>value</code> for bind variable BindInvDt.
     * @param value value to bind as BindInvDt
     */
    public void setBindInvDt(Date value) {
        setNamedWhereClauseParam("BindInvDt", value);
    }
}

