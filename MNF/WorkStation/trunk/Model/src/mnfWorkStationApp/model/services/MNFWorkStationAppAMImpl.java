package mnfWorkStationApp.model.services;

import adf.utils.ebiz.EbizParams;

import java.io.File;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.SQLException;

import java.sql.Types;

import java.util.Date;


import javax.el.ELContext;
import javax.el.ExpressionFactory;

import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import mnfWorkStationApp.model.services.common.MNFWorkStationAppAM;


import mnfWorkStationApp.model.views.LOVWorkStationViewVOImpl;
import mnfWorkStationApp.model.views.MnfWsAMCVOImpl;
import mnfWorkStationApp.model.views.MnfWsCapVOImpl;
import mnfWorkStationApp.model.views.MnfWsOrgVOImpl;
import mnfWorkStationApp.model.views.MnfWsParamVOImpl;
import mnfWorkStationApp.model.views.MnfWsResVOImpl;
import mnfWorkStationApp.model.views.MnfWsShiftVOImpl;
import mnfWorkStationApp.model.views.MnfWsVOImpl;


import oracle.adf.share.ADFContext;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;

import java.lang.String;

import java.util.HashSet;
import java.util.Map;


import java.util.Set;

import javax.faces.application.FacesMessage;

import oracle.adf.model.binding.DCIteratorBinding;

import oracle.jbo.Key;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewObjectImpl;

import oracle.jdbc.OracleTypes;

import oracle.sql.NUMBER;

import org.apache.myfaces.trinidad.context.RequestContext;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Aug 16 10:35:11 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MNFWorkStationAppAMImpl extends ApplicationModuleImpl implements MNFWorkStationAppAM {
    /**
     * This is the default constructor (do not remove).
     */
    public MNFWorkStationAppAMImpl() {
    }

    /**
     * Container's getter for MnfWsAttch1.
     * @return MnfWsAttch1
     */
    public ViewObjectImpl getMnfWsAttch1() {
        return (ViewObjectImpl) findViewObject("MnfWsAttch1");
    }


    /**
     * Container's getter for MnfWsParam1.
     * @return MnfWsParam1
     */
    public MnfWsParamVOImpl getMnfWsParam1() {
        return (MnfWsParamVOImpl) findViewObject("MnfWsParam1");
    }


    /**
     * Container's getter for MnfWsShift1.
     * @return MnfWsShift1
     */
    public MnfWsShiftVOImpl getMnfWsShift1() {
        return (MnfWsShiftVOImpl) findViewObject("MnfWsShift1");
    }

    /**
     * Container's getter for MnfWs1.
     * @return MnfWs1
     */
    public MnfWsVOImpl getMnfWs1() {
        return (MnfWsVOImpl) findViewObject("MnfWs1");
    }

    /**
     *
     * Method to resolve page flow scope parameter.
     *
     * */

    public Object resolvEl(String data) {
        ADFContext adfCtx = ADFContext.getCurrent();
        ELContext elContext = adfCtx.getELContext();
        ValueExpression valueExp = adfCtx.getExpressionFactory().createValueExpression(elContext, data, Object.class);
        Object Message = valueExp.getValue(elContext);
        return Message;
    }

    /**
     *
     * Getting page flow scope parameter methods.
     *
     * */

    public Integer getSlocId() {
        if (EbizParams.GLBL_APP_SERV_LOC() != null) {
            return EbizParams.GLBL_APP_SERV_LOC();
        } else
            return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
    }

    public StringBuffer getCldId() {
        if (EbizParams.GLBL_APP_CLD_ID() != null) {
            return new StringBuffer(EbizParams.GLBL_APP_CLD_ID());
        } else
            return new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
    }

    public StringBuffer getOrgId() {
        if (EbizParams.GLBL_APP_USR_ORG() != null) {
            return new StringBuffer(EbizParams.GLBL_APP_USR_ORG());
        } else
            return new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
    }

    public StringBuffer getHoOrgId() {
        if (EbizParams.GLBL_HO_ORG_ID() != null) {
            return new StringBuffer(EbizParams.GLBL_HO_ORG_ID());
        } else
            return new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString());
    }

    public Integer getUsrId() {
        if (EbizParams.GLBL_APP_USR() != null) {
            return EbizParams.GLBL_APP_USR();
        } else
            return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
    }


    /**
     *
     * Method to Filter Table data
     *
     * */
    public void setFilterData() {
        resetBtnAction();
        ViewObjectImpl Voimpl = this.getMnfWs1();
        // System.out.println("Total Rows in mnf$WS : " + Voimpl.getRowCount());
        // System.out.println("Value of slocId : " + this.getSlocId());
        // System.out.println("Value of cldId : " + this.getCldId());
        // System.out.println("Value of OrgId : " + this.getOrgId());
        // System.out.println("Value of hoOrgId : " + this.getHoOrgId().toString());
        // System.out.println("Value of UserId : " + this.getUsrId());
        Voimpl.setNamedWhereClauseParam("CldIdBindVar", this.getCldId());
        Voimpl.setNamedWhereClauseParam("SlocIdBIndVar", this.getSlocId());
        Voimpl.setNamedWhereClauseParam("HoOrgIdBindVar", this.getHoOrgId());
        Voimpl.executeQuery();

        // setFilterForSearch(this.getCldId(), this.getSlocId(), this.getHoOrgId());
        //setFilterForWorkStnView(this.getCldId(), this.getSlocId(), this.getHoOrgId());
        setFilterForCopyPre(this.getCldId(), this.getSlocId(), this.getHoOrgId());
        setFilterForOrg(this.getCldId(), this.getSlocId(), this.getHoOrgId());
        setFilterForManufactureParam(this.getCldId(), this.getSlocId(), this.getHoOrgId());
        setFilterForShift(this.getCldId(), this.getSlocId(), this.getHoOrgId());
        setFilterForWorkCenter(this.getCldId(), this.getSlocId(), this.getHoOrgId());
        setFilterForEmp(this.getCldId(), this.getSlocId(), this.getHoOrgId());
        setFilterForAppItm(this.getCldId(), this.getSlocId(), this.getHoOrgId());
        setFilterForWsShift(this.getCldId(), this.getSlocId(), this.getHoOrgId());
        setFilterForShiftForWS(this.getCldId(), this.getSlocId(), this.getHoOrgId());
        setFilterForParameterSet(this.getCldId(), this.getSlocId(), this.getHoOrgId());
        setFilterForShiftNm(this.getCldId(), this.getSlocId(), this.getHoOrgId(),null);

        setGlobalParamForWSSearch();
        setBindVarInParam();
        setBindVarInParamSet();
        setBindVarInShift();
    }

    private void setBindVarInParam() {
        ViewObjectImpl wsVo = getLOVAllParameterVO();
        wsVo.setNamedWhereClauseParam("BindCldId", getCldId());
        wsVo.setNamedWhereClauseParam("BindSlocId", getSlocId());
        wsVo.setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        wsVo.executeQuery();

    }

    private void setBindVarInParamSet() {
        ViewObjectImpl wsVo = getLOVAllParamSetVO();
        wsVo.setNamedWhereClauseParam("BindCldId", getCldId());
        wsVo.setNamedWhereClauseParam("BindSlocId", getSlocId());
        wsVo.setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        wsVo.executeQuery();

    }

    private void setBindVarInShift() {
        ViewObjectImpl wsVo = getLOVAllShiftVO();
        wsVo.setNamedWhereClauseParam("BindCldId", getCldId());
        wsVo.setNamedWhereClauseParam("BindSlocId", getSlocId());
        wsVo.setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        wsVo.executeQuery();

    }

    public void setGlobalParamForWSSearch() {
        getLOVWorkStationView().executeQuery();
        ViewObjectImpl wsVo = getDualWsSearchVO();
        wsVo.setNamedWhereClauseParam("BindCldId", getCldId());
        wsVo.setNamedWhereClauseParam("BindSlocId", getSlocId());
        wsVo.setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        wsVo.executeQuery();

    }

    public void setFilterForParameterSet(StringBuffer cldid, Integer slocid, StringBuffer hoorgId) {
        ViewObjectImpl Voimpl = this.getLOVParamSet1();
        Voimpl.setNamedWhereClauseParam("BindCldId", cldid);
        Voimpl.setNamedWhereClauseParam("BindHoOrgID", hoorgId);
        Voimpl.setNamedWhereClauseParam("BindSlocId", slocid);
        Voimpl.executeQuery();

    }

    public void setFilterForShiftForWS(StringBuffer cldid, Integer slocid, StringBuffer hoorgId) {
        ViewObjectImpl Voimpl = this.getLOVShiftForWSVO1();
        Voimpl.setNamedWhereClauseParam("CldIdBindVar", cldid);
        Voimpl.setNamedWhereClauseParam("HoOrgBindVar", hoorgId);
        Voimpl.setNamedWhereClauseParam("SlocIdBindVar", slocid);
        Voimpl.setNamedWhereClauseParam("WsIdBindVar", null);
        Voimpl.executeQuery();

    }

    public void setFilterForShiftNm(StringBuffer cldid, Integer slocid, StringBuffer hoorgId, String wcId) {
        ViewObjectImpl Voimpl = this.getLOVShiftVO1();
        Voimpl.setNamedWhereClauseParam("CldIdBindVar", cldid);
        Voimpl.setNamedWhereClauseParam("HoOrgBindVar", hoorgId);
        Voimpl.setNamedWhereClauseParam("SlocIdBindVar", slocid);
        Voimpl.setNamedWhereClauseParam("BindWcId", wcId);
        Voimpl.executeQuery();

    }

    /**
     * setFilterForWsShift to filter Work Station Shift on the basis on
     * Cld Id, SlocID and HoOrgID
     */
    public void setFilterForWsShift(StringBuffer cldid, Integer slocid, StringBuffer hoorgId) {
        ViewObjectImpl Voimpl = this.getLOVWsShiftO1();
        Voimpl.setNamedWhereClauseParam("CldIdBindVar", cldid);
        Voimpl.setNamedWhereClauseParam("HoOrgBindVar", hoorgId);
        Voimpl.setNamedWhereClauseParam("SlocIdBindVar", slocid);

        Voimpl.executeQuery();
    }


    /**
     * setFilterForAppItm to filter Items on the basis on
     * Cld Id, SlocID and HoOrgID
     */
    public void setFilterForAppItm(StringBuffer cldid, Integer slocid, StringBuffer hoorgId) {
        ViewObjectImpl Voimpl = this.getLOVAppMnfItm_Vw1();
        Voimpl.setNamedWhereClauseParam("CldIdBindVar", cldid);
        Voimpl.setNamedWhereClauseParam("HOOrgBindVar", hoorgId);
        Voimpl.setNamedWhereClauseParam("SlocIdBindVar", slocid);
        Voimpl.setNamedWhereClauseParam("OrgBindVar", hoorgId);
        Voimpl.executeQuery();
    }

    /**
     * setFilterForEmp to filter Employees on the basis on
     * Cld Id, SlocID and HoOrgID
     */
    public void setFilterForEmp(StringBuffer cldid, Integer slocid, StringBuffer hoorgId) {
        ViewObjectImpl Voimpl = this.getLOVEmp1();
        Voimpl.setNamedWhereClauseParam("CldIdBindVar", cldid);
        Voimpl.setNamedWhereClauseParam("HoOrgIdBindVar", hoorgId);
        Voimpl.setNamedWhereClauseParam("SlocIdBindVar", slocid);
        Voimpl.executeQuery();
    }

    /**
     * setFilterForWorkCenter to filter Work Center on the basis on
     * Cld Id, SlocID and HoOrgID
     */
    public void setFilterForWorkCenter(StringBuffer cldid, Integer slocid, StringBuffer hoorgId) {
        ViewObjectImpl Voimpl = this.getLOVWorkCenter1();
        Voimpl.setNamedWhereClauseParam("BindCldId", cldid);
        Voimpl.setNamedWhereClauseParam("BindHoOrgId", hoorgId);
        Voimpl.setNamedWhereClauseParam("BindSlocId", slocid);
        Voimpl.executeQuery();
    }

    /**
     * setFilterForShift to filter  Shift on the basis on
     * Cld Id, SlocID and HoOrgID
     */
    public void setFilterForShift(StringBuffer cldid, Integer slocid, StringBuffer hoorgId) {
        ViewObjectImpl Voimpl = this.getLOVShift1();
        Voimpl.setNamedWhereClauseParam("CldIdBindVar", cldid);
        Voimpl.setNamedWhereClauseParam("HoOrgBindVar", hoorgId);
        Voimpl.setNamedWhereClauseParam("SlocIdBindVar", slocid);
        Voimpl.executeQuery();
    }

    /**
     * setFilterForManufactureParam to filter Manufacture PArameter on the basisi of
     * Cld Id, SlocID and HoOrgID
     */
    public void setFilterForManufactureParam(StringBuffer cldid, Integer slocid, StringBuffer hoorgId) {
        ViewObjectImpl Voimpl = this.getLOVManufactureParam1();
        Voimpl.setNamedWhereClauseParam("CldIdBindVar", cldid);
        Voimpl.setNamedWhereClauseParam("HoOrgIdBindVar", hoorgId);
        Voimpl.setNamedWhereClauseParam("SlocIdBindVar", slocid);
        Voimpl.executeQuery();
    }


    /**
     * setFilterForOrg to filter Organization on the basis of
     * Cld Id, SlocID and HoOrgID
     */
    public void setFilterForOrg(StringBuffer cldid, Integer slocid, StringBuffer hoorgId) {
        ViewObjectImpl Voimpl = this.getLOVOrganization1();
        Voimpl.setNamedWhereClauseParam("BindCldId", cldid);
        Voimpl.setNamedWhereClauseParam("BindHoOrgId", hoorgId);
        Voimpl.setNamedWhereClauseParam("BindSlcId", slocid);
        Voimpl.executeQuery();
    }

    /**
     * setFilterForCopyPre to filter Previous Work Station on the basis of
     * Cld Id, SlocID and HoOrgID
     */
    public void setFilterForCopyPre(StringBuffer cldid, Integer slocid, StringBuffer hoorgId) {
        ViewObjectImpl Voimpl = this.getLOVCopyPreVO1();
        //System.out.println("Inside setfilterforcopypre !!");
        Voimpl.setNamedWhereClauseParam("BindCldId", cldid);
        Voimpl.setNamedWhereClauseParam("BindHoOrgId", hoorgId);
        Voimpl.setNamedWhereClauseParam("BindSlocId", slocid);
        Voimpl.executeQuery();
    }

    /**
     * setFilterForSearch to filter Work Station View on the basis of
     * Cld Id, SlocID and HoOrgID
     */
    public void setFilterForSearch(StringBuffer cldid, Integer slocid, StringBuffer hoorgId) {
        ViewObjectImpl Voimpl = this.getLOVSearch1();
        Voimpl.setNamedWhereClauseParam("BindCldId", cldid);
        Voimpl.setNamedWhereClauseParam("BindHoOrgId", hoorgId);
        Voimpl.setNamedWhereClauseParam("BindSlocId", slocid);
        Voimpl.executeQuery();
    }

    /**
     * setFilterForWorkStnView to filter Shift on the basis of
     * Cld Id, SlocID and HoOrgID
     */
    private void setFilterForWorkStnView(StringBuffer cldid, Integer slocid, StringBuffer hoorgId) {

        ViewObjectImpl Voimpl = this.getLOVWorkStationView();
        Voimpl.setNamedWhereClauseParam("BindCldId", cldid);
        Voimpl.setNamedWhereClauseParam("BindHoOrgId", -1);
        Voimpl.setNamedWhereClauseParam("BindSlocId", slocid);

        Voimpl.executeQuery();
    }

    public String IsIncharge(String shift) {
        Integer shiftInchargeCnt = 0;
        Row c = getMnfWs1().getCurrentRow();
        String x = c.getAttribute("WsId").toString() == null ? null : c.getAttribute("WsId").toString();
        RowSetIterator rsetIter = getMnfWsRes().createRowSetIterator(null);
        Row curRow = getMnfWsRes().getCurrentRow();
        Row r = null;
        if (x != null) {
            while (rsetIter.hasNext()) {
                r = rsetIter.next();
                if (curRow != null && !r.equals(curRow)) {
                    System.out.println("this here this " + " ====== " + shift);
                    if (r.getAttribute("PicFlg").toString().equalsIgnoreCase("Y") &&
                        r.getAttribute("ShiftId").toString().equalsIgnoreCase(shift) &&
                        r.getAttribute("WsId").toString().equalsIgnoreCase(x)) {
                        shiftInchargeCnt = shiftInchargeCnt + 1;
                    }
                }
            }
        }
        rsetIter.closeRowSetIterator();
        if (shiftInchargeCnt > 0) {
            return "false";
        }
        return "true";
    }

    /**
     * Container's getter for MnfWsAttch2.
     * @return MnfWsAttch2
     */
    public ViewObjectImpl getMnfWsAttch2() {
        return (ViewObjectImpl) findViewObject("MnfWsAttch2");
    }

    /**
     * Container's getter for MnfWsToMnfWsAttachVL1.
     * @return MnfWsToMnfWsAttachVL1
     */
    public ViewLinkImpl getMnfWsToMnfWsAttachVL1() {
        return (ViewLinkImpl) findViewLink("MnfWsToMnfWsAttachVL1");
    }


    /**
     * Container's getter for MnfWsParam2.
     * @return MnfWsParam2
     */
    public MnfWsParamVOImpl getMnfWsParam2() {
        return (MnfWsParamVOImpl) findViewObject("MnfWsParam2");
    }

    /**
     * Container's getter for MnfWsToMnfWsParamVL1.
     * @return MnfWsToMnfWsParamVL1
     */
    public ViewLinkImpl getMnfWsToMnfWsParamVL1() {
        return (ViewLinkImpl) findViewLink("MnfWsToMnfWsParamVL1");
    }


    /**
     * Container's getter for MnfWsShift2.
     * @return MnfWsShift2
     */
    public MnfWsShiftVOImpl getMnfWsShift2() {
        return (MnfWsShiftVOImpl) findViewObject("MnfWsShift2");
    }

    /**
     * Container's getter for MnfWsToMnfWsShiftVL1.
     * @return MnfWsToMnfWsShiftVL1
     */
    public ViewLinkImpl getMnfWsToMnfWsShiftVL1() {
        return (ViewLinkImpl) findViewLink("MnfWsToMnfWsShiftVL1");
    }


    /**
     * Container's getter for LOVUser1.
     * @return LOVUser1
     */
    public ViewObjectImpl getLOVUser1() {
        return (ViewObjectImpl) findViewObject("LOVUser1");
    }

    /**
     * Container's getter for LOVWorkCenter1.
     * @return LOVWorkCenter1
     */
    public ViewObjectImpl getLOVWorkCenter1() {
        return (ViewObjectImpl) findViewObject("LOVWorkCenter1");
    }


    /**
     * Container's getter for LOVAppMnfItm_Vw1.
     * @return LOVAppMnfItm_Vw1
     */
    public ViewObjectImpl getLOVAppMnfItm_Vw1() {
        return (ViewObjectImpl) findViewObject("LOVAppMnfItm_Vw1");
    }

    /**
     * Container's getter for MnfWsTOMnfWsItemNmVL1.
     * @return MnfWsTOMnfWsItemNmVL1
     */
    public ViewLinkImpl getMnfWsTOMnfWsItemNmVL1() {
        return (ViewLinkImpl) findViewLink("MnfWsTOMnfWsItemNmVL1");
    }

    /**
     * Container's getter for MnfWsCap1.
     * @return MnfWsCap1
     */
    public MnfWsCapVOImpl getMnfWsCap1() {
        return (MnfWsCapVOImpl) findViewObject("MnfWsCap1");
    }

    /**
     * Container's getter for MnfWsCap2.
     * @return MnfWsCap2
     */
    public MnfWsCapVOImpl getMnfWsCap2() {
        return (MnfWsCapVOImpl) findViewObject("MnfWsCap2");
    }

    /**
     * Container's getter for MnfWsToMnfWsCapVL1.
     * @return MnfWsToMnfWsCapVL1
     */
    public ViewLinkImpl getMnfWsToMnfWsCapVL1() {
        return (ViewLinkImpl) findViewLink("MnfWsToMnfWsCapVL1");
    }

    /**
     * Container's getter for LOVSupplierId1.
     * @return LOVSupplierId1
     */
    public ViewObjectImpl getLOVSupplierId1() {
        return (ViewObjectImpl) findViewObject("LOVSupplierId1");
    }

    /**
     * Container's getter for LOVEmp1.
     * @return LOVEmp1
     */
    public ViewObjectImpl getLOVEmp1() {
        return (ViewObjectImpl) findViewObject("LOVEmp1");
    }

    public void createMnfWSResRow() {
    }


    /**
     * Container's getter for MnfWsRes1.
     * @return MnfWsRes1
     */
    public MnfWsResVOImpl getMnfWsRes() {
        return (MnfWsResVOImpl) findViewObject("MnfWsRes");
    }

    /**
     * Container's getter for MnfWsToMnfWsResVL1.
     * @return MnfWsToMnfWsResVL1
     */
    public ViewLinkImpl getMnfWsToMnfWsResVL1() {
        return (ViewLinkImpl) findViewLink("MnfWsToMnfWsResVL1");
    }


    /**
     *
     * Function to Attach document
     * */

    public String insertInMnfWSAttch(String AttchFileExtn, String AttchFilepath, String AttchExtn, String DispFlNm) {

        ViewObjectImpl attch1 = this.getMnfWsAttch2();
        Row createRow = attch1.createRow();
        createRow.setAttribute("CldId", getCldId());
        createRow.setAttribute("SlocId", getSlocId());
        createRow.setAttribute("HoOrgId", getHoOrgId());
        String cloudId = this.getCldId().toString();
        String hoOrgId = this.getHoOrgId().toString();
        String Nm = "";
        try {
            Nm = callStoredFunction(Types.VARCHAR, "APP.FN_APP_GEN_FILE_ATTCH_ID(?,?,?,?,?)", new Object[] {
                                    this.getSlocId(), cloudId, hoOrgId, hoOrgId, "MNF$WS$ATTCH"
            }).toString();

        } catch (Exception e) {
            e.printStackTrace();
        }
        String AttchFilepathToServer = "";
        AttchFilepathToServer = getServerPathToAttachFile(this.getSlocId());
        createRow.setAttribute("AttchFlNm", Nm);
        createRow.setAttribute("AttchFlExtn", AttchFileExtn);
        createRow.setAttribute("AttchFlPath", AttchFilepathToServer + Nm + AttchExtn);
        createRow.setAttribute("DispFlNm", DispFlNm);
        createRow.setAttribute("UsrIdCreate", getUsrId());
        createRow.setAttribute("UsrIdCreateDt", new Timestamp(System.currentTimeMillis()));
        attch1.insertRow(createRow);
        return Nm;
    }


    /**
     *
     *    STORED Function
     *
     * **/

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                    // System.out.println(bindVars[z] + "zzzzzzzzzzzzzzzzzzzzz");
                }
            }
            st.executeUpdate();
            return st.getObject(1);
        } catch (SQLException e) {
            e.printStackTrace();
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    /**
     *
     *    STORED Function
     *
     * **/
    public String getServerPathToAttachFile(int slocId) {
        String serverPath = "";
        try {
            serverPath = callStoredFunction(Types.VARCHAR, "APP.fn_get_app_doc_attach_path(?)", new Object[] {
                                            slocId }).toString();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return serverPath;
    }

    /**
     * Container's getter for LOVManufactureParam1.
     * @return LOVManufactureParam1
     */
    public ViewObjectImpl getLOVManufactureParam1() {
        return (ViewObjectImpl) findViewObject("LOVManufactureParam1");
    }

    public String getWSNoFunc() {
        return null;
    }

    /**
     * Setting Search PArameters
     */
    public void setWsSearchParams(String workStationId, String workActv, Date wsFromDate, Date wsToDate,
                                  String workCenterNme, Date wsPurchaseDt, String wsPersonIncharge) {

        Timestamp FrmDt = new Timestamp();
        Timestamp ToDt = new Timestamp();
        Timestamp InvDt = new Timestamp();
        if (wsFromDate != null)
            FrmDt = new Timestamp(wsFromDate);
        if (wsToDate != null)
            ToDt = new Timestamp(wsToDate);
        if (wsPurchaseDt != null)
            InvDt = new Timestamp(wsPurchaseDt);

        Row r = getLOVSearch1().first();

        ViewObjectImpl wsVO = this.getLOVWorkStationView();
        ViewCriteria vc = wsVO.getViewCriteria("LOVWorkStationViewVOCriteria");
        wsVO.applyViewCriteria(vc);
        wsVO.setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        wsVO.setNamedWhereClauseParam("BindWsID", r.getAttribute("workStationId"));
        wsVO.setNamedWhereClauseParam("BindWsActv", (workActv.equals("B")) ? null : workActv);
        wsVO.setNamedWhereClauseParam("BindWorkCenterName", r.getAttribute("TransWCId"));
        wsVO.setNamedWhereClauseParam("BindWsFromDt", r.getAttribute("createFromDt"));
        wsVO.setNamedWhereClauseParam("BindWsToDt", r.getAttribute("createToDt"));
        wsVO.setNamedWhereClauseParam("BindWsInvDt", r.getAttribute("InvoiceDate"));
        wsVO.setNamedWhereClauseParam("BindEmpId", r.getAttribute("wsEmpId"));
        wsVO.executeQuery();
    }

    public void searchWsBtnAction() {
        Row r = getDualWsSearchVO().first();

        String actv = null;
        if (r.getAttribute("Status") != null) {
            String tmp = r.getAttribute("Status").toString();
            // System.out.println(tmp + " ---------------------");
            if (tmp.equalsIgnoreCase("Inactive"))
                actv = "N";
            if (tmp.equalsIgnoreCase("Active"))
                actv = "Y";
            if (tmp.equalsIgnoreCase("Both"))
                actv = null;
        } else {
            actv = null;
        }
        //System.out.println(actv + " +++++++++++++++");

        ViewObject searchVO = getLOVWorkStationView().getViewObject();
        searchVO.setNamedWhereClauseParam("BindCldId", r.getAttribute("Cldid"));
        searchVO.setNamedWhereClauseParam("BindSlocId", r.getAttribute("Slocid"));
        searchVO.setNamedWhereClauseParam("BindHoOrgId", r.getAttribute("Hoorgid"));
        //searchVO.setNamedWhereClauseParam("BindUsrId", r.getAttribute("UsrIdCreate"));
        searchVO.setNamedWhereClauseParam("BindWcId", r.getAttribute("WCId"));
        searchVO.setNamedWhereClauseParam("BindWsId", r.getAttribute("WSId"));
        searchVO.setNamedWhereClauseParam("BindEmpId", r.getAttribute("PrsnInchId"));
        searchVO.setNamedWhereClauseParam("BindInvDt", r.getAttribute("PurchaseDate"));
        searchVO.setNamedWhereClauseParam("BindWsActv", actv);
        searchVO.setNamedWhereClauseParam("BindWsFromDt", r.getAttribute("CreatedFrom"));
        searchVO.setNamedWhereClauseParam("BindWsToDt", r.getAttribute("CreatedTo"));
        searchVO.executeQuery();

    }

    /**
     *Reset Button Action Listener on Search Page.
     */
    public void resetBtnAction() {
        getDualWsSearchVO().executeQuery();
        ViewObjectImpl wsVO = this.getLOVWorkStationView();

        wsVO.setNamedWhereClauseParam("BindCldId", null);
        wsVO.setNamedWhereClauseParam("BindSlocId", null);
        wsVO.setNamedWhereClauseParam("BindHoOrgId", null);
        //searchVO.setNamedWhereClauseParam("BindUsrId", null);
        wsVO.setNamedWhereClauseParam("BindWcId", null);
        wsVO.setNamedWhereClauseParam("BindWsId", null);
        wsVO.setNamedWhereClauseParam("BindEmpId", null);
        wsVO.setNamedWhereClauseParam("BindInvDt", null);
        wsVO.setNamedWhereClauseParam("BindWsActv", null);
        wsVO.setNamedWhereClauseParam("BindWsFromDt", null);
        wsVO.setNamedWhereClauseParam("BindWsToDt", null);
        wsVO.executeQuery();

    }

    /**
     * Container's getter for LOVSearch1.
     * @return LOVSearch1
     */
    public ViewObjectImpl getLOVSearch1() {
        return (ViewObjectImpl) findViewObject("LOVSearch1");
    }

    /**
     *Setting Parameters to Create Work Station.
     *
     */
    public void setCreateTFParam(Integer slocId, String cldId, String HoOrdId, String WsId, Integer usrId,
                                 String OrgId) {
        MnfWsVOImpl voexec = this.getMnfWs1();
        if (WsId.equals(null)) {
            String workStation = this.getLOVWorkStationView().getCurrentRow().getAttribute("WsId").toString();
            voexec.setBindWsId(workStation);
        } else {
            voexec.setBindWsId(WsId);
        }
        voexec.setCldIdBindVar(cldId);
        voexec.setSlocIdBIndVar(slocId);
        voexec.setHoOrgIdBindVar(HoOrdId);
        voexec.executeQuery();
        //this.getMnfWs1().executeQuery();
        Map pageFlowScope = ADFContext.getCurrent().getPageFlowScope();
        pageFlowScope.put("ATTACH_MANPOWER", chkOrgPrf());
       //setFilterForShiftNm(this.getCldId(), this.getSlocId(), this.getHoOrgId(),null);
    }

    /**
     * Container's getter for LOVShift1.
     * @return LOVShift1
     */
    public ViewObjectImpl getLOVShift1() {
        return (ViewObjectImpl) findViewObject("LOVShift1");
    }

    /**
     * Container's getter for LOVWsShiftO1.
     * @return LOVWsShiftO1
     */
    public ViewObjectImpl getLOVWsShiftO1() {
        return (ViewObjectImpl) findViewObject("LOVWsShiftO1");
    }

    /**
     * Container's getter for LOVWorkStationView3.
     * @return LOVWorkStationView3
     */
    public LOVWorkStationViewVOImpl getLOVWorkStationView() {
        return (LOVWorkStationViewVOImpl) findViewObject("LOVWorkStationView");
    }

    /**
     * Container's getter for LOVOrganization1.
     * @return LOVOrganization1
     */
    public ViewObjectImpl getLOVOrganization1() {
        return (ViewObjectImpl) findViewObject("LOVOrganization1");
    }

    /**
     * Container's getter for MnfWsOrg1.
     * @return MnfWsOrg1
     */
    public MnfWsOrgVOImpl getMnfWsOrg1() {
        return (MnfWsOrgVOImpl) findViewObject("MnfWsOrg1");
    }

    /**
     * Container's getter for MnfWsToMnfWsOrgVL1.
     * @return MnfWsToMnfWsOrgVL1
     */
    public ViewLinkImpl getMnfWsToMnfWsOrgVL1() {
        return (ViewLinkImpl) findViewLink("MnfWsToMnfWsOrgVL1");
    }

    /**
     * Container's getter for MnfWsAMC1.
     * @return MnfWsAMC1
     */
    public MnfWsAMCVOImpl getMnfWsAMC1() {
        return (MnfWsAMCVOImpl) findViewObject("MnfWsAMC1");
    }

    /**
     * Container's getter for MnfWsToMnfWsAMCVL1.
     * @return MnfWsToMnfWsAMCVL1
     */
    public ViewLinkImpl getMnfWsToMnfWsAMCVL1() {
        return (ViewLinkImpl) findViewLink("MnfWsToMnfWsAMCVL1");
    }

    /**
     *Generating AMC Serial Number
     *
     */
    public Integer getMnfAMCSerialNo() {
        RowSetIterator mnfamc = getMnfWsAMC1().createRowSetIterator(null);
        Row row = null;
        Integer amcSrNo = 0;
        Integer currNo = 0;
        while (mnfamc.hasNext()) {
            row = mnfamc.next();
            currNo = (Integer) row.getAttribute("AmcSrNo");
            if (currNo.compareTo(amcSrNo) == 1) {
                amcSrNo = currNo;
            }
        }
        mnfamc.closeRowSetIterator();
        return (amcSrNo + 1);
    }

    /**
     *Setting Serial Number for Work Station AMC
     * and creating Row for it.
     *
     */
    public void setParamForAMC() {
        Row row = (Row) this.getMnfWsAMC1().createRow();
        row.setAttribute("AmcSrNo", getMnfAMCSerialNo());
        this.getMnfWsAMC1().insertRow(row);
        this.getMnfWsAMC1().setCurrentRow(row);
    }

    /**
     *
     * @return Organization Currency Id
     */
    public Integer getOrgCurrId() {
        Integer curId;
        try {
            curId = Integer.parseInt(callStoredFunction(Types.INTEGER, "app.get_org_def_curr_bs1(?,?,?)", new Object[] {
                                                        this.getCldId(), this.getSlocId(), this.getHoOrgId()
            }).toString());
        } catch (Exception ex) {
            throw new JboException(ex);
        }
        return curId;
    }

    /**
     *
     * @return Organization Currency Id
     */
    public void getCurrId(Integer OrgCurrId, String OrgId) {
        ViewObjectImpl wsVO = this.getLOVCurrVO1();
        wsVO.setNamedWhereClauseParam("BindCurrId", OrgCurrId);
        wsVO.setNamedWhereClauseParam("BindOrgId", OrgId);
        wsVO.executeQuery();
    }

    /**
     * Container's getter for LOVCurrVO1.
     * @return LOVCurrVO1
     */
    public ViewObjectImpl getLOVCurrVO1() {
        return (ViewObjectImpl) findViewObject("LOVCurrVO1");
    }

    /**
     * Container's getter for LOVUOMCapVO1.
     * @return LOVUOMCapVO1
     */
    public ViewObjectImpl getLOVUOMCapVO1() {
        return (ViewObjectImpl) findViewObject("LOVUOMCapVO1");
    }

    /**
     *
     * Method to copy data from previous work station.
     *
     */
    public void getpreviousWorstationInf(String newWSId, String oldWsID) {
        String dummy = null;
        //String newWSId1 = getMnfWs1().getCurrentRow().getAttribute("WsId").toString();

        try {
            // dummy:=FN_MNF_COPY_PRF('0000',1,'01','01',1,'MNF.MNF$WC','WC000020','WC000001',null,null,'Copy Work Center');
            dummy = callStoredFunction(Types.VARCHAR, "MNF.FN_MNF_COPY_PRF(?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                       this.getCldId().toString(), this.getSlocId(), this.getHoOrgId().toString(),
                                       this.getHoOrgId().toString(), this.getUsrId(), "MNF.MNF$WS", newWSId, oldWsID,
                                       null, null, "Copy Work Station."
            }).toString();
        } catch (Exception ex) {
            throw new JboException(ex);
        }
        //getMnfWtMs1().executeQuery();
        getMnfWsShift2().executeQuery();
        getMnfWsCap2().executeQuery();
        getMnfWsParam2().executeQuery();
        getMnfWsRes().executeQuery();
        getMnfWsAMC1().executeQuery();
        getMnfWsAttch2().executeQuery();

    }


    /**
     * Container's getter for LOVCopyPreVO1.
     * @return LOVCopyPreVO1
     */
    public ViewObjectImpl getLOVCopyPreVO1() {
        return (ViewObjectImpl) findViewObject("LOVCopyPreVO1");
    }

    /**
     *
     * To attach default Organization to Work Station
     *
     */
    public void attachOrganization() {
        Row[] rowSet = getMnfWsOrg1().getFilteredRows("OrgId", this.getHoOrgId().toString());
        //System.out.println("profile count " + rowSet.length);
        if (rowSet.length == 0) {

            orgSave();
        }
    }

    /**
     *Save Organization.
     */
    public void orgSave() {
        Row row = (Row) this.getMnfWsOrg1().createRow();
        row.setAttribute("OrgId", getHoOrgId());
        row.setAttribute("WsActv", 'Y');
        this.getMnfWsOrg1().insertRow(row);
        this.getMnfWsOrg1().setCurrentRow(row);
    }

    /**
     *
     * Check For Duplicacy
     *
     * **/
    public String chkDuplicate(String tab, String val) {

        if (tab.equals("WS_SHIFT") || tab == "WS_SHIFT") {
            return duplicateShiftID(val);
        } else if (tab.equals("WS_PARAM") || tab == "WS_PARAM") {
            return duplicateParamID(val);
        } else if (tab.equals("WS_ITM") || tab == "WS_ITM") {
            return duplicateItemID(val);
        } else if (tab.equals("WS_EMP") || tab == "WS_EMP") {
            return duplicateEmpID(val);
        }
        return "NONE";
    }

    /**
     *
     * Duplicate ITEM
     *
     * **/
    private String duplicateItemID(String val) {
        String shiftId = null;
        if (val != null) {
            ViewObjectImpl voshift = this.getLOVAppMnfItm_Vw1();
            // voshift.setNamedWhereClauseParam("CldIdBindVar", getCldId());
            //   voshift.setNamedWhereClauseParam("SlocIdBindVar", getSlocId());
            //   voshift.setNamedWhereClauseParam("HoOrgBindVar", getHoOrgId());

            //   voshift.executeQuery();
            //   System.out.println("ShiftVOROWIML =========  " +voshift.getRowCount()  );
            Row[] rowShift = voshift.getFilteredRows("ItmDesc", val);
            if (rowShift.length > 0) {
                if (rowShift[0].getAttribute("ItmId").toString() != null) {
                    return rowShift[0].getAttribute("ItmId").toString();
                }
            }
        }
        return shiftId;
    }

    /**
     *
     * Duplicate Employee
     *
     * **/
    private String duplicateEmpID(String val) {
        String shiftId = null;
        if (val != null) {
            ViewObjectImpl voshift = this.getLOVEmp1();
            Row[] rowShift = voshift.getFilteredRows("EoNm", val);
            if (rowShift.length > 0) {
                if (rowShift[0].getAttribute("EoId").toString() != null) {
                    // System.out.println("ShiftVOROWIML =========  " + rowShift[0].getAttribute("EoId").toString());
                    return rowShift[0].getAttribute("EoId").toString();
                }
            }
        }
        return shiftId;
    }


    /**
     *
     * Duplicate Shift
     *
     * **/
    private String duplicateShiftID(String val) {
        String shiftId = null;
        if (val != null) {
            ViewObjectImpl voshift = this.getLOVShift1();
            // voshift.setNamedWhereClauseParam("CldIdBindVar", getCldId());
            //   voshift.setNamedWhereClauseParam("SlocIdBindVar", getSlocId());
            //   voshift.setNamedWhereClauseParam("HoOrgBindVar", getHoOrgId());

            //   voshift.executeQuery();
            //   System.out.println("ShiftVOROWIML =========  " +voshift.getRowCount()  );
            Row[] rowShift = voshift.getFilteredRows("ShiftNm", val);
            if (rowShift.length > 0) {
                if (rowShift[0].getAttribute("ShiftId").toString() != null) {
                    return rowShift[0].getAttribute("ShiftId").toString();
                }

            }


        }
        return shiftId;
    }

    /**
     *
     * To Check Duplicate Parameter
     *
     * **/
    private String duplicateParamID(String paramVal) {
        String paraId = null;

        if (paramVal != null) {
            ViewObjectImpl paramDescvoimpl = this.getLOVManufactureParam1();
            // paramDescvoimpl.setNamedWhereClauseParam("CldIdBindVar", getCldId());
            //paramDescvoimpl.setNamedWhereClauseParam("HoOrgIdBindVar", getHoOrgId());
            // paramDescvoimpl.setNamedWhereClauseParam("SlocIdBindVar", getSlocId());
            // paramDescvoimpl.executeQuery();
            // Row [] wcItm  =itemdescvoimpl.getFilteredRows("ItmId", getItmId());
            Row[] paramDesc = paramDescvoimpl.getFilteredRows("ParamNme", paramVal);
            if (paramDesc.length > 0) {
                if (paramDesc[0].getAttribute("ParamId") != null)
                    return paramDesc[0].getAttribute("ParamId").toString();
            }
        }

        return paraId;

    }

    public boolean duplicateShiftEo(String shiftName) {
        RowSetIterator rSetIter = getMnfWsShift2().createRowSetIterator(null);
        Integer countVal = 0;
        if (shiftName != null) {
            while (rSetIter.hasNext()) {
                Row r = rSetIter.next();
                if (shiftName.equals(r.getAttribute("TransShiftName"))) {
                    //System.out.println("1 Org Found : " + shiftName.equals(r.getAttribute("TransShiftName")));
                    countVal = countVal + 1;
                }
            }
            rSetIter.closeRowSetIterator();
            Row currentRow = getMnfWsShift2().getCurrentRow();

            if (shiftName.equals(currentRow.getAttribute("TransShiftName"))) {
                // System.out.println("2 Org Id Found : " + shiftName.equals(currentRow.getAttribute("TransShiftName")));
                countVal = countVal - 1;
            }
        }
        return countVal == 1 ? true : false;
    }

    public boolean duplicateParamEo(String paramName) {
        RowSetIterator rSetIter = getMnfWsParam2().createRowSetIterator(null);
        Integer countVal = 0;
        if (paramName != null) {
            while (rSetIter.hasNext()) {
                Row r = rSetIter.next();
                if (paramName.equals(r.getAttribute("TransParamDesc"))) {
                    //System.out.println("1 Org Found : " + shiftName.equals(r.getAttribute("TransShiftName")));
                    countVal = countVal + 1;
                }
            }
            rSetIter.closeRowSetIterator();
            Row currentRow = getMnfWsParam2().getCurrentRow();

            if (paramName.equals(currentRow.getAttribute("TransParamDesc"))) {
                // System.out.println("2 Org Id Found : " + shiftName.equals(currentRow.getAttribute("TransShiftName")));
                countVal = countVal - 1;
            }
        }
        return countVal == 1 ? true : false;
    }

    public boolean duplicateManEo(String empName) {
        RowSetIterator rSetIter = getMnfWsRes().createRowSetIterator(null);
        Integer countVal = 0;
        if (empName != null) {
            while (rSetIter.hasNext()) {
                Row r = rSetIter.next();
                if (empName.equals(r.getAttribute("TransEmpName"))) {
                    //System.out.println("1 Org Found : " + shiftName.equals(r.getAttribute("TransShiftName")));
                    countVal = countVal + 1;
                }
            }
            rSetIter.closeRowSetIterator();
            Row currentRow = getMnfWsRes().getCurrentRow();

            if (empName.equals(currentRow.getAttribute("TransEmpName"))) {
                // System.out.println("2 Org Id Found : " + shiftName.equals(currentRow.getAttribute("TransShiftName")));
                countVal = countVal - 1;
            }
        }
        return countVal == 1 ? true : false;
    }

    public boolean duplicateItemEo(String itemName) {
        RowSetIterator rSetIter = getMnfWsCap2().createRowSetIterator(null);
        Integer countVal = 0;
        if (itemName != null) {
            while (rSetIter.hasNext()) {
                Row r = rSetIter.next();
                if (itemName.equals(r.getAttribute("TransItmId"))) {
                    //System.out.println("1 Org Found : " + shiftName.equals(r.getAttribute("TransShiftName")));
                    countVal = countVal + 1;
                }
            }
            rSetIter.closeRowSetIterator();
            Row currentRow = getMnfWsCap2().getCurrentRow();

            if (itemName.equals(currentRow.getAttribute("TransItmId"))) {
                // System.out.println("2 Org Id Found : " + shiftName.equals(currentRow.getAttribute("TransShiftName")));
                countVal = countVal - 1;
            }
        }
        return countVal == 1 ? true : false;
    }


    /**
     *
     * Replicate to all organization
     *
     * **/
    public void replicateWsToOrganization() {

        deleteAddedOrgs("MnfWsOrg1");
        RowSetIterator rSetIter = getLOVOrganization1().createRowSetIterator(null);
        Row r = null;
        while (rSetIter.hasNext()) {
            r = rSetIter.next();
            createOrgMnfSWs(r.getAttribute("OrgId").toString());
        }
        rSetIter.closeRowSetIterator();
    }

    /**
     *
     * Delete an Added Ho Organization before replicating to all organization.
     *
     * **/
    public void deleteAddedOrgs(String voName) {

        while (findViewObject(voName).createRowSetIterator(null).hasNext()) {

            findViewObject(voName).createRowSetIterator(null).next().remove();

            //System.out.println(voName + " row removed ");
        }
    }

    /**
     *
     * Attaching an organization to Work Station.
     *
     * **/
    public void createOrgMnfSWs(String org) {

        Row r = getMnfWsOrg1().createRow();
        r.setAttribute("OrgId", org);
        r.setAttribute("WsActv", "Y");
        getMnfWsOrg1().insertRow(r);

    }

    /**
     *
     * Function to attach man power at workstation or not
     *
     * **/
    public String chkOrgPrf() {

        String dummy = null;
        try {

            dummy = callStoredFunction(Types.VARCHAR, "fn_mnf_chk_org_prf(?,?,?,?)", new Object[] {
                                       this.getCldId().toString(), this.getSlocId(), this.getHoOrgId().toString(),
                                       "ATTACH_MANPWR_WS"
            }).toString();
        } catch (Exception ex) {
            throw new JboException(ex);
        }
        // System.out.println("Value of Dummy is : " + dummy);
        return dummy;

    }

    /**
     * Container's getter for LOVParamBasis1.
     * @return LOVParamBasis1
     */
    public ViewObjectImpl getLOVParamBasis1() {
        return (ViewObjectImpl) findViewObject("LOVParamBasis1");
    }

    /**
     * Creating Row in MNF$PDO$ATTACH
     *
     * */
    public String createAttchmntRow(String contentTyp, String fileNm, String extn) {

        String path = getUpFilePath(this.getSlocId());
        String fileId =
            this.getUpFileId(this.getCldId().toString(), this.getSlocId(), this.getHoOrgId().toString(), null);
        Row r = this.getMnfWsAttch2().createRow();
        r.setAttribute("AttchFlExtn", contentTyp);
        r.setAttribute("DispFlNm", fileNm);
        r.setAttribute("AttchFlNm", fileId);
        r.setAttribute("AttchFlPath", path + fileId + extn);
        this.getMnfWsAttch2().insertRow(r);
        return path + fileId;
    }

    /**
     * Method to get system generated file no
     *
     ***/
    public String getUpFileId(String cldId, Integer slcId, String hoOrgId, String tabNm) {

        Object fnRetVal;

        try {
            fnRetVal = callStoredFunction(Types.VARCHAR, "APP.FN_APP_GEN_FILE_ATTCH_ID(?,?,?,?,?)", new Object[] {
                                          slcId, cldId, hoOrgId, hoOrgId, "MNF$WS$ATTCH"
            });

            if (fnRetVal != null) {

                if (fnRetVal.equals(-1)) {
                    showFacesMsg("Error while fetching file Id details", null, FacesMessage.SEVERITY_ERROR, null);
                }

                return fnRetVal.toString();
            }

        } catch (Exception e) {

            e.printStackTrace();

        }
        showFacesMsg("Error while fetching file Id details", null, FacesMessage.SEVERITY_ERROR, null);

        return "0";
    }

    /**
     * Method to get default file location
     * **/
    public String getUpFilePath(Integer slcId) {
        Object fnRetVal;

        try {
            fnRetVal = callStoredFunction(Types.VARCHAR, "APP.FN_GET_APP_DOC_ATTACH_PATH(?)", new Object[] { slcId });

            if (fnRetVal != null) {

                if (fnRetVal.equals(-1)) {
                    showFacesMsg("Error while fetching file path details", null, FacesMessage.SEVERITY_ERROR, null);
                }

                return fnRetVal.toString();
            }

        } catch (Exception e) {

            e.printStackTrace();

        }
        showFacesMsg("Error while fetching file path details", null, FacesMessage.SEVERITY_ERROR, null);

        return null;
    }

    /**
     * Showing an error message.
     *
     * */
    public void showFacesMsg(String msgHdr, String msgDtl, javax.faces.application.FacesMessage.Severity msgSeverity,
                             String msgMode) {

        FacesMessage msg = new FacesMessage(msgHdr);
        msg.setDetail(msgDtl);
        msg.setSeverity(msgSeverity);
        FacesContext.getCurrentInstance().addMessage(null, msg);

    }


    /**
     * Container's getter for LOVShiftForWSVO1.
     * @return LOVShiftForWSVO1
     */
    public ViewObjectImpl getLOVShiftForWSVO1() {
        return (ViewObjectImpl) findViewObject("LOVShiftForWSVO1");
    }

    /**
     * Container's getter for LOVParamSet1.
     * @return LOVParamSet1
     */
    public ViewObjectImpl getLOVParamSet1() {
        return (ViewObjectImpl) findViewObject("LOVParamSet1");
    }

    /**
     * Container's getter for LOVShiftVO1.
     * @return LOVShiftVO1
     */
    public ViewObjectImpl getLOVShiftVO1() {
        return (ViewObjectImpl) findViewObject("LOVShiftVO1");
    }


    /**
     * Container's getter for LOVParamValTyp1.
     * @return LOVParamValTyp1
     */
    public ViewObjectImpl getLOVParamValTyp1() {
        return (ViewObjectImpl) findViewObject("LOVParamValTyp1");
    }

    /**
     * Container's getter for DualWsSearchVO1.
     * @return DualWsSearchVO1
     */
    public ViewObjectImpl getDualWsSearchVO() {
        return (ViewObjectImpl) findViewObject("DualWsSearchVO");
    }

    /**
     * Container's getter for LOVAllParameterVO1.
     * @return LOVAllParameterVO1
     */
    public ViewObjectImpl getLOVAllParameterVO() {
        return (ViewObjectImpl) findViewObject("LOVAllParameterVO");
    }

    /**
     * Container's getter for LOVAllParamSetVO1.
     * @return LOVAllParamSetVO1
     */
    public ViewObjectImpl getLOVAllParamSetVO() {
        return (ViewObjectImpl) findViewObject("LOVAllParamSetVO");
    }

    /**
     * Container's getter for LOVAllShiftVO1.
     * @return LOVAllShiftVO1
     */
    public ViewObjectImpl getLOVAllShiftVO() {
        return (ViewObjectImpl) findViewObject("LOVAllShiftVO");
    }

    /**
     * To Delete Attached Document
     * @return void
     */
    public void deleteAttachFileRow(String path) {
        RowSetIterator rowSetIterator = null;
        try {
            System.out.println("File path in AMimpl : " + path);
            String filePath = "";
            String fileNm = "", cldId = "", horgId = "", wsId = "";
            int slocId = 1;
            ViewObjectImpl attch1 = this.getMnfWsAttch2();
            Row[] rows = attch1.getFilteredRows("AttchFlPath", path);
            System.out.println(rows.length);
            if (rows.length > 0) {
                fileNm = (String) rows[0].getAttribute("AttchFlNm");
                cldId = (String) rows[0].getAttribute("CldId");
                horgId = (String) rows[0].getAttribute("HoOrgId");
                slocId = Integer.parseInt(rows[0].getAttribute("SlocId").toString());
                wsId = (String) rows[0].getAttribute("WsId");
            }
            rowSetIterator = attch1.getRowSetIterator();
            Key key = new Key(new Object[] { fileNm, cldId, horgId, slocId, wsId });
            Row[] ro = rowSetIterator.findByKey(key, 1);
            //System.out.println("Filtered Row : "+ro.length);
            Row row = rowSetIterator.findByKey(key, 1)[0];
            rowSetIterator.setCurrentRow(row);
            Row r = this.getMnfWsAttch2().getCurrentRow();
            filePath = (String) r.getAttribute("AttchFlPath");
            //System.out.println("Current Row File Path : "+filePath);
            filePath = (String) row.getAttribute("AttchFlPath");
            //System.out.println("Row File Path : "+filePath);
            File f = new File(filePath);
            if (f.exists()) {
                boolean success = f.delete();
                System.out.println("File Deleted");
            }
        } catch (Exception x) {

            System.err.format("%s: no such" + " file or directory%n", path);
        }
        rowSetIterator.removeCurrentRow();
    }

    /**
     * Check unique name validation for Route Desc.
     * Route description is not case sensitive
     * @returns Y if name exists otherwise N
     * **/

    public String validateWsNm() {

        String wsDesc = (String) this.getMnfWs1().getCurrentRow().getAttribute("WsDesc");
        String doc_txn_id = (String) this.getMnfWs1().getCurrentRow().getAttribute("WsId");

        try {
            return callStoredFunction(Types.VARCHAR, "FN_PRE_NM_EXIST(?,?,?,?,?,?)", new Object[] {
                                      getCldId().toString(), getSlocId(), getHoOrgId().toString(), "WS", wsDesc,
                                      doc_txn_id
        }).toString();
        } catch (Exception e) {
            e.printStackTrace();

            StringBuilder saveMsg = new StringBuilder("<html><body><p><b>Error in Validating Route Name. </b></p>");

            saveMsg.append("</body></html>");

            showFacesMsg(saveMsg.toString(), null, FacesMessage.SEVERITY_ERROR, null);

        }
        return "N";
    }

    public boolean duplicateempToShift(String paramName, String ShiftNme) {
        RowSetIterator rSetIter = getMnfWsRes().createRowSetIterator(null);
        Integer countVal = 0;
        if (paramName != null) {
            while (rSetIter.hasNext()) {
                Row r = rSetIter.next();
                if (paramName.equals(r.getAttribute("TransEmpName")) && ShiftNme.equals(r.getAttribute("TransShift"))) {
                    //System.out.println("1 Org Found : " + shiftName.equals(r.getAttribute("TransShiftName")));
                    countVal = countVal + 1;
                }
            }
            rSetIter.closeRowSetIterator();
            Row currentRow = getMnfWsRes().getCurrentRow();

            if (paramName.equals(currentRow.getAttribute("TransEmpName")) &&
                ShiftNme.equals(currentRow.getAttribute("TransShift"))) {
                // System.out.println("2 Org Id Found : " + shiftName.equals(currentRow.getAttribute("TransShiftName")));
                countVal = countVal - 1;
            }
        }
        return countVal == 1 ? true : false;

        /* RowSetIterator rSetIter = getMnfWcRes1().createRowSetIterator(null);
        Integer countVal = 0;
        if (shiftName != null && empName!=null) {
            while (rSetIter.hasNext()) {
                Row r = rSetIter.next();
                if (shiftName.equals(r.getAttribute("TransShiftDesc")) && empName.equals(r.getAttribute("TransEmpname"))) {
                    System.out.println("1 emp Found : " + shiftName.equals(r.getAttribute("TransShiftDesc")));
                    countVal = countVal + 1;
                }
            }
            rSetIter.closeRowSetIterator();
            Row currentRow = getMnfWcRes1().getCurrentRow();

            if (shiftName.equals(currentRow.getAttribute("TransShiftDesc")) && empName.equals(currentRow.getAttribute("TransEmpname"))) {
                countVal = countVal - 1;
            }
        }

        return countVal == 1 ? true : false; */
    }


    /**
     * Function to check duplicate added employee
     */
    public String duplicateEmployeeID(String shiftVal, String empVal) {
        Object shiftId = null;
        if (shiftVal != null) {
            ViewObjectImpl shiftVo = this.getLOVShift1();
            if (shiftVo.getFilteredRows("ShiftNm", shiftVal).length > 0) {
                shiftId = shiftVo.getFilteredRows("ShiftNm", shiftVal)[0].getAttribute("ShiftId");
                ViewObjectImpl impl = this.getMnfWsRes();
                RowQualifier rq = new RowQualifier("ShiftId= '" + shiftId + "' AND WsEmpId= " + empVal);
                Row[] filteredRows = impl.getFilteredRows(rq);
                if (filteredRows.length > 0 && filteredRows[0] != impl.getCurrentRow()) {
                    return "true";
                }
            }
        }
        return "false";
    }

    /**
     *Method to check the default WS in exist
     * @param itmId
     */
    /* public String chkDefaultWsVal(String wcId) {

        RowSetIterator defR = getMnfWs1().createRowSetIterator(null);
        Row[] r = getMnfWs1().getFilteredRows("WcId", wcId);
        Set<String> bomId = new HashSet<String>();

        for (int i = 0; i < r.length; i++) {
            if (r[i] != getMnfWs1().getCurrentRow()) {
                bomId.add(r[i].getAttribute("WsId").toString());
            }
        }

        for (String bom : bomId) {
            defR = getMnfWs1().createRowSetIterator(null);
            while (defR.hasNext()) {

                Row c = defR.next();

                if (c.getAttribute("WsId").equals(bom) && c.getAttribute("WsDefFlg") != null &&
                    c.getAttribute("WsDefFlg").toString().equalsIgnoreCase("Y")) {
                    return "true";
                }
            }
            defR.closeRowSetIterator();

        }
        return "false";
    } */


    public String chkDefaultWsVal(String wcId) {
        Integer returnVal = 0;
        wcId = (String) this.getMnfWs1().getCurrentRow().getAttribute("WcId");
        RowSetIterator rsetIter = getLOVAllWorkStationVO1().createRowSetIterator(null);
        ViewObjectImpl impl = getMnfWsVO1();
        ViewObjectImpl wsVo = getLOVAllWorkStationVO1();
        // wsVo.setWhereClause("CldId="+this.getCldId()+" and HoOrgId='"+this.getHoOrgId()+" and SlocId='" + this.getSlocId());
        //  wsVo.executeQuery();
        RowQualifier rowQualifier = new RowQualifier(wsVo);
        rowQualifier.setWhereClause(" CldId ='" + this.getCldId() + "' and HoOrgId = '" + this.getHoOrgId() +
                                    "' and SlocId = '" + this.getSlocId() + "' and WcId = '" + wcId + "'");

        Row[] r2 = wsVo.getFilteredRows(rowQualifier);
       Row r = null;
        Set<String> bomId = new HashSet<String>();
        for (int i = 0; i < r2.length; i++) {
            if (r2[i] != getMnfWs1().getCurrentRow()) {
                bomId.add(r2[i].getAttribute("WcId").toString());
            }
        }

        for (String bom : bomId) {
            //    System.out.println("m here");
            while (rsetIter.hasNext()) {
                r = rsetIter.next();
                //  System.out.println("this here this " + " ====== " + wcId);
            //   if(r != impl.getCurrentRow()){
                if (r.getAttribute("WsDefFlg").toString().equalsIgnoreCase("Y") && r.getAttribute("WsDefFlg") != null &&
                    r.getAttribute("WcId").toString().equalsIgnoreCase(wcId)) {
                    returnVal = returnVal + 1;
                }
             //   }
            }
            rsetIter.closeRowSetIterator();
        }
        /* ViewObjectImpl impl = this.getMnfWs1();
        RowQualifier rq = new RowQualifier("WcId= '" + wcId + "' AND WsDefFlg= 'Y'");
        Row[] filteredRows = impl.getFilteredRows(rq);
        System.out.println("lenght " + filteredRows.length);
        if (filteredRows.length > 0 && filteredRows[0] != impl.getCurrentRow()) {
            return "true";
        } */

        if (returnVal > 0) {
            return "true";
        }
        return "false";

    } 

    /**
     * Container's getter for MnfWsVO1.
     * @return MnfWsVO1
     */
    public MnfWsVOImpl getMnfWsVO1() {
        return (MnfWsVOImpl) findViewObject("MnfWsVO1");
    }

    /**
     * Container's getter for LOVAllWorkStationVO1.
     * @return LOVAllWorkStationVO1
     */
    public ViewObjectImpl getLOVAllWorkStationVO1() {
        return (ViewObjectImpl) findViewObject("LOVAllWorkStationVO1");
    }

    public String IsManPowerInchargeForShift(String shift, String empId) {
        Integer shiftInchargeCnt = 0;
        Row c = getMnfWs1().getCurrentRow();
        String x = c.getAttribute("WsId").toString() == null ? null : c.getAttribute("WsId").toString();
        RowSetIterator rsetIter = getMnfWsRes().createRowSetIterator(null);
        Row curRow = getMnfWsRes().getCurrentRow();
        Row r = null;
        if (x != null) {
            while (rsetIter.hasNext()) {
                r = rsetIter.next();
                if (curRow != null && !r.equals(curRow)) {
                    System.out.println("this here this " + " ====== " + shift);
                    if (r.getAttribute("DfltFlg").toString().equalsIgnoreCase("Y") &&
                        r.getAttribute("ShiftId").toString().equalsIgnoreCase(shift) &&
                        r.getAttribute("WsId").toString().equalsIgnoreCase(x)) {
                        shiftInchargeCnt = shiftInchargeCnt + 1;
                    }
                }
            }
        }
        rsetIter.closeRowSetIterator();
        if (shiftInchargeCnt > 0) {
            return "false";
        }
        return "true";
    }

  public void filterShift()
  {
      ViewObjectImpl Voimpl = this.getLOVShiftVO1();
      Voimpl.setNamedWhereClauseParam("CldIdBindVar", this.getCldId());
      Voimpl.setNamedWhereClauseParam("HoOrgBindVar", this.getHoOrgId());
      Voimpl.setNamedWhereClauseParam("SlocIdBindVar", this.getSlocId());
      Voimpl.setNamedWhereClauseParam("BindWcId", getMnfWs1().getCurrentRow().getAttribute("WcId").toString());
      Voimpl.executeQuery();     
      System.out.println("Vaaaaaaaaaaaaaaaaaaaaaaaa : " + Voimpl.getRowCount());   
  }

}

