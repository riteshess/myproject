package mnfWorkStationApp.model.entities;

import adf.utils.ebiz.EbizParams;

import javax.el.ELContext;
import javax.el.ValueExpression;

import oracle.adf.share.ADFContext;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.RowInconsistentException;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Sep 06 12:12:29 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MnfWsParamEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CldId,
        SlocId,
        HoOrgId,
        WsId,
        ParamId,
        ParamVal,
        UsrIdCreate,
        UsrIdCreateDt,
        UsrIdMod,
        UsrIdModDt,
        TlrncLower,
        TlrncUpper,
        TlrncType,
        LowerLimit,
        UpperLimit,
        ParamUom,
        ParamType,
        ParamSetId,
        MnfWs;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int WSID = AttributesEnum.WsId.index();
    public static final int PARAMID = AttributesEnum.ParamId.index();
    public static final int PARAMVAL = AttributesEnum.ParamVal.index();
    public static final int USRIDCREATE = AttributesEnum.UsrIdCreate.index();
    public static final int USRIDCREATEDT = AttributesEnum.UsrIdCreateDt.index();
    public static final int USRIDMOD = AttributesEnum.UsrIdMod.index();
    public static final int USRIDMODDT = AttributesEnum.UsrIdModDt.index();
    public static final int TLRNCLOWER = AttributesEnum.TlrncLower.index();
    public static final int TLRNCUPPER = AttributesEnum.TlrncUpper.index();
    public static final int TLRNCTYPE = AttributesEnum.TlrncType.index();
    public static final int LOWERLIMIT = AttributesEnum.LowerLimit.index();
    public static final int UPPERLIMIT = AttributesEnum.UpperLimit.index();
    public static final int PARAMUOM = AttributesEnum.ParamUom.index();
    public static final int PARAMTYPE = AttributesEnum.ParamType.index();
    public static final int PARAMSETID = AttributesEnum.ParamSetId.index();
    public static final int MNFWS = AttributesEnum.MnfWs.index();

    /**
     * This is the default constructor (do not remove).
     */
    public MnfWsParamEOImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("mnfWorkStationApp.model.entities.MnfWsParamEO");
    }


    /**
     * Gets the attribute value for CldId, using the alias name CldId.
     * @return the value of CldId
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CldId.
     * @param value value to set the CldId
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for SlocId, using the alias name SlocId.
     * @return the value of SlocId
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for SlocId.
     * @param value value to set the SlocId
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for HoOrgId, using the alias name HoOrgId.
     * @return the value of HoOrgId
     */
    public String getHoOrgId() {
        return (String) getAttributeInternal(HOORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for HoOrgId.
     * @param value value to set the HoOrgId
     */
    public void setHoOrgId(String value) {
        setAttributeInternal(HOORGID, value);
    }

    /**
     * Gets the attribute value for WsId, using the alias name WsId.
     * @return the value of WsId
     */
    public String getWsId() {
        return (String) getAttributeInternal(WSID);
    }

    /**
     * Sets <code>value</code> as the attribute value for WsId.
     * @param value value to set the WsId
     */
    public void setWsId(String value) {
        setAttributeInternal(WSID, value);
    }

    /**
     * Gets the attribute value for ParamId, using the alias name ParamId.
     * @return the value of ParamId
     */
    public String getParamId() {
        return (String) getAttributeInternal(PARAMID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ParamId.
     * @param value value to set the ParamId
     */
    public void setParamId(String value) {
        setAttributeInternal(PARAMID, value);
    }

    /**
     * Gets the attribute value for ParamVal, using the alias name ParamVal.
     * @return the value of ParamVal
     */
    public Number getParamVal() {
        return (Number) getAttributeInternal(PARAMVAL);
    }

    /**
     * Sets <code>value</code> as the attribute value for ParamVal.
     * @param value value to set the ParamVal
     */
    public void setParamVal(Number value) {
        setAttributeInternal(PARAMVAL, value);
    }

    /**
     * Gets the attribute value for UsrIdCreate, using the alias name UsrIdCreate.
     * @return the value of UsrIdCreate
     */
    public Integer getUsrIdCreate() {
        return (Integer) getAttributeInternal(USRIDCREATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdCreate.
     * @param value value to set the UsrIdCreate
     */
    public void setUsrIdCreate(Integer value) {
        System.out.println("setUsrIdCreate-----");
        setAttributeInternal(USRIDCREATE, value);
    }

    /**
     * Gets the attribute value for UsrIdCreateDt, using the alias name UsrIdCreateDt.
     * @return the value of UsrIdCreateDt
     */
    public Timestamp getUsrIdCreateDt() {
        return (Timestamp) getAttributeInternal(USRIDCREATEDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdCreateDt.
     * @param value value to set the UsrIdCreateDt
     */
    public void setUsrIdCreateDt(Timestamp value) {
        setAttributeInternal(USRIDCREATEDT, value);
    }

    /**
     * Gets the attribute value for UsrIdMod, using the alias name UsrIdMod.
     * @return the value of UsrIdMod
     */
    public Integer getUsrIdMod() {
        return (Integer) getAttributeInternal(USRIDMOD);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdMod.
     * @param value value to set the UsrIdMod
     */
    public void setUsrIdMod(Integer value) {
        setAttributeInternal(USRIDMOD, value);
    }

    /**
     * Gets the attribute value for UsrIdModDt, using the alias name UsrIdModDt.
     * @return the value of UsrIdModDt
     */
    public Timestamp getUsrIdModDt() {
        return (Timestamp) getAttributeInternal(USRIDMODDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdModDt.
     * @param value value to set the UsrIdModDt
     */
    public void setUsrIdModDt(Timestamp value) {
        setAttributeInternal(USRIDMODDT, value);
    }

    /**
     * Gets the attribute value for TlrncLower, using the alias name TlrncLower.
     * @return the value of TlrncLower
     */
    public oracle.jbo.domain.Number getTlrncLower() {
        return (oracle.jbo.domain.Number) getAttributeInternal(TLRNCLOWER);
    }

    /**
     * Sets <code>value</code> as the attribute value for TlrncLower.
     * @param value value to set the TlrncLower
     */
    public void setTlrncLower(oracle.jbo.domain.Number value) {
        setAttributeInternal(TLRNCLOWER, value);
    }

    /**
     * Gets the attribute value for TlrncUpper, using the alias name TlrncUpper.
     * @return the value of TlrncUpper
     */
    public Number getTlrncUpper() {
        return (Number) getAttributeInternal(TLRNCUPPER);
    }

    /**
     * Sets <code>value</code> as the attribute value for TlrncUpper.
     * @param value value to set the TlrncUpper
     */
    public void setTlrncUpper(Number value) {
        setAttributeInternal(TLRNCUPPER, value);
    }

    /**
     * Gets the attribute value for TlrncType, using the alias name TlrncType.
     * @return the value of TlrncType
     */
    public String getTlrncType() {
        return (String) getAttributeInternal(TLRNCTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for TlrncType.
     * @param value value to set the TlrncType
     */
    public void setTlrncType(String value) {
        setAttributeInternal(TLRNCTYPE, value);
    }

    /**
     * Gets the attribute value for LowerLimit, using the alias name LowerLimit.
     * @return the value of LowerLimit
     */
    public Number getLowerLimit() {
        return (Number) getAttributeInternal(LOWERLIMIT);
    }

    /**
     * Sets <code>value</code> as the attribute value for LowerLimit.
     * @param value value to set the LowerLimit
     */
    public void setLowerLimit(Number value) {
        setAttributeInternal(LOWERLIMIT, value);
    }

    /**
     * Gets the attribute value for UpperLimit, using the alias name UpperLimit.
     * @return the value of UpperLimit
     */
    public Number getUpperLimit() {
        return (Number) getAttributeInternal(UPPERLIMIT);
    }

    /**
     * Sets <code>value</code> as the attribute value for UpperLimit.
     * @param value value to set the UpperLimit
     */
    public void setUpperLimit(Number value) {
        setAttributeInternal(UPPERLIMIT, value);
    }

    /**
     * Gets the attribute value for ParamUom, using the alias name ParamUom.
     * @return the value of ParamUom
     */
    public String getParamUom() {
        return (String) getAttributeInternal(PARAMUOM);
    }

    /**
     * Sets <code>value</code> as the attribute value for ParamUom.
     * @param value value to set the ParamUom
     */
    public void setParamUom(String value) {
        setAttributeInternal(PARAMUOM, value);
    }

    /**
     * Gets the attribute value for ParamType, using the alias name ParamType.
     * @return the value of ParamType
     */
    public Integer getParamType() {
        return (Integer) getAttributeInternal(PARAMTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ParamType.
     * @param value value to set the ParamType
     */
    public void setParamType(Integer value) {
        setAttributeInternal(PARAMTYPE, value);
    }

    /**
     * Gets the attribute value for ParamSetId, using the alias name ParamSetId.
     * @return the value of ParamSetId
     */
    public String getParamSetId() {
        return (String) getAttributeInternal(PARAMSETID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ParamSetId.
     * @param value value to set the ParamSetId
     */
    public void setParamSetId(String value) {
        setAttributeInternal(PARAMSETID, value);
    }

    /**
     * @return the associated entity MnfWsEOImpl.
     */
    public MnfWsEOImpl getMnfWs() {
        return (MnfWsEOImpl) getAttributeInternal(MNFWS);
    }

    /**
     * Sets <code>value</code> as the associated entity MnfWsEOImpl.
     */
    public void setMnfWs(MnfWsEOImpl value) {
        setAttributeInternal(MNFWS, value);
    }


    /**
     * @param cldId key constituent
     * @param slocId key constituent
     * @param hoOrgId key constituent
     * @param wsId key constituent
     * @param paramId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(String cldId, Integer slocId, String hoOrgId, String wsId, String paramId) {
        return new Key(new Object[] { cldId, slocId, hoOrgId, wsId, paramId });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        
       // setUsrIdCreate(Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString()));
       if(EbizParams.GLBL_APP_USR() != null)
               {
                   setUsrIdCreate(EbizParams.GLBL_APP_USR());
               }
        setUsrIdCreateDt(new Timestamp(System.currentTimeMillis()));
        setLowerLimit(new Number(0));
        setUpperLimit(new Number(0));
        setTlrncLower(new Number(0));
        setTlrncUpper(new Number(0));
        super.create(attributeList);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        try {
            super.lock();
        } catch (RowInconsistentException e) {
            refresh(REFRESH_WITH_DB_ONLY_IF_UNCHANGED | REFRESH_CONTAINEES);
            super.lock();
        }
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        
        if(operation == DML_UPDATE)
        {
           //setUsrIdMod(Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString()));
            
           if(EbizParams.GLBL_APP_USR() != null)
                   {
                       setUsrIdMod(EbizParams.GLBL_APP_USR());
                   }
            setUsrIdModDt(new oracle.jbo.domain.Timestamp(System.currentTimeMillis()));
        }
        
        super.doDML(operation, e);
    }
    
    
    
    /**----------------------------------------------------------------**/
    
    /**Method to resolve page flow scope parameter.*/
    public Object resolvEl(String data) {
              ADFContext adfCtx = ADFContext.getCurrent();
              ELContext elContext = adfCtx.getELContext();
              ValueExpression valueExp = adfCtx.getExpressionFactory().createValueExpression(elContext, data,
    Object.class);
              Object Message = valueExp.getValue(elContext);
              return Message;
          }
    
    /**----------------------------------------------------------------**/
}

