package mnfshiftprofileapp.model.services;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;

import javax.el.ELContext;

import javax.el.ValueExpression;

import javax.faces.application.FacesMessage;
import javax.faces.validator.ValidatorException;

import mnfshiftprofileapp.model.services.common.MnfShiftProfileAppAM;

import oracle.adf.share.ADFContext;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.ApplicationModule;
import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Sep 06 14:31:36 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MnfShiftProfileAppAMImpl extends ApplicationModuleImpl implements MnfShiftProfileAppAM {
    private Integer rowCount = 0;
    
    private static ADFLogger adfLog = (ADFLogger) ADFLogger.createADFLogger(MnfShiftProfileAppAMImpl.class);

    /**
     * This is the default constructor (do not remove).
     */
    public MnfShiftProfileAppAMImpl() {
    }


    public Object resolvEl(String data) {

        ADFContext adfCtx = ADFContext.getCurrent();
        ELContext elContext = adfCtx.getELContext();
        ValueExpression valueExp = adfCtx.getExpressionFactory().createValueExpression(elContext, data, Object.class);
        Object Message = valueExp.getValue(elContext).toString();

        return Message;
    }

    public Integer getSlocId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC }").toString());
    }

    public StringBuffer getCldId() {
        return new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
    }

    public StringBuffer getOrgId() {
        return new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
    }

    public StringBuffer getHoOrgId() {
        return new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString());
    }

    public Integer getUsrId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
    }

    /**
     * Function to set Global Parameters initially
     * **/
    public void setGlobalParameter() {
        //setMnfShiftVar();
        setAppShiftOrganizationVar();
        setUserLOVVar();
        setLOVTransVar();
    }

    /**
     * Function to set Global Parameters initially in Transient VO
     * **/
    public void setLOVTransVar() {
        ViewObjectImpl voimpl = this.getTransSearch1();
        voimpl.setNamedWhereClauseParam("BindCldId", getCldId());
        voimpl.setNamedWhereClauseParam("BindHoId", getHoOrgId());
        voimpl.setNamedWhereClauseParam("BindSlocID", getSlocId());
        voimpl.executeQuery();
    }

    /**
     * Function to set Global Parameters initially in User LOV
     * **/
    public void setUserLOVVar() {
        ViewObjectImpl voimpl = this.getLOVUser1();
        voimpl.setNamedWhereClauseParam("BindSlocId", getSlocId());
        voimpl.executeQuery();
    }

    /**
     * Function to set Global Parameters initially in Organization LOV
     * **/
    public void setAppShiftOrganizationVar() {
        ViewObjectImpl voimpl = this.getLOVOrganization1();
        voimpl.setNamedWhereClauseParam("BindCldId", getCldId());
        voimpl.setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        voimpl.setNamedWhereClauseParam("BindSlcId",getSlocId());
        voimpl.executeQuery();
        rowCount = voimpl.getRowCount();
    }

    /**
     * Function to set Global Parameters initially in Main Shift VO
     * **/
    public void setMnfShiftVar() {
        ViewObjectImpl voimpl = this.getAppShift1();
        voimpl.setNamedWhereClauseParam("BindCldId", "-1");
        voimpl.setNamedWhereClauseParam("BindHoOrgId", "-1");
        voimpl.setNamedWhereClauseParam("BindSlocId", -1);
        voimpl.setNamedWhereClauseParam("BindShiftName", "-1");
        //voimpl.setNamedWhereClauseParam("BindUsrId", this.getUsrId());
        voimpl.executeQuery();
    }

    /**
     * Function to set Global Parameters initially in Organization VO
     * **/
    public void setMnfOrgShiftVar() {
        ViewObjectImpl voimpl = this.getOrgAppShift1();
        voimpl.executeQuery();
    }

    /**
     * Function to check Organization Duplicacy
     * **/
    private String duplicateOrgID(String orgVal) {
        String OrgId = null;

        if (orgVal != null) {
            ViewObjectImpl Orgvoimpl = this.getLOVOrganization1();
            Orgvoimpl.setNamedWhereClauseParam("BindCldId", getCldId());
            Orgvoimpl.setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
            Orgvoimpl.setNamedWhereClauseParam("BindSlcId", getSlocId());
            Orgvoimpl.executeQuery();
            Row[] orgDesc = Orgvoimpl.getFilteredRows("OrgDesc", orgVal);
            System.out.println("length of orgDesc:::"+orgDesc.length+orgVal);
            if (orgDesc.length > 0) {
                if (orgDesc[0].getAttribute("OrgId") != null)
                    OrgId = orgDesc[0].getAttribute("OrgId").toString();
            }
            ViewObjectImpl Orgvo = this.getOrgAppShift1();
            Row[] org = Orgvo.getFilteredRows("transOrgName", orgVal);
            System.out.println("length of orgDesc:::"+org.length);
//            if (org.length>0 && org[0]!=Orgvo.getCurrentRow()) {
//                return "true";
//            }
            if (org.length>1) {
              return "true";
           }
        }

        return OrgId;

    }

    /**
     * Function to chekc duplicate values in VO
     * **/
    public String chkDuplicate(String tab, String val) {
        System.out.println("Inside AMIMPL to check Duplicacy !!");
        System.out.println("val result::"+val+" "+tab);
        if (tab.equals("OrgDesc") || tab == "OrgDesc") {
            return duplicateOrgID(val);
        }
        return "None";
    }

    /**
     * Container's getter for AppShift1.
     * @return AppShift1
     */
    public ViewObjectImpl getAppShift1() {
        return (ViewObjectImpl) findViewObject("AppShift1");
    }

    /**
     * Container's getter for OrgAppShift1.
     * @return OrgAppShift1
     */
    public ViewObjectImpl getOrgAppShift1() {
        return (ViewObjectImpl) findViewObject("OrgAppShift1");
    }

    /**
     * Container's getter for FkOrgAppShift1VL1.
     * @return FkOrgAppShift1VL1
     */
    public ViewLinkImpl getFkOrgAppShift1VL1() {
        return (ViewLinkImpl) findViewLink("FkOrgAppShift1VL1");
    }

    /**
     * Function to set Search Parameters
     * **/
    public void setShiftSearchParam() {
        ViewObjectImpl shiftVO = this.getAppShift1();
        ViewObjectImpl transSearchVO = this.getTransSearch1();
        Row r = transSearchVO.first();

        shiftVO.applyViewCriteria(shiftVO.getViewCriteria("AppShiftVOCriteria1"));
        shiftVO.setNamedWhereClauseParam("BindCldId", getCldId());
        shiftVO.setNamedWhereClauseParam("BindSlocId", getSlocId());
        shiftVO.setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        shiftVO.setNamedWhereClauseParam("BindShiftName", r.getAttribute("ShiftNm"));
        shiftVO.executeQuery();
    }

    /**
     * Function to reset Search Parameters
     * **/
    public void resetSearch() {
        Row r = this.getTransSearch1().first();
        r.setAttribute("ShiftNm", null);
        this.getTransSearch1().executeQuery();

        ViewObjectImpl voimpl = this.getAppShift1();
        voimpl.applyViewCriteria(voimpl.getViewCriteria("AppShiftVOCriteria1"));
        voimpl.setNamedWhereClauseParam("BindCldId",null);
        voimpl.setNamedWhereClauseParam("BindHoOrgId",null);
        voimpl.setNamedWhereClauseParam("BindSlocId",null);
        voimpl.setNamedWhereClauseParam("BindShiftName",null);
        
        voimpl.executeQuery();
    }

    /**
     * Container's getter for TransSearch1.
     * @return TransSearch1
     */
    public ViewObjectImpl getTransSearch1() {
        return (ViewObjectImpl) findViewObject("TransSearch1");
    }

    /**
     * Container's getter for LOVOrganization1.
     * @return LOVOrganization1
     */
    public ViewObjectImpl getLOVOrganization1() {
        return (ViewObjectImpl) findViewObject("LOVOrganization1");
    }

    /**
     * Function to get Current Date from Server
     * **/
    public Date getCurrentDate() {
        java.util.Date date = new java.util.Date();
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String dateStr = dateFormat.format(date);
        try {
            java.util.Date date2 = dateFormat.parse(dateStr);
            java.sql.Date sqldate = new java.sql.Date(date2.getTime());
            Date daTime = new Date(sqldate);
            System.out.println("Current Date Time : jbo " + daTime);
            return daTime;
        } catch (ParseException pe) {
            pe.printStackTrace();
        }
        return null;
    }

    /**
     * Function to calculate and Save Start Time, End Tile & Available Time of Shift
     * **/
    @SuppressWarnings("oracle.jdeveloper.java.insufficient-catch-block")
    public String timeFormatChange(String st, oracle.jbo.domain.Number ed, oracle.jbo.domain.Number br) {
        //oracle.jbo.domain.Number br = null;
        ViewObject shiftVO = this.getAppShift1();
        /* if (shiftVO.getCurrentRow().getAttribute("ShiftBreakTm") != null) {
            br = (oracle.jbo.domain.Number) shiftVO.getCurrentRow().getAttribute("ShiftBreakTm");
        } */
        Timestamp currentDate = (Timestamp) shiftVO.getCurrentRow().getAttribute("UsrIdCreateDt");

        String strtTimeDate = getDateTimeFormat(currentDate, st, new oracle.jbo.domain.Number(0));
        adfLog.info("strtTimeDate::"+strtTimeDate);
        
        String endTimeDate = getDateTimeFormat(currentDate, st, ed);
        adfLog.info("endTimeDate::"+endTimeDate);
        if (strtTimeDate != null) {
            Date stDate = new Date(strtTimeDate);
            if (endTimeDate != null) {
                Date edDate = new Date(endTimeDate);

                oracle.jbo.domain.Number zero = new oracle.jbo.domain.Number(0);
                oracle.jbo.domain.Number availableTime = getTimeDiff(stDate, edDate);
                adfLog.info("availableTime::"+availableTime);

                /* if (availableTime != null && (availableTime).compareTo(zero) != 1) {
                    return "AvailableTimeFail";
                } */

                shiftVO.getCurrentRow().setAttribute("ShiftStrtTm", strtTimeDate);
                shiftVO.getCurrentRow().setAttribute("ShiftEndTm", endTimeDate);
                if (br != null) {
                    availableTime = new oracle.jbo.domain.Number(availableTime.subtract(br).round(2));
                    adfLog.info("avaial::"+availableTime);
                }
                if (br != null && br.compareTo(ed)!=-1) {
                    return "BreakTimeFail";
                }
                shiftVO.getCurrentRow().setAttribute("ShiftAvlTm", availableTime);
            }
            return "Success";
        }
        return "";
    }

    /**
     * Function to get Time Difference between Start Time and End Time
     * **/
    public oracle.jbo.domain.Number getTimeDiff(Date startDate, Date endDate) {
        try {
            BigDecimal retVal = (BigDecimal) (callStoredFunction(Types.NUMERIC, "app.fn_get_time_diff(?,?)", new Object[] {
                                                                 startDate, endDate
            }));

            oracle.jbo.domain.Number fnRetVal = new oracle.jbo.domain.Number(0);
            if (retVal != null)
                fnRetVal = new oracle.jbo.domain.Number(retVal);

            return fnRetVal;
        } catch (Exception ex) {
            System.out.println(ex);
        }
        return null;
    }

    /**
     * Function to get correct format for Start Time and End Time
     * **/
    @SuppressWarnings("oracle.jdeveloper.java.semantic-warning")
    public String getDateTimeFormat(Timestamp currentDate, String sttime, oracle.jbo.domain.Number edTime) {
        try {
            return (callStoredFunction(Types.TIMESTAMP, "app.fn_get_timestamp(?,?,?)", new Object[] {
                                       currentDate, sttime, edTime
        })).toString();
        } catch (Exception ex) {
            System.out.println(ex);
        }
        return null;
    }

    /**
     * Function used to call Database functions
     * **/
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    System.out.println("bindVars " + z + " " + bindVars[z]);
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.executeUpdate();
            return st.getObject(1);
        } catch (SQLException e) {
            e.printStackTrace();
            int end = e.getMessage().indexOf("\n");
            throw new JboException(e.getMessage().substring(11, end));

        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    throw new JboException(e.getMessage());
                }
            }
        }
    }

    /**
     * Container's getter for LOVUser1.
     * @return LOVUser1
     */
    public ViewObjectImpl getLOVUser1() {
        return (ViewObjectImpl) findViewObject("LOVUser1");
    }

    /**
     * Function used to add default HO to shift
     * **/
    public void attachHOtoShift() {
        /* Row row = this.getOrgAppShift1().createRow();
        row.setAttribute("OrgId", getHoOrgId());
        row.setAttribute("ValidStartDt", new Timestamp(System.currentTimeMillis()));
        this.getOrgAppShift1().insertRow(row); */
        //this.getOrgAppShift1().setCurrentRow(row);
        //this.getOrgAppShift1().executeQuery();
    }

    /**
     * Container's getter for LOVShiftSearchView1.
     * @return LOVShiftSearchView1
     */
    public ViewObjectImpl getLOVShiftSearchView1() {
        return (ViewObjectImpl) findViewObject("LOVShiftSearchView1");
    }

    /**
     * Function used to replicate all Organizations to Shift
     * **/
    public void excuteFnMnfPrfOrgReplication() {
        deleteAddedOrgs("OrgAppShift1");
        RowSetIterator rSetIter = getLOVOrganization1().createRowSetIterator(null);
                Row r = null;

                while (rSetIter.hasNext()) {

                    r = rSetIter.next();
                    System.out.println("org---------> "+r.getAttribute("OrgId"));
                    createOrgMnfShift(r.getAttribute("OrgId").toString());
                }
        //this.getOrgAppShift1().executeQuery();
        disableReservedMode();
    }

    /**
     * Function used to call database function to Replicate all Organizations
     * **/
    public String getReplicated() {
        /* Row row = this.getOrgAppShift1().createRow();
        row.setAttribute("OrgId", getHoOrgId());
        row.setAttribute("ValidStartDt", new Timestamp(System.currentTimeMillis()));
        this.getOrgAppShift1().insertRow(row);
        //this.getOrgAppShift1().setCurrentRow(row);
        Row r = this.getAppShift1().getCurrentRow();
        String shiftId = r.getAttribute("ShiftId").toString();
        return (String) callStoredFunction(Types.VARCHAR, "MNF.FN_MNF_PRF_ORG_REPLICATE(?,?,?,?,?,?,?)", new Object[] {
                                           getCldId().toString(), getSlocId(), getHoOrgId().toString(),
                                           getHoOrgId().toString(), getUsrId(), shiftId, "APP.ORG$APP$SHIFT"
    }); */
        return "";
    }

    public void deleteAddedOrgs(String voName) {
        while (findViewObject(voName).createRowSetIterator(null).hasNext()) {

            findViewObject(voName).createRowSetIterator(null).next().remove();

            System.out.println(voName + " row removed ");
        }
    }

    @Override
    public String getReplicateFlag() {
        // TODO Implement this method
        return null;
    }
    
    /**
             * Method to create OrgMnfShiftVO rows for given values.
         * **/
        public void createOrgMnfShift(String org) {

            Row r = getOrgAppShift1().createRow();
            oracle.jbo.domain.Timestamp validStDt =  (oracle.jbo.domain.Timestamp)getAppShift1().getCurrentRow().getAttribute("ValidStartDt");
            r.setAttribute("OrgId", org);
            r.setAttribute("ValidStartDt", validStDt);

            getOrgAppShift1().insertRow(r);

        }
        
        
            /**
             * Method to save Organization profile for route.
             * New profile is created automatically for Head Organization.
             * **/
        
            public void beforeSave() {
            Integer orgProfileCnt = 0;

            RowSetIterator rsetIter = getOrgAppShift1().createRowSetIterator(null);
            Row r = null;

            while (rsetIter.hasNext()) {
                r = rsetIter.next();

                if (r.getAttribute("OrgId").equals(getHoOrgId().toString())) {
                    orgProfileCnt = orgProfileCnt + 1;
                }
            }
            rsetIter.closeRowSetIterator();
            if (orgProfileCnt.compareTo(0) == 0) {
                createOrgMnfShift(getHoOrgId().toString());
            }
            disableReservedMode();
        
        }
            
    public void enableReservedMode() {
        if (getReleaseLevel() != ApplicationModule.RELEASE_LEVEL_RESERVED) {
            System.out.println("Setting release level as RELEASE_LEVEL_RESERVED.....");

            setReleaseLevel(ApplicationModule.RELEASE_LEVEL_RESERVED);
        }
    }

    public void disableReservedMode() {
        if (getReleaseLevel() != ApplicationModule.RELEASE_LEVEL_MANAGED) {
            System.out.println("Setting release level as RELEASE_LEVEL_MANAGED.....");
            setReleaseLevel(ApplicationModule.RELEASE_LEVEL_MANAGED);
        }
    }

    @Override
    public String timeFormatChange(String st, oracle.jbo.domain.Number ed) {
        // TODO Implement this method
        return null;
    }
    
    /**
         * Function to check whether this shift is in use
         */
        public String isPrfInUse(String shiftId) {
            //Function Parameters - (p_cld_id, p_sloc_id, p_ho_org_id, p_src_type-global doc id, 
            //                       p_prf_id-profile id, p_usr_id)
            try {
                Object fnRetVal = callStoredFunction(Types.VARCHAR, "MNF.fn_mnf_is_prf_in_use(?,?,?,?,?,?)", new Object[] {getCldId().toString(), getSlocId(), getHoOrgId().toString(), 2051, shiftId, getUsrId()});
                if (fnRetVal != null) {
                    return fnRetVal.toString();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            return "0";
        }
    
    
    public String duplicateShiftName() {
        //this.getAppShift1().executeQuery();
        Row curr=this.getAppShift1().getCurrentRow();
        String shifnm=(String)curr.getAttribute("ShiftNm");
        if(shifnm!=null)
        {
            RowSetIterator itr=this.getAppShift1().createRowSetIterator(null);
        // Row[] rr=this.getAppShift1().getAllRowsInRange();
         //adfLog.info("Total No. of Rows::"+rr.length);
        // for(Row r:rr) {
            while(itr.hasNext()){
             Row r=itr.next();
             if(r!=curr){
            String nm=(String)r.getAttribute("ShiftNm");
       
             if(shifnm.equalsIgnoreCase(nm))
             return "Y";
             
             }
             }
        }
      return "N";
    }

    /**
     * Container's getter for AppShiftVO1.
     * @return AppShiftVO1
     */
    public ViewObjectImpl getAppShiftVO1() {
        return (ViewObjectImpl) findViewObject("AppShiftVO1");
    }

    /**
     * Container's getter for AppShiftVO2.
     * @return AppShiftVO2
     */
    public ViewObjectImpl getAppShiftVO2() {
        return (ViewObjectImpl) findViewObject("AppShiftVO2");
    }
//    public void setShiftOrgStrtDt() {
//        Timestamp ts=(Timestamp)this.getOrgAppShift1().getCurrentRow().getAttribute("ValidStartDt");
//        Timestamp tsbck=(Timestamp)this.getOrgAppShift1().getCurrentRow().getAttribute("ValidEndDt");
//        if(ts!=null && ) {
//           Row[] rr=this.getOrgAppShift1().getAllRowsInRange();
//           for(Row r: rr) {
//               r.setAttribute("ValidStartDt",ts);
//           }
//        }
//    }
}


