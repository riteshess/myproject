package mnfmassproductionplanapp.model.services;


import mnfmassproductionplanapp.model.views.DualForJobRouteGenVOImpl;

import oracle.jbo.Row;
import oracle.jbo.server.ApplicationModuleImpl;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.util.HashSet;
import java.util.Iterator;

import java.util.Set;


import javax.el.ELContext;
import javax.el.ValueExpression;

import javax.faces.application.FacesMessage;

import javax.faces.context.FacesContext;

import mnfmassproductionplanapp.model.services.common.MnfMppAM;

import oracle.adf.share.ADFContext;

import oracle.jbo.JboException;

import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewObject;

import oracle.jbo.domain.Timestamp;

import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Sep 18 19:04:13 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MnfMppAMImpl extends ApplicationModuleImpl implements MnfMppAM {

    protected String docIdOpr;
    protected oracle.jbo.domain.Number totalQuantity = new oracle.jbo.domain.Number(0);
    protected oracle.jbo.domain.Number srNoOpr = null;
    protected String mppDocId;

    public void setDocIdOpr(String docIdOpr) {
        this.docIdOpr = docIdOpr;
    }

    public String getDocIdOpr() {
        return docIdOpr;
    }

    public void setSrNoOpr(oracle.jbo.domain.Number srNoOpr) {
        this.srNoOpr = srNoOpr;
    }

    public oracle.jbo.domain.Number getSrNoOpr() {
        return srNoOpr;
    }

    public void setMppDocId(String mppDocId) {
        this.mppDocId = mppDocId;
    }

    public String getMppDocId() {
        return mppDocId;
    }

    /**
     * This is the default constructor (do not remove).
     */
    public MnfMppAMImpl() {
    }

    /**
     * Container's getter for MnfMpp1.
     * @return MnfMpp1
     */
    public ViewObjectImpl getMnfMpp1() {
        return (ViewObjectImpl) findViewObject("MnfMpp1");
    }


    /**
     * Method to reset search view
     * **/
    public void performReset() {

        getDualForMppSearch1().executeQuery();

        ViewObject searchVO = getMppSearch1().getViewObject();

        searchVO.setNamedWhereClauseParam("BindCldId", null);
        searchVO.setNamedWhereClauseParam("BindSlocId", null);
        searchVO.setNamedWhereClauseParam("BindHoOrgId", null);
        searchVO.setNamedWhereClauseParam("BindOrgId", null);
        searchVO.setNamedWhereClauseParam("BindUsrId", null);
        searchVO.setNamedWhereClauseParam("BindMppStat", null);
        searchVO.setNamedWhereClauseParam("BindMode", null);
        searchVO.setNamedWhereClauseParam("BindMppId", null);
        searchVO.setNamedWhereClauseParam("BindStrtDt", null);
        searchVO.setNamedWhereClauseParam("BindEndDt", null);
        searchVO.setNamedWhereClauseParam("BindOutItmId", null);

        searchVO.executeQuery();

    }

    /**
     * Mtethod to perform search action in search page
     * **/
    public void performSearch() {

        Row r = getDualForMppSearch1().first();

        ViewObject searchVO = getMppSearch1().getViewObject();

        searchVO.setNamedWhereClauseParam("BindCldId", r.getAttribute("CldId"));
        searchVO.setNamedWhereClauseParam("BindSlocId", r.getAttribute("SlocId"));
        searchVO.setNamedWhereClauseParam("BindHoOrgId", r.getAttribute("HoOrgId"));
        searchVO.setNamedWhereClauseParam("BindOrgId", r.getAttribute("OrgId"));
        searchVO.setNamedWhereClauseParam("BindUsrId", r.getAttribute("UsrIdCreate"));
        searchVO.setNamedWhereClauseParam("BindMppStat", r.getAttribute("MppStateId"));
        searchVO.setNamedWhereClauseParam("BindMode", r.getAttribute("MppModeId"));
        searchVO.setNamedWhereClauseParam("BindMppId", r.getAttribute("MppCode"));
        searchVO.setNamedWhereClauseParam("BindStrtDt", r.getAttribute("MppOnDate"));
        searchVO.setNamedWhereClauseParam("BindEndDt", r.getAttribute("MppToDate"));
        searchVO.setNamedWhereClauseParam("BindOutItmId", r.getAttribute("OutputItemId"));
        searchVO.executeQuery();

    }

    /**
     * Method to reset search view
     * **/
    public void performResetPdo() {

        getDualForPdoSearch1().executeQuery();

        ViewObject searchVO = getPDOSearch1().getViewObject();

        searchVO.setNamedWhereClauseParam("BindCldId", null);
        searchVO.setNamedWhereClauseParam("BindSlocId", null);
        searchVO.setNamedWhereClauseParam("BindHoOrgId", null);
        searchVO.setNamedWhereClauseParam("BindOrgId", null);
        searchVO.setNamedWhereClauseParam("BindEoId", null);
        searchVO.setNamedWhereClauseParam("BindOutptItmId", null);
        searchVO.setNamedWhereClauseParam("BindPdoId", null);
        searchVO.setNamedWhereClauseParam("BindFrmDt", null);
        searchVO.setNamedWhereClauseParam("BindToDt", null);

        searchVO.executeQuery();

    }

    /**
     * Mtethod to perform search action in search page
     * **/
    public void performSearchPdo() {

        Row r = getDualForPdoSearch1().getCurrentRow();

        ViewObject searchVO1 = getPDOSearch1().getViewObject();

        searchVO1.setNamedWhereClauseParam("BindCldId", r.getAttribute("CldId"));
        searchVO1.setNamedWhereClauseParam("BindSlocId", r.getAttribute("SlocId"));
        searchVO1.setNamedWhereClauseParam("BindHoOrgId", r.getAttribute("HoOrgId"));
        searchVO1.setNamedWhereClauseParam("BindOrgId", r.getAttribute("OrgId"));
        searchVO1.setNamedWhereClauseParam("BindEoId", r.getAttribute("CustomerId"));
        searchVO1.setNamedWhereClauseParam("BindOutptItmId", r.getAttribute("OutputItemId"));
        searchVO1.setNamedWhereClauseParam("BindPdoId", r.getAttribute("PdoCode"));
        searchVO1.setNamedWhereClauseParam("BindFrmDt", r.getAttribute("FromDate"));
        searchVO1.setNamedWhereClauseParam("BindToDt", r.getAttribute("ToDate"));
        searchVO1.executeQuery();
    }


    Set<String> newOperationSet = new HashSet<String>();

    /**
     * get all the common operations from selected Production order
     */
    public void getCommonOperation() {

        RowSetIterator PdoRS = getPDOSearch1().createRowSetIterator(null);
        Set<String> operationSet = new HashSet<String>();
        while (PdoRS.hasNext()) {
            Row next = PdoRS.next();
            Object selectPdoO = next.getAttribute("SelectPdo");
            StringBuilder n =
                (selectPdoO == null ? new StringBuilder("false") : new StringBuilder(selectPdoO.toString()));
            if ("true".equals(n.toString())) {
                operationSet.add(next.getAttribute("DocId").toString());
            }
        }
        PdoRS.closeRowSetIterator();

        StringBuilder clause = new StringBuilder(" ");
        StringBuilder secndClause = new StringBuilder(" ");
        StringBuilder temp = new StringBuilder(" ");
        if (operationSet.size() > 0) {
            clause = new StringBuilder(" AND DOC_ID IN (");
            secndClause = new StringBuilder(" AND REF_DOC_ID IN (");
            Iterator<String> itr = operationSet.iterator();
            int i = 1;
            while (itr.hasNext()) {
                temp = new StringBuilder(itr.next().toString());
                clause.append("'" + temp + "'");
                secndClause.append("'" + temp + "'");
                if (i < operationSet.size()) {
                    clause.append(",");
                    secndClause.append(",");
                }
                i += 1;
            }
            clause.append(")");
            secndClause.append(")");
        }
        // System.out.println("Clause is  : " + clause);
        StringBuilder query = new StringBuilder("");
        query = new StringBuilder(getSelectOperation1().getQuery());
        StringBuilder tempStore = new StringBuilder(query);

        query.append(clause);
        query.append(secndClause);
        //System.out.println("Final query is : " + query);
        getSelectOperation1().setQuery(query.toString());
        setGlbParamInOperationSelectVO();
        getSelectOperation1().executeQuery();
        getSelectOperation1().setQuery(tempStore.toString());

    }


    /**method to deselect the operation
     *
     */
    public void diselectAll() {
        RowSetIterator singleOprRS = getSelectOperation1().createRowSetIterator(null);
        Row r = null;
        while (singleOprRS.hasNext()) {
            r = singleOprRS.next();
            r.setAttribute("SelectOpr", "false");
        }
        singleOprRS.closeRowSetIterator();
    }

    /**
     * method to set the operation values
     */
    public void setBindValuesToView() {
        RowSetIterator singleOprRS = getSelectOperation1().createRowSetIterator(null);
        Row r = null;

        while (singleOprRS.hasNext()) {
            r = singleOprRS.next();
            String chk = (r.getAttribute("SelectOpr") == null ? "false" : (String) r.getAttribute("SelectOpr"));
            if (chk.equals("Y")) {

                //setting Operation Doc Id
                setDocIdOpr(r.getAttribute("OpDocId").toString());
                //setting Operation Serial No.
                setSrNoOpr((oracle.jbo.domain.Number) r.getAttribute("OpSrNo"));
                setOperationToShow(getDocIdOpr(), getSrNoOpr());
            }
        }
        singleOprRS.closeRowSetIterator();

    }


    /**
     * method to sellect all the pdo at once
     */
    public void selectAllPdo() {
        RowSetIterator PdoRS = getPDOSearch1().createRowSetIterator(null);
        while (PdoRS.hasNext()) {
            Row next = PdoRS.next();
            next.setAttribute("SelectPdo", "true");
            //System.out.println(next.getAttribute("SelectPdo"));
        }
        PdoRS.closeRowSetIterator();
    }

    /**
     * method to desellect all the pdo at once
     */
    public void unselectAllPdo() {
        RowSetIterator PdoRS = getPDOSearch1().createRowSetIterator(null);
        while (PdoRS.hasNext()) {
            Row next = PdoRS.next();
            next.setAttribute("SelectPdo", "false");
            //  System.out.println(next.getAttribute("SelectPdo"));
        }
        PdoRS.closeRowSetIterator();
    }

    /**
     * method to clear Opertion details from opertion select view
     */
    public void clearSingleOperationDetails() {
        getSingleOperationDetails1().setNamedWhereClauseParam("BindCldId", null);
        getSingleOperationDetails1().setNamedWhereClauseParam("BindHoOrgId", null);
        getSingleOperationDetails1().setNamedWhereClauseParam("BindOrgId", null);
        getSingleOperationDetails1().setNamedWhereClauseParam("BindSlocId", null);
        getSingleOperationDetails1().setNamedWhereClauseParam("BindOpSrNo", null);
        getSingleOperationDetails1().setNamedWhereClauseParam("BindOpDocId", null);
        getSingleOperationDetails1().executeQuery();
    }

    /**
     * method to clear Operation from opertion select view
     */
    public void clearPreviousSelectedOpr() {
        getSelectOperation1().setNamedWhereClauseParam("BindCldId", null);
        getSelectOperation1().setNamedWhereClauseParam("BindHoOrgId", null);
        getSelectOperation1().setNamedWhereClauseParam("BindOrgId", null);
        getSelectOperation1().setNamedWhereClauseParam("BindSlocId", null);
        // getSingleOperationDetails1().setNamedWhereClauseParam("BindOpSrNo", null);
        //getSingleOperationDetails1().setNamedWhereClauseParam("BindOpDocId", null);
        getSelectOperation1().executeQuery();
    }

    /**
     * method to get the selected operation details
     */
    public void setOperationToShow(String oprDocId, oracle.jbo.domain.Number OperationSrNo) {

        RowSetIterator PdoRS = getPDOSearch1().createRowSetIterator(null);
        Set<String> operationSet = new HashSet<String>();
        while (PdoRS.hasNext()) {
            Row next = PdoRS.next();
            Object selectPdoO = next.getAttribute("SelectPdo");
            StringBuilder n =
                (selectPdoO == null ? new StringBuilder("false") : new StringBuilder(selectPdoO.toString()));
            if ("true".equals(n.toString())) {
                operationSet.add(next.getAttribute("DocId").toString());
            }
        }
        PdoRS.closeRowSetIterator();
        //getSingleOperationDetails1().setNamedWhereClauseParam("BindOpSrNo", OperationSrNo);
        //getSingleOperationDetails1().setNamedWhereClauseParam("BindOpDocId", OperationId);

        StringBuilder clause = new StringBuilder(" ");
        StringBuilder secndClause = new StringBuilder(" ");
        StringBuilder temp = new StringBuilder(" ");
        if (operationSet.size() > 0) {
            clause = new StringBuilder(" AND DOC_ID IN (");
            secndClause = new StringBuilder(" AND REF_DOC_ID IN (");
            Iterator<String> itr = operationSet.iterator();
            int i = 1;
            while (itr.hasNext()) {
                temp = new StringBuilder(itr.next().toString());
                clause.append("'" + temp + "'");
                secndClause.append("'" + temp + "'");
                if (i < operationSet.size()) {
                    clause.append(",");
                    secndClause.append(",");
                }
                i += 1;
            }
            clause.append(")");
            secndClause.append(")");
        }
        // System.out.println("Clause is  : " + clause);
        StringBuilder query = new StringBuilder("");
        query = new StringBuilder(getSingleOperationDetails1().getQuery());
        StringBuilder tempStore = new StringBuilder(query);

        query.append(clause);
        query.append(secndClause);
        //System.out.println("Final query is : " + query);
        getSingleOperationDetails1().setQuery(query.toString());

        getSingleOperationDetails1().setNamedWhereClauseParam("BindCldId", this.getCldId());
        getSingleOperationDetails1().setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgId());
        getSingleOperationDetails1().setNamedWhereClauseParam("BindOrgId", this.getOrgId());
        getSingleOperationDetails1().setNamedWhereClauseParam("BindSlocId", this.getSlocId());
        getSingleOperationDetails1().setNamedWhereClauseParam("BindOpDocId", oprDocId);
        getSingleOperationDetails1().setNamedWhereClauseParam("BindOpSrNo", OperationSrNo);

        getSingleOperationDetails1().executeQuery();
        getSingleOperationDetails1().setQuery(tempStore.toString());

    }

    /**
     * method to show opertion summary in summary view
     */
    public void showSummary(String CldId, String HoOrgId, String Org, Integer SlocId) {
        //removeDetailsForSummary(getDocIdOpr(), getSrNoOpr());
        getDetailsForSummary(getDocIdOpr(), getSrNoOpr());
        getTotalQuantity();

        //calling to clear the previous operation details
        if (getMnfMppOp1().getRowCount() > 0) {
            deleteRowforSummary();
        }
        setDataInMppOp(CldId, HoOrgId, Org, SlocId);

    }


    /**
     * method to set bind varialbles in detailsfor summary vo
     */
    public void getDetailsForSummary(String OprDocId, oracle.jbo.domain.Number OprSrNum) {

        getSummaryOperation1().setNamedWhereClauseParam("BindCldId", this.getCldId());
        getSummaryOperation1().setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgId());
        getSummaryOperation1().setNamedWhereClauseParam("BindOrgId", this.getOrgId());
        getSummaryOperation1().setNamedWhereClauseParam("BindSlocId", this.getSlocId());
        getSummaryOperation1().setNamedWhereClauseParam("BindOpDocId", OprDocId);
        getSummaryOperation1().setNamedWhereClauseParam("BindOpSrNo", OprSrNum);
        getSummaryOperation1().executeQuery();

    }

    /**
     * method to get the total ouput quantity in all the pdo
     */
    public void getTotalQuantity() {
        RowSetIterator rowItr = getSingleOperationDetails1().createRowSetIterator(null);
        Row row = null;
        totalQuantity = new oracle.jbo.domain.Number(0);
        oracle.jbo.domain.Number curQunty = new oracle.jbo.domain.Number(0);

        while (rowItr.hasNext()) {
            row = rowItr.next();
            curQunty = (oracle.jbo.domain.Number) row.getAttribute("OutptItmQty");
            totalQuantity = totalQuantity.add(curQunty);
        }
        rowItr.closeRowSetIterator();
        //   System.out.println("Total Output Qty is ::::::::::::::::::: " + totalQuantity);
    }


    /**
     * method to insert into oeration table
     */
    public void setDataInMppOp(String CldId, String HoOrgId, String Org, Integer SlocId) {

        Row[] sourceR = getSummaryOperation1().getFilteredRows("OpDocId", getDocIdOpr());
        Row destinationR = getMnfMppOp1().createRow();
        destinationR.setAttribute("OpId", getDocIdOpr());
        destinationR.setAttribute("OpSrNo", getSrNoOpr());
        destinationR.setAttribute("WcId", sourceR[0].getAttribute("WcId"));
        destinationR.setAttribute("OpLocType", sourceR[0].getAttribute("OpLocType"));
        destinationR.setAttribute("OpTrgtDt", sourceR[0].getAttribute("OpTrgtDt"));
        destinationR.setAttribute("OutptItmId", sourceR[0].getAttribute("OutptItmId"));
        destinationR.setAttribute("OutptItmQty", totalQuantity);
        destinationR.setAttribute("PdoPriority", sourceR[0].getAttribute("PdoPriority"));
        destinationR.setAttribute("OpRmrk", sourceR[0].getAttribute("OpRmrk"));
        destinationR.setAttribute("OpStat", 107);
        destinationR.setAttribute("BalOpQty", totalQuantity);
        destinationR.setAttribute("TmpBalOpQty", 0);


        Row forMppDoc = getMnfMpp1().getCurrentRow();
        setMppDocId(forMppDoc.getAttribute("DocId").toString());
        //inserting values in Main header table of GPP
        forMppDoc.setAttribute("OutptItmId", sourceR[0].getAttribute("OutptItmId"));
        forMppDoc.setAttribute("OutptItmQty", totalQuantity);
        forMppDoc.setAttribute("BalQty", totalQuantity);
        forMppDoc.setAttribute("TmpBalQty", 0);

        // remove item before insertion of new item
        removeFromMppItem(CldId, SlocId, HoOrgId, Org, getMppDocId(), getUsrId());

        //Inserting into MPP$OP$ITM table

        //rw.getFilteredRows("DocId", gppDoc);
        String gppDoc;
        Row r = getMnfMpp1().getCurrentRow();
        // if (r != null) {}
        gppDoc = (r.getAttribute("DocId") == null ? null : r.getAttribute("DocId").toString());

        RowSetIterator pRS = getMnfMppPdo1().createRowSetIterator(null);
        Set<String> pdoSet = new HashSet<String>();
        pRS.getFilteredRows("DocId", gppDoc);

        //  RowSetIterator PdoRS = getPDOSearch1().createRowSetIterator(null);

        while (pRS.hasNext()) {
            Row next = pRS.next();
            pdoSet.add(next.getAttribute("PdoId").toString());
        }
        Iterator itr = pdoSet.iterator();
        while (itr.hasNext()) {
            String tmp = itr.next().toString();
            insertIntoMppItem(CldId, SlocId, HoOrgId, Org, getDocIdOpr(), getSrNoOpr(), mppDocId, getUsrId(), tmp);
        }

        //inserting new row for MPP$OP
        /* if(getMppDocId()!=null){
        Row r = getDualForItemSearch1().getCurrentRow();
        r.setAttribute("Doc_Id", getMppDocId());
        } */

        getMnfMppOp1().insertRow(destinationR);
        getSummaryOperation1().executeQuery();
        getMnfMppOp1().executeQuery();


    }

    /**
     * calls the function that removes Item details from summary view
     * @param CldId
     * @param HoOrgId
     * @param Orgn
     * @param SlocId
     */
    public void removeItem(String CldId, String HoOrgId, String Orgn, Integer SlocId) {
        removeFromMppItem(CldId, SlocId, HoOrgId, Orgn, getMppDocId(), getUsrId());
        //System.out.println("Row removed for  " + getMppDocId());

    }

    /**
     * method for removing operation details from summary view
     */
    public void deleteRowforSummary() {
        if (getMnfMppOp1().getCurrentRow() != null) {
            getMnfMppOp1().removeCurrentRow();
            getMnfMppOp1().executeQuery();
        }
        // System.out.println("Current operation is removed");
    }

    /**
     * method removes the history record of PDO for the current mpp
     */
    public void removePdoHistoryRecord() {
        Row curR = getMnfMpp1().getCurrentRow();
        //  System.out.println("inside remove pdo history ::::::::::::::::::");
        Object selectO = curR.getAttribute("DocId");

        if (selectO != null) {
            RowSetIterator pdoRm = getMnfMppPdo1().createRowSetIterator(null);
            // System.out.println("inside to check the doc Id");

            while (pdoRm.hasNext()) {
                Row pdoR = pdoRm.next();
                pdoR.remove();
                //  System.out.println("removed row " + curR.getAttribute("DocId"));
            }
            getMnfMppPdo1().executeQuery();
            pdoRm.closeRowSetIterator();
        }
    }

    /**
     * method insert the history record of PDO for the current mpp
     */
    public void insertPdoHistoryRecord() {
        RowSetIterator PdoRS = getPDOSearch1().createRowSetIterator(null);
        Row rPdo = null;


        while (PdoRS.hasNext()) {
            rPdo = PdoRS.next();
            //  System.out.println("Inside pdo search iterator checking for PDO");

            Object selectO = rPdo.getAttribute("SelectPdo");
            StringBuilder b = (selectO == null ? new StringBuilder("false") : new StringBuilder(selectO.toString()));
            //System.out.println("cb value is "+ b);

            if ("true".equals(b.toString())) {
                //if ((rPdo.getAttribute("SelectPdo") != null) && (rPdo.getAttribute("SelectPdo").equals("true"))) {
                Row destinationR = getMnfMppPdo1().createRow();
                destinationR.setAttribute("PdoId", rPdo.getAttribute("DocId"));
                destinationR.setAttribute("UsrIdCreate", getUsrId());
                destinationR.setAttribute("UsrIdCreateDt", new Timestamp(System.currentTimeMillis()));
                destinationR.setAttribute("ChkActv", "Y");

                getMnfMppPdo1().insertRow(destinationR);
                getMnfMppPdo1().executeQuery();
                //  System.out.println("new pdo history saved");

            }
        }
        PdoRS.closeRowSetIterator();
        //getPDOSearch1().executeQuery();
    }

    /**
     *callin remove and insert method for Pdo History
     * @return
     */
    public void pdoHistory() {
        removePdoHistoryRecord();
        insertPdoHistoryRecord();
    }

    /**
     * method to count the total production row for minimum pdo select validation
     */
    public Integer getPdoRowCount() {
        RowSetIterator PdoRS = getPDOSearch1().createRowSetIterator(null);

        Integer count = 0;
        Row rPdo = null;
        while (PdoRS.hasNext()) {
            rPdo = PdoRS.next();
            Object selectO = rPdo.getAttribute("SelectPdo");
            StringBuilder b = (selectO == null ? new StringBuilder("false") : new StringBuilder(selectO.toString()));
            //System.out.println("cb value is "+ b);

            if ("true".equals(b.toString())) {
                count++;
            }
            // System.out.println(" count after loop ::::: "+ count);

        }
        PdoRS.closeRowSetIterator();
        // System.out.println( "count initial value :::::::::: " +count);
        return count;
    }

    /**
     * method to count the total operation row for minimum opr select validation
     */
    public Integer getOprRowCount() {
        RowSetIterator OprRS = getSelectOperation1().createRowSetIterator(null);
        Row rOpr = null;

        while (OprRS.hasNext()) {
            rOpr = OprRS.next();
            String chk = (rOpr.getAttribute("SelectOpr") == null ? "false" : (String) rOpr.getAttribute("SelectOpr"));
            if (chk.equals("Y")) {
                return 1;
            }

        }
        return 0;
    }

    /**
     * method to show the previous selected production order
     */
    public void showHistory() {

        ViewObject searchVO1 = getPDOSearch1().getViewObject();

        searchVO1.setNamedWhereClauseParam("BindCldId", getCldId());
        searchVO1.setNamedWhereClauseParam("BindSlocId", getSlocId());
        searchVO1.setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        searchVO1.setNamedWhereClauseParam("BindOrgId", getOrgId());
        searchVO1.executeQuery();

        RowSetIterator MppPdo = getMnfMppPdo1().createRowSetIterator(null);
        Row r = null;
        Row s = null;

        while (MppPdo.hasNext()) {
            RowSetIterator pdo = getPDOSearch1().createRowSetIterator(null);
            r = MppPdo.next();

            String pdoId = (r.getAttribute("PdoId").toString() == null ? null : r.getAttribute("PdoId").toString());
            //System.out.println("inside to MPP PDO check pdo " + pdoId);
            while (pdo.hasNext()) {
                s = pdo.next();
                // System.out.println("Inside pdo search ittterator  : ");
                String curPDO =
                    (s.getAttribute("DocId").toString() == null ? null : s.getAttribute("DocId").toString());
                //  System.out.println("Current PDO " + curPDO);
                if (pdoId.equals(curPDO)) {
                    //    System.out.println("matched " + pdoId);
                    s.setAttribute("SelectPdo", "true");
                }
            }
            pdo.closeRowSetIterator();
        }
        MppPdo.closeRowSetIterator();

    }

    /**
     *
     * Displaying selected operation
     */
    public void operationHistory() {

        Row r = getMnfMppOp1().getCurrentRow();
        if (r != null) {
            //String remark = (usrInput.getAttribute("Remark") == null ? null : usrInput.getAttribute("Remark").toString());
            String curOpr = (r.getAttribute("OpId").toString() == null ? null : r.getAttribute("OpId").toString());
            if (curOpr != null) {
                showHistory();
                getCommonOperation();
                RowSetIterator oprH = getSelectOperation1().createRowSetIterator(null);
                Row x = null;
                while (oprH.hasNext()) {
                    x = oprH.next();
                    String a =
                        (x.getAttribute("OpDocId").toString() == null ? null : x.getAttribute("OpDocId").toString());
                    if (a.equals(curOpr)) {
                        //System.out.println(" matched");
                        x.setAttribute("SelectOpr", "Y");
                        //System.out.println(x.getAttribute("SelectOpr"));
                    }
                }
                oprH.closeRowSetIterator();
                setBindValuesToView();
            }
        }
    }


    /**
     * method to generate job card
     */
    public Integer generateJobCard(String cld, Integer sloc, String horg, String org) {

        Row usrInput = getDualForJobRouteGen1().getCurrentRow();
        //usrInput.setAttribute("ReqQuantity", 0);

        Integer jcRcMode = (Integer) usrInput.getAttribute("ModeJcRc");
        String remark = (usrInput.getAttribute("Remark") == null ? null : usrInput.getAttribute("Remark").toString());
        //System.out.println(" ::::::::::: remarks " + remark);
        String shiftId =
            ((String) usrInput.getAttribute("ShiftId") == null ? null : (String) usrInput.getAttribute("ShiftId"));
        String wsId = ((String) usrInput.getAttribute("WsId") == null ? null : (String) usrInput.getAttribute("WsId"));
        oracle.jbo.domain.Number empId = (oracle.jbo.domain.Number) usrInput.getAttribute("EmpId");
        Timestamp startDt = (Timestamp) usrInput.getAttribute("StartDt");
        Timestamp endDt = (Timestamp) usrInput.getAttribute("EndDt");
        Integer reqId = (Integer) usrInput.getAttribute("ReqmId");
        String wareHos = (String) usrInput.getAttribute("WareHouseId");
        String wcId = (String) usrInput.getAttribute("WcId");
        oracle.jbo.domain.Number reqQuantity = (oracle.jbo.domain.Number) usrInput.getAttribute("ReqQuantity");
        System.out.println(usrInput.getAttribute("ReqQuantity"));
        System.out.println(usrInput.getAttribute("OutItmQty"));

        Row s = getMnfMppOp1().getCurrentRow();
        String defaultOprId = (s.getAttribute("OpId").toString() == null ? null : s.getAttribute("OpId").toString());
        Integer locationType =
            ((Integer) s.getAttribute("OpLocType") == null ? null : (Integer) s.getAttribute("OpLocType"));

        String opId =
            (usrInput.getAttribute("OprDocId") == null ? defaultOprId : usrInput.getAttribute("OprDocId").toString());
        oracle.jbo.domain.Number opSrNo = (oracle.jbo.domain.Number) usrInput.getAttribute("OprSrNo");
        String outputItemId = (String) usrInput.getAttribute("outItmId");
        oracle.jbo.domain.Number outputItemQuantity = (oracle.jbo.domain.Number) usrInput.getAttribute("OutItmQty");

        Row frmMpp = getMnfMpp1().getCurrentRow();
        Integer usrId = (Integer) frmMpp.getAttribute("UsrIdCreate");
        Timestamp usrCreatDt = (Timestamp) frmMpp.getAttribute("UsrIdCreateDt");
        Integer finId = (Integer) frmMpp.getAttribute("FyId");
        String mppDocId = (String) frmMpp.getAttribute("DocId");

        Timestamp docDt = new Timestamp(System.currentTimeMillis());


        Integer res =
            callFuntoGenJCRC(cld, sloc, horg, org, mppDocId, 26002, docDt, usrId, usrCreatDt, jcRcMode, opId, opSrNo,
                             outputItemId, outputItemQuantity, finId, remark, shiftId, wcId, wsId, locationType,
                             startDt, endDt, empId, reqId, wareHos, reqQuantity);
        getDBTransaction().commit();
        updateGppByJcGen(cld, sloc, horg, org, mppDocId, opId, opSrNo);

        
        getDualForJobRouteGen1().executeQuery();
        getMnfMpp1().executeQuery();
        getMnfMppOp1().executeQuery();
        setGLBLParamInJobRouteGen();
        return res;
    }


    /**
     * method to generate route card
     */
    public Integer generateRouteCard(String cld, Integer sloc, String horg, String org) {
        String wcId;
        Integer locationType;
        Timestamp docDt;
        Integer usrId;
        Timestamp usrCreatDt;
        Integer finId;
        String mppDocId;

        Row usrInput = getDualForJobRouteGen1().getCurrentRow();

        Integer jcRcMode = (Integer) usrInput.getAttribute("ModeJcRc");
        String remark = (usrInput.getAttribute("Remark") == null ? null : usrInput.getAttribute("Remark").toString());
        String shiftId = (String) usrInput.getAttribute("ShiftId");
        oracle.jbo.domain.Number empId = (oracle.jbo.domain.Number) usrInput.getAttribute("EmpId");
        Timestamp startDt = (Timestamp) usrInput.getAttribute("StartDt");
        Timestamp endDt = (Timestamp) usrInput.getAttribute("EndDt");
        Integer reqId = (Integer) usrInput.getAttribute("ReqmId");
        String wareHos = (String) usrInput.getAttribute("WareHouseId");


        Row frmMpp = getMnfMpp1().getCurrentRow();
        if (frmMpp != null) {
            usrId = (Integer) frmMpp.getAttribute("UsrIdCreate");
            usrCreatDt = (Timestamp) frmMpp.getAttribute("UsrIdCreateDt");
            finId = (Integer) frmMpp.getAttribute("FyId");
            mppDocId = (String) frmMpp.getAttribute("DocId");

            Row frmOpr = getMnfMppOp1().getCurrentRow();
            if (frmOpr != null) {
                String outputItem = (String) frmOpr.getAttribute("OutptItmId");
                oracle.jbo.domain.Number outputItemQuantity =
                    (oracle.jbo.domain.Number) frmOpr.getAttribute("OutptItmQty");
                wcId = (String) frmOpr.getAttribute("WcId");
                locationType = (Integer) frmOpr.getAttribute("OpLocType");
                docDt = new Timestamp(System.currentTimeMillis());

                Integer res =
                    callFuntoGenJCRC(cld, sloc, horg, org, mppDocId, 26002, docDt, usrId, usrCreatDt, jcRcMode, null,
                                     null, usrInput.getAttribute("outItmId").toString(),
                                     (oracle.jbo.domain.Number) usrInput.getAttribute("OutItmQty"), finId, remark,
                                     shiftId, wcId, null, locationType, startDt, endDt, empId, reqId, wareHos,
                                     (oracle.jbo.domain.Number) usrInput.getAttribute("ReqQuantity"));
                getDBTransaction().commit();
                updateGppByRcGen(cld, sloc, horg, org, mppDocId);
                getDualForJobRouteGen1().executeQuery();
                getMnfMpp1().executeQuery();
                getMnfMppOp1().executeQuery();
                setGLBLParamInJobRouteGen();
                return res;

            }
        }
        getDualForJobRouteGen1().executeQuery();
        getMnfMpp1().executeQuery();
        getMnfMppOp1().executeQuery();
        setGLBLParamInJobRouteGen();
        return 0;
    }

    /** Setting Global Paramter in the VO
     *
     */

    public void setGlobalParameter() {

        setGlbParamInMppCreatEdit();
        setGlbParamInPdoSearch();
        //setGlbParamInOperationSelectVO();
        setGlbParamInCommonOprVo();
        setGlblParamInItemSearch();
        setGLBLParamInJobRouteGen();
    }

    public Integer setParamForWcId() {

        Row s = getMnfMppOp1().getCurrentRow();
        String wcId = null;
        String curItm = null;
        oracle.jbo.domain.Number curSr = new oracle.jbo.domain.Number(0);
        oracle.jbo.domain.Number curQty = new oracle.jbo.domain.Number(0);
        if (s != null) {
            wcId = (s.getAttribute("WcId").toString() == null ? null : s.getAttribute("WcId").toString());
            // System.out.println("wcid ::::::::: "+wcId);
            curSr = ((oracle.jbo.domain.Number) s.getAttribute("OpSrNo"));
            curItm = (s.getAttribute("OutptItmId").toString() == null ? null : s.getAttribute("OutptItmId").toString());
            curQty = (oracle.jbo.domain.Number) s.getAttribute("OutptItmQty");

            //System.out.println(curSr + "  ==== opr sr no");

            Row q = getMnfMppOpItmInput().getCurrentRow();
            Row t = getMnfMpp1().getCurrentRow();
            if (t != null) {
                String curGppDoc =
                    (t.getAttribute("DocId").toString() == null ? null : t.getAttribute("DocId").toString());
                if (q != null) {
                    String curPdoDoc =
                        (q.getAttribute("PdoId").toString() == null ? null : q.getAttribute("PdoId").toString());

                    //System.out.println(curPdoDoc + " === pdo id");

                    Row r = getDualForJobRouteGen1().getCurrentRow();
                    r.setAttribute("WcId", wcId);
                    r.setAttribute("PdoDocId", curPdoDoc);
                    r.setAttribute("OprSrNo", curSr);
                    r.setAttribute("outItmId", curItm);
                    r.setAttribute("OutItmQty", curQty);
                    r.setAttribute("GppDocId", curGppDoc);
                    return 0;
                } else {
                    return 1;
                }

            } else {
                return 1;
            }
        }
        return 1;
    }

    public void setParamForOperationSerial() {
        // Row s = getMnfMppOp1().getCurrentRow();
        //  String curSr = s.getAttribute("OpSrNo").toString();
        //  Row r = getMnfMppOpItmInput().getCurrentRow();
        //  String curPdoDoc = r.getAttribute("PdoId").toString();
        // System.out.println(curSr +" ====================serial no");
        // System.out.println(curPdoDoc +" ==================== pdo no");
       // getOperationInSerial1().executeQuery();
        getOperationInSerial1().setNamedWhereClauseParam("BindCldId", this.getCldId());
        getOperationInSerial1().setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgId());
        getOperationInSerial1().setNamedWhereClauseParam("BindOrgId", this.getOrgId());
        getOperationInSerial1().setNamedWhereClauseParam("BindSlocId", this.getSlocId());
        //getOperationInSerial1().setNamedWhereClauseParam("BindPdoDocId", curPdoDoc);
        //getOperationInSerial1().setNamedWhereClauseParam("BindOprSrNo", curSr);
    }

    public void setGLBLParamInJobRouteGen() {
        /*   Row r = getMnfMppOpItmInput().getCurrentRow();
        String curPdoDoc = r.getAttribute("PdoId").toString();
        System.out.println(curPdoDoc +" === pdo id");
        Row s = getMnfMppOp1().getCurrentRow();
        String curSr = s.getAttribute("OpSrNo").toString();
        System.out.println(curSr + "  ==== opr sr no"); */
        //getDualForJobRouteGen1().executeQuery();
        getDualForJobRouteGen1().setNamedWhereClauseParam("BindCldId", this.getCldId());
        getDualForJobRouteGen1().setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgId());
        getDualForJobRouteGen1().setNamedWhereClauseParam("BindOrgId", this.getOrgId());
        getDualForJobRouteGen1().setNamedWhereClauseParam("BindSlocId", this.getSlocId());
        //getDualForJobRouteGen1().setNamedWhereClauseParam("BindPdoDocId", curPdoDoc);
        //getDualForJobRouteGen1().setNamedWhereClauseParam("BindOprSrNo", curSr);


    }

    public void setGlblParamInItemSearch() {
        getDualForItemSearch1().setNamedWhereClauseParam("BindCldId", this.getCldId());
        getDualForItemSearch1().setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgId());
        getDualForItemSearch1().setNamedWhereClauseParam("BindOrgId", this.getOrgId());
        getDualForItemSearch1().setNamedWhereClauseParam("BindSlocId", this.getSlocId());
        getDualForItemSearch1().setNamedWhereClauseParam("BindDocId", this.getGlblDocId());
    }

    public void setGlbParamInCommonOprVo() {
        getCommmonOperation1().setNamedWhereClauseParam("BindCldId", this.getCldId());
        getCommmonOperation1().setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgId());
        getCommmonOperation1().setNamedWhereClauseParam("BindOrgId", this.getOrgId());
        getCommmonOperation1().setNamedWhereClauseParam("BindSlocId", this.getSlocId());
    }

    private void setGlbParamInOperationSelectVO() {
        getSelectOperation1().setNamedWhereClauseParam("BindCldId", this.getCldId());
        getSelectOperation1().setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgId());
        getSelectOperation1().setNamedWhereClauseParam("BindOrgId", this.getOrgId());
        getSelectOperation1().setNamedWhereClauseParam("BindSlocId", this.getSlocId());
        //getSelectOperation1().setNamedWhereClauseParam("BindPdoMppType", 26001);
        //  getSelectOperation1().executeQuery();
    }

    public void setGlbParamInMppCreatEdit() {
        getMnfMpp1().setNamedWhereClauseParam("BindCldId", this.getCldId());
        getMnfMpp1().setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgId());
        getMnfMpp1().setNamedWhereClauseParam("BindOrgId", this.getOrgId());
        getMnfMpp1().setNamedWhereClauseParam("BindSlocId", this.getSlocId());
        getMnfMpp1().setNamedWhereClauseParam("BindDocId", this.getGlblDocId());
        // System.out.println("::::::::::::::::::::::::::::::::::::::::::: mpp doc id :;; " + getGlblDocId());
        getMppSearch1().executeQuery();
    }

    public void setGlbParamInPdoSearch() {
        getDualForPdoSearch1().setNamedWhereClauseParam("BindCldId", this.getCldId());
        getDualForPdoSearch1().setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgId());
        getDualForPdoSearch1().setNamedWhereClauseParam("BindOrgId", this.getOrgId());
        getDualForPdoSearch1().setNamedWhereClauseParam("BindSlocId", this.getSlocId());
        getDualForPdoSearch1().executeQuery();
    }

    public void setSearchGlobalParameter() {
        setGlbParamInMppSearch();
    }

    public void setGlbParamInMppSearch() {
        getMppSearch1().executeQuery();
        getDualForMppSearch1().setNamedWhereClauseParam("BindCldId", this.getCldId());
        getDualForMppSearch1().setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgId());
        getDualForMppSearch1().setNamedWhereClauseParam("BindOrgId", this.getOrgId());
        getDualForMppSearch1().setNamedWhereClauseParam("BindSlocId", this.getSlocId());
        getDualForMppSearch1().executeQuery();

    }


    /**
     * WorkFlow call
     */


    /**
     * Generalized method used to display the facesmessages.
     * Created by Vishal Kumar on 09-09-2014.
     * @param msgHdr is to set the header for message dialog
     * @param msgDtl is to set if further detail information in meassage is required.
     * @param msgSeverity is to set severity mode.
     * @param msgMode is kept to incorporate conditional activities.
     * **/
    public void showFacesMsg(String msgHdr, String msgDtl, javax.faces.application.FacesMessage.Severity msgSeverity,
                             String msgMode) {

        FacesMessage msg = new FacesMessage(msgHdr);
        msg.setDetail(msgDtl);
        msg.setSeverity(msgSeverity);
        FacesContext.getCurrentInstance().addMessage(null, msg);

    }

    /**
     * Method used to call work flow function.
     * calls db functions APP.WF_GET_USR_LEVEL & APP.WF_INS_TXN
     *
     * **/

    public String callWfFunctions(String cldId, Integer slcId, String orgId, Integer usrId, String txnId, Integer docId,
                                  Integer docTypId) {

        // System.out.println("callWfFunctions--- slcId " + slcId + " cldId " + cldId + "  " + " orgId " + orgId +
        //                   " usrId " + usrId + " docId " + docId + " txnId " + txnId + " docTypId " + docTypId);

        //get the work flow for the document 25506
        String wfId = getWfId(cldId, slcId, orgId, docId, docTypId);
        //String action = "I";
        //String remark = "A";
        //Number amount11 = new Number(0);
        // System.out.println("wfId " + wfId);
        Object level;
        try {
            level = callStoredFunction(NUMBER, "APP.WF_GET_USR_LEVEL(?,?,?,?,?,?,?)", new Object[] {
                                       slcId, cldId, orgId, usrId, wfId, docId, docTypId
            });
            //  System.out.println("level " + level);
            callStoredFunction(NUMBER, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                               slcId, cldId, orgId, docId, docTypId, wfId, txnId, usrId, usrId, level, level, "I", "A",
                               0
            });

        } catch (Exception nfe) {

            showFacesMsg(resolvElDCMsg("#{bundle['MSG.1113']}").toString(), null, FacesMessage.SEVERITY_ERROR, null);

            nfe.printStackTrace();
        }

        return null;
    }

    /**
     * Method used to get the Work flow id for a document.
     *
     * **/

    public String getWfId(String cldId, Integer slcId, String orgId, Integer docId, Integer docTypId) {
        /*  System.out.println("getWfId--- slcId " + slcId + " cldId " + cldId + "  " + " orgId " + orgId + " docId " +
                              docId + " docTypId " + docTypId); */
        try {
            return callStoredFunction(VARCHAR, "APP.WF_GET_ID(?,?,?,?,?)", new Object[] {
                                      slcId, cldId, orgId, docId, docTypId }).toString();
        } catch (Exception e) {
            e.printStackTrace();

            StringBuilder saveMsg = new StringBuilder("<html><body><p><b>Error in getting Work Flow Details. </b></p>");

            saveMsg.append("</body></html>");

            showFacesMsg(saveMsg.toString(), null, FacesMessage.SEVERITY_ERROR, null);

        }
        return "0";
    }

    /**
     * Method created to call DB fucntion to get the user at which the document is pending
     *
     * **/

    public Integer getDocUsrFromWF(String cldId, Integer slcId, String orgId, Integer usrId, String txnId,
                                   Integer docId, Integer docTypId) {
        Object fnRetVal;

        /* System.out.println("getDocUsrFromWF--- slcId " + slcId + " cldId " + cldId + "  " + " orgId " + orgId +
                              " docId " + docId + " txnId " + txnId + " docTypId " + docTypId); */
        try {
            fnRetVal = callStoredFunction(NUMBER, "APP.WF_GET_CUR_USR(?,?,?,?,?,?)", new Object[] {
                                          slcId, cldId, orgId, docId, txnId, docTypId
            });

            if (fnRetVal != null) {

                /*   if (fnRetVal.equals(-1)) {
                       showFacesMsg("Error while fetching user work flow details", null, FacesMessage.SEVERITY_ERROR,null);
                   } */

                return Integer.parseInt(fnRetVal.toString());
            }

        } catch (Exception e) {

            e.printStackTrace();

        }
        showFacesMsg("Error while fetching user work flow details", null, FacesMessage.SEVERITY_ERROR, null);
        return 0;
    }

    public void updateWfStatus() {

        String wf_mode = (resolvEl("#{pageFlowScope.WF_RET_VAL}").toString());

        // System.out.println("wf_mode " + wf_mode);

        //wf_mode : V - revert, I - Initialize, F - Forwarded, A - Approved, R - Reject

        Row r = getMnfMpp1().getCurrentRow();

        if ("I".equals(wf_mode)) {

            r.setAttribute("MppMode", 47);

        } else if ("F".equals(wf_mode)) {

            r.setAttribute("MppMode", 46);

        } else if ("A".equals(wf_mode)) {

            r.setAttribute("MppMode", 43);

        } else if ("R".equals(wf_mode)) {

            r.setAttribute("MppMode", 45);

        }
        //System.out.println("inside uuupdate wf");
        getDBTransaction().commit();
    }


    public String getUserName(Integer u_Id, Integer slc_id) {
        String uname = "";
        ViewObjectImpl impl = this.getLOVUser1();
        impl.setNamedWhereClauseParam("BindUsrId", u_Id);
        impl.setNamedWhereClauseParam("BindSlocId", slc_id);
        impl.executeQuery();
        Row[] allRowsInRange = impl.getAllRowsInRange();
        if (allRowsInRange.length > 0) {
            Object a = allRowsInRange[0].getAttribute("UsrName");
            String s = (a == null ? null : a.toString());
            uname = s;
        }
        return uname;
    }
    /*--------------------------ResolveEdic Message Method----------------------------*/
    public Object resolvElDCMsg(String data) {
        ADFContext adfCtx = ADFContext.getCurrent();
        ELContext elContext = adfCtx.getELContext();
        ValueExpression valueExp = adfCtx.getExpressionFactory().createValueExpression(elContext, data, Object.class);
        return valueExp.getValue(elContext);
    }


    /**
     * method to call SQL Function
     */
    /*------------------------Declaration of Type Oracle---------------------------*/
    private static int INTEGER = Types.INTEGER;
    private static int NUMBER = Types.INTEGER;
    private static int VARCHAR = Types.VARCHAR;


    /** helper method for executing DB function
     * @param sqlReturnType return type of database function
     * @param stmt statement of executing function in database quary
     * @param bindVars input and out parameter of database function.
     * @return
     */
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    //System.out.println(bindVars[z] + "   ------");
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.executeUpdate();
            //System.out.println("st.getObject(1) " + st.getObject(1));
            return st.getObject(1);
        } catch (SQLException e) {
            e.printStackTrace();
            int end = e.getMessage().indexOf("\n");
            throw new JboException(e.getMessage().substring(11, end));

        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    throw new JboException(e.getMessage());
                }
            }
        }
    }


    /**
     * function to insert item into MNF$MPP$OP$ITM
     FN_MNF_INS_PDO_OP_TO_mpp_OP(                      p_cld_id        VARCHAR2,
                                                       p_sloc_id       NUMBER,
                                                       p_ho_org_id     VARCHAR2,
                                                       p_org_id        VARCHAR2,
                                                       p_OP_DOC_id VARCHAR2,
                                                       p_op_sr_no      NUMBER,
                                                       p_MPP_doc_id    VARCHAR2,
                                                       p_usr_id       varchar2,
                                                       p_pdo_id      varchar2)

     */
    public Integer insertIntoMppItem(String cld, Integer sloc, String horg, String org, String OprDoc,
                                     oracle.jbo.domain.Number OprSr, String MppDoc, Integer user, String pdDocId) {
        try {
            return (Integer) callStoredFunction(INTEGER, "MNF.FN_MNF_INS_PDO_OP_TO_mpp_OP(?,?,?,?,?,?,?,?,?)", new Object[] {
                                                cld, sloc, horg, org, OprDoc, OprSr, MppDoc, user, pdDocId
        });
        } catch (Exception e) {
            e.printStackTrace();
        }
        return 0;
    }


    /**
     *     function to remove item from MNF$MPP$OP$ITM
     *     fn_mnf_rem_mpp_op_itm
     *      p_cld_id    VARCHAR2,
        p_sloc_id   NUMBER,
        p_ho_org_id VARCHAR2,
        p_org_id    VARCHAR2,
        p_DOC_id    VARCHAR2,
        p_usr_id    varchar2)

     */

    public Integer removeFromMppItem(String cld, Integer sloc, String horg, String org, String MppDoc, Integer user) {
        //System.out.println("INside remove");
        try {
            return (Integer) callStoredFunction(INTEGER, "MNF.fn_mnf_rem_mpp_op_itm(?,?,?,?,?,?)", new Object[] {
                                                cld, sloc, horg, org, MppDoc, user
        });
        } catch (Exception e) {
            e.printStackTrace();
        }
        return 0;
    }

    /** Function to generate Job card and route card
     *          p_cld_id     VARCHAR2,
		p_sloc_id    NUMBER,
		p_ho_org_id  VARCHAR2,
		p_org_id     VARCHAR2,
		p_src_doc_id VARCHAR2,         ---------GPP_ID OR PDO_ID OR RC_ID
		p_src_type   VARCHAR2,         ---------APPLICATION DOCUMENT ID OF PDO(26001) OR GPP(26002) OR RC (26003)
		p_doc_dt     DATE,         -------------DATE FOR WHICH JOB CARD OR ROUTE CARD NEED TO BE CREATED
		p_usr_id     NUMBER,         -----------USER ID
		p_usr_dt     DATE,          ------------USER CREATE DATE
		p_mode       NUMBER ,              -----105for job card,106 for route card
		p_op_doc_id  VARCHAR2 DEFAULT NULL,-----OPERATION ID FOR WHICH JOB CARD NEED TO BE GENERATED IN
		-- CASE OF ROUTE CARD IT WILLL BE NULL
		p_op_sr_no          NUMBER DEFAULT NULL,----SERIAL  NO OF OPERATION
		p_outpt_itm_id      VARCHAR2,           ----OPERATION OUTPUT ITEM ID
		p_outpt_itm_qty     NUMBER,           ------OPERATION OUTPUT ITEM QUANTITY OF PDO/MPP
		p_fy_id             NUMBER,          -------FINACIAL YEAR ID
		p_rmrk              VARCHAR2,            ---REMARKa
		p_shift_id          VARCHAR2,            ---SHIFT FOR JC/RC
		p_wc_id             VARCHAR2,            ---WC FOR JC/RC
		p_ws_id             VARCHAR2,            ---WS FOR JC/RC
		p_loc_type          NUMBER,            -----LOCATION TYPE
		p_strt_dt           DATE,            -------START TIME OF JC/RC
		p_end_dt            DATE,             ------END TIME OF JC/RC
		p_emp_id            NUMBER ,      ----------PERSON OF INCHARGE OF JC/RC,
		p_rqmt_area_id      NUMBER ,      ----------rEQIREMENT AREA ID
		p_wh_id             VARCHAR2,  kilogram (kg)

     */

    public Integer callFuntoGenJCRC(String cld, Integer sloc, String horg, String org, String mppDocId,
                                    Integer appDocId, Timestamp docDt, Integer usrId, Timestamp usrCreatDt,
                                    Integer jcRcMode, String opId, oracle.jbo.domain.Number opSrNo, String outputItemId,
                                    oracle.jbo.domain.Number totalOutputItemQuantity, Integer finId, String remark,
                                    String shiftId, String wcId, String wsId, Integer locationType, Timestamp startDt,
                                    Timestamp endDt, oracle.jbo.domain.Number empId, Integer reqmId, String wrhId,
                                    oracle.jbo.domain.Number reqOutputItemQuantity) {

        try {
            return (Integer) callStoredFunction(INTEGER,
                                                "MNF.fn_mnf_gen_jc_rc(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                cld, sloc, horg, org, mppDocId, appDocId, docDt, usrId, usrCreatDt,
                                                jcRcMode, opId, opSrNo, outputItemId, totalOutputItemQuantity, finId,
                                                remark, shiftId, wcId, wsId, locationType, startDt, endDt, empId,
                                                reqmId, wrhId, reqOutputItemQuantity
        });


        } catch (Exception e) {
            e.printStackTrace();
        }
        return 0;
    }

    /**
     * Method to set the status of PDO
     * 	        p_cld_id      VARCHAR2,
		p_sloc_id     NUMBER,
		p_ho_org_id   VARCHAR2,
		p_org_id      VARCHAR2,
		p_doc_id      VARCHAR2, --------DOCUMENT ID 26002
		p_doc_hex_id  VARCHAR2,      --- Hexadecimal id of document GPP DOc ID
		p_op_doc_id   VARCHAR2,  ----curent opr
		p_op_sr_no    NUMBER,    ---- currnt opr sr no
		p_usr_id      NUMBER,
		p_usr_dt      DATE,
		p_doc_op_stat NUMBER -----107 OR 108
     */

    public Integer setPdoStatus(String cld, Integer sloc, String horg, String org) {
        String opId;
        oracle.jbo.domain.Number opSrNo;
        String gppDoc;
        Timestamp usrCreatDt;
        Integer user;

        Row s = getMnfMppOp1().getCurrentRow();
        Row r = getMnfMpp1().getCurrentRow();

        if (r != null) {
            gppDoc = (r.getAttribute("DocId").toString() == null ? null : r.getAttribute("DocId").toString());
            usrCreatDt = (Timestamp) r.getAttribute("UsrIdCreateDt");
            user = (Integer) r.getAttribute("UsrIdCreate");

            if (s != null) {
                opId = (s.getAttribute("OpId").toString() == null ? null : s.getAttribute("OpId").toString());
                opSrNo = (oracle.jbo.domain.Number) s.getAttribute("OpSrNo");

                Set<String> set = new HashSet<String>();
                RowSetIterator rw = getMnfMppPdo1().createRowSetIterator(null);
                Row p = null;

                rw.getFilteredRows("DocId", gppDoc);
                while (rw.hasNext()) {
                    p = rw.next();
                    set.add(p.getAttribute("PdoId").toString());
                }

                String pdoDoc;
                Iterator itr = set.iterator();
                while (itr.hasNext()) {
                    pdoDoc = itr.next().toString();
                    System.out.println(pdoDoc + " pdo is set to close");
                    try {
                        callStoredFunction(INTEGER, "MNF.fn_mnf_UPD_DOC_OP_STAT(?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                           cld, sloc, horg, org, 26002, pdoDoc, opId, opSrNo, user, usrCreatDt, 108
                        });
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
                rw.closeRowSetIterator();
            }
        }
        return 0;
    }

    public Integer reSetPdoStatus(String cld, Integer sloc, String horg, String org) {
        String opId;
        oracle.jbo.domain.Number opSrNo;
        String gppDoc;
        Timestamp usrCreatDt;
        Integer user;

        Row s = getMnfMppOp1().getCurrentRow();
        Row r = getMnfMpp1().getCurrentRow();

        if (r != null) {
            gppDoc = (r.getAttribute("DocId").toString() == null ? null : r.getAttribute("DocId").toString());
            usrCreatDt = (Timestamp) r.getAttribute("UsrIdCreateDt");
            user = (Integer) r.getAttribute("UsrIdCreate");

            if (s != null) {
                opId = (s.getAttribute("OpId").toString() == null ? null : s.getAttribute("OpId").toString());
                opSrNo = (oracle.jbo.domain.Number) s.getAttribute("OpSrNo");

                Set<String> set = new HashSet<String>();
                RowSetIterator rw = getMnfMppPdo1().createRowSetIterator(null);
                Row p = null;

                rw.getFilteredRows("DocId", gppDoc);
                while (rw.hasNext()) {
                    p = rw.next();
                    set.add(p.getAttribute("PdoId").toString());
                }

                String pdoDoc;
                Iterator itr = set.iterator();
                while (itr.hasNext()) {
                    pdoDoc = itr.next().toString();
                    System.out.println(pdoDoc + " pdo is set");
                    try {
                        callStoredFunction(INTEGER, "MNF.fn_mnf_UPD_DOC_OP_STAT(?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                           cld, sloc, horg, org, 26002, pdoDoc, opId, opSrNo, user, usrCreatDt, 107
                        });
                        System.out.println(pdoDoc + " pdo is set to open");
                    } catch (Exception e) {
                        System.out.println("error in function for resetting pdo");
                        e.printStackTrace();
                    }
                }
                rw.closeRowSetIterator();
            }
        }
        return 0;
    }


    /**
     * function to check jc/rc creation is allowed from gpp
     * mnf.fn_chk_jc_allowed('0000',1,'0I',83)
     */
    public void chkJcRcGen(String cld, Integer sloc, String org) {
        try {

            String chkJc = callStoredFunction(VARCHAR, "MNF.fn_chk_jc_allowed(?,?,?,?)", new Object[] {
                                              cld, sloc, org, 83 }).toString();
            System.out.println(chkJc + " the return");

            Row r = getDualForJobRouteGen1().getCurrentRow();
            r.setAttribute("chkJcRc", chkJc);

        } catch (Exception e) {
            e.printStackTrace();
        }


    }

    //Method to set the staus of production order to close and its operation
    public void setStatus(String cld_id, Integer sloc_id, String ho_org_id, String org_id, String opr_doc_id,
                          Integer opr_sr_no, String gpp_doc_id) {

        RowQualifier rq = new RowQualifier(getMnfMppPdo1());

        rq.setWhereClause("SlocId = " + getSlocId() + " and CldId='" + getCldId() + "' and HoOrgId='" + getHoOrgId() +
                          "' and DocId = '" + gpp_doc_id);
        Row[] fltrdRow = getMnfMppPdo1().getFilteredRows(rq);
        System.out.println(fltrdRow.length + " total no. of pdo");

        for (int x = 0; x < fltrdRow.length; x++) {
            setPdoState(getCldId().toString(), getSlocId(), getHoOrgId().toString(), getOrgId().toString(),
                        fltrdRow[x].getAttribute("PdoId").toString(), opr_doc_id, opr_sr_no, 108);
        }

    }

    //Method to set the staus of production order to open and its operation
    public void resetStatus(String cld_id, Integer sloc_id, String ho_org_id, String org_id, String opr_doc_id,
                            Integer opr_sr_no, String gpp_doc_id) {
        RowQualifier rq = new RowQualifier(getMnfMppPdo1());

        rq.setWhereClause("SlocId = " + getSlocId() + " and CldId='" + getCldId() + "' and HoOrgId='" + getHoOrgId() +
                          "' and DocId = '" + gpp_doc_id);
        Row[] fltrdRow = getMnfMppPdo1().getFilteredRows(rq);
        System.out.println(fltrdRow.length + " total no. of pdo");

        for (int x = 0; x < fltrdRow.length; x++) {
            setPdoState(getCldId().toString(), getSlocId(), getHoOrgId().toString(), getOrgId().toString(),
                        fltrdRow[x].getAttribute("PdoId").toString(), opr_doc_id, opr_sr_no, 107);
        }
    }


    /** method to change the close status
     fn_mnf_pdo_cls
     (
       p_cld_id       NUMBER,
       p_sloc_id      NUMBER,
       p_ho_org_id    VARCHAR2,
       p_org_id       VARCHAR2,
       p_pdo_doc_id   VARCHAR2,
       p_op_id        VARCHAR2,
       p_op_sr_no        VARCHAR2
     )
     */

    public void closePdoState(String cld_id, Integer sloc_id, String ho_org_id, String org_id, String src_doc_id,
                              Integer opr_sr_no, String opr_doc_id) {
        try {
            Integer chkState = (Integer) callStoredFunction(NUMBER, "MNF.fn_mnf_pdo_cls(?,?,?,?,?,?,?)", new Object[] {
                                                            cld_id, sloc_id, ho_org_id, org_id, src_doc_id, opr_doc_id,
                                                            opr_sr_no
            });
            System.out.println(chkState + " the return");

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * Method to reopen the operation and production order state
     * fn_mnf_mpp_pdo_open
        (
          p_cld_id       NUMBER,
          p_sloc_id      NUMBER,
          p_ho_org_id    VARCHAR2,
          p_org_id       VARCHAR2,
          p_pdo_doc_id   VARCHAR2,
          p_op_id        VARCHAR2,
          p_op_sr_no     VARCHAR2
        )
     */
    public void openPdoState(String cld_id, Integer sloc_id, String ho_org_id, String org_id, String src_doc_id,
                             String opr_doc_id, Integer opr_sr_no) {
        try {
            Integer chkState = (Integer) callStoredFunction(NUMBER, "MNF.fn_mnf_mpp_pdo_open(?,?,?,?,?,?,?)", new Object[] {
                                                            cld_id, sloc_id, ho_org_id, org_id, src_doc_id, opr_doc_id,
                                                            opr_sr_no
            });
            System.out.println(chkState + " the return");

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /** Method to set the state of operation of Production order used
     * fn_mnf_mpp_to_src_bck_upd_stat
        (chkJcRc
          p_cld_id       NUMBER,
          p_sloc_id      NUMBER,
          p_ho_org_id    VARCHAR2,
          p_org_id       VARCHAR2,
          p_pdo_doc_id   VARCHAR2,
          p_op_id        VARCHAR2,
          p_op_sr_no        VARCHAR2,
          p_op_stat number  ---107 for open 108 for closing

        )
     */

    public void setPdoState(String cld_id, Integer sloc_id, String ho_org_id, String org_id, String src_doc_id,
                            String opr_doc_id, Integer opr_sr_no, Integer op_state) {
        try {
            Integer chkState =
                (Integer) callStoredFunction(NUMBER, "MNF.fn_mnf_mpp_to_src_bck_upd_stat(?,?,?,?,?,?,?,?)", new Object[] {
                                             cld_id, sloc_id, ho_org_id, org_id, src_doc_id, opr_doc_id, opr_sr_no,
                                             op_state
            });
            System.out.println(chkState + " the return");

        } catch (Exception e) {
            e.printStackTrace();
        }
    }


    /**
     * Method to update gpp after jc generation
     * fn_mnf_jc_to_src_back_upd_stat(
		p_cld_id       NUMBER,
		p_sloc_id      NUMBER,
		p_ho_org_id    VARCHAR2,
		p_org_id       VARCHAR2,
		p_doc_id_src   VARCHAR2,-------production order or mpp or rc hexadecimal id
		p_doc_type_src NUMBER,-----82 for production order,83 for MPP ,93 for reoute card
		p_op_id        VARCHAR2,-------Operation hexadecimal id
		p_op_sr_no     NUMBER------Sr no of Operation
        )
     */

    public void updateGppByJcGen(String cld_id, Integer sloc_id, String ho_org_id, String org_id, String src_doc_id,
                                 String opr_doc_id, oracle.jbo.domain.Number opr_sr_no) {
        try {
            Integer chkState =
                (Integer) callStoredFunction(NUMBER, "MNF.fn_mnf_jc_to_src_back_upd_stat(?,?,?,?,?,?,?,?)", new Object[] {
                                             cld_id, sloc_id, ho_org_id, org_id, src_doc_id, 83, opr_doc_id, opr_sr_no




            });
            System.out.println(chkState + " the return");

        } catch (Exception e) {
            e.printStackTrace();
        }
    }


    /**
     * Method to check if JC for the operation have beem created
     * @return Y if Job card exists else N
     * fn_mnf_chk_jc_exists(
		p_cld_id       VARCHAR2,
		p_sloc_id      NUMBER,
		p_org_id       VARCHAR2,
		p_src_doc_type NUMBER,   -- 26001 PRODUCTION ORDER--26002 GROUP PRODUCTION PLAN
		p_src_doc_id   VARCHAR2 --- Hex decimal Id
	)
     * **/
    public String ChkJCExists(String gpp_doc_id, String cld_id, String org_id, Integer sloc_id) {
        String dummy = null;
        Row row = this.getMnfMpp1().getCurrentRow();
        String DocId = row.getAttribute("DocId").toString();
        try {
            dummy = (String) callStoredFunction(Types.VARCHAR, "fn_mnf_chk_jc_exists(?,?,?,?,?)", new Object[] {
                                                cld_id, sloc_id, org_id, 26002, DocId
            });
        } catch (Exception e) {
            e.printStackTrace();
        }
        return dummy;

    }

    /**
     * Method to update gpp after RC generation
     * fn_mnf_RC_to_src_back_upd_stat
        (
          p_cld_id       NUMBER,
          p_sloc_id      NUMBER,
          p_ho_org_id    VARCHAR2,
          p_org_id       VARCHAR2,
          p_doc_id       VARCHAR2,  ------hexadecimal doc_id of PDO or MPP
          p_doc_type_src NUMBER -- If p_doc_id_src = 82 then pass PDO doc_id, if it is 83 then pass MPP doc_id.
        )
     */


    public void updateGppByRcGen(String cld_id, Integer sloc_id, String ho_org_id, String org_id, String src_doc_id) {
        try {
            Integer chkState = (Integer) callStoredFunction(NUMBER, "MNF.fn_mnf_RC_to_src_back_upd_stat(?,?,?,?,?,?)", new Object[] {
                                                            cld_id, sloc_id, ho_org_id, org_id, src_doc_id, 83




            });
            System.out.println(chkState + " the return");

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     *Method to get data from page Flow scope
     *
     *
     * @param data
     * @return
     */
    public Object resolvEl(String data) {
        ADFContext adfCtx = ADFContext.getCurrent();
        ELContext elContext = adfCtx.getELContext();
        ValueExpression valueExp = adfCtx.getExpressionFactory().createValueExpression(elContext, data, Object.class);
        Object Message = valueExp.getValue(elContext).toString();

        return Message;
    }


    /*getting page flow scope parameter methods.*/

    public Integer getSlocId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC }").toString());
    }

    public StringBuffer getCldId() {
        return new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
    }

    public StringBuffer getOrgId() {
        return new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
    }

    public StringBuffer getHoOrgId() {
        return new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString());
    }

    public Integer getUsrId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
    }

    public StringBuffer getGlblDocId() {
        return new StringBuffer(resolvEl("#{pageFlowScope.MPP_DOC_ID}").toString());
    }

    /**
     * Container's getter for DualForMppSearch1.
     * @return DualForMppSearch1
     */
    public ViewObjectImpl getDualForMppSearch1() {
        return (ViewObjectImpl) findViewObject("DualForMppSearch1");
    }

    /**
     * Container's getter for MppSearch1.
     * @return MppSearch1
     */
    public ViewObjectImpl getMppSearch1() {
        return (ViewObjectImpl) findViewObject("MppSearch1");
    }


    /**
     * Container's getter for DualForPdoSearch1.
     * @return DualForPdoSearch1
     */
    public ViewObjectImpl getDualForPdoSearch1() {
        return (ViewObjectImpl) findViewObject("DualForPdoSearch1");
    }


    /**
     * Container's getter for PDPFromView1.
     * @return PDPFromView1
     */
    public ViewObjectImpl getPDPFromView1() {
        return (ViewObjectImpl) findViewObject("PDPFromView1");
    }


    /**
     * Container's getter for SelectOperation1.
     * @return SelectOperation1
     */
    public ViewObjectImpl getSelectOperation1() {
        return (ViewObjectImpl) findViewObject("SelectOperation1");
    }


    /**
     * Container's getter for MnfMppOp1.
     * @return MnfMppOp1
     */
    public ViewObjectImpl getMnfMppOp1() {
        return (ViewObjectImpl) findViewObject("MnfMppOp1");
    }

    /**
     * Container's getter for MnfMppToMnfMppOpVL1.
     * @return MnfMppToMnfMppOpVL1
     */
    public ViewLinkImpl getMnfMppToMnfMppOpVL1() {
        return (ViewLinkImpl) findViewLink("MnfMppToMnfMppOpVL1");
    }


    /**
     * Container's getter for MnfMppOpItm2.
     * @return MnfMppOpItm2
     */
    public ViewObjectImpl getMnfMppOpItmOutput() {
        return (ViewObjectImpl) findViewObject("MnfMppOpItmOutput");
    }


    /**
     * Container's getter for MnfMppOpToMnfMppOpItmVL2.
     * @return MnfMppOpToMnfMppOpItmVL2
     */
    public ViewLinkImpl getMnfMppOpToMnfMppOpItmVL2() {
        return (ViewLinkImpl) findViewLink("MnfMppOpToMnfMppOpItmVL2");
    }

    /**
     * Container's getter for MnfMppOpItm1.
     * @return MnfMppOpItm1
     */
    public ViewObjectImpl getMnfMppOpItmInput() {
        return (ViewObjectImpl) findViewObject("MnfMppOpItmInput");
    }

    /**
     * Container's getter for MnfMppOpToMnfMppOpItmVL1.
     * @return MnfMppOpToMnfMppOpItmVL1
     */
    public ViewLinkImpl getMnfMppOpToMnfMppOpItmVL1() {
        return (ViewLinkImpl) findViewLink("MnfMppOpToMnfMppOpItmVL1");
    }

    /**
     * Container's getter for CommmonOperation1.
     * @return CommmonOperation1
     */
    public ViewObjectImpl getCommmonOperation1() {
        return (ViewObjectImpl) findViewObject("CommmonOperation1");
    }


    /**
     * Container's getter for MnfMppPdo1.
     * @return MnfMppPdo1
     */
    public ViewObjectImpl getMnfMppPdo1() {
        return (ViewObjectImpl) findViewObject("MnfMppPdo1");
    }

    /**
     * Container's getter for FkMnfMppPdo2VL1.
     * @return FkMnfMppPdo2VL1
     */
    public ViewLinkImpl getFkMnfMppPdo2VL1() {
        return (ViewLinkImpl) findViewLink("FkMnfMppPdo2VL1");
    }

    /**
     * Container's getter for LOVUser1.
     * @return LOVUser1
     */
    public ViewObjectImpl getLOVUser1() {
        return (ViewObjectImpl) findViewObject("LOVUser1");
    }

    /**
     * Container's getter for DualForJobRouteGen1.
     * @return DualForJobRouteGen1
     */
    public DualForJobRouteGenVOImpl getDualForJobRouteGen1() {
        return (DualForJobRouteGenVOImpl) findViewObject("DualForJobRouteGen1");
    }


    /**
     * Container's getter for LOVWsId1.
     * @return LOVWsId1
     */
    public ViewObjectImpl getLOVWsId1() {
        return (ViewObjectImpl) findViewObject("LOVWsId1");
    }


    /**
     * Container's getter for OperationInSerial1.
     * @return OperationInSerial1
     */
    public ViewObjectImpl getOperationInSerial1() {
        return (ViewObjectImpl) findViewObject("OperationInSerial1");
    }


    /**
     * Container's getter for SummaryOperation1.
     * @return SummaryOperation1
     */
    public ViewObjectImpl getSummaryOperation1() {
        return (ViewObjectImpl) findViewObject("SummaryOperation1");
    }

    /**
     * Container's getter for PDOSearch1.
     * @return PDOSearch1
     */
    public ViewObjectImpl getPDOSearch1() {
        return (ViewObjectImpl) findViewObject("PDOSearch1");
    }

    /**
     * Container's getter for SingleOperationDetails1.
     * @return SingleOperationDetails1
     */
    public ViewObjectImpl getSingleOperationDetails1() {
        return (ViewObjectImpl) findViewObject("SingleOperationDetails1");
    }

    /**
     * Container's getter for DualForItemSearch1.
     * @return DualForItemSearch1
     */
    public ViewObjectImpl getDualForItemSearch1() {
        return (ViewObjectImpl) findViewObject("DualForItemSearch1");
    }

    /**
     * Container's getter for LOVJcRcChoice1.
     * @return LOVJcRcChoice1
     */
    public ViewObjectImpl getLOVJcRcChoice1() {
        return (ViewObjectImpl) findViewObject("LOVJcRcChoice1");
    }
}

