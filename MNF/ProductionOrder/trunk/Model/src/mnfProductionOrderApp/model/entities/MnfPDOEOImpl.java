package mnfProductionOrderApp.model.entities;


import adf.utils.ebiz.EbizParams;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.util.Map;

import oracle.jbo.domain.Timestamp;

import javax.el.ELContext;
import javax.el.ValueExpression;

import javax.faces.application.FacesMessage;

import javax.faces.context.FacesContext;

import oracle.adf.share.ADFContext;

import oracle.jbo.AttributeList;
import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.RowInconsistentException;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.NClobDomain;
import oracle.jbo.domain.Number;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;

import org.apache.myfaces.trinidad.context.RequestContext;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Sep 16 14:13:49 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MnfPDOEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CldId,
        SlocId,
        HoOrgId,
        OrgId,
        DocId,
        DocDt,
        PdoBasis,
        PdoId,
        FyId,
        PdoStat,
        OutptItmId,
        OutptItmQty,
        BomId,
        RtId,
        PlnStrtTm,
        PlnEndTm,
        PdoRevNo,
        PdoRevDt,
        ItmBatchNo,
        PdoPriority,
        UsrIdCreate,
        UsrIdCreateDt,
        UsrIdMod,
        UsrIdModDt,
        PdoMode,
        PdoRmrk,
        RefPdoId,
        OutptItmAmtBs,
        BalQty,
        TmpBalQty,
        MnfPdoOpEO,
        MnfPdoSRCEO,
        MnfPdoAttachEO,
        MnfPdoParamEO,
        MnfPdoOpItmEO,
        MnfPdoOpItmEO1,
        MnfPdoQcParamEO;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int DOCDT = AttributesEnum.DocDt.index();
    public static final int PDOBASIS = AttributesEnum.PdoBasis.index();
    public static final int PDOID = AttributesEnum.PdoId.index();
    public static final int FYID = AttributesEnum.FyId.index();
    public static final int PDOSTAT = AttributesEnum.PdoStat.index();
    public static final int OUTPTITMID = AttributesEnum.OutptItmId.index();
    public static final int OUTPTITMQTY = AttributesEnum.OutptItmQty.index();
    public static final int BOMID = AttributesEnum.BomId.index();
    public static final int RTID = AttributesEnum.RtId.index();
    public static final int PLNSTRTTM = AttributesEnum.PlnStrtTm.index();
    public static final int PLNENDTM = AttributesEnum.PlnEndTm.index();
    public static final int PDOREVNO = AttributesEnum.PdoRevNo.index();
    public static final int PDOREVDT = AttributesEnum.PdoRevDt.index();
    public static final int ITMBATCHNO = AttributesEnum.ItmBatchNo.index();
    public static final int PDOPRIORITY = AttributesEnum.PdoPriority.index();
    public static final int USRIDCREATE = AttributesEnum.UsrIdCreate.index();
    public static final int USRIDCREATEDT = AttributesEnum.UsrIdCreateDt.index();
    public static final int USRIDMOD = AttributesEnum.UsrIdMod.index();
    public static final int USRIDMODDT = AttributesEnum.UsrIdModDt.index();
    public static final int PDOMODE = AttributesEnum.PdoMode.index();
    public static final int PDORMRK = AttributesEnum.PdoRmrk.index();
    public static final int REFPDOID = AttributesEnum.RefPdoId.index();
    public static final int OUTPTITMAMTBS = AttributesEnum.OutptItmAmtBs.index();
    public static final int BALQTY = AttributesEnum.BalQty.index();
    public static final int TMPBALQTY = AttributesEnum.TmpBalQty.index();
    public static final int MNFPDOOPEO = AttributesEnum.MnfPdoOpEO.index();
    public static final int MNFPDOSRCEO = AttributesEnum.MnfPdoSRCEO.index();
    public static final int MNFPDOATTACHEO = AttributesEnum.MnfPdoAttachEO.index();
    public static final int MNFPDOPARAMEO = AttributesEnum.MnfPdoParamEO.index();
    public static final int MNFPDOOPITMEO = AttributesEnum.MnfPdoOpItmEO.index();
    public static final int MNFPDOOPITMEO1 = AttributesEnum.MnfPdoOpItmEO1.index();
    public static final int MNFPDOQCPARAMEO = AttributesEnum.MnfPdoQcParamEO.index();

    /**
     * This is the default constructor (do not remove).
     */
    public MnfPDOEOImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("mnfProductionOrderApp.model.entities.MnfPDOEO");
    }


    /**
     * Gets the attribute value for CldId, using the alias name CldId.
     * @return the value of CldId
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CldId.
     * @param value value to set the CldId
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for SlocId, using the alias name SlocId.
     * @return the value of SlocId
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for SlocId.
     * @param value value to set the SlocId
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for HoOrgId, using the alias name HoOrgId.
     * @return the value of HoOrgId
     */
    public String getHoOrgId() {
        return (String) getAttributeInternal(HOORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for HoOrgId.
     * @param value value to set the HoOrgId
     */
    public void setHoOrgId(String value) {
        setAttributeInternal(HOORGID, value);
    }

    /**
     * Gets the attribute value for OrgId, using the alias name OrgId.
     * @return the value of OrgId
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for OrgId.
     * @param value value to set the OrgId
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for DocId, using the alias name DocId.
     * @return the value of DocId
     */
    public String getDocId() {
        return (String) getAttributeInternal(DOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for DocId.
     * @param value value to set the DocId
     */
    public void setDocId(String value) {
        setAttributeInternal(DOCID, value);
    }

    /**
     * Gets the attribute value for DocDt, using the alias name DocDt.
     * @return the value of DocDt
     */
    public Timestamp getDocDt() {
        return (Timestamp) getAttributeInternal(DOCDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for DocDt.
     * @param value value to set the DocDt
     */
    public void setDocDt(Timestamp value) {
        setAttributeInternal(DOCDT, value);
    }

    /**
     * Gets the attribute value for PdoBasis, using the alias name PdoBasis.
     * @return the value of PdoBasis
     */
    public Integer getPdoBasis() {
        return (Integer) getAttributeInternal(PDOBASIS);
    }

    /**
     * Sets <code>value</code> as the attribute value for PdoBasis.
     * @param value value to set the PdoBasis
     */
    public void setPdoBasis(Integer value) {
        setAttributeInternal(PDOBASIS, value);
    }

    /**
     * Gets the attribute value for PdoId, using the alias name PdoId.
     * @return the value of PdoId
     */
    public String getPdoId() {
        return (String) getAttributeInternal(PDOID);
    }

    /**
     * Sets <code>value</code> as the attribute value for PdoId.
     * @param value value to set the PdoId
     */
    public void setPdoId(String value) {
        setAttributeInternal(PDOID, value);
    }

    /**
     * Gets the attribute value for FyId, using the alias name FyId.
     * @return the value of FyId
     */
    public Integer getFyId() {
        return (Integer) getAttributeInternal(FYID);
    }

    /**
     * Sets <code>value</code> as the attribute value for FyId.
     * @param value value to set the FyId
     */
    public void setFyId(Integer value) {
        setAttributeInternal(FYID, value);
    }

    /**
     * Gets the attribute value for PdoStat, using the alias name PdoStat.
     * @return the value of PdoStat
     */
    public Integer getPdoStat() {
        return (Integer) getAttributeInternal(PDOSTAT);
    }

    /**
     * Sets <code>value</code> as the attribute value for PdoStat.
     * @param value value to set the PdoStat
     */
    public void setPdoStat(Integer value) {
        setAttributeInternal(PDOSTAT, value);
    }

    /**
     * Gets the attribute value for OutptItmId, using the alias name OutptItmId.
     * @return the value of OutptItmId
     */
    public String getOutptItmId() {
        return (String) getAttributeInternal(OUTPTITMID);
    }

    /**
     * Sets <code>value</code> as the attribute value for OutptItmId.
     * @param value value to set the OutptItmId
     */
    public void setOutptItmId(String value) {
        setAttributeInternal(OUTPTITMID, value);
    }

    /**
     * Gets the attribute value for OutptItmQty, using the alias name OutptItmQty.
     * @return the value of OutptItmQty
     */
    public oracle.jbo.domain.Number getOutptItmQty() {
        return (oracle.jbo.domain.Number) getAttributeInternal(OUTPTITMQTY);
    }

    /**
     * Sets <code>value</code> as the attribute value for OutptItmQty.
     * @param value value to set the OutptItmQty
     */
    public void setOutptItmQty(oracle.jbo.domain.Number value) {
        setAttributeInternal(OUTPTITMQTY, value);
    }

    /**
     * Gets the attribute value for BomId, using the alias name BomId.
     * @return the value of BomId
     */
    public String getBomId() {
        return (String) getAttributeInternal(BOMID);
    }

    /**
     * Sets <code>value</code> as the attribute value for BomId.
     * @param value value to set the BomId
     */
    public void setBomId(String value) {
        setAttributeInternal(BOMID, value);
    }

    /**
     * Gets the attribute value for RtId, using the alias name RtId.
     * @return the value of RtId
     */
    public String getRtId() {
        return (String) getAttributeInternal(RTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for RtId.
     * @param value value to set the RtId
     */
    public void setRtId(String value) {
        setAttributeInternal(RTID, value);
    }

    /**
     * Gets the attribute value for PlnStrtTm, using the alias name PlnStrtTm.
     * @return the value of PlnStrtTm
     */
    public Timestamp getPlnStrtTm() {
        return (Timestamp) getAttributeInternal(PLNSTRTTM);
    }

    /**
     * Sets <code>value</code> as the attribute value for PlnStrtTm.
     * @param value value to set the PlnStrtTm
     */
    public void setPlnStrtTm(Timestamp value) {
        setAttributeInternal(PLNSTRTTM, value);
    }

    /**
     * Gets the attribute value for PlnEndTm, using the alias name PlnEndTm.
     * @return the value of PlnEndTm
     */
    public Timestamp getPlnEndTm() {
        return (Timestamp) getAttributeInternal(PLNENDTM);
    }

    /**
     * Sets <code>value</code> as the attribute value for PlnEndTm.
     * @param value value to set the PlnEndTm
     */
    public void setPlnEndTm(Timestamp value) {
        setAttributeInternal(PLNENDTM, value);
    }

    /**
     * Gets the attribute value for PdoRevNo, using the alias name PdoRevNo.
     * @return the value of PdoRevNo
     */
    public Number getPdoRevNo() {
        return (Number) getAttributeInternal(PDOREVNO);
    }

    /**
     * Sets <code>value</code> as the attribute value for PdoRevNo.
     * @param value value to set the PdoRevNo
     */
    public void setPdoRevNo(Number value) {
        setAttributeInternal(PDOREVNO, value);
    }

    /**
     * Gets the attribute value for PdoRevDt, using the alias name PdoRevDt.
     * @return the value of PdoRevDt
     */
    public Timestamp getPdoRevDt() {
        return (Timestamp) getAttributeInternal(PDOREVDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for PdoRevDt.
     * @param value value to set the PdoRevDt
     */
    public void setPdoRevDt(Timestamp value) {
        setAttributeInternal(PDOREVDT, value);
    }

    /**
     * Gets the attribute value for ItmBatchNo, using the alias name ItmBatchNo.
     * @return the value of ItmBatchNo
     */
    public String getItmBatchNo() {
        return (String) getAttributeInternal(ITMBATCHNO);
    }

    /**
     * Sets <code>value</code> as the attribute value for ItmBatchNo.
     * @param value value to set the ItmBatchNo
     */
    public void setItmBatchNo(String value) {
        setAttributeInternal(ITMBATCHNO, value);
    }

    /**
     * Gets the attribute value for PdoPriority, using the alias name PdoPriority.
     * @return the value of PdoPriority
     */
    public Integer getPdoPriority() {
        return (Integer) getAttributeInternal(PDOPRIORITY);
    }

    /**
     * Sets <code>value</code> as the attribute value for PdoPriority.
     * @param value value to set the PdoPriority
     */
    public void setPdoPriority(Integer value) {
        setAttributeInternal(PDOPRIORITY, value);
    }

    /**
     * Gets the attribute value for UsrIdCreate, using the alias name UsrIdCreate.
     * @return the value of UsrIdCreate
     */
    public Integer getUsrIdCreate() {
        return (Integer) getAttributeInternal(USRIDCREATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdCreate.
     * @param value value to set the UsrIdCreate
     */
    public void setUsrIdCreate(Integer value) {
        setAttributeInternal(USRIDCREATE, value);
    }

    /**
     * Gets the attribute value for UsrIdCreateDt, using the alias name UsrIdCreateDt.
     * @return the value of UsrIdCreateDt
     */
    public Timestamp getUsrIdCreateDt() {
        return (Timestamp) getAttributeInternal(USRIDCREATEDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdCreateDt.
     * @param value value to set the UsrIdCreateDt
     */
    public void setUsrIdCreateDt(Timestamp value) {
        setAttributeInternal(USRIDCREATEDT, value);
    }

    /**
     * Gets the attribute value for UsrIdMod, using the alias name UsrIdMod.
     * @return the value of UsrIdMod
     */
    public Integer getUsrIdMod() {
        return (Integer) getAttributeInternal(USRIDMOD);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdMod.
     * @param value value to set the UsrIdMod
     */
    public void setUsrIdMod(Integer value) {
        setAttributeInternal(USRIDMOD, value);
    }

    /**
     * Gets the attribute value for UsrIdModDt, using the alias name UsrIdModDt.
     * @return the value of UsrIdModDt
     */
    public Timestamp getUsrIdModDt() {
        return (Timestamp) getAttributeInternal(USRIDMODDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdModDt.
     * @param value value to set the UsrIdModDt
     */
    public void setUsrIdModDt(Timestamp value) {
        setAttributeInternal(USRIDMODDT, value);
    }

    /**
     * Gets the attribute value for PdoMode, using the alias name PdoMode.
     * @return the value of PdoMode
     */
    public Integer getPdoMode() {
        return (Integer) getAttributeInternal(PDOMODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for PdoMode.
     * @param value value to set the PdoMode
     */
    public void setPdoMode(Integer value) {
        setAttributeInternal(PDOMODE, value);
    }

    /**
     * Gets the attribute value for PdoRmrk, using the alias name PdoRmrk.
     * @return the value of PdoRmrk
     */
    public String getPdoRmrk() {
        return (String) getAttributeInternal(PDORMRK);
    }

    /**
     * Sets <code>value</code> as the attribute value for PdoRmrk.
     * @param value value to set the PdoRmrk
     */
    public void setPdoRmrk(String value) {
        setAttributeInternal(PDORMRK, value);
    }

    /**
     * Gets the attribute value for RefPdoId, using the alias name RefPdoId.
     * @return the value of RefPdoId
     */
    public String getRefPdoId() {
        return (String) getAttributeInternal(REFPDOID);
    }

    /**
     * Sets <code>value</code> as the attribute value for RefPdoId.
     * @param value value to set the RefPdoId
     */
    public void setRefPdoId(String value) {
        setAttributeInternal(REFPDOID, value);
    }

    /**
     * Gets the attribute value for OutptItmAmtBs, using the alias name OutptItmAmtBs.
     * @return the value of OutptItmAmtBs
     */
    public Number getOutptItmAmtBs() {
        return (Number) getAttributeInternal(OUTPTITMAMTBS);
    }

    /**
     * Sets <code>value</code> as the attribute value for OutptItmAmtBs.
     * @param value value to set the OutptItmAmtBs
     */
    public void setOutptItmAmtBs(Number value) {
        setAttributeInternal(OUTPTITMAMTBS, value);
    }

    /**
     * Gets the attribute value for BalQty, using the alias name BalQty.
     * @return the value of BalQty
     */
    public Number getBalQty() {
        return (Number) getAttributeInternal(BALQTY);
    }

    /**
     * Sets <code>value</code> as the attribute value for BalQty.
     * @param value value to set the BalQty
     */
    public void setBalQty(Number value) {
        setAttributeInternal(BALQTY, value);
    }

    /**
     * Gets the attribute value for TmpBalQty, using the alias name TmpBalQty.
     * @return the value of TmpBalQty
     */
    public Number getTmpBalQty() {
        return (Number) getAttributeInternal(TMPBALQTY);
    }

    /**
     * Sets <code>value</code> as the attribute value for TmpBalQty.
     * @param value value to set the TmpBalQty
     */
    public void setTmpBalQty(Number value) {
        setAttributeInternal(TMPBALQTY, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getMnfPdoOpEO() {
        return (RowIterator) getAttributeInternal(MNFPDOOPEO);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getMnfPdoSRCEO() {
        return (RowIterator) getAttributeInternal(MNFPDOSRCEO);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getMnfPdoAttachEO() {
        return (RowIterator) getAttributeInternal(MNFPDOATTACHEO);
    }


    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getMnfPdoParamEO() {
        return (RowIterator) getAttributeInternal(MNFPDOPARAMEO);
    }


    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getMnfPdoOpItmEO() {
        return (RowIterator) getAttributeInternal(MNFPDOOPITMEO);
    }


    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getMnfPdoOpItmEO1() {
        return (RowIterator) getAttributeInternal(MNFPDOOPITMEO1);
    }


    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getMnfPdoQcParamEO() {
        return (RowIterator) getAttributeInternal(MNFPDOQCPARAMEO);
    }


    /**
     * @param cldId key constituent
     * @param slocId key constituent
     * @param hoOrgId key constituent
     * @param orgId key constituent
     * @param docId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(String cldId, Integer slocId, String hoOrgId, String orgId, String docId) {
        return new Key(new Object[] { cldId, slocId, hoOrgId, orgId, docId });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {


        if (EbizParams.GLBL_APP_CLD_ID() != null) {
            setCldId(EbizParams.GLBL_APP_CLD_ID());
        }
        if (EbizParams.GLBL_APP_SERV_LOC() != null) {
            setSlocId(EbizParams.GLBL_APP_SERV_LOC());
        }
        if (EbizParams.GLBL_HO_ORG_ID() != null) {
            setHoOrgId(EbizParams.GLBL_HO_ORG_ID());
        }
        if (EbizParams.GLBL_APP_USR_ORG() != null) {
            setOrgId(EbizParams.GLBL_APP_USR_ORG());
        }
        if (EbizParams.GLBL_APP_USR() != null) {
            setUsrIdCreate(EbizParams.GLBL_APP_USR());
        }
        setUsrIdCreateDt(new Timestamp(System.currentTimeMillis()));
        setPdoBasis(16);
        setPdoStat(100);
        setPdoMode(47);
        setPdoPriority(102);
        setPdoRevNo(new Number(0));
        setDocId(getDocIdFunc());
        ADFContext.getCurrent().getPageFlowScope().put("GLBL_DOC_TX_ID", getDocId());
        ADFContext.getCurrent().getPageFlowScope().put("JC_ALLOW", chkOrgPrf());
        setDocDt(new Timestamp(System.currentTimeMillis()));
        setFyId(getPdoFyId());
        setOutptItmQty(new Number(0));
        super.create(attributeList);
    }


    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        /*  try {
            super.lock();
        } catch (RowInconsistentException e) {
            refresh(REFRESH_WITH_DB_ONLY_IF_UNCHANGED | REFRESH_CONTAINEES);
            super.lock();
        } */

    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        if (getPdoId() != null) {
        } else {
            setPdoId(getPdoDispId());
        }
        if (operation == DML_UPDATE) {
            if (EbizParams.GLBL_APP_USR() != null) {
                setUsrIdMod(EbizParams.GLBL_APP_USR());
            }
            // setUsrIdMod(Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString()));
            setUsrIdModDt(new Timestamp(System.currentTimeMillis()));
        }
        super.doDML(operation, e);
    }

    /**
     *
     * Method to resolve page flow scope parameter.
     *
     * */

    public Object resolvEl(String data) {
        ADFContext adfCtx = ADFContext.getCurrent();
        ELContext elContext = adfCtx.getELContext();
        ValueExpression valueExp = adfCtx.getExpressionFactory().createValueExpression(elContext, data, Object.class);
        Object Message = valueExp.getValue(elContext);
        return Message;
    }


    /**
     *
     * STORED Function
     *
     *
     * **/

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                    // System.out.println(bindVars[z] + ""+ z);
                }
            }
            st.executeUpdate();
            // System.out.println("Updated !!");
            return st.getObject(1);
        } catch (SQLException e) {
            e.printStackTrace();
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    /**
     *
     *  To generate Doc Id
     *
     * **/

    public String getDocIdFunc() {
        //pageFlowScope.GLBL_APP_USR_ORG
        String docId = null;
        try {
            /*  String usrOrg = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
            Integer usrId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
            String cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
            Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString()); */
            String usrOrg = null, cldId = null;
            Integer usrId = 0, slocId = 0;

            if (EbizParams.GLBL_APP_USR() != null) {
                usrId = EbizParams.GLBL_APP_USR();
            }
            if (EbizParams.GLBL_APP_CLD_ID() != null) {
                cldId = EbizParams.GLBL_APP_CLD_ID();
            }
            if (EbizParams.GLBL_APP_SERV_LOC() != null) {
                slocId = EbizParams.GLBL_APP_SERV_LOC();
            }
            if (EbizParams.GLBL_APP_USR_ORG() != null) {
                usrOrg = EbizParams.GLBL_APP_USR_ORG();
            }


            docId = this.callStoredFunction(Types.VARCHAR, "app.get_txn_id(?,?,?,?,?,?)", new Object[] {
                                            cldId, slocId, usrOrg, usrId, 26001, 0
            }).toString();


        } catch (Exception e) {
            e.printStackTrace();
            //System.out.println("ERROR IN CALLING FUNCTION :" + e.getMessage());
        }
        System.out.println("===========" + docId);

        return docId;

    }

    /***
     *
     * TO genertae PDO ID for Production Order.
     *
     * **/

    public String getPdoDispId() {
        String pdoId = null;

        try {

            Integer fyId = getfyId(this.getCldId(), this.getOrgId());
            System.out.println("FY IS " + fyId);
            pdoId = callStoredFunction(Types.VARCHAR, "MNF.FN_MNF_GEN_DISP_DOC_ID(?,?,?,?,?,?,?,?,?)", new Object[] {
                                       this.getSlocId(), this.getCldId(), this.getOrgId(), 26001, getDocId(), 0,
                                       "MNF$PDO", fyId, 0
            }).toString();
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        System.out.println("---->> " + pdoId);
        return pdoId;
    }

    /**
     * Method used to call function to get the fy id.
     * @param CldId
     * @param OrgId
     * @return FY Id
     */
    private Integer getfyId(String cld_id, String org_id) {
        Object fyId = 0;
        try {
            fyId = (callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID(?,?,?,?)", new Object[] {
                                       cld_id, org_id, new Timestamp(System.currentTimeMillis()), "FY"
            }));

            if (fyId != null)
                return Integer.parseInt(fyId.toString());

        } catch (Exception e) {
            // TODO: Add catch code

            e.printStackTrace();
        }
        return -1;
    }

    /***
     *
     * TO genertae PDO ID for Production Order.
     *
     * **/
    public Integer getPdoFyId() {
        Integer pdoFyId = null;
        String cldId = null; //resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        if (EbizParams.GLBL_APP_CLD_ID() != null) {
            cldId = EbizParams.GLBL_APP_CLD_ID();
        }
        String usrOrg = null; //resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        if (EbizParams.GLBL_APP_USR_ORG() != null) {
            usrOrg = EbizParams.GLBL_APP_USR_ORG();
        }

        // System.out.println("cld is " + cldId +" usrorg "+ usrOrg);

        try {
            pdoFyId = Integer.parseInt(callStoredFunction(Types.VARCHAR, "APP.GET_ORG_FY_ID(?,?,?,?)", new Object[] {
                                                          cldId, usrOrg, new Timestamp(System.currentTimeMillis()), "FY"
            }).toString());
        } catch (NumberFormatException nfe) {
            // TODO: Add catch code
            nfe.printStackTrace();
        }
        //System.out.println(" financial id   " + pdoFyId );
        return pdoFyId;

    }


    public String getYearFyId() {
        String pdoFyId = null;
        String cldId = null; //resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        if (EbizParams.GLBL_APP_CLD_ID() != null) {
            cldId = EbizParams.GLBL_APP_CLD_ID();
        }
        String usrOrg = null; //resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        if (EbizParams.GLBL_APP_USR_ORG() != null) {
            usrOrg = EbizParams.GLBL_APP_USR_ORG();
        }

        try {
            pdoFyId = (String) callStoredFunction(Types.VARCHAR, "APP.PKG_APP.GET_FY_STAT_FOR_TXN(?,?,?)", new Object[] {
                                                  cldId, usrOrg, new Timestamp(System.currentTimeMillis())
            });
        } catch (NumberFormatException nfe) {
            // TODO: Add catch code
            nfe.printStackTrace();
        }
        //System.out.println(" financial id   " + pdoFyId );
        return pdoFyId;

    }


    /***
     *
     * TO genertae PDO ID for Production Order.
     *
     * **/

    public String getJcRcAllow() {
        String pdoId = null;
        try {
            pdoId = callStoredFunction(Types.VARCHAR, "fn_chk_jc_allowed (?,?,?,?)", new Object[] {
                                       this.getCldId(), this.getSlocId(), this.getOrgId(), 82
            }).toString();
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        return pdoId;
    }

    /**
     * Function to allow JC Generation from Production order or not
     *
     * **/
    public String chkOrgPrf() {
        String dummy = null;
        try {
            dummy = callStoredFunction(Types.VARCHAR, "fn_chk_jc_allowed(?,?,?,?)", new Object[] {
                                       this.getCldId(), this.getSlocId(), this.getOrgId(), 82
            }).toString();
        } catch (Exception ex) {
            throw new JboException(ex);
        }
        //   System.out.println("Value of Dummy is : " + dummy);
        return dummy;
    }

    /**
     * Showing an error message.
     *
     * */
    public void showFacesMsg(String msgHdr, String msgDtl, javax.faces.application.FacesMessage.Severity msgSeverity,
                             String msgMode) {

        FacesMessage msg = new FacesMessage(msgHdr);
        msg.setDetail(msgDtl);
        msg.setSeverity(msgSeverity);
        FacesContext.getCurrentInstance().addMessage(null, msg);

    }
}

