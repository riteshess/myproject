package mnfProductionOrderApp.model.services;

import adf.utils.ebiz.EbizParams;

import adf.utils.model.ADFModelUtils;

import appCostCenterSevice.model.service.AppCostCenterServiceAMImpl;

import java.io.File;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.SQLException;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;

import java.util.HashSet;
import java.util.List;
import java.util.Map;

import java.util.Set;

import java.util.StringTokenizer;

import javax.el.ELContext;
import javax.el.ValueExpression;

import javax.faces.application.FacesMessage;

import javax.faces.context.FacesContext;


import mnfProductionOrderApp.model.services.common.MNFProductionorderAppAM;

import mnfProductionOrderApp.model.views.LOVSupplyorderVOImpl;
import mnfProductionOrderApp.model.views.MnfPDOVOImpl;
import mnfProductionOrderApp.model.views.MnfPdoOpVOImpl;

import mnfProductionOrderApp.model.views.MnfPdoOverheadParamVOImpl;
import mnfProductionOrderApp.model.views.MnfPdoSRCVOImpl;

import mnfProductionOrderApp.model.views.PDOSearchVOImpl;

import oracle.adf.share.ADFContext;

import oracle.jbo.ApplicationModule;
import oracle.jbo.AttributeDef;
import oracle.jbo.domain.Number;
import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.client.Configuration;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;


import oracle.jbo.server.ViewObjectImpl;

import org.apache.myfaces.trinidad.context.RequestContext;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Sep 16 11:01:15 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MNFProductionorderAppAMImpl extends ApplicationModuleImpl implements MNFProductionorderAppAM {
    /**
     * This is the default constructor (do not remove).
     */
    public MNFProductionorderAppAMImpl() {
    }

    private static int NUMBER = Types.INTEGER;
    private static int NUMERIC = Types.NUMERIC;
    private static int VARCHAR = Types.VARCHAR;

    /**
     * Container's getter for MnfPdoAttachVO1.
     * @return MnfPdoAttachVO1
     */
    public ViewObjectImpl getMnfPdoAttachVO1() {
        return (ViewObjectImpl) findViewObject("MnfPdoAttachVO1");
    }

    /**
     * Container's getter for MnfPdoOpItmVO1.
     * @return MnfPdoOpItmVO1
     */
    public ViewObjectImpl getMnfPdoOpItmVO1() {
        return (ViewObjectImpl) findViewObject("MnfPdoOpItmVO1");
    }

    /**
     * Container's getter for MnfPdoOpVO1.
     * @return MnfPdoOpVO1
     */
    public MnfPdoOpVOImpl getMnfPdoOpVO1() {
        return (MnfPdoOpVOImpl) findViewObject("MnfPdoOpVO1");
    }

    /**
     * Container's getter for MnfPdoSRCVO1.
     * @return MnfPdoSRCVO1
     */
    public MnfPdoSRCVOImpl getMnfPdoSRCVO1() {
        return (MnfPdoSRCVOImpl) findViewObject("MnfPdoSRCVO1");
    }

    /**
     * Container's getter for MnfPDOVO1.
     * @return MnfPDOVO1
     */
    public MnfPDOVOImpl getMnfPDOVO1() {
        return (MnfPDOVOImpl) findViewObject("MnfPDOVO1");
    }

    /**
     * Container's getter for MnfPdoAttachVO2.
     * @return MnfPdoAttachVO2
     */
    public ViewObjectImpl getMnfPdoAttachVO2() {
        return (ViewObjectImpl) findViewObject("MnfPdoAttachVO2");
    }

    /**
     * Container's getter for MnfPdoOpVO2.
     * @return MnfPdoOpVO2
     */
    public MnfPdoOpVOImpl getMnfPdoOpVO2() {
        return (MnfPdoOpVOImpl) findViewObject("MnfPdoOpVO2");
    }

    /**
     * Container's getter for MnfPdoSRCVO2.
     * @return MnfPdoSRCVO2
     */
    public MnfPdoSRCVOImpl getMnfPdoSRCVO2() {
        return (MnfPdoSRCVOImpl) findViewObject("MnfPdoSRCVO2");
    }

    /**
     * Container's getter for MnfPdoOpItmVO2.
     * @return MnfPdoOpItmVO2
     */
    public ViewObjectImpl getMnfPdoOpItmVO2() {
        return (ViewObjectImpl) findViewObject("MnfPdoOpItmVO2");
    }

    /**
     * Container's getter for mnfPdoToMnfPdoAttachVL1.
     * @return mnfPdoToMnfPdoAttachVL1
     */
    public ViewLinkImpl getmnfPdoToMnfPdoAttachVL1() {
        return (ViewLinkImpl) findViewLink("mnfPdoToMnfPdoAttachVL1");
    }

    /**
     * Container's getter for mnfPdoToMnfPdoOPVL1.
     * @return mnfPdoToMnfPdoOPVL1
     */
    public ViewLinkImpl getmnfPdoToMnfPdoOPVL1() {
        return (ViewLinkImpl) findViewLink("mnfPdoToMnfPdoOPVL1");
    }

    /**
     * Container's getter for mnfPdoToMnfPdoSrcVL1.
     * @return mnfPdoToMnfPdoSrcVL1
     */
    public ViewLinkImpl getmnfPdoToMnfPdoSrcVL1() {
        return (ViewLinkImpl) findViewLink("mnfPdoToMnfPdoSrcVL1");
    }

    /**
     * Container's getter for mnfPdoOpToMnfPdoOpItmVL1.
     * @return mnfPdoOpToMnfPdoOpItmVL1
     */
    public ViewLinkImpl getmnfPdoOpToMnfPdoOpItmVL1() {
        return (ViewLinkImpl) findViewLink("mnfPdoOpToMnfPdoOpItmVL1");
    }

    /**
     * Method to resolve page flow scope parameter.
     * */
    public Object resolvEl(String data) {
        ADFContext adfCtx = ADFContext.getCurrent();
        ELContext elContext = adfCtx.getELContext();
        ValueExpression valueExp = adfCtx.getExpressionFactory().createValueExpression(elContext, data, Object.class);
        Object Message = valueExp.getValue(elContext);
        return Message;
    }

    /**
     * PageFlowScope.SlocId
     * @return Integer
     * */
    public Integer getSlocId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
    }

    /**
     * PageFlowScope.CldId
     * @return String
     * */
    public String getCldId() {
        return resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
    }

    /**
     * PageFlowScope.OrgId
     * @return String
     * */
    public String getOrgId() {
        return resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
    }

    /**
     * PageFlowScope.HoOrgId
     * @return String
     * */
    public String getHoOrgId() {
        return resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
    }

    /**
     * PageFlowScope.UsrId
     * @return Integer
     * */
    public Integer getUsrId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
    }

    /**
     * Method to Filter Table data
     * */
    public void setFilterData() {

        System.out.println("Value of slocId : " + this.getSlocId());
        System.out.println("Value of cldId : " + this.getCldId());
        System.out.println("Value of OrgId : " + this.getOrgId());
        System.out.println("Value of hoOrgId : " + this.getHoOrgId());
        System.out.println("Value of UserId : " + this.getUsrId());


        setParamForPDOSearchView(this.getCldId(), this.getSlocId(), this.getHoOrgId(), this.getOrgId());

        setParamForSearch(this.getCldId(), this.getSlocId(), this.getHoOrgId(), this.getOrgId());

        setParamForSearchSalesOrder(this.getCldId(), this.getSlocId(), this.getHoOrgId(), this.getOrgId());

        setParamForGenerateJCRC(this.getCldId(), this.getSlocId(), this.getHoOrgId(), this.getOrgId());

        setParamForQCParameter(this.getCldId(), this.getSlocId(), this.getHoOrgId(), this.getOrgId());

        setParamForQCParameterNme(this.getCldId(), this.getSlocId(), this.getHoOrgId(), this.getOrgId());

        setParamForCostingParameter(this.getCldId(), this.getSlocId(), this.getHoOrgId(), this.getOrgId());

        setParamForUOMDesc(this.getCldId(), this.getSlocId());

        setParamForParamId(this.getCldId(), this.getSlocId(), this.getHoOrgId(), this.getOrgId());

        setParamForParamSet(this.getCldId(), this.getSlocId(), this.getHoOrgId(), this.getOrgId());

        setOperationForParameter(this.getCldId(), this.getSlocId(), this.getHoOrgId(), this.getOrgId());

        setCostingParamForParamId(this.getCldId(), this.getSlocId(), this.getHoOrgId(), this.getOrgId());

        setCostingParamForParamSet(this.getCldId(), this.getSlocId(), this.getHoOrgId(), this.getOrgId());

        setdualOverheadParam(this.getCldId(), this.getSlocId(), this.getHoOrgId(), this.getOrgId());

        setdualCostingParam(this.getCldId(), this.getSlocId(), this.getHoOrgId(), this.getOrgId());
    }


    /**
     * To set parametere for dualOverheadParameter.
     *
     * **/
    private void setParamForQCParameter(String cld, Integer slc, String ho, String org) {
        //System.out.println("setdualOverheadParam : ");
        ViewObjectImpl Voimpl = this.getLOVQcParameterVO1();
        Voimpl.setNamedWhereClauseParam("BindCldId", cld);
        Voimpl.setNamedWhereClauseParam("BindSlocId", slc);
        Voimpl.setNamedWhereClauseParam("BindOrgId", org);
        Voimpl.executeQuery();
    }

    /**
     * To set parametere for dualOverheadParameter.
     *
     * **/
    private void setParamForQCParameterNme(String cld, Integer slc, String ho, String org) {
        //System.out.println("setdualOverheadParam : ");
        ViewObjectImpl Voimpl = this.getLOVQcParamNmeVO1();
        Voimpl.setNamedWhereClauseParam("BindCldId", cld);
        Voimpl.setNamedWhereClauseParam("BindSlocId", slc);
        Voimpl.setNamedWhereClauseParam("BindOrgId", org);
        Voimpl.executeQuery();
    }

    /**
     * To set parametere for dualOverheadParameter.
     *
     * **/
    private void setdualOverheadParam(String cld, Integer slc, String ho, String org) {
        //System.out.println("setdualOverheadParam : ");
        ViewObjectImpl Voimpl = this.getDualOverHeadParamVO1();
        Voimpl.setNamedWhereClauseParam("BindCldId", cld);
        Voimpl.setNamedWhereClauseParam("BindSlocId", slc);
        Voimpl.setNamedWhereClauseParam("BindHoOrgId", ho);
        Voimpl.setNamedWhereClauseParam("BindOrgId", org);
        // Voimpl.setNamedWhereClauseParam("BindDocId",null);
        Voimpl.executeQuery();
    }

    /**
     * To set parametere for dualCostingParameter.
     *
     * **/
    private void setdualCostingParam(String cld, Integer slc, String ho, String org) {
        // System.out.println("setCostingOverheadParam : ");
        ViewObjectImpl Voimpl = this.getDualCostingParamVO1();
        Voimpl.setNamedWhereClauseParam("BindCldId", cld);
        Voimpl.setNamedWhereClauseParam("BindSlocId", slc);
        Voimpl.setNamedWhereClauseParam("BindHoOrgId", ho);
        Voimpl.setNamedWhereClauseParam("BindOrgId", org);
        // Voimpl.setNamedWhereClauseParam("BindDocId",null);
        Voimpl.executeQuery();
    }

    /**
     * To set parametere for Operation in Costing/Overhead.
     * **/
    private void setOperationForParameter(String cld, Integer slc, String ho, String org) {
        ViewObjectImpl Voimpl = this.getLOVOpForParamVO1();
        Voimpl.setNamedWhereClauseParam("BindCldId", cld);
        Voimpl.setNamedWhereClauseParam("BindSlocId", slc);
        Voimpl.setNamedWhereClauseParam("BindHoOrgId", ho);
        Voimpl.setNamedWhereClauseParam("BindOrgId", org);
        Voimpl.setNamedWhereClauseParam("BindDocId", null);
        Voimpl.executeQuery();
    }

    /**
     * To set parametere for overheadParameterId.
     *
     * **/
    private void setParamForParamId(String cld, Integer slc, String ho, String org) {
        ViewObjectImpl Voimpl = this.getLOVParamIdVO1();
        Voimpl.setNamedWhereClauseParam("BindCldId", cld);
        Voimpl.setNamedWhereClauseParam("BindSlocId", slc);
        Voimpl.setNamedWhereClauseParam("BindHoOrgId", ho);
        Voimpl.setNamedWhereClauseParam("BindOrgId", org);
        Voimpl.setNamedWhereClauseParam("BindSetID", null);
        Voimpl.executeQuery();
    }

    /**
     * To set parametere for OverheadParameterSet.
     *
     * **/
    private void setParamForParamSet(String cld, Integer slc, String ho, String org) {
        ViewObjectImpl Voimpl = this.getLOVParamSetVO1();
        Voimpl.setNamedWhereClauseParam("BindCldId", cld);
        Voimpl.setNamedWhereClauseParam("BindHoOrgID", ho);
        //  Voimpl.setNamedWhereClauseParam("BindParamType", null);
        Voimpl.setNamedWhereClauseParam("BindSlocId", slc);
        Voimpl.executeQuery();
    }

    /**
     * To set parametere for CostingParameterId.
     * **/
    private void setCostingParamForParamId(String cld, Integer slc, String ho, String org) {
        ViewObjectImpl Voimpl = this.getLOVCostingParamIdVO1();
        Voimpl.setNamedWhereClauseParam("BindCldId", cld);
        Voimpl.setNamedWhereClauseParam("BindSlocId", slc);
        Voimpl.setNamedWhereClauseParam("BindHoOrgId", ho);
        Voimpl.setNamedWhereClauseParam("BindOrgId", org);
        Voimpl.setNamedWhereClauseParam("BindSetID", null);
        Voimpl.executeQuery();
    }

    /**
     * To set parametere for CostingParameterSet.
     * **/
    private void setCostingParamForParamSet(String cld, Integer slc, String ho, String org) {
        ViewObjectImpl Voimpl = this.getLOVCostingParamSetVO1();
        Voimpl.setNamedWhereClauseParam("BindCldId", cld);
        Voimpl.setNamedWhereClauseParam("BindHoOrgID", ho);
        //  Voimpl.setNamedWhereClauseParam("BindParamType", null);
        Voimpl.setNamedWhereClauseParam("BindSlocId", slc);
        Voimpl.executeQuery();
    }

    /**
     * To set parametere for ParameterUOMDesc.
     *
     * **/
    private void setParamForUOMDesc(String cld, Integer slc) {
        ViewObjectImpl Voimpl = this.getLOVUOMDescVO1();
        Voimpl.setNamedWhereClauseParam("BindCldId", cld);
        Voimpl.setNamedWhereClauseParam("BindSlocId", slc);
        Voimpl.executeQuery();
    }

    /**
     * To set parametere for CostingParameter.
     *
     * **/
    private void setParamForCostingParameter(String cld, Integer slc, String ho, String org) {

        ViewObjectImpl Voimpl = this.getLOVCostingParamVO1();
        Voimpl.setNamedWhereClauseParam("BindCldId", cld);
        Voimpl.setNamedWhereClauseParam("BindSlocId", slc);
        Voimpl.setNamedWhereClauseParam("BindHoOrgId", ho);
        Voimpl.setNamedWhereClauseParam("BindOrgId", org);
        Voimpl.setNamedWhereClauseParam("BindSetID", null);
        Voimpl.executeQuery();
    }

    /**
     * To set parametere for OutputProduct.
     *
     * **/
    private void setParamForOutputProduct(String cld, Integer slc, String ho, String org) {

        ViewObjectImpl Voimpl = this.getLOVProductVO1();
        Voimpl.setNamedWhereClauseParam("BindCldId", cld);
        Voimpl.setNamedWhereClauseParam("BindSlocId", slc);
        Voimpl.setNamedWhereClauseParam("BindHoOrgId", ho);
        Voimpl.setNamedWhereClauseParam("BindOrgId", org);
        Voimpl.executeQuery();
    }

    /**
     * To set parametere for OperationDescription.
     *
     * **/
    private void setLOVOpDescVOParam(String cld, Integer slc, String ho) {
        getLOVOpDescVO1().setNamedWhereClauseParam("BindCldId", cld);
        getLOVOpDescVO1().setNamedWhereClauseParam("BindSlcId", slc);
        getLOVOpDescVO1().setNamedWhereClauseParam("BindHoOrgId", ho);
        getLOVOpDescVO1().executeQuery();
    }

    /**
     * To set parametere for PDOSearchView
     *
     * **/
    private void setParamForPDOSearchView(String cld, Integer slc, String ho, String org) {
        getPDOSearchVO1().setNamedWhereClauseParam("BindCldId", cld);
        getPDOSearchVO1().setNamedWhereClauseParam("BindSlocId", slc);
        getPDOSearchVO1().setNamedWhereClauseParam("BindHoOrgId", -1);
        getPDOSearchVO1().setNamedWhereClauseParam("BindOrgId", org);
        getPDOSearchVO1().executeQuery();
    }

    /**
     * To set parametere for Search
     *
     * **/
    private void setParamForSearch(String cld, Integer slc, String ho, String org) {
        ViewObjectImpl Voimpl = this.getLOVSearchVO1();
        Voimpl.setNamedWhereClauseParam("BindCldId", cld);
        Voimpl.setNamedWhereClauseParam("BindSlocId", slc);
        Voimpl.setNamedWhereClauseParam("BindHoOrgId", ho);
        Voimpl.setNamedWhereClauseParam("BindOrgId", org);
        Voimpl.executeQuery();
        System.out.println("Data at " + Voimpl.getRowCount());
    }

    /**
     * To set parametere to search SalesOrder
     *
     * **/
    private void setParamForSearchSalesOrder(String cld, Integer slc, String ho, String org) {
        ViewObjectImpl Voimpl = this.getLOVSearchSalesOrderVO1();
        Voimpl.setNamedWhereClauseParam("BindCldId", cld);
        Voimpl.setNamedWhereClauseParam("BindSlocId", slc);
        Voimpl.setNamedWhereClauseParam("BindHoOrgId", ho);
        Voimpl.setNamedWhereClauseParam("BindOrgId", org);
        Voimpl.executeQuery();
    }

    /**
     * To set parametere to geenrate RT/JC
     *
     * **/
    private void setParamForGenerateJCRC(String cld, Integer slc, String ho, String org) {
        ViewObjectImpl Voimpl = this.getLOVGenerateJCRCVO1();
        Voimpl.setNamedWhereClauseParam("BindCldId", cld);
        Voimpl.setNamedWhereClauseParam("BindSlocId", slc);
        Voimpl.setNamedWhereClauseParam("BindHoOrgId", ho);
        Voimpl.setNamedWhereClauseParam("BindOrgId", org);
        Voimpl.executeQuery();
    }

    /**
     * To set PDO ID
     *
     * **/
    public void setpdoId() {
        //Row currentRow = this.getMnfPdoOpVO2().getCurrentRow();
        Row row = this.getMnfPDOVO1().getCurrentRow();
        String DocId = row.getAttribute("DocId").toString();
        ViewObjectImpl vimpl = this.getLOVJCRCOperationVO1();
        vimpl.setNamedWhereClauseParam("BindpdoDocId", DocId);
        vimpl.setNamedWhereClauseParam("BIndSlocId", this.getSlocId());
        vimpl.setNamedWhereClauseParam("BindCldId", this.getCldId());
        vimpl.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgId());
        vimpl.setNamedWhereClauseParam("BindOrgId", this.getOrgId());
        vimpl.executeQuery();
        Row currentRow = this.getLOVGenerateJCRCVO1().first();
        currentRow.setAttribute("pdoDocID", DocId);
    }

    /**
     * Method to check if JC for the operation have beem created
     * @return Y if Job card exists else N
     * **/
    public String ChkJCExists() {
        String dummy = null;
        Row row = this.getMnfPDOVO1().getCurrentRow();
        String DocId = row.getAttribute("DocId").toString();
        try {
            dummy = (String) callStoredFunction(Types.VARCHAR, "fn_mnf_chk_jc_exists(?,?,?,?,?)", new Object[] {
                                                this.getCldId(), this.getSlocId(), this.getOrgId(), 26001, DocId
            });
        } catch (Exception e) {
            e.printStackTrace();
        }
        return dummy;

    }

    /**
     * Method to check if JC generation is allowed or not from Production Order.
     *
     * **/
    public void chkGenJcID() {
        try {
            String chkgenJCId = callStoredFunction(Types.VARCHAR, "fn_chk_jc_allowed(?,?,?,?)", new Object[] {
                                                   this.getCldId(), this.getSlocId(), this.getOrgId(), 82
            }).toString();
            // Row currentRow = this.getLOVJCRCIdVO1().getCurrentRow();
            Row currentRow = this.getLOVGenerateJCRCVO1().getCurrentRow();
            currentRow.setAttribute("TransJCId", chkgenJCId);
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
    }


    /**
     * Method to generate Job Card and Route Card
     *
     * **/
    public oracle.jbo.domain.Number generateJobCard() {
        oracle.jbo.domain.Number dummy = new oracle.jbo.domain.Number(0);
        Row r = this.getMnfPDOVO1().getCurrentRow();
        String src_doc_id = r.getAttribute("DocId").toString();
        //Integer usr_id = Integer.parseInt(r.getAttribute("UsrIdCreate").toString());
        Integer usr_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        Timestamp usr_dt = (Timestamp) r.getAttribute("UsrIdCreateDt");
        Integer fy_id = (Integer) r.getAttribute("FyId");

        Row currentRow = this.getLOVGenerateJCRCVO1().getCurrentRow();

        Integer genId = (Integer) currentRow.getAttribute("generationId");

        if (genId == 105) {

            String opDocId = currentRow.getAttribute("OpDocId").toString();
            oracle.jbo.domain.Number opSrNo = (oracle.jbo.domain.Number) currentRow.getAttribute("OpnSrNo");

            String outputItm = currentRow.getAttribute("TransItm").toString();
            //   System.out.println("OpItm " + outputItm);
            //Integer outputItmQty = (Integer)currentRow.getAttribute("TransItmQty");
            oracle.jbo.domain.Number outputItmQty = (oracle.jbo.domain.Number) currentRow.getAttribute("TransItmQty");
            Integer OpLocType = (Integer) currentRow.getAttribute("TransLocTyp");
            String wc_id = currentRow.getAttribute("workCenter").toString();

            Object ws_id = currentRow.getAttribute("TransWsId");
            Object itm_qty = currentRow.getAttribute("TransItmProduceQty");
            String shiftId = currentRow.getAttribute("TransShiftId").toString();
            Timestamp strtDt = (Timestamp) currentRow.getAttribute("StartTime");
            Timestamp endDt = (Timestamp) currentRow.getAttribute("EndTime");
            String remark =
                currentRow.getAttribute("Remarks") == null ? null : currentRow.getAttribute("Remarks").toString();
            oracle.jbo.domain.Number empId = (oracle.jbo.domain.Number) currentRow.getAttribute("TransEmpId");

            Integer reqAreaId = Integer.parseInt(currentRow.getAttribute("TransReqAreaId").toString());
            String whId = currentRow.getAttribute("TransWhareHouseId").toString();
            dummy =
                jobcardGeneration(src_doc_id, usr_id, usr_dt, opDocId, opSrNo, outputItm, outputItmQty, fy_id, remark,
                                  shiftId, wc_id, ws_id, OpLocType, strtDt, endDt, empId, genId, reqAreaId, whId,
                                  itm_qty);

        } else if (genId == 106) {

            Integer OpLocType = 0;
            Object shiftId = null;
            String remark = null;
            // Integer opstatus = 0;
            Object empId = new oracle.jbo.domain.Number(0);
            Integer reqAreaId = 0;
            String whId = null;
            String outputItm = currentRow.getAttribute("TransItm").toString();
            oracle.jbo.domain.Number outputItmQty = (oracle.jbo.domain.Number) currentRow.getAttribute("TransItmQty");
            shiftId = currentRow.getAttribute("TransShiftId") == null ? null : currentRow.getAttribute("TransShiftId");
            Object strtDt = currentRow.getAttribute("StartTime");
            Object endDt = currentRow.getAttribute("EndTime");
            remark = currentRow.getAttribute("Remarks") == null ? null : currentRow.getAttribute("Remarks").toString();
            empId = currentRow.getAttribute("TransEmpId") == null ? null : currentRow.getAttribute("TransEmpId");
            reqAreaId = Integer.parseInt(currentRow.getAttribute("TransReqAreaId").toString());
            whId = currentRow.getAttribute("TransWhareHouseId").toString();
            Object itm_qty = currentRow.getAttribute("TransItmProduceQty");

            dummy =
                jobcardGeneration(src_doc_id, usr_id, usr_dt, null, null, outputItm, outputItmQty, fy_id, remark,
                                  shiftId, null, null, OpLocType, strtDt, endDt, empId, genId, reqAreaId, whId,
                                  itm_qty);
        }

        return dummy;

    }

    /**
     * Method for Job Card or Route Card Generation.
     *
     * **/
    private oracle.jbo.domain.Number jobcardGeneration(String src_doc_id, Integer usr_id, Timestamp usr_dt,
                                                       String opDocId, oracle.jbo.domain.Number opSrNo,
                                                       String outputItm, oracle.jbo.domain.Number outputItmQty,
                                                       Integer fy_id, String remark, Object shiftId, String wc_id,
                                                       Object ws_id, Integer OpLocType, Object strtDt, Object endDt,
                                                       Object empId, Integer genId, Integer reqAreaId, String whId,
                                                       Object itm_qty) {
        oracle.jbo.domain.Number dummy = new oracle.jbo.domain.Number(0);
        try {
            BigDecimal val =
                (BigDecimal) callStoredFunction(Types.NUMERIC,
                                                "fn_mnf_gen_jc_rc(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                this.getCldId(), this.getSlocId(), this.getHoOrgId(), this.getOrgId(),
                                                src_doc_id, 26001, new Timestamp(System.currentTimeMillis()), usr_id,
                                                new Timestamp(System.currentTimeMillis()), genId, opDocId, opSrNo,
                                                outputItm, outputItmQty, fy_id, remark, shiftId, wc_id, ws_id,
                                                OpLocType, strtDt, endDt, empId, reqAreaId, whId, itm_qty
            });
            if (val != null)
                dummy = new oracle.jbo.domain.Number(val);
        } catch (Exception e) {
            StringBuilder saveMsg = new StringBuilder("<html><body><p><b>Error While generation. </b></p>");
            saveMsg.append("</body></html>");
            showFacesMsg(saveMsg.toString(), null, FacesMessage.SEVERITY_ERROR, null);
        }
        return dummy;
    }

    /**
     * Method to reset Value on JC and RC
     *
     * **/
    public void resetValForJCRC() {
        /*  ViewObjectImpl Voimpl = this.getLOVGenerateJCRCVO1();
        Voimpl.setNamedWhereClauseParam("BindCldId", null);
        Voimpl.setNamedWhereClauseParam("BindSlocId", null);
        Voimpl.setNamedWhereClauseParam("BindHoOrgId", null);
        Voimpl.setNamedWhereClauseParam("BindOrgId", null);
        Voimpl.executeQuery(); */

        setParamForGenerateJCRC(this.getCldId(), this.getSlocId(), this.getHoOrgId(), this.getOrgId());

        Row row = this.getMnfPDOVO1().getCurrentRow();
        String DocId = row.getAttribute("DocId").toString();
        Row currentRow = this.getLOVGenerateJCRCVO1().first();
        currentRow.setAttribute("pdoDocID", DocId);

    }

    /**
     * Container's getter for LOVRouteOpVO1.
     * @return LOVRouteOpVO1
     */
    public ViewObjectImpl getLOVRouteOpVO1() {
        return (ViewObjectImpl) findViewObject("LOVRouteOpVO1");
    }

    /**
     * Method to create PDO Operation
     *
     * **/
    public void createPDOOperation(String Bomdocid, String PdoDocId, Number PdoOutputQty, String routeid) {
        // System.out.println(" Bomdocid " + PdoDocId + " PdoOutputQty " + PdoOutputQty + " routeid " + routeid + " ");
        Row currentRow = getMnfPDOVO1().getCurrentRow();
        oracle.jbo.domain.Timestamp docdt = (oracle.jbo.domain.Timestamp) currentRow.getAttribute("DocDt");
        PdoDocId = (String) currentRow.getAttribute("DocId");
        // Integer Nm = 0;
        try {
            callStoredFunction(Types.NUMERIC, "fn_mnf_ins_bom_to_pdo(?,?,?,?,?,?,?,?,?,?)", new Object[] {
                               this.getCldId(), this.getSlocId(), this.getHoOrgId(), this.getOrgId(), Bomdocid,
                               PdoDocId, docdt, PdoOutputQty, this.getUsrId(), new Timestamp(System.currentTimeMillis())
            });

        } catch (Exception e) {
            e.printStackTrace();

        }
        //getMnfPDOVO1().executeQuery();
        getMnfPdoOpVO2().executeQuery();
        getMnfPdoOpItmVO6().executeQuery();
        getMnfPdoOpItmVO5().executeQuery();
        getMnfPdoQcParamVO1().executeQuery();
        getMnfPdoParamVO1().executeQuery();
        getMnfPdoOverheadParamVO1().executeQuery();
        // if(resolvEl("#{pageFlowScope.CC_CHK}").toString().equals("Y") || resolvEl("#{pageFlowScope.CC_CHK}").toString() == "Y"){
        this.updateCostCenterAmt();
        // }
    }

    /**
     * Container's getter for LOVOpDescVO1.
     * @return LOVOpDescVO1
     */
    public ViewObjectImpl getLOVOpDescVO1() {
        return (ViewObjectImpl) findViewObject("LOVOpDescVO1");
    }


    /**
     * Container's getter for LOVOperationItmVO1.
     * @return LOVOperationItmVO1
     */
    public ViewObjectImpl getLOVOperationItmVO1() {
        return (ViewObjectImpl) findViewObject("LOVOperationItmVO1");
    }


    /**
     *
     *    STORED Function
     *
     * **/

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                    System.out.println(bindVars[z] + " index " + z);
                }
            }
            st.executeUpdate();

            return st.getObject(1);
        } catch (SQLException e) {
            e.printStackTrace();
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    /**
     * Container's getter for LOVSupplyorderVO1.
     * @return LOVSupplyorderVO1
     */
    public LOVSupplyorderVOImpl getLOVSupplyorderVO() {
        return (LOVSupplyorderVOImpl) findViewObject("LOVSupplyorderVO");
    }


    /**
     * To get the Output qty of an item
     *
     * **/
    public Number getOutPutQty() {
        RowSetIterator rowItr = getMnfPdoSRCVO2().createRowSetIterator(null);
        oracle.jbo.domain.Number it = new oracle.jbo.domain.Number(0);
        Row row = null;

        while (rowItr.hasNext()) {
            row = rowItr.next();
            oracle.jbo.domain.Number pp = (oracle.jbo.domain.Number) row.getAttribute("ItmQty");
            it = it.add(pp);
        }
        rowItr.closeRowSetIterator();
        // System.out.println("Total Output Qty is : " + it);

        getMnfPDOVO1().getCurrentRow().setAttribute("BalQty", it);
        getMnfPDOVO1().getCurrentRow().setAttribute("TmpBalQty", 0);


        return it;
    }

    /**
     * Container's getter for MnfPdoOpItmVO4.
     * @return MnfPdoOpItmVO4
     */
    public ViewObjectImpl getMnfPdoOpItmVO4() {
        return (ViewObjectImpl) findViewObject("MnfPdoOpItmVO4");
    }

    /**
     * Container's getter for mnfPdoOpToMnfPdoOpItmVL3.
     * @return mnfPdoOpToMnfPdoOpItmVL3
     */
    public ViewLinkImpl getmnfPdoOpToMnfPdoOpItmVL3() {
        return (ViewLinkImpl) findViewLink("mnfPdoOpToMnfPdoOpItmVL3");
    }


    public void setCreateBeforeTFParam() {

        getMnfPDOVO1().setNamedWhereClauseParam("BindCldId", null);
        getMnfPDOVO1().setNamedWhereClauseParam("BindSlocId", null);
        getMnfPDOVO1().setNamedWhereClauseParam("BindHoOrgId", null);
        getMnfPDOVO1().setNamedWhereClauseParam("BindOrgId", null);
        getMnfPDOVO1().setNamedWhereClauseParam("BindDocId", null);
        this.getMnfPDOVO1().executeQuery();
        getMnfPDOVO1().removeViewCriteria("MnfPDOVOCriteria");
        this.getMnfPDOVO1().executeQuery();
        this.getMnfPdoSRCVO2().executeQuery();

    }


    /**
     * To View Production order
     *
     * **/
    public void setCreateTFParam(Integer slocId, String cldId, String HoOrdId, String pdoId, Integer usrId,
                                 String OrgId, String docId) {
        System.out.println("setCreateTFParam :docId " + docId + " OrgId " + OrgId);

        ViewObjectImpl vo = getMnfPDOVO1();
        ViewCriteria vc = vo.getViewCriteria("MnfPDOVOCriteria");
        vo.applyViewCriteria(vc);

        vo.setNamedWhereClauseParam("BindCldId", cldId);
        vo.setNamedWhereClauseParam("BindSlocId", slocId);
        vo.setNamedWhereClauseParam("BindHoOrgId", HoOrdId);
        vo.setNamedWhereClauseParam("BindOrgId", OrgId);
        vo.setNamedWhereClauseParam("BindDocId", docId);
        vo.executeQuery();

        /*    Map pageFlowScope;
        pageFlowScope = RequestContext.getCurrentInstance().getPageFlowScope();
        pageFlowScope.put("GLBL_DOC_TX_ID", docId);getLOVOpDescVO1
        //  Map pageFlowScope = RequestContext.getCurrentInstance().getPageFlowScope();
        pageFlowScope.put("JC_ALLOW", chkOrgPrf()); */
        curDocId = docId;
        setlovSupplyVOParam();
        setParamForParamSet(cldId, slocId, HoOrdId, OrgId);
        setParamForParamId(cldId, slocId, HoOrdId, OrgId);
        setCostingParamForParamId(cldId, slocId, HoOrdId, OrgId);
        setCostingParamForParamSet(cldId, slocId, HoOrdId, OrgId);
        setLovProductVOParam(slocId, cldId, HoOrdId, OrgId);
        setLovSupplyOrderVO2Param(slocId, cldId, HoOrdId, OrgId);
        setLovSupplyOrderVOParam(slocId, cldId, HoOrdId, OrgId);
        setParamForOutputProduct(cldId, slocId, HoOrdId, OrgId);
        setLOVOpDescVOParam(cldId, slocId, HoOrdId);
        setLOVRequirementArea(cldId, slocId, HoOrdId);
        setdualOverheadParam1(cldId, slocId, HoOrdId, OrgId, docId);
        setdualCostingParam1(cldId, slocId, HoOrdId, OrgId, docId);
        setOperationForParameter1(cldId, slocId, HoOrdId, OrgId, docId);
        setlovrefrenceDetails();
        //  ADFContext.getCurrent().getPageFlowScope().put("CC_CHK", getCostCenterChk());
    }

    /**
     * Method to setcreateTFparameter
     *
     * **/
    public void setCreateTFParamAfterCreate(Integer slocId, String cldId, String HoOrdId, String pdoId, Integer usrId,
                                            String OrgId, String docId) {
        //System.out.println("DocId id : " + docId);

        setMnfPDOVOParam(slocId, cldId, HoOrdId, pdoId, OrgId, docId);
        setlovSupplyVOParam();
        setLovProductVOParam(slocId, cldId, HoOrdId, OrgId);
        setLovSupplyOrderVO2Param(slocId, cldId, HoOrdId, OrgId);
        setLovSupplyOrderVOParam(slocId, cldId, HoOrdId, OrgId);
        setParamForOutputProduct(cldId, slocId, HoOrdId, OrgId);
        setLOVOpDescVOParam(cldId, slocId, HoOrdId);
        setLOVRequirementArea(cldId, slocId, OrgId);
        setParamForParamId(cldId, slocId, HoOrdId, OrgId);
        setParamForParamSet(cldId, slocId, HoOrdId, OrgId);
        setCostingParamForParamId(cldId, slocId, HoOrdId, OrgId);
        setCostingParamForParamSet(cldId, slocId, HoOrdId, OrgId);
        setParamForCostingParameter(cldId, slocId, HoOrdId, OrgId);
        //setParamForGenerateJCRC(cldId, slocId, HoOrdId, OrgId);
        setOperationForParameter1(cldId, slocId, HoOrdId, OrgId, docId);
        setdualOverheadParam1(cldId, slocId, HoOrdId, OrgId, docId);
        setdualCostingParam1(cldId, slocId, HoOrdId, OrgId, docId);
        setParamForQCParameter(cldId, slocId, HoOrdId, OrgId);
        setParamForQCParameterNme(cldId, slocId, HoOrdId, OrgId);
        setlovrefrenceDetails();
        curDocId = docId;
    }

    private void setlovrefrenceDetails() {

        ViewObjectImpl itemdescvoimpl = getLOVRefrenceDetailsVO1();
        itemdescvoimpl.setNamedWhereClauseParam("BindCLdId", getCldId());
        itemdescvoimpl.setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        itemdescvoimpl.setNamedWhereClauseParam("BindOrgId", getOrgId());
        itemdescvoimpl.setNamedWhereClauseParam("BindSlocId", getSlocId());
        itemdescvoimpl.executeQuery();
    }

    /**
     * To set parametere for OverheadParameter.
     *
     * **/
    private void setdualOverheadParam1(String cld, Integer slc, String ho, String org, String docId) {

        ViewObjectImpl Voimpl = this.getDualOverHeadParamVO1();
        Voimpl.setNamedWhereClauseParam("BindCldId", cld);
        Voimpl.setNamedWhereClauseParam("BindSlocId", slc);
        Voimpl.setNamedWhereClauseParam("BindHoOrgId", ho);
        Voimpl.setNamedWhereClauseParam("BindOrgId", org);
        //Voimpl.setNamedWhereClauseParam("BindDocId",docId);
        Voimpl.executeQuery();
        // Row currentRow = this.getDualOverHeadParamVO1().getCurrent;
        Row currentRow = getDualOverHeadParamVO1().first();
        currentRow.setAttribute("DocId", docId);
        //getDualOverHeadParamVO1().executeQuery();
    }

    /**
     * To set parametere for dualCostingPArameter.
     *
     * **/
    private void setdualCostingParam1(String cld, Integer slc, String ho, String org, String docId) {

        ViewObjectImpl Voimpl = this.getDualCostingParamVO1();
        Voimpl.setNamedWhereClauseParam("BindCldId", cld);
        Voimpl.setNamedWhereClauseParam("BindSlocId", slc);
        Voimpl.setNamedWhereClauseParam("BindHoOrgId", ho);
        Voimpl.setNamedWhereClauseParam("BindOrgId", org);
        //Voimpl.setNamedWhereClauseParam("BindDocId",docId);
        Voimpl.executeQuery();
        // Row currentRow = this.getDualOverHeadParamVO1().getCurrent;
        Row currentRow = getDualCostingParamVO1().first();
        currentRow.setAttribute("DocId", docId);
        //getDualOverHeadParamVO1().executeQuery();
    }

    /**
     * To set parametere for Operation
     *
     * **/
    private void setOperationForParameter1(String cld, Integer slc, String ho, String org, String docId) {
        //System.out.println("OperationForPArameter");
        ViewObjectImpl Voimpl = this.getLOVOpForParamVO1();
        Voimpl.setNamedWhereClauseParam("BindCldId", cld);
        Voimpl.setNamedWhereClauseParam("BindSlocId", slc);
        Voimpl.setNamedWhereClauseParam("BindHoOrgId", ho);
        Voimpl.setNamedWhereClauseParam("BindOrgId", org);
        Voimpl.setNamedWhereClauseParam("BindDocId", docId);
        Voimpl.executeQuery();
    }

    /**
     * To set parametere for RequirementArea
     *
     * **/
    private void setLOVRequirementArea(String cldId, Integer slocId, String OrgId) {

        ViewObjectImpl Voimpl = this.getLOVReqAreaVO1();
        Voimpl.setNamedWhereClauseParam("BindCldId", cldId);
        Voimpl.setNamedWhereClauseParam("BindSlocId", slocId);
        Voimpl.setNamedWhereClauseParam("BindOrgId", OrgId);
        Voimpl.executeQuery();

    }

    /**
     * Method to set param for LOV Supply Order
     *
     * **/
    private void setLovSupplyOrderVOParam(Integer slocId, String cldId, String HoOrdId, String OrgId) {

        getLOVSupplyorderVO().setBindCldId(cldId);
        getLOVSupplyorderVO().setBindSlcId(slocId);
        getLOVSupplyorderVO().setBindHoOrgId(HoOrdId);
        getLOVSupplyorderVO().setBindOrg(OrgId);
        getLOVSupplyorderVO().executeQuery();
    }

    /**
     * Method to set param for LOV Supply Order
     *
     * **/
    private void setLovSupplyOrderVO2Param(Integer slocId, String cldId, String HoOrdId, String OrgId) {

        getLOVSupplyorderVO2().setBindCldId(cldId);
        getLOVSupplyorderVO2().setBindSlcId(slocId);
        getLOVSupplyorderVO2().setBindHoOrgId(HoOrdId);
        getLOVSupplyorderVO2().setBindOrg(OrgId);
        getLOVSupplyorderVO2().setBindItemId(null);
        getLOVSupplyorderVO2().executeQuery();
    }

    /**
     * Method to set param for MNF PDO VO
     *
     * **/
    private void setMnfPDOVOParam(Integer slocId, String cldId, String HoOrdId, String pdoId, String OrgId,
                                  String docId) {

        getMnfPDOVO1().setNamedWhereClauseParam("BindCldId", cldId);
        getMnfPDOVO1().setNamedWhereClauseParam("BindSlocId", slocId);
        getMnfPDOVO1().setNamedWhereClauseParam("BindHoOrgId", HoOrdId);
        getMnfPDOVO1().setNamedWhereClauseParam("BindOrgId", OrgId);
        getMnfPDOVO1().setNamedWhereClauseParam("BindDocId", docId);
        getMnfPDOVO1().executeQuery();

    }

    /**
     * Method to set param for LOV Product
     *
     * **/
    private void setLovProductVOParam(Integer slocId, String cldId, String HoOrdId, String OrgId) {

        getLOVProductVO1().setNamedWhereClauseParam("BindCldId", cldId);
        getLOVProductVO1().setNamedWhereClauseParam("BindHoOrgId", HoOrdId);
        getLOVProductVO1().setNamedWhereClauseParam("BindOrgId", OrgId);
        getLOVProductVO1().setNamedWhereClauseParam("BindSlocId", slocId);
        getLOVProductVO1().executeQuery();
    }

    /**
     * Container's getter for PDOSearchVO1.
     * @return PDOSearchVO1
     */
    public PDOSearchVOImpl getPDOSearchVO1() {
        return (PDOSearchVOImpl) findViewObject("PDOSearchVO1");
    }

    /**
     * Container's getter for LOVProductVO1.
     * @return LOVProductVO1
     */
    public ViewObjectImpl getLOVProductVO1() {
        return (ViewObjectImpl) findViewObject("LOVProductVO1");
    }

    /**
     * Container's getter for LOVBomVO1.
     * @return LOVBomVO1
     */
    public ViewObjectImpl getLOVBomVO1() {
        return (ViewObjectImpl) findViewObject("LOVBomVO1");
    }

    /**
     * Container's getter for LOVRTDescVO1.
     * @return LOVRTDescVO1
     */
    public ViewObjectImpl getLOVRTDescVO1() {
        return (ViewObjectImpl) findViewObject("LOVRTDescVO1");
    }

    /**
     * Container's getter for LOVSOCustVO1.
     * @return LOVSOCustVO1
     */
    public ViewObjectImpl getLOVSOCustVO1() {
        return (ViewObjectImpl) findViewObject("LOVSOCustVO1");
    }

    /**
     * Container's getter for LOVSalesOrderVO1.
     * @return LOVSalesOrderVO1
     */
    public ViewObjectImpl getLOVSalesOrderVO1() {
        return (ViewObjectImpl) findViewObject("LOVSalesOrderVO1");
    }


    /**
     *Creating row for MNF$PDO$SRC from Sales Order
     *
     * **/

    public void createPdoSRC() {

        RowSetIterator rowItr = this.getLOVSupplyorderVO2().createRowSetIterator(null);
        Row row = null;
        // System.out.println(" LOVSupplyorderVO " + rowItr.getRowCount());
        while (rowItr.hasNext()) {
            row = rowItr.next();
            System.out.println("TransSelectedValue   " + row.getAttribute("TransSelectedValue"));
            if ("Y".equals(row.getAttribute("TransSelectedValue"))) {
                // Integer.parseInt(row.getAttribute("PendingQty").toString()),

                createPdoSRCRow(row.getAttribute("ItmId").toString(), (Number) row.getAttribute("PendingQty"),
                                (Timestamp) row.getAttribute("DlvDt"), row.getAttribute("DocId").toString(),
                                Integer.parseInt(row.getAttribute("EoId").toString()),
                                Integer.parseInt(row.getAttribute("SrcType").toString()));
            }
        }

        rowItr.closeRowSetIterator();


    }

    /**
     *
     * Creating row for MNF$PDO$SRC.
     *
     * */

    private void createPdoSRCRow(String ItmId, Number PendingQty, oracle.jbo.domain.Timestamp DlvDt, String DocId,
                                 Integer EoId, Integer SrcType) {

        Row r = getMnfPdoSRCVO2().createRow();
        getMnfPdoSRCVO2().insertRow(r);
        r.setAttribute("SrcType", SrcType);
        r.setAttribute("ItmId", ItmId);
        r.setAttribute("ItmQty", PendingQty);
        r.setAttribute("DlvDt", DlvDt);
        r.setAttribute("SrcDocId", DocId);
        r.setAttribute("EoId", EoId);
        System.out.println(" " + SrcType + "" + ItmId + " " + DocId + " " + EoId);

    }

    /**
     *
     * Search Sales Order for an item.
     *
     * */

    public void getSearchSalesOrder(Integer custId, String salesOrder, String srcTyp) {


        if (getMnfPDOVO1().getCurrentRow().getAttribute("OutptItmId") != null) {

            LOVSupplyorderVOImpl impl = this.getLOVSupplyorderVO2();

            if (srcTyp != null) {
                List<Integer> srcList = getSourceList(srcTyp);

                if (srcList != null && srcList.size() > 0) {

                    String inClause = getInClauseWithParamNames(srcList);
                    //setting the where cluase to use the generated in clause
                    impl.setWhereClause(" SRC_TYPE in (" + inClause + ")");
                    //setting values for all bind variables one by one in the in clause
                    for (int i = 0; i < srcList.size(); i++) {
                        //defining the named bind variables programatically
                        impl.defineNamedWhereClauseParam("srcType" + (i + 1), null, null);
                        //setting the value for each named bind variable
                        impl.setNamedWhereClauseParam("srcType" + (i + 1), srcList.get(i));
                    }
                }
            }

            impl.setBindCustId(custId);
            impl.setBindSOId(salesOrder);
            impl.setBindItemId(getMnfPDOVO1().getCurrentRow().getAttribute("OutptItmId").toString());
            impl.setBindOrg(getOrgId());
            impl.setBindCldId(getCldId());
            impl.setBindSlcId(getSlocId());
            impl.setBindHoOrgId(getHoOrgId());
            impl.executeQuery();

        } else {
            showFacesMsg("Error while fetching Order ! Do select Output Item. ", null, FacesMessage.SEVERITY_ERROR,
                         null);
        }
    }

    public void setDynamicInClause() {


    }


    /**
     * Method to getSource List
     *
     * **/
    public List<Integer> getSourceList(String srcTyp) {

        StringTokenizer tk = new StringTokenizer(srcTyp, ",");
        List<Integer> srcList = new ArrayList<Integer>();

        while (tk.hasMoreTokens()) {
            String nextToken = tk.nextToken();
            System.out.println(" token " + nextToken);
            srcList.add(Integer.parseInt(nextToken));
        }
        return srcList;
    }

    private String getInClauseWithParamNames(List ids) {
        //logic to form the in clause with multiple bind variables
        StringBuffer inClause = new StringBuffer();
        for (int i = 1; i < ids.size() + 1; i++) {
            inClause.append(":srcType" + (i));
            if (i < ids.size()) {
                inClause.append(",");
            }
        }
        return inClause.toString();
    }

    /**
     * Container's getter for LOVSearchVO1.
     * @return LOVSearchVO1
     */
    public ViewObjectImpl getLOVSearchVO1() {
        return (ViewObjectImpl) findViewObject("LOVSearchVO1");
    }

    /**
     * To set parametere to get Sales Order
     *
     * **/
    public void setlovSupplyVOParam() {

        LOVSupplyorderVOImpl impl = this.getLOVSupplyorderVO2();
        impl.setBindCldId(null);
        impl.setBindSlcId(null);
        impl.setBindHoOrgId(null);
        impl.executeQuery();
    }

    /**
     * Method to get Search Results
     *
     * **/
    public void getSearchResults() {
        Row r = getLOVSearchVO1().first();

        getPDOSearchVO1().setNamedWhereClauseParam("BindPdoId", r.getAttribute("TransPdoTxnId"));
        getPDOSearchVO1().setNamedWhereClauseParam("BindCreateDt", r.getAttribute("TransCreateFromDt"));
        getPDOSearchVO1().setNamedWhereClauseParam("BindCreateToDt", r.getAttribute("TransCreateToDt"));
        getPDOSearchVO1().setNamedWhereClauseParam("BindRtId", r.getAttribute("TransRouteId"));
        getPDOSearchVO1().setNamedWhereClauseParam("BindItmId", r.getAttribute("TransOutputItmId"));
        getPDOSearchVO1().setNamedWhereClauseParam("BindBomId", r.getAttribute("TransBOMId"));
        getPDOSearchVO1().setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        getPDOSearchVO1().executeQuery();
        System.out.println("--->> " + getPDOSearchVO1().getRowCount());
    }

    /**
     * To reset parametere for Search
     *
     * **/
    public void resetButtonAction() {

        getLOVSearchVO1().executeQuery();

        ViewObjectImpl wsVO = this.getPDOSearchVO1();
        wsVO.setNamedWhereClauseParam("BindPdoId", null);
        wsVO.setNamedWhereClauseParam("BindCreateDt", null);
        wsVO.setNamedWhereClauseParam("BindCreateToDt", null);
        wsVO.setNamedWhereClauseParam("BindRtId", null);
        wsVO.setNamedWhereClauseParam("BindItmId", null);
        wsVO.setNamedWhereClauseParam("BindBomId", null);
        wsVO.setNamedWhereClauseParam("BindHoOrgId", -1);
        wsVO.executeQuery();
    }

    /**
     * Update status of WF Mode
     * */
    public void updateWfStatus() {

        String wf_mode = resolvEl("#{pageFlowScope.PDO_WF_STATUS}").toString();
        //wf_mode : V - revert, I - Initialize, F - Forwarded, A - Approved, R - Reject
        Row r = getMnfPDOVO1().getCurrentRow();
        if ("I".equals(wf_mode)) {

            r.setAttribute("PdoMode", 47);

        } else if ("F".equals(wf_mode)) {

            r.setAttribute("PdoMode", 46);

        } else if ("A".equals(wf_mode)) {

            r.setAttribute("PdoMode", 43);

        } else if ("R".equals(wf_mode)) {

            r.setAttribute("PdoMode", 45);

        }

        getDBTransaction().commit();
    }

    /**
     * Calling WF Function
     * */
    public String callWfFunctions() {

        String wfId = getWfId();
        Object level;
        try {
            if (this.getMnfPDOVO1().getCurrentRow().getAttribute("DocId") != null) {
                level = callStoredFunction(NUMBER, "APP.WF_GET_USR_LEVEL(?,?,?,?,?,?,?)", new Object[] {
                                           this.getSlocId(), this.getCldId(), this.getOrgId(), this.getUsrId(), wfId,
                                           26001, 0
                });
                callStoredFunction(NUMBER, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {

                    this.getSlocId(), this.getCldId(), this.getOrgId(), 26001, 0, wfId,
                    this.getMnfPDOVO1().getCurrentRow().getAttribute("DocId"), this.getUsrId(), this.getUsrId(), level,
                    level, "I", "A", 0
                });
            }
        } catch (Exception nfe) {

            showFacesMsg(resolvElDCMsg("#{bundle['MSG.1113']}").toString(), null, FacesMessage.SEVERITY_ERROR, null);

            nfe.printStackTrace();
        }

        return null;
    }

    /**
     * Method used to get the Work flow id for a document.
     *
     * **/

    public String getWfId() {
        try {
            return callStoredFunction(VARCHAR, "APP.WF_GET_ID(?,?,?,?,?)", new Object[] {
                                      this.getSlocId(), this.getCldId(), this.getOrgId(), 26001, 0
        }).toString();


        } catch (Exception e) {
            e.printStackTrace();

            StringBuilder saveMsg = new StringBuilder("<html><body><p><b>Error in getting Work Flow Details. </b></p>");

            saveMsg.append("</body></html>");

            showFacesMsg(saveMsg.toString(), null, FacesMessage.SEVERITY_ERROR, null);

        }
        return "0";
    }

    /**
     * Method created to call DB fucntion to get the user at which the document is pending
     *
     * **/

    public Integer getDocUsrFromWF() {
        Object fnRetVal;
        try {
            if (this.getMnfPDOVO1().getCurrentRow().getAttribute("DocId") != null) {

                fnRetVal = callStoredFunction(NUMBER, "APP.WF_GET_CUR_USR(?,?,?,?,?,?)", new Object[] {
                                              this.getSlocId(), this.getCldId(), this.getOrgId(), 26001,
                                              this.getMnfPDOVO1().getCurrentRow().getAttribute("DocId"), 0
                });

                if (fnRetVal != null) {
                    return Integer.parseInt(fnRetVal.toString());
                }
            }
        } catch (Exception e) {

            e.printStackTrace();

        }
        showFacesMsg("Error while fetching user work flow details", null, FacesMessage.SEVERITY_ERROR, null);
        return 0;
    }

    /**
     * Get User Name for Given UserId
     *
     * */
    public String getUserName() {
        String uname = "";
        ViewObjectImpl impl = this.getLOVUserVO1();
        impl.setNamedWhereClauseParam("BindUserId", this.getUsrId());
        impl.setNamedWhereClauseParam("BindSlocId", this.getSlocId());
        impl.executeQuery();
        Row[] allRowsInRange = impl.getAllRowsInRange();
        if (allRowsInRange.length > 0) {
            Object a = allRowsInRange[0].getAttribute("UsrName");
            String s = (a == null ? null : a.toString());
            uname = s;
        }
        return uname;
    }

    /**
     * Get User Name for Given UserId
     *
     * */
    public String getUserNameforDoc(Integer u_Id, Integer slc_id) {
        String uname = "";
        ViewObjectImpl impl = this.getLOVUserVO1();
        impl.setNamedWhereClauseParam("BindUserId", u_Id);
        impl.setNamedWhereClauseParam("BindSlocId", this.getSlocId());
        impl.executeQuery();
        Row[] allRowsInRange = impl.getAllRowsInRange();
        if (allRowsInRange.length > 0) {
            Object a = allRowsInRange[0].getAttribute("UsrName");
            String s = (a == null ? null : a.toString());
            uname = s;
        }
        return uname;
    }


    /**
     * Container's getter for LOVUserVO1.
     * @return LOVUserVO1
     */
    public ViewObjectImpl getLOVUserVO1() {
        return (ViewObjectImpl) findViewObject("LOVUserVO1");
    }

    /**
     * Showing an error message.
     *
     * */
    public void showFacesMsg(String msgHdr, String msgDtl, javax.faces.application.FacesMessage.Severity msgSeverity,
                             String msgMode) {

        FacesMessage msg = new FacesMessage(msgHdr);
        msg.setDetail(msgDtl);
        msg.setSeverity(msgSeverity);
        FacesContext.getCurrentInstance().addMessage(null, msg);

    }

    /**
     * ResolveEdic Message Method
     *
     * */
    public Object resolvElDCMsg(String data) {
        ADFContext adfCtx = ADFContext.getCurrent();
        ELContext elContext = adfCtx.getELContext();
        ValueExpression valueExp = adfCtx.getExpressionFactory().createValueExpression(elContext, data, Object.class);
        return valueExp.getValue(elContext);
    }

    /**
     * Creating a row in MNF$PDO$SRC
     *
     * */
    public void createPdoSRCManual() {
        String ItmId = getMnfPDOVO1().getCurrentRow().getAttribute("OutptItmId").toString();
        // String ItmId = getMnfPDOVO1().getCurrentRow().getAttribute("PdoPriority").toString();
        RowSetIterator rowItr = getMnfPdoSRCVO2().createRowSetIterator(null);
        Row row = null;
        int cnt = 0;
        // String srcID = "NE";
        while (rowItr.hasNext()) {
            row = rowItr.next();
            try {
                if (("NE").equals(row.getAttribute("SrcDocId").toString()) &&
                    row.getAttribute("ItmId").toString().equals("ItmId")) {
                    cnt++;
                }
            } catch (java.lang.NullPointerException nullex) {
                cnt = 0;
            } catch (oracle.jbo.TooManyObjectsException e) {
                StringBuilder saveMsg =
                    new StringBuilder("<html><body><p><b>Manually Entry for Source Documentation is already Exists ! </b></p>");
                saveMsg.append("</body></html>");
                showFacesMsg(saveMsg.toString(), null, FacesMessage.SEVERITY_ERROR, null);
            } catch (Exception ee) {
                ee.printStackTrace();
            }

        }
        if (cnt == 0) {
            Row r = getMnfPdoSRCVO2().getCurrentRow();
            //currntRow.remove();;
            //getMnfPdoSRCVO2().executeQuery();
            //Row r = getMnfPdoSRCVO2().createRow();
            System.out.println("My itm id is : " + ItmId);
            r.setAttribute("ItmId", ItmId);
            r.setAttribute("SrcType", 94);
            r.setAttribute("SoPriority", (Integer) getMnfPDOVO1().getCurrentRow().getAttribute("PdoPriority"));
            r.setAttribute("SrcDocId", "NE");
            //getMnfPdoSRCVO2().insertRow(r);
            getMnfPdoSRCVO2().setCurrentRow(r);
            //getMnfPdoSRCVO2().executeQuery();
        } else if (cnt > 0) {
            StringBuilder saveMsg =
                new StringBuilder("<html><body><p><b>Manually Entry for Source Documentation is already Exists ! </b></p>");
            saveMsg.append("</body></html>");
            showFacesMsg(saveMsg.toString(), null, FacesMessage.SEVERITY_ERROR, null);
        }
    }

    /**
     * Container's getter for LOVSearchSalesOrderVO1.
     * @return LOVSearchSalesOrderVO1
     */
    public ViewObjectImpl getLOVSearchSalesOrderVO1() {
        return (ViewObjectImpl) findViewObject("LOVSearchSalesOrderVO1");
    }

    /**
     * Container's getter for MnfPdoParamVO1.
     * @return MnfPdoParamVO1
     */
    public ViewObjectImpl getMnfPdoParamVO1() {
        return (ViewObjectImpl) findViewObject("MnfPdoParamVO1");
    }

    /**
     * Container's getter for mnfPdoToMnfPdoParamVL1.
     * @return mnfPdoToMnfPdoParamVL1
     */
    public ViewLinkImpl getmnfPdoToMnfPdoParamVL1() {
        return (ViewLinkImpl) findViewLink("mnfPdoToMnfPdoParamVL1");
    }

    /**
     * Container's getter for LOVCostingParamVO1.
     * @return LOVCostingParamVO1
     */
    public ViewObjectImpl getLOVCostingParamVO1() {
        return (ViewObjectImpl) findViewObject("LOVCostingParamVO1");
    }

    /**
     * Container's getter for LOVRefrenceDetailsVO1.
     * @return LOVRefrenceDetailsVO1
     */
    public ViewObjectImpl getLOVRefrenceDetailsVO1() {
        return (ViewObjectImpl) findViewObject("LOVRefrenceDetailsVO1");
    }

    /**
     *
     * Function to get Previous Information of Production Order
     *
     * **/
    public void getpreviousProductionOrderInf(String newDocPdoId, String oldDocPdoId) {
        String oldDocId = null;
        System.out.println(" inside of pre func      " + oldDocPdoId);
        Row currentRow = this.getMnfPDOVO1().getCurrentRow();
        if (oldDocPdoId == null) {
            oldDocPdoId = (String) currentRow.getAttribute("RefPdoId");
        }
        String dummy = null;
        if (oldDocPdoId != null) {
            ViewObjectImpl itemdescvoimpl = getLOVRefrenceDetailsVO1();
            itemdescvoimpl.setNamedWhereClauseParam("BindCLdId", getCldId());
            itemdescvoimpl.setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
            itemdescvoimpl.setNamedWhereClauseParam("BindOrgId", getOrgId());
            itemdescvoimpl.setNamedWhereClauseParam("BindSlocId", getSlocId());
            itemdescvoimpl.executeQuery();
            Row[] wcRow = itemdescvoimpl.getFilteredRows("DocId", oldDocPdoId);
            if (wcRow.length > 0) {
                if (wcRow[0].getAttribute("DocId") != null) {
                    try {
                        oldDocId = wcRow[0].getAttribute("DocId").toString();
                        currentRow.setAttribute("BomId", wcRow[0].getAttribute("BomId").toString());
                        currentRow.setAttribute("RtId", wcRow[0].getAttribute("RtId").toString());
                    } catch (Exception sqle) {
                        sqle.printStackTrace();
                    }
                }
            }
        }
        newDocPdoId = currentRow.getAttribute("DocId").toString();
        System.out.println(newDocPdoId + "       " + oldDocId);
        try {
            dummy = callStoredFunction(Types.VARCHAR, "FN_MNF_COPY_PRF(?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                       this.getCldId(), this.getSlocId(), this.getHoOrgId(), this.getOrgId(),
                                       this.getUsrId(), "MNF.MNF$PDO", null, null, newDocPdoId, oldDocId, null
            }).toString();
            this.getMnfPdoAttachVO2().executeQuery();
            this.getMnfPdoOpVO2().executeQuery();
            this.getMnfPdoSRCVO2().executeQuery();
            this.getMnfPdoParamVO1().executeQuery();
            this.getMnfPdoOpItmVO1().executeQuery();
            this.getMnfPdoOpItmVO6().executeQuery();
            this.getMnfPdoOpItmVO5().executeQuery();
            this.getMnfPdoOverheadParamVO1().executeQuery();
            this.getMnfPdoQcParamVO1().executeQuery();


        } catch (Exception ex) {
            throw new JboException(ex);
        }

    }

    /**
     * Creating Row in MNF$PDO$ATTACH
     *
     * */
    public String createAttchmntRow(String contentTyp, String fileNm, String extn) {

        String path = getUpFilePath(this.getSlocId());
        String fileId = getUpFileId(this.getCldId(), this.getSlocId(), this.getHoOrgId(), this.getOrgId(), null);
        Row r = this.getMnfPdoAttachVO2().createRow();
        r.setAttribute("AttchFlExtn", contentTyp);
        r.setAttribute("DispFlNm", fileNm);
        r.setAttribute("AttchFlNm", fileId);
        r.setAttribute("AttchFlPath", path + fileId + extn);
        this.getMnfPdoAttachVO2().insertRow(r);
        return path + fileId;
    }

    /**
     * Method to get system generated file no
     *
     ***/
    public String getUpFileId(String cldId, Integer slcId, String hoOrgId, String orgId, String tabNm) {

        Object fnRetVal;

        try {
            fnRetVal = callStoredFunction(VARCHAR, "APP.FN_APP_GEN_FILE_ATTCH_ID(?,?,?,?,?)", new Object[] {
                                          slcId, cldId, hoOrgId, orgId, "MNF$PDO$ATTCH"
            });

            if (fnRetVal != null) {

                if (fnRetVal.equals(-1)) {
                    showFacesMsg("Error while fetching file Id details", null, FacesMessage.SEVERITY_ERROR, null);
                }

                return fnRetVal.toString();
            }

        } catch (Exception e) {

            e.printStackTrace();

        }
        showFacesMsg("Error while fetching file Id details", null, FacesMessage.SEVERITY_ERROR, null);

        return "0";
    }

    /**
     * Method to get default file location
     * **/
    public String getUpFilePath(Integer slcId) {
        Object fnRetVal;

        try {
            fnRetVal = callStoredFunction(VARCHAR, "APP.FN_GET_APP_DOC_ATTACH_PATH(?)", new Object[] { slcId });

            if (fnRetVal != null) {

                if (fnRetVal.equals(-1)) {
                    showFacesMsg("Error while fetching file path details", null, FacesMessage.SEVERITY_ERROR, null);
                }

                return fnRetVal.toString();
            }

        } catch (Exception e) {

            e.printStackTrace();

        }
        showFacesMsg("Error while fetching file path details", null, FacesMessage.SEVERITY_ERROR, null);

        return null;
    }

    /**
     * Method to revise a PDO Document.
     *
     * */
    //    public void revisedPdoDoc(String pdoDispDocID) {
    public void revisedPdoDoc() {

        updateStatus();
        System.out.println("Inside of Revision Function !!");
        String newDocId = null;
        Row curRow = this.getMnfPDOVO1().getCurrentRow();
        //  curRow.setAttribute("PdoMode", new Integer(44));
        String oldDocId = curRow.getAttribute("DocId").toString();
        Integer pdoBasis = (Integer) curRow.getAttribute("PdoBasis");
        String pdoId = curRow.getAttribute("PdoId").toString();
        String outputItmId = curRow.getAttribute("OutptItmId").toString();
        String BomId = curRow.getAttribute("BomId").toString();
        String RtId = curRow.getAttribute("RtId").toString();
        oracle.jbo.domain.Number revNo = (oracle.jbo.domain.Number) curRow.getAttribute("PdoRevNo");
        String ItmBatchNo =
            curRow.getAttribute("ItmBatchNo") == null ? " " : curRow.getAttribute("ItmBatchNo").toString();
        Integer pdoPriority = (Integer) curRow.getAttribute("PdoPriority");
        String remarks = curRow.getAttribute("PdoRmrk") == null ? " " : curRow.getAttribute("PdoRmrk").toString();
        String refPdoId = curRow.getAttribute("RefPdoId") == null ? " " : curRow.getAttribute("RefPdoId").toString();
        Number qty = (Number) curRow.getAttribute("OutptItmQty");
        Timestamp startTime = (Timestamp) curRow.getAttribute("PlnStrtTm");
        Timestamp endTime = (Timestamp) curRow.getAttribute("PlnEndTm");
        // System.out.println("Current ROW ----22 !!");

        Row create = this.getMnfPDOVO1().createRow();
        // System.out.println("FROM EO impl TO AMIML !!");
        this.getMnfPDOVO1().insertRow(create);
        create.setAttribute("CldId", getCldId());
        create.setAttribute("SlocId", getSlocId());
        create.setAttribute("HoOrgId", getHoOrgId());
        create.setAttribute("OrgId", getOrgId());
        //  newDocId = create.getAttribute("DocId").toString(); ;
        //create.setAttribute("DocDt", curRow.getAttribute("DocDt"));
        create.setAttribute("PdoBasis", pdoBasis);
        create.setAttribute("PdoId", pdoId);
        //create.setAttribute("FyId", curRow.getAttribute("FyId"));
        //create.setAttribute("PdoStat", curRow.getAttribute("PdoStat"));
        create.setAttribute("PdoStat", new Integer(100));
        create.setAttribute("OutptItmId", outputItmId);
        //create.setAttribute("OutptItmQty", curRow.getAttribute("OutptItmQty"));
        create.setAttribute("BomId", BomId);
        create.setAttribute("RtId", RtId);
        create.setAttribute("PlnStrtTm", startTime);
        create.setAttribute("PlnEndTm", endTime);
        create.setAttribute("PdoRevNo", revNo.add(1));
        create.setAttribute("PdoRevDt", new oracle.jbo.domain.Timestamp(System.currentTimeMillis()));
        create.setAttribute("ItmBatchNo", ItmBatchNo);
        create.setAttribute("PdoPriority", pdoPriority);
        create.setAttribute("PdoMode", new Integer(47));
        create.setAttribute("PdoRmrk", remarks);
        create.setAttribute("RefPdoId", refPdoId);

        //this.getMnfPDOVO1().setCurrentRow(create);
        newDocId = this.getMnfPDOVO1().getCurrentRow().getAttribute("DocId").toString();
        //System.out.println("STEP --->>> 5");
        this.getMnfPDOVO1().getCurrentRow().setAttribute("OutptItmQty", qty);

        this.getMnfPDOVO1().getCurrentRow().setAttribute("BalQty", qty);
        this.getMnfPDOVO1().getCurrentRow().setAttribute("TmpBalQty", qty);
        this.getMnfPDOVO1().setBindDocId(newDocId);

        String dummy = null;

        try {
            dummy = callStoredFunction(Types.VARCHAR, "FN_MNF_COPY_PRF(?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                       this.getCldId(), this.getSlocId(), this.getHoOrgId(), this.getOrgId(),
                                       this.getUsrId(), "MNF.MNF$PDO", null, null, newDocId, oldDocId, null
            }).toString();
        } catch (Exception ex) {
            ex.printStackTrace();
        }

        //this.getDBTransaction().postChanges();
        //System.out.println("dummy value is " + dummy);
        // this.getMnfPDOVO1().executeQuery();
        this.getMnfPdoAttachVO2().executeQuery();
        this.getMnfPdoOpVO2().executeQuery();
        this.getMnfPdoSRCVO2().executeQuery();
        this.getMnfPdoParamVO1().executeQuery();
        this.getMnfPdoOpItmVO1().executeQuery();
        this.getMnfPdoOpItmVO6().executeQuery();
        this.getMnfPdoQcParamVO1().executeQuery();
        this.getMnfPdoOverheadParamVO1().executeQuery();
        // System.out.println("STEP --COMPLETEEEEEEEEEE------6");

    }


    public void enableReservedMode() {
        if (getReleaseLevel() != ApplicationModule.RELEASE_LEVEL_RESERVED) {
            // System.out.println("Setting release level as RELEASE_LEVEL_RESERVED.....");

            setReleaseLevel(ApplicationModule.RELEASE_LEVEL_RESERVED);
        }
    }

    public void disableReservedMode() {
        if (getReleaseLevel() != ApplicationModule.RELEASE_LEVEL_MANAGED) {
            //            System.out.println("Setting release level as RELEASE_LEVEL_MANAGED.....");

            setReleaseLevel(ApplicationModule.RELEASE_LEVEL_MANAGED);
        }
    }

    /**
     *
     *  To generate Doc Id
     *
     * **/

    public String getDocIdFunc() {
        //pageFlowScope.GLBL_APP_USR_ORG
        String docId = null;
        try {
            String usrOrg = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
            Integer usrId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
            docId = this.callStoredFunction(Types.VARCHAR, "app.get_txn_id(?,?,?,?,?,?)", new Object[] {
                                            this.getCldId(), this.getSlocId(), usrOrg, usrId, 26001, 0
            }).toString();


        } catch (Exception e) {
            e.printStackTrace();

        }


        return docId;

    }

    /**
     * Container's getter for LOVSearchPdoBasisVO1.
     * @return LOVSearchPdoBasisVO1
     */
    public ViewObjectImpl getLOVSearchPdoBasisVO1() {
        return (ViewObjectImpl) findViewObject("LOVSearchPdoBasisVO1");
    }

    /**
     * Container's getter for LOVGenerateJCRCVO1.
     * @return LOVGenerateJCRCVO1
     */
    public ViewObjectImpl getLOVGenerateJCRCVO1() {
        return (ViewObjectImpl) findViewObject("LOVGenerateJCRCVO1");
    }

    /**
     * Container's getter for LOVJCRCOperationVO1.
     * @return LOVJCRCOperationVO1
     */
    public ViewObjectImpl getLOVJCRCOperationVO1() {
        return (ViewObjectImpl) findViewObject("LOVJCRCOperationVO1");
    }

    /**
     * Container's getter for MnfPdoOpItmVO6.
     * @return MnfPdoOpItmVO6
     */
    public ViewObjectImpl getMnfPdoOpItmVO6() {
        return (ViewObjectImpl) findViewObject("MnfPdoOpItmVO6");
    }

    /**
     * Container's getter for mnfPdoToMnfPdoOpItmVL1.
     * @return mnfPdoToMnfPdoOpItmVL1
     */
    public ViewLinkImpl getmnfPdoToMnfPdoOpItmVL1() {
        return (ViewLinkImpl) findViewLink("mnfPdoToMnfPdoOpItmVL1");
    }

    /**
     *
     * Check For Duplicacy
     *
     * **/
    public String chkDuplicate(String tab, String val) {
        if (tab.equals("PDO_PARAM") || tab == "PDO_PARAM") {
            return duplicateParamID(val);
        }

        return "NONE";
    }

    /**
     *
     * To Check Duplicate Parameter
     *
     * **/
    private String duplicateParamID(String paramVal) {
        String paraId = null;

        if (paramVal != null) {
            ViewObjectImpl paramDescvoimpl = this.getLOVCostingParamVO1();
            paramDescvoimpl.setNamedWhereClauseParam("BindCldId", getCldId());
            paramDescvoimpl.setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
            paramDescvoimpl.setNamedWhereClauseParam("BindSlocId", getSlocId());
            paramDescvoimpl.setNamedWhereClauseParam("BindOrgId", getOrgId());
            paramDescvoimpl.setNamedWhereClauseParam("BindSetID",
                                                     this.getMnfPdoParamVO1().getCurrentRow().getAttribute("ParamSetId"));
            paramDescvoimpl.executeQuery();
            // Row [] wcItm  =itemdescvoimpl.getFilteredRows("ItmId", getItmId());
            Row[] paramDesc = paramDescvoimpl.getFilteredRows("ParamDesc", paramVal);
            if (paramDesc.length > 0) {
                if (paramDesc[0].getAttribute("ParamId") != null)
                    return paramDesc[0].getAttribute("ParamId").toString();
            }
        }

        return paraId;
    }

    /**
     * To check an operation Target Date
     *
     * **/
    public int chkOperationTargetDate() {
        // System.out.println("To chk Operation Target Date!");
        RowSetIterator rowItr = getMnfPdoOpVO2().createRowSetIterator(null);
        Row row = null;
        int cont = 0;
        oracle.jbo.domain.Timestamp opTargtDt = new oracle.jbo.domain.Timestamp();
        while (rowItr.hasNext()) {
            row = rowItr.next();
            opTargtDt = (oracle.jbo.domain.Timestamp) row.getAttribute("OpTrgtDt");
            if (opTargtDt == null) {
                showFacesMsg("Operation Target Date is NULL in Operation Serial No." + row.getAttribute("OpSrNo"), null,
                             FacesMessage.SEVERITY_ERROR, null);
                cont++;
                // return "N";
            } else {

            }
        }
        return cont;

    }

    /**
     * Container's getter for MnfPdoOpItmVO5.
     * @return MnfPdoOpItmVO5
     */
    public ViewObjectImpl getMnfPdoOpItmVO5() {
        return (ViewObjectImpl) findViewObject("MnfPdoOpItmVO5");
    }

    /**
     * Container's getter for mnfPdoToMnfPdoOpItmVL2.
     * @return mnfPdoToMnfPdoOpItmVL2
     */
    public ViewLinkImpl getmnfPdoToMnfPdoOpItmVL2() {
        return (ViewLinkImpl) findViewLink("mnfPdoToMnfPdoOpItmVL2");
    }

    /**
     *
     * Function to allow JC Generation from Production order or not
     *
     * **/
    public String chkOrgPrf() {

        Object dummy = null;
        try {

            dummy = callStoredFunction(Types.VARCHAR, "fn_chk_jc_allowed(?,?,?,?)", new Object[] {
                                       this.getCldId(), this.getSlocId(), this.getOrgId(), 82
            });

            if (dummy != null)
                return dummy.toString();
        } catch (Exception ex) {
            ex.printStackTrace();
            throw new JboException(ex);
        }
        // System.out.println("Value of Dummy is : " + dummy);

        return "";
    }

    /**
     * Container's getter for LOVJCRCIdVO1.
     * @return LOVJCRCIdVO1
     */
    public ViewObjectImpl getLOVJCRCIdVO1() {
        return (ViewObjectImpl) findViewObject("LOVJCRCIdVO1");
    }

    /**
     *
     * To update a status of PDO from Approved to Revised....
     *
     * **/
    private void updateStatus() {
        Row currentRow = this.getMnfPDOVO1().getCurrentRow();
        currentRow.setAttribute("PdoMode", 44);
        // this.getDBTransaction().commit();
    }


    /**
     * Container's getter for LOVPdoMode1.
     * @return LOVPdoMode1
     */
    public ViewObjectImpl getLOVPdoMode() {
        return (ViewObjectImpl) findViewObject("LOVPdoMode");
    }

    /**
     * Container's getter for LOVUOMDescVO1.
     * @return LOVUOMDescVO1
     */
    public ViewObjectImpl getLOVUOMDescVO1() {
        return (ViewObjectImpl) findViewObject("LOVUOMDescVO1");
    }


    /**
     * Method to check whether work center for an Operation is active or not
     *
     * **/
    public String operationActiveCheck(String cld_id, String ho_org_id, Integer slc_id) {

        setLOVOpWorkCenterParam(cld_id, ho_org_id, slc_id);

        String errmsg = "0";
        Set<String> activeOperationSet = new HashSet<String>();

        RowSetIterator opRit = getLOVOpWorkCenterVO().createRowSetIterator(null);
        Row opR = null;

        //System.out.println("opRit " + opRit.getRowCount());
        //Get all active operation in a set
        while (opRit.hasNext()) {
            opR = opRit.next();
            activeOperationSet.add(opR.getAttribute("WcId").toString());

        }
        opRit.closeRowSetIterator();

        //check if work center of operation is present in  activeOperationSet
        //if not then update the err message

        opRit = getMnfPdoOpVO2().createRowSetIterator(null);
        Object wcId = null;

        //System.out.println("opRit " + opRit.getRowCount());

        while (opRit.hasNext()) {
            opR = opRit.next();

            wcId = opR.getAttribute("WcId");

            if (wcId != null) {

                if (!activeOperationSet.contains(wcId)) {
                    errmsg = "Work Center " + wcId.toString() + " is not active. ";
                }
            }
        }
        opRit.closeRowSetIterator();

        // System.out.println("errmsg " + errmsg);
        return errmsg;
    }

    /**
     * To set parametere fro  OperationWorkCenter
     *
     * **/
    public void setLOVOpWorkCenterParam(String cld_id, String ho_org_id, Integer slc_id) {
        getLOVOpWorkCenterVO().setNamedWhereClauseParam("BindCldId", cld_id);
        getLOVOpWorkCenterVO().setNamedWhereClauseParam("BindHoOrgId", ho_org_id);
        getLOVOpWorkCenterVO().setNamedWhereClauseParam("BindSlocId", slc_id);
        getLOVOpWorkCenterVO().executeQuery();
    }

    /**
     * Container's getter for LOVOpWorkCenterVO1.
     * @return LOVOpWorkCenterVO1
     */
    public ViewObjectImpl getLOVOpWorkCenterVO() {
        return (ViewObjectImpl) findViewObject("LOVOpWorkCenterVO");
    }

    /**
     * Container's getter for LOVSupplyorderVO1.
     * @return LOVSupplyorderVO1
     */
    public LOVSupplyorderVOImpl getLOVSupplyorderVO2() {
        return (LOVSupplyorderVOImpl) findViewObject("LOVSupplyorderVO2");
    }


    /**
     * Method to get pending Qty for Item in JC/RC
     *
     * **/
    public Number getPendingItmForJC(String cld_id, Integer slc_id, String org_id, Number src_doc_typ,
                                     String src_doc_id, String op_doc_id, Number op_sr_no, String output_itm,
                                     Integer jc_rc) {
        Object fn_ret_val = null;
        Row r = getLOVGenerateJCRCVO1().first();

        if (jc_rc == 105) {
            src_doc_typ = new Number(26003);
            //  System.out.println(cld_id + slc_id + org_id + src_doc_typ + src_doc_id + r.getAttribute("TransItm") + (Number)r.getAttribute("TransItmQty") + r.getAttribute("OpDocId") + r.getAttribute("OpnSrNo"));
            fn_ret_val = callStoredFunction(Types.NUMERIC, "FN_MNF_GET_DOC_ITM_PEND_QTY(?,?,?,?,?,?,?,?,?)", new Object[] {
                                            cld_id, slc_id, org_id, src_doc_typ, src_doc_id, r.getAttribute("OpDocId"),
                                            r.getAttribute("OpnSrNo"), r.getAttribute("TransItm"),
                                            (Number) r.getAttribute("TransItmQty")
            });
        } else if (jc_rc == 106) {
            src_doc_typ = new Number(26004);
            Number qty = (Number) this.getMnfPDOVO1().getCurrentRow().getAttribute("OutptItmQty");
            //System.out.println(cld_id + slc_id + org_id + src_doc_typ + src_doc_id + output_itm + qty);
            fn_ret_val = callStoredFunction(Types.NUMERIC, "FN_MNF_GET_DOC_ITM_PEND_QTY(?,?,?,?,?,?,?,?,?)", new Object[] {
                                            cld_id, slc_id, org_id, src_doc_typ, src_doc_id, null, null, output_itm, qty
            });
        }

        if (fn_ret_val != null) {
            try {
                System.out.println("Pending Qty " + new Number(fn_ret_val));
                r.setAttribute("TransPendingItmQty", new Number(fn_ret_val));
                return new Number(fn_ret_val);
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

        return null;
    }

    /**
     * Container's getter for LOVReqAreaVO1.
     * @return LOVReqAreaVO1
     */
    public ViewObjectImpl getLOVReqAreaVO1() {
        return (ViewObjectImpl) findViewObject("LOVReqAreaVO1");
    }


    /**
     * Container's getter for MnfPdoOverheadParamVO1.
     * @return MnfPdoOverheadParamVO1
     */
    public MnfPdoOverheadParamVOImpl getMnfPdoOverheadParamVO1() {
        return (MnfPdoOverheadParamVOImpl) findViewObject("MnfPdoOverheadParamVO1");
    }

    /**
     * Container's getter for mnfPdoToMnfOverheadParamVL1.
     * @return mnfPdoToMnfOverheadParamVL1
     */
    public ViewLinkImpl getmnfPdoToMnfOverheadParamVL1() {
        return (ViewLinkImpl) findViewLink("mnfPdoToMnfOverheadParamVL1");
    }


    /**
     * Container's getter for MnfPdoOpItmVO3.
     * @return MnfPdoOpItmVO3
     */
    public ViewObjectImpl getMnfPdoOpItmVO3() {
        return (ViewObjectImpl) findViewObject("MnfPdoOpItmVO3");
    }

    /**
     * Container's getter for mnfPdoOpToMnfPdoOpItmVL2.
     * @return mnfPdoOpToMnfPdoOpItmVL2
     */
    public ViewLinkImpl getmnfPdoOpToMnfPdoOpItmVL2() {
        return (ViewLinkImpl) findViewLink("mnfPdoOpToMnfPdoOpItmVL2");
    }

    /**
     * Container's getter for LOVParamIdVO1.
     * @return LOVParamIdVO1
     */
    public ViewObjectImpl getLOVParamIdVO1() {
        return (ViewObjectImpl) findViewObject("LOVParamIdVO1");
    }

    /**
     * Container's getter for LOVParamSetVO1.
     * @return LOVParamSetVO1
     */
    public ViewObjectImpl getLOVParamSetVO1() {
        return (ViewObjectImpl) findViewObject("LOVParamSetVO1");
    }

    /**
     * To check Duplicate costing PArameter
     *
     */
    public boolean duplicateParam(String paramName) {
        RowSetIterator rSetIter = getMnfPdoParamVO1().createRowSetIterator(null);
        Integer countVal = 0;
        if (paramName != null) {
            while (rSetIter.hasNext()) {
                Row r = rSetIter.next();
                if (paramName.equals(r.getAttribute("TransParamNme"))) {
                    //System.out.println("1 param Found : " + paramName.equals(r.getAttribute("TransParamNme")));
                    countVal = countVal + 1;
                }
            }
            rSetIter.closeRowSetIterator();

            Row currentRow = getMnfPdoParamVO1().getCurrentRow();

            if (paramName.equals(currentRow.getAttribute("TransParamNme"))) {
                //System.out.println("2 param Id Found : " + paramName.equals(currentRow.getAttribute("TransParamNme")));
                countVal = countVal - 1;
            }
        }

        return countVal == 1 ? true : false;
    }

    /**
     * To check duplicate Overhead Parameter.
     *
     * **/
    public boolean duplicateOverheadParam(String paramName) {
        RowSetIterator rSetIter = getMnfPdoOverheadParamVO1().createRowSetIterator(null);
        Integer countVal = 0;
        if (paramName != null) {
            while (rSetIter.hasNext()) {
                Row r = rSetIter.next();
                if (paramName.equals(r.getAttribute("TransParam"))) {
                    // System.out.println("1 param Found : " + paramName.equals(r.getAttribute("TransParam")));
                    countVal = countVal + 1;
                }
            }
            rSetIter.closeRowSetIterator();
            Row currentRow = getMnfPdoOverheadParamVO1().getCurrentRow();

            if (paramName.equals(currentRow.getAttribute("TransParam"))) {
                // System.out.println("2 param Id Found : " + paramName.equals(currentRow.getAttribute("TransParam")));
                countVal = countVal - 1;
            }
        }

        return countVal == 1 ? true : false;
    }

    /**
     * Container's getter for LOVOpForParamVO1.
     * @return LOVOpForParamVO1
     */
    public ViewObjectImpl getLOVOpForParamVO1() {
        return (ViewObjectImpl) findViewObject("LOVOpForParamVO1");
    }

    /**
     * Container's getter for DualOverHeadParamVO1.
     * @return DualOverHeadParamVO1
     */
    public ViewObjectImpl getDualOverHeadParamVO1() {
        return (ViewObjectImpl) findViewObject("DualOverHeadParamVO1");
    }

    /**
     * To Add Overhead Parameter t PDO..
     *
     * **/
    public void attachOverhead(String operation) {

        Row r = getDualOverHeadParamVO1().getCurrentRow();

        String parm_Id = r.getAttribute("ParameterId") != null ? r.getAttribute("ParameterId").toString() : "";
        String setparam = r.getAttribute("SetId") != null ? r.getAttribute("SetId").toString() : "";
        Number parmValue = (Number) r.getAttribute("Value");
        // String routeId = getMnfBomOp().getCurrentRow().getAttribute("RtId").toString();
        String doc_Id = r.getAttribute("DocId") != null ? r.getAttribute("DocId").toString() : "";
        Number opSr = new Number(1);

        //        removeAllParm(param);
        String newDlimitedDocId = (r.getAttribute("opId") == null ? "" : r.getAttribute("opId").toString());
        // System.out.println("Total Operation " +newDlimitedDocId);
        StringTokenizer newValueTokens = new StringTokenizer(newDlimitedDocId, ",");

        if (doc_Id != null && parm_Id != null) {
            while (newValueTokens.hasMoreTokens()) {
                String currentToken = (newValueTokens.nextToken().toString());
                // System.out.println("Op ID 0" + currentToken);
                opSr = getOprSrFromCurrOpr(currentToken);
                // System.out.println("Op " + opSr);
                removeAllParm(doc_Id, parm_Id, currentToken);
                // System.out.println("Inserting");
                insertOprForParam(currentToken, parm_Id, setparam, parmValue, opSr, 39);
                // System.out.println("added");
            }
        }
        // resetOverhead();
        setdualOverheadParam1(getCldId(), getSlocId(), getHoOrgId(), getOrgId(), doc_Id);
    }

    String curDocId = null;

    /**
     * To Add Costing Parameter to PDO.
     *
     * **/
    public void attachCosting(String operation) {

        Row r = getDualCostingParamVO1().getCurrentRow();

        String parm_Id = r.getAttribute("ParameterId") != null ? r.getAttribute("ParameterId").toString() : "";
        String setparam = r.getAttribute("SetId") != null ? r.getAttribute("SetId").toString() : "";
        Number parmValue = (Number) r.getAttribute("Value");
        // String routeId = getMnfBomOp().getCurrentRow().getAttribute("RtId").toString();
        String doc_Id = r.getAttribute("DocId") != null ? r.getAttribute("DocId").toString() : "";
        Number opSr = new Number(1);

        //        removeAllParm(param);
        String newDlimitedDocId = (r.getAttribute("opId") == null ? "" : r.getAttribute("opId").toString());
        //  System.out.println(newDlimitedDocId);
        StringTokenizer newValueTokens = new StringTokenizer(newDlimitedDocId, ",");

        if (doc_Id != null && parm_Id != null) {
            while (newValueTokens.hasMoreTokens()) {
                String currentToken = (newValueTokens.nextToken().toString());
                opSr = getOprSrFromCurrOpr(currentToken);
                removeAllCostingParm(doc_Id, parm_Id, currentToken);
                insertOprForCostingParam(currentToken, parm_Id, setparam, parmValue, opSr, 37);
            }
        }
        //resetCosting();
        setdualCostingParam1(getCldId(), getSlocId(), getHoOrgId(), getOrgId(), doc_Id);
    }

    /**
     * To reset dualCostingParameterVO.
     *
     * **/
    public void resetCosting() {
        // getDualOverheadVO().executeQuery();
        Row r = getDualCostingParamVO1().getCurrentRow();
        r.setAttribute("SetId", null);
        r.setAttribute("ParameterId", null);
        r.setAttribute("opId", null);
        r.setAttribute("Value", null);
        getDualCostingParamVO1().executeQuery();

    }

    /**
     * Insert an operation to Overhead Parameter.
     *
     * **/
    public void insertOprForParam(String oprID, String param, String setparam, Number paramVal, Number opSr,
                                  Integer paramType) {

        System.out.println(oprID + "  " + curDocId + "  " + param);
        //opSr = getOprSrFromCurrOpr(oprID);
        Row docIdRow = getMnfPdoOverheadParamVO1().createRow();
        docIdRow.setAttribute("CldId", this.getCldId());
        docIdRow.setAttribute("SlocId", this.getSlocId());
        docIdRow.setAttribute("HoOrgId", this.getHoOrgId());
        docIdRow.setAttribute("OrgId", this.getOrgId());
        docIdRow.setAttribute("DocId", curDocId);
        docIdRow.setAttribute("OpId", oprID);
        docIdRow.setAttribute("OpSrNo", getOprSrFromCurrOpr(oprID));
        docIdRow.setAttribute("ParamId", param);
        docIdRow.setAttribute("ParamSetId", setparam);
        docIdRow.setAttribute("ParamType", paramType);
        docIdRow.setAttribute("ParamVal", paramVal);

        getMnfPdoOverheadParamVO1().insertRow(docIdRow);
        getMnfPdoOverheadParamVO1().setCurrentRow(docIdRow);

    }

    /**
     * Insert an Operation to costing parameter.
     *
     * **/
    public void insertOprForCostingParam(String oprID, String param, String setparam, Number paramVal, Number opSr,
                                         Integer paramType) {

        System.out.println(oprID + "  " + curDocId + "  " + param);
        Row docIdRow = getMnfPdoParamVO1().createRow();
        docIdRow.setAttribute("CldId", this.getCldId());
        docIdRow.setAttribute("SlocId", this.getSlocId());
        docIdRow.setAttribute("HoOrgId", this.getHoOrgId());
        docIdRow.setAttribute("OrgId", this.getOrgId());
        docIdRow.setAttribute("DocId", curDocId);
        docIdRow.setAttribute("OpId", oprID);
        docIdRow.setAttribute("OpSrNo", getOprSrFromCurrOpr(oprID));
        docIdRow.setAttribute("ParamId", param);
        docIdRow.setAttribute("ParamSetId", setparam);
        docIdRow.setAttribute("ParamType", paramType);
        docIdRow.setAttribute("ParamVal", paramVal);

        getMnfPdoParamVO1().insertRow(docIdRow);
        getMnfPdoParamVO1().setCurrentRow(docIdRow);

    }

    /**
     * To reset dualOverheadParameterVO.
     *
     * **/
    public void resetOverhead() {
        // getDualOverheadVO().executeQuery();
        Row r = getDualOverHeadParamVO1().getCurrentRow();
        r.setAttribute("ParameterId", null);
        r.setAttribute("SetId", null);
        r.setAttribute("opId", null);
        r.setAttribute("Value", null);
        getLOVOpForParamVO1().executeQuery();
        getDualOverHeadParamVO1().executeQuery();

    }

    /**
     * To remove existing costing parameter
     * against an costing parameter.
     *
     * **/
    public void removeAllCostingParm(String doc_id, String parmId, String oprId) {
        //Assuming not many child rows. Can have better logic if child rows are large
        if (doc_id != null && parmId != null && oprId != null) {
            // System.out.println("1 ");
            RowSetIterator rtr = getMnfPdoParamVO1().createRowSetIterator(null);
            Row cr = null;
            while (rtr.hasNext()) {
                //  System.out.println("2 ");
                cr = rtr.next();
                if (cr.getAttribute("DocId").toString().equalsIgnoreCase(doc_id) &&
                    cr.getAttribute("ParamId").toString().equalsIgnoreCase(parmId) &&
                    cr.getAttribute("OpId").toString().equalsIgnoreCase(oprId)) {
                    cr.remove();
                    // System.out.println("3 ");
                }
            }

            rtr.closeRowSetIterator();

        }

    }

    /**
     * To remove existing overhead parameter
     * against a overhead parameter.
     *
     * **/
    public void removeAllParm(String doc_id, String parmId, String oprId) {
        //Assuming not many child rows. Can have better logic if child rows are large
        if (doc_id != null && parmId != null && oprId != null) {
            //System.out.println("1 ");
            RowSetIterator rtr = getMnfPdoOverheadParamVO1().createRowSetIterator(null);
            Row cr = null;
            while (rtr.hasNext()) {
                //  System.out.println("2 ");
                cr = rtr.next();
                if (cr.getAttribute("DocId").toString().equalsIgnoreCase(doc_id) &&
                    cr.getAttribute("ParamId").toString().equalsIgnoreCase(parmId) &&
                    cr.getAttribute("OpId").toString().equalsIgnoreCase(oprId)) {
                    cr.remove();
                    // System.out.println("3 ");
                }
            }

            rtr.closeRowSetIterator();

        }

    }

    /**
     * To get serail no of an operation.
     *@return number
     *
     * **/
    public Number getOprSrFromCurrOpr(String oprId) {

        ViewObjectImpl Voimpl = this.getLOVOpForParamVO1();
        Voimpl.setNamedWhereClauseParam("BindCldId", this.getCldId());
        Voimpl.setNamedWhereClauseParam("BindSlocId", this.getSlocId());
        Voimpl.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgId());
        Voimpl.setNamedWhereClauseParam("BindOrgId", this.getOrgId());
        Voimpl.setNamedWhereClauseParam("BindDocId", curDocId);
        Voimpl.executeQuery();
        Row[] a = getLOVOpForParamVO1().getFilteredRows("OpId", oprId);
        Row r = null;
        if (a.length > 0) {
            System.out.println("SRNO " + (Number) a[0].getAttribute("OpSrNo"));
            return (Number) a[0].getAttribute("OpSrNo");
        }
        return new Number(1);
    }

    /**
     * Container's getter for DualCostingParamVO1.
     * @return DualCostingParamVO1
     */
    public ViewObjectImpl getDualCostingParamVO1() {
        return (ViewObjectImpl) findViewObject("DualCostingParamVO1");
    }

    /**
     * Container's getter for LOVCostingParamIdVO1.
     * @return LOVCostingParamIdVO1
     */
    public ViewObjectImpl getLOVCostingParamIdVO1() {
        return (ViewObjectImpl) findViewObject("LOVCostingParamIdVO1");
    }

    /**
     * Container's getter for LOVCostingParamSetVO1.
     * @return LOVCostingParamSetVO1
     */
    public ViewObjectImpl getLOVCostingParamSetVO1() {
        return (ViewObjectImpl) findViewObject("LOVCostingParamSetVO1");
    }

    /**
     * To check duplicate Overhead Parameter.
     *
     * **/
    public boolean duplicateSalesOrder(String paramName) {
        RowSetIterator rSetIter = getMnfPdoSRCVO2().createRowSetIterator(null);
        Integer countVal = 0;
        if (paramName != null) {
            while (rSetIter.hasNext()) {
                Row r = rSetIter.next();
                if (paramName.equals(r.getAttribute("TransSO"))) {
                    //  System.out.println("1 param Found : " + paramName.equals(r.getAttribute("TransSO")));
                    countVal = countVal + 1;
                }
            }
            rSetIter.closeRowSetIterator();
            Row currentRow = getMnfPdoSRCVO2().getCurrentRow();

            if (paramName.equals(currentRow.getAttribute("TransSO"))) {
                // System.out.println("2 param Id Found : " + paramName.equals(currentRow.getAttribute("TransSO")));
                countVal = countVal - 1;
            }
        }

        return countVal == 1 ? true : false;
    }

    /**
     * Container's getter for LOVSalesOrderIdVO1.
     * @return LOVSalesOrderIdVO1
     */
    public ViewObjectImpl getLOVSalesOrderIdVO1() {
        return (ViewObjectImpl) findViewObject("LOVSalesOrderIdVO1");
    }

    /**
     * To Delete Attached Document
     * @return void
     */
    public void deleteAttachFileRow(String path) {
        RowSetIterator rowSetIterator = null;
        try {
            System.out.println("File path in AMimpl : " + path);
            String filePath = "";
            String fileNm = "", cldId = "", horgId = "", docId = "";
            int slocId = 1;
            ViewObjectImpl attch1 = this.getMnfPdoAttachVO2();
            Row[] rows = attch1.getFilteredRows("AttchFlPath", path);
            System.out.println(rows.length);
            if (rows.length > 0) {
                fileNm = (String) rows[0].getAttribute("AttchFlNm");
                cldId = (String) rows[0].getAttribute("CldId");
                horgId = (String) rows[0].getAttribute("HoOrgId");
                slocId = Integer.parseInt(rows[0].getAttribute("SlocId").toString());
                docId = (String) rows[0].getAttribute("DocId");
            }
            rowSetIterator = attch1.getRowSetIterator();
            Key key = new Key(new Object[] { cldId, slocId, horgId, docId, fileNm });
            Row[] ro = rowSetIterator.findByKey(key, 1);
            //System.out.println("Filtered Row : "+ro.length);
            Row row = rowSetIterator.findByKey(key, 1)[0];
            rowSetIterator.setCurrentRow(row);
            Row r = this.getMnfPdoAttachVO2().getCurrentRow();
            filePath = (String) r.getAttribute("AttchFlPath");
            //System.out.println("Current Row File Path : "+filePath);
            filePath = (String) row.getAttribute("AttchFlPath");
            //System.out.println("Row File Path : "+filePath);
            File f = new File(filePath);
            if (f.exists()) {
                boolean success = f.delete();
                System.out.println("File Deleted");
            }
        } catch (Exception x) {

            System.err.format("%s: no such" + " file or directory%n", path);
        }
        rowSetIterator.removeCurrentRow();
    }

    /**
     * Container's getter for LOVDisplayBOMVO1.
     * @return LOVDisplayBOMVO1
     */
    public ViewObjectImpl getLOVDisplayBOMVO1() {
        return (ViewObjectImpl) findViewObject("LOVDisplayBOMVO1");
    }

    /**
     * Container's getter for MnfPdoQcParamVO1.
     * @return MnfPdoQcParamVO1
     */
    public ViewObjectImpl getMnfPdoQcParamVO1() {
        return (ViewObjectImpl) findViewObject("MnfPdoQcParamVO1");
    }

    /**
     * Container's getter for MnfPdoToMnfPdoQcParamVL1.
     * @return MnfPdoToMnfPdoQcParamVL1
     */
    public ViewLinkImpl getMnfPdoToMnfPdoQcParamVL1() {
        return (ViewLinkImpl) findViewLink("MnfPdoToMnfPdoQcParamVL1");
    }

    /**
     * Container's getter for LOVQcParameterVO1.
     * @return LOVQcParameterVO1
     */
    public ViewObjectImpl getLOVQcParameterVO1() {
        return (ViewObjectImpl) findViewObject("LOVQcParameterVO1");
    }

    /**
     * Container's getter for LOVQcParamNmeVO1.
     * @return LOVQcParamNmeVO1
     */
    public ViewObjectImpl getLOVQcParamNmeVO1() {
        return (ViewObjectImpl) findViewObject("LOVQcParamNmeVO1");
    }

    /**
     * To check duplicate QC Parameter.
     *
     * **/
    public boolean duplicateQcParam(String paramName, String opNme) {
        RowSetIterator rSetIter = getMnfPdoQcParamVO1().createRowSetIterator(null);
        Integer countVal = 0;
        if (paramName != null) {
            while (rSetIter.hasNext()) {
                Row r = rSetIter.next();
                if (paramName.equals(r.getAttribute("TransQcParam")) &&
                    opNme.equals(r.getAttribute("TransOperationName"))) {
                    //  System.out.println("1 param Found : " + paramName.equals(r.getAttribute("TransSO")));
                    countVal = countVal + 1;
                }
            }
            rSetIter.closeRowSetIterator();
            Row currentRow = getMnfPdoQcParamVO1().getCurrentRow();

            if (paramName.equals(currentRow.getAttribute("TransQcParam")) &&
                opNme.equals(currentRow.getAttribute("TransOperationName"))) {
                // System.out.println("2 param Id Found : " + paramName.equals(currentRow.getAttribute("TransSO")));
                countVal = countVal - 1;
            }
        }

        return countVal == 1 ? true : false;
    }

    public Number chkgetYearFyId() {
        // EbizParams.getFyId(arg0, arg1, arg2)
        BigDecimal pdoFyId = new BigDecimal(0.0);
        String cldId = null; //resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        if (EbizParams.GLBL_APP_CLD_ID() != null) {
            cldId = EbizParams.GLBL_APP_CLD_ID();
        }
        String usrOrg = null; //resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        if (EbizParams.GLBL_APP_USR_ORG() != null) {
            usrOrg = EbizParams.GLBL_APP_USR_ORG();
        }

        try {
            pdoFyId = (BigDecimal) callStoredFunction(Types.NUMERIC, "APP.GET_ORG_FY_ID(?,?,?,?)", new Object[] {
                                                      cldId, usrOrg, new Timestamp(System.currentTimeMillis()), "FY"
            });
        } catch (NumberFormatException nfe) {
            // TODO: Add catch code
            nfe.printStackTrace();
        }

        Number data = new Number(0);
        try {
            data = new Number(pdoFyId);
        } catch (SQLException e) {
        }
        //System.out.println(" financial id   " + pdoFyId );
        return data;

    }

    public void salesTacker() {
        Row r = getMnfPdoSRCVO2().getCurrentRow();

        ADFContext.getCurrent().getPageFlowScope().put("SLS_DOC_ID", r.getAttribute("SrcDocId"));
        ADFContext.getCurrent().getPageFlowScope().put("SLS_DLV_DT", r.getAttribute("DlvDt"));
        ADFContext.getCurrent().getPageFlowScope().put("SLS_ITM_ID", r.getAttribute("ItmId"));

    }

    /**
     * Container's getter for pdoRevChkVO1.
     * @return pdoRevChkVO1
     */
    public ViewObjectImpl getpdoRevChkVO1() {
        return (ViewObjectImpl) findViewObject("pdoRevChkVO1");
    }

    /**
     * pdoRevChk to revise the doc or not
     * @return
     */
    public String pdoRevChk() {

        Row r = getMnfPDOVO1().getCurrentRow();

        getpdoRevChkVO1().setNamedWhereClauseParam("BindCldId", this.getCldId());
        getpdoRevChkVO1().setNamedWhereClauseParam("BindSlocId", this.getSlocId());
        getpdoRevChkVO1().setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgId());
        getpdoRevChkVO1().setNamedWhereClauseParam("BindOrgId", this.getOrgId());
        getpdoRevChkVO1().setNamedWhereClauseParam("BindDocId", r.getAttribute("DocId"));
        getpdoRevChkVO1().executeQuery();

        Row[] allRowsInRange = getpdoRevChkVO1().getAllRowsInRange();
        System.out.println("length is : " + allRowsInRange);
        if (allRowsInRange.length > 0) {
            return "Y";
        }
        return "N";


    }

    public AppCostCenterServiceAMImpl getAppAM() {
        String appModuleName = "appCostCenterSevice.model.service.AppCostCenterServiceAM";
        String appModuleConfig = "AppCostCenterServiceAMLocal";
        return (AppCostCenterServiceAMImpl) Configuration.createRootApplicationModule(appModuleName, appModuleConfig);
    }


    public void releaseAppAM(AppCostCenterServiceAMImpl appCostCenter) {
        Configuration.releaseRootApplicationModule((ApplicationModule) appCostCenter, true);
    }

    @Override
    protected void finalize() throws Throwable {

        releaseAppAM(getAppAM());

        super.finalize();
    }

    /**
     * Container's getter for AppCcDocVO1.
     * @return AppCcDocVO1
     */
    public ViewObjectImpl getAppCcDocVO1() {
        return (ViewObjectImpl) findViewObject("AppCcDocVO1");
    }

    /**
     * Container's getter for AppCcVwVO1.
     * @return AppCcVwVO1
     */
    public ViewObjectImpl getAppCcVwVO1() {
        return (ViewObjectImpl) findViewObject("AppCcVwVO1");
    }

    /**
     * Method which will let us know whether cost center is applicable for this current document or not
     */
    public Boolean chkCcApplicableOrNot() {
        Boolean val = false;

        ViewObjectImpl appCcDocVO1 = this.getAppCcDocVO1();
        appCcDocVO1.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        appCcDocVO1.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        appCcDocVO1.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        appCcDocVO1.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        appCcDocVO1.setNamedWhereClauseParam("BindDocId", 26001);
        appCcDocVO1.executeQuery();

        Row[] allRowsInRange = appCcDocVO1.getAllRowsInRange();
        if (allRowsInRange.length > 0) {
            val = true;
        }

        return val;
    }

    /**
     * Method which will be called when user click on generate Cost Ceneter based on header wise
     */
    public void generateCostCenterHeaderWise() {
        if (chkCcApplicableOrNot()) {
            AppCostCenterServiceAMImpl amCC = getAppAM();
            /*
           * @param cldId
           * @param slocId
           * @param hoOrgId
           * @param orgId
           * @param tempId
           * @param tempSrc
           * @param docId
           * @param usrId
           * @param tempCcId
           * @param amount
           * @param pCcLevel1
           * @param pCcLevel2
           * @param pCcLevel3
           * @param pCcLevel4
           * @param pCcLevel5
           */
            //   SlsSoVOImpl impl = this.getMnfPDOVO1();
            MnfPDOVOImpl impl = this.getMnfPDOVO1();
            Row currentRow = impl.getCurrentRow();

            if (currentRow != null) {
                declareGlblValuesForCC();

                amCC.generateCostCenterApp(EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                           EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                           currentRow.getAttribute("DocId").toString(), "H", 26001,
                                           EbizParams.GLBL_APP_USR(), currentRow.getAttribute("DocId").toString(),
                                           new Number(0), (String) resolvEl("#{pageFlowScope.P_CC_LEVEL1}"),
                                           (String) resolvEl("#{pageFlowScope.P_CC_LEVEL2}"),
                                           (String) resolvEl("#{pageFlowScope.P_CC_LEVEL3}"),
                                           (String) resolvEl("#{pageFlowScope.P_CC_LEVEL4}"),
                                           (String) resolvEl("#{pageFlowScope.P_CC_LEVEL5}"));

            }
        }
    }


    /**
     * Method which will set Global Parameter Values and will be called before opening AppCostCenterServicesTF
     */
    public void declareGlblValuesForCC() {
        ViewObjectImpl appCcVwVO1 = this.getAppCcVwVO1();
        appCcVwVO1.setRangeSize(-1);

        appCcVwVO1.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        appCcVwVO1.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        appCcVwVO1.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        appCcVwVO1.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        appCcVwVO1.setNamedWhereClauseParam("BindDocId", 26001);

        // Row currentRow = this.getSlsSoItm1().getCurrentRow();
        Row currentRow = this.getMnfPdoOpItmVO6().getCurrentRow();
        if (currentRow != null) {
            for (int i = 1; i <= 5; i++) {
                appCcVwVO1.setNamedWhereClauseParam("BindCcPos", i);
                appCcVwVO1.executeQuery();

                Row[] allRowsInRange = appCcVwVO1.getAllRowsInRange();
                if (allRowsInRange.length > 0) {
                    String columnName = null;
                    for (Row r : allRowsInRange) {
                        AttributeDef[] attributeDef = this.getMnfPdoOpItmVO6().getAttributeDefs();

                        for (int j = 0; j < attributeDef.length; j++) {
                            /*  System.out.println("j value is " + attributeDef[j].getColumnName());
                               System.out.println("------------ null value is " + r.getAttribute("DbobColNm"));
                               System.out.println("attributeDef[j].getColumnName().equalsIgnoreCase(r.getAttribute(\"DbobColNm\").toString()) " +
                                                  attributeDef[j].getColumnName().equals(r.getAttribute("DbobColNm")));
                               */
                            if (attributeDef[j].getColumnName() != null &&
                                attributeDef[j].getColumnName().equals(r.getAttribute("DbobColNm"))) {
                                columnName = attributeDef[j].getName();
                            }
                        }
                        System.out.println("Column Name is " + columnName);

                        if (columnName != null) {

                            System.out.println("i is " + i + " Cost center Value is " +
                                               currentRow.getAttribute(columnName));


                            RequestContext.getCurrentInstance().getPageFlowScope().put("P_CC_LEVEL" + i,
                                                                                       currentRow.getAttribute(columnName));
                        }
                    }
                } else {
                    System.out.println("i is" + i + " cost center value is null");

                    RequestContext.getCurrentInstance().getPageFlowScope().put("P_CC_LEVEL" + i, null);

                }
            }
        }
    }

    /** ---------- To create HexDocId Id for CC -------------**/

    public String getHexDocNoFromFun() {

        String hexDocIdFromFun = "0";
        try {
            hexDocIdFromFun = this.callStoredFunction(Types.VARCHAR, "APP.GET_TXN_ID_CC(?,?,?,?,?,?,?)", new Object[] {
                                                      this.getCldId(), this.getSlocId(), this.getOrgId(),
                                                      this.getUsrId(), 21503, 84901, 0
            }).toString();

        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("ERROR IN CALLING FUNCTION GET_TXN_ID at BdgEoBudgetEoImpl :" + e.getMessage());
        }
        System.out.println("===========" + hexDocIdFromFun);

        return hexDocIdFromFun;
    }


    /**
     * Method which will update amount present in cost center table
     */
    public void updateCostCenterAmt() {
        if (chkCcApplicableOrNot()) {
            System.out.println("Inside cost ceneter update amount method");
            //   SlsSoItmVOImpl impl = this.getSlsSoItm1();
            //  ViewObjectImpl impl = this.getMnfPdoOpItmVO6();

            RowSetIterator rowItr = getMnfPdoOpItmVO6().createRowSetIterator(null);

            Row currentRow = null;

            while (rowItr.hasNext()) {

                // Row currentRow = impl.getCurrentRow();
                currentRow = rowItr.next();
                if (currentRow != null && currentRow.getAttribute("CcId") != null &&
                    currentRow.getAttribute("ItmTotAmt") != null) {
                    AppCostCenterServiceAMImpl amCC = getAppAM();
                    System.out.println("Inside Am after cresting object");
                    if (amCC != null) {

                        declareGlblValuesForCC();

                        System.out.println("------------------ Not null");
                        Boolean amount =
                            amCC.updateCCAmount(EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                                EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                                currentRow.getAttribute("DocId").toString(), "L", 26001,
                                                EbizParams.GLBL_APP_USR(), currentRow.getAttribute("CcId").toString(),
                                                (Number) currentRow.getAttribute("ItmTotAmt"),
                                                (String) resolvEl("#{pageFlowScope.P_CC_LEVEL1}"),
                                                (String) resolvEl("#{pageFlowScope.P_CC_LEVEL2}"),
                                                (String) resolvEl("#{pageFlowScope.P_CC_LEVEL3}"),
                                                (String) resolvEl("#{pageFlowScope.P_CC_LEVEL4}"),
                                                (String) resolvEl("#{pageFlowScope.P_CC_LEVEL5}"));
                        if (!amount) {
                            ADFModelUtils.showFormattedFacesMessage("Update Cost Center",
                                                                    "Please Update Cost Center Values.",
                                                                    FacesMessage.SEVERITY_ERROR);
                        }
                    }
                }
                System.out.println("After calling Update method");
            }

            rowItr.closeRowSetIterator();

        }
    }

    /**
     * Method which will push data of Cost Center from TempCostCenter to SlsSoCostCenter Table
     */
    public void sendDataFromTempCcToPdoOpItm() {
        if (chkCcApplicableOrNot()) {
            callStoredFunction(Types.VARCHAR, "APP.FN_SAVE_COST_CENTER(?,?,?,?,?,?,?,?)", new Object[] {
                               EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                               EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(), 26001, "MNF",
                               "MNF$PDO$COST$CENTER", this.getMnfPDOVO1().getCurrentRow().getAttribute("DocId")
            });
        }
    }

    public oracle.jbo.domain.Number getCostCenterChk() {

        oracle.jbo.domain.Number CcChk = new oracle.jbo.domain.Number(0);
        try {

            BigDecimal val = (BigDecimal) callStoredFunction(Types.NUMERIC, "App.fn_is_cost_center_present(?,?,?,?,?)", new Object[] {
                                                             this.getCldId(), this.getSlocId(), this.getHoOrgId(),
                                                             this.getOrgId(), 26001
            });
            if (val != null)
                CcChk = new oracle.jbo.domain.Number(val);
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        System.out.println("-CCCCCCCCCCCCCCCCCCCCCCCC--->> " + CcChk);
        return CcChk;

    }

    /**
     * Container's getter for LOVSalesForecastVO1.
     * @return LOVSalesForecastVO1
     */
    public ViewObjectImpl getLOVSalesForecastVO1() {
        return (ViewObjectImpl) findViewObject("LOVSalesForecastVO1");
    }

    /**
     * To check duplicate Sale Forecast.
     *
     * **/
    public boolean duplicateSalesForecast(String paramName, Timestamp DlvDt) {
        RowSetIterator rSetIter = getMnfPdoSRCVO2().createRowSetIterator(null);
        Integer countVal = 0;
        if (paramName != null) {
            while (rSetIter.hasNext()) {
                Row r = rSetIter.next();
                if (paramName.equals(r.getAttribute("TransSO")) && DlvDt.equals(r.getAttribute("DlvDt"))) {
                    //  System.out.println("1 param Found : " + paramName.equals(r.getAttribute("TransSO")));
                    countVal = countVal + 1;
                }
            }
            rSetIter.closeRowSetIterator();
            Row currentRow = getMnfPdoSRCVO2().getCurrentRow();

            if (paramName.equals(currentRow.getAttribute("TransSO")) &&
                DlvDt.equals(currentRow.getAttribute("DlvDt"))) {
                // System.out.println("2 param Id Found : " + paramName.equals(currentRow.getAttribute("TransSO")));
                countVal = countVal - 1;
            }
        }

        return countVal == 1 ? true : false;
    }

    /**
     * Container's getter for LOVSubContractVO1.
     * @return LOVSubContractVO1
     */
    public ViewObjectImpl getLOVSubContractVO1() {
        return (ViewObjectImpl) findViewObject("LOVSubContractVO1");
    }

    public void updateSoDlvQty() {

        oracle.jbo.domain.Number dummy = new oracle.jbo.domain.Number(0);
        Row row = this.getMnfPDOVO1().getCurrentRow();
        String DocId = row.getAttribute("DocId").toString();
        try {
            BigDecimal val = (BigDecimal) callStoredFunction(Types.NUMERIC, "fn_mnf_upd_so_dlv_pln_qty(?,?,?,?,?,?,?)", new Object[] {
                                                             this.getCldId(), this.getSlocId(), this.getOrgId(),
                                                             this.getHoOrgId(), DocId,
                                                             this.getMnfPdoSRCVO2().getCurrentRow().getAttribute("DlvDt"),
                                                             row.getAttribute("OutptItmId")
            });
            if (val != null)
                dummy = new oracle.jbo.domain.Number(val);
        } catch (Exception e) {

            e.printStackTrace();
        }
        System.out.println("Return val while updating so dlv qty : " + dummy);
        //  return dummy;
    }


    public String shortcloseChk() {

        oracle.jbo.domain.Number dummy = new oracle.jbo.domain.Number(0);
        Row row = this.getMnfPDOVO1().getCurrentRow();
        String DocId = row.getAttribute("DocId").toString();
        String rtn="N";
        try {
         rtn =  (String) callStoredFunction(Types.VARCHAR, "fn_mnf_pdo_jc_rc_partial_check(?,?,?,?,?,?)", new Object[] {
                                                     this.getCldId(), this.getSlocId(), this.getOrgId(),
                                                     this.getHoOrgId(), DocId, "PDO"
            });
          // return  rtn ;
        } catch (Exception e) {

            e.printStackTrace();
        }
        System.out.println("Return val : " + rtn);
        return rtn;
    }
    
    /**
     *
     * To update a status of PDO from Open to ShortClose....
     *
     * **/
    public void updateShortCloseStatus() {
        /*  Row currentRow = this.getMnfPDOVO1().getCurrentRow();
        System.out.println("Att val :"+currentRow.getAttribute("PdoStat"));
      currentRow.setAttribute("PdoStat", 152);
    System.out.println("STATUSSSS OF PDOO ISSS :" + currentRow.getAttribute("PdoStat"));
        currentRow.setAttribute("TransPdoStatus", "SHORT CLOSED");
        this.getMnfPDOVO1().executeQuery(); */
        // this.getDBTransaction().commit();
        Integer i = updatedStat();
        System.out.println("---->> " + i);
       // this.getMnfPDOVO1().executeQuery();
    }


    /**
     * Container's getter for LOVPdoStatusVO1.
     * @return LOVPdoStatusVO1
     */
    public ViewObjectImpl getLOVPdoStatusVO1() {
        return (ViewObjectImpl) findViewObject("LOVPdoStatusVO1");
    }
    
    private Integer updatedStat()
    {
        Row row = this.getMnfPDOVO1().getCurrentRow();
        String DocId = row.getAttribute("DocId").toString();
        Integer rtn=0;
        try {
         rtn =  Integer.parseInt( callStoredFunction(Types.VARCHAR, "MNF_UPD_PDO_STAT(?,?,?,?,?)", new Object[] {
                                                     this.getCldId(), this.getSlocId(), 
                                                     this.getHoOrgId(),this.getOrgId(), DocId
            }).toString());
          // return  rtn ;
        } catch (Exception e) {

            e.printStackTrace();
        }
        System.out.println("Return val : " + rtn);
        this.getMnfPDOVO1().executeQuery();
        return rtn;    
        
    }
    
    public String ItemSerializedFlag(String outItmId)
    {
        
        if (getLOVProductVO1().getFilteredRows("ItmId", outItmId).length > 0) {
            return (getLOVProductVO1().getFilteredRows("ItmId",
                                                               outItmId))[0].getAttribute("SerializedFlg").toString();
        }
        return "N";
        
    }
}

