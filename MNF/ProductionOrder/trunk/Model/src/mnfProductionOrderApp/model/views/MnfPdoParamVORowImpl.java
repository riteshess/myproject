package mnfProductionOrderApp.model.views;

import javax.faces.application.FacesMessage;

import javax.faces.context.FacesContext;

import javax.faces.validator.ValidatorException;

import mnfProductionOrderApp.model.entities.MnfPdoParamEOImpl;

import mnfProductionOrderApp.model.services.MNFProductionorderAppAMImpl;

import oracle.adf.model.BindingContext;
import oracle.adf.model.binding.DCBindingContainer;
import oracle.adf.model.binding.DCIteratorBinding;
import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Oct 01 11:01:48 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MnfPdoParamVORowImpl extends ViewRowImpl {


    public static final int ENTITY_MNFPDOPARAMEO = 0;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CldId,
        SlocId,
        HoOrgId,
        DocId,
        ParamId,
        OpId,
        OpSrNo,
        OrgId,
        ParamVal,
        UsrIdCreate,
        UsrIdCreateDt,
        UsrIdMod,
        UsrIdModDt,
        ParamSetId,
        ParamType,
        TransParamNme,
        TransParamBasisId,
        TransParamBasis,
        TransKey,
        TransParamSet,
        TransOpName,
        LOVCostingParamVO,
        LOVParamTypeVO1,
        LOVParamSetVO1,
        LOVOpForParamVO1,
        LOVBasisVO1;
        static AttributesEnum[] vals = null;
        ;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    Integer paramBasisIs = 0;


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int PARAMID = AttributesEnum.ParamId.index();
    public static final int OPID = AttributesEnum.OpId.index();
    public static final int OPSRNO = AttributesEnum.OpSrNo.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int PARAMVAL = AttributesEnum.ParamVal.index();
    public static final int USRIDCREATE = AttributesEnum.UsrIdCreate.index();
    public static final int USRIDCREATEDT = AttributesEnum.UsrIdCreateDt.index();
    public static final int USRIDMOD = AttributesEnum.UsrIdMod.index();
    public static final int USRIDMODDT = AttributesEnum.UsrIdModDt.index();
    public static final int PARAMSETID = AttributesEnum.ParamSetId.index();
    public static final int PARAMTYPE = AttributesEnum.ParamType.index();
    public static final int TRANSPARAMNME = AttributesEnum.TransParamNme.index();
    public static final int TRANSPARAMBASISID = AttributesEnum.TransParamBasisId.index();
    public static final int TRANSPARAMBASIS = AttributesEnum.TransParamBasis.index();
    public static final int TRANSKEY = AttributesEnum.TransKey.index();
    public static final int TRANSPARAMSET = AttributesEnum.TransParamSet.index();
    public static final int TRANSOPNAME = AttributesEnum.TransOpName.index();
    public static final int LOVCOSTINGPARAMVO = AttributesEnum.LOVCostingParamVO.index();
    public static final int LOVPARAMTYPEVO1 = AttributesEnum.LOVParamTypeVO1.index();
    public static final int LOVPARAMSETVO1 = AttributesEnum.LOVParamSetVO1.index();
    public static final int LOVOPFORPARAMVO1 = AttributesEnum.LOVOpForParamVO1.index();
    public static final int LOVBASISVO1 = AttributesEnum.LOVBasisVO1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public MnfPdoParamVORowImpl() {
    }

    /**
     * Gets MnfPdoParamEO entity object.
     * @return the MnfPdoParamEO
     */
    public MnfPdoParamEOImpl getMnfPdoParamEO() {
        return (MnfPdoParamEOImpl) getEntity(ENTITY_MNFPDOPARAMEO);
    }

    /**
     * Gets the attribute value for CLD_ID using the alias name CldId.
     * @return the CLD_ID
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as attribute value for CLD_ID using the alias name CldId.
     * @param value value to set the CLD_ID
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for SLOC_ID using the alias name SlocId.
     * @return the SLOC_ID
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for SLOC_ID using the alias name SlocId.
     * @param value value to set the SLOC_ID
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for ORG_ID using the alias name OrgId.
     * @return the ORG_ID
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as attribute value for ORG_ID using the alias name OrgId.
     * @param value value to set the ORG_ID
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for HO_ORG_ID using the alias name HoOrgId.
     * @return the HO_ORG_ID
     */
    public String getHoOrgId() {
        return (String) getAttributeInternal(HOORGID);
    }

    /**
     * Sets <code>value</code> as attribute value for HO_ORG_ID using the alias name HoOrgId.
     * @param value value to set the HO_ORG_ID
     */
    public void setHoOrgId(String value) {
        setAttributeInternal(HOORGID, value);
    }

    /**
     * Gets the attribute value for DOC_ID using the alias name DocId.
     * @return the DOC_ID
     */
    public String getDocId() {
        return (String) getAttributeInternal(DOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for DOC_ID using the alias name DocId.
     * @param value value to set the DOC_ID
     */
    public void setDocId(String value) {
        setAttributeInternal(DOCID, value);
    }

    /**
     * Gets the attribute value for PARAM_ID using the alias name ParamId.
     * @return the PARAM_ID
     */
    public String getParamId() {
        return (String) getAttributeInternal(PARAMID);
    }

    /**
     * Sets <code>value</code> as attribute value for PARAM_ID using the alias name ParamId.
     * @param value value to set the PARAM_ID
     */
    public void setParamId(String value) {        
        setAttributeInternal(PARAMID, value);
    }

    /**
     * Showing an error message.
     *
     * */
    public void showFacesMsg(String msgHdr, String msgDtl, javax.faces.application.FacesMessage.Severity msgSeverity,
                             String msgMode) {

        FacesMessage msg = new FacesMessage(msgHdr);
        msg.setDetail(msgDtl);
        msg.setSeverity(msgSeverity);
        FacesContext.getCurrentInstance().addMessage(null, msg);

    }
    /**
     * Gets the attribute value for PARAM_VAL using the alias name ParamVal.
     * @return the PARAM_VAL
     */
    public Number getParamVal() {
        return (Number) getAttributeInternal(PARAMVAL);
    }

    /**
     * Sets <code>value</code> as attribute value for PARAM_VAL using the alias name ParamVal.
     * @param value value to set the PARAM_VAL
     */
    public void setParamVal(Number value) {        
        setAttributeInternal(PARAMVAL, value);
    }

    /**
     * Gets the attribute value for USR_ID_CREATE using the alias name UsrIdCreate.
     * @return the USR_ID_CREATE
     */
    public Integer getUsrIdCreate() {
        return (Integer) getAttributeInternal(USRIDCREATE);
    }

    /**
     * Sets <code>value</code> as attribute value for USR_ID_CREATE using the alias name UsrIdCreate.
     * @param value value to set the USR_ID_CREATE
     */
    public void setUsrIdCreate(Integer value) {
        setAttributeInternal(USRIDCREATE, value);
    }

    /**
     * Gets the attribute value for USR_ID_CREATE_DT using the alias name UsrIdCreateDt.
     * @return the USR_ID_CREATE_DT
     */
    public Timestamp getUsrIdCreateDt() {
        return (Timestamp) getAttributeInternal(USRIDCREATEDT);
    }

    /**
     * Sets <code>value</code> as attribute value for USR_ID_CREATE_DT using the alias name UsrIdCreateDt.
     * @param value value to set the USR_ID_CREATE_DT
     */
    public void setUsrIdCreateDt(Timestamp value) {
        setAttributeInternal(USRIDCREATEDT, value);
    }

    /**
     * Gets the attribute value for USR_ID_MOD using the alias name UsrIdMod.
     * @return the USR_ID_MOD
     */
    public Integer getUsrIdMod() {
        return (Integer) getAttributeInternal(USRIDMOD);
    }

    /**
     * Sets <code>value</code> as attribute value for USR_ID_MOD using the alias name UsrIdMod.
     * @param value value to set the USR_ID_MOD
     */
    public void setUsrIdMod(Integer value) {
        setAttributeInternal(USRIDMOD, value);
    }

    /**
     * Gets the attribute value for USR_ID_MOD_DT using the alias name UsrIdModDt.
     * @return the USR_ID_MOD_DT
     */
    public Timestamp getUsrIdModDt() {
        return (Timestamp) getAttributeInternal(USRIDMODDT);
    }

    /**
     * Sets <code>value</code> as attribute value for USR_ID_MOD_DT using the alias name UsrIdModDt.
     * @param value value to set the USR_ID_MOD_DT
     */
    public void setUsrIdModDt(Timestamp value) {
        setAttributeInternal(USRIDMODDT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransParamNme.
     * @return the TransParamNme
     */
    public String getTransParamNme() {
        
        if(getAttributeInternal(TRANSPARAMNME)!=null)
            return (String) getAttributeInternal(TRANSPARAMNME);
        else  if(getParamId() != null)
        {
            ViewObjectImpl itemdescvoimpl = getAM().getLOVCostingParamVO1();
            itemdescvoimpl.setNamedWhereClauseParam("BindSetID", getParamSetId());
            itemdescvoimpl.executeQuery();
            Row[] wcRow = itemdescvoimpl.getFilteredRows("ParamId", getParamId());
            if (wcRow.length > 0) {
                if (wcRow[0].getAttribute("ParamDesc") != null) {
                try {
                        paramBasisIs = Integer.parseInt(wcRow[0].getAttribute("Basis").toString());
                        setAttributeInternal(TRANSPARAMBASISID, paramBasisIs);
                        return wcRow[0].getAttribute("ParamDesc").toString();
                    } catch (Exception sqle) {
                        sqle.printStackTrace();
                    }
                }
            }
            
        } 
        return (String) getAttributeInternal(TRANSPARAMNME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransParamNme.
     * @param value value to set the  TransParamNme
     */
    public void setTransParamNme(String value) {
        setAttributeInternal(TRANSPARAMNME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransParamBasisId.
     * @return the TransParamBasisId
     */
    public Integer getTransParamBasisId() {
        return (Integer) getAttributeInternal(TRANSPARAMBASISID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransParamBasisId.
     * @param value value to set the  TransParamBasisId
     */
    public void setTransParamBasisId(Integer value) {
        setAttributeInternal(TRANSPARAMBASISID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransParamBasis.
     * @return the TransParamBasis
     */
    public String getTransParamBasis() {
        if(paramBasisIs != null)
        {
            if(paramBasisIs  == 31)
            return "FIXED";
            else if(paramBasisIs  == 32)
            return "VARIABLE";
        }
        return (String) getAttributeInternal(TRANSPARAMBASIS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransParamBasis.
     * @param value value to set the  TransParamBasis
     */
    public void setTransParamBasis(String value) {
        if(getTransParamBasisId() != null)
        {
            if(getTransParamBasisId()  == 31)
           setAttributeInternal(TRANSPARAMBASIS,"FIXED");
            else if(getTransParamBasisId()  == 32)
            setAttributeInternal(TRANSPARAMBASIS,"VARIABLE");
        }
        setAttributeInternal(TRANSPARAMBASIS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransKey.
     * @return the TransKey
     */
    public Object getTransKey() {
        return getKey();
        //return (Object) getAttributeInternal(TRANSKEY);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransKey.
     * @param value value to set the  TransKey
     */
    public void setTransKey(Object value) {
        setAttributeInternal(TRANSKEY, value);
    }

    /**
     * Gets the attribute value for PARAM_SET_ID using the alias name ParamSetId.
     * @return the PARAM_SET_ID
     */
    public String getParamSetId() {
        return (String) getAttributeInternal(PARAMSETID);
    }

    /**
     * Sets <code>value</code> as attribute value for PARAM_SET_ID using the alias name ParamSetId.
     * @param value value to set the PARAM_SET_ID
     */
    public void setParamSetId(String value) {
        setAttributeInternal(PARAMSETID, value);
    }

    /**
     * Gets the attribute value for PARAM_TYPE using the alias name ParamType.
     * @return the PARAM_TYPE
     */
    public Integer getParamType() {
        return (Integer) getAttributeInternal(PARAMTYPE);
    }

    /**
     * Sets <code>value</code> as attribute value for PARAM_TYPE using the alias name ParamType.
     * @param value value to set the PARAM_TYPE
     */
    public void setParamType(Integer value) {
        setAttributeInternal(PARAMTYPE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransParamSet.
     * @return the TransParamSet
     */
    public String getTransParamSet() {
        if(getParamType() != null)
        {            
             ViewObjectImpl itemdescvoimpl = getAM().getLOVParamSetVO1();
                 //   itemdescvoimpl.setNamedWhereClauseParam("BindParamType", getParamType());
                 //   itemdescvoimpl.executeQuery();
                    
             Row[] wcRow = itemdescvoimpl.getFilteredRows("ParamSetId", getParamSetId());
                if (wcRow.length > 0) {
                    if (wcRow[0].getAttribute("ParamSetDesc") != null) {
                  try {
                           // paramBasisIs = Integer.parseInt(wcRow[0].getAttribute("Basis").toString());
                            return wcRow[0].getAttribute("ParamSetDesc").toString();
                        } catch (Exception sqle) {
                            sqle.printStackTrace();
                        }
                    }
                }
                }
        return (String) getAttributeInternal(TRANSPARAMSET);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransParamSet.
     * @param value value to set the  TransParamSet
     */
    public void setTransParamSet(String value) {
        setAttributeInternal(TRANSPARAMSET, value);
    }

    /**
     * Gets the attribute value for OP_ID using the alias name OpId.
     * @return the OP_ID
     */
    public String getOpId() {
        return (String) getAttributeInternal(OPID);
    }

    /**
     * Sets <code>value</code> as attribute value for OP_ID using the alias name OpId.
     * @param value value to set the OP_ID
     */
    public void setOpId(String value) {
        setAttributeInternal(OPID, value);
    }

    /**
     * Gets the attribute value for OP_SR_NO using the alias name OpSrNo.
     * @return the OP_SR_NO
     */
    public Integer getOpSrNo() {
        return (Integer) getAttributeInternal(OPSRNO);
    }

    /**
     * Sets <code>value</code> as attribute value for OP_SR_NO using the alias name OpSrNo.
     * @param value value to set the OP_SR_NO
     */
    public void setOpSrNo(Integer value) {
        setAttributeInternal(OPSRNO, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransOpName.
     * @return the TransOpName
     */
    public String getTransOpName() {
        if (getOpId() != null) {
            Row[] wcRow = getAM().getLOVOpDescVO1().getFilteredRows("DocId", getOpId());
            if (wcRow.length > 0) {
                if (wcRow[0].getAttribute("OpDesc") != null) {
                    //setTransOpDesc(wcRow[0].getAttribute("OpDesc").toString());
                    return wcRow[0].getAttribute("OpDesc").toString();

                }
            }
        }  
        return (String) getAttributeInternal(TRANSOPNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransOpName.
     * @param value value to set the  TransOpName
     */
    public void setTransOpName(String value) {
        setAttributeInternal(TRANSOPNAME, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LOVCostingParamVO.
     */
    public RowSet getLOVCostingParamVO() {
        return (RowSet) getAttributeInternal(LOVCOSTINGPARAMVO);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LOVParamTypeVO1.
     */
    public RowSet getLOVParamTypeVO1() {
        return (RowSet) getAttributeInternal(LOVPARAMTYPEVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LOVParamSetVO1.
     */
    public RowSet getLOVParamSetVO1() {
        return (RowSet) getAttributeInternal(LOVPARAMSETVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LOVOpForParamVO1.
     */
    public RowSet getLOVOpForParamVO1() {
        return (RowSet) getAttributeInternal(LOVOPFORPARAMVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LOVBasisVO1.
     */
    public RowSet getLOVBasisVO1() {
        return (RowSet) getAttributeInternal(LOVBASISVO1);
    }

    /**
     *
     * Get AM Instance
     * **/
    public MNFProductionorderAppAMImpl getAM()
    {
        return (MNFProductionorderAppAMImpl)    getApplicationModule();
        
    }
    
    /**
     * Method to check duplicate value for rows within an iterator
     *
     * **/
    private boolean duplicateValue(String iter, String attrsNm, Object val) {
  //      DCIteratorBinding iter = getDCBindingContainer().findIteratorBinding(
       // DCIteratorBinding dcIter = (DCBindingContainer)getBindingContainer().findIteratorBinding(iter);
        
        DCBindingContainer dcBindings = (DCBindingContainer)BindingContext.getCurrent().getCurrentBindingsEntry() ;
        DCIteratorBinding dcIter =dcBindings.findIteratorBinding(iter);
        
        ViewObject vo = dcIter.getViewObject();
        RowSetIterator rSetIter = vo.createRowSetIterator(null);

        Row r = null;
        Integer countVal = 0;

        while (rSetIter.hasNext()) {
            r = rSetIter.next();
            // System.out.println("attrsNm "+r.getAttribute(attrsNm));

            if (r.getAttribute(attrsNm) != null && val.equals(r.getAttribute(attrsNm))) {
                countVal = countVal + 1;
            }
        }
        rSetIter.closeRowSetIterator();
        System.out.println("MnfPdoParamaVORowImpClass");
        //exclude count from current row
        Row currentRow = dcIter.getCurrentRow();

        if (currentRow.getAttribute(attrsNm) != null && val.equals(currentRow.getAttribute(attrsNm))) {
            countVal = countVal - 1;
        }

        return countVal == 1 ? true : false;
    }
}

