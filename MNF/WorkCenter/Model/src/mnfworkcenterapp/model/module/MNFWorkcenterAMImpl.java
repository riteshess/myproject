package mnfworkcenterapp.model.module;


import adf.utils.ebiz.EbizParams;
import adf.utils.model.ADFModelUtils;

import com.tangosol.coherence.component.net.RequestContext;

import java.io.File;
import java.io.IOException;

import java.nio.file.DirectoryNotEmptyException;
import java.nio.file.NoSuchFileException;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.util.Date;

import javax.el.ELContext;
import javax.el.ExpressionFactory;

import javax.el.ValueExpression;


import javax.faces.application.FacesMessage;

import javax.faces.context.FacesContext;

import mnfworkcenterapp.model.module.common.MNFWorkcenterAM;


import mnfworkcenterapp.model.views.LOVActiveWorkStationVOImpl;
import mnfworkcenterapp.model.views.LOVParameterIdVOImpl;
import mnfworkcenterapp.model.views.MnfStationVwVOImpl;

import mnfworkcenterapp.model.views.MnfWcVOImpl;

import oracle.adf.share.ADFContext;

import oracle.jbo.ApplicationModule;
import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Aug 11 14:21:46 PDT 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MNFWorkcenterAMImpl extends ApplicationModuleImpl implements MNFWorkcenterAM {
    /**
     * This is the default constructor (do not remove).
     */
    public MNFWorkcenterAMImpl() {
    }


    /**
     * Container's getter for Transient1.
     * @return Transient1
     */
    public ViewObjectImpl getTransient1() {
        return (ViewObjectImpl) findViewObject("Transient1");
    }

    /**
     * Function to Set Global Parameters initially
     */
    public void setGloblParameter() {
        System.out.println("setGloblParameter");
        ViewObjectImpl voimpl = this.getLOVSearchWorkCenterView1();
        ViewObjectImpl paramIdVO = this.getLOVParameterIdVO();
        ViewObjectImpl transVo = this.getTransient1();
        ViewObjectImpl orgVo = this.getMnfOrganistion1();
        ViewObjectImpl empVo = this.getMnfSearchEmp1();
        ViewObjectImpl refWcVo = this.getLOVRefWc1();
        ViewObjectImpl attachEmpVo = this.getLOVAttachEmployee1();
        ViewObjectImpl attachParameterSetVo = this.getLOVParamSet1();
        ViewObjectImpl shiftVO = this.getMnfShift1();
        ViewObjectImpl wsVo = this.getLOVActiveWorkStation1();
        ViewObjectImpl isWSAllVo = this.getLOVIsWSGenerateAllowed1();
        orgVo.setNamedWhereClauseParam("BindCldId", getCldId().toString());
        orgVo.setNamedWhereClauseParam("BindHoOrgId", getHoOrgId().toString());
        orgVo.setNamedWhereClauseParam("BindSlcId", getSlocId()); //BindCldId, BindHoOrgId, BindSlcId
        transVo.setNamedWhereClauseParam("BindCldId", getCldId().toString());
        transVo.setNamedWhereClauseParam("BindSlocId", getSlocId());
        transVo.setNamedWhereClauseParam("BindHoId", getHoOrgId().toString());
        transVo.executeQuery();
        voimpl.setNamedWhereClauseParam("BindCldId", "-1");
        voimpl.setNamedWhereClauseParam("BindHoId", "-1");
        voimpl.setNamedWhereClauseParam("BindSlocId", -1);
        voimpl.executeQuery();
        ViewObjectImpl wsVOImpl = this.getMnfWs1();
        wsVOImpl.setNamedWhereClauseParam("BindCldId", getCldId().toString());
        wsVOImpl.setNamedWhereClauseParam("BindSlocId", getSlocId());
        wsVOImpl.setNamedWhereClauseParam("BindHoId", getHoOrgId().toString());
        wsVOImpl.setNamedWhereClauseParam("BindWorkCenterId", "");
        wsVOImpl.executeQuery();

        empVo.setNamedWhereClauseParam("BindCldId", getCldId().toString());
        empVo.setNamedWhereClauseParam("BindSlocId", getSlocId());
        empVo.setNamedWhereClauseParam("BindHoId", getHoOrgId().toString());
        empVo.executeQuery();

        attachEmpVo.setNamedWhereClauseParam("BindCldId", getCldId().toString());
        attachEmpVo.setNamedWhereClauseParam("BindSlocId", getSlocId());
        attachEmpVo.setNamedWhereClauseParam("BindHoId", getHoOrgId().toString());
        attachEmpVo.executeQuery();

        wsVo.setNamedWhereClauseParam("BindCldId", getCldId().toString());
        wsVo.setNamedWhereClauseParam("BindSlocId", getSlocId());
        wsVo.setNamedWhereClauseParam("BindHoId", getHoOrgId().toString());
        wsVo.setNamedWhereClauseParam("BindWcId", "");
        wsVo.executeQuery();

        attachParameterSetVo.setNamedWhereClauseParam("BindCldId", getCldId().toString());
        attachParameterSetVo.setNamedWhereClauseParam("BindSlocId", getSlocId());
        attachParameterSetVo.setNamedWhereClauseParam("BindHoOrgID", getHoOrgId().toString());
        attachParameterSetVo.executeQuery();

        paramIdVO.setNamedWhereClauseParam("BindCldId", getCldId().toString());
        paramIdVO.setNamedWhereClauseParam("BindSlocId", getSlocId());
        paramIdVO.setNamedWhereClauseParam("BindHoId", getHoOrgId().toString());
        paramIdVO.executeQuery();

        refWcVo.setNamedWhereClauseParam("BindCldId", getCldId().toString());
        refWcVo.setNamedWhereClauseParam("BindSlocId", getSlocId());
        refWcVo.setNamedWhereClauseParam("BindHoId", getHoOrgId().toString());
        refWcVo.executeQuery();
        
        shiftVO.setNamedWhereClauseParam("BindCldId", getCldId().toString());
        shiftVO.setNamedWhereClauseParam("BindHoId", getHoOrgId().toString());
        shiftVO.setNamedWhereClauseParam("BindSlocId", getSlocId());
        shiftVO.executeQuery();
        
        isWSAllVo.setNamedWhereClauseParam("BindCldId", getCldId().toString());
        isWSAllVo.setNamedWhereClauseParam("BindHoId", getHoOrgId().toString());
        isWSAllVo.setNamedWhereClauseParam("BindOrgId", getOrgId().toString());
        isWSAllVo.setNamedWhereClauseParam("BindSlocId", getSlocId());
        isWSAllVo.executeQuery();
        
        this.getLOVAllParameterSetForViewMode1().setNamedWhereClauseParam("BindCldId", getCldId().toString());
        this.getLOVAllParameterSetForViewMode1().setNamedWhereClauseParam("BindSlocId", getSlocId());
        this.getLOVAllParameterSetForViewMode1().setNamedWhereClauseParam("BindHoID", getHoOrgId().toString());
        this.getLOVAllParameterSetForViewMode1().executeQuery();
        
        this.getLOVAllParametersForViewMode1().setNamedWhereClauseParam("BindCldId", getCldId().toString());
        this.getLOVAllParametersForViewMode1().setNamedWhereClauseParam("BindSlocId", getSlocId());
        this.getLOVAllParametersForViewMode1().setNamedWhereClauseParam("BindHoId", getHoOrgId().toString());
        this.getLOVAllParametersForViewMode1().executeQuery();
        
        ADFContext.getCurrent().getPageFlowScope().put("isWSGenAllowed", isWSAllowed());
        System.out.println("Get Page Flow Scope Value : " + ADFContext.getCurrent().getPageFlowScope().get("isWSGenAllowed"));
    }

    public Object resolvEl(String data) {
        ADFContext adfCtx = ADFContext.getCurrent();
        ELContext elContext = adfCtx.getELContext();
        ValueExpression valueExp = adfCtx.getExpressionFactory().createValueExpression(elContext, data, Object.class);
        Object Message = valueExp.getValue(elContext);
        return Message;

    }
    /*getting page flow scope parameter methods.*/

    public Integer getSlocId() {
        System.out.println("sever id:-" + resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());

    }

    public StringBuffer getCldId() {
        System.out.println("cld id:-" + resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
        return new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());

    }

    public StringBuffer getOrgId() {
        System.out.println("org id:-" + resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
        return new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());

    }

    public StringBuffer getHoOrgId() {
        return new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString());

    }

    public Integer getUsrId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
    }

    /**
     * Function used to Copy Child Table Data
     */
    public String updateChildTable(String CldId, Integer SlocId, String HoOrgId, String OrgId, Integer Userid,
                                   String tablename, String newcode, String refcode, String docid, String refdocid,
                                   String wcdesc) {

        return (String) callStoredFunction(STRING, "MNF.FN_MNF_COPY_PRF(?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                           CldId, SlocId, HoOrgId, OrgId, Userid, tablename, newcode, refcode, docid,
                                           refdocid, wcdesc
    });

    }

    /**
     * Function used to Search WorkCenter on basis of Search criteria
     */
    public void searchWC() {
        System.out.println("Inside searchWC()");
        ViewObject wcVO = this.getMnfWc1();
        Row r = wcVO.getCurrentRow();
        String new_wc_id = r.getAttribute("WcId").toString();
        String ref_wc_id = r.getAttribute("RefWcId").toString();
        //String new_wc_desc = r.getAttribute("WcDesc").toString();
        System.out.println("New WorkCenter ID : " + new_wc_id + " and Reference WorkCenter ID : " + ref_wc_id);
        String x =
            updateChildTable(getCldId().toString(), getSlocId(), getHoOrgId().toString(), getOrgId().toString(),
                             getUsrId(), "MNF.MNF$WC", new_wc_id, ref_wc_id, null, null, null);
        if (x.equalsIgnoreCase("0")) {
            this.getMnfWcAttch1().executeQuery();
            this.getMnfWcPram1().executeQuery();
            this.getMnfWcRes1().executeQuery();
            this.getOrgMnfWc1().executeQuery();
            this.getMnfStationVw1().executeQuery();
            disableReservedMode();
        } else {
            System.out.println("Cannot copy data");
        }
    }

    /**
     * Function to search WorkCenters
     */
    public void search(String active) {
        System.out.println("in impl method Search :::::");
        ViewObjectImpl wcVoImpl = this.getLOVSearchWorkCenterView1();
        ViewCriteria vc = wcVoImpl.getViewCriteria("LOVSearchWorkCenterViewVOCriteria1");
        wcVoImpl.applyViewCriteria(vc);
        ViewObjectImpl transSearchVO = this.getTransient1();
        Row r = transSearchVO.first();
        wcVoImpl.setNamedWhereClauseParam("BindWcActiv", active != null && active.equals("B") ? null : active);
        wcVoImpl.setNamedWhereClauseParam("BindWcId", r.getAttribute("Wc_Id"));
        wcVoImpl.setNamedWhereClauseParam("BindCreatedBy", r.getAttribute("UserId"));
        wcVoImpl.setNamedWhereClauseParam("BindCreatedOn", r.getAttribute("transCreatedFrom"));
        wcVoImpl.setNamedWhereClauseParam("BindCreatedTo", r.getAttribute("transCreatedTo"));
        wcVoImpl.setNamedWhereClauseParam("BindDeptId", r.getAttribute("transDeptId"));
        wcVoImpl.setNamedWhereClauseParam("BindCldId", getCldId().toString());
        wcVoImpl.setNamedWhereClauseParam("BindHoId", getHoOrgId().toString());
        wcVoImpl.setNamedWhereClauseParam("BindSlocId", getSlocId());
        wcVoImpl.executeQuery();
    }

    /**
     * Function to reset search Results
     */
    public void mainSearchReset() {
        ViewObjectImpl wcVoImpl = this.getLOVSearchWorkCenterView1();
        ViewCriteria vc = wcVoImpl.getViewCriteria("LOVSearchWorkCenterViewVOCriteria1");
        wcVoImpl.applyViewCriteria(vc);
        wcVoImpl.setNamedWhereClauseParam("BindWcActiv", null);
        wcVoImpl.setNamedWhereClauseParam("BindDeptId", null);
        wcVoImpl.setNamedWhereClauseParam("BindWcId", null);
        wcVoImpl.setNamedWhereClauseParam("BindCreatedBy", null);
        wcVoImpl.setNamedWhereClauseParam("BindCreatedOn", null);
        wcVoImpl.setNamedWhereClauseParam("BindCreatedTo", null);
        wcVoImpl.setNamedWhereClauseParam("BindCldId", null);
        wcVoImpl.setNamedWhereClauseParam("BindHoId", null);
        wcVoImpl.setNamedWhereClauseParam("BindSlocId", null);
        wcVoImpl.executeQuery();
        ViewObjectImpl transSearchVO = this.getTransient1();
        Row r = transSearchVO.first();
        r.setAttribute("Wc_Id", null);
        r.setAttribute("transDeptId", null);
        r.setAttribute("UserName", null);
        r.setAttribute("transCreatedFrom", null);
        r.setAttribute("transCreatedTo", null);
        transSearchVO.executeQuery();
    }

    /**
     * Container's getter for LOVUser1.
     * @return LOVUser1
     */
    public ViewObjectImpl getLOVUser1() {
        return (ViewObjectImpl) findViewObject("LOVUser1");
    }

    /**
     * Function to filter transient vo
     */
    public String filterTransientVO(String name1) {
        System.out.println("function filterTransientVO" + name1);
        String id = null;
        ViewObjectImpl voimpl = this.getTransient1();
        Row[] ftr = voimpl.getFilteredRows("UserName", name1);
        if (ftr.length > 0) {
            if (ftr[0].getAttribute("UserId") != null) {
                id = ftr[0].getAttribute("UserId").toString();
            }
        }
        System.out.println("function filterTransientVO" + id);
        return id;
    }

    /**
     * Function to set Parameters
     */
    public void setWorkCenterViewParam(String cldId, String HoId, Integer slocId, String wcId) {
        System.out.println("wcId " + wcId);
        ViewObjectImpl wcVO = this.getMnfWc1();
        ViewCriteria vc = wcVO.getViewCriteria("MnfWcSearchWCVOCriteria");
        wcVO.applyViewCriteria(vc);
        wcVO.setNamedWhereClauseParam("searchwcidBind", wcId);
        wcVO.setNamedWhereClauseParam("BindHoOrgId", HoId);
        wcVO.setNamedWhereClauseParam("BindCldId", cldId);
        wcVO.setNamedWhereClauseParam("BindSlocId", slocId);
        wcVO.executeQuery();
        
        ViewObjectImpl refWcVo = this.getLOVRefWc1();
                refWcVo.setNamedWhereClauseParam("BindCldId", cldId);
                refWcVo.setNamedWhereClauseParam("BindSlocId", slocId);
                refWcVo.setNamedWhereClauseParam("BindHoId", HoId);
                refWcVo.executeQuery();
        
    }

    /**
     * Container's getter for MnfWc2.
     * @return MnfWc2
     */
    public MnfWcVOImpl getMnfWc1() {
        return (MnfWcVOImpl) findViewObject("MnfWc1");
    }


    /**
     * Container's getter for MnfWcPram2.
     * @return MnfWcPram2
     */
    public ViewObjectImpl getMnfWcPram1() {
        return (ViewObjectImpl) findViewObject("MnfWcPram1");
    }

    /**
     * Container's getter for MnfWcToMnfWcPramVL1.
     * @return MnfWcToMnfWcPramVL1
     */
    public ViewLinkImpl getMnfWcToMnfWcPramVL1() {
        return (ViewLinkImpl) findViewLink("MnfWcToMnfWcPramVL1");
    }

    /**
     * Container's getter for MnfWcRes2.
     * @return MnfWcRes2
     */
    public ViewObjectImpl getMnfWcRes1() {
        return (ViewObjectImpl) findViewObject("MnfWcRes1");
    }

    /**
     * Container's getter for MnfWcToMnfWcResVL1.
     * @return MnfWcToMnfWcResVL1
     */
    public ViewLinkImpl getMnfWcToMnfWcResVL1() {
        return (ViewLinkImpl) findViewLink("MnfWcToMnfWcResVL1");
    }

    /**
     * Container's getter for MnfDsAtt1.
     * @return MnfDsAtt1
     */
    public ViewObjectImpl getMnfDsAtt1() {
        return (ViewObjectImpl) findViewObject("MnfDsAtt1");
    }

    /**
     * Container's getter for WcCode1.
     * @return WcCode1
     */
    public ViewObjectImpl getWcCode1() {
        return (ViewObjectImpl) findViewObject("WcCode1");
    }

    public void createMnfWcPram(Integer usr_id, String param_id) {
    }

    /**
     * Container's getter for LOVParameterId1.
     * @return LOVParameterId1
     */
    public LOVParameterIdVOImpl getLOVParameterIdVO() {
        return (LOVParameterIdVOImpl) findViewObject("LOVParameterIdVO");
    }

    /**
     * Container's getter for MnfWcAttch1.
     * @return MnfWcAttch1
     */
    public ViewObjectImpl getMnfWcAttch1() {
        return (ViewObjectImpl) findViewObject("MnfWcAttch1");
    }

    /**
     * Container's getter for MnfWcToMnfWcAttchVL1.
     * @return MnfWcToMnfWcAttchVL1
     */
    public ViewLinkImpl getMnfWcToMnfWcAttchVL1() {
        return (ViewLinkImpl) findViewLink("MnfWcToMnfWcAttchVL1");
    }

    private static int STRING = Types.VARCHAR;

    /**
     * Function to attach file
     */
    public String getAttachFileName(Integer SlocId, String CldId, String HoOrgId, String OrgId, String tablename) {

        return (String) callStoredFunction(STRING, "app.FN_APP_GEN_FILE_ATTCH_ID(?,?,?,?,?)", new Object[] {
                                           SlocId, CldId, HoOrgId, OrgId, tablename
    });

    }

    /**Method to set file path and name
     * @param name
     * @param path
     */
    public void setFileData(String name, String path, String contTyp) {
        ViewObject fileVo = this.getMnfWcAttch1();
        Row newRow = fileVo.createRow();
        System.out.println("================" +
                           getAttachFileName(getSlocId(), getCldId().toString(), getHoOrgId().toString(),
                                             getOrgId().toString(), "MNF$WC$ATTCH"));
        newRow.setAttribute("AttchFlNm",
                            getAttachFileName(getSlocId(), getCldId().toString(), getHoOrgId().toString(),
                                              getOrgId().toString(), "MNF$WC$ATTCH"));
        newRow.setAttribute("DispFlNm", name);
        newRow.setAttribute("AttchFlPath", path);
        newRow.setAttribute("AttchFlExtn", contTyp);
        newRow.setAttribute("UsrIdCreate", getUsrId());
        newRow.setAttribute("UsrIdCreateDt", new Timestamp(System.currentTimeMillis()));
        fileVo.insertRow(newRow);
        this.getDBTransaction().commit();
        fileVo.executeQuery();
    }

    /** helper method for executing DB function
     * @param sqlReturnType return type of database function
     * @param stmt statement of executing function in database quary
     * @param bindVars input and out parameter of database function.
     * @return
     */
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    System.out.println("Bind Variable : "+bindVars[z]+"\n");
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.executeUpdate();
            return st.getObject(1);
        } catch (SQLException e) {
            e.printStackTrace();
            int end = e.getMessage().indexOf("\n");
            throw new JboException(e.getMessage().substring(11, end));

        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    throw new JboException(e.getMessage());
                }
            }
        }
    }

    /**
     * Container's getter for OrgMnfWc1.
     * @return OrgMnfWc1
     */
    public ViewObjectImpl getOrgMnfWc1() {
        return (ViewObjectImpl) findViewObject("OrgMnfWc1");
    }

    /**
     * Container's getter for MnfWcToOrgMnfWcVL1.
     * @return MnfWcToOrgMnfWcVL1
     */
    public ViewLinkImpl getMnfWcToOrgMnfWcVL1() {
        return (ViewLinkImpl) findViewLink("MnfWcToOrgMnfWcVL1");
    }

    /**
     * Container's getter for MnfWcSearch1.
     * @return MnfWcSearch1
     */
    public ViewObjectImpl getMnfWcSearch1() {
        return (ViewObjectImpl) findViewObject("MnfWcSearch1");
    }

    /**
     * Container's getter for MnfWcAdd1.
     * @return MnfWcAdd1
     */
    public ViewObjectImpl getMnfWcAdd1() {
        return (ViewObjectImpl) findViewObject("MnfWcAdd1");
    }

    /**
     * Function to delete attach file row
     */
    public void deleteAttachFileRow(String path) {
        RowSetIterator rowSetIterator = null;
        try{
        //System.out.println("File path in AMimpl : " + path);
        String filePath = "";
        String fileNm = "",cldId = "",horgId ="",wcId ="";
        int slocId =1;
        ViewObjectImpl attch1 = this.getMnfWcAttch1();
        Row[] rows = attch1.getFilteredRows("AttchFlPath", path);
            System.out.println(rows.length);
            if(rows.length>0){
               fileNm = (String)rows[0].getAttribute("AttchFlNm");
               cldId  = (String)rows[0].getAttribute("CldId");
               horgId = (String)rows[0].getAttribute("HoOrgId");
               slocId = Integer.parseInt(rows[0].getAttribute("SlocId").toString());
               wcId = (String)rows[0].getAttribute("WcId");
            }
                        rowSetIterator = attch1.getRowSetIterator();
                            Key key = new Key(new Object[] { fileNm,cldId,horgId,slocId,wcId });
                            Row[] ro = rowSetIterator.findByKey(key, 1);
                            //System.out.println("Filtered Row : "+ro.length);
                            Row row = rowSetIterator.findByKey(key, 1)[0];
                            rowSetIterator.setCurrentRow(row);
        //Row r = this.getMnfWcAttch1().getCurrentRow();
        //filePath = (String)r.getAttribute("AttchFlPath");
        //System.out.println("Current Row File Path : "+filePath);
        filePath = (String)row.getAttribute("AttchFlPath");
        //System.out.println("Row File Path : "+filePath);                
        File f = new File(filePath);
            if(f.exists()){
            boolean success = f.delete();
            System.out.println("File Deleted");
            }
        } catch (Exception x) {
            System.err.format("%s: no such" + " file or directory%n", path);
        }
        rowSetIterator.removeCurrentRow();
    }


    /**
     * Container's getter for MnfStationVw3.
     * @return MnfStationVw3
     */
    public MnfStationVwVOImpl getMnfStationVw1() {
        return (MnfStationVwVOImpl) findViewObject("MnfStationVw1");
    }

    /**
     * Container's getter for MnfWcToMnfStationVwVL2.
     * @return MnfWcToMnfStationVwVL2
     */
    public ViewLinkImpl getMnfWcToMnfStationVwVL2() {
        return (ViewLinkImpl) findViewLink("MnfWcToMnfStationVwVL2");
    }

    /**
     * Container's getter for LOVSearchWorkCenterView1.
     * @return LOVSearchWorkCenterView1
     */
    public ViewObjectImpl getLOVSearchWorkCenterView1() {
        return (ViewObjectImpl) findViewObject("LOVSearchWorkCenterView1");
    }

    /**
     * Function to check duplicacy
     */
    public String chkDuplicate(String tab, String val) {
        System.out.println("Inside AMIMPL to check Duplicacy !!");
        String yes = "";
        if (tab.equals("OrgDesc") || tab == "OrgDesc") {
            yes =  duplicateOrgID(val);
        }
        if (tab.equals("Param") || tab == "Param") {
            yes =  duplicateParamID(val);
        }
        if (tab.equals("Employee") || tab == "Employee") {
            //yes =  duplicateEmployeeID(val);
        }
        return yes;
    }

    /**
     * Function to check duplicate added employee
     */
    public String duplicateEmployeeID(String shiftVal, String empVal) {
        Object shiftId = null;
        if (shiftVal != null) {
            ViewObjectImpl shiftVo = this.getMnfShift1();
            if(shiftVo.getFilteredRows("ShiftNm", shiftVal).length > 0){
                shiftId = shiftVo.getFilteredRows("ShiftNm", shiftVal)[0].getAttribute("ShiftId");
                ViewObjectImpl impl = this.getMnfWcRes1();
                RowQualifier rq = new RowQualifier("ShiftId= '" + shiftId + "' AND WcEmpId= " + empVal);
                Row[] filteredRows = impl.getFilteredRows(rq);
                if(filteredRows.length>0 && filteredRows[0]!=impl.getCurrentRow()){
                    return "true";
                }
            }
        }
        return "false";
    }

    /**
     * Function used to check Display Id In DataBse at the time of Save
     */
    public String checkDisplayIdInDatabase() {
        
        String newWCId = getMnfWc1().getCurrentRow().getAttribute("WcId").toString();
        Object retval;
        retval=ADFModelUtils.callFunction(this,new StringBuilder("fn_mnf_is_prf_id_exists(?,?,?,?,?,?)"), new Object[]{
                                            EbizParams.GLBL_APP_CLD_ID(),EbizParams.GLBL_APP_SERV_LOC(),
                                            EbizParams.GLBL_HO_ORG_ID(),25504,newWCId,
                                            EbizParams.GLBL_APP_USR()
                                            }, Types.VARCHAR);
        return retval.toString();
    }


    /**
     * Function to check duplicate Organiztion added
     */
    private String duplicateOrgID(String orgVal) {
        String OrgId = null;

        if (orgVal != null) {
            System.out.println("Organization Selected is : " + orgVal);
            ViewObjectImpl Orgvoimpl = this.getMnfOrganistion1();
            Orgvoimpl.setNamedWhereClauseParam("BindCldId", getCldId().toString());
            Orgvoimpl.setNamedWhereClauseParam("BindHoOrgId", getHoOrgId().toString());
            Orgvoimpl.setNamedWhereClauseParam("BindSlcId", getSlocId());
            Orgvoimpl.executeQuery();
            Row[] orgDesc = Orgvoimpl.getFilteredRows("OrgDesc", orgVal);
            if (orgDesc.length > 0) {
                if (orgDesc[0].getAttribute("OrgId") != null)
                    return orgDesc[0].getAttribute("OrgId").toString();
            }
        }

        return OrgId;

    }

    /**
     * Function to check Duplicate Parameter Added
     */
    private String duplicateParamID(String paramVal) {
        String paramId = null;

        if (paramVal != null) {
            System.out.println("Param Selected is : " + paramVal);
            ViewObjectImpl paramvoimpl = this.getLOVParameterIdVO();
            paramvoimpl.setNamedWhereClauseParam("BindCldId", getCldId().toString());
            paramvoimpl.setNamedWhereClauseParam("BindHoId", getHoOrgId().toString());
            paramvoimpl.setNamedWhereClauseParam("BindSlocId", getSlocId());
            paramvoimpl.executeQuery();
            Row[] paramDesc = paramvoimpl.getFilteredRows("ParamNme", paramVal);
            if (paramDesc.length > 0) {
                if (paramDesc[0].getAttribute("ParamId") != null && paramDesc[0]!=paramvoimpl.getCurrentRow())
                    return paramDesc[0].getAttribute("ParamId").toString();
            }
        }

        return paramId;

    }

    /**
     * Container's getter for MnfOrganistion1.
     * @return MnfOrganistion1
     */
    public ViewObjectImpl getMnfOrganistion1() {
        return (ViewObjectImpl) findViewObject("MnfOrganistion1");
    }


    public String chkForExistingWs(String wcId)
    {
        ViewObjectImpl workStationVO = this.getMnfWs1();
        workStationVO.setNamedWhereClauseParam("BindCldId", getCldId().toString());
        workStationVO.setNamedWhereClauseParam("BindHoId", getHoOrgId().toString());
        workStationVO.setNamedWhereClauseParam("BindSlocId", getSlocId());
        workStationVO.setNamedWhereClauseParam("BindWorkCenterId", wcId);
        workStationVO.executeQuery();
        Row[] row = workStationVO.getAllRowsInRange();
        System.out.println("Row Found : "+row.length);
        if(row.length > 0){
            return "Y";
        }else
        return "N";
    }





    /**
     * Function used to Generate WorkStation from WorkCenter View
     */
    public String generateWorkStation(String wsId, String wcId) {
        ViewObjectImpl workStationVO = this.getMnfWs1();
        workStationVO.setNamedWhereClauseParam("BindCldId", getCldId().toString());
        workStationVO.setNamedWhereClauseParam("BindHoId", getHoOrgId().toString());
        workStationVO.setNamedWhereClauseParam("BindSlocId", getSlocId());
        workStationVO.setNamedWhereClauseParam("BindWorkCenterId", wcId);
        workStationVO.executeQuery();
        Row[] row = workStationVO.getAllRowsInRange();
        /* RowQualifier rq= new RowQualifier(workStationVO);
           rq.setWhereClause("CldId='"+getCldId().toString()+"' and SlocId="+getSlocId()+" and HoOrgId='"+getHoOrgId().toString()+
                              "' and WcId='"+wcId+"'");
            System.out.println(rq.getExprStr());
            Row[] row = workStationVO.getFilteredRows(rq); */
            System.out.println("Row Found : "+row.length);
            if(row.length==0){
                //workStationVO.setNamedWhereClauseParam("BindWorkCenterId", wcId);
                Row r = workStationVO.createRow();
                ViewObject orgWsVO = this.getOrgMnfWs1();
                Row orgR = orgWsVO.createRow();
                orgWsVO.insertRow(orgR);
                workStationVO.insertRow(r);
                r.setAttribute("CldId", getCldId().toString());
                r.setAttribute("SlocId", getSlocId());
                r.setAttribute("HoOrgId", getHoOrgId().toString());
                r.setAttribute("WsId", wsId);
                r.setAttribute("WcId", wcId);
                r.setAttribute("WsType", 6);
                r.setAttribute("WsBasis", 16);
                r.setAttribute("WsCapType", 14);
                r.setAttribute("WsLineType", 11);
                r.setAttribute("WsActv", "Y");
                r.setAttribute("WsDesc", wsId);
                r.setAttribute("WsDefFlg", "Y");
                r.setAttribute("UsrIdCreate", getUsrId());
                r.setAttribute("UsrIdCreateDt", new Timestamp(System.currentTimeMillis()));
                workStationVO.executeQuery();
                orgR.setAttribute("CldId", getCldId().toString());
                orgR.setAttribute("SlocId", getSlocId());
                orgR.setAttribute("HoOrgId", getHoOrgId().toString());
                orgR.setAttribute("OrgId", getHoOrgId().toString());
                orgR.setAttribute("WsId", wsId);
                orgR.setAttribute("WsActv", "Y");
                orgR.setAttribute("UsrIdCreate", getUsrId());
                orgR.setAttribute("UsrIdCreateDt", new Timestamp(System.currentTimeMillis()));
                orgWsVO.executeQuery();
                this.getDBTransaction().commit();
                return null;
            }else{
                return null;
            }
    }

    /**
     * Container's getter for LOVWorkStation1.
     * @return LOVWorkStation1
     */
    public ViewObjectImpl getLOVWorkStation1() {
        return (ViewObjectImpl) findViewObject("LOVWorkStation1");
    }

    /**
     * Container's getter for MnfWs1.
     * @return MnfWs1
     */
    public ViewObjectImpl getMnfWs1() {
        return (ViewObjectImpl) findViewObject("MnfWs1");
    }

    /**
     * Container's getter for MnfSearchEmp1.
     * @return MnfSearchEmp1
     */
    public ViewObjectImpl getMnfSearchEmp1() {
        return (ViewObjectImpl) findViewObject("MnfSearchEmp1");
    }

    /**
     * Function to attach Head Organization by default
     */
    public void attachDefaultHo() {
        Row row = this.getOrgMnfWc1().createRow();
        row.setAttribute("OrgId", getHoOrgId().toString());
        row.setAttribute("WcActv", "Y");
        this.getOrgMnfWc1().insertRow(row);
        this.getOrgMnfWc1().setCurrentRow(row);
    }

    /**
     * Function to replicate Organizations
     */
    public void excuteFnMnfPrfOrgReplication() {
        deleteAddedOrgs("OrgMnfWc1");
        RowSetIterator rSetIter = getMnfOrganistion1().createRowSetIterator(null);
        Row r = null;

        while (rSetIter.hasNext()) {
            r = rSetIter.next();
            System.out.println("org---------> "+r.getAttribute("OrgId"));
            createOrgMnfWc(r.getAttribute("OrgId").toString());
        }
        disableReservedMode();
        //this.getOrgMnfWc1().executeQuery();
    }

    /**
     * Function to delete already added Organizations
     */
    public void deleteAddedOrgs(String voName) {
        while (findViewObject(voName).createRowSetIterator(null).hasNext()) {

            findViewObject(voName).createRowSetIterator(null).next().remove();

            System.out.println(voName + " row removed ");
        }
    }

    /**
     * Function to call database function of replicate organizations
     */
    public String getReplicated() {
        /* Row row = this.getOrgMnfWc1().createRow();
        row.setAttribute("OrgId", getHoOrgId().toString());
        row.setAttribute("WcActv", "Y");
        this.getOrgMnfWc1().insertRow(row);
        this.getOrgMnfWc1().setCurrentRow(row);
        Row r = this.getMnfWc1().getCurrentRow();
        String wcId = r.getAttribute("WcId").toString();
        return (String) callStoredFunction(Types.VARCHAR, "MNF.FN_MNF_PRF_ORG_REPLICATE(?,?,?,?,?,?,?)", new Object[] {
                                           getCldId().toString(), getSlocId(), getHoOrgId().toString(),
                                           getHoOrgId().toString(), getUsrId(), wcId, "MNF.ORG$MNF$WC"
    }); */
        return "";
    }

    /**
     * Function to get unique File ID
     */
    public String getUpFileId(String cldId, Integer slcId, String hoOrgId, String orgId) {

        Object fnRetVal;

        try {
            fnRetVal = callStoredFunction(Types.VARCHAR, "APP.FN_APP_GEN_FILE_ATTCH_ID(?,?,?,?,?)", new Object[] {
                                          slcId, cldId, hoOrgId, orgId, "MNF$WC$ATTCH"
            });

            if (fnRetVal != null) {

                if (fnRetVal.equals(-1)) {
                    showFacesMsg("Error while fetching file Id details", null, FacesMessage.SEVERITY_ERROR, null);
                }

                return fnRetVal.toString();
            }

        } catch (Exception e) {

            e.printStackTrace();

        }
        showFacesMsg("Error while fetching file Id details", null, FacesMessage.SEVERITY_ERROR, null);

        return "0";
    }

    /**
     * Method to get default file location
     * **/
    public String getUpFilePath(Integer slcId) {
        Object fnRetVal;

        try {
            fnRetVal = callStoredFunction(Types.VARCHAR, "APP.FN_GET_APP_DOC_ATTACH_PATH(?)", new Object[] { slcId });

            if (fnRetVal != null) {

                if (fnRetVal.equals(-1)) {
                    showFacesMsg("Error while fetching file path details", null, FacesMessage.SEVERITY_ERROR, null);
                }

                return fnRetVal.toString();
            }

        } catch (Exception e) {

            e.printStackTrace();

        }
        showFacesMsg("Error while fetching file path details", null, FacesMessage.SEVERITY_ERROR, null);

        return null;
    }

    /**
     * Function to create row in file attachment vo
     */
    public String createAttchmntRow(String contentTyp, String fileNm, String extn) {

        String path = getUpFilePath(getSlocId());
        System.out.println("path " + path);

        String fileId =
            getUpFileId(getCldId().toString(), getSlocId(), getHoOrgId().toString(), getHoOrgId().toString());
        System.out.println("fileId " + fileId);

        Row r = getMnfWcAttch1().createRow();

        System.out.println("contentTyp " + contentTyp);
        r.setAttribute("AttchFlExtn", contentTyp);
        r.setAttribute("DispFlNm", fileNm);
        r.setAttribute("AttchFlNm", fileId);
        r.setAttribute("AttchFlPath", path + fileId + extn);

        getMnfWcAttch1().insertRow(r);

        getMnfWcAttch1().executeQuery();
        return path + fileId;
    }

    public void showFacesMsg(String msgHdr, String msgDtl, javax.faces.application.FacesMessage.Severity msgSeverity,
                             String msgMode) {

        FacesMessage msg = new FacesMessage(msgHdr);
        msg.setDetail(msgDtl);
        msg.setSeverity(msgSeverity);
        FacesContext.getCurrentInstance().addMessage(null, msg);

    }

    /**
     * Container's getter for LOVAttachEmployee1.
     * @return LOVAttachEmployee1
     */
    public ViewObjectImpl getLOVAttachEmployee1() {
        return (ViewObjectImpl) findViewObject("LOVAttachEmployee1");
    }

    /**
     * Container's getter for LOVActiveWorkStation1.
     * @return LOVActiveWorkStation1
     */
    public LOVActiveWorkStationVOImpl getLOVActiveWorkStation1() {
        return (LOVActiveWorkStationVOImpl) findViewObject("LOVActiveWorkStation1");
    }

    /**
     * Container's getter for OrgMnfWs1.
     * @return OrgMnfWs1
     */
    public ViewObjectImpl getOrgMnfWs1() {
        return (ViewObjectImpl) findViewObject("OrgMnfWs1");
    }

    /**
     * Container's getter for LOVParamSet1.
     * @return LOVParamSet1
     */
    public ViewObjectImpl getLOVParamSet1() {
        return (ViewObjectImpl) findViewObject("LOVParamSet1");
    }

    /**
     * Container's getter for LOVRefWc1.
     * @return LOVRefWc1
     */
    public ViewObjectImpl getLOVRefWc1() {
        return (ViewObjectImpl) findViewObject("LOVRefWc1");
    }

    /**
     * Method to create OrgMnfRtVO rows for given values.
     * **/
    public void createOrgMnfWc(String org) {
        Row r = getOrgMnfWc1().createRow();
        r.setAttribute("OrgId", org);
        r.setAttribute("WcActv", "Y");
        getOrgMnfWc1().insertRow(r);
    }


    /**
     * Method to save Organization profile for route.
     * New profile is created automatically for Head Organization.
     * **/

    public void beforeSave() {
        Integer orgProfileCnt = 0;
        RowSetIterator rsetIter = getOrgMnfWc1().createRowSetIterator(null);
        Row r = null;
        while (rsetIter.hasNext()) {
            r = rsetIter.next();
            if (r.getAttribute("OrgId").equals(getHoOrgId().toString())) {
                orgProfileCnt = orgProfileCnt + 1;
            }
        }
        rsetIter.closeRowSetIterator();
        if (orgProfileCnt.compareTo(0) == 0) {
            createOrgMnfWc(getHoOrgId().toString());
        }
        disableReservedMode();
    }

    public void enableReservedMode() {
        if (getReleaseLevel() != ApplicationModule.RELEASE_LEVEL_RESERVED) {
            System.out.println("Setting release level as RELEASE_LEVEL_RESERVED.....");

            setReleaseLevel(ApplicationModule.RELEASE_LEVEL_RESERVED);
        }
    }

    public void disableReservedMode() {
        if (getReleaseLevel() != ApplicationModule.RELEASE_LEVEL_MANAGED) {
            System.out.println("Setting release level as RELEASE_LEVEL_MANAGED.....");

            setReleaseLevel(ApplicationModule.RELEASE_LEVEL_MANAGED);
        }
    }

    /**
     * Container's getter for MnfShift1.
     * @return MnfShift1
     */
    public ViewObjectImpl getMnfShift1() {
        return (ViewObjectImpl) findViewObject("MnfShift1");
    }
    
    public String IsInchargeExist(String shift, String workCenterId) {
        Integer shiftInchargeCnt = 0;
        RowSetIterator rsetIter = getMnfWcRes1().createRowSetIterator(null);
        Row curRow = getMnfWcRes1().getCurrentRow();
        Row r = null;
        while (rsetIter.hasNext()) {
            r = rsetIter.next();
            if(curRow!=null && !r.equals(curRow)){
                if (r.getAttribute("PicFlg").toString().equalsIgnoreCase("Y") &&
                    r.getAttribute("TransShiftDesc").toString().equalsIgnoreCase(shift) &&
                    r.getAttribute("WcId").toString().equalsIgnoreCase(workCenterId)) {
                    shiftInchargeCnt = shiftInchargeCnt + 1;
                }
            }
        }
        rsetIter.closeRowSetIterator();
        if (shiftInchargeCnt > 0) {
            return "false";
        }
        return "true";
    }
    
    /**
     * Function to check whether Parameter / Manpower /Shift deletion allowed in this work center
     */
    public String isDeletionAllowed(String workCenterId, String del_type) {
        //Function Parameters - (p_cld_id, p_sloc_id, p_ho_org_id, p_src_type-global doc id, 
        //                       p_prf_id-profile id, p_usr_id, p_det_type)
        try {
            Object fnRetVal = callStoredFunction(Types.VARCHAR, "MNF.fn_mnf_is_det_deletable(?,?,?,?,?,?,?)", new Object[] {getCldId().toString(), getSlocId(), getHoOrgId().toString(), 25504, workCenterId, getUsrId(), del_type});
            if (fnRetVal != null) {
                return fnRetVal.toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        showFacesMsg("Error while fetching file Id details", null, FacesMessage.SEVERITY_ERROR, null);
        return "0";
    }
    
    /**
     * Function to check whether this work center is in use
     */
    public String isPrfInUse(String workCenterId) {
        //Function Parameters - (p_cld_id, p_sloc_id, p_ho_org_id, p_src_type-global doc id, 
        //                       p_prf_id-profile id, p_usr_id)
        try {
            Object fnRetVal = callStoredFunction(Types.VARCHAR, "MNF.fn_mnf_is_prf_in_use(?,?,?,?,?,?)", new Object[] {getCldId().toString(), getSlocId(), getHoOrgId().toString(), 25504, workCenterId, getUsrId()});
            if (fnRetVal != null) {
                return fnRetVal.toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        showFacesMsg("Error while fetching file Id details", null, FacesMessage.SEVERITY_ERROR, null);
        return "0";
    }
    
    public String duplicateWCName(String wcId, String wcName){
        try {
            Object fnRetVal = callStoredFunction(Types.VARCHAR, "MNF.fn_pre_nm_exist(?,?,?,?,?,?)", new Object[] {getCldId().toString(), getSlocId(), getHoOrgId().toString(), "WC", wcName, wcId});
            if (fnRetVal != null && fnRetVal.toString().equalsIgnoreCase("Y")) {
                return "yes";
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return "0";
    }

    /**
     * Container's getter for LOVIsWSGenerateAllowed1.
     * @return LOVIsWSGenerateAllowed1
     */
    public ViewObjectImpl getLOVIsWSGenerateAllowed1() {
        return (ViewObjectImpl) findViewObject("LOVIsWSGenerateAllowed1");
    }
    
    private String isWSAllowed(){
        ViewObject isWS = this.getLOVIsWSGenerateAllowed1();
        isWS.executeQuery();
        Row r = isWS.getRowAtRangeIndex(0);
        if(r!=null){
            System.out.println("WorkStation Allowed : " + (String) r.getAttribute("GenWsFrmWc"));
            String flag = (String) r.getAttribute("GenWsFrmWc");
            return flag;
        }
        return "";
    }
    
    public boolean duplicateParam(String paramName) {
        RowSetIterator rSetIter = getMnfWcPram1().createRowSetIterator(null);
        Integer countVal = 0;
        if (paramName != null) {
            while (rSetIter.hasNext()) {
                Row r = rSetIter.next();
                if (paramName.equals(r.getAttribute("TransParamDesc"))) {
                    System.out.println("1 param Found : " + paramName.equals(r.getAttribute("TransParamDesc")));
                    countVal = countVal + 1;
                }
            }
            rSetIter.closeRowSetIterator();
            Row currentRow = getMnfWcPram1().getCurrentRow();
     
            if (paramName.equals(currentRow.getAttribute("TransParamDesc"))) {
                System.out.println("2 param Id Found : " + paramName.equals(currentRow.getAttribute("TransParamDesc")));
                countVal = countVal - 1;
            }
        }
     
        return countVal == 1 ? true : false;
    }
    
    public boolean duplicateEmp(String shiftName, String empName) {
        RowSetIterator rSetIter = getMnfWcRes1().createRowSetIterator(null);
        Integer countVal = 0;
        if (shiftName != null && empName!=null) {
            while (rSetIter.hasNext()) {
                Row r = rSetIter.next();
                if (shiftName.equals(r.getAttribute("TransShiftDesc")) && empName.equals(r.getAttribute("TransEmpname"))) {
                    System.out.println("1 emp Found : " + shiftName.equals(r.getAttribute("TransShiftDesc")));
                    countVal = countVal + 1;
                }
            }
            rSetIter.closeRowSetIterator();
            Row currentRow = getMnfWcRes1().getCurrentRow();
     
            if (shiftName.equals(currentRow.getAttribute("TransShiftDesc")) && empName.equals(currentRow.getAttribute("TransEmpname"))) {
                countVal = countVal - 1;
            }
        }
     
        return countVal == 1 ? true : false;
    }

    /**
     * Container's getter for LOVAllParametersForViewMode1.
     * @return LOVAllParametersForViewMode1
     */
    public ViewObjectImpl getLOVAllParametersForViewMode1() {
        return (ViewObjectImpl) findViewObject("LOVAllParametersForViewMode1");
    }

    /**
     * Container's getter for LOVAllParameterSetForViewMode1.
     * @return LOVAllParameterSetForViewMode1
     */
    public ViewObjectImpl getLOVAllParameterSetForViewMode1() {
        return (ViewObjectImpl) findViewObject("LOVAllParameterSetForViewMode1");
    }

    /**
     * Container's getter for LovReqArea1.
     * @return LovReqArea1
     */
    public ViewObjectImpl getLovReqArea1() {
        return (ViewObjectImpl) findViewObject("LovReqArea1");
    }
    public void filterLovData(){
            Row cRow = this.getMnfWc1().getCurrentRow();
            //Row oRow = this.getOrgMnfWc1().getCurrentRow();
            ViewObjectImpl impl = this.getLovReqArea1();
            System.out.println("Dept : "+cRow.getAttribute("WcDeptId"));
            impl.setNamedWhereClauseParam("CldIdBind", getCldId());
            impl.setNamedWhereClauseParam("DeptBind", (String)cRow.getAttribute("WcDeptId"));
            impl.setNamedWhereClauseParam("OrgIdBind", getOrgId());
            impl.setNamedWhereClauseParam("SlocIdBind", getSlocId());
            impl.executeQuery();
        }
}
