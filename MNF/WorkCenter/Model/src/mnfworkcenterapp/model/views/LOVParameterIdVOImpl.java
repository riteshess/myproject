package mnfworkcenterapp.model.views;

import java.sql.PreparedStatement;
import java.sql.ResultSet;

import java.sql.SQLException;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import java.util.Map;

import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.domain.Number;
import oracle.jbo.server.QueryCollection;
import oracle.jbo.server.SQLBuilder;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.ViewRowSetImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Oct 07 10:56:22 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class LOVParameterIdVOImpl extends ViewObjectImpl {
    /**
     * This is the default constructor (do not remove).
     */
    public LOVParameterIdVOImpl() {
    }

    /**
     * Returns the bind variable value for BindCldId.
     * @return bind variable value for BindCldId
     */
    public String getBindCldId() {
        return (String) getNamedWhereClauseParam("BindCldId");
    }

    /**
     * Sets <code>value</code> for bind variable BindCldId.
     * @param value value to bind as BindCldId
     */
    public void setBindCldId(String value) {
        setNamedWhereClauseParam("BindCldId", value);
    }

    /**
     * Returns the bind variable value for BindHoId.
     * @return bind variable value for BindHoId
     */
    public String getBindHoId() {
        return (String) getNamedWhereClauseParam("BindHoId");
    }

    /**
     * Sets <code>value</code> for bind variable BindHoId.
     * @param value value to bind as BindHoId
     */
    public void setBindHoId(String value) {
        setNamedWhereClauseParam("BindHoId", value);
    }

    /**
     * Returns the bind variable value for BindSlocId.
     * @return bind variable value for BindSlocId
     */
    public Integer getBindSlocId() {
        return (Integer) getNamedWhereClauseParam("BindSlocId");
    }

    /**
     * Sets <code>value</code> for bind variable BindSlocId.
     * @param value value to bind as BindSlocId
     */
    public void setBindSlocId(Integer value) {
        setNamedWhereClauseParam("BindSlocId", value);
    }

    /**
     * executeQueryForCollection - overridden for custom java data source support.
     */
    @Override
    protected void executeQueryForCollection(Object qc, Object[] params, int noUserParams) {
        super.executeQueryForCollection(qc, params, noUserParams);
    }

    /**
     * hasNextForCollection - overridden for custom java data source support.
     */
    @Override
    protected boolean hasNextForCollection(Object qc) {
        boolean bRet = super.hasNextForCollection(qc);
        return bRet;
    }

    /**
     * createRowFromResultSet - overridden for custom java data source support.
     */
    @Override
    protected ViewRowImpl createRowFromResultSet(Object qc, ResultSet resultSet) {
        ViewRowImpl value = super.createRowFromResultSet(qc, resultSet);
        return value;
    }

    /**
     * getQueryHitCount - overridden for custom java data source support.
     */
    @Override
    public long getQueryHitCount(ViewRowSetImpl viewRowSet) {
        long value = super.getQueryHitCount(viewRowSet);
        return value;
    }

    /**
     * getCappedQueryHitCount - overridden for custom java data source support.
     */
    @Override
    public long getCappedQueryHitCount(ViewRowSetImpl viewRowSet, Row[] masterRows, long oldCap, long cap) {
        long value = super.getCappedQueryHitCount(viewRowSet, masterRows, oldCap, cap);
        return value;
    }
    
    protected boolean showSql = true;
         @Override
            public long getEstimatedRowCount() {
                long init = System.currentTimeMillis();
                long counter = super.getEstimatedRowCount();
                long end = System.currentTimeMillis() - init;
                
               if (showSql)
                   System.out.println("VO: " + this.getName() + ", from AM: " + this.getApplicationModule().getName() + ", executes SQL Count in: " + end + " (miliseconds)");
                
                return counter;
            }
        @Override
           protected void bindParametersForCollection(QueryCollection queryCollection, Object[] object, PreparedStatement preparedStatement) throws SQLException, SQLException,
                                                                                           SQLException {
               // TODO Implement this method
             if (showSql)
                 logQueryStatementAndBindParameters(queryCollection, object);
               
               super.bindParametersForCollection(queryCollection, object, preparedStatement);
           } 
            
           /**
            * method used to introspect the query produced at runtime by the vo.
            * @param qc
            * @param params
            */
             private void logQueryStatementAndBindParameters(QueryCollection qc, Object[] params) {
               String vrsiName = null;
               if (qc != null) {
                   ViewRowSetImpl vrsi = qc.getRowSetImpl();
                   vrsiName = vrsi.isDefaultRS() ? "<Default>" : vrsi.getName();
               }
               String voName = getName();
               String voDefName = getDefFullName();
               if (qc != null) {
                  // System.out.println("----[Exec query for VO=" + voName + ", RS=" + vrsiName + "]----");
               } else {
                  // System.out.println("----[Exec COUNT query for VO=" + voName + "]----");
               }
              // System.out.println("VO Definition Name = {0}"+ voDefName);
      
               String dbVCs = appliedCriteriaString(ViewCriteria.CRITERIA_MODE_QUERY);
               if (!dbVCs.isEmpty()) {
                  // System.out.println("Applied Database VCs = {0} "+ dbVCs);
               }
      
               String memVCs = appliedCriteriaString(ViewCriteria.CRITERIA_MODE_CACHE);
               if (!memVCs.isEmpty()) {
                   //System.out.println("Applied In-Memory VCs = {0} "+ memVCs);
               }
      
               String bothVCs = appliedCriteriaString(ViewCriteria.CRITERIA_MODE_QUERY | ViewCriteria.CRITERIA_MODE_CACHE);
               if (!bothVCs.isEmpty()) {
                  // System.out.println("Applied 'Both' VCs = {0}"+ bothVCs);
               }
      
               System.out.println("Generated query : {0}"+ getQuery());
      
               if (params != null) {
                   if (getBindingStyle() == SQLBuilder.BINDING_STYLE_ORACLE_NAME) {
                       Map<String, Object> bindsMap = new HashMap<String, Object>(params.length);
                       for (Object param : params) {
                           Object[] nameValue = (Object[])param;
                           String name = (String)nameValue[0];
                           Object value = nameValue[1];
                           bindsMap.put(name, value);
                       }
                       System.out.println("Bind Variables : {0}"+ bindsMap);
                   }
               }
           }
      
           @Override
           public ViewRowImpl createInstanceFromResultSet(QueryCollection queryCollection, ResultSet resultSet) {
               ViewRowImpl row = super.createInstanceFromResultSet(queryCollection, resultSet);
               if (showSql)
                  System.out.println("Fetching " + this.getViewObject().getName() + " row with the key " + row.getKey());
               return row;
      
           }
      
           private String appliedCriteriaString(int mode) {
               ViewCriteria[] appliedCriterias = getApplyViewCriterias(mode);
               String result = "";
               if (appliedCriterias != null && appliedCriterias.length > 0) {
                   List<String> list = new ArrayList<String>(appliedCriterias.length);
                   for (ViewCriteria vc : appliedCriterias) {
                       list.add(vc.getName());
                   }
                   result = list.toString();
               }
               return result;
           }

    /**
     * Returns the bind variable value for ParamSetTypeBindVar.
     * @return bind variable value for ParamSetTypeBindVar
     */
    public Number getParamSetTypeBindVar() {
        return (Number) getNamedWhereClauseParam("ParamSetTypeBindVar");
    }

    /**
     * Sets <code>value</code> for bind variable ParamSetTypeBindVar.
     * @param value value to bind as ParamSetTypeBindVar
     */
    public void setParamSetTypeBindVar(Number value) {
        setNamedWhereClauseParam("ParamSetTypeBindVar", value);
    }

    /**
     * Returns the bind variable value for ParamSetIdBindVar.
     * @return bind variable value for ParamSetIdBindVar
     */
    public String getParamSetIdBindVar() {
        return (String) getNamedWhereClauseParam("ParamSetIdBindVar");
    }

    /**
     * Sets <code>value</code> for bind variable ParamSetIdBindVar.
     * @param value value to bind as ParamSetIdBindVar
     */
    public void setParamSetIdBindVar(String value) {
        setNamedWhereClauseParam("ParamSetIdBindVar", value);
    }
}

