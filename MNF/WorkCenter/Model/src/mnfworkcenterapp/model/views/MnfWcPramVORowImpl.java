package mnfworkcenterapp.model.views;

import java.math.BigDecimal;

import java.sql.Timestamp;

import javax.faces.application.FacesMessage;

import javax.faces.context.FacesContext;

import mnfworkcenterapp.model.entities.MnfWcParamEOImpl;
import mnfworkcenterapp.model.module.MNFWorkcenterAMImpl;

import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.domain.NClobDomain;
import oracle.jbo.domain.Number;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Sep 02 12:11:59 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MnfWcPramVORowImpl extends ViewRowImpl {


    public static final int ENTITY_MNFWCPARAMEO = 0;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CldId,
        HoOrgId,
        ParamId,
        ParamVal,
        SlocId,
        UsrIdCreate,
        UsrIdCreateDt,
        UsrIdMod,
        UsrIdModDt,
        WcId,
        TransParamDesc,
        transParamType,
        transParamSetDesc,
        transParamSetId,
        transParamSetType,
        transParamBasis,
        TransRowKey,
        transParamBasisName,
        transParamValType,
        transParamUomName,
        ParamSetId,
        ParamType,
        MnfWcPramVO1,
        LOVParameterIdVO1,
        LOVParamSetVO1;
        static AttributesEnum[] vals = null;
        ;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int PARAMID = AttributesEnum.ParamId.index();
    public static final int PARAMVAL = AttributesEnum.ParamVal.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int USRIDCREATE = AttributesEnum.UsrIdCreate.index();
    public static final int USRIDCREATEDT = AttributesEnum.UsrIdCreateDt.index();
    public static final int USRIDMOD = AttributesEnum.UsrIdMod.index();
    public static final int USRIDMODDT = AttributesEnum.UsrIdModDt.index();
    public static final int WCID = AttributesEnum.WcId.index();
    public static final int TRANSPARAMDESC = AttributesEnum.TransParamDesc.index();
    public static final int TRANSPARAMTYPE = AttributesEnum.transParamType.index();
    public static final int TRANSPARAMSETDESC = AttributesEnum.transParamSetDesc.index();
    public static final int TRANSPARAMSETID = AttributesEnum.transParamSetId.index();
    public static final int TRANSPARAMSETTYPE = AttributesEnum.transParamSetType.index();
    public static final int TRANSPARAMBASIS = AttributesEnum.transParamBasis.index();
    public static final int TRANSROWKEY = AttributesEnum.TransRowKey.index();
    public static final int TRANSPARAMBASISNAME = AttributesEnum.transParamBasisName.index();
    public static final int TRANSPARAMVALTYPE = AttributesEnum.transParamValType.index();
    public static final int TRANSPARAMUOMNAME = AttributesEnum.transParamUomName.index();
    public static final int PARAMSETID = AttributesEnum.ParamSetId.index();
    public static final int PARAMTYPE = AttributesEnum.ParamType.index();
    public static final int MNFWCPRAMVO1 = AttributesEnum.MnfWcPramVO1.index();
    public static final int LOVPARAMETERIDVO1 = AttributesEnum.LOVParameterIdVO1.index();
    public static final int LOVPARAMSETVO1 = AttributesEnum.LOVParamSetVO1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public MnfWcPramVORowImpl() {
    }

    /**
     * Gets MnfWcParamEO entity object.
     * @return the MnfWcParamEO
     */
    public MnfWcParamEOImpl getMnfWcParamEO() {
        return (MnfWcParamEOImpl) getEntity(ENTITY_MNFWCPARAMEO);
    }

    /**
     * Gets the attribute value for CLD_ID using the alias name CldId.
     * @return the CLD_ID
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as attribute value for CLD_ID using the alias name CldId.
     * @param value value to set the CLD_ID
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for HO_ORG_ID using the alias name HoOrgId.
     * @return the HO_ORG_ID
     */
    public String getHoOrgId() {
        return (String) getAttributeInternal(HOORGID);
    }

    /**
     * Sets <code>value</code> as attribute value for HO_ORG_ID using the alias name HoOrgId.
     * @param value value to set the HO_ORG_ID
     */
    public void setHoOrgId(String value) {
        setAttributeInternal(HOORGID, value);
    }

    /**
     * Gets the attribute value for PARAM_ID using the alias name ParamId.
     * @return the PARAM_ID
     */
    public String getParamId() {
        return (String) getAttributeInternal(PARAMID);
    }

    /**
     * Sets <code>value</code> as attribute value for PARAM_ID using the alias name ParamId.
     * @param value value to set the PARAM_ID
     */
    public void setParamId(String value) {
        if(!getAM().duplicateParam(getTransParamDesc())){
            setAttributeInternal(PARAMID, value);    
        }
        else {
            showFacesMsg("Duplicate Parameter!! ", " ", FacesMessage.SEVERITY_ERROR, null);
        }
    }

    /**
     * Gets the attribute value for PARAM_VAL using the alias name ParamVal.
     * @return the PARAM_VAL
     */
    public oracle.jbo.domain.Number getParamVal() {
        return (oracle.jbo.domain.Number) getAttributeInternal(PARAMVAL);
    }

    /**
     * Sets <code>value</code> as attribute value for PARAM_VAL using the alias name ParamVal.
     * @param value value to set the PARAM_VAL
     */
    public void setParamVal(oracle.jbo.domain.Number value) {
        if(!getAM().duplicateParam(getTransParamDesc())){
            setAttributeInternal(PARAMVAL, value); 
        }
    }

    /**
     * Gets the attribute value for SLOC_ID using the alias name SlocId.
     * @return the SLOC_ID
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for SLOC_ID using the alias name SlocId.
     * @param value value to set the SLOC_ID
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for USR_ID_CREATE using the alias name UsrIdCreate.
     * @return the USR_ID_CREATE
     */
    public Integer getUsrIdCreate() {
        return (Integer) getAttributeInternal(USRIDCREATE);
    }

    /**
     * Sets <code>value</code> as attribute value for USR_ID_CREATE using the alias name UsrIdCreate.
     * @param value value to set the USR_ID_CREATE
     */
    public void setUsrIdCreate(Integer value) {
        setAttributeInternal(USRIDCREATE, value);
    }

    /**
     * Gets the attribute value for USR_ID_CREATE_DT using the alias name UsrIdCreateDt.
     * @return the USR_ID_CREATE_DT
     */
    public Timestamp getUsrIdCreateDt() {
        return (Timestamp) getAttributeInternal(USRIDCREATEDT);
    }

    /**
     * Sets <code>value</code> as attribute value for USR_ID_CREATE_DT using the alias name UsrIdCreateDt.
     * @param value value to set the USR_ID_CREATE_DT
     */
    public void setUsrIdCreateDt(Timestamp value) {
        setAttributeInternal(USRIDCREATEDT, value);
    }

    /**
     * Gets the attribute value for USR_ID_MOD using the alias name UsrIdMod.
     * @return the USR_ID_MOD
     */
    public Integer getUsrIdMod() {
        return (Integer) getAttributeInternal(USRIDMOD);
    }

    /**
     * Sets <code>value</code> as attribute value for USR_ID_MOD using the alias name UsrIdMod.
     * @param value value to set the USR_ID_MOD
     */
    public void setUsrIdMod(Integer value) {
        setAttributeInternal(USRIDMOD, value);
    }

    /**
     * Gets the attribute value for USR_ID_MOD_DT using the alias name UsrIdModDt.
     * @return the USR_ID_MOD_DT
     */
    public Timestamp getUsrIdModDt() {
        return (Timestamp) getAttributeInternal(USRIDMODDT);
    }

    /**
     * Sets <code>value</code> as attribute value for USR_ID_MOD_DT using the alias name UsrIdModDt.
     * @param value value to set the USR_ID_MOD_DT
     */
    public void setUsrIdModDt(Timestamp value) {
        setAttributeInternal(USRIDMODDT, value);
    }

    /**
     * Gets the attribute value for WC_ID using the alias name WcId.
     * @return the WC_ID
     */
    public String getWcId() {
        return (String) getAttributeInternal(WCID);
    }

    /**
     * Sets <code>value</code> as attribute value for WC_ID using the alias name WcId.
     * @param value value to set the WC_ID
     */
    public void setWcId(String value) {
        setAttributeInternal(WCID, value);
    }

    public MNFWorkcenterAMImpl getAppMod() {
        return (MNFWorkcenterAMImpl) getApplicationModule();
    }

    /**
     * Gets the attribute value for the calculated attribute TransParamDesc.
     * @return the TransParamDesc
     *
     */


    public String getTransParamDesc() {
        if (getParamId() != null) {
            if (getAM().getLOVAllParametersForViewMode1().getFilteredRows("ParamId", getParamId()).length > 0) {
                return (getAM().getLOVAllParametersForViewMode1().getFilteredRows("ParamId",
                                                                      getParamId()))[0].getAttribute("ParamNme").toString();
            }
        }
        return (String) getAttributeInternal(TRANSPARAMDESC);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransParamDesc.
     * @param value value to set the  TransParamDesc
     */
    public void setTransParamDesc(String value) {
        setAttributeInternal(TRANSPARAMDESC, value);
    }

    /**
     * Gets the attribute value for the calculated attribute transParamType.
     * @return the transParamType
     */
    public String gettransParamType() {
        if (getParamId() != null) {
            if (getAM().getLOVAllParametersForViewMode1().getFilteredRows("ParamId", getParamId()).length > 0) {
                return (getAM().getLOVAllParametersForViewMode1().getFilteredRows("ParamId",
                                                                      getParamId()))[0].getAttribute("AttNme").toString();
            }
        }
        return (String) getAttributeInternal(TRANSPARAMTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute transParamType.
     * @param value value to set the  transParamType
     */
    public void settransParamType(String value) {
        setAttributeInternal(TRANSPARAMTYPE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute transParamSetDesc.
     * @return the transParamSetDesc
     */
    public String gettransParamSetDesc() {
        if(getParamSetId()!=null){
            return getAM().getLOVAllParameterSetForViewMode1().getFilteredRows("ParamSetId", getParamSetId())[0].getAttribute("ParamSetDesc").toString();
        }
        return (String) getAttributeInternal(TRANSPARAMSETDESC);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute transParamSetDesc.
     * @param value value to set the  transParamSetDesc
     */
    public void settransParamSetDesc(String value) {
        if(getParamSetId()!=null && !getAM().duplicateParam(getTransParamDesc())){
            setAttributeInternal(TRANSPARAMSETDESC, getAM().getLOVAllParameterSetForViewMode1().getFilteredRows("ParamSetId", getParamSetId())[0].getAttribute("ParamSetDesc").toString());
        }
        else {
            setAttributeInternal(TRANSPARAMSETDESC, value);
        }
    }

    /**
     * Gets the attribute value for the calculated attribute transParamSetId.
     * @return the transParamSetId
     */
    public String gettransParamSetId() {
        if(getParamId()!=null){
            return getAM().getLOVAllParametersForViewMode1().getFilteredRows("ParamId", getParamId())[0].getAttribute("ParamSetId").toString();
        }
        return (String) getAttributeInternal(TRANSPARAMSETID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute transParamSetId.
     * @param value value to set the  transParamSetId
     */
    public void settransParamSetId(String value) {
        if(getParamId()!=null){
            setAttributeInternal(TRANSPARAMSETID, getAM().getLOVAllParametersForViewMode1().getFilteredRows("ParamId", getParamId())[0].getAttribute("ParamSetId").toString());
        }
        else {
            setAttributeInternal(TRANSPARAMSETID, value);
        }
    }

    /**
     * Gets the attribute value for the calculated attribute transParamSetType.
     * @return the transParamSetType
     */
    public Number gettransParamSetType() {
        return (Number) getAttributeInternal(TRANSPARAMSETTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute transParamSetType.
     * @param value value to set the  transParamSetType
     */
    public void settransParamSetType(Number value) {
        setAttributeInternal(TRANSPARAMSETTYPE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute transParamBasis.
     * @return the transParamBasis
     */
    public Integer gettransParamBasis() {
        if (getParamId() != null) {
            if (getAM().getLOVAllParametersForViewMode1().getFilteredRows("ParamId", getParamId()).length > 0) {
                return Integer.parseInt((getAM().getLOVAllParametersForViewMode1().getFilteredRows("ParamId",
                                                                      getParamId()))[0].getAttribute("ParamBasis").toString());
            }
        }
        return (Integer) getAttributeInternal(TRANSPARAMBASIS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute transParamBasis.
     * @param value value to set the  transParamBasis
     */
    public void settransParamBasis(Integer value) {
        setAttributeInternal(TRANSPARAMBASIS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransRowKey.
     * @return the TransRowKey
     */
    public Object getTransRowKey() {
        return getKey();
        //return (Object) getAttributeInternal(TRANSROWKEY);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransRowKey.
     * @param value value to set the  TransRowKey
     */
    public void setTransRowKey(Object value) {
        setAttributeInternal(TRANSROWKEY, value);
    }

    /**
     * Gets the attribute value for the calculated attribute transParamBasisName.
     * @return the transParamBasisName
     */
    public String gettransParamBasisName() {
        if(gettransParamBasis()!=null){
            if(gettransParamBasis()==31){
                return "FIXED";
            }
            else{
                return "VARIABLE";
            }
        }
        return (String) getAttributeInternal(TRANSPARAMBASISNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute transParamBasisName.
     * @param value value to set the  transParamBasisName
     */
    public void settransParamBasisName(String value) {
        if(gettransParamBasis()!=null){
            if(gettransParamBasis()==31){
                setAttributeInternal(TRANSPARAMBASISNAME, "FIXED"); 
            }
            else{
                setAttributeInternal(TRANSPARAMBASISNAME, "VARIABLE"); 
            }
        }
        //setAttributeInternal(TRANSPARAMBASISNAME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute transParamValType.
     * @return the transParamValType
     */
    public Integer gettransParamValType() {
        if(getParamId()!=null){
            //int val = (getAM().getLOVAllParametersForViewMode1().getFilteredRows("ParamId", getParamId())[0].getAttribute("ParamValType").toString()); 
            Object val = getAM().getLOVAllParametersForViewMode1().getFilteredRows("ParamId", getParamId())[0].getAttribute("ParamValType"); 
            return (val!=null?Integer.parseInt(val.toString()):null);
        }
        return (Integer) getAttributeInternal(TRANSPARAMVALTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute transParamValType.
     * @param value value to set the  transParamValType
     */
    public void settransParamValType(Integer value) {
        if(getParamId()!=null){
            Object val = getAM().getLOVAllParametersForViewMode1().getFilteredRows("ParamId", getParamId())[0].getAttribute("ParamValType");
            setAttributeInternal(TRANSPARAMVALTYPE, (val!=null?Integer.parseInt(val.toString()):null));
        }
        else {
            setAttributeInternal(TRANSPARAMVALTYPE, value);
        }
    }

    /**
     * Gets the attribute value for the calculated attribute transParamUomName.
     * @return the transParamUomName
     */
    public String gettransParamUomName() {
        if(getParamId()!=null){
            if(getAM().getLOVAllParametersForViewMode1().getFilteredRows("ParamId", getParamId())[0].getAttribute("Umdesc")!=null){
                return getAM().getLOVAllParametersForViewMode1().getFilteredRows("ParamId", getParamId())[0].getAttribute("Umdesc").toString();
            }
        }
        return (String) getAttributeInternal(TRANSPARAMUOMNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute transParamUomName.
     * @param value value to set the  transParamUomName
     */
    public void settransParamUomName(String value) {
        if(getParamId()!=null){
            if(getAM().getLOVAllParametersForViewMode1().getFilteredRows("ParamId", getParamId())[0].getAttribute("Umdesc")!=null){
                setAttributeInternal(TRANSPARAMVALTYPE, (getAM().getLOVAllParametersForViewMode1().getFilteredRows("ParamId", getParamId())[0].getAttribute("Umdesc").toString()));
            }
        }
        else {
            setAttributeInternal(TRANSPARAMUOMNAME, value);
        }
    }

    /**
     * Gets the attribute value for PARAM_SET_ID using the alias name ParamSetId.
     * @return the PARAM_SET_ID
     */
    public String getParamSetId() {
        return (String) getAttributeInternal(PARAMSETID);
    }

    /**
     * Sets <code>value</code> as attribute value for PARAM_SET_ID using the alias name ParamSetId.
     * @param value value to set the PARAM_SET_ID
     */
    public void setParamSetId(String value) {
        setAttributeInternal(PARAMSETID, value);
    }

    /**
     * Gets the attribute value for PARAM_TYPE using the alias name ParamType.
     * @return the PARAM_TYPE
     */
    public Integer getParamType() {
        return (Integer) getAttributeInternal(PARAMTYPE);
    }

    /**
     * Sets <code>value</code> as attribute value for PARAM_TYPE using the alias name ParamType.
     * @param value value to set the PARAM_TYPE
     */
    public void setParamType(Integer value) {
        setAttributeInternal(PARAMTYPE, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> MnfWcPramVO1.
     */
    public RowSet getMnfWcPramVO1() {
        return (RowSet) getAttributeInternal(MNFWCPRAMVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LOVParameterIdVO1.
     */
    public RowSet getLOVParameterIdVO1() {
        System.out.println("LOVParameterIdVO1---");
        RowSet rs = (RowSet) getAttributeInternal(LOVPARAMETERIDVO1);
        rs.getViewObject().clearCache();
        rs.setNamedWhereClauseParam("ParamSetIdBindVar", getParamSetId());
        rs.resetExecuted();
        return rs;
        // return (RowSet) getAttributeInternal(LOVPARAMETERIDVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LOVParamSetVO1.
     */
    public RowSet getLOVParamSetVO1() {
        return (RowSet) getAttributeInternal(LOVPARAMSETVO1);
    }

    private MNFWorkcenterAMImpl getAM() {
        return (MNFWorkcenterAMImpl) this.getApplicationModule();
    }
    
    public void showFacesMsg(String msgHdr, String msgDtl, javax.faces.application.FacesMessage.Severity msgSeverity,
                             String msgMode) {
     
        FacesMessage msg = new FacesMessage(msgHdr);
        msg.setDetail(msgDtl);
        msg.setSeverity(msgSeverity);
        FacesContext.getCurrentInstance().addMessage(null, msg);
     
    }
}

