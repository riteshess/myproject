package mnfoperationApp.model.module;


import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Map;

import javax.el.ELContext;
import javax.el.ValueExpression;

import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import mnfoperationApp.model.module.common.MNFOperationAppAM;
import mnfoperationApp.model.views.MnfOpToolsVOImpl;
import mnfoperationApp.model.views.MnfOpWcVOImpl;
import mnfoperationApp.model.views.OrgMnfOpVOImpl;

import oracle.adf.share.ADFContext;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.apache.myfaces.trinidad.context.RequestContext;
// ---------------------------------------------------------------------
// ---    File generated by Vishal Kr...!!
// ---    Fri Aug 08 16:37:59 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MNFOperationAppAMImpl extends ApplicationModuleImpl implements MNFOperationAppAM {
    /**
     * This is the default constructor (do not remove).
     */
    private static ADFLogger adfLog = (ADFLogger) ADFLogger.createADFLogger(MNFOperationAppAMImpl.class);
    public MNFOperationAppAMImpl() {
    }

    /*------------------------------Method for search operation---------------------------*/

    public void onSearchOP(Integer opTypeID, String opACTV, String opID, Date opFromDT, Date opToDT, Integer mode,
                           String TransOpInhouse, String TransSubContract) {
        ViewObjectImpl view = (ViewObjectImpl) this.getMnfOp1();
        ViewCriteria critera = view.getViewCriteria("MnfOpVOCriteria1");
        view.applyViewCriteria(critera);
        view.setNamedWhereClauseParam("opTypeBindVar", (opTypeID == null) ? null : opTypeID);
        view.setNamedWhereClauseParam("modeBindVar", (mode == null) ? null : mode);
        view.setNamedWhereClauseParam("opActvBindVar", (opACTV == null) ? null : opACTV);
        view.setNamedWhereClauseParam("opIDBindVar", (opID == null) ? null : opID);
        view.setNamedWhereClauseParam("opFromDtBindVar", (opFromDT == null) ? null : opFromDT);
        view.setNamedWhereClauseParam("opTodtBindVar", (opToDT == null) ? null : opToDT);
        view.setNamedWhereClauseParam("opcld_idBind", getCldId());
        view.setNamedWhereClauseParam("opho_org_idBind", getHoOrgId());
        view.setNamedWhereClauseParam("opsloc_idBind", getSlocId());
        System.out.println("-------------" + TransOpInhouse + "-----------------" + TransSubContract);
        view.setNamedWhereClauseParam("opInhouseBindVar", (TransOpInhouse == null) ? null : TransOpInhouse);
        view.setNamedWhereClauseParam("opSubContractBindVar", (TransSubContract == null) ? null : TransSubContract);
        view.executeQuery();
    }

    /*--------------------------------On Resest Operation----------------------------------*/
    public void OnResetOp(Integer opTypeID, String opACTV, String opID, Date opFromDT, Date opToDT) {
        getTransient1().executeQuery();
        ViewObjectImpl view = (ViewObjectImpl) this.getMnfOp1();
        ViewCriteria critera = view.getViewCriteria("MnfOpVOCriteria1");
        view.applyViewCriteria(critera);
        view.setNamedWhereClauseParam("opcld_idBind", getCldId());
        view.setNamedWhereClauseParam("opho_org_idBind", -1);
        view.setNamedWhereClauseParam("opsloc_idBind", getSlocId());
        view.executeQuery();
    }

    /*----------------------Method to resolve page flow scope parameter-------------------------*/

    public Object resolvEl(String data) {
        ADFContext adfCtx = ADFContext.getCurrent();
        ELContext elContext = adfCtx.getELContext();
        ValueExpression valueExp = adfCtx.getExpressionFactory().createValueExpression(elContext, data, Object.class);
        Object Message = valueExp.getValue(elContext);
        return Message;
    }

    /*---------------------------Getting page flow scope parameter methods--------------------------*/

    public Integer getSlocId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
    }

    public StringBuffer getCldId() {
        return new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
    }

    public StringBuffer getOrgId() {
        return new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
    }

    public StringBuffer getHoOrgId() {
        return new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString());
    }

    public Integer getUsrId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
    }

    public StringBuffer getTxnId() {
        return new StringBuffer(resolvEl("#{pageFlowScope.GLBL_GET_TXN_ID}").toString());
    }


    /*--------------------------Master filter in MNF$OP Table----------------------*/
    public void setFilterData() {
        ViewObjectImpl view = (ViewObjectImpl) this.getMnfOp1();
        ViewCriteria critera = view.getViewCriteria("MnfOpVOCriteria1");
        view.applyViewCriteria(critera);
        view.setNamedWhereClauseParam("opcld_idBind", getCldId());
        view.setNamedWhereClauseParam("opho_org_idBind", -1);
        view.setNamedWhereClauseParam("opsloc_idBind", getSlocId());
        view.executeQuery();
    }

    /*-----------------------Method for generate Doc_Txn_Id-------------------------------*/
    public String getDocTxnId(String cldId, Integer slcId, String hoOrgId, Integer docId, Integer docTypeId,
                              Integer userId) {
        try {
            return callStoredFunction(VARCHAR, "APP.GET_TXN_ID(?,?,?,?,?,?)", new Object[] {
                                      cldId, slcId, hoOrgId, userId, docId, docTypeId
        }).toString();

        } catch (Exception e) {
            e.printStackTrace();
        }
        return "0";
    }

    /*-------------------------Method for generate Job card Serial No.-----------------------*/
    public String getOperationSNO(String cldId, Integer slcId, String hoOrgId, Integer docId, Integer docTypeId,
                                  String OrgId, String tabNm, Integer DocSubTypId) {
        try {
            return callStoredFunction(VARCHAR, "MNF.FN_MNF_GET_PRF_ID(?,?,?,?,?,?,?,?)", new Object[] {
                                      slcId, cldId, hoOrgId, OrgId, docId, docTypeId, tabNm, DocSubTypId
        }).toString();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return "0";
    }


    /*--------------------------Method for Insert data in ATTCH Table----------------------*/

    public String insertInMnfOpAttch(String DocId, String AttchFileExtn, String AttchFilepath, String AttchExtn,
                                     String DispFlNm) {
        System.out.println("-----------!!!!!!!!!!!!!-----------");
        System.out.println(DocId);
        System.out.println(AttchFileExtn);
        System.out.println(AttchFilepath);
        System.out.println(AttchExtn);
        System.out.println(DispFlNm);

        ViewObjectImpl impl = this.getMnfOp1();
        Row currentRow = impl.getCurrentRow();
        Integer attribute = (Integer) currentRow.getAttribute("OpStat");
        if (attribute == 41) {
            ViewObjectImpl attch1 = this.getMnfOpAttch2();
            ViewObjectImpl attch2 = this.getMnfOpAttch1();
            Row createRow = attch1.createRow();
            int count = attch2.getRowCount();
            String Nm = "MNF-ATTACH" + count;
            System.out.println(Nm);
            createRow.setAttribute("CldId", getCldId());
            createRow.setAttribute("SlocId", getSlocId());
            createRow.setAttribute("HoOrgId", getHoOrgId());
            createRow.setAttribute("DocId", DocId);
            createRow.setAttribute("AttchFlNm", Nm);
            createRow.setAttribute("AttchFlExtn", AttchFileExtn);
            createRow.setAttribute("AttchFlPath", AttchFilepath + Nm + AttchExtn);
            createRow.setAttribute("DispFlNm", DispFlNm);
            createRow.setAttribute("UsrIdCreate", getUsrId());
            createRow.setAttribute("UsrIdCreateDt", new Timestamp(System.currentTimeMillis()));
            attch1.insertRow(createRow);
            return Nm;
        } else if (attribute == 42) {
            ViewObjectImpl attch1 = this.getMnfOpAttch2();
            ViewObjectImpl attch2 = this.getMnfOpAttch1();
            Row createRow = attch1.createRow();
            int count = attch2.getRowCount();
            String Nm = "MNF-ATTACH" + count;
            System.out.println(Nm);
            createRow.setAttribute("CldId", getCldId());
            createRow.setAttribute("SlocId", getSlocId());
            createRow.setAttribute("HoOrgId", getHoOrgId());
            createRow.setAttribute("DocId", DocId);
            createRow.setAttribute("AttchFlNm", Nm);
            createRow.setAttribute("AttchFlExtn", AttchFileExtn);
            createRow.setAttribute("AttchFlPath", AttchFilepath + Nm + AttchExtn);
            createRow.setAttribute("DispFlNm", DispFlNm);
            createRow.setAttribute("UsrIdCreate", getUsrId());
            createRow.setAttribute("UsrIdCreateDt", new Timestamp(System.currentTimeMillis()));
            attch1.insertRow(createRow);
            getDBTransaction().commit();
            return Nm;
        }
        return "0";
    }

    /*-------------------Copy Previous-------------------*/
    public void copyPreviousFunc(String CldId, String HoOrgId, String orgId, Integer SlocId, String DocId,
                                 String RefDocId, Integer UserId, String opId) {
        ViewObjectImpl impl = this.getMnfOp1();
        Row currentRow = impl.getCurrentRow();
        Object doc_id = currentRow.getAttribute("DocId");
        Object ref_doc_id = currentRow.getAttribute("RefOpId");
        Object op_id = currentRow.getAttribute("OpId");
        if (doc_id != null && ref_doc_id != null && op_id != null) {
            try {
                callStoredFunction(VARCHAR, "MNF.FN_MNF_COPY_PRF(?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                   CldId, SlocId, HoOrgId, orgId, UserId, "MNF.MNF$OP", op_id, null, doc_id, ref_doc_id,
                                   "Default OP"
                });
            } catch (Exception e) {
                e.printStackTrace();
            }
            this.getMnfOpTools2().executeQuery();
            this.getMnfOpAttch2().executeQuery();
            this.getMnfOpEo2().executeQuery();
            this.getMnfOpWc2().executeQuery();
            this.getOrgMnfOp2().executeQuery();
        }
    }

    /*------------------------Declaration of Type Oracle---------------------------*/
    private static int NUMBER = Types.INTEGER;
    private static int NUMERIC = Types.NUMERIC;
    private static int VARCHAR = Types.VARCHAR;

    /**
     * Function to call a database function .
     * */
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {

        CallableStatement st = null;
        try {
            // 1. Create a JDBC CallabledStatement
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            // 2. Register the first bind variable for the return value
            st.registerOutParameter(1, sqlReturnType);

            if (bindVars != null) {
                // 3. Loop over values for the bind variables passed in, if any
                for (int z = 0; z < bindVars.length; z++) {
                    // 4. Set the value of user-supplied bind vars in the stmt
                    System.out.println("bindVars " + z + " " + bindVars[z]);
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            // 5. Set the value of user-supplied bind vars in the stmt
            st.executeUpdate();
            // 6. Return the value of the first bind variable
            //  System.out.println("Function return " + st.getObject(1));
            return st.getObject(1);
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("In Exception exch and Op and generate-->");
            //int end = e.getMessage().indexOf("\n");
            //  throw new JboException(e.getMessage().substring(11, end));
            //  String msg = e.getMessage().substring(11, end);

            String msg = e.getMessage();
            System.out.println(msg);
            FacesMessage ermsg = new FacesMessage(msg);
            ermsg.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, ermsg);
            return null;


        } finally {
            if (st != null) {
                try {
                    // 7. Close the statement
                    st.close();
                } catch (SQLException e) {
                    throw new JboException(e.getMessage());
                }
            }
        }
    }

    /**
     * Generalized method used to display the facesmessages.
     * Created by Vishal Kumar on 09-09-2014.
     * @param msgHdr is to set the header for message dialog
     * @param msgDtl is to set if further detail information in meassage is required.
     * @param msgSeverity is to set severity mode.
     * @param msgMode is kept to incorporate conditional activities.
     * **/
    public void showFacesMsg(String msgHdr, String msgDtl, javax.faces.application.FacesMessage.Severity msgSeverity,
                             String msgMode) {

        FacesMessage msg = new FacesMessage(msgHdr);
        msg.setDetail(msgDtl);
        msg.setSeverity(msgSeverity);
        FacesContext.getCurrentInstance().addMessage(null, msg);

    }

    /**
     * Method used to call work flow function.
     * calls db functions APP.WF_GET_USR_LEVEL & APP.WF_INS_TXN
     * Created by Vishal Kumar on 09-09-2014.
     * **/

    public String callWfFunctions(String cldId, Integer slcId, String orgId, Integer usrId, String txnId, Integer docId,
                                  Integer docTypId) {

        System.out.println("callWfFunctions--- slcId " + slcId + " cldId " + cldId + "  " + " orgId " + orgId +
                           " usrId " + usrId + " docId " + docId + " txnId " + txnId + " docTypId " + docTypId);

        //get the work flow for the document 25506
        String wfId = getWfId(cldId, slcId, orgId, docId, docTypId);
        //String action = "I";
        //String remark = "A";
        //Number amount11 = new Number(0);
        // System.out.println("wfId " + wfId);
        Object level;
        try {
            level = callStoredFunction(NUMBER, "APP.WF_GET_USR_LEVEL(?,?,?,?,?,?,?)", new Object[] {
                                       slcId, cldId, orgId, usrId, wfId, docId, docTypId
            });
            System.out.println("level is defined here : " + level);
            callStoredFunction(NUMBER, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                               slcId, cldId, orgId, docId, docTypId, wfId, txnId, usrId, usrId, level, level, "I", "A",
                               0
            });

        } catch (Exception nfe) {

            showFacesMsg(resolvElDCMsg("#{bundle['MSG.1113']}").toString(), null, FacesMessage.SEVERITY_ERROR, null);

            nfe.printStackTrace();
        }

        return null;
    }

    /**
     * Method used to get the Work flow id for a document.
     * Created by Vishal Kumar on 09-09-2014.
     * **/

    public String getWfId(String cldId, Integer slcId, String orgId, Integer docId, Integer docTypId) {
        System.out.println("getWfId--- slcId " + slcId + " cldId " + cldId + "  " + " orgId " + orgId + " docId " +
                           docId + " docTypId " + docTypId);
        try {
            return callStoredFunction(VARCHAR, "APP.WF_GET_ID(?,?,?,?,?)", new Object[] {
                                      slcId, cldId, orgId, docId, docTypId }).toString();
        } catch (Exception e) {
            e.printStackTrace();

            StringBuilder saveMsg = new StringBuilder("<html><body><p><b>Error in getting Work Flow Details. </b></p>");

            saveMsg.append("</body></html>");

            showFacesMsg(saveMsg.toString(), null, FacesMessage.SEVERITY_ERROR, null);

        }
        return "0";
    }

    /**
     * Method created to call DB fucntion to get the user at which the document is pending
     * Created by Vishal Kumar on 09-09-2014.
     * **/

    public Integer getDocUsrFromWF(String cldId, Integer slcId, String orgId, Integer usrId, String txnId,
                                   Integer docId, Integer docTypId) {
        Object fnRetVal;

        /* System.out.println("getDocUsrFromWF--- slcId " + slcId + " cldId " + cldId + "  " + " orgId " + orgId +
                              " docId " + docId + " tvouId " + tvouId + " docTypId " + docTypId); */
        try {
            fnRetVal = callStoredFunction(NUMBER, "APP.WF_GET_CUR_USR(?,?,?,?,?,?)", new Object[] {
                                          slcId, cldId, orgId, docId, txnId, docTypId
            });

            if (fnRetVal != null) {

                /*   if (fnRetVal.equals(-1)) {
                       showFacesMsg("Error while fetching user work flow details", null, FacesMessage.SEVERITY_ERROR,null);
                   } */

                return Integer.parseInt(fnRetVal.toString());
            }

        } catch (Exception e) {

            e.printStackTrace();

        }
        showFacesMsg("Error while fetching user work flow details", null, FacesMessage.SEVERITY_ERROR, null);
        return 0;
    }

    /*--------------------------ResolveEdic Message Method----------------------------*/
    public Object resolvElDCMsg(String data) {
        ADFContext adfCtx = ADFContext.getCurrent();
        ELContext elContext = adfCtx.getELContext();
        ValueExpression valueExp = adfCtx.getExpressionFactory().createValueExpression(elContext, data, Object.class);
        return valueExp.getValue(elContext);
    }

    /*------------------------Get User Name for Given UserId--------------------------*/
    public String getUserName(Integer u_Id, Integer slc_id) {
        String uname = "";
        ViewObjectImpl impl = this.getLOVUserNm1();
        impl.setNamedWhereClauseParam("UsrIdBind", u_Id);
        impl.setNamedWhereClauseParam("SlocIDBind", slc_id);
        impl.executeQuery();
        Row[] allRowsInRange = impl.getAllRowsInRange();
        if (allRowsInRange.length > 0) {
            Object a = allRowsInRange[0].getAttribute("UsrName");
            String s = (a == null ? null : a.toString());
            uname = s;
        }
        return uname;
    }

    /*-------------------------Duplicate check in OP DESCRIPTION-----------------------------*/
    public String chkDescDuplicate(String desc, String cldId, Integer slocId, String hoOrgId, String tabFlg,
                                   String prfId) {
        Object prfId_1 = this.getMnfOp1().getCurrentRow().getAttribute("OpId");
        if (prfId.equals("E")) {
            try {
                return callStoredFunction(VARCHAR, "MNF.FN_PRE_NM_EXIST(?,?,?,?,?,?)", new Object[] {
                                          cldId, slocId, hoOrgId, tabFlg, desc, prfId_1
            }).toString();
            } catch (Exception e) {
                e.printStackTrace();
            }
            return "0";
        } else {
            try {
                return callStoredFunction(VARCHAR, "MNF.FN_PRE_NM_EXIST(?,?,?,?,?,?)", new Object[] {
                                          cldId, slocId, hoOrgId, tabFlg, desc, prfId
            }).toString();
            } catch (Exception e) {
                e.printStackTrace();
            }
            return "0";
        }
    }

    /*----------------------Check Dulicate Tool----------------------*/
    public String ChkDuplicateTool(String DocId, String toolNm) {
        String ItemId = null;
        ViewObjectImpl impl = this.getLOVItemNmId1();
        impl.setNamedWhereClauseParam("ItmNmBind", toolNm);
        impl.setNamedWhereClauseParam("HoOrgIdBind", getHoOrgId());
        impl.setNamedWhereClauseParam("SlocIdBind", getSlocId());
        impl.setNamedWhereClauseParam("CldIdBind", getCldId());
        impl.executeQuery();
        Row[] allRowsInRange = impl.getAllRowsInRange();
        if (allRowsInRange.length > 0) {
            Object a = allRowsInRange[0].getAttribute("ItmId");
            String s = (a == null ? null : a.toString());
            ItemId = s;
            System.out.println("value of ItemId------>>>>" + ItemId);
        }
        RowQualifier rq = new RowQualifier(this.getMnfOpTools2());
        rq.setWhereClause("DocId='" + DocId + "' and ItmId='" + ItemId + "'");
        System.out.println("Query=" + rq.getExprStr());
        Row fr[] = this.getMnfOpTools2().getFilteredRows(rq);
        System.out.println("Total no. of same rows=" + fr.length);
        for (Row r : fr) {
            System.out.println("Row=" + r + " and current row=" + this.getMnfOpTools2().getCurrentRow());
            if (!(r.equals(this.getMnfOpTools2().getCurrentRow())))
                return "Y";
        }
        return "N";
    }

    /*-----------------------Check Duplicate Org-----------------*/
    public String ChkDuplicateOrg(String DocId, String OrgNm) {
        String OrgId = null;
        ViewObjectImpl impl = this.getLOVOrgDescId1();
        impl.setNamedWhereClauseParam("BindOrgVar", OrgNm);
        impl.executeQuery();
        Row[] allRowsInRange = impl.getAllRowsInRange();
        if (allRowsInRange.length > 0) {
            Object a = allRowsInRange[0].getAttribute("OrgId");
            String s = (a == null ? null : a.toString());
            OrgId = s;
            System.out.println("value of OrgId------>>>>" + OrgId);
        }
        RowQualifier rq = new RowQualifier(this.getOrgMnfOp2());
        rq.setWhereClause("DocId='" + DocId + "' and OrgId='" + OrgId + "'");
        System.out.println("Query=" + rq.getExprStr());
        Row fr[] = this.getOrgMnfOp2().getFilteredRows(rq);
        System.out.println("Total no. of same rows=" + fr.length);
        for (Row r : fr) {
            System.out.println("Row=" + r + " and current row=" + this.getOrgMnfOp2().getCurrentRow());
            if (!(r.equals(this.getOrgMnfOp2().getCurrentRow())))
                return "Y";
        }
        return "N";
    }

    /*------------------------Chk validation of dulicate in WC-------------*/
    public String ChkDuplicateWC(String DocId, String WcNm) {
        String WcId = null;
        ViewObjectImpl impl = this.getMnfWcDesc1();
        impl.setNamedWhereClauseParam("BindHoRgId", getHoOrgId());
        impl.setNamedWhereClauseParam("BindSlocId", getSlocId());
        impl.setNamedWhereClauseParam("BindCldId", getCldId());
        impl.setNamedWhereClauseParam("BindWcDesc", WcNm);
        impl.executeQuery();
        Row[] allRowsInRange = impl.getAllRowsInRange();
        if (allRowsInRange.length > 0) {
            Object a = allRowsInRange[0].getAttribute("WcId");
            String s = (a == null ? null : a.toString());
            WcId = s;
            System.out.println("value of WcId------>>>>" + WcId);
        }
        RowQualifier rq = new RowQualifier(this.getMnfOpWc2());
        rq.setWhereClause("DocId='" + DocId + "' and WcId='" + WcId + "'");
        System.out.println("Query=" + rq.getExprStr());
        Row fr[] = this.getMnfOpWc2().getFilteredRows(rq);
        System.out.println("Total no. of same rows=" + fr.length);
        for (Row r : fr) {
            System.out.println("Row=" + r + " and current row=" + this.getMnfOpWc2().getCurrentRow());
            if (!(r.equals(this.getMnfOpWc2().getCurrentRow())))
                return "Y";
        }
        return "N";
    }

    /*------------------------Chk validation of dulicate in EO-------------*/
    public String chkDuplicateEo(String DocId, String ScNm) {
        String EoId = null;
        ViewObjectImpl impl = this.getLOVAppEmpNmValVO1();
        impl.setNamedWhereClauseParam("HoOrgIdBind", getHoOrgId());
        impl.setNamedWhereClauseParam("SlocIdBind", getSlocId());
        impl.setNamedWhereClauseParam("CldIdBind", getCldId());
        impl.setNamedWhereClauseParam("OrgIdBind", getOrgId());
        impl.setNamedWhereClauseParam("EoNmBind", ScNm);
        impl.executeQuery();
        Row[] allRowsInRange = impl.getAllRowsInRange();
        if (allRowsInRange.length > 0) {
            Object a = allRowsInRange[0].getAttribute("EoId");
            String s = (a == null ? null : a.toString());
            EoId = s;
            System.out.println("value of WcId------>>>>" + EoId);
        }
        RowQualifier rq = new RowQualifier(this.getMnfOpEo2());
        rq.setWhereClause("DocId='" + DocId + "' and EoId='" + EoId + "'");
        System.out.println("Query=" + rq.getExprStr());
        Row fr[] = this.getMnfOpEo2().getFilteredRows(rq);
        System.out.println("Total no. of same rows=" + fr.length);
        for (Row r : fr) {
            System.out.println("Row=" + r + " and current row=" + this.getMnfOpEo2().getCurrentRow());
            if (!(r.equals(this.getMnfOpEo2().getCurrentRow())))
                return "Y";
        }
        return "N";
    }

    /*------------------Update in Mnf$OP for Approved-------------------*/
    public void updateWfStatus(String doc_txn_id, String wf_mode) {
        System.out.println("wf_mode " + wf_mode);
        //wf_mode : V - revert, I - Initialize, F - Forwarded, A - Approved, R - Reject
        ViewObjectImpl impl = this.getMnfOp1();
        Row r = impl.getCurrentRow();
        if ("I".equals(wf_mode)) {
            r.setAttribute("OpMode", 47);
        } else if ("F".equals(wf_mode)) {
            r.setAttribute("OpMode", 46);
        } else if ("A".equals(wf_mode)) {
            r.setAttribute("OpStat", 42);
            r.setAttribute("OpMode", 43);
        } else if ("R".equals(wf_mode)) {
            r.setAttribute("OpMode", 45);
        } else if ("V".equals(wf_mode)) {
            r.setAttribute("OpMode", 46);
        }
        getDBTransaction().commit();
        ViewCriteria criteria5 = impl.getViewCriteria("FilterOnRevise");
        impl.applyViewCriteria(criteria5);
        impl.setNamedWhereClauseParam("DocIdBind", getTxnId());
        impl.executeQuery();
    }

    /*---------------------Count row for Work Center--------------*/
    public int countWC(String Doc_Id) {
        MnfOpWcVOImpl impl = this.getMnfOpWc2();
        impl.executeQuery();
        int count = impl.getRowCount();
        System.out.println("Value of wc count :" + count);
        return count;
    }

    /*----------------------Count Row for Sub contractor-------------------*/
    public String countEO(String DocId) {
        ViewObjectImpl impl = this.getMnfOp1();
        Row currentRow = impl.getCurrentRow();
        String OpOutsrcFlg = currentRow.getAttribute("OpOutsrcFlg").toString();
        if ("N".equals(OpOutsrcFlg)) {
            return "InHouse";
        } else {
            ViewObjectImpl eo2 = this.getMnfOpEo2();
            eo2.executeQuery();
            int count = eo2.getRowCount();
            System.out.println("Value of sub count :" + count);
            if (count == 0) {
                return "SubContract";
            } else {
                return "OK";
            }
        }
    }

    /*------------------------------generate Revision No----------------------------*/
    public void GenReviseNo() {
        try {
            ViewObjectImpl impl = this.getMnfOp1();
            Row currentRow = impl.getCurrentRow();
            currentRow.setAttribute("OpMode", 44);
            String CldId = (String) currentRow.getAttribute("CldId");
            Integer SlocId = (Integer) currentRow.getAttribute("SlocId");
            String HoOrgId = (String) currentRow.getAttribute("HoOrgId");
            String RefDocId = (String) currentRow.getAttribute("DocId");
            String DocId = null;
            String OpId = (String) currentRow.getAttribute("OpId");
            String OpDesc = (String) currentRow.getAttribute("OpDesc");
            String OpLegCd = (String) currentRow.getAttribute("OpLegCd");
            Integer OpType = (Integer) currentRow.getAttribute("OpType");
            Timestamp OpEffctvDt = (Timestamp) currentRow.getAttribute("OpEffctvDt");
            String OpRmrk = (String) currentRow.getAttribute("OpRmrk");
            Integer OpStat = (Integer) currentRow.getAttribute("OpStat");
            String OpInhseFlg = (String) currentRow.getAttribute("OpInhseFlg");
            String OpOutsrcFlg = (String) currentRow.getAttribute("OpOutsrcFlg");
            Integer OpRevNo = (Integer) currentRow.getAttribute("OpRevNo");
            String OpActv = (String) currentRow.getAttribute("OpActv");
            Timestamp OpInactvDt = (Timestamp) currentRow.getAttribute("OpInactvDt");
            String OpInactvReason = (String) currentRow.getAttribute("OpInactvReason");
            Integer UsrIdCreate = (Integer) currentRow.getAttribute("UsrIdCreate");
            Timestamp UsrIdCreateDt = (Timestamp) currentRow.getAttribute("UsrIdCreateDt");
            Integer UsrIdMod = (Integer) currentRow.getAttribute("UsrIdMod");
            Timestamp UsrIdModDt = (Timestamp) currentRow.getAttribute("UsrIdModDt");
            Timestamp OpRevDt = (Timestamp) currentRow.getAttribute("OpRevDt");
            Integer OpBasis = (Integer) currentRow.getAttribute("OpBasis");
            String RefOpId = (String) currentRow.getAttribute("RefOpId");
            Integer OpMode = (Integer) currentRow.getAttribute("OpMode");

            DocId = callStoredFunction(VARCHAR, "APP.GET_TXN_ID(?,?,?,?,?,?)", new Object[] {
                                       CldId, SlocId, HoOrgId, UsrIdCreate, 25506, 0
            }).toString();
            System.out.println("Value of new hexa   >>>" + DocId.toString());
            Row createRow = impl.createRow();
            createRow.setAttribute("CldId", CldId);
            createRow.setAttribute("SlocId", SlocId);
            createRow.setAttribute("HoOrgId", HoOrgId);
            createRow.setAttribute("DocId", DocId);
            createRow.setAttribute("OpId", OpId);
            createRow.setAttribute("OpDesc", OpDesc);
            createRow.setAttribute("OpLegCd", OpLegCd);
            createRow.setAttribute("OpType", OpType);
            createRow.setAttribute("OpEffctvDt", new Timestamp(System.currentTimeMillis()));
            createRow.setAttribute("OpRmrk", OpRmrk);
            createRow.setAttribute("OpStat", 41);
            createRow.setAttribute("OpOutsrcFlg", OpOutsrcFlg);
            createRow.setAttribute("OpInhseFlg", OpInhseFlg);
            Integer rv = OpRevNo + 1;
            createRow.setAttribute("OpRevNo", rv);
            createRow.setAttribute("OpActv", "Y");
            createRow.setAttribute("OpInactvDt", OpInactvDt);
            createRow.setAttribute("OpInactvReason", OpInactvReason);
            createRow.setAttribute("UsrIdCreate", getUsrId());
            createRow.setAttribute("UsrIdCreateDt", new Timestamp(System.currentTimeMillis()));
            createRow.setAttribute("OpRevDt", new Timestamp(System.currentTimeMillis()));
            createRow.setAttribute("OpBasis", OpBasis);
            createRow.setAttribute("RefOpId", RefOpId);
            createRow.setAttribute("OpMode", 47);
            impl.insertRow(createRow);

            Map pageFlowScope = RequestContext.getCurrentInstance().getPageFlowScope();
            pageFlowScope.put("GLBL_GET_TXN_ID", DocId);
            pageFlowScope.put("GLBL_CURRENT_DT", new Date(Date.getCurrentDate()));
            pageFlowScope.put("OP_MODE", "C");
            /* ViewCriteria criteria4 = impl.getViewCriteria("FilterOnRevise");
            impl.applyViewCriteria(criteria4);
            impl.setNamedWhereClauseParam("DocIdBind", DocId);
            impl.executeQuery(); */
            copyData(CldId, HoOrgId, getOrgId().toString(), SlocId, DocId, RefDocId, getUsrId(), OpId);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /*----------------------Copy Child DAta---------------------------*/
    public void copyData(String CldId, String HoOrgId, String orgId, Integer SlocId, String DocId, String RefDocId,
                         Integer UserId, String opId) {
        if (DocId != null && RefDocId != null && opId != null) {
            try {
                callStoredFunction(VARCHAR, "MNF.FN_MNF_COPY_PRF(?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                   CldId, SlocId, HoOrgId, orgId, UserId, "MNF.MNF$OP", opId, null, DocId, RefDocId,
                                   "Default OP"
                });
            } catch (Exception e) {
                e.printStackTrace();
            }
            this.getMnfOpTools2().executeQuery();
            this.getMnfOpAttch2().executeQuery();
            this.getMnfOpEo2().executeQuery();
            this.getMnfOpWc2().executeQuery();
            this.getOrgMnfOp2().executeQuery();
        }
    }

    /*----------------------------Validation Method---------------------*/
    public Integer ChkValidateAction() {
        ViewObjectImpl impl = this.getMnfOp1();
        Row currentRow = impl.getCurrentRow();
        String OpDesc = (String) currentRow.getAttribute("OpDesc");
        String OpLegCd = (String) currentRow.getAttribute("OpLegCd");
        String opOutflag=(String )currentRow.getAttribute("OpOutsrcFlg");
        Integer OpScType=(Integer)currentRow.getAttribute("OpScType");
        adfLog.info("value of outSourece Flag::"+opOutflag);
        Timestamp OpEffctvDt = (Timestamp) currentRow.getAttribute("OpEffctvDt");
        if (OpDesc == null) {
            return 1;
        }
//         else if(opOutflag.equalsIgnoreCase("Y"))
//        { 
//            adfLog.info("Value of OpScType::"+OpScType);
//            if(OpScType==null)
//            return 2;
//        } 
        else if (OpEffctvDt == null) {
            return 3;
        } else {
            if (OpDesc != null || !OpDesc.equals(null)) {
                return 4;
            } else {
                return 5;
            }
        }
    }

    /*-----------------------Check for inactive reason--------------------*/
    public Integer ChkInactiveReason(Integer val) {
        if (val == 1) //for organization val = 1
        {
            OrgMnfOpVOImpl Orgimpl = this.getOrgMnfOp2();
            Row OrgcurrentRow = Orgimpl.getCurrentRow();
            String OpActv = (String) OrgcurrentRow.getAttribute("OpActv");
            String InactvReason = (String) OrgcurrentRow.getAttribute("InactvReason");
            if (OpActv.equals("Y")) {
                return 7;
            } else {
                if (OpActv.equals("N")) {
                    if (InactvReason == null) {
                        return 1;
                    } else {
                        return 2;
                    }
                }
            }
        } else if (val == 2) // for Sub contractor val = 2
        {
            ViewObjectImpl eo = this.getMnfOpEo2();
            Row eoRow = eo.getCurrentRow();
            String EoActv = (String) eoRow.getAttribute("EoActv");
            String EoInactvReason = (String) eoRow.getAttribute("EoInactvReason");
            if (EoActv.equals("N")) {
                if (EoInactvReason == null) {
                    return 3;
                } else {
                    return 4;
                }
            }
        } else if (val == 3) // for opeartion val = 3
        {
            ViewObjectImpl Opimpl = this.getMnfOp1();
            Row OpCurrent = Opimpl.getCurrentRow();
            String OpActv = (String) OpCurrent.getAttribute("OpActv");
            String OpInactvReason = (String) OpCurrent.getAttribute("OpInactvReason");
            if (OpActv.equals("N")) {
                if (OpInactvReason == null) {
                    return 5;
                } else {
                    return 6;
                }
            }
        }
        return 0;
    }

    /*Method for Entry Head org in Table*/
    public void chkOrgExist(Integer sloc_id, String cld_id, String ho_org_id, String org_id, String doc_id,
                            Integer user_id) {
        RowQualifier rq = new RowQualifier(this.getOrgMnfOp2());
        rq.setWhereClause("DocId='" + doc_id + "' and OrgId='" + org_id + "'");
        System.out.println("Query=" + rq.getExprStr());
        Row fr[] = this.getOrgMnfOp2().getFilteredRows(rq);
        if (fr.length == 0) {
            orginsertdata(sloc_id, cld_id, ho_org_id, org_id, doc_id, user_id);
        }
    }

    public String orginsertdata(Integer sloc_id, String cld_id, String ho_org_id, String org_id, String doc_id,
                                Integer user_id) {
        try {
            System.out.println("----------------------helllooooo----------------------");
            return callStoredFunction(VARCHAR, "MNF.FN_MNF_PRF_ORG_REPLICATE(?,?,?,?,?,?,?)", new Object[] {
                                      cld_id, sloc_id, ho_org_id, org_id, user_id, doc_id, "MNF.ORG$MNF$OP"
        }).toString();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return "0";
        /*  OrgMnfOpVOImpl impl = this.getOrgMnfOp2();
        Row createRow = impl.createRow();
        createRow.setAttribute("CldId", cld_id);
        createRow.setAttribute("SlocId", sloc_id);
        createRow.setAttribute("HoOrgId", ho_org_id);
        createRow.setAttribute("OrgId", org_id);
        createRow.setAttribute("DocId", doc_id);
        createRow.setAttribute("OpActv", "Y");
        createRow.setAttribute("UsrIdCreate", user_id);
        createRow.setAttribute("UsrIdCreateDt", new Timestamp(System.currentTimeMillis()));
        impl.insertRow(createRow); */
    }

    /*----------------------------------Default Work Center--------------------------*/
    public void SelectDefaultWorkCenter() {
        MnfOpWcVOImpl wcImpl = this.getMnfOpWc2();
        RowSetIterator CRI = wcImpl.createRowSetIterator("new");
        if (CRI != null) {
            CRI.reset();
            while (CRI.hasNext()) {
                Row CRow = CRI.next();
                CRow.setAttribute("WcDflt", "N");
            }
            CRI.closeRowSetIterator();
        }
    }

    public String duplicateCheckInDocAttach(String val) {
        System.out.println("Val--------------------found------------------- " + val);
        ArrayList<String> al = new ArrayList<String>();
        ViewObjectImpl attch2 = this.getMnfOpAttch2();
        Row[] allRowsInRange = attch2.getAllRowsInRange();
        for (int i = 0; i < allRowsInRange.length; i++) {
            String DispFlNm = allRowsInRange[i].getAttribute("DispFlNm").toString();
            int i_2 = DispFlNm.indexOf(".");
            String _disp = DispFlNm.substring(0, i_2);
            System.out.println("Value ----------------------------OP---------------------" + _disp);
            al.add(_disp);
        }
        if (al.contains(val)) {
            return "fail";
        } else {
            return "chk";
        }
    }


    /*-----------------------------------END-------------------------------*/

    /**
     * Container's getter for MnfOpAttch1.
     * @return MnfOpAttch1
     */
    public ViewObjectImpl getMnfOpAttch1() {
        return (ViewObjectImpl) findViewObject("MnfOpAttch1");
    }


    /**
     * Container's getter for MnfOpWc1.
     * @return MnfOpWc1
     */
    public MnfOpWcVOImpl getMnfOpWc1() {
        return (MnfOpWcVOImpl) findViewObject("MnfOpWc1");
    }

    /**
     * Container's getter for OrgMnfOp1.
     * @return OrgMnfOp1
     */
    public OrgMnfOpVOImpl getOrgMnfOp1() {
        return (OrgMnfOpVOImpl) findViewObject("OrgMnfOp1");
    }


    /**
     * Container's getter for Transient1.
     * @return Transient1
     */
    public ViewObjectImpl getTransient1() {
        return (ViewObjectImpl) findViewObject("Transient1");
    }


    /**
     * Container's getter for MnfOpEo1.
     * @return MnfOpEo1
     */
    public ViewObjectImpl getMnfOpEo1() {
        return (ViewObjectImpl) findViewObject("MnfOpEo1");
    }


    /**
     * Container's getter for LOVItemNm1.
     * @return LOVItemNm1
     */
    public ViewObjectImpl getLOVItemNm1() {
        return (ViewObjectImpl) findViewObject("LOVItemNm1");
    }

    /**
     * Container's getter for LOVWcDesc1.
     * @return LOVWcDesc1
     */
    public ViewObjectImpl getLOVWcDesc1() {
        return (ViewObjectImpl) findViewObject("LOVWcDesc1");
    }

    /**
     * Container's getter for LOVOrgNm1.
     * @return LOVOrgNm1
     */
    public ViewObjectImpl getLOVOrgNm1() {
        return (ViewObjectImpl) findViewObject("LOVOrgNm1");
    }

    /**
     * Container's getter for LOVUserNm1.
     * @return LOVUserNm1
     */
    public ViewObjectImpl getLOVUserNm1() {
        return (ViewObjectImpl) findViewObject("LOVUserNm1");
    }

    /**
     * Container's getter for LOVOpIdDisp1.
     * @return LOVOpIdDisp1
     */
    public ViewObjectImpl getLOVOpIdDisp1() {
        return (ViewObjectImpl) findViewObject("LOVOpIdDisp1");
    }

    /**
     * Container's getter for MnfOp1.
     * @return MnfOp1
     */
    public ViewObjectImpl getMnfOp1() {
        return (ViewObjectImpl) findViewObject("MnfOp1");
    }

    /**
     * Container's getter for LOVUser1.
     * @return LOVUser1
     */
    public ViewObjectImpl getLOVUser2() {
        return (ViewObjectImpl) findViewObject("LOVUser2");
    }

    /**
     * Container's getter for MnfOpToLovUserVL1.
     * @return MnfOpToLovUserVL1
     */
    public ViewLinkImpl getMnfOpToLovUserVL1() {
        return (ViewLinkImpl) findViewLink("MnfOpToLovUserVL1");
    }

    /**
     * Container's getter for MnfOpAttch2.
     * @return MnfOpAttch2
     */
    public ViewObjectImpl getMnfOpAttch2() {
        return (ViewObjectImpl) findViewObject("MnfOpAttch2");
    }

    /**
     * Container's getter for MnfOpToMnfOpAttchVL1.
     * @return MnfOpToMnfOpAttchVL1
     */
    public ViewLinkImpl getMnfOpToMnfOpAttchVL1() {
        return (ViewLinkImpl) findViewLink("MnfOpToMnfOpAttchVL1");
    }

    /**
     * Container's getter for MnfOpEo2.
     * @return MnfOpEo2
     */
    public ViewObjectImpl getMnfOpEo2() {
        return (ViewObjectImpl) findViewObject("MnfOpEo2");
    }

    /**
     * Container's getter for MnfOpTOMnfOpEoVL1.
     * @return MnfOpTOMnfOpEoVL1
     */
    public ViewLinkImpl getMnfOpTOMnfOpEoVL1() {
        return (ViewLinkImpl) findViewLink("MnfOpTOMnfOpEoVL1");
    }


    /**
     * Container's getter for MnfOpWc2.
     * @return MnfOpWc2
     */
    public MnfOpWcVOImpl getMnfOpWc2() {
        return (MnfOpWcVOImpl) findViewObject("MnfOpWc2");
    }

    /**
     * Container's getter for MnfOpToMnfOpWcVL1.
     * @return MnfOpToMnfOpWcVL1
     */
    public ViewLinkImpl getMnfOpToMnfOpWcVL1() {
        return (ViewLinkImpl) findViewLink("MnfOpToMnfOpWcVL1");
    }

    /**
     * Container's getter for OrgMnfOp2.
     * @return OrgMnfOp2
     */
    public OrgMnfOpVOImpl getOrgMnfOp2() {
        return (OrgMnfOpVOImpl) findViewObject("OrgMnfOp2");
    }

    /**
     * Container's getter for MnfOpToOrgMnfOpVL1.
     * @return MnfOpToOrgMnfOpVL1
     */
    public ViewLinkImpl getMnfOpToOrgMnfOpVL1() {
        return (ViewLinkImpl) findViewLink("MnfOpToOrgMnfOpVL1");
    }

    /**
     * Container's getter for LOVMnfDocId1.
     * @return LOVMnfDocId1
     */
    public ViewObjectImpl getLOVMnfDocId1() {
        return (ViewObjectImpl) findViewObject("LOVMnfDocId1");
    }

    /**
     * Container's getter for MnfOpTools1.
     * @return MnfOpTools1
     */
    public MnfOpToolsVOImpl getMnfOpTools1() {
        return (MnfOpToolsVOImpl) findViewObject("MnfOpTools1");
    }


    /**
     * Container's getter for MnfOpTools4.
     * @return MnfOpTools4
     */
    public MnfOpToolsVOImpl getMnfOpTools2() {
        return (MnfOpToolsVOImpl) findViewObject("MnfOpTools2");
    }

    /**
     * Container's getter for MnfOpToMnfOpToolsVL3.
     * @return MnfOpToMnfOpToolsVL3
     */
    public ViewLinkImpl getMnfOpToMnfOpToolsVL1() {
        return (ViewLinkImpl) findViewLink("MnfOpToMnfOpToolsVL1");
    }

    /**
     * Container's getter for LOVOpMode1.
     * @return LOVOpMode1
     */
    public ViewObjectImpl getLOVOpMode1() {
        return (ViewObjectImpl) findViewObject("LOVOpMode1");
    }

    /**
     * Container's getter for LOVopStatus1.
     * @return LOVopStatus1
     */
    public ViewObjectImpl getLOVopStatus1() {
        return (ViewObjectImpl) findViewObject("LOVopStatus1");
    }


    /**
     * Container's getter for LOVOpType1.
     * @return LOVOpType1
     */
    public ViewObjectImpl getLOVOpType1() {
        return (ViewObjectImpl) findViewObject("LOVOpType1");
    }

    /**
     * Container's getter for LOVAppEMPVw1.
     * @return LOVAppEMPVw1
     */
    public ViewObjectImpl getLOVAppEMPVw1() {
        return (ViewObjectImpl) findViewObject("LOVAppEMPVw1");
    }

    /**
     * Container's getter for LOVOrgDescId1.
     * @return LOVOrgDescId1
     */
    public ViewObjectImpl getLOVOrgDescId1() {
        return (ViewObjectImpl) findViewObject("LOVOrgDescId1");
    }

    /**
     * Container's getter for MnfWcDesc1.
     * @return MnfWcDesc1
     */
    public ViewObjectImpl getMnfWcDesc1() {
        return (ViewObjectImpl) findViewObject("MnfWcDesc1");
    }

    /**
     * Container's getter for LOVItemNmId1.
     * @return LOVItemNmId1
     */
    public ViewObjectImpl getLOVItemNmId1() {
        return (ViewObjectImpl) findViewObject("LOVItemNmId1");
    }

    /**
     * Container's getter for LOVModUser1.
     * @return LOVModUser1
     */
    public ViewObjectImpl getLOVModUser2() {
        return (ViewObjectImpl) findViewObject("LOVModUser2");
    }

    /**
     * Container's getter for MnfOpTOLOVModUserVL1.
     * @return MnfOpTOLOVModUserVL1
     */
    public ViewLinkImpl getMnfOpTOLOVModUserVL1() {
        return (ViewLinkImpl) findViewLink("MnfOpTOLOVModUserVL1");
    }

    /**
     * Container's getter for LOVAppEmpNmValVO1.
     * @return LOVAppEmpNmValVO1
     */
    public ViewObjectImpl getLOVAppEmpNmValVO1() {
        return (ViewObjectImpl) findViewObject("LOVAppEmpNmValVO1");
    }


    /**
     * Container's getter for LOVItmUomVO1.
     * @return LOVItmUomVO1
     */
    public ViewObjectImpl getLOVItmUomVO1() {
        return (ViewObjectImpl) findViewObject("LOVItmUomVO1");
    }
 //------------Default SubContractor-------------------------------------
    public void SelectDefaultSubContractor() {
       ViewObjectImpl eoImpl = this.getMnfOpEo2();
        RowSetIterator CRI = eoImpl.createRowSetIterator("new");
        if (CRI != null) {
            CRI.reset();
            while (CRI.hasNext()) {
                Row CRow = CRI.next();
                CRow.setAttribute("DfltEoFlg", "N");
            }
            CRI.closeRowSetIterator();
        }
    }
    public String SubContractValidate() {
        adfLog.info("SunContract Validate call..");
        ViewObjectImpl impl = this.getMnfOp1();
        Row currentRow = impl.getCurrentRow();
        String opOutflag=(String )currentRow.getAttribute("OpOutsrcFlg");
        Integer OpScType=(Integer)currentRow.getAttribute("OpScType");
        if(opOutflag!=null){
        if(opOutflag.equalsIgnoreCase("Y"))
        {
           adfLog.info("Value of OpScType::"+OpScType);
           if(OpScType==null)
           return "N";
        }
        }
        return "Y";
    }
}

