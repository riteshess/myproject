package mnfparametersetupapp.model.services;


import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;


import javax.el.ELContext;

import javax.el.ValueExpression;

import mnfparametersetupapp.model.services.common.ParameterSetupAppAM;

import mnfparametersetupapp.model.views.LOVGLAccLinkVOImpl;
import mnfparametersetupapp.model.views.MnfParamSetVOImpl;

import oracle.adf.share.ADFContext;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.TransactionEvent;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Aug 12 16:08:39 PDT 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ParameterSetupAppAMImpl extends ApplicationModuleImpl implements ParameterSetupAppAM {
    /**
     * This is the default constructor (do not remove).
     */
    public ParameterSetupAppAMImpl() {
    }


    /**
     *Method for setting global parameters
     * called as an initial activity in the TaskFlow.
     */

    public void setGloblParam() {

        getMnfParamSet1().setBindCldId("-1");
        getMnfParamSet1().executeQuery();
        //setMnfParamSetVar();
        setOrgAttachparamVar();
        setCOAAttachParamVar();
        setTransParamSearch();
        setGlbParamInUom();
    }
    public void setGlbParamInUom(){
        ViewObjectImpl voimpl = this.getLOVUom1();
        voimpl.setNamedWhereClauseParam("BindCldId", this.getCldId());
        voimpl.setNamedWhereClauseParam("BindSlocId", this.getSlocId());
        voimpl.executeQuery();
    
    }

    public void setTransParamSearch() {
        getMnfParamSet1().executeQuery();
        //ViewObjectImpl voimpl = this.getTransParameter1();
        getTransParameter1().setNamedWhereClauseParam("BindCldId", this.getCldId());
        getTransParameter1().setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgId());
        getTransParameter1().setNamedWhereClauseParam("BindSlocId", this.getSlocId());
        getTransParameter1().executeQuery();
    }

    public void setMnfParamSetVar() {
        getMnfParamSet1().executeQuery();
        ViewObjectImpl voimpl = this.getMnfParamSet1();
        voimpl.setNamedWhereClauseParam("BindCldId", this.getCldId());
        voimpl.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgId());
        voimpl.setNamedWhereClauseParam("BindSlocId", this.getSlocId());
        //voimpl.setNamedWhereClauseParam("BindUsrId", this.getUsrId());
        voimpl.executeQuery();
    }


    public void setOrgAttachparamVar() {
        getMnfParam2().executeQuery();
        ViewObjectImpl voimpl = this.getLOVOrgAttachement1();
        voimpl.setNamedWhereClauseParam("BindCldId", this.getCldId());
        voimpl.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgId());
        voimpl.setNamedWhereClauseParam("BindSlocId", this.getSlocId());
        voimpl.executeQuery();
    }

    public void setCOAAttachParamVar() {
        ViewObjectImpl voimpl = this.getLOVGLAccLink1();
        voimpl.setNamedWhereClauseParam("BindCldId", this.getCldId());
        voimpl.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgId());
        voimpl.setNamedWhereClauseParam("BindOrgId", this.getOrgId());
        voimpl.setNamedWhereClauseParam("BindSlocId", this.getSlocId());
        voimpl.executeQuery();
    }

    public void setOrgMnfParmVar() {
        ViewObjectImpl voimpl = this.getOrgMnfParam2();
        voimpl.setNamedWhereClauseParam("BindCldId", this.getCldId());
        voimpl.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgId());
        voimpl.setNamedWhereClauseParam("BindSlocId", this.getSlocId());
        voimpl.executeQuery();

    }
    /*Method to resolve page flow scope parameter.*/

    public Object resolvEl(String data) {
        //  FacesContext fc = FacesContext.getCurrentInstance();
        ADFContext adfCtx = ADFContext.getCurrent();
        ELContext elContext = adfCtx.getELContext();
        ValueExpression valueExp = adfCtx.getExpressionFactory().createValueExpression(elContext, data, Object.class);
        Object Message = valueExp.getValue(elContext).toString();

        return Message;
    }


    /*getting page flow scope parameter methods.*/

    public Integer getSlocId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC }").toString());
    }

    public StringBuffer getCldId() {
        return new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
    }

    public StringBuffer getOrgId() {
        return new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
    }

    public StringBuffer getHoOrgId() {
        return new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString());
    }

    public Integer getUsrId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
    }

    /**
     *Parameter set search method
     *
     */
    public void searchParamSet() {
        // System.out.println("Inside am search :::::::::::::::::   " + searchParamSetTypeId);

        Row r = getTransParameter1().getCurrentRow();

        ViewObject voimpl = this.getMnfParamSet1().getViewObject();
        voimpl.setNamedWhereClauseParam("BindCldId", this.getCldId());
        voimpl.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgId());
        voimpl.setNamedWhereClauseParam("BindSlocId", this.getSlocId());
        voimpl.setNamedWhereClauseParam("BindSetType", r.getAttribute("ParamType"));
        voimpl.setNamedWhereClauseParam("BindSetDesc", r.getAttribute("ParamSetName"));
        voimpl.executeQuery();
        setOrgMnfParmVar();
    }

    /**
     *Parameter set reset method
     *
     */
    public void resetSearch() {
        getTransParameter1().executeQuery();
        // System.out.println("Inside am reset :::::::::::::::::   ");
        ViewObject voimpl = this.getMnfParamSet1();

        voimpl.setNamedWhereClauseParam("BindCldId", null);
        voimpl.setNamedWhereClauseParam("BindHoOrgId", null);
        voimpl.setNamedWhereClauseParam("BindSlocId", null);
        voimpl.setNamedWhereClauseParam("BindSetType", null);
        voimpl.setNamedWhereClauseParam("BindSetDesc", null);
        voimpl.executeQuery();
    }

    @Override
    public void beforeCommit(TransactionEvent transactionEvent) {
        // TODO Implement this method
        super.beforeCommit(transactionEvent);
    }

    /**
     * Container's getter for TransParameter1.
     * @return TransParameter1
     */
    public ViewObjectImpl getTransParameter1() {
        return (ViewObjectImpl) findViewObject("TransParameter1");
    }


    /**
     * Container's getter for MnfParamSet1.
     * @return MnfParamSet1
     */
    public MnfParamSetVOImpl getMnfParamSet1() {
        return (MnfParamSetVOImpl) findViewObject("MnfParamSet1");
    }

    /**
     * Container's getter for MnfParam2.
     * @return MnfParam2
     */
    public ViewObjectImpl getMnfParam2() {
        return (ViewObjectImpl) findViewObject("MnfParam2");
    }

    /**
     * Container's getter for FkMnfParam3VL1.
     * @return FkMnfParam3VL1
     */
    public ViewLinkImpl getFkMnfParam3VL1() {
        return (ViewLinkImpl) findViewLink("FkMnfParam3VL1");
    }


    /**
     * Container's getter for OrgMnfParam1.
     * @return OrgMnfParam1
     */
    public ViewObjectImpl getOrgMnfParam2() {
        return (ViewObjectImpl) findViewObject("OrgMnfParam2");
    }

    /**
     * Container's getter for FkOrgMnfParam1VL1.
     * @return FkOrgMnfParam1VL1
     */
    public ViewLinkImpl getFkOrgMnfParam1VL1() {
        return (ViewLinkImpl) findViewLink("FkOrgMnfParam1VL1");
    }

    /**
     * Container's getter for LOVGLAccLink1.
     * @return LOVGLAccLink1
     */
    public LOVGLAccLinkVOImpl getLOVGLAccLink1() {
        return (LOVGLAccLinkVOImpl) findViewObject("LOVGLAccLink1");
    }

    /**
     * Container's getter for LOVOrgAttachement1.
     * @return LOVOrgAttachement1
     */
    public ViewObjectImpl getLOVOrgAttachement1() {
        return (ViewObjectImpl) findViewObject("LOVOrgAttachement1");
    }


    private static int STRING = Types.VARCHAR;

    /** helper method for executing DB function
     * @param sqlReturnType return type of database function
     * @param stmt statement of executing function in database quary
     * @param bindVars input and out parameter of database function.
     * @return
     */
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.executeUpdate();
            return st.getObject(1);
        } catch (SQLException e) {
            e.printStackTrace();
            int end = e.getMessage().indexOf("\n");
            throw new JboException(e.getMessage().substring(11, end));

        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    throw new JboException(e.getMessage());
                }
            }
        }
    }

    private String getDuplicateParamFromFun(String cldId, int slocId, String hoOrgId, String tableFlag,
                                            String paramSetName, String paramSetCode) {

        try {
            return callStoredFunction(STRING, "MNF.FN_PRE_NM_EXIST(?,?,?,?,?,?)", new Object[] {
                                      cldId, slocId, hoOrgId, tableFlag, paramSetName, paramSetCode
        }).toString();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return "0";
    }


    /**
     *calling method to attach head org before same
     *
     */
    public void beforeSave(String cld_id, Integer slc_id, String ho_org_id, Integer usr_id) {

        RowSetIterator rsetIter = getOrgMnfParam2().createRowSetIterator(null);
        Integer chV = 0;
        Row r = null;

        while (rsetIter.hasNext()) {
            r = rsetIter.next();
            
            if (r.getAttribute("OrgId").equals(ho_org_id)) {
                chV = 1;

            }
        }
        if (chV == 0) {
            //create default ptrofile
            createOrgMnfPs(cld_id, slc_id, ho_org_id, usr_id);
           
        }

    }

    /**
     * Method to create OrgMnfRtVO rows for given values.
     * **/

    private void createOrgMnfPs(String cld_id, Integer slc_id, String ho_org_id, Integer usr_id) {

        Row r = getOrgMnfParam2().createRow();
        Row s = getMnfParam2().getCurrentRow();
        if (s.getAttribute("ParamActv").equals("false")) {
            String actv = s.getAttribute("ParamActv").toString();
            String resn = s.getAttribute("InactvReason").toString();
            Timestamp resnDt = (Timestamp) s.getAttribute("InactvDt");

            r.setAttribute("OrgParamActv", actv);
            r.setAttribute("InactvDt", resnDt);
            r.setAttribute("InactvReason", resn);
        } else {
            r.setAttribute("OrgParamActv", "Y");
        }
        r.setAttribute("CldId", cld_id);
        r.setAttribute("SlocId", slc_id);
        r.setAttribute("HoOrgId", ho_org_id);
        r.setAttribute("OrgId", ho_org_id);
        r.setAttribute("UsrIdCreate", usr_id);
        r.setAttribute("UsrIdCreateDt", new Timestamp(System.currentTimeMillis()));
        //  r.setAttribute("ParamId", Param_id);

        getOrgMnfParam2().insertRow(r);

    }

    /**
     *checking duplicate parameter set name method
     * @return
     */
    public String checkDuplicatSetName() {
        Row c = getMnfParamSet1().getCurrentRow();
        String tempParamSetName =
            (c.getAttribute("ParamSetDesc").toString() == null ? null : c.getAttribute("ParamSetDesc").toString());
        String tempParamSetId =
            (c.getAttribute("ParamSetId").toString() == null ? null : c.getAttribute("ParamSetId").toString());

        String result =
            getDuplicateParamFromFun(getCldId().toString(), getSlocId(), getHoOrgId().toString(), "PARAM$SET",
                                     tempParamSetName, tempParamSetId);
        //System.out.println(":::::::::::::::::::::::::result for param set " + result);
        return result;

    }

    /**
     *checking duplicate parameter name method
     * @return
     */
    public String checkDuplicatParamName() {
        Row r = getMnfParam2().getCurrentRow();
        String tempParamName =
            (r.getAttribute("ParamDesc").toString() == null ? null : r.getAttribute("ParamDesc").toString());

        String tempParamId =
            (r.getAttribute("ParamId").toString() == null ? null : r.getAttribute("ParamId").toString());

        String result =
            getDuplicateParamFromFun(getCldId().toString(), getSlocId(), getHoOrgId().toString(), "PARAM",
                                     tempParamName, tempParamId);
        // System.out.println(":::::::::::::::::::::::::result for param " + result);
        return result;
    }

    /**
     *
     * Replicate to all organization
     *
     * **/
    public void replicateOrgForParam() {
        deleteAddedOrgs("OrgMnfParam2");
        RowSetIterator rSetIter = getLOVOrgAttachement1().createRowSetIterator(null);
        Row r = null;
        String temp = "";
        while (rSetIter.hasNext()) {
            r = rSetIter.next();
            temp = (r.getAttribute("OrgId").toString() == null ? null : r.getAttribute("OrgId").toString());
            insertIntoOrgParam(temp);
            //((searchParamSetTypeId == null) ? null : searchParamSetTypeId));
        }

    }

    /**
     *Delete attached organization method
     *
     */
    public void deleteAddedOrgs(String voName) {

        while (findViewObject(voName).createRowSetIterator(null).hasNext()) {
            findViewObject(voName).createRowSetIterator(null).next().remove();
            //System.out.println(voName + " row removed ");
        }
    }

    /**
     *ATTACHING organization
     *
     */
    public void insertIntoOrgParam(String org) {

        if (org != null) {
            Row r = getOrgMnfParam2().createRow();

            r.setAttribute("OrgId", org);
            r.setAttribute("OrgParamActv", "Y");
            r.setAttribute("InactvDt", null);
            r.setAttribute("InactvReason", null);

            getOrgMnfParam2().insertRow(r);
        }
    }

    /**
     * Container's getter for LOVOrganization1.
     * @return LOVOrganization1
     */
    public ViewObjectImpl getLOVOrganization1() {
        return (ViewObjectImpl) findViewObject("LOVOrganization1");
    }

    /**
     * Container's getter for LOVUom1.
     * @return LOVUom1
     */
    public ViewObjectImpl getLOVUom1() {
        return (ViewObjectImpl) findViewObject("LOVUom1");
    }
}

