package mnfparametersetupapp.model.entities;

import java.math.BigInteger;

import java.sql.CallableStatement;

import java.sql.SQLException;
import java.sql.Types;

import javax.el.ELContext;
import javax.el.ValueExpression;

import oracle.adf.share.ADFContext;

import oracle.jbo.AttributeList;
import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.RowInconsistentException;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.NClobDomain;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Aug 26 14:36:17 PDT 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MnfParamSetEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CldId,
        SlocId,
        HoOrgId,
        ParamSetId,
        ParamSetDesc,
        ParamSetType,
        ParamSetCoaId,
        ParamSetActv,
        InactvReason,
        InactvDt,
        UsrIdCreate,
        UsrIdCreateDt,
        UsrIdMod,
        UsrIdModDt,
        MnfParam;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int PARAMSETID = AttributesEnum.ParamSetId.index();
    public static final int PARAMSETDESC = AttributesEnum.ParamSetDesc.index();
    public static final int PARAMSETTYPE = AttributesEnum.ParamSetType.index();
    public static final int PARAMSETCOAID = AttributesEnum.ParamSetCoaId.index();
    public static final int PARAMSETACTV = AttributesEnum.ParamSetActv.index();
    public static final int INACTVREASON = AttributesEnum.InactvReason.index();
    public static final int INACTVDT = AttributesEnum.InactvDt.index();
    public static final int USRIDCREATE = AttributesEnum.UsrIdCreate.index();
    public static final int USRIDCREATEDT = AttributesEnum.UsrIdCreateDt.index();
    public static final int USRIDMOD = AttributesEnum.UsrIdMod.index();
    public static final int USRIDMODDT = AttributesEnum.UsrIdModDt.index();
    public static final int MNFPARAM = AttributesEnum.MnfParam.index();

    /**
     * This is the default constructor (do not remove).
     */
    public MnfParamSetEOImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("mnfparametersetupapp.model.entities.MnfParamSetEO");
    }


    /**
     * Gets the attribute value for CldId, using the alias name CldId.
     * @return the value of CldId
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CldId.
     * @param value value to set the CldId
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for SlocId, using the alias name SlocId.
     * @return the value of SlocId
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for SlocId.
     * @param value value to set the SlocId
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for HoOrgId, using the alias name HoOrgId.
     * @return the value of HoOrgId
     */
    public String getHoOrgId() {
        return (String) getAttributeInternal(HOORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for HoOrgId.
     * @param value value to set the HoOrgId
     */
    public void setHoOrgId(String value) {
        setAttributeInternal(HOORGID, value);
    }

    /**
     * Gets the attribute value for ParamSetId, using the alias name ParamSetId.
     * @return the value of ParamSetId
     */
    public String getParamSetId() {
        return (String) getAttributeInternal(PARAMSETID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ParamSetId.
     * @param value value to set the ParamSetId
     */
    public void setParamSetId(String value) {
        setAttributeInternal(PARAMSETID, value);
    }

    /**
     * Gets the attribute value for ParamSetDesc, using the alias name ParamSetDesc.
     * @return the value of ParamSetDesc
     */
    public String getParamSetDesc() {
        return (String) getAttributeInternal(PARAMSETDESC);
    }

    /**
     * Sets <code>value</code> as the attribute value for ParamSetDesc.
     * @param value value to set the ParamSetDesc
     */
    public void setParamSetDesc(String value) {
        setAttributeInternal(PARAMSETDESC, value);
    }

    /**
     * Gets the attribute value for ParamSetType, using the alias name ParamSetType.
     * @return the value of ParamSetType
     */
    public Integer getParamSetType() {
        return (Integer) getAttributeInternal(PARAMSETTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ParamSetType.
     * @param value value to set the ParamSetType
     */
    public void setParamSetType(Integer value) {
        setAttributeInternal(PARAMSETTYPE, value);
    }

    /**
     * Gets the attribute value for ParamSetCoaId, using the alias name ParamSetCoaId.
     * @return the value of ParamSetCoaId
     */
    public oracle.jbo.domain.Number getParamSetCoaId() {
        return (oracle.jbo.domain.Number) getAttributeInternal(PARAMSETCOAID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ParamSetCoaId.
     * @param value value to set the ParamSetCoaId
     */
    public void setParamSetCoaId(oracle.jbo.domain.Number value) {
        setAttributeInternal(PARAMSETCOAID, value);
    }

    /**
     * Gets the attribute value for ParamSetActv, using the alias name ParamSetActv.
     * @return the value of ParamSetActv
     */
    public String getParamSetActv() {
        return (String) getAttributeInternal(PARAMSETACTV);
    }

    /**
     * Sets <code>value</code> as the attribute value for ParamSetActv.
     * @param value value to set the ParamSetActv
     */
    public void setParamSetActv(String value) {
        setAttributeInternal(PARAMSETACTV, value);
    }

    /**
     * Gets the attribute value for InactvReason, using the alias name InactvReason.
     * @return the value of InactvReason
     */
    public String getInactvReason() {
        return (String) getAttributeInternal(INACTVREASON);
    }

    /**
     * Sets <code>value</code> as the attribute value for InactvReason.
     * @param value value to set the InactvReason
     */
    public void setInactvReason(String value) {
        setAttributeInternal(INACTVREASON, value);
    }

    /**
     * Gets the attribute value for InactvDt, using the alias name InactvDt.
     * @return the value of InactvDt
     */
    public Timestamp getInactvDt() {
        return (Timestamp) getAttributeInternal(INACTVDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for InactvDt.
     * @param value value to set the InactvDt
     */
    public void setInactvDt(Timestamp value) {
        setAttributeInternal(INACTVDT, value);
    }

    /**
     * Gets the attribute value for UsrIdCreate, using the alias name UsrIdCreate.
     * @return the value of UsrIdCreate
     */
    public Integer getUsrIdCreate() {
        return (Integer) getAttributeInternal(USRIDCREATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdCreate.
     * @param value value to set the UsrIdCreate
     */
    public void setUsrIdCreate(Integer value) {
        setAttributeInternal(USRIDCREATE, value);
    }

    /**
     * Gets the attribute value for UsrIdCreateDt, using the alias name UsrIdCreateDt.
     * @return the value of UsrIdCreateDt
     */
    public Timestamp getUsrIdCreateDt() {
        return (Timestamp) getAttributeInternal(USRIDCREATEDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdCreateDt.
     * @param value value to set the UsrIdCreateDt
     */
    public void setUsrIdCreateDt(Timestamp value) {
        setAttributeInternal(USRIDCREATEDT, value);
    }

    /**
     * Gets the attribute value for UsrIdMod, using the alias name UsrIdMod.
     * @return the value of UsrIdMod
     */
    public Integer getUsrIdMod() {
        return (Integer) getAttributeInternal(USRIDMOD);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdMod.
     * @param value value to set the UsrIdMod
     */
    public void setUsrIdMod(Integer value) {
        setAttributeInternal(USRIDMOD, value);
    }

    /**
     * Gets the attribute value for UsrIdModDt, using the alias name UsrIdModDt.
     * @return the value of UsrIdModDt
     */
    public Timestamp getUsrIdModDt() {
        return (Timestamp) getAttributeInternal(USRIDMODDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdModDt.
     * @param value value to set the UsrIdModDt
     */
    public void setUsrIdModDt(Timestamp value) {
        setAttributeInternal(USRIDMODDT, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getMnfParam() {
        return (RowIterator) getAttributeInternal(MNFPARAM);
    }


    /**
     * @param cldId key constituent
     * @param slocId key constituent
     * @param hoOrgId key constituent
     * @param paramSetId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(String cldId, Integer slocId, String hoOrgId, String paramSetId) {
        return new Key(new Object[] { cldId, slocId, hoOrgId, paramSetId });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        setUsrIdCreateDt(new oracle.jbo.domain.Timestamp(new java.util.Date()));
        setParamSetId(getParamSetIdFromFun(getSlocId(),getCldId(),getHoOrgId(),getOrgId(),25503,0,"MNF$PARAM$SET",0));
        //System.out.println(getParamSetId());
        super.create(attributeList);

    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        try {
            super.lock();
        } catch (RowInconsistentException e) {
            refresh(REFRESH_WITH_DB_ONLY_IF_UNCHANGED | REFRESH_CONTAINEES);
            super.lock();
        }
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        if (operation == DML_UPDATE) {
            setUsrIdMod(getCurrentUser());
            setUsrIdModDt(new Timestamp(System.currentTimeMillis()));
        }
        
        super.doDML(operation, e);
    }

    public Object resolvEl(String data) {
        //  FacesContext fc = FacesContext.getCurrentInstance();
        ADFContext adfCtx = ADFContext.getCurrent();
        ELContext elContext = adfCtx.getELContext();
        ValueExpression valueExp = adfCtx.getExpressionFactory().createValueExpression(elContext, data, Object.class);
        Object Message = valueExp.getValue(elContext).toString();

        return Message;
    }

    public Integer getCurrentUser() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
    }
    public String getOrgId() {
        return (resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
    }


    private static int STRING = Types.VARCHAR;

    /** helper method for executing DB function
     * @param sqlReturnType return type of database function
     * @param stmt statement of executing function in database quary
     * @param bindVars input and out parameter of database function.
     * @return
     */
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.executeUpdate();
            return st.getObject(1);
        } catch (SQLException e) {
            e.printStackTrace();
            int end = e.getMessage().indexOf("\n");
            throw new JboException(e.getMessage().substring(11, end));

        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    throw new JboException(e.getMessage());
                }
            }
        }
    }

    /**
     * @param OrgId organisation id
     * @param slocId server location id
     * @param docId document id
     * @param hoOrgId Head Organization id
     * @return next route id
     *  P_SLOC_ID := 1;
        P_CLD_ID := '0000';
        P_HO_ORG_ID := '01';
        P_ORG_ID := '01';
        P_DOC_ID := 25502;
        p_doc_type_id     NUMBER DEFAULT NULL,
        p_tablename       VARCHAR2,
        p_doc_sub_type_id NUMBER DEFAULT 0
     */
    public String getParamSetIdFromFun(Integer slocId, String cldId, String hoOrgId, String orgId, Integer docId,
                                Integer docTypeId, String tableName, Integer docSubTypeId) {


        return (String) callStoredFunction(STRING, "mnf.fn_mnf_get_prf_id(?,?,?,?,?,?,?,?)", new Object[] {
                                           slocId, cldId, hoOrgId, orgId, docId, docTypeId, tableName, docSubTypeId});
    }
    
    
}

