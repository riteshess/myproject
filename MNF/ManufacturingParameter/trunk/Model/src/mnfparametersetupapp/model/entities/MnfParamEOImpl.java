package mnfparametersetupapp.model.entities;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import javax.el.ELContext;
import javax.el.ValueExpression;

import oracle.adf.share.ADFContext;

import oracle.jbo.AttributeList;
import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowInconsistentException;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Aug 12 16:51:18 PDT 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MnfParamEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CldId,
        SlocId,
        HoOrgId,
        ParamId,
        ParamDesc,
        ParamType,
        ParamBasis,
        ParamVal,
        ParamCoaId,
        ParamActv,
        UsrIdCreate,
        UsrIdCreateDt,
        UsrIdMod,
        UsrIdModDt,
        ParamSetId,
        InactvReason,
        InactvDt,
        ParamUom,
        ParamValType,
        ParamRmrk,
        OrgMnfParam,
        MnfParamSet1;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int PARAMID = AttributesEnum.ParamId.index();
    public static final int PARAMDESC = AttributesEnum.ParamDesc.index();
    public static final int PARAMTYPE = AttributesEnum.ParamType.index();
    public static final int PARAMBASIS = AttributesEnum.ParamBasis.index();
    public static final int PARAMVAL = AttributesEnum.ParamVal.index();
    public static final int PARAMCOAID = AttributesEnum.ParamCoaId.index();
    public static final int PARAMACTV = AttributesEnum.ParamActv.index();
    public static final int USRIDCREATE = AttributesEnum.UsrIdCreate.index();
    public static final int USRIDCREATEDT = AttributesEnum.UsrIdCreateDt.index();
    public static final int USRIDMOD = AttributesEnum.UsrIdMod.index();
    public static final int USRIDMODDT = AttributesEnum.UsrIdModDt.index();
    public static final int PARAMSETID = AttributesEnum.ParamSetId.index();
    public static final int INACTVREASON = AttributesEnum.InactvReason.index();
    public static final int INACTVDT = AttributesEnum.InactvDt.index();
    public static final int PARAMUOM = AttributesEnum.ParamUom.index();
    public static final int PARAMVALTYPE = AttributesEnum.ParamValType.index();
    public static final int PARAMRMRK = AttributesEnum.ParamRmrk.index();
    public static final int ORGMNFPARAM = AttributesEnum.OrgMnfParam.index();
    public static final int MNFPARAMSET1 = AttributesEnum.MnfParamSet1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public MnfParamEOImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("mnfparametersetupapp.model.entities.MnfParamEO");
    }


    /**
     * Gets the attribute value for CldId, using the alias name CldId.
     * @return the value of CldId
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CldId.
     * @param value value to set the CldId
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for SlocId, using the alias name SlocId.
     * @return the value of SlocId
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for SlocId.
     * @param value value to set the SlocId
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for HoOrgId, using the alias name HoOrgId.
     * @return the value of HoOrgId
     */
    public String getHoOrgId() {
        return (String) getAttributeInternal(HOORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for HoOrgId.
     * @param value value to set the HoOrgId
     */
    public void setHoOrgId(String value) {
        setAttributeInternal(HOORGID, value);
    }

    /**
     * Gets the attribute value for ParamId, using the alias name ParamId.
     * @return the value of ParamId
     */
    public String getParamId() {
        return (String) getAttributeInternal(PARAMID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ParamId.
     * @param value value to set the ParamId
     */
    public void setParamId(String value) {
        setAttributeInternal(PARAMID, value);
    }

    /**
     * Gets the attribute value for ParamDesc, using the alias name ParamDesc.
     * @return the value of ParamDesc
     */
    public String getParamDesc() {
        return (String) getAttributeInternal(PARAMDESC);
    }

    /**
     * Sets <code>value</code> as the attribute value for ParamDesc.
     * @param value value to set the ParamDesc
     */
    public void setParamDesc(String value) {
        setAttributeInternal(PARAMDESC, value);
    }

    /**
     * Gets the attribute value for ParamType, using the alias name ParamType.
     * @return the value of ParamType
     */
    public Integer getParamType() {
        return (Integer) getAttributeInternal(PARAMTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ParamType.
     * @param value value to set the ParamType
     */
    public void setParamType(Integer value) {
        setAttributeInternal(PARAMTYPE, value);
    }

    /**
     * Gets the attribute value for ParamBasis, using the alias name ParamBasis.
     * @return the value of ParamBasis
     */
    public Integer getParamBasis() {
        return (Integer) getAttributeInternal(PARAMBASIS);
    }

    /**
     * Sets <code>value</code> as the attribute value for ParamBasis.
     * @param value value to set the ParamBasis
     */
    public void setParamBasis(Integer value) {
        setAttributeInternal(PARAMBASIS, value);
    }

    /**
     * Gets the attribute value for ParamVal, using the alias name ParamVal.
     * @return the value of ParamVal
     */
    public oracle.jbo.domain.Number getParamVal() {
        return (oracle.jbo.domain.Number) getAttributeInternal(PARAMVAL);
    }

    /**
     * Sets <code>value</code> as the attribute value for ParamVal.
     * @param value value to set the ParamVal
     */
    public void setParamVal(oracle.jbo.domain.Number value) {
        setAttributeInternal(PARAMVAL, value);
    }

    /**
     * Gets the attribute value for ParamCoaId, using the alias name ParamCoaId.
     * @return the value of ParamCoaId
     */
    public Number getParamCoaId() {
        return (Number) getAttributeInternal(PARAMCOAID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ParamCoaId.
     * @param value value to set the ParamCoaId
     */
    public void setParamCoaId(oracle.jbo.domain.Number value) {
        setAttributeInternal(PARAMCOAID, value);
    }

    /**
     * Gets the attribute value for ParamActv, using the alias name ParamActv.
     * @return the value of ParamActv
     */
    public String getParamActv() {
        return (String) getAttributeInternal(PARAMACTV);
    }

    /**
     * Sets <code>value</code> as the attribute value for ParamActv.
     * @param value value to set the ParamActv
     */
    public void setParamActv(String value) {
        setAttributeInternal(PARAMACTV, value);
    }

    /**
     * Gets the attribute value for UsrIdCreate, using the alias name UsrIdCreate.
     * @return the value of UsrIdCreate
     */
    public Integer getUsrIdCreate() {
        return (Integer) getAttributeInternal(USRIDCREATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdCreate.
     * @param value value to set the UsrIdCreate
     */
    public void setUsrIdCreate(Integer value) {
        setAttributeInternal(USRIDCREATE, value);
    }

    /**
     * Gets the attribute value for UsrIdCreateDt, using the alias name UsrIdCreateDt.
     * @return the value of UsrIdCreateDt
     */
    public Timestamp getUsrIdCreateDt() {
        return (Timestamp) getAttributeInternal(USRIDCREATEDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdCreateDt.
     * @param value value to set the UsrIdCreateDt
     */
    public void setUsrIdCreateDt(Timestamp value) {
        setAttributeInternal(USRIDCREATEDT, value);
    }

    /**
     * Gets the attribute value for UsrIdMod, using the alias name UsrIdMod.
     * @return the value of UsrIdMod
     */
    public Integer getUsrIdMod() {
        return (Integer) getAttributeInternal(USRIDMOD);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdMod.
     * @param value value to set the UsrIdMod
     */
    public void setUsrIdMod(Integer value) {
        setAttributeInternal(USRIDMOD, value);
    }

    /**
     * Gets the attribute value for UsrIdModDt, using the alias name UsrIdModDt.
     * @return the value of UsrIdModDt
     */
    public Timestamp getUsrIdModDt() {
        return (Timestamp) getAttributeInternal(USRIDMODDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdModDt.
     * @param value value to set the UsrIdModDt
     */
    public void setUsrIdModDt(Timestamp value) {
        setAttributeInternal(USRIDMODDT, value);
    }

    /**
     * Gets the attribute value for ParamSetId, using the alias name ParamSetId.
     * @return the value of ParamSetId
     */
    public String getParamSetId() {
        return (String) getAttributeInternal(PARAMSETID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ParamSetId.
     * @param value value to set the ParamSetId
     */
    public void setParamSetId(String value) {
        setAttributeInternal(PARAMSETID, value);
    }

    /**
     * Gets the attribute value for InactvReason, using the alias name InactvReason.
     * @return the value of InactvReason
     */
    public String getInactvReason() {
        return (String) getAttributeInternal(INACTVREASON);
    }

    /**
     * Sets <code>value</code> as the attribute value for InactvReason.
     * @param value value to set the InactvReason
     */
    public void setInactvReason(String value) {
        setAttributeInternal(INACTVREASON, value);
    }

    /**
     * Gets the attribute value for InactvDt, using the alias name InactvDt.
     * @return the value of InactvDt
     */
    public Timestamp getInactvDt() {
        return (Timestamp) getAttributeInternal(INACTVDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for InactvDt.
     * @param value value to set the InactvDt
     */
    public void setInactvDt(Timestamp value) {
        setAttributeInternal(INACTVDT, value);
    }

    /**
     * Gets the attribute value for ParamUom, using the alias name ParamUom.
     * @return the value of ParamUom
     */
    public String getParamUom() {
        return (String) getAttributeInternal(PARAMUOM);
    }

    /**
     * Sets <code>value</code> as the attribute value for ParamUom.
     * @param value value to set the ParamUom
     */
    public void setParamUom(String value) {
        setAttributeInternal(PARAMUOM, value);
    }

    /**
     * Gets the attribute value for ParamValType, using the alias name ParamValType.
     * @return the value of ParamValType
     */
    public Integer getParamValType() {
        return (Integer) getAttributeInternal(PARAMVALTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ParamValType.
     * @param value value to set the ParamValType
     */
    public void setParamValType(Integer value) {
        setAttributeInternal(PARAMVALTYPE, value);
    }

    /**
     * Gets the attribute value for ParamRmrk, using the alias name ParamRmrk.
     * @return the value of ParamRmrk
     */
    public String getParamRmrk() {
        return (String) getAttributeInternal(PARAMRMRK);
    }

    /**
     * Sets <code>value</code> as the attribute value for ParamRmrk.
     * @param value value to set the ParamRmrk
     */
    public void setParamRmrk(String value) {
        setAttributeInternal(PARAMRMRK, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getOrgMnfParam() {
        return (RowIterator) getAttributeInternal(ORGMNFPARAM);
    }


    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public MnfParamSetEOImpl getMnfParamSet1() {
        return (MnfParamSetEOImpl) getAttributeInternal(MNFPARAMSET1);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setMnfParamSet1(MnfParamSetEOImpl value) {
        setAttributeInternal(MNFPARAMSET1, value);
    }


    /**
     * @param cldId key constituent
     * @param slocId key constituent
     * @param hoOrgId key constituent
     * @param paramId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(String cldId, Integer slocId, String hoOrgId, String paramId) {
        return new Key(new Object[] { cldId, slocId, hoOrgId, paramId });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        setUsrIdCreateDt(new oracle.jbo.domain.Timestamp(new java.util.Date()));
        setUsrIdCreate(getCurrentUser());

        Integer curntParmSetType = Integer.parseInt((getMnfParamSet1().getAttribute("ParamSetType")).toString());
        // System.out.println(curntParmSetType + "   :::::   Current paremeter set ID");


        if ((getMnfParamSet1().getAttribute("ParamSetCoaId")) != null) {
            oracle.jbo.domain.Number curntParmSetCOAId = (oracle.jbo.domain.Number)(getMnfParamSet1().getAttribute("ParamSetCoaId"));
            //  System.out.println(curntParmSetCOAId + "   :::::   Current paremeter set COA ID");
            setParamCoaId(curntParmSetCOAId);
        }
        if ((getMnfParamSet1().getAttribute("ParamSetActv")) != null) {
            String currntParmSetActv = (getMnfParamSet1().getAttribute("ParamSetActv")).toString();
            setParamActv(currntParmSetActv);
        }
        if ((getMnfParamSet1().getAttribute("InactvReason")) != null) {
            String currntInactvReason = (getMnfParamSet1().getAttribute("InactvReason")).toString();
            setInactvReason(currntInactvReason);
        }
        if ((getMnfParamSet1().getAttribute("InactvDt")) != null) {
            Timestamp currntInactvDt = (Timestamp) (getMnfParamSet1().getAttribute("InactvDt"));
            setInactvDt(currntInactvDt);
        }

        setParamType(curntParmSetType);

        setParamId(getParamIdFromFun(getSlocId(), getCldId(), getHoOrgId(), getOrgId(), 25502, 0, "MNF$PARAM", 0));
        //slocId, cldId, hoOrgId, orgId, docId, docTypeId, tableName, docSubTypeId
        //setUsrIdCreate(value);
        //System.out.println(getParamId());

        super.create(attributeList);


    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        try {
            super.lock();
        } catch (RowInconsistentException e) {
            refresh(REFRESH_WITH_DB_ONLY_IF_UNCHANGED | REFRESH_CONTAINEES);
            super.lock();
        }
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        if (operation == DML_UPDATE) {
            setUsrIdMod(getCurrentUser());
            setUsrIdModDt(new Timestamp(System.currentTimeMillis()));
            // updateParamDetails();
        }

        super.doDML(operation, e);
    }

    public Object resolvEl(String data) {
        //  FacesContext fc = FacesContext.getCurrentInstance();
        ADFContext adfCtx = ADFContext.getCurrent();
        ELContext elContext = adfCtx.getELContext();
        ValueExpression valueExp = adfCtx.getExpressionFactory().createValueExpression(elContext, data, Object.class);
        Object Message = valueExp.getValue(elContext).toString();

        return Message;
    }

    public Integer getCurrentUser() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
    }

    public String getOrgId() {
        return (resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
    }

    @Override
    protected void prepareForDML(int i, TransactionEvent transactionEvent) {

        super.prepareForDML(i, transactionEvent);
        if (i == EntityImpl.DML_INSERT) {
            // createParamDetails();
            return;
        }
    }

    private static int STRING = Types.VARCHAR;

    /** helper method for executing DB function
     * @param sqlReturnType return type of database function
     * @param stmt statement of executing function in database quary
     * @param bindVars input and out parameter of database function.
     * @return
     */
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.executeUpdate();
            return st.getObject(1);
        } catch (SQLException e) {
            e.printStackTrace();
            int end = e.getMessage().indexOf("\n");
            throw new JboException(e.getMessage().substring(11, end));

        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    throw new JboException(e.getMessage());
                }
            }
        }
    }

    /**
     * @param OrgId organisation id
     * @param slocId server location id
     * @param docId document id
     * @param hoOrgId Head Organization id
     * @return next route id
     *  P_SLOC_ID := 1;
        P_CLD_ID := '0000';
        P_HO_ORG_ID := '01';
        P_ORG_ID := '01';
        P_DOC_ID := 25502;
        p_doc_type_id     NUMBER DEFAULT NULL,
        p_tablename       VARCHAR2,
        p_doc_sub_type_id NUMBER DEFAULT 0
     */
    public String getParamIdFromFun(Integer slocId, String cldId, String hoOrgId, String orgId, Integer docId,
                                    Integer docTypeId, String tableName, Integer docSubTypeId) {


        return (String) callStoredFunction(STRING, "mnf.fn_mnf_get_prf_id(?,?,?,?,?,?,?,?)", new Object[] {
                                           slocId, cldId, hoOrgId, orgId, docId, docTypeId, tableName, docSubTypeId
    });
    }
}

