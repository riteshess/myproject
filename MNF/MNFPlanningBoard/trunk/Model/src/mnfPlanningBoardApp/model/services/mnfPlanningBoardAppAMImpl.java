package mnfPlanningBoardApp.model.services;

import adf.utils.bean.ADFBeanUtils;
import adf.utils.bean.StaticValue;

import adf.utils.ebiz.EbizParams;
import adf.utils.model.ADFModelUtils;

import java.io.StringBufferInputStream;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Calendar;

import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.SortedSet;
import java.util.TreeMap;
import java.util.TreeSet;

import javax.el.ELContext;
import javax.el.ValueExpression;

import oracle.jbo.domain.Timestamp;

import mnfPlanningBoardApp.model.services.common.mnfPlanningBoardAppAM;

import oracle.adf.share.ADFContext;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.server.ApplicationModuleImpl;

import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import oracle.jbo.ViewCriteria;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Jan 02 12:04:36 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class mnfPlanningBoardAppAMImpl extends ApplicationModuleImpl implements mnfPlanningBoardAppAM {

    protected String eo_Id = null;

    /**
     * This is the default constructor (do not remove).
     */
    public mnfPlanningBoardAppAMImpl() {
    }

    /**
     * Container's getter for MnfPlnTxnVO.
     * @return MnfPlnTxnVO
     */
    public ViewObjectImpl getMnfPlnTxnVO() {
        return (ViewObjectImpl) findViewObject("MnfPlnTxnVO");
    }

    /**
     * Container's getter for MnfPlnCustVO.
     * @return MnfPlnCustVO
     */
    public ViewObjectImpl getMnfPlnCustVO() {
        return (ViewObjectImpl) findViewObject("MnfPlnCustVO");
    }

    //app error
    public void setGlobalParameter(String cld_Id, Integer sloc_Id, String ho_Org_Id, String org_Id, String doc_Id,
                                   String usr_Id) {
        setParamInCudtProdutGrap(cld_Id, sloc_Id, ho_Org_Id, org_Id);
        setSoBindparam(cld_Id, sloc_Id, ho_Org_Id);
        //setCustomerList();
    }


    protected void setparamInPrdListForBom() {
        getLISTProductForBomVO().setNamedWhereClauseParam("BindCldId", getCldId());
        getLISTProductForBomVO().setNamedWhereClauseParam("BindSlocId", getSlocId());
        getLISTProductForBomVO().setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        getLISTProductForBomVO().setNamedWhereClauseParam("BindOrgId", getOrgId());
        getLISTProductForBomVO().executeQuery();
    }

    protected void setParamInViewBom() {
        getVIEWBOMVO().setNamedWhereClauseParam("BindCldId", getCldId());
        getVIEWBOMVO().setNamedWhereClauseParam("BindSlocId", getSlocId());
        getVIEWBOMVO().setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        getVIEWBOMVO().setNamedWhereClauseParam("BindOrgId", getOrgId());
        getVIEWBOMVO().executeQuery();
    }

    /**
     * Method to set global parameter in Product PAGE Views
     */
    public void setGlobalProductParameter() {

        setParamInViewOverview(null, null, null);
        setParamInGraphCost();
        setParamInGraphQuantity();
        setParamInDualOverviewPage();
        setDualInputSrc(null);
        setParamInDualPlanSearch();
        setGlobalParamInMnfPlnVo();
        setGlobalGraphTotalPlanState();
        setGlobalGraphOrderState(null);
        setGlobalGraphTotalProductPerPlan(null);
        //

    }

    public void setOverviewGraphParamter() {
        setGlobalGraphTotalPlanState();
        setGlobalGraphOrderState(null);
        setGlobalGraphTotalProductPerPlan(null);
    }

    public void filterOverviewGraph(String plan_doc_id) {
        //setGlobalGraphTotalPlanState();
        setGlobalGraphOrderState(plan_doc_id);
        setGlobalGraphTotalProductPerPlan(plan_doc_id);
    }

    protected void setGlobalGraphTotalPlanState() {
        getGraphTotalPlanState().setNamedWhereClauseParam("BindCldId", getCldId());
        getGraphTotalPlanState().setNamedWhereClauseParam("BindSlocId", getSlocId());
        getGraphTotalPlanState().setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        getGraphTotalPlanState().setNamedWhereClauseParam("BindOrgId", getOrgId());
        getGraphTotalPlanState().executeQuery();
    }

    public void setGlobalGraphTotalProductPerPlan(String plan_doc_id) {
        getGraphTotalProductPerPlan().setNamedWhereClauseParam("BindCldId", getCldId());
        getGraphTotalProductPerPlan().setNamedWhereClauseParam("BindSlocId", getSlocId());
        getGraphTotalProductPerPlan().setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        getGraphTotalProductPerPlan().setNamedWhereClauseParam("BindOrgId", getOrgId());
        getGraphTotalProductPerPlan().setNamedWhereClauseParam("BindPlnDocId", plan_doc_id);
        getGraphTotalProductPerPlan().executeQuery();
    }

    public void setGlobalGraphOrderState(String plan_doc_id) {
        getGraphOrderState().setNamedWhereClauseParam("BindCldId", getCldId());
        getGraphOrderState().setNamedWhereClauseParam("BindSlocId", getSlocId());
        getGraphOrderState().setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        getGraphOrderState().setNamedWhereClauseParam("BindOrgId", getOrgId());
        getGraphOrderState().setNamedWhereClauseParam("BindPlnDocId", plan_doc_id);
        getGraphOrderState().executeQuery();
    }


    protected void setGlobalParamInMnfPlnVo() {
        ViewObjectImpl impl = this.getMnfPlnVO();
        ViewCriteria vc = impl.getViewCriteria("MnfPlnVOCriteria");
        impl.applyViewCriteria(vc);
        impl.setNamedWhereClauseParam("BindCldId", getCldId());
        impl.setNamedWhereClauseParam("BindSlocId", getSlocId());
        impl.setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        impl.setNamedWhereClauseParam("BindOrgId", getOrgId());
        impl.setNamedWhereClauseParam("BindPlanDocId", null);
        impl.setNamedWhereClauseParam("BindPlanDate", null);
        impl.setNamedWhereClauseParam("BindPrdState", null);
        impl.executeQuery();
    }

    public void setParamForPrdDetalFromTaskFlowTravel() {
        setViewOverViewcustomerBind(getSelOutItmId(), getSelDlvDt(), getSelPlnId());
        setViewOverViewRawMatBind(getSelOutItmId(), getSelDlvDt(), getSelPlnId(), null);
    }

    /**
     * Method to filter the overivew product page
     */
    public void filterOverviewPage() {
        Row r = getDualOverviewPage().first();

        setParamInViewOverview(r.getAttribute("OutItmId"), r.getAttribute("DlvDt"), r.getAttribute("PlanId"));
    }

    /**
     * Method to filter the plan over view page
     */
    public void filterPlanForSearch() {
        Row r = getDualPlanSearch().first();

        ViewObjectImpl impl = this.getMnfPlnVO();
        ViewCriteria vc = impl.getViewCriteria("MnfPlnVOCriteria");
        impl.applyViewCriteria(vc);
        impl.setNamedWhereClauseParam("BindCldId", getCldId());
        impl.setNamedWhereClauseParam("BindSlocId", getSlocId());
        impl.setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        impl.setNamedWhereClauseParam("BindOrgId", getOrgId());
        impl.setNamedWhereClauseParam("BindPlanDocId", r.getAttribute("PlanDocId"));
        impl.setNamedWhereClauseParam("BindPlanDate", r.getAttribute("PlanDate"));
        impl.setNamedWhereClauseParam("BindPrdState", r.getAttribute("PlanStatus"));
        impl.executeQuery();

    }

    /**
     * Method to reset search paln filed
     */
    public void resetplanSearch() {
        ViewObjectImpl impl = this.getMnfPlnVO();
        ViewCriteria vc = impl.getViewCriteria("MnfPlnVOCriteria");
        impl.applyViewCriteria(vc);
        impl.setNamedWhereClauseParam("BindCldId", getCldId());
        impl.setNamedWhereClauseParam("BindSlocId", getSlocId());
        impl.setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        impl.setNamedWhereClauseParam("BindOrgId", getOrgId());
        impl.setNamedWhereClauseParam("BindPlanDocId", null);
        impl.setNamedWhereClauseParam("BindPlanDate", null);
        impl.setNamedWhereClauseParam("BindPrdState", null);
        impl.executeQuery();

        getDualPlanSearch().executeQuery();
    }

    /**
     * Method to load global param in dual for search plann
     */
    protected void setParamInDualPlanSearch() {
        getDualPlanSearch().setNamedWhereClauseParam("BindCldId", getCldId());
        getDualPlanSearch().setNamedWhereClauseParam("BindSlocId", getSlocId());
        getDualPlanSearch().setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        getDualPlanSearch().setNamedWhereClauseParam("BindOrgId", getOrgId());
        getDualPlanSearch().executeQuery();
    }

    protected void setParamInDualOverviewPage() {
        getDualOverviewPage().setNamedWhereClauseParam("BindCldId", getCldId());
        getDualOverviewPage().setNamedWhereClauseParam("BindSlocId", getSlocId());
        getDualOverviewPage().setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        getDualOverviewPage().setNamedWhereClauseParam("BindOrgId", getOrgId());
        getDualOverviewPage().setNamedWhereClauseParam("BindRating", 0);
        getDualOverviewPage().executeQuery();
    }

    protected void setparamInViewInputSrc(String pln_doc_id) {
        getVIEWInputSrcVo().setNamedWhereClauseParam("BindCldId", getCldId());
        getVIEWInputSrcVo().setNamedWhereClauseParam("BindSlocId", getSlocId());
        getVIEWInputSrcVo().setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        getVIEWInputSrcVo().setNamedWhereClauseParam("BindOrgId", getOrgId());
        getVIEWInputSrcVo().setNamedWhereClauseParam("BindPlnDocId", pln_doc_id);

        getVIEWInputSrcVo().executeQuery();
    }

    protected void setParamInGraphCost() {
        getGraphPrdCost1().setNamedWhereClauseParam("BindCldId", getCldId());
        getGraphPrdCost1().setNamedWhereClauseParam("BindSlocId", getSlocId());
        getGraphPrdCost1().setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        getGraphPrdCost1().setNamedWhereClauseParam("BindOrgId", getOrgId());
        getGraphPrdCost1().setNamedWhereClauseParam("BindCount", 6);

        getGraphPrdCost1().executeQuery();
    }

    protected void setParamInGraphQuantity() {
        getGraphPrdQty().setNamedWhereClauseParam("BindCldId", getCldId());
        getGraphPrdQty().setNamedWhereClauseParam("BindSlocId", getSlocId());
        getGraphPrdQty().setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        getGraphPrdQty().setNamedWhereClauseParam("BindOrgId", getOrgId());
        getGraphPrdQty().setNamedWhereClauseParam("BindCount", 6);

        getGraphPrdQty().executeQuery();
    }

    protected void setParamInViewOverview(Object out_itm_id, Object dlv_dt, Object pln_id) {
        getVIEWOverviewVo().setNamedWhereClauseParam("BindCldId", getCldId());
        getVIEWOverviewVo().setNamedWhereClauseParam("BindSlocId", getSlocId());
        getVIEWOverviewVo().setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        getVIEWOverviewVo().setNamedWhereClauseParam("BindOrgId", getOrgId());
        getVIEWOverviewVo().setNamedWhereClauseParam("BindOutItmId", out_itm_id);
        getVIEWOverviewVo().setNamedWhereClauseParam("BindDlvDt", dlv_dt);
        getVIEWOverviewVo().setNamedWhereClauseParam("BindPlnId", pln_id);
        getVIEWOverviewVo().executeQuery();
    }

    protected void setParamInDualCustomer() {
        getDualCustmrView().setNamedWhereClauseParam("BindCldId", getCldId());
        getDualCustmrView().setNamedWhereClauseParam("BindSlocId", getSlocId());
        getDualCustmrView().setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        getDualCustmrView().setNamedWhereClauseParam("BindOrgId", getOrgId());
        getDualCustmrView().executeQuery();
    }

    public void resetMainCustomerList() {
        getLOVMainCustomerNameList().setNamedWhereClauseParam("BindEoId", null);
        getLOVMainCustomerNameList().executeQuery();
    }

    public void searchMainCustomerList() {
        Row r = getDualCustmrView().getCurrentRow();
        getLOVMainCustomerNameList().setNamedWhereClauseParam("BindCldId", getCldId());
        getLOVMainCustomerNameList().setNamedWhereClauseParam("BindSlocId", getSlocId());
        getLOVMainCustomerNameList().setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        getLOVMainCustomerNameList().setNamedWhereClauseParam("BindOrgId", getOrgId());
        getLOVMainCustomerNameList().setNamedWhereClauseParam("BindEoId", r.getAttribute("CustomerId"));
        getLOVMainCustomerNameList().executeQuery();

    }

    protected void setParamInMainCustomerList() {
        getLOVMainCustomerNameList().setNamedWhereClauseParam("BindCldId", getCldId());
        getLOVMainCustomerNameList().setNamedWhereClauseParam("BindSlocId", getSlocId());
        getLOVMainCustomerNameList().setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        getLOVMainCustomerNameList().setNamedWhereClauseParam("BindOrgId", getOrgId());
        getLOVMainCustomerNameList().executeQuery();
    }

    public void setCustomerList(String eo_id) {
        getLOVCustomerNameList().setNamedWhereClauseParam("BindCldId", getCldId());
        getLOVCustomerNameList().setNamedWhereClauseParam("BindSlocId", getSlocId());
        getLOVCustomerNameList().setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        getLOVCustomerNameList().setNamedWhereClauseParam("BindOrgId", getOrgId());
        getLOVCustomerNameList().setNamedWhereClauseParam("BindEoId", eo_id);
        getLOVCustomerNameList().executeQuery();

    }

    public void resetCustmoerList() {
        getLOVCustomerNameList().setNamedWhereClauseParam("BindEoId", null);
        getLOVCustomerNameList().executeQuery();
    }

    public void setSoBindparam(String cld_Id, Integer sloc_Id, String ho_Org_Id) {
        getLOVSalesOrderVO().setNamedWhereClauseParam("BindCldId", cld_Id);
        getLOVSalesOrderVO().setNamedWhereClauseParam("BindSlocId", sloc_Id);
        getLOVSalesOrderVO().setNamedWhereClauseParam("BindHoOrgId", ho_Org_Id);
        getLOVSalesOrderVO().executeQuery();
    }

    public void setParamInCudtProdutGrap(String cld_Id, Integer sloc_Id, String ho_Org_Id, String org_Id) {
        getGraphCustProduct().setNamedWhereClauseParam("BindCldId", cld_Id);
        getGraphCustProduct().setNamedWhereClauseParam("BindSlocId", sloc_Id);
        getGraphCustProduct().setNamedWhereClauseParam("BindHoOrgId", ho_Org_Id);
        getGraphCustProduct().setNamedWhereClauseParam("BindOrgId", org_Id);
        getGraphCustProduct().executeQuery();
    }

    public void viewChangeCustProd(Timestamp cur_dt, Integer mont, Integer yr, Integer prft, String eo_Id) {
        getGraphCustProduct().setNamedWhereClauseParam("BindDate", cur_dt);
        getGraphCustProduct().setNamedWhereClauseParam("BindMonth", mont);
        getGraphCustProduct().setNamedWhereClauseParam("BindYear", yr);
        getGraphCustProduct().setNamedWhereClauseParam("BindProfit", prft);
        getGraphCustProduct().setNamedWhereClauseParam("BindEoId", eo_Id);
        getGraphCustProduct().executeQuery();
    }


    public void resetViewChangeCustProd(Timestamp cur_dt, Integer mont, Integer yr, Integer prft) {
        getGraphCustProduct().setNamedWhereClauseParam("BindDate", null);
        getGraphCustProduct().setNamedWhereClauseParam("BindMonth", null);
        getGraphCustProduct().setNamedWhereClauseParam("BindYear", null);
        getGraphCustProduct().setNamedWhereClauseParam("BindProfit", null);
        getGraphCustProduct().setNamedWhereClauseParam("BindEoId", null);
        getGraphCustProduct().executeQuery();
    }

    public void setDualInputSrc(String plnDocId) {
        getDualInputSrcConfig().setNamedWhereClauseParam("BindCldId", getCldId());
        getDualInputSrcConfig().setNamedWhereClauseParam("BindSlocId", getSlocId());
        getDualInputSrcConfig().setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        getDualInputSrcConfig().setNamedWhereClauseParam("BindOrgId", getOrgId());
        getDualInputSrcConfig().setNamedWhereClauseParam("BindPlnDocId", plnDocId);
        getDualInputSrcConfig().executeQuery();
    }


    public void setViewCustomerListBind(String out_itm_id) {
        getLOVOverviewPrdCustList().setNamedWhereClauseParam("BindCldId", getCldId());
        getLOVOverviewPrdCustList().setNamedWhereClauseParam("BindSlocId", getSlocId());
        getLOVOverviewPrdCustList().setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        getLOVOverviewPrdCustList().setNamedWhereClauseParam("BindOrgId", getOrgId());
        getLOVOverviewPrdCustList().setNamedWhereClauseParam("BindOutItem", out_itm_id);
        getLOVOverviewPrdCustList().executeQuery();
    }

    public void setTxnCustomerListBind(String out_itm_id, String src_doc_id) {
        getVIEWTxnCustomerVO().setNamedWhereClauseParam("BindCldId", getCldId());
        getVIEWTxnCustomerVO().setNamedWhereClauseParam("BindSlocId", getSlocId());
        getVIEWTxnCustomerVO().setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        getVIEWTxnCustomerVO().setNamedWhereClauseParam("BindOrgId", getOrgId());
        getVIEWTxnCustomerVO().setNamedWhereClauseParam("BindOutItem", out_itm_id);
        getVIEWTxnCustomerVO().setNamedWhereClauseParam("BindSrcDocId", src_doc_id);
        getVIEWTxnCustomerVO().executeQuery();
    }

    public void setViewProductOverviewBind(String out_itm_id, Timestamp dlv_dt, String pln_doc_id) {

        getVIEWOverviewProductDetails().setNamedWhereClauseParam("BindCldId", getCldId());
        getVIEWOverviewProductDetails().setNamedWhereClauseParam("BindSlocId", getSlocId());
        getVIEWOverviewProductDetails().setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        getVIEWOverviewProductDetails().setNamedWhereClauseParam("BindOrgId", getOrgId());
        getVIEWOverviewProductDetails().setNamedWhereClauseParam("BindOutputItemId", out_itm_id);
        getVIEWOverviewProductDetails().setNamedWhereClauseParam("BindDlvDt", dlv_dt);
        getVIEWOverviewProductDetails().setNamedWhereClauseParam("BindPlnDocId", pln_doc_id);

        getVIEWOverviewProductDetails().executeQuery();

    }

    public void setParamInListItemForProduct(String prd_id, Timestamp dlv_dt, String pln_doc_id, String bom_id) {
        getLISTItemForProduct().setNamedWhereClauseParam("BindCldId", getCldId());
        getLISTItemForProduct().setNamedWhereClauseParam("BindSlocId", getSlocId());
        getLISTItemForProduct().setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        getLISTItemForProduct().setNamedWhereClauseParam("BindOrgId", getOrgId());
        getLISTItemForProduct().setNamedWhereClauseParam("BindProductId", prd_id);
        getLISTItemForProduct().setNamedWhereClauseParam("BindDlvDt", dlv_dt);
        getLISTItemForProduct().setNamedWhereClauseParam("BindPlnDocId", pln_doc_id);
        getLISTItemForProduct().setNamedWhereClauseParam("BindBomDocId", bom_id);
        getLISTItemForProduct().executeQuery();
    }

    /**
     *Method to set Bind values in Txn Product details
     * @param out_itm_id
     * @param src_doc_id
     * @param dlv_dt
     * @param pln_doc_id
     */
    public void setViewProductTxnBind(String out_itm_id, String src_doc_id, Timestamp dlv_dt, String pln_doc_id) {

        txn_dlvdt = dlv_dt;
        txn_plnId = pln_doc_id;
        txn_prdId = out_itm_id;
        txn_srcId = src_doc_id;
        System.out.println(out_itm_id + " Item received in the filter method");
        System.out.println(dlv_dt + " dlv dt received in the filter method");
        System.out.println(src_doc_id + " source received in the filter method");
        System.out.println(pln_doc_id + " plan id received in the filter method");

        getMnfPlnTxnVO().executeQuery();
        ViewObjectImpl impl = this.getMnfPlnTxnVO();
        ViewCriteria vc = impl.getViewCriteria("MnfPlnTxnVOCriteria");
        impl.applyViewCriteria(vc);
        impl.setNamedWhereClauseParam("BindCldId", getCldId());
        impl.setNamedWhereClauseParam("BindSlocId", getSlocId());
        impl.setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        impl.setNamedWhereClauseParam("BindOrgId", getOrgId());
        impl.setNamedWhereClauseParam("BindDlvDt", dlv_dt);
        impl.setNamedWhereClauseParam("BindOutItmId", out_itm_id);
        impl.setNamedWhereClauseParam("BindPlnDocId", pln_doc_id);
        impl.setNamedWhereClauseParam("BindSrcDocId", src_doc_id);
        impl.executeQuery();


    }


    private String ovr_plnId = null;
    private Timestamp ovr_dlv_dt = null;
    private String ovr_prdId = null;

    /**
     *Method to set bind variable in  raw material view for product details
     * @param out_itm_id
     * @param dlv_dt
     * @param pln_doc_id
     * @param cust_id
     */
    public void setViewOverViewRawMatBind(String out_itm_id, Timestamp dlv_dt, String pln_doc_id,
                                          oracle.jbo.domain.Number cust_id) {
        ovr_plnId = pln_doc_id;
        ovr_dlv_dt = dlv_dt;
        ovr_prdId = out_itm_id;

        getVIEWOverviewRawMat().setNamedWhereClauseParam("BindCldId", getCldId());
        getVIEWOverviewRawMat().setNamedWhereClauseParam("BindSlocId", getSlocId());
        getVIEWOverviewRawMat().setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        getVIEWOverviewRawMat().setNamedWhereClauseParam("BindOrgId", getOrgId());
        getVIEWOverviewRawMat().setNamedWhereClauseParam("BindPrdId", ovr_prdId);
        getVIEWOverviewRawMat().setNamedWhereClauseParam("BindPlnDocId", ovr_plnId);
        getVIEWOverviewRawMat().setNamedWhereClauseParam("BindDlvDt", ovr_dlv_dt);
        getVIEWOverviewRawMat().executeQuery();
    }

    public void setViewByOverCustRawMatBind() {
        Row r = getVIEWOverviewCustomerVO().getCurrentRow();
        getVIEWOverviewCustomerVO().setNamedWhereClauseParam("BindCldId", getCldId());
        getVIEWOverviewCustomerVO().setNamedWhereClauseParam("BindSlocId", getSlocId());
        getVIEWOverviewCustomerVO().setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        getVIEWOverviewCustomerVO().setNamedWhereClauseParam("BindOrgId", getOrgId());
        getVIEWOverviewCustomerVO().setNamedWhereClauseParam("BindPrdId", r.getAttribute("OutptItmId"));
        getVIEWOverviewCustomerVO().setNamedWhereClauseParam("BindPlnDocId", r.getAttribute("PlnDocId"));
        getVIEWOverviewCustomerVO().setNamedWhereClauseParam("BindDlvDt", r.getAttribute("TxnDocDlvDt"));
        getVIEWOverviewCustomerVO().setNamedWhereClauseParam("BindCustId", r.getAttribute("CustEoId"));

        getVIEWOverviewCustomerVO().executeQuery();
    }

    public void refreshPrdDetails(String prd_id, String plan_id, Timestamp dlv_dt) {
        getVIEWOverviewRawMat().setNamedWhereClauseParam("BindCldId", getCldId());
        getVIEWOverviewRawMat().setNamedWhereClauseParam("BindSlocId", getSlocId());
        getVIEWOverviewRawMat().setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        getVIEWOverviewRawMat().setNamedWhereClauseParam("BindOrgId", getOrgId());
        getVIEWOverviewRawMat().setNamedWhereClauseParam("BindPrdId", prd_id);
        getVIEWOverviewRawMat().setNamedWhereClauseParam("BindPlnDocId", plan_id);
        getVIEWOverviewRawMat().setNamedWhereClauseParam("BindDlvDt", dlv_dt);
        getVIEWOverviewRawMat().setNamedWhereClauseParam("BindCustId", null);
        System.out.println(prd_id + " ========================= prd id");
        System.out.println(plan_id + " ========================= plan id");
        System.out.println(dlv_dt + " ========================= dlv date");
        // System.out.println(ovr_prdId + " ========================= prd id");
        // System.out.println(ovr_prdId + " ========================= prd id");

        getVIEWOverviewRawMat().executeQuery();
        // getVIEWOverviewCustomerVO().executeQuery();
        // getMnfPlnTxnVO().executeQuery();
        //  getMnfPlnItmVO().executeQuery();
        //getVIEWTXNRawMat().executeQuery();
    }


    /**
     *method to set bind varible to customer in product details
     *
     * @param out_itm_id
     * @param dlv_dt
     * @param pln_doc_id
     */
    public void setViewOverViewcustomerBind(String out_itm_id, Timestamp dlv_dt, String pln_doc_id) {
        getVIEWOverviewCustomerVO().setNamedWhereClauseParam("BindCldId", getCldId());
        getVIEWOverviewCustomerVO().setNamedWhereClauseParam("BindSlocId", getSlocId());
        getVIEWOverviewCustomerVO().setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        getVIEWOverviewCustomerVO().setNamedWhereClauseParam("BindOrgId", getOrgId());
        getVIEWOverviewCustomerVO().setNamedWhereClauseParam("BindPrdId", out_itm_id);
        getVIEWOverviewCustomerVO().setNamedWhereClauseParam("BindPlnDocId", pln_doc_id);
        getVIEWOverviewCustomerVO().setNamedWhereClauseParam("BindDlvDt", dlv_dt);
        getVIEWOverviewCustomerVO().executeQuery();
    }

    /**
     * Method to set bind variable for product details
     */
    public void setMnfPlnPrdView() {
        getMnfPlnPrdVO().setNamedWhereClauseParam("BindCldId", getCldId());
        getMnfPlnPrdVO().setNamedWhereClauseParam("BindSlocId", getSlocId());
        getMnfPlnPrdVO().setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        getMnfPlnPrdVO().setNamedWhereClauseParam("BindOrgId", getOrgId());
        getMnfPlnPrdVO().setNamedWhereClauseParam("BindDlvDt", ovr_dlv_dt);
        getMnfPlnPrdVO().setNamedWhereClauseParam("BindOutItmId", ovr_prdId);
        getMnfPlnPrdVO().setNamedWhereClauseParam("BindPlnDocId", ovr_plnId);

        getMnfPlnPrdVO().executeQuery();
    }
    private String txn_plnId = null;
    private Timestamp txn_dlvdt = null;
    private String txn_prdId = null;
    private String txn_srcId = null;


    public void set() {

    }

    /**
     *Method to set bind variable in  raw material view for product details from input source
     * @param out_itm_id
     * @param dlv_dt
     * @param pln_doc_id
     * @param cust_id
     */
    public void setViewTxnRawMatBind(String plan_id, String prd_id, String src_id, Timestamp dlv_dt) {


        System.out.println(prd_id + " Item received in the filter method");
        System.out.println(dlv_dt + " dlv dt received in the filter method");
        System.out.println(src_id + " source received in the filter method");
        System.out.println(plan_id + " plan id received in the filter method");


        getVIEWTXNRawMat().setNamedWhereClauseParam("BindCldId", getCldId());
        getVIEWTXNRawMat().setNamedWhereClauseParam("BindSlocId", getSlocId());
        getVIEWTXNRawMat().setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        getVIEWTXNRawMat().setNamedWhereClauseParam("BindOrgId", getOrgId());
        getVIEWTXNRawMat().setNamedWhereClauseParam("BindPlnDocId", plan_id);
        getVIEWTXNRawMat().setNamedWhereClauseParam("BindPrdId", prd_id);
        getVIEWTXNRawMat().setNamedWhereClauseParam("BindDlvDt", dlv_dt);
        getVIEWTXNRawMat().setNamedWhereClauseParam("BindSrcDocId", src_id);

        getVIEWTXNRawMat().executeQuery();
    }

    /**
     *Method to set bind variable in product details from input source
     * @param out_itm_id
     * @param dlv_dt
     * @param pln_doc_id
     * @param cust_id
     */
    public void setMnfPlnTxnView() {


    }


    /**
     * Method to get the cutomer id of  selected row in a View
     */
    public void getSelectedCustomerId() {
        Row r = getLOVCustomerNameList().getCurrentRow();
        if (r.getAttribute("EoId") != null) {
            eo_Id = r.getAttribute("EoId").toString();
        }
    }

    public String getSelectedMainCustomerId() {
        Row r = getLOVMainCustomerNameList().getCurrentRow();
        if (r.getAttribute("EoId") != null) {
            return r.getAttribute("EoId").toString();
        }
        return null;
    }

    public void custPrdViwByCustomer() {
        if (getSelectedMainCustomerId() != null) {
            getGraphCustProduct().setNamedWhereClauseParam("BindEoId", getSelectedMainCustomerId());
            getGraphCustProduct().executeQuery();
        }
    }


    /**
     * Method to reset search input source
     */
    public void resetInputSrc() {

        Row r = getDualInputSrcConfig().getCurrentRow();

        getVIEWInputSrcVo().setNamedWhereClauseParam("BindCldId", getCldId());
        getVIEWInputSrcVo().setNamedWhereClauseParam("BindSlocId", getSlocId());
        getVIEWInputSrcVo().setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        getVIEWInputSrcVo().setNamedWhereClauseParam("BindOrgId", getOrgId());
        getVIEWInputSrcVo().setNamedWhereClauseParam("BindPlnDocId", r.getAttribute("PlnDocId"));
        getVIEWInputSrcVo().setNamedWhereClauseParam("BindTxnDocType", null);
        getVIEWInputSrcVo().setNamedWhereClauseParam("BindOutItmId", null);
        getVIEWInputSrcVo().setNamedWhereClauseParam("BindCustId", null);
        getVIEWInputSrcVo().setNamedWhereClauseParam("BindMinQty", null);
        getVIEWInputSrcVo().setNamedWhereClauseParam("BindMaxQty", null);
        getVIEWInputSrcVo().setNamedWhereClauseParam("BindMinCost", null);
        getVIEWInputSrcVo().setNamedWhereClauseParam("BindMaxCost", null);
        getVIEWInputSrcVo().setNamedWhereClauseParam("BindDlvDtFrom", null);
        getVIEWInputSrcVo().setNamedWhereClauseParam("BindDlvDtTo", null);

        getVIEWInputSrcVo().executeQuery();
        getDualInputSrcConfig().executeQuery();
    }

    //Method to reset the Input source
    public void refreshSrcInput() {
        getVIEWInputSrcVo().setNamedWhereClauseParam("BindCldId", null);
        getVIEWInputSrcVo().setNamedWhereClauseParam("BindSlocId", null);
        getVIEWInputSrcVo().setNamedWhereClauseParam("BindHoOrgId", null);
        getVIEWInputSrcVo().setNamedWhereClauseParam("BindOrgId", null);
        getVIEWInputSrcVo().executeQuery();
    }

    /**
     * Method to search input source
     */
    public void searchInputSrc() {
        Row r = getDualInputSrcConfig().getCurrentRow();

        getVIEWInputSrcVo().setNamedWhereClauseParam("BindCldId", getCldId());
        getVIEWInputSrcVo().setNamedWhereClauseParam("BindSlocId", getSlocId());
        getVIEWInputSrcVo().setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        getVIEWInputSrcVo().setNamedWhereClauseParam("BindOrgId", getOrgId());
        getVIEWInputSrcVo().setNamedWhereClauseParam("BindPlnDocId", r.getAttribute("PlnDocId"));
        getVIEWInputSrcVo().setNamedWhereClauseParam("BindTxnDocType", r.getAttribute("TxnDocType"));
        getVIEWInputSrcVo().setNamedWhereClauseParam("BindOutItmId", r.getAttribute("ProductId"));
        getVIEWInputSrcVo().setNamedWhereClauseParam("BindCustId", r.getAttribute("CustomerId"));
        getVIEWInputSrcVo().setNamedWhereClauseParam("BindMinQty", r.getAttribute("MinQuantity"));
        getVIEWInputSrcVo().setNamedWhereClauseParam("BindMaxQty", r.getAttribute("MaxQuantity"));
        getVIEWInputSrcVo().setNamedWhereClauseParam("BindMinCost", r.getAttribute("MinProfit"));
        getVIEWInputSrcVo().setNamedWhereClauseParam("BindMaxCost", r.getAttribute("MaxProfit"));
        getVIEWInputSrcVo().setNamedWhereClauseParam("BindDlvDtFrom", r.getAttribute("ShipDateFrom"));
        getVIEWInputSrcVo().setNamedWhereClauseParam("BindDlvDtTo", r.getAttribute("ShipDateTo"));

        getVIEWInputSrcVo().executeQuery();

    }

    /**
     * Method to filter data based on plan selected in overview page
     */
    public void filterDataOnPlanId(String planDocId) {
        getVIEWInputSrcVo().setNamedWhereClauseParam("BindCldId", getCldId());
        getVIEWInputSrcVo().setNamedWhereClauseParam("BindSlocId", getSlocId());
        getVIEWInputSrcVo().setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        getVIEWInputSrcVo().setNamedWhereClauseParam("BindOrgId", getOrgId());
        getVIEWInputSrcVo().setNamedWhereClauseParam("BindPlnDocId", planDocId);
        getVIEWInputSrcVo().executeQuery();

        setDualInputSrc(planDocId);
    }


    private String plan_doc_id = null;

    /**
     * Method to generated product into input source
     */
    public void callSoInsertFun() {

        plan_doc_id = getPlnDocId();
        if (plan_doc_id !=
            null) {
            //Calling function to generate all the order
            insertSoInTxn(getCldId(), getSlocId(), getHoOrgId(), getOrgId(), plan_doc_id, getCurrentDate(),
                          getFynIdFrmFn(), null);

            // insert PrdInPrd(getCldId(), getSlocId(), getOrgId(), getPlnDocId());

            //Calling function to insert data in table related to each order generated
            if (plan_doc_id != null) {

                insertBom(getCldId(), getSlocId(), getOrgId(), plan_doc_id, null, null, null);
                insertRawMaterial(getCldId(), getSlocId(), getHoOrgId(), getOrgId(), plan_doc_id, null, null, null);
                insertSupplier(getCldId(), getSlocId(), getHoOrgId(), getOrgId(), plan_doc_id, null, null, null);
                insertCustomer(getCldId(), getSlocId(), getHoOrgId(), getOrgId(), plan_doc_id, null, null, null);

            }

            getMnfPlnTxnVO().executeQuery();
            getMnfPlnBomVO().executeQuery();
            getMnfPlnPrdVO().executeQuery();
            getMnfPlnBomVO().executeQuery();
            getMnfPlnItmVO().executeQuery();
            getMnfPlnVO().executeQuery();

            setparamInViewInputSrc(plan_doc_id);
            setDualInputSrc(plan_doc_id);
        } else {
            ADFModelUtils.showFormattedFacesMessage("Plan ID Not Generated", "There have been issue regarding Plan Id",
                                                    FacesMessage.SEVERITY_ERROR);
        }
        // getDBTransaction().postChanges();

    }

    /**
     * method to count the total row selected
     */
    public Integer getSelectedRowCount() {
        RowSetIterator txnRS = getVIEWInputSrcVo().createRowSetIterator(null);

        Integer count = 0;
        Row r = null;
        while (txnRS.hasNext()) {
            r = txnRS.next();
            String selectO = r.getAttribute("SelectPln") != null ? r.getAttribute("SelectPln").toString() : "false";
            // StringBuilder b = (selectO == null ? new StringBuilder("false") : new StringBuilder(selectO.toString()));

            if ("true".equalsIgnoreCase(selectO)) {
                count++;
            }
        }
        txnRS.closeRowSetIterator();
        return count;
    }

    /**
     *
     * Method to insert selected order into Transection
     */
    public void insertPrdFromTxn() {

        RowSetIterator rtr = getVIEWInputSrcVo().createRowSetIterator(null);

        Row n = null;
        //String pln_doc_id = null;
        while (rtr.hasNext()) {
            n = rtr.next();

            String selectedOrder =
                n.getAttribute("SelectPln") != null ? n.getAttribute("SelectPln").toString() : "false";

            //System.out.println("The value of selected Item --------------  " + selectedOrder);

            // StringBuilder slectTxn =(selectedOrder == null ? new StringBuilder("false") : new StringBuilder(selectedOrder.toString()));
            System.out.println(selectedOrder + "  ===== true");

            if ("true".equalsIgnoreCase(selectedOrder)) {
                // pln_doc_id = n.getAttribute("PlnDocId").toString();
                System.out.println(" inside true check ");

                //calling db function to insert data
                insertPrdInPrd(getCldId(), getSlocId(), getOrgId(), n.getAttribute("PlnDocId").toString(),
                               n.getAttribute("DocIdSrc").toString(), n.getAttribute("OutptItmId").toString(),
                               (Timestamp) n.getAttribute("TxnDocDlvDt"));

                setViewProductTxnBind((String) n.getAttribute("OutptItmId"), (String) n.getAttribute("DocIdSrc"),
                                      (Timestamp) n.getAttribute("TxnDocDlvDt"), (String) n.getAttribute("PlnDocId"));
                getMnfPlnTxnVO().executeQuery();
                // getDBTransaction().postChanges();

                setValueToRemoveTxn(getCldId(), getSlocId(), getOrgId(), getHoOrgId(), n.getAttribute("OutptItmId"),
                                    n.getAttribute("TxnDocDlvDt"), n.getAttribute("DocIdSrc"),
                                    n.getAttribute("PlnDocId"), "Y");

                //calling df function to update salesorder plan qty
                String resultUpdate =
                    updateProductInTXN(getCldId(), getSlocId(), getOrgId(), n.getAttribute("OutptItmId").toString(),
                                       (Timestamp) n.getAttribute("TxnDocDlvDt"), n.getAttribute("DocIdSrc").toString(),
                                       n.getAttribute("PlnDocId").toString());

                // getDBTransaction().postChanges();
                //  n.remove();

            }
        }

        rtr.closeRowSetIterator();
        //getDBTransaction().postChanges();

        // removeSelectedTxn();
        getVIEWInputSrcVo().executeQuery();
        getMnfPlnPrdVO().executeQuery();
        getMnfPlnTxnVO().executeQuery();
        getVIEWOverviewVo().executeQuery();
        getMnfPlnVO().executeQuery();
        getLOVPlanDispId().executeQuery();

    }

    public void updateStateOnContinure() {
    }

    public void updateTxnState() {
        //calling df function to update the status of transaction
        if (plan_doc_id != null) {
            statUpdateTxn(getCldId(), getSlocId(), getOrgId(), getHoOrgId(), plan_doc_id);
        }
    }

    /**
     *Method to set the value in TXN to remove the unplanned transection
     * @param cldId
     * @param slocId
     * @param orgId
     * @param hoOrgId
     * @param prd_id
     * @param dlv_dt
     * @param src_doc_id
     * @param pln_doc_Id
     */
    protected void setValueToRemoveTxn(Object cldId, Object slocId, Object orgId, Object hoOrgId, Object prd_id,
                                       Object dlv_dt, Object src_doc_id, Object pln_doc_Id, Object pln_chk) {
        System.out.println("Inside setting value Y method  ");

        RowSetIterator txn = getMnfPlnTxnVO().createRowSetIterator(null);
        Row r = null;
        System.out.println(txn.getRowCount() + " total rows");
        while (txn.hasNext()) {
            r = txn.next();

            if (cldId.equals(r.getAttribute("CldId")) && src_doc_id.equals(r.getAttribute("DocIdSrc")) &&
                hoOrgId.equals(r.getAttribute("HoOrgId")) && orgId.equals(r.getAttribute("OrgId").toString()) &&
                prd_id.equals(r.getAttribute("OutptItmId")) && pln_doc_Id.equals(r.getAttribute("PlnDocId")) &&
                slocId.equals(r.getAttribute("SlocId")) && dlv_dt.equals(r.getAttribute("TxnDocDlvDt"))) {
                System.out.println(prd_id + " is setting to " + pln_chk);
                r.setAttribute("PlnChk", pln_chk);
                // r.setAttribute("TxnDocStat", 115);

            }
        }

        txn.closeRowSetIterator();
        // System.out.println("in exit mode ==========================");
        //getMnfPlnTxnVO().executeQuery();
        getDBTransaction().postChanges();
    }


    /**
     * method to remove selected row from view in source page
     */
    public void removeSelectedTxn() {
        RowSetIterator rtr = getVIEWInputSrcVo().createRowSetIterator(null);

        while (rtr.hasNext()) {
            Row n = rtr.next();
            Object selectPdoO = n.getAttribute("SelectPln");
            StringBuilder slTxn =
                (selectPdoO == null ? new StringBuilder("false") : new StringBuilder(selectPdoO.toString()));
            if ("true".equals(slTxn.toString())) {
                n.remove();
            }
        }
        rtr.closeRowSetIterator();
        getVIEWInputSrcVo().executeQuery();

    }

    /**
     * method to remove selceted row from view in source detail page
     */
    public void removeSrcFromDetail(Object pln_doc_Id, Object src_doc_id, Object itm_id, Object dlv_dt) {
        RowSetIterator rtr = getVIEWInputSrcVo().createRowSetIterator(null);
        Row n = null;
        while (rtr.hasNext()) {
            n = rtr.next();
            Object plnId = n.getAttribute("PlnDocId");
            Object srcId = n.getAttribute("DocIdSrc");
            Object prdId = n.getAttribute("OutptItmId");
            Object dlvDt = n.getAttribute("TxnDocDlvDt");

            if (pln_doc_Id.equals(plnId) && srcId.equals(src_doc_id) && prdId.equals(itm_id) && dlvDt.equals(dlv_dt)) {
                n.remove();
            }
        }
        rtr.closeRowSetIterator();
        getVIEWInputSrcVo().executeQuery();
    }


    /**
     * ##################################################################################################################################################
     * PLAN EXECUTION
     */

    public void setExecutionGlobalParam(String plan_doc_id, String Output_Itm, String DOC_ID_SRC, String OUTPT_ITM_ID,
                                        oracle.jbo.domain.Timestamp TXN_DOC_DLV_DT, String BOM_ID, String INPT_ITM_ID,
                                        Timestamp INPT_ITM_REQ_DT) {

        setGlobalParamInLISTExcOrder(plan_doc_id);
        setGlobalParamInLISTExcPdo(plan_doc_id, Output_Itm);
        setGlobalParamInListExcRmWithSupp(plan_doc_id);
        setGlobalParamInLISTExcRmListToOrder(plan_doc_id);

    }

    protected void setGlobalParamInListExcRmWithSupp(Object plan_doc_id) {

        getLISTExcRmWithSupp().setNamedWhereClauseParam("BindCldId", getCldId());
        getLISTExcRmWithSupp().setNamedWhereClauseParam("BindSlocId", getSlocId());
        getLISTExcRmWithSupp().setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        getLISTExcRmWithSupp().setNamedWhereClauseParam("BindOrgId", getOrgId());
        getLISTExcRmWithSupp().setNamedWhereClauseParam("BindPlnDocId", plan_doc_id);
        getLISTExcRmWithSupp().executeQuery();
    }

    protected void setGlobalParamInLISTExcRmListToOrder(Object plan_doc_id) {

        getLISTExcRmListToOrder().setNamedWhereClauseParam("BindCldId", getCldId());
        getLISTExcRmListToOrder().setNamedWhereClauseParam("BindSlocId", getSlocId());
        getLISTExcRmListToOrder().setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        getLISTExcRmListToOrder().setNamedWhereClauseParam("BindOrgId", getOrgId());
        getLISTExcRmListToOrder().setNamedWhereClauseParam("BindPlnDocId", plan_doc_id);
        getLISTExcRmListToOrder().executeQuery();
    }

    protected void setGlobalParamInLISTExcOrder(Object plan_doc_id) {

        getLISTExcOrder().setNamedWhereClauseParam("BindCldId", getCldId());
        getLISTExcOrder().setNamedWhereClauseParam("BindSlocId", getSlocId());
        getLISTExcOrder().setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        getLISTExcOrder().setNamedWhereClauseParam("BindOrgId", getOrgId());
        getLISTExcOrder().setNamedWhereClauseParam("BindPlnDocId", plan_doc_id);
        getLISTExcOrder().executeQuery();
    }

    protected void setGlobalParamInLISTExcPdo(Object plan_doc_id, Object output_itm) {


        getLISTExcPdo().setNamedWhereClauseParam("BindCldId", getCldId());
        getLISTExcPdo().setNamedWhereClauseParam("BindSlocId", getSlocId());
        getLISTExcPdo().setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        getLISTExcPdo().setNamedWhereClauseParam("BindOrgId", getOrgId());
        getLISTExcPdo().setNamedWhereClauseParam("BindPlnDocId", plan_doc_id);
        //getLISTExcPdo().setNamedWhereClauseParam("BindOutptItmId", output_itm);
        getLISTExcPdo().executeQuery();
    }


    /**
     *Method to get the to total order against which production order needs to be generated
     * @param plan_Id
     * @return
     */

    public Integer getTotalOrder(String plan_Id) {

        RowQualifier rq = new RowQualifier(getMnfPlnTxnVO());
        rq.setWhereClause("SlocId = " + getSlocId() + " and CldId='" + getCldId() + "' and HoOrgId='" + getHoOrgId() +
                          "' and OrgId = '" + getOrgId() + "' and PlnDocId = '" + plan_Id);
        Row[] fltrdRow = getMnfPlnTxnVO().getFilteredRows(rq);
        return fltrdRow.length;

    }


    /**
     *Method to get the total no. of Raw material against whom Purchase order needs to be generated
     * @param plan_Id
     * @return
     */
    public Integer getTotalRawMateril(String plan_Id) {

        RowQualifier rq = new RowQualifier(getMnfPlnItmVO());
        rq.setWhereClause("SlocId = " + getSlocId() + " and CldId='" + getCldId() + "' and HoOrgId='" + getHoOrgId() +
                          "' and OrgId = '" + getOrgId() + "' and PlnDocId = '" + plan_Id + "' and InptItmPckQty > '" +
                          0);
        Row[] fltrdRow = getMnfPlnItmVO().getFilteredRows(rq);

        return fltrdRow.length;
    }

    /**
     *Methode to get the total job card generated against the production order that have been generated from plan
     * @param plan_Id
     * @return
     */
    public Integer getTotalJobCard(String plan_Id) {


        return 0;
    }


    /**
     * Method to generated purchase order
     */

    public void genPurchaseOrder() {

    }


    /**
     * Methode to generated production order
     * planDispId is plan hex doc id value
     */

    public void genProductionOrder(String planDispId) {
        System.out.println(planDispId + " In amimpls");
        RowQualifier rq = new RowQualifier(getMnfPlnTxnVO());
        rq.setWhereClause("SlocId = " + getSlocId() + " and CldId='" + getCldId() + "' and HoOrgId='" + getHoOrgId() +
                          "' and OrgId = '" + getOrgId() + "' and PlnDocId = '" + planDispId + "'");
        Row[] r = getMnfPlnTxnVO().getFilteredRows(rq);
        //  Row r[] = getMnfPlnTxnVO().getFilteredRows(arg0, arg1);
        //getFilteredRows("PlnDocDispId", planDispId);
        System.out.println(r.length + " nO.OF fOREW");
        if (r.length > 0) {
            for (int x = 0; x < r.length; x++) {
                generatePdo(getCldId(), getSlocId(), getHoOrgId(), getOrgId(), r[x].getAttribute("PlnDocId"),
                            r[x].getAttribute("PlnDocDispId"), r[x].getAttribute("BomId"),
                            r[x].getAttribute("PlnDocDt"), r[x].getAttribute("DocIdSrc"),
                            r[x].getAttribute("OutptItmId"), r[x].getAttribute("ActPlnItmDlvQty"),
                            r[x].getAttribute("PlnDocDt"), r[x].getAttribute("TxnDocDlvDt"), getUsrId(),
                            getCurrentDate());
            }
            getDBTransaction().commit();
        }
        getMnfPlnBomVO().executeQuery();
        getLISTExcRmWithSupp().executeQuery();
        getLISTExcRmListToOrder().executeQuery();
        // chkPdoExist(planDispId);

    }

    /**
     * Method to check any pdo is generated for the plan or not.
     */

    public String chkPdoExist(String planDocId) {

        System.out.println(planDocId + " check pdo present for this pdo");
        RowQualifier rq = new RowQualifier(getMnfPlnBomVO());
        rq.setWhereClause("SlocId = " + getSlocId() + " and CldId='" + getCldId() + "' and HoOrgId='" + getHoOrgId() +
                          "' and OrgId = '" + getOrgId() + "' and PlnDocId = '" + planDocId +
                          "' and PdoDocId is not null");
        Row[] r = getMnfPlnBomVO().getFilteredRows(rq);
        System.out.println(r.length + " No. of pdo generated");
        if (r.length > 0) {
            return "true";
        }

        return "false";
    }


    /**
     * ##################################################################################################################################################
     * SUPPLIER
     */

    /**"),
     * method to Refresh input source once
     */
    public void refreshInputSrc() {
        getVIEWInputSrcVo().executeQuery();
    }

    /**
     * method to sellect all the product at once
     */
    public void selectAllPdo() {
        RowSetIterator PdoRS = getVIEWInputSrcVo().createRowSetIterator(null);
        while (PdoRS.hasNext()) {
            Row next = PdoRS.next();
            String txn_stat = (String) next.getAttribute("TxnState");
            if (txn_stat.equalsIgnoreCase("INCOMPLETE")) {
                next.setAttribute("SelectPln", "true");
            }
            //System.out.println(next.getAttribute("SelectPdo"));
        }
        PdoRS.closeRowSetIterator();
    }

    /**
     * method to desellect all the product at once
     */
    public void unselectAllPdo() {
        RowSetIterator PdoRS = getVIEWInputSrcVo().createRowSetIterator(null);
        while (PdoRS.hasNext()) {
            Row next = PdoRS.next();
            next.setAttribute("SelectPln", "false");
            //  System.out.println(next.getAttribute("SelectPdo"));
        }
        PdoRS.closeRowSetIterator();
    }

    /**
     * method to Refresh Overview page once
     */
    public void refreshoverView() {
        // setParamInViewOverview(null, null, null);
        // getVIEWOverviewVo().executeQuery();
        resetplanSearch();
    }


    /**
        method to recalculate date and resources on change of plan type and plan quantity
     */
    public void reinsertBomNItem() {


        Row r = getMnfPlnTxnVO().getCurrentRow();
        String plan_docId = r.getAttribute("PlnDocId").toString();
        String src_doc_id = r.getAttribute("DocIdSrc").toString();
        Timestamp dlv_dt = (Timestamp) r.getAttribute("TxnDocDlvDt");
        String product_id = r.getAttribute("OutptItmId").toString();


        /*  if (plan_docId != null) {
            insertBom(getCldId(), getSlocId(), getOrgId(), plan_docId, src_doc_id, product_id, dlv_dt);

            insertRawMaterial(getCldId(), getSlocId(), getHoOrgId(), getOrgId(), plan_docId, src_doc_id, product_id,
                              dlv_dt);
            insertSupplier(getCldId(), getSlocId(), getHoOrgId(), getOrgId(), plan_docId, src_doc_id, product_id,
                           dlv_dt);

        } */

        // getMnfPlnTxnVO().executeQuery();
        //getMnfPlnBomVO().executeQuery();
        // getMnfPlnPrdVO().executeQuery();
        //getMnfPlnBomVO().executeQuery();
        // getMnfPlnItmVO().executeQuery();
        // getMnfPlnSuppVO().executeQuery();
        // getDBTransaction().postChanges();
        setViewTxnRawMatBind(plan_docId, product_id, src_doc_id, dlv_dt);

    }

    /**
        method to insert source into product from detail view
     */
    public void insertPlanFromDetail() {
        Row r = getMnfPlnTxnVO().getCurrentRow();

        insertPrdInPrd(getCldId(), getSlocId(), getOrgId(), r.getAttribute("PlnDocId").toString(),
                       r.getAttribute("DocIdSrc").toString(), r.getAttribute("OutptItmId").toString(),
                       (Timestamp) r.getAttribute("TxnDocDlvDt"));

        updateProductInTXN(getCldId(), getSlocId(), getOrgId(), r.getAttribute("OutptItmId").toString(),
                           (Timestamp) r.getAttribute("TxnDocDlvDt"), r.getAttribute("DocIdSrc").toString(),
                           r.getAttribute("PlnDocId").toString());

        System.out.println("Function reached here now removing selected txn from input source");
        removeSrcFromDetail(r.getAttribute("PlnDocId"), r.getAttribute("DocIdSrc"), r.getAttribute("OutptItmId"),
                            r.getAttribute("TxnDocDlvDt"));

        getMnfPlnPrdVO().executeQuery();
        //        getMnfPlnTxnVO().executeQuery();
        getVIEWOverviewVo().executeQuery();
        getVIEWInputSrcVo().executeQuery();
    }


    /**
     * Method to freeze the plan
     *
     **/
    public void freezeMethod() {
        Row r = getMnfPlnTxnVO().getCurrentRow();

        Integer chkFr =
            freezePlan(getCldId(), getSlocId(), getHoOrgId(), getOrgId(), r.getAttribute("PlnDocId").toString(),
                       r.getAttribute("DocIdSrc").toString(), r.getAttribute("OutptItmId").toString(),
                       (Timestamp) r.getAttribute("TxnDocDlvDt"));
        //freezePlan(cldId, slocId, hoOrgId, orgId, plnDocId, srcDocId, outItmId, dlvDt)

        if (chkFr != 0) {
            ADFModelUtils.showFormattedFacesMessage("Freez not possible",
                                                    "Item without supplier exist. Please add Suppler to the Item.",
                                                    FacesMessage.SEVERITY_WARN);
        }
        getVIEWInputSrcVo().executeQuery();
        getMnfPlnVO().executeQuery();
        getMnfPlnTxnVO().executeQuery();
    }

    /**
     *Method to freeze all the plan from overview
     * @param plan_Doc_Id
     */
    public void freezeAllOrder(String plan_Doc_Id) {

        RowQualifier rq = new RowQualifier(getMnfPlnTxnVO());
        rq.setWhereClause("SlocId = " + getSlocId() + " and CldId='" + getCldId() + "' and HoOrgId='" + getHoOrgId() +
                          "' and OrgId = '" + getOrgId() + "' and PlnDocId = '" + plan_Doc_Id + "'");
        Row[] fltrdRow = getMnfPlnTxnVO().getFilteredRows(rq);
        System.out.println(fltrdRow.length + " total no of rows filtered");
        if (fltrdRow.length > 0) {
            for (int i = 0; i < fltrdRow.length; i++) {

                Integer chkFr =
                    freezePlan(getCldId(), getSlocId(), getHoOrgId(), getOrgId(),
                               fltrdRow[i].getAttribute("PlnDocId").toString(),
                               fltrdRow[i].getAttribute("DocIdSrc").toString(),
                               fltrdRow[i].getAttribute("OutptItmId").toString(),
                               (Timestamp) fltrdRow[i].getAttribute("TxnDocDlvDt"));
                //freezePlan(cldId, slocId, hoOrgId, orgId, plnDocId, srcDocId, outItmId, dlvDt)
                System.out.println(chkFr + " The value of freeze method");
                if (chkFr != 0) {
                    ADFModelUtils.showFormattedFacesMessage("Freez not possible",
                                                            "Item without supplier exist. Please add Suppler(s) to the Item for order " +
                                                            fltrdRow[i].getAttribute("OutptItmId").toString() + " !",
                                                            FacesMessage.SEVERITY_WARN);
                }
            }
        }

        getVIEWInputSrcVo().executeQuery();
        getMnfPlnVO().executeQuery();
        getMnfPlnTxnVO().executeQuery();
        getDBTransaction().commit();
    }

    /**
     * Method to Release the freezed plan
     *
     **/
    public void releaseMethod() {
        Row r = getMnfPlnTxnVO().getCurrentRow();

        Integer chkFr =
            releasePlan(getCldId(), getSlocId(), getHoOrgId(), getOrgId(), r.getAttribute("PlnDocId").toString(),
                        r.getAttribute("DocIdSrc").toString(), r.getAttribute("OutptItmId").toString(),
                        (Timestamp) r.getAttribute("TxnDocDlvDt"));

        if (chkFr != 0) {
            ADFModelUtils.showFormattedFacesMessage("Freez not possible",
                                                    "Item without supplier exist. Please add Suppler to the Item.",
                                                    FacesMessage.SEVERITY_WARN);
        }
        getVIEWInputSrcVo().executeQuery();
        getMnfPlnVO().executeQuery();
        getMnfPlnTxnVO().executeQuery();
    }


    /**
     *Method to Release all the freezed plan from overview
     * @param plan_Doc_Id
     */
    public void releaseAllOrder(String plan_Doc_Id) {

        RowQualifier rq = new RowQualifier(getMnfPlnTxnVO());
        rq.setWhereClause("SlocId = " + getSlocId() + " and CldId='" + getCldId() + "' and HoOrgId='" + getHoOrgId() +
                          "' and OrgId = '" + getOrgId() + "' and PlnDocId = '" + plan_Doc_Id + "'");
        Row[] fltrdRow = getMnfPlnTxnVO().getFilteredRows(rq);
        System.out.println(fltrdRow.length + " total no of rows filtered");
        if (fltrdRow.length > 0) {
            for (int i = 0; i < fltrdRow.length; i++) {

                Integer chkFr =
                    releasePlan(getCldId(), getSlocId(), getHoOrgId(), getOrgId(),
                                fltrdRow[i].getAttribute("PlnDocId").toString(),
                                fltrdRow[i].getAttribute("DocIdSrc").toString(),
                                fltrdRow[i].getAttribute("OutptItmId").toString(),
                                (Timestamp) fltrdRow[i].getAttribute("TxnDocDlvDt"));

                System.out.println(chkFr + " The value of freeze method");
                if (chkFr != 0) {
                    ADFModelUtils.showFormattedFacesMessage("Freez not possible",
                                                            "Item without supplier exist. Please add Suppler(s) to the Item for order " +
                                                            fltrdRow[i].getAttribute("OutptItmId").toString() + " !",
                                                            FacesMessage.SEVERITY_WARN);
                }
            }
        }

        getVIEWInputSrcVo().executeQuery();
        getMnfPlnVO().executeQuery();
        getMnfPlnTxnVO().executeQuery();
        getDBTransaction().commit();
    }


    /**
     * Method to recalculate the dates for backward and forward planing
     */

    public void updatePlanDate() {
        Row r = getMnfPlnTxnVO().getCurrentRow();

        Timestamp startDate =
            r.getAttribute("EstStrtDt") != null ? (Timestamp) r.getAttribute("EstStrtDt") : getCurrentDate();
        Timestamp endDate =
            r.getAttribute("EstEndDt") != null ? (Timestamp) r.getAttribute("EstEndDt") : getCurrentDate();
        Integer bomLeadTime = r.getAttribute("ItmMnfLeadTm") != null ? (Integer) r.getAttribute("ItmMnfLeadTm") : 0;
        Double tmpTime = bomLeadTime.doubleValue();
        Double bomTime = tmpTime / 8;
        Double leadTime = Math.ceil(bomTime);
        Integer mnfLeadTime = leadTime.intValue();
        Integer planType = (Integer) r.getAttribute("PlnType");
        Object cldId = r.getAttribute("CldId");
        Object slocId = r.getAttribute("SlocId");
        Object orgId = r.getAttribute("OrgId");
        Object hoOrgId = r.getAttribute("HoOrgId");
        Object prd_id = r.getAttribute("OutptItmId");
        Object dlv_dt = r.getAttribute("TxnDocDlvDt");
        Object src_doc_id = r.getAttribute("DocIdSrc");
        Object pln_doc_Id = r.getAttribute("PlnDocId");

        Integer supLeadTime = getMaxSuppLeadTime(cldId, slocId, orgId, hoOrgId, prd_id, dlv_dt, src_doc_id, pln_doc_Id);

        try {

            Calendar calStDate = Calendar.getInstance();
            Calendar calEndDate = Calendar.getInstance();
            Calendar calRmReqDate = Calendar.getInstance();

            /**
             * upodate plan date based on Forward planning
             */
            if (planType.compareTo(120) == 0 && r.getAttribute("EstStrtDt") != null) {

                java.sql.Date stDt = startDate.dateValue();
                calStDate.setTime(stDt);

                // System.out.println("Max suppler time === " + supLeadTime);

                calStDate.add(Calendar.DATE, supLeadTime);
                Timestamp rmReqDt = new Timestamp(calStDate.getTime());

                r.setAttribute("InptItmReqDt", rmReqDt);

                calStDate.add(Calendar.DATE, mnfLeadTime);
                Timestamp timEnDat = new Timestamp(calStDate.getTime());

                r.setAttribute("EstEndDt", timEnDat);

            }

            /**
             * update plan date based on backward planning
             */
            if (planType.compareTo(121) == 0 && r.getAttribute("EstEndDt") != null) {
                java.sql.Date enDt = endDate.dateValue();

                calEndDate.setTime(enDt);
                calRmReqDate.setTime(enDt);
                
                Integer totalTime = mnfLeadTime + supLeadTime;
                System.out.println(mnfLeadTime + " MNF Time");
                System.out.println(supLeadTime + " Supplier Time");
                System.out.println(totalTime + " Total Time");
                calEndDate.add(Calendar.DATE, -totalTime);
                calRmReqDate.add(Calendar.DATE, - mnfLeadTime);

                Timestamp timStDat = new Timestamp(calEndDate.getTime());
                Timestamp timRmReqDt = new Timestamp(calRmReqDate.getTime());
                System.out.println(" Estimate Start Date " + timStDat);
                System.out.println(" Estimate Raw Material Required Date " + timStDat);
                r.setAttribute("InptItmReqDt", timRmReqDt);
                r.setAttribute("EstStrtDt", timStDat);
                // r.setAttribute("TxnDocDlvDt", r.getAttribute("EstEndDt"));
            }

            /*   updateRmReqDate(r.getAttribute("CldId"), r.getAttribute("SlocId"), r.getAttribute("OrgId"),
                            r.getAttribute("HoOrgId"), r.getAttribute("OutptItmId"), r.getAttribute("TxnDocDlvDt"),
                            r.getAttribute("DocIdSrc"), r.getAttribute("PlnDocId"), r.getAttribute("InptItmReqDt"));
            //getMnfPlnTxnVO().executeQuery(); */
            getDBTransaction().postChanges();

            updateItmDate(r.getAttribute("CldId").toString(), (Integer) r.getAttribute("SlocId"),
                          (String) r.getAttribute("HoOrgId"), (String) r.getAttribute("OrgId"),
                          (String) r.getAttribute("PlnDocId"), (String) r.getAttribute("DocIdSrc"),
                          (String) r.getAttribute("OutptItmId"), (Timestamp) r.getAttribute("TxnDocDlvDt"));

        } catch (SQLException e) {
            e.printStackTrace();
        }

        //Row r = getMnfPlnTxnVO().getCurrentRow();


    }

    /**
     * Method to get the maximum supplier lead time
     */
    public Integer getMaxSuppLeadTime(Object cldId, Object slocId, Object orgId, Object hoOrgId, Object prd_id,
                                      Object dlv_dt, Object src_doc_id, Object pln_doc_Id) {

        RowSetIterator itr = getMnfPlnSuppVO().createRowSetIterator(null);
        Row s = null;
        System.out.println(itr.getRowCount() + " No of row of supplier");
        SortedSet<Integer> supLedTm = new TreeSet<Integer>();
        while (itr.hasNext()) {
            s = itr.next();

            if (cldId.equals(s.getAttribute("CldId")) && slocId.equals(s.getAttribute("SlocId")) &&
                hoOrgId.equals(s.getAttribute("HoOrgId")) && orgId.equals(s.getAttribute("OrgId")) &&
                src_doc_id.equals(s.getAttribute("DocIdSrc")) && pln_doc_Id.equals(s.getAttribute("PlnDocId")) &&
                prd_id.equals(s.getAttribute("OutptItmId")) && dlv_dt.equals(s.getAttribute("TxnDocDlvDt"))) {
                supLedTm.add((Integer) s.getAttribute("ItmSuppLeadTm"));
            }
        }
        itr.closeRowSetIterator();
        if (supLedTm.isEmpty()) {
            return 0;
        } else {
            return supLedTm.last();
        }
    }

    /**
     * Method to update the item requirement date for the Raw Material and their supplier
     *
     */

    public void updateRmReqDate(Object cldId, Object slocId, Object orgId, Object hoOrgId, Object prd_id, Object dlv_dt,
                                Object src_doc_id, Object pln_doc_Id, Object itm_req_dt) {
        RowSetIterator itr = getMnfPlnItmVO().createRowSetIterator(null);
        Row r = null;
        while (itr.hasNext()) {
            r = itr.next();

            if (cldId.equals(r.getAttribute("CldId")) && slocId.equals(r.getAttribute("SlocId")) &&
                hoOrgId.equals(r.getAttribute("HoOrgId")) && orgId.equals(r.getAttribute("OrgId")) &&
                src_doc_id.equals(r.getAttribute("DocIdSrc")) && pln_doc_Id.equals(r.getAttribute("PlnDocId")) &&
                prd_id.equals(r.getAttribute("OutptItmId")) && dlv_dt.equals(r.getAttribute("TxnDocDlvDt"))) {
                r.setAttribute("InptItmReqDt", itm_req_dt);
            }
        }
        itr.closeRowSetIterator();

        RowSetIterator supItr = getMnfPlnSuppVO().createRowSetIterator(null);
        Row s = null;
        while (supItr.hasNext()) {
            s = supItr.next();

            if (cldId.equals(s.getAttribute("CldId")) && slocId.equals(s.getAttribute("SlocId")) &&
                hoOrgId.equals(s.getAttribute("HoOrgId")) && orgId.equals(s.getAttribute("OrgId")) &&
                src_doc_id.equals(s.getAttribute("DocIdSrc")) && pln_doc_Id.equals(s.getAttribute("PlnDocId")) &&
                prd_id.equals(s.getAttribute("OutptItmId")) && dlv_dt.equals(s.getAttribute("TxnDocDlvDt"))) {
                s.setAttribute("InptItmReqDt", itm_req_dt);
            }
        }

        supItr.closeRowSetIterator();

        getMnfPlnSuppVO().executeQuery();
        getMnfPlnItmVO().executeQuery();
        //getVIEWTXNRawMat().executeQuery();
    }


    /**
     * ##################################################################################################################################################
     * RAW MATERIAL12
     */

    //Method to set the taskflowparameter
    public void setGlobalRawMaterialParameter() {

        setParamInViewRawMaterial(getSelInppItmId(), getSelPlnId(), getSelSrcId(), getSelOutItmId(), getSelDlvDt());

        setBindInLISTRmOverview(getSelInppItmId(), getSelPlnId(), getSelSrcId(), getSelOutItmId(), getSelDlvDt());

        //setBindInLISTProductPerRm(getSelInppItmId(), null);
        setBindInGraphTotalRMValue(getSelInppItmId(), getSelPlnId(), getSelSrcId(), getSelOutItmId(), getSelDlvDt());
        setBindInGraphReqResrvRMQty(getSelInppItmId(), getSelPlnId(), getSelSrcId(), getSelOutItmId(), getSelDlvDt());
        //setParamInLISTSupplierPerRM(getSelInppItmId(), getSelPlnId(), getSelSrcId(), getSelOutItmId(), getSelDlvDt(),
        //                            null);
        setParamForLISTProductForRMDetail(getSelPlnId(), getSelOutItmId(), getSelDlvDt());

        // setParamForLISTRmPerPrdForRMDetail(getSelPlnId(), getSelOutItmId(), getSelDlvDt());
        setParamForLISTCustomerPerProductForRMDetails(getSelPlnId(), getSelOutItmId(), getSelDlvDt());

        setParamInDualRmSearchPage();
        // filterVOforSupplier(null, null, null, null, null, null, null);
        //System.out.println("$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$");
    }

    /**
     * Method to set parameter in Line Graph for Item
     */
    public void setParamInGraphRmMaxMinLine(String itm_Id) {
        getGraphRmMaxMinLine().setNamedWhereClauseParam("BindInptItmId", itm_Id);
        getGraphRmMaxMinLine().setNamedWhereClauseParam("BindCldId", getCldId());
        getGraphRmMaxMinLine().setNamedWhereClauseParam("BindSlocId", getSlocId());
        getGraphRmMaxMinLine().setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        getGraphRmMaxMinLine().setNamedWhereClauseParam("BindOrgId", getOrgId());
        getGraphRmMaxMinLine().executeQuery();

    }

    /**
     * Method to search in RM Overview Page
     */
    public void serachRMpage(String input_itm_id, String product_Id, String supplider_id) {

        setBindInLISTProductPerRm(null, product_Id);
        // getLISTProductPerRm().setNamedWhereClauseParam("BindOutItmId", product_Id);
        //setParamInLISTSupplierPerRM(null, null, null, null, null, supplider_id);
        // getLISTSupplierPerRM().setNamedWhereClauseParam("BindSuppId", supplider_id);
        setParamInViewRawMaterial(input_itm_id, null, null, null, null);


        // getVIEWRawMaterial().setNamedWhereClauseParam("BindItmId", input_itm_id);

        getLISTProductPerRm().executeQuery();
        getLISTSupplierPerRM().executeQuery();
        getVIEWRawMaterial().executeQuery();

    }
    //Method to search the raw material in rm overview page
    public void searchItemInRmOverview() {
        Row r = getDualRmSearchPage().getCurrentRow();
        if (r.getAttribute("ItemId") != null) {
            setBindInLISTRmOverview(r.getAttribute("ItemId").toString(), null, null, null, null);
        }
    }

    public void resetItemInRmOverview() {
        getDualRmSearchPage().executeQuery();
        setBindInLISTRmOverview(getSelInppItmId(), getSelPlnId(), getSelSrcId(), getSelOutItmId(), getSelDlvDt());

    }

    //Method to search the product of selected raw materal in rm overview page
    public void searchProductInRmOverview(String input_itm_id) {
        Row r = getDualRmSearchPage().getCurrentRow();
        if (r.getAttribute("ProductId") != null) {
            setBindInLISTProductPerRm(input_itm_id, r.getAttribute("ProductId").toString());
        }
    }
    //Method to reset the product of selected raw materal in rm overview page
    public void resetProducInRmOverview(String input_itm_id) {
        getDualRmSearchPage().executeQuery();
        setBindInLISTProductPerRm(input_itm_id, null);
    }

    //Method to search supplier of item in rm overview page
    public void searchSuppInRmOverview(String input_itm_id) {
        Row r = getDualRmSearchPage().getCurrentRow();
        if (r.getAttribute("SupplierId") != null) {
            setParamInLISTSupplierPerRM(input_itm_id, null, null, null, null,
                                        (oracle.jbo.domain.Number) r.getAttribute("SupplierId"));
        }
    }
    //Method to reset supplier of item in RM overview page
    public void resetSuppInRmOverview(String input_itm_id) {
        getDualRmSearchPage().executeQuery();
        setParamInLISTSupplierPerRM(input_itm_id, null, null, null, null, null);
    }

    /**
     * Method to set parameter in view dual for rm search page
     */

    protected void setParamInDualRmSearchPage() {
        getDualRmSearchPage().setNamedWhereClauseParam("BindCldId", getCldId());
        getDualRmSearchPage().setNamedWhereClauseParam("BindSlocId", getSlocId());
        getDualRmSearchPage().setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        getDualRmSearchPage().setNamedWhereClauseParam("BindOrgId", getOrgId());
        getDualRmSearchPage().executeQuery();

    }

    /**
     * Method to set parameter in view supplier per RM
     */

    protected void setParamInLISTSupplierPerRM(String input_itm_id, String pln_doc_Id, String src_doc_id,
                                               String output_id, Timestamp dlv_dt, oracle.jbo.domain.Number supp_id) {
        getLISTSupplierPerRM().setNamedWhereClauseParam("BindCldId", getCldId());
        getLISTSupplierPerRM().setNamedWhereClauseParam("BindSlocId", getSlocId());
        getLISTSupplierPerRM().setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        getLISTSupplierPerRM().setNamedWhereClauseParam("BindOrgId", getOrgId());
        getLISTSupplierPerRM().setNamedWhereClauseParam("BindItmId", input_itm_id);
        getLISTSupplierPerRM().setNamedWhereClauseParam("BindOutItmId", output_id);
        getLISTSupplierPerRM().setNamedWhereClauseParam("BindDlvDt", dlv_dt);
        getLISTSupplierPerRM().setNamedWhereClauseParam("BindSrcId", src_doc_id);
        getLISTSupplierPerRM().setNamedWhereClauseParam("BindPlnId", pln_doc_Id);
        getLISTSupplierPerRM().setNamedWhereClauseParam("BindSuppId", supp_id);

        getLISTSupplierPerRM().executeQuery();
    }

    /**
     * Method to set parameter in view raw material VO
     */
    protected void setParamInViewRawMaterial(String input_itm_id, String pln_doc_Id, String src_doc_id,
                                             String output_id, Timestamp dlv_dt) {

        getVIEWRawMaterial().setNamedWhereClauseParam("BindCldId", getCldId());
        getVIEWRawMaterial().setNamedWhereClauseParam("BindSlocId", getSlocId());
        getVIEWRawMaterial().setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        getVIEWRawMaterial().setNamedWhereClauseParam("BindOrgId", getOrgId());
        getVIEWRawMaterial().setNamedWhereClauseParam("BindItmId", input_itm_id);
        getVIEWRawMaterial().setNamedWhereClauseParam("BindOutItmId", output_id);
        getVIEWRawMaterial().setNamedWhereClauseParam("BindPlnId", pln_doc_Id);
        getVIEWRawMaterial().setNamedWhereClauseParam("BindSrcDocId", src_doc_id);
        getVIEWRawMaterial().setNamedWhereClauseParam("BindDlvDt", dlv_dt);
        getVIEWRawMaterial().executeQuery();
        System.out.println("getVIEWRawMaterial binding called *****************************************************************");

    }

    /**
     * Method to set bind variables in Raw material list VO
     */
    public void setBindInLISTRmOverview(String input_itm_id, String pln_doc_Id, String src_doc_id, String output_id,
                                        Timestamp dlv_dt) {
        getLISTRmOverview().setNamedWhereClauseParam("BindCldId", getCldId());
        getLISTRmOverview().setNamedWhereClauseParam("BindSlocId", getSlocId());
        getLISTRmOverview().setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        getLISTRmOverview().setNamedWhereClauseParam("BindOrgId", getOrgId());
        getLISTRmOverview().setNamedWhereClauseParam("BindItmId", input_itm_id);
        getLISTRmOverview().setNamedWhereClauseParam("BindOutItmId", output_id);
        getLISTRmOverview().setNamedWhereClauseParam("BindPlnId", pln_doc_Id);
        getLISTRmOverview().setNamedWhereClauseParam("BindSrcDocId", src_doc_id);
        getLISTRmOverview().setNamedWhereClauseParam("BindDlvDt", dlv_dt);
        getLISTRmOverview().executeQuery();
        //System.out.println("getLISTRmOverview binding called *****************************************************************");
    }

    /**
     * Method to set bind variables in product for raw material list VO
     */
    public void setBindInLISTProductPerRm(String input_itm_id, String outptItm_id) {
        getLISTProductPerRm().setNamedWhereClauseParam("BindCldId", getCldId());
        getLISTProductPerRm().setNamedWhereClauseParam("BindSlocId", getSlocId());
        getLISTProductPerRm().setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        getLISTProductPerRm().setNamedWhereClauseParam("BindOrgId", getOrgId());
        getLISTProductPerRm().setNamedWhereClauseParam("BindItmId", input_itm_id);
        getLISTProductPerRm().setNamedWhereClauseParam("BindOutItmId", outptItm_id);
        getLISTProductPerRm().executeQuery();
    }

    /**
     * Method to set bind variables in total raw material required and available qty graph
     */

    public void setBindInGraphTotalRMValue(String input_itm_id, String pln_doc_Id, String src_doc_id, String output_id,
                                           Timestamp dlv_dt) {
        getGraphTotalRMValue().setNamedWhereClauseParam("BindCldId", getCldId());
        getGraphTotalRMValue().setNamedWhereClauseParam("BindSlocId", getSlocId());
        getGraphTotalRMValue().setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        getGraphTotalRMValue().setNamedWhereClauseParam("BindOrgId", getOrgId());
        getGraphTotalRMValue().setNamedWhereClauseParam("BindItmId", input_itm_id);
        getGraphTotalRMValue().setNamedWhereClauseParam("BindOutItmId", output_id);
        getGraphTotalRMValue().setNamedWhereClauseParam("BindPlnId", pln_doc_Id);
        getGraphTotalRMValue().setNamedWhereClauseParam("BindSrcDocId", src_doc_id);
        getGraphTotalRMValue().setNamedWhereClauseParam("BindDlvDt", dlv_dt);

        getGraphTotalRMValue().executeQuery();
    }

    public void setBindInGraphReqResrvRMQty(String input_itm_id, String pln_doc_Id, String src_doc_id, String output_id,
                                            Timestamp dlv_dt) {
        getGraphReqResrvRMQty().setNamedWhereClauseParam("BindCldId", getCldId());
        getGraphReqResrvRMQty().setNamedWhereClauseParam("BindSlocId", getSlocId());
        getGraphReqResrvRMQty().setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        getGraphReqResrvRMQty().setNamedWhereClauseParam("BindOrgId", getOrgId());
        getGraphReqResrvRMQty().setNamedWhereClauseParam("BindItmId", input_itm_id);
        getGraphReqResrvRMQty().setNamedWhereClauseParam("BindOutItmId", output_id);
        getGraphReqResrvRMQty().setNamedWhereClauseParam("BindPlnId", pln_doc_Id);
        getGraphReqResrvRMQty().setNamedWhereClauseParam("BindSrcDocId", src_doc_id);
        getGraphReqResrvRMQty().setNamedWhereClauseParam("BindDlvDt", dlv_dt);

        getGraphReqResrvRMQty().executeQuery();
    }

    public void setBindInLISTProductWithDlvPerRm1(String input_itm_id, String pln_doc_Id, String src_doc_id,
                                                  String output_id, String dlv_dt) {

        getLISTProductWithDlvPerRm().setNamedWhereClauseParam("BindCldId", getCldId());
        getLISTProductWithDlvPerRm().setNamedWhereClauseParam("BindSlocId", getSlocId());
        getLISTProductWithDlvPerRm().setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        getLISTProductWithDlvPerRm().setNamedWhereClauseParam("BindOrgId", getOrgId());
        getLISTProductWithDlvPerRm().setNamedWhereClauseParam("BindItmId", input_itm_id);
        getLISTProductWithDlvPerRm().setNamedWhereClauseParam("BindOutItmId", output_id);
        getLISTProductWithDlvPerRm().setNamedWhereClauseParam("BindPlnId", pln_doc_Id);
        getLISTProductWithDlvPerRm().setNamedWhereClauseParam("BindSrcDocId", src_doc_id);
        getLISTProductWithDlvPerRm().setNamedWhereClauseParam("BindDlvDt", dlv_dt);

        getLISTProductWithDlvPerRm().executeQuery();
    }


    /**
     * method to set bind varaible in selection event for Raw material
     */
    public void setRmBindingInSelectionEvent(String input_itm_id, String pln_doc_Id, String src_doc_id,
                                             String output_id, Timestamp dlv_dt, String supplier_id) {

        setBindInGraphTotalRMValue(input_itm_id, pln_doc_Id, src_doc_id, output_id, dlv_dt);
        setBindInGraphReqResrvRMQty(input_itm_id, pln_doc_Id, src_doc_id, output_id, dlv_dt);
        setBindInLISTProductPerRm(input_itm_id, null);
        setParamInLISTSupplierPerRM(input_itm_id, pln_doc_Id, src_doc_id, output_id, dlv_dt, null);
    }

    public void filterOnRmSelection(String itmid) {

        System.out.println("call from dlv RM selection");
        setBindInLISTProductPerRm(itmid, null);
        setBindInGraphTotalRMValue(itmid, null, null, null, null);
        setBindInGraphReqResrvRMQty(itmid, null, null, null, null);

        setParamInViewRawMaterial(itmid, null, null, null, null);
        setParamInLISTSupplierPerRM(itmid, null, null, null, null, null);
    }

    public void filterOnPrdSelection(String inputId, String output) {

        setBindInGraphTotalRMValue(inputId, null, null, output, null);
        setBindInGraphReqResrvRMQty(inputId, null, null, output, null);
        setParamInViewRawMaterial(inputId, null, null, output, null);
        setParamInLISTSupplierPerRM(inputId, null, null, output, null, null);
    }

    public void filterViewRawMetrial(String inputId, String output) {


        //setBindInLISTProductWithDlvPerRm1(input_itm_id, pln_doc_Id, src_doc_id, output_id, dlv_dt);
        setBindInLISTProductWithDlvPerRm1(inputId, null, null, output, null);

    }

    public void filterOnDlvPrdSelection(String input_itm_id, String pln_doc_Id, String src_doc_id, String output_id,
                                        Timestamp dlv_dt) {

        setParamInViewRawMaterial(input_itm_id, pln_doc_Id, src_doc_id, output_id, dlv_dt);
        setBindInGraphTotalRMValue(input_itm_id, pln_doc_Id, src_doc_id, output_id, dlv_dt);
        setBindInGraphReqResrvRMQty(input_itm_id, pln_doc_Id, src_doc_id, output_id, dlv_dt);
        setParamInLISTSupplierPerRM(input_itm_id, pln_doc_Id, src_doc_id, output_id, dlv_dt, null);
    }

    protected void setParamForLISTProductForRMDetail(String pln_doc_Id, String output_id, Timestamp dlv_dt) {

        getLISTProductForRMDetail().setNamedWhereClauseParam("BindCldId", getCldId());
        getLISTProductForRMDetail().setNamedWhereClauseParam("BindSlocId", getSlocId());
        getLISTProductForRMDetail().setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        getLISTProductForRMDetail().setNamedWhereClauseParam("BindOrgId", getOrgId());
        // getLISTProductForRMDetail().setNamedWhereClauseParam("BindItmId", input_itm_id);
        getLISTProductForRMDetail().setNamedWhereClauseParam("BindOutItmId", output_id);
        getLISTProductForRMDetail().setNamedWhereClauseParam("BindPlnId", pln_doc_Id);
        //getLISTProductForRMDetail().setNamedWhereClauseParam("BindSrcDocId", src_doc_id);
        getLISTProductForRMDetail().setNamedWhereClauseParam("BindDlvDt", dlv_dt);

        getLISTProductForRMDetail().executeQuery();

    }

    protected void setParamForLISTCustomerPerProductForRMDetails(String pln_doc_Id, String output_id,
                                                                 Timestamp dlv_dt) {

        getLISTCustomerPerProductForRMDetails().setNamedWhereClauseParam("BindCldId", getCldId());
        getLISTCustomerPerProductForRMDetails().setNamedWhereClauseParam("BindSlocId", getSlocId());
        getLISTCustomerPerProductForRMDetails().setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        getLISTCustomerPerProductForRMDetails().setNamedWhereClauseParam("BindOrgId", getOrgId());
        getLISTCustomerPerProductForRMDetails().setNamedWhereClauseParam("BindOutItmId", output_id);
        getLISTCustomerPerProductForRMDetails().setNamedWhereClauseParam("BindPlnId", pln_doc_Id);
        getLISTCustomerPerProductForRMDetails().setNamedWhereClauseParam("BindDlvDt", dlv_dt);

        getLISTCustomerPerProductForRMDetails().executeQuery();

    }

    protected void setParamForLISTRmPerPrdForRMDetail(String pln_doc_Id, String output_id, Timestamp dlv_dt,
                                                      String src_id) {

        getLISTRmPerPrdForRMDetail().setNamedWhereClauseParam("BindCldId", getCldId());
        getLISTRmPerPrdForRMDetail().setNamedWhereClauseParam("BindSlocId", getSlocId());
        getLISTRmPerPrdForRMDetail().setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        getLISTRmPerPrdForRMDetail().setNamedWhereClauseParam("BindOrgId", getOrgId());
        getLISTRmPerPrdForRMDetail().setNamedWhereClauseParam("BindOutItmId", output_id);
        getLISTRmPerPrdForRMDetail().setNamedWhereClauseParam("BindPlnDocId", pln_doc_Id);
        getLISTRmPerPrdForRMDetail().setNamedWhereClauseParam("BindDlvDt", dlv_dt);
        getLISTRmPerPrdForRMDetail().setNamedWhereClauseParam("BindSrcId", src_id);


        getLISTRmPerPrdForRMDetail().executeQuery();
    }

    //Method to set the bind variable in list of supplier per Raw material selected
    protected void setParamForLISTSupplierForRMDetail(String inItm_id, String bomId, Timestamp dlvDt, String srcId,
                                                      Timestamp itmReqDt, String outItmId, String plnDocId) {
        getLISTSupplierForRMDetail().setNamedWhereClauseParam("BindCldId", getCldId());
        getLISTSupplierForRMDetail().setNamedWhereClauseParam("BindSlocId", getSlocId());
        getLISTSupplierForRMDetail().setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        getLISTSupplierForRMDetail().setNamedWhereClauseParam("BindOrgId", getOrgId());
        getLISTSupplierForRMDetail().setNamedWhereClauseParam("BindInptItmId", inItm_id);
        getLISTSupplierForRMDetail().setNamedWhereClauseParam("BindBomId", bomId);
        getLISTSupplierForRMDetail().setNamedWhereClauseParam("BindDlvDt", dlvDt);
        getLISTSupplierForRMDetail().setNamedWhereClauseParam("BindDocIdSrc", srcId);
        getLISTSupplierForRMDetail().setNamedWhereClauseParam("BindItmReqDt", itmReqDt);
        getLISTSupplierForRMDetail().setNamedWhereClauseParam("BindOutItmId", outItmId);
        getLISTSupplierForRMDetail().setNamedWhereClauseParam("BindPlnDocId", plnDocId);
        getLISTSupplierForRMDetail().executeQuery();


    }

    // Method to set the bind variable in the supplier list that can be added to the supplier table
    protected void setParamForLISTSupplierFullForRMDetail(String inItm_id, Object plan_id, Object src_id,
                                                          Object out_itm_id, Object dlv_dt, Object bom_id) {
        /* System.out.println();
        System.out.println(inItm_id + " %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%");
        System.out.println(plan_id + " %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%");
        System.out.println(src_id + " %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%");
        System.out.println(out_itm_id + " %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%");
        System.out.println(dlv_dt + " %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%");
        System.out.println(bom_id + " %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%");

        */



        getLISTSupplierFullForRMDetail().setNamedWhereClauseParam("BindCldId", getCldId());
        getLISTSupplierFullForRMDetail().setNamedWhereClauseParam("BindSlocId", getSlocId());
        getLISTSupplierFullForRMDetail().setNamedWhereClauseParam("BindItmId", inItm_id);
        getLISTSupplierFullForRMDetail().setNamedWhereClauseParam("BindOrgId", getOrgId());
        getLISTSupplierFullForRMDetail().setNamedWhereClauseParam("BindPlnDocId", plan_id);
        getLISTSupplierFullForRMDetail().setNamedWhereClauseParam("BindSrcDocId", src_id);
        getLISTSupplierFullForRMDetail().setNamedWhereClauseParam("BindOutItmId", out_itm_id);
        getLISTSupplierFullForRMDetail().setNamedWhereClauseParam("BindDlvDt", dlv_dt);
        getLISTSupplierFullForRMDetail().setNamedWhereClauseParam("BindBomDocId", bom_id);

        getLISTSupplierFullForRMDetail().executeQuery();

    }

    /**
     *method to display Raw Material acording to Customer and Sales Order selection
     * @param itm_id
     */
    public void setFilterForRawMaterialPerCustomer(String pln_doc_Id, String output_id, Timestamp dlv_dt,
                                                   String src_id) {
        setParamForLISTRmPerPrdForRMDetail(pln_doc_Id, output_id, dlv_dt, src_id);
        filterVOforSupplier(-1, -1, -1, null, null, null, null, null, null, null, null);
    }

    /**
     *method to display supplier acording to raw material selection
     * @param itm_id
     */
    public void setFilterForSuppl(String inItm_id, String bomId, Timestamp dlvDt, String srcId, Timestamp itmReqDt,
                                  String outItmId, String plnDocId) {

        setParamForLISTSupplierForRMDetail(inItm_id, bomId, dlvDt, srcId, itmReqDt, outItmId, plnDocId);
        setParamForLISTSupplierFullForRMDetail(inItm_id.toString(), plnDocId.toString(), srcId.toString(),
                                               outItmId.toString(), (Timestamp) dlvDt, bomId.toString());

        filterVOforSupplier(getCldId(), getSlocId(), getHoOrgId(), getOrgId(), dlvDt, outItmId, plnDocId, srcId, bomId,
                            inItm_id, itmReqDt);
    }

    protected void filterVOforSupplier(Object cldId, Object slocId, Object hoOrgId, Object orgId, Timestamp dlv_dt,
                                       String out_itm_id, String pln_doc_id, String src_doc_id, String bom_id,
                                       String inp_itm_id, Timestamp itm_req_dt) {
        ViewObjectImpl impl = this.getMnfPlnSuppVO();
        ViewCriteria vc = impl.getViewCriteria("MnfPlnSuppVOCriteria");
        impl.applyViewCriteria(vc);
        impl.setNamedWhereClauseParam("BindCldId", cldId);
        impl.setNamedWhereClauseParam("BindSlocId", slocId);
        impl.setNamedWhereClauseParam("BindHoOrgId", hoOrgId);
        impl.setNamedWhereClauseParam("BindOrgId", orgId);
        impl.setNamedWhereClauseParam("BindDlvDt", dlv_dt);
        impl.setNamedWhereClauseParam("BindOutItmId", out_itm_id);
        impl.setNamedWhereClauseParam("BindPlanDocId", pln_doc_id);
        impl.setNamedWhereClauseParam("BindSrcDocId", src_doc_id);
        impl.setNamedWhereClauseParam("BindBomId", bom_id);
        impl.setNamedWhereClauseParam("BindInputItmId", inp_itm_id);
        //impl.setNamedWhereClauseParam("BindItmReqDt", itm_req_dt);
        impl.executeQuery();
    }


    /**
     *method to add supplier for Raw material order
     * @param supp_id
     * @param order_qty
     */
    public void addSupplier(oracle.jbo.domain.Number supp_id, oracle.jbo.domain.Number order_qty, String PLN_DOC_ID,
                            String DOC_ID_SRC, String OUTPT_ITM_ID, oracle.jbo.domain.Timestamp TXN_DOC_DLV_DT,
                            String BOM_ID, String INPT_ITM_ID, Timestamp INPT_ITM_REQ_DT) {

        // Row x = getLISTSupplierFullForRMDetail().getCurrentRow();

        // Object qty = x.getAttribute("OrderQuantity");
        /* System.out.println(TXN_DOC_DLV_DT + " %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%" );
        System.out.println(PLN_DOC_ID + " %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%" );
        System.out.println(INPT_ITM_REQ_DT + " %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%" );
        System.out.println(INPT_ITM_ID + " %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%" );
        System.out.println(BOM_ID + " %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%" );
        System.out.println(OUTPT_ITM_ID + " %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%" ); */

        RowSetIterator itr = getLISTSupplierFullForRMDetail().createRowSetIterator(null);

        Row r = null;
        //System.out.println("Stage 1");
        while (itr.hasNext()) {
            r = itr.next();
            if (r.getAttribute("SelectToAdd") != null &&
                "true".equalsIgnoreCase(r.getAttribute("SelectToAdd").toString())) {
                System.out.println(" adding supplier");
                System.out.println(r.getAttribute("EoId"));
                addSupplierToOrder(r.getAttribute("EoId"), 0, r.getAttribute("LeadTime"), PLN_DOC_ID, DOC_ID_SRC,
                                   OUTPT_ITM_ID, TXN_DOC_DLV_DT, BOM_ID, INPT_ITM_ID, INPT_ITM_REQ_DT,
                                   r.getAttribute("ItmPrice"));
                System.out.println(" before remove method");
                removeNullSupplierRow(PLN_DOC_ID, DOC_ID_SRC, OUTPT_ITM_ID, TXN_DOC_DLV_DT, BOM_ID, INPT_ITM_ID,
                                      INPT_ITM_REQ_DT);
                validateSupplierQty(PLN_DOC_ID, DOC_ID_SRC, OUTPT_ITM_ID, TXN_DOC_DLV_DT, BOM_ID, INPT_ITM_ID,
                                    INPT_ITM_REQ_DT);
                getDBTransaction().postChanges();
                updateInputSource(getCldId(), getSlocId(), getHoOrgId(), getOrgId(), PLN_DOC_ID, DOC_ID_SRC,
                                  OUTPT_ITM_ID, TXN_DOC_DLV_DT);
                getMnfPlnPrdVO().executeQuery();
                getMnfPlnItmVO().executeQuery();
                getMnfPlnTxnVO().executeQuery();
                getLISTRmPerPrdForRMDetail().executeQuery();
                setViewTxnRawMatBind(PLN_DOC_ID, OUTPT_ITM_ID, DOC_ID_SRC, TXN_DOC_DLV_DT);
                getMnfPlnSuppVO().executeQuery();

                setFilterForSuppl(INPT_ITM_ID, BOM_ID, TXN_DOC_DLV_DT, DOC_ID_SRC, INPT_ITM_REQ_DT, OUTPT_ITM_ID,
                                  PLN_DOC_ID);
                // setParamForLISTSupplierForRMDetail(INPT_ITM_ID.toString());
                //setParamForLISTSupplierFullForRMDetail(INPT_ITM_ID.toString());
                getLISTSupplierFullForRMDetail().executeQuery();
            }

        }
        itr.closeRowSetIterator();

        // getDBTransaction().commit();
    }

    /**
     * creating row for sdded supplier
     * @param supp_id
     * @param order_qty
     * @param lead_time
     * @param PLN_DOC_ID
     * @param DOC_ID_SRC
     * @param OUTPT_ITM_ID
     * @param TXN_DOC_DLV_DT
     * @param BOM_ID
     * @param INPT_ITM_ID
     * @param INPT_ITM_REQ_DT
     * @param itmPrice
     */
    protected void addSupplierToOrder(Object supp_id, Object order_qty, Object lead_time, Object PLN_DOC_ID,
                                      Object DOC_ID_SRC, Object OUTPT_ITM_ID, Object TXN_DOC_DLV_DT, Object BOM_ID,
                                      Object INPT_ITM_ID, Object INPT_ITM_REQ_DT, Object itmPrice) {


        RowQualifier rq = new RowQualifier(getMnfPlnItmVO());
        rq.setWhereClause("SlocId = " + getSlocId() + " and CldId='" + getCldId() + "' and HoOrgId='" + getHoOrgId() +
                          "' and OrgId = '" + getOrgId() + "' and BomId = '" + BOM_ID + "' and InptItmId = '" +
                          INPT_ITM_ID + "' and InptItmReqDt = '" + INPT_ITM_REQ_DT + "' and OutptItmId = '" +
                          OUTPT_ITM_ID + "' and PlnDocId = '" + PLN_DOC_ID + "' and TxnDocDlvDt = '" + TXN_DOC_DLV_DT +
                          "' and DocIdSrc = '" + DOC_ID_SRC + "'");
        Row[] fltrdRow = getMnfPlnItmVO().getFilteredRows(rq);
        System.out.println(fltrdRow.length + " total no of rows filtered");
        if (fltrdRow.length > 0) {

            Row r = getMnfPlnSuppVO().createRow();
            r.setAttribute("CldId", fltrdRow[0].getAttribute("CldId"));
            r.setAttribute("SlocId", fltrdRow[0].getAttribute("SlocId"));
            r.setAttribute("HoOrgId", fltrdRow[0].getAttribute("HoOrgId"));
            r.setAttribute("OrgId", fltrdRow[0].getAttribute("OrgId"));
            r.setAttribute("PlnDocId", fltrdRow[0].getAttribute("PlnDocId"));
            r.setAttribute("PlnDocDt", fltrdRow[0].getAttribute("PlnDocDt"));
            r.setAttribute("EoId", supp_id);
            r.setAttribute("OutptItmId", fltrdRow[0].getAttribute("OutptItmId"));
            r.setAttribute("InptItmId", fltrdRow[0].getAttribute("InptItmId"));
            r.setAttribute("TxnDocDlvDt", fltrdRow[0].getAttribute("TxnDocDlvDt"));
            r.setAttribute("OutptItmDlvQty", fltrdRow[0].getAttribute("OutptItmDlvQty"));
            r.setAttribute("InptItmQty", 0);
            r.setAttribute("InptItmPrice", itmPrice);
            r.setAttribute("InptItmAmtBs", fltrdRow[0].getAttribute("InptItmAmtBs"));
            r.setAttribute("InptItmAmtSp", fltrdRow[0].getAttribute("InptItmAmtSp"));
            r.setAttribute("InptItmCost", fltrdRow[0].getAttribute("InptItmCost"));
            r.setAttribute("ItmSuppLeadTm", lead_time);
            r.setAttribute("InptItmReqDt", fltrdRow[0].getAttribute("InptItmReqDt"));
            r.setAttribute("EoPrdStat", fltrdRow[0].getAttribute("EoPrdStat"));
            r.setAttribute("TxnDocFreeze", fltrdRow[0].getAttribute("TxnDocFreeze"));
            r.setAttribute("Priority", fltrdRow[0].getAttribute("Priority"));
            r.setAttribute("PerfScore", fltrdRow[0].getAttribute("PerfScore"));
            r.setAttribute("DfltFlg", "N");
            r.setAttribute("ItmUom", fltrdRow[0].getAttribute("ItmUom"));
            r.setAttribute("BomId", fltrdRow[0].getAttribute("BomId"));
            r.setAttribute("DocIdSrc", fltrdRow[0].getAttribute("DocIdSrc"));
            r.setAttribute("InptItmReqQty", fltrdRow[0].getAttribute("InptItmReqQty"));

            getMnfPlnSuppVO().insertRow(r);
            // getDBTransaction().postChanges();
        }

    }

    /**
     *remove row from supplier with EO_id =0
     * @param PLN_DOC_ID
     * @param DOC_ID_SRC
     * @param OUTPT_ITM_ID
     * @param TXN_DOC_DLV_DT
     * @param BOM_ID
     * @param INPT_ITM_ID
     * @param INPT_ITM_REQ_DT
     */
    protected void removeNullSupplierRow(Object PLN_DOC_ID, Object DOC_ID_SRC, Object OUTPT_ITM_ID,
                                         Object TXN_DOC_DLV_DT, Object BOM_ID, Object INPT_ITM_ID,
                                         Object INPT_ITM_REQ_DT) {
        System.out.println(" Inside remove supplier ");
        RowQualifier rq = new RowQualifier(getMnfPlnSuppVO());
        rq.setWhereClause("SlocId = " + getSlocId() + " and CldId='" + getCldId() + "' and HoOrgId='" + getHoOrgId() +
                          "' and OrgId = '" + getOrgId() + "' and BomId = '" + BOM_ID + "' and InptItmId = '" +
                          INPT_ITM_ID + "' and InptItmReqDt = '" + INPT_ITM_REQ_DT + "' and OutptItmId = '" +
                          OUTPT_ITM_ID + "' and PlnDocId = '" + PLN_DOC_ID + "' and TxnDocDlvDt = '" + TXN_DOC_DLV_DT +
                          "' and DocIdSrc = '" + DOC_ID_SRC + "' and EoId = '" + 0);
        Row[] fltrdRow = getMnfPlnSuppVO().getFilteredRows(rq);

        System.out.println(fltrdRow.length + " total no of rows filtered with eo id 0");
        if (fltrdRow.length > 0) {
            System.out.println("removing with 0 employee Id");
            fltrdRow[0].remove();
        }
    }

    protected void addSupplierToItem(Object supp_id, Object order_qty, Object lead_time, Object PLN_DOC_ID,
                                     Object DOC_ID_SRC, Object OUTPT_ITM_ID, Object TXN_DOC_DLV_DT, Object BOM_ID,
                                     Object INPT_ITM_ID, Object INPT_ITM_REQ_DT, Object itmPrice) {

        RowQualifier rq = new RowQualifier(getMnfPlnItmVO());
        rq.setWhereClause("SlocId = " + getSlocId() + " and CldId='" + getCldId() + "' and HoOrgId='" + getHoOrgId() +
                          "' and OrgId = '" + getOrgId() + "' and BomId = '" + BOM_ID + "' and InptItmId = '" +
                          INPT_ITM_ID + "' and InptItmReqDt = '" + INPT_ITM_REQ_DT + "' and OutptItmId = '" +
                          OUTPT_ITM_ID + "' and PlnDocId = '" + PLN_DOC_ID + "' and TxnDocDlvDt = '" + TXN_DOC_DLV_DT +
                          "' and DocIdSrc = '" + DOC_ID_SRC + "'");
        Row[] fltrdRow = getMnfPlnItmVO().getFilteredRows(rq);
        if (fltrdRow.length > 0) {
            oracle.jbo.domain.Number price = (oracle.jbo.domain.Number) itmPrice;
            oracle.jbo.domain.Number reqQty = (oracle.jbo.domain.Number) fltrdRow[0].getAttribute("InptItmReqQty");
            oracle.jbo.domain.Number totCost = reqQty.multiply(price);
            fltrdRow[0].setAttribute("SuppEoId", supp_id);
            fltrdRow[0].setAttribute("ItmSuppLeadTm", lead_time);
            fltrdRow[0].setAttribute("InptItmPrice", itmPrice);
            fltrdRow[0].setAttribute("InptItmAmtBs", totCost);
            fltrdRow[0].setAttribute("InptItmAmtSp", totCost);
            fltrdRow[0].setAttribute("InptItmCost", totCost);
            //
        }

    }

    /**
     * Method to check null supplier for a raw material
     */
    public String checkSupplierPresence(String PLN_DOC_ID, String DOC_ID_SRC, String OUTPT_ITM_ID,
                                        oracle.jbo.domain.Timestamp TXN_DOC_DLV_DT, String BOM_ID, String INPT_ITM_ID,
                                        Timestamp INPT_ITM_REQ_DT) {
        RowQualifier rq = new RowQualifier(getMnfPlnSuppVO());
        rq.setWhereClause("SlocId = " + getSlocId() + " and CldId='" + getCldId() + "' and HoOrgId='" + getHoOrgId() +
                          "' and OrgId = '" + getOrgId() + "' and BomId = '" + BOM_ID + "' and InptItmId = '" +
                          INPT_ITM_ID + "' and InptItmReqDt = '" + INPT_ITM_REQ_DT + "' and OutptItmId = '" +
                          OUTPT_ITM_ID + "' and PlnDocId = '" + PLN_DOC_ID + "' and TxnDocDlvDt = '" + TXN_DOC_DLV_DT +
                          "' and DocIdSrc = '" + DOC_ID_SRC + "'");
        Row[] fltrdRow = getMnfPlnSuppVO().getFilteredRows(rq);
        Integer count = 0;
        if (fltrdRow.length > 0) {
            for (int lop = 0; lop < fltrdRow.length; lop++) {

            }
        }
        return "true";
    }

    /**
     * Method to check the added supplier quantity to be correct
     */
    public void validateSupplierQty(String PLN_DOC_ID, String DOC_ID_SRC, String OUTPT_ITM_ID,
                                    oracle.jbo.domain.Timestamp TXN_DOC_DLV_DT, String BOM_ID, String INPT_ITM_ID,
                                    Timestamp INPT_ITM_REQ_DT) {
        // checkSupplierQty(PLN_DOC_ID, DOC_ID_SRC, OUTPT_ITM_ID, TXN_DOC_DLV_DT, BOM_ID, INPT_ITM_ID, INPT_ITM_REQ_DT);
        getSuppWithMinLead(PLN_DOC_ID, DOC_ID_SRC, OUTPT_ITM_ID, TXN_DOC_DLV_DT, BOM_ID, INPT_ITM_ID, INPT_ITM_REQ_DT);
        addSupplierToItem(bestSupp, null, bestLead, PLN_DOC_ID, DOC_ID_SRC, OUTPT_ITM_ID, TXN_DOC_DLV_DT, BOM_ID,
                          INPT_ITM_ID, INPT_ITM_REQ_DT, bestPrice);
    }

    /**
     * Method to distribute equal quantity to each supplier added.
     *
     * */

    public void supplierQtyDistribute(String PLN_DOC_ID, String DOC_ID_SRC, String OUTPT_ITM_ID,
                                      oracle.jbo.domain.Timestamp TXN_DOC_DLV_DT, String BOM_ID, String INPT_ITM_ID,
                                      Timestamp INPT_ITM_REQ_DT, oracle.jbo.domain.Number tot_order_qty) {

        mixSupplierQty(PLN_DOC_ID, DOC_ID_SRC, OUTPT_ITM_ID, TXN_DOC_DLV_DT, BOM_ID, INPT_ITM_ID, INPT_ITM_REQ_DT,
                       tot_order_qty);

    }

    protected void mixSupplierQty(Object PLN_DOC_ID, Object DOC_ID_SRC, Object OUTPT_ITM_ID, Object TXN_DOC_DLV_DT,
                                  Object BOM_ID, Object INPT_ITM_ID, Object INPT_ITM_REQ_DT,
                                  oracle.jbo.domain.Number tot_order_qty) {

        RowQualifier rq = new RowQualifier(getMnfPlnSuppVO());
        rq.setWhereClause("SlocId = " + getSlocId() + " and CldId='" + getCldId() + "' and HoOrgId='" + getHoOrgId() +
                          "' and OrgId = '" + getOrgId() + "' and BomId = '" + BOM_ID + "' and InptItmId = '" +
                          INPT_ITM_ID + "' and InptItmReqDt = '" + INPT_ITM_REQ_DT + "' and OutptItmId = '" +
                          OUTPT_ITM_ID + "' and PlnDocId = '" + PLN_DOC_ID + "' and TxnDocDlvDt = '" + TXN_DOC_DLV_DT +
                          "' and DocIdSrc = '" + DOC_ID_SRC + "'");
        Row[] fltrdRow = getMnfPlnSuppVO().getFilteredRows(rq);
        oracle.jbo.domain.Number totalSupp = new oracle.jbo.domain.Number(fltrdRow.length);
        System.out.println(fltrdRow.length + " Total no. of supplier ===================== " + totalSupp);
        for (int i = 0; i < fltrdRow.length; i++) {
            //  oracle.jbo.domain.Number suppQty = (oracle.jbo.domain.Number) fltrdRow[i].getAttribute("InptItmQty");
            oracle.jbo.domain.Number divide = tot_order_qty.divide(totalSupp);
            fltrdRow[i].setAttribute("InptItmQty", divide);
            System.out.println(divide + "   supplier Quantity");

        }
    }

    public oracle.jbo.domain.Number sumTotalSuppQty(String PLN_DOC_ID, String DOC_ID_SRC, String OUTPT_ITM_ID,
                                                    oracle.jbo.domain.Timestamp TXN_DOC_DLV_DT, String BOM_ID,
                                                    String INPT_ITM_ID, Timestamp INPT_ITM_REQ_DT,
                                                    oracle.jbo.domain.Number tot_order_qty) {

        RowQualifier rq = new RowQualifier(getMnfPlnSuppVO());
        rq.setWhereClause("SlocId = " + getSlocId() + " and CldId='" + getCldId() + "' and HoOrgId='" + getHoOrgId() +
                          "' and OrgId = '" + getOrgId() + "' and BomId = '" + BOM_ID + "' and InptItmId = '" +
                          INPT_ITM_ID + "' and InptItmReqDt = '" + INPT_ITM_REQ_DT + "' and OutptItmId = '" +
                          OUTPT_ITM_ID + "' and PlnDocId = '" + PLN_DOC_ID + "' and TxnDocDlvDt = '" + TXN_DOC_DLV_DT +
                          "' and DocIdSrc = '" + DOC_ID_SRC + "'");

        Row[] fltrdRow = getMnfPlnSuppVO().getFilteredRows(rq);

        oracle.jbo.domain.Number totalQty = new oracle.jbo.domain.Number(0);

        //   System.out.println(" Filtered row lenght =  " + fltrdRow.length);
        // System.out.println(" Total order is === " + tot_order_qty);
        if (fltrdRow.length > 0) {
            for (int i = 0; i < fltrdRow.length; i++) {
                oracle.jbo.domain.Number suppQty = (oracle.jbo.domain.Number) fltrdRow[i].getAttribute("InptItmQty");
                //System.out.println(suppQty + "  Each supplier quantity");
                totalQty = totalQty.add(suppQty);
                //  System.out.println(suppQty + " after addition Each supplier quantity");
            }
            // System.out.println(totalQty + " sum of quantity if row exist");
            return totalQty;
        }
        //System.out.println(totalQty + " sum of quantity if no supplier");
        return tot_order_qty;
    }


    private oracle.jbo.domain.Number bestSupp = null;
    private Integer bestLead = 0;
    private oracle.jbo.domain.Number bestPrice = null;

    /**
     *method to get the supplier with minimum lead time for an given Item
     * @return
     */
    protected void getSuppWithMinLead(Object PLN_DOC_ID, Object DOC_ID_SRC, Object OUTPT_ITM_ID, Object TXN_DOC_DLV_DT,
                                      Object BOM_ID, Object INPT_ITM_ID, Object INPT_ITM_REQ_DT) {
        try {
            RowQualifier rq = new RowQualifier(getMnfPlnSuppVO());
            rq.setWhereClause("SlocId = " + getSlocId() + " and CldId='" + getCldId() + "' and HoOrgId='" +
                              getHoOrgId() + "' and OrgId = '" + getOrgId() + "' and BomId = '" + BOM_ID +
                              "' and InptItmId = '" + INPT_ITM_ID + "' and InptItmReqDt = '" + INPT_ITM_REQ_DT +
                              "' and OutptItmId = '" + OUTPT_ITM_ID + "' and PlnDocId = '" + PLN_DOC_ID +
                              "' and TxnDocDlvDt = '" + TXN_DOC_DLV_DT + "' and DocIdSrc = '" + DOC_ID_SRC + "'");
            Row[] fltrdRow = getMnfPlnSuppVO().getFilteredRows(rq);

            System.out.println(fltrdRow.length + " Total no. of supplier");

            boolean flag = true;

            Map<oracle.jbo.domain.Number, oracle.jbo.domain.Number> suppLed =
                new TreeMap<oracle.jbo.domain.Number, oracle.jbo.domain.Number>();

            Map map = new HashMap();

            oracle.jbo.domain.Number count = new oracle.jbo.domain.Number(0);
            // oracle.jbo.domain.Number sum = new oracle.jbo.domain.Number(0);

            for (int l = 0; l < fltrdRow.length; l++) {
                oracle.jbo.domain.Number ledTime;

                ledTime = new oracle.jbo.domain.Number(fltrdRow[l].getAttribute("ItmSuppLeadTm"));
                oracle.jbo.domain.Number price = (oracle.jbo.domain.Number) fltrdRow[l].getAttribute("InptItmPrice");

                oracle.jbo.domain.Number sum = ledTime.add(price);

                if (flag) {
                    count = sum;
                    flag = false;
                }
                if (count.compareTo(sum) == 1) {
                    count = sum;
                }

                suppLed.put((oracle.jbo.domain.Number) fltrdRow[l].getAttribute("EoId"), sum);


                Set<Entry<oracle.jbo.domain.Number, oracle.jbo.domain.Number>> set = suppLed.entrySet();

                List<Entry<oracle.jbo.domain.Number, oracle.jbo.domain.Number>> list =
                    new ArrayList<Entry<oracle.jbo.domain.Number, oracle.jbo.domain.Number>>(set);

                Collections.sort(list, new Comparator<Map.Entry<oracle.jbo.domain.Number, oracle.jbo.domain.Number>>() {
                    public int compare(Map.Entry<oracle.jbo.domain.Number, oracle.jbo.domain.Number> o1,
                                       Map.Entry<oracle.jbo.domain.Number, oracle.jbo.domain.Number> o2) {
                        return (o1.getValue()).compareTo(o2.getValue());
                    }
                });


                for (Map.Entry<oracle.jbo.domain.Number, oracle.jbo.domain.Number> entry : list) {
                    if (entry.getValue().compareTo(count) == 0) {
                        map.put(entry.getKey(), entry.getValue());
                    }
                    System.out.println(entry.getKey() + " = " + entry.getValue());
                }


                //fltrdRow[l].getAttribute("ItmSuppLeadTm");
                //  fltrdRow[l].getAttribute("InptItmPrice");

            }

            System.out.println("Unsorted Map value = " + suppLed);

            System.out.println("Sorted Values " + map);

            Set we = map.keySet();

            System.out.println("Set Value :" + we);
            int size = we.size();
            if (size == 1) {

            }
            Iterator itr = we.iterator();
            //oracle.jbo.domain.Number bestSupp = new oracle.jbo.domain.Number(0);
            //  oracle.jbo.domain.Number bestPrice = new oracle.jbo.domain.Number(0);
            // Integer temp = 0;
            boolean check = true;
            while (itr.hasNext()) {
                oracle.jbo.domain.Number id = (oracle.jbo.domain.Number) itr.next();
                for (int i = 0; i < fltrdRow.length; i++) {
                    if (id.compareTo(fltrdRow[i].getAttribute("EoId")) == 0) {
                        Integer t = (Integer) fltrdRow[i].getAttribute("ItmSuppLeadTm");
                        if (check) {
                            bestLead = t;
                            bestSupp = (oracle.jbo.domain.Number) fltrdRow[i].getAttribute("EoId");
                            bestPrice = (oracle.jbo.domain.Number) fltrdRow[i].getAttribute("InptItmPrice");
                            check = false;
                        }
                        if (bestLead > t) {
                            bestLead = t;
                            bestSupp = (oracle.jbo.domain.Number) fltrdRow[i].getAttribute("EoId");
                            bestPrice = (oracle.jbo.domain.Number) fltrdRow[i].getAttribute("InptItmPrice");
                        }
                    }
                }
            }

            System.out.println("Final Supp : " + bestSupp + " Lead time " + bestLead + " Best Price " + bestPrice);
        } catch (SQLException e) {
        }
    }

    /**
     * Method to remove supplier
     * @param supp_id
     * @param PLN_DOC_ID
     * @param DOC_ID_SRC
     * @param OUTPT_ITM_ID
     * @param TXN_DOC_DLV_DT
     * @param BOM_ID
     * @param INPT_ITM_ID
     * @param INPT_ITM_REQ_DT
     */
    public void removeSupplierPerItem(oracle.jbo.domain.Number supp_id, String PLN_DOC_ID, String DOC_ID_SRC,
                                      String OUTPT_ITM_ID, Timestamp TXN_DOC_DLV_DT, String BOM_ID, String INPT_ITM_ID,
                                      Timestamp INPT_ITM_REQ_DT) {

        Object slocId = getSlocId();
        Object cldId = getCldId();
        Object hoId = getHoOrgId();
        Object orgId = getOrgId();
        Object bomId = BOM_ID;
        Object inputItm = INPT_ITM_ID;
        Object outPtItm = OUTPT_ITM_ID;
        Object plnId = PLN_DOC_ID;
        Object srcId = DOC_ID_SRC;
        Object dlvDt = TXN_DOC_DLV_DT;
        Object itmReqDt = INPT_ITM_REQ_DT;
        Object supId = supp_id;


        RowSetIterator itr = getMnfPlnSuppVO().createRowSetIterator(null);
        Row r = null;
        while (itr.hasNext()) {
            r = itr.next();
            if (slocId.equals(r.getAttribute("SlocId")) && cldId.equals(r.getAttribute("CldId")) &&
                r.getAttribute("HoOrgId").equals(hoId) && r.getAttribute("OrgId").equals(orgId) &&
                r.getAttribute("BomId").equals(bomId) && r.getAttribute("InptItmId").equals(inputItm) &&
                r.getAttribute("InptItmReqDt").equals(itmReqDt) && r.getAttribute("OutptItmId").equals(outPtItm) &&
                r.getAttribute("PlnDocId").equals(plnId) && r.getAttribute("TxnDocDlvDt").equals(dlvDt) &&
                r.getAttribute("DocIdSrc").equals(srcId) && r.getAttribute("EoId").equals(supId))

            {
                r.remove();
            }


        }
        itr.closeRowSetIterator();
        setFilterForSuppl(INPT_ITM_ID, BOM_ID, TXN_DOC_DLV_DT, DOC_ID_SRC, INPT_ITM_REQ_DT, OUTPT_ITM_ID, PLN_DOC_ID);
        getLISTSupplierFullForRMDetail().executeQuery();
        getDBTransaction().postChanges();
    }

    public void refreshRmDetail() {
        setParamForLISTSupplierForRMDetail(null, null, null, null, null, null, null);
        setParamForLISTSupplierFullForRMDetail(null, null, null, null, null, null);
    }


    /**method to deselect the all the selected supplier in the complete supplier list
     *
     */
    public void diselectAllFullSupplierList() {
        //System.out.println(" Inside amisndf");
        RowSetIterator fullSup = getLISTSupplierFullForRMDetail().createRowSetIterator(null);
        Row r = null;
        while (fullSup.hasNext()) {
            r = fullSup.next();
            r.setAttribute("SelectToAdd", "false");
        }
        fullSup.closeRowSetIterator();
    }

    public Integer chckSelectedSupp() {
        RowSetIterator fullSup = getLISTSupplierFullForRMDetail().createRowSetIterator(null);
        Row r = null;
        while (fullSup.hasNext()) {
            r = fullSup.next();
            if (r.getAttribute("SelectToAdd") != null &&
                "true".equalsIgnoreCase(r.getAttribute("SelectToAdd").toString())) {
                return 1;
            }

        }
        fullSup.closeRowSetIterator();

        return 0;
    }

    /**
     *method to remove supplier
     * @param supp_id
     */
    public void removeSupplier(oracle.jbo.domain.Number supp_id, String PLN_DOC_ID, String DOC_ID_SRC,
                               String OUTPT_ITM_ID, Timestamp TXN_DOC_DLV_DT, String BOM_ID, String INPT_ITM_ID,
                               Timestamp INPT_ITM_REQ_DT) {
        removeSupplier(supp_id, PLN_DOC_ID, DOC_ID_SRC, OUTPT_ITM_ID, TXN_DOC_DLV_DT, BOM_ID, INPT_ITM_ID,
                       INPT_ITM_REQ_DT);
    }

    /**
     *Method to compare supplier order quantity and order quantity
     * @param inItm_id
     * @param bomId
     * @param dlvDt
     * @param srcId
     * @param itmReqDt
     * @param outItmId
     * @param plnDocId
     * @param orderQty
     * @return
     */
    public Integer chckSupplierQuantity(String inItm_id, String bomId, Timestamp dlvDt, String srcId,
                                        Timestamp itmReqDt, String outItmId, String plnDocId,
                                        oracle.jbo.domain.Number orderQty) {

        Object slocId = getSlocId();
        Object cldId = getCldId();
        Object hoId = getHoOrgId();
        Object orgId = getOrgId();
        Object bom_Id = bomId;
        Object inputItm = inItm_id;
        Object outPtItm = outItmId;
        Object plnId = plnDocId;
        Object src_Id = srcId;
        Object dlv_Dt = dlvDt;
        Object itmReq_Dt = itmReqDt;

        oracle.jbo.domain.Number totalOrder = new oracle.jbo.domain.Number(0);
        RowSetIterator itr = getMnfPlnSuppVO().createRowSetIterator(null);
        Row r = null;
        while (itr.hasNext()) {
            r = itr.next();
            if (slocId.equals(r.getAttribute("SlocId")) && cldId.equals(r.getAttribute("CldId")) &&
                r.getAttribute("HoOrgId").equals(hoId) && r.getAttribute("OrgId").equals(orgId) &&
                r.getAttribute("BomId").equals(bom_Id) && r.getAttribute("InptItmId").equals(inputItm) &&
                r.getAttribute("InptItmReqDt").equals(itmReq_Dt) && r.getAttribute("OutptItmId").equals(outPtItm) &&
                r.getAttribute("PlnDocId").equals(plnId) && r.getAttribute("TxnDocDlvDt").equals(dlv_Dt) &&
                r.getAttribute("DocIdSrc").equals(src_Id))

            {
                totalOrder.add((oracle.jbo.domain.Number) r.getAttribute("InptItmQty"));
            }
        }

        itr.closeRowSetIterator();

        System.out.println(totalOrder + " Total Order for all supplier");
        System.out.println(orderQty + " Required quantity to order");
        if (orderQty.compareTo(totalOrder) == 0) {
            return 1;
        }

        return 0;
    }

    /**
     * ##################################################################################################################################################
     * SUPPLIER
     */


    public void setGlobalSupplierParameter() {
        setParamInVIEWSupplier(null, null, null, null, null, null);
        // setParamInVIEWSupplierRawPerProduct(null, null, null, null, null, null);
        // setParamInVIEWSupplierRawMate(null);
    }

    protected void setParamInVIEWSupplier(String input_itm_id, String pln_doc_Id, String src_doc_id, String output_id,
                                          Timestamp dlv_dt, oracle.jbo.domain.Number eo_id) {

        getVIEWSupplier().setNamedWhereClauseParam("BindCldId", getCldId());
        getVIEWSupplier().setNamedWhereClauseParam("BindSlocId", getSlocId());
        getVIEWSupplier().setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        getVIEWSupplier().setNamedWhereClauseParam("BindOrgId", getOrgId());
        getVIEWSupplier().setNamedWhereClauseParam("BindItmId", input_itm_id);
        getVIEWSupplier().setNamedWhereClauseParam("BindOutItmId", output_id);
        getVIEWSupplier().setNamedWhereClauseParam("BindPlnId", pln_doc_Id);
        getVIEWSupplier().setNamedWhereClauseParam("BindSrcId", src_doc_id);
        getVIEWSupplier().setNamedWhereClauseParam("BindDlvDt", dlv_dt);
        getVIEWSupplier().setNamedWhereClauseParam("BindSuppIdm", eo_id);


        getVIEWSupplier().executeQuery();
    }

    protected void setParamInVIEWSupplierRawPerProduct(String input_itm_id, String pln_doc_Id, String src_doc_id,
                                                       String output_id, Timestamp dlv_dt,
                                                       oracle.jbo.domain.Number supp_id) {
        getVIEWSupplierRawPerProduct().setNamedWhereClauseParam("BindCldId", getCldId());
        getVIEWSupplierRawPerProduct().setNamedWhereClauseParam("BindSlocId", getSlocId());
        getVIEWSupplierRawPerProduct().setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        getVIEWSupplierRawPerProduct().setNamedWhereClauseParam("BindOrgId", getOrgId());
        getVIEWSupplierRawPerProduct().setNamedWhereClauseParam("BindInptItmId", input_itm_id);
        getVIEWSupplierRawPerProduct().setNamedWhereClauseParam("BindOutItmId", output_id);
        getVIEWSupplierRawPerProduct().setNamedWhereClauseParam("BindPlnId", pln_doc_Id);
        getVIEWSupplierRawPerProduct().setNamedWhereClauseParam("BindSrcId", src_doc_id);
        getVIEWSupplierRawPerProduct().setNamedWhereClauseParam("BindDlvDt", dlv_dt);
        getVIEWSupplierRawPerProduct().setNamedWhereClauseParam("BindSuppId", supp_id);


        getVIEWSupplierRawPerProduct().executeQuery();
    }

    protected void setParamInVIEWSupplierRawMate(oracle.jbo.domain.Number supp_id) {
        getVIEWSupplierRawMate().setNamedWhereClauseParam("BindCldId", getCldId());
        getVIEWSupplierRawMate().setNamedWhereClauseParam("BindSlocId", getSlocId());
        getVIEWSupplierRawMate().setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        getVIEWSupplierRawMate().setNamedWhereClauseParam("BindOrgId", getOrgId());
        getVIEWSupplierRawMate().setNamedWhereClauseParam("BindEoId", supp_id);
        getVIEWSupplierRawMate().executeQuery();
    }

    public void filterSupplierRawForPrd(String input_itm_id, String pln_doc_Id, String src_doc_id, String output_id,
                                        Timestamp dlv_dt, oracle.jbo.domain.Number supp_id) {
        setParamInVIEWSupplierRawPerProduct(input_itm_id, pln_doc_Id, src_doc_id, output_id, dlv_dt, supp_id);

    }

    public void filterSupplierRawMate(String input_itm_id, String pln_doc_Id, String src_doc_id, String output_id,
                                      Timestamp dlv_dt, oracle.jbo.domain.Number supp_id) {
        setParamInVIEWSupplierRawMate(supp_id);
    }


    /**
     * ##################################################################################################################################################
     * CUSTOMER
     */

    public void setGlobalCustomerParameter() {

        setParamInDualCustomer();
        setParamInMainCustomerList();
        setParamInLISTEntity(68, null);
        setParamInDualCustomerEvolution();


    }

    protected void setGlobalparamInLISTCustomer(String PlanId, oracle.jbo.domain.Number cust_id) {
        getLISTCustomer().setNamedWhereClauseParam("BindCldId", getCldId());
        getLISTCustomer().setNamedWhereClauseParam("BindSlocId", getSlocId());
        getLISTCustomer().setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        getLISTCustomer().setNamedWhereClauseParam("BindOrgId", getOrgId());
        getLISTCustomer().setNamedWhereClauseParam("BindPlanDocId", PlanId);
        getLISTCustomer().setNamedWhereClauseParam("BindEoId", cust_id);


        getLISTCustomer().executeQuery();
    }

    protected void setParamInDualCustomerEvolution() {
        getDualCustomerEvolution().setNamedWhereClauseParam("BindCldId", getCldId());
        getDualCustomerEvolution().setNamedWhereClauseParam("BindSlocId", getSlocId());
        getDualCustomerEvolution().setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        getDualCustomerEvolution().setNamedWhereClauseParam("BindOrgId", getOrgId());
        //getDualCustomerEvolution().setNamedWhereClauseParam("BindEoType", eo_type);
        getDualCustomerEvolution().executeQuery();
    }

    protected void setParamInLISTEntity(Integer eo_type, oracle.jbo.domain.Number eo_id) {
        getLISTEntity().setNamedWhereClauseParam("BindCldId", getCldId());
        getLISTEntity().setNamedWhereClauseParam("BindSlocId", getSlocId());
        getLISTEntity().setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        getLISTEntity().setNamedWhereClauseParam("BindEoId", eo_id);
        getLISTEntity().setNamedWhereClauseParam("BindEoType", eo_type);
        getLISTEntity().executeQuery();
    }

    public void setProductDetailsBindPerCustomer(oracle.jbo.domain.Number eo_id, String prd_id) {

        setParamInProductDetailsCustOver(eo_id, prd_id, getCldId(), getSlocId(), getHoOrgId(), getOrgId());
    }

    public void ListProductOnCustomerSelection(oracle.jbo.domain.Number eo_id) {
        setParamInProductCustomerOverView(eo_id, getCldId(), getSlocId(), getHoOrgId(), getOrgId());
        resetPrdDetail();
    }

    protected void setParamInProductCustomerOverView(oracle.jbo.domain.Number eo_id, Object cld_id, Object sloc_id,
                                                     Object ho_org_id, Object org_id) {
        getLISTProductCustomerOverView().setNamedWhereClauseParam("BindCldId", cld_id);
        getLISTProductCustomerOverView().setNamedWhereClauseParam("BindSlocId", sloc_id);
        getLISTProductCustomerOverView().setNamedWhereClauseParam("BindHoOrgId", ho_org_id);
        getLISTProductCustomerOverView().setNamedWhereClauseParam("BindOrgId", org_id);
        getLISTProductCustomerOverView().setNamedWhereClauseParam("BindEoId", eo_id);
        getLISTProductCustomerOverView().executeQuery();
    }

    protected void setParamInProductDetailsCustOver(oracle.jbo.domain.Number eo_id, String prd_id, Object cld_id,
                                                    Object sloc_id, Object ho_org_id, Object org_id) {
        getLISTProductDetailsCustOver().setNamedWhereClauseParam("BindCldId", cld_id);
        getLISTProductDetailsCustOver().setNamedWhereClauseParam("BindSlocId", sloc_id);
        getLISTProductDetailsCustOver().setNamedWhereClauseParam("BindHoOrgId", ho_org_id);
        getLISTProductDetailsCustOver().setNamedWhereClauseParam("BindOrgId", org_id);
        getLISTProductDetailsCustOver().setNamedWhereClauseParam("BindEoId", eo_id);
        getLISTProductDetailsCustOver().setNamedWhereClauseParam("BindItmId", prd_id);
        getLISTProductDetailsCustOver().executeQuery();
    }

    protected void resetPrdDetail() {
        getLISTProductDetailsCustOver().setNamedWhereClauseParam("BindCldId", null);
        getLISTProductDetailsCustOver().setNamedWhereClauseParam("BindSlocId", null);
        getLISTProductDetailsCustOver().setNamedWhereClauseParam("BindHoOrgId", null);
        getLISTProductDetailsCustOver().setNamedWhereClauseParam("BindOrgId", null);
        getLISTProductDetailsCustOver().setNamedWhereClauseParam("BindEoId", null);
        getLISTProductDetailsCustOver().setNamedWhereClauseParam("BindItmId", null);
        getLISTProductDetailsCustOver().executeQuery();
    }

    public Integer updateCustomer() {
        Row r = getDualCustomerEvolution().getCurrentRow();
        if (r.getAttribute("EvaluationParameters") != null && r.getAttribute("PlanId") != null) {
            updateCustomerProfile(getCldId(), getSlocId(), getOrgId(), r.getAttribute("PlanId").toString(),
                                  (Integer) r.getAttribute("EvaluationParameters"));
            return 0;
        }

        return 1;
    }

    //Method to search the customer in customer overview page
    public void filterCustomerPerPlanId() {
        Row r = getDualCustomerEvolution().getCurrentRow();

        getLISTCustomer().setNamedWhereClauseParam("BindCldId", getCldId());
        getLISTCustomer().setNamedWhereClauseParam("BindSlocId", getSlocId());
        getLISTCustomer().setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        getLISTCustomer().setNamedWhereClauseParam("BindOrgId", getOrgId());
        getLISTCustomer().setNamedWhereClauseParam("BindPlanDocId", r.getAttribute("PlanId"));
        getLISTCustomer().setNamedWhereClauseParam("BindEoId", r.getAttribute("CustId"));

        getLISTCustomer().executeQuery();

    }

    //Method to reset the search in customer overview page
    public void resetFilterCustomerPerPlan() {

        getDualCustomerEvolution().executeQuery();
        getLISTCustomer().setNamedWhereClauseParam("BindCldId", null);
        getLISTCustomer().setNamedWhereClauseParam("BindSlocId", null);
        getLISTCustomer().setNamedWhereClauseParam("BindHoOrgId", null);
        getLISTCustomer().setNamedWhereClauseParam("BindOrgId", null);
        getLISTCustomer().setNamedWhereClauseParam("BindPlanDocId", null);
        getLISTCustomer().setNamedWhereClauseParam("BindEoId", null);

        getLISTCustomer().executeQuery();
        setParamInProductCustomerOverView(null, null, null, null, null);
        setParamInProductDetailsCustOver(null, null, null, null, null, null);
    }


    /**
     * ##################################################################################################################################################
     * BILL OF MATERIAL
     */


    public void setGlobalBomParameter() {
        setParamInViewBom();
        setparamInPrdListForBom();
        setparamInLISTBom();
    }


    protected void setparamInLISTBom() {
        getLISTBom().setNamedWhereClauseParam("BindCldId", getCldId());
        getLISTBom().setNamedWhereClauseParam("BindSlocId", getSlocId());
        getLISTBom().setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        getLISTBom().setNamedWhereClauseParam("BindOrgId", getOrgId());
        getLISTBom().executeQuery();

    }

    protected void setParamInLISTBomOutput(Object bomId) {
        getLISTBomOutput().setNamedWhereClauseParam("BindCldId", getCldId());
        getLISTBomOutput().setNamedWhereClauseParam("BindSlocId", getSlocId());
        getLISTBomOutput().setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        getLISTBomOutput().setNamedWhereClauseParam("BindOrgId", getOrgId());
        getLISTBomOutput().setNamedWhereClauseParam("BindBomDocId", bomId);
        getLISTBomOutput().executeQuery();
    }

    protected void setparamLISTBomInputItm(Object bomId) {
        getLISTBomInputItm().setNamedWhereClauseParam("BindCldId", getCldId());
        getLISTBomInputItm().setNamedWhereClauseParam("BindSlocId", getSlocId());
        getLISTBomInputItm().setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        getLISTBomInputItm().setNamedWhereClauseParam("BindBomDocId", bomId);
        getLISTBomInputItm().executeQuery();
    }

    protected void setParamInLISTBomAllProductVo(Object prdId) {
        getLISTBomAllProductVo().setNamedWhereClauseParam("BindCldId", getCldId());
        getLISTBomAllProductVo().setNamedWhereClauseParam("BindSlocId", getSlocId());
        getLISTBomAllProductVo().setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        getLISTBomAllProductVo().setNamedWhereClauseParam("BindOrgId", getOrgId());
        getLISTBomAllProductVo().setNamedWhereClauseParam("BindOutptItmId", prdId);
        getLISTBomAllProductVo().executeQuery();
    }

    public void selectBom(String bomId) {
        setParamInLISTBomOutput(bomId);
        setparamLISTBomInputItm(bomId);
    }

    public void selectproduct(String prdId) {
        setParamInLISTBomAllProductVo(prdId);
    }

    /**
     * ##################################################################################################################################################
     * PAGEFLOW PARAMETERS
     */


    /**getting page flow scope parameter methods.*/

    public Integer getSlocId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC }").toString());
    }

    public String getCldId() {
        return EbizParams.GLBL_APP_CLD_ID();
        // return (resolvE2("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
    }

    public String getOrgId() {
        return EbizParams.GLBL_APP_USR_ORG();
        // return (resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
    }

    public String getHoOrgId() {
        return EbizParams.GLBL_HO_ORG_ID();
        //return (resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString());
    }

    public Integer getUsrId() {
        return EbizParams.GLBL_APP_USR();
        // return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
    }

    public String getPlnDocId() {
        return (getTxnId(getCldId(), getSlocId(), getOrgId(), getUsrId(), 26501));
    }

    public Timestamp getCurrentDate() {
        //(Timestamp)System.currentTimeMillis();
        return StaticValue.getTruncatedCurrDt();
        //return (Timestamp) System.currentTimeMillis();
    }

    public String getSelInppItmId() {
        return (resolvEl("#{pageFlowScope.input_itm_id}") != null ?
                resolvEl("#{pageFlowScope.input_itm_id}").toString() : null);
    }

    public String getSelOutItmId() {
        return (resolvEl("#{pageFlowScope.OUTPT_ITM_ID}") == null ? null :
                resolvEl("#{pageFlowScope.OUTPT_ITM_ID}").toString());
    }

    public String getSelPlnId() {
        return (resolvEl("#{pageFlowScope.PLN_ID}") == null ? null : resolvEl("#{pageFlowScope.PLN_ID}").toString());
    }

    public String getSelSrcId() {
        return (resolvEl("#{pageFlowScope.SRC_ID}") == null ? null : resolvEl("#{pageFlowScope.SRC_ID}").toString());
    }

    public oracle.jbo.domain.Timestamp getSelDlvDt() {
        return (resolvEl("#{pageFlowScope.DLV_DT}") == null ? null :
                (oracle.jbo.domain.Timestamp) resolvEl("#{pageFlowScope.DLV_DT}"));
    }


    public Object resolvEl(String data) {
        ADFContext adfCtx = ADFContext.getCurrent();
        ELContext elContext = adfCtx.getELContext();
        ValueExpression valueExp = adfCtx.getExpressionFactory().createValueExpression(elContext, data, Object.class);
        Object Message = valueExp.getValue(elContext) == null ? null : valueExp.getValue(elContext);

        return Message;
    }

    public Object resolvE2(String data) {
        ADFContext adfCtx = ADFContext.getCurrent();
        ELContext elContext = adfCtx.getELContext();
        ValueExpression valueExp = adfCtx.getExpressionFactory().createValueExpression(elContext, data, Object.class);
        Object Message = valueExp.getValue(elContext);
        return Message;
    }

    /**
     * ##################################################################################################################################################
     * SQL FUNCTION CALL
     */


    private static int NUMBER = Types.INTEGER;
    private static int NUMERIC = Types.NUMERIC;
    private static int VARCHAR = Types.VARCHAR;
    private static int STRING = Types.VARCHAR;

    /** helper method for executing DB function
     * @param sqlReturnType return type of database function
     * @param stmt statement of executing function in database query
     * @param bindVars input and out parameter of database function.
     * @return
     */
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.executeUpdate();
            //System.out.println("st.getObject(1) " + st.getObject(1));
            return st.getObject(1);
        } catch (SQLException e) {
            e.printStackTrace();
            int end = e.getMessage().indexOf("\n");
            throw new JboException(e.getMessage().substring(11, end));

        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    throw new JboException(e.getMessage());
                }
            }
        }
    }

    /**Method to get the Plan doc Id
     * @param userid user id
     * @param OrgId organisation id
     * @param slocid server location id
     * @param docId document id ()
     * @return next Doc id
     */
    public String getTxnId(String cldId, Integer slocid, String OrgId, Integer userid, Integer docId) {
        String txnId = null;
        Object res = null;
        //        return (String) callStoredFunction(STRING, "app.get_txn_id(?,?,?,?,?,?)", new Object[] {
        //                                           cldId, slocid, OrgId, userid, docId, 0
        //    });
        try {
            res = ADFModelUtils.callFunction(this, new StringBuilder("app.get_txn_id(?,?,?,?,?,?)"), new Object[] {
                                             cldId, slocid, OrgId, userid, docId, 0
            }, Types.VARCHAR).toString();

        } catch (Exception e) {
            e.printStackTrace();
        }
        txnId = res == null ? null : res.toString();
        return txnId;
    }

    /**
     * Method to insert plan in the planning table
     *fn_mnf_ins_src_pln_txn(
        p_cld_id     VARCHAR2,
        p_sloc_id    NUMBER,
	p_ho_org_id varchar2,
        p_org_id     VARCHAR2,
        p_pln_doc_id VARCHAR2,
        p_pln_doc_dt DATE,
        p_fy_id      NUMBER,
        p_itmid      VARCHAR2 )
     *
     */
    public String insertSoInTxn(String cldId, Integer slocId, String hoOrgId, String orgId, String doc_Id,
                                Timestamp pln_doc_dt, Number fy_id, String itm_id) {
        String res = null;
        Object o = null;


        //        return (String) callStoredFunction(STRING, "FN_MNF_INS_SRC_PLN_TXN(?,?,?,?,?,?,?,?)", new Object[] {
        //                                           cldId, slocId, hoOrgId, orgId, doc_Id, pln_doc_dt, fy_id, itm_id
        //    });
        try {
            o = ADFModelUtils.callFunction(this, new StringBuilder("FN_MNF_INS_SRC_PLN_TXN(?,?,?,?,?,?,?,?)"), new Object[] {
                                           cldId, slocId, hoOrgId, orgId, doc_Id, pln_doc_dt, fy_id, itm_id
            }, Types.VARCHAR);
        } catch (Exception e) {
            e.printStackTrace();

        }
        res = o == null ? null : o.toString();
        return res;
    }

    /**
     * create or replace FUNCTION FN_MNF_INS_SRC_PLN_prd(
        P_CLD_ID      VARCHAR2,
        P_SLOC_ID     NUMBER,
        P_ORG_ID      VARCHAR2,
        p_pln_doc_id VARCHAR2
        )
     */
    

    public String insertPrdInPrd(String cldId, Integer slocid, String orgId, String pln_doc_Id, String src_doc_id,
                                 String itm_id, Timestamp dlv_dt) {

        //        return (String) callStoredFunction(STRING, "FN_MNF_INS_SRC_PLN_prd(?,?,?,?,?,?,?)", new Object[] {
        //                                           cldId, slocid, orgId, pln_doc_Id, src_doc_id, itm_id, dlv_dt
        //    });
        String res = null;
        Object o = null;
        try {
            o = ADFModelUtils.callFunction(this, new StringBuilder("FN_MNF_INS_SRC_PLN_prd(?,?,?,?,?,?,?)"), new Object[] {
                                           cldId, slocid, orgId, pln_doc_Id, src_doc_id, itm_id, dlv_dt
            }, Types.VARCHAR);
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        res = o == null ? null : o.toString();
        return res;
    }

    /**
     * fn_mnf_ins_src_pln_bom(
		p_cld_id         VARCHAR2,
		p_sloc_id        NUMBER,
		p_org_id         VARCHAR2,
		p_pln_doc_id     VARCHAR2 ,
		p_doc_id_src     VARCHAR2,
		p_outpt_itm_id   VARCHAR2,
		p_txn_doc_dlv_dt DATE)
     */

    public String insertBom(String cldId, Integer slocId, String orgId, String pln_doc_Id, String src_doc_id,
                            String product_id, oracle.jbo.domain.Timestamp dlv_dt) {


        //        return (String) callStoredFunction(STRING, "FN_MNF_INS_SRC_PLN_bom(?,?,?,?,?,?,?)", new Object[] {
        //                                           cldId, slocId, orgId, pln_doc_Id, src_doc_id, product_id, dlv_dt
        //    });
        String res = null;
        Object o = null;
        try {
            o = ADFModelUtils.callFunction(this, new StringBuilder("FN_MNF_INS_SRC_PLN_bom(?,?,?,?,?,?,?)"), new Object[] {
                                           cldId, slocId, orgId, pln_doc_Id, src_doc_id, product_id, dlv_dt
            }, Types.VARCHAR);
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        res = o == null ? null : o.toString();
        return res;
    }

    /**
     *  fn_mnf_pln_ins_inpt_itm(
		p_cld_id         VARCHAR2,
		p_sloc_id        NUMBER,
		p_ho_org_id      VARCHAR2,
		p_org_id         VARCHAR2,
		p_pln_doc_id     VARCHAR2,
		p_doc_id_src     VARCHAR2,
		p_outpt_itm_id   VARCHAR2,
		p_txn_doc_dlv_dt DATE)
     */

    public String insertRawMaterial(String cldId, Integer slocId, String hoOrgId, String orgId, String pln_doc_Id,
                                    String src_doc_id, String product_id, oracle.jbo.domain.Timestamp dlv_dt) {


        //        return (String) callStoredFunction(STRING, "fn_mnf_pln_ins_inpt_itm(?,?,?,?,?,?,?,?)", new Object[] {
        //                                           cldId, slocId, hoOrgId, orgId, pln_doc_Id, src_doc_id, product_id, dlv_dt
        //    });

        String res = null;
        Object o = null;
        try {
            o = ADFModelUtils.callFunction(this, new StringBuilder("fn_mnf_pln_ins_inpt_itm(?,?,?,?,?,?,?,?)"), new Object[] {
                                           cldId, slocId, hoOrgId, orgId, pln_doc_Id, src_doc_id, product_id, dlv_dt
            }, Types.VARCHAR);
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        res = o == null ? null : o.toString();
        return res;
    }


    /**
     * get_org_fy_id(
        p_cldid varchar2,
        p_org_id varchar2,
        p_txn_dt date,
        p_fy_type varchar2 default 'FY') return number is
          v_fyid  number(5);
     */

    public Integer getFynIdFrmFn() {
        //        return (Integer) callStoredFunction(NUMBER, "app.get_org_fy_id(?,?,?,?)", new Object[] {
        //                                            getCldId(), getOrgId(), getCurrentDate(), "FY"
        //    });
        Integer res = null;
        Object o = null;
        try {
            o = ADFModelUtils.callFunction(this, new StringBuilder("app.get_org_fy_id(?,?,?,?)"), new Object[] {
                                           getCldId(), getOrgId(), getCurrentDate(), "FY"
            }, Types.INTEGER);
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        res = o == null ? null : (Integer) o;
        return res;
    }

    /** fn_upd_txn_src_pln_qty(
                    p_cld_id  VARCHAR2,
                    p_sloc_id NUMBER,
                    p_org_id  VARCHAR2,
                    p_itm_id  VARCHAR2,
                    P_dlv_DT  DATE,
                    p_doc_id_src   VARCHAR2,
                    p_pln_doc_id varchar2)
     */
    public String updateProductInTXN(String cldId, Integer slocId, String orgId, String prd_id, Timestamp dlv_dt,
                                     String src_doc_id, String pln_doc_Id) {


        //        return (String) callStoredFunction(STRING, "fn_upd_txn_src_pln_qty(?,?,?,?,?,?,?)", new Object[] {
        //                                           cldId, slocId, orgId, prd_id, dlv_dt, src_doc_id, pln_doc_Id
        //    });
        String res = null;
        Object o = null;
        try {
            o = ADFModelUtils.callFunction(this, new StringBuilder("fn_upd_txn_src_pln_qty(?,?,?,?,?,?,?)"), new Object[] {
                                           cldId, slocId, orgId, prd_id, dlv_dt, src_doc_id, pln_doc_Id
            }, Types.VARCHAR);
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        res = o == null ? null : o.toString();
        return res;
    }

    /**
     * fn_mnf_pln_ins_inpt_supp(
		p_cld_id         VARCHAR2,
		p_sloc_id        NUMBER,
		p_ho_org_id      VARCHAR2,
		p_org_id         VARCHAR2,
		p_pln_doc_id     VARCHAR2,
		p_doc_id_src     VARCHAR2,
		p_outpt_itm_id   VARCHAR2,
		p_txn_doc_dlv_dt DATE)
     *
     */
    public String insertSupplier(String cldId, Integer slocId, String hoOrgId, String orgId, String pln_doc_Id,
                                 String src_doc_id, String prd_id, Timestamp dlv_dt) {


        //        return (String) callStoredFunction(STRING, "fn_mnf_pln_ins_inpt_supp(?,?,?,?,?,?,?,?)", new Object[] {
        //                                           cldId, slocId, hoOrgId, orgId, pln_doc_Id, src_doc_id, prd_id, dlv_dt
        //    });
        String res = null;
        Object o = null;
        try {
            o = ADFModelUtils.callFunction(this, new StringBuilder("fn_mnf_pln_ins_inpt_supp(?,?,?,?,?,?,?,?)"), new Object[] {
                                           cldId, slocId, hoOrgId, orgId, pln_doc_Id, src_doc_id, prd_id, dlv_dt
            }, Types.VARCHAR);
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        res = o == null ? null : o.toString();
        return res;
    }


    /**
     * fn_mnf_pln_ins_inpt_cust(
    p_cld_id         VARCHAR2,
    p_sloc_id        NUMBER,
    p_ho_org_id      VARCHAR2,
    p_org_id         VARCHAR2,
    p_pln_doc_id     VARCHAR2,
    p_doc_id_src     VARCHAR2,
    p_outpt_itm_id   VARCHAR2,
    p_txn_doc_dlv_dt DATE)
     *
     */
    public String insertCustomer(String cldId, Integer slocId, String hoOrgId, String orgId, String pln_doc_Id,
                                 String src_doc_id, String prd_id, Timestamp dlv_dt) {
        String res = null;
        Object r = null;
        //
        //        return (String) callStoredFunction(STRING, "fn_mnf_pln_ins_inpt_cust(?,?,?,?,?,?,?,?)", new Object[] {
        //                                           cldId, slocId, hoOrgId, orgId, pln_doc_Id, src_doc_id, prd_id, dlv_dt
        //    });
        try {
            r = ADFModelUtils.callFunction(this, new StringBuilder("fn_mnf_pln_ins_inpt_cust(?,?,?,?,?,?,?,?)"), new Object[] {
                                           cldId, slocId, hoOrgId, orgId, pln_doc_Id, src_doc_id, prd_id, dlv_dt
            }, Types.VARCHAR);

        } catch (Exception e) {
            e.printStackTrace();
        }
        res = r == null ? null : r.toString();
        return res;

    }


    /**
     * Method to get the image path of an Item
     *
     *
     */
    public String getImagePathFromServer(Integer sloc_id) {

        Object path;
        try {
            path = callStoredFunction(VARCHAR, "APP.FN_GET_APP_IMG_PATH(?)", new Object[] { sloc_id });


            // System.out.println(" path in am " + path);
            if (path != null)
                return path.toString();

        } catch (Exception e) {
            e.printStackTrace();

        }

        return null;
    }

    /**
     *
     * fn_mnf_pln_del_inpt_src(
        p_cld_id         VARCHAR2,
        p_sloc_id        NUMBER,
        p_ho_org_id      VARCHAR2,
        p_org_id         VARCHAR2,fn_mnf_pln_upd_stat(
        p_cld_id         VARCHAR2,
        p_sloc_id        NUMBER,
        p_ho_org_id      VARCHAR2,
        p_org_id         VARCHAR2,
        p_pln_doc_id     VARCHAR2)
        p_pln_doc_id     VARCHAR2)
     */

    public String removeUnplannedData(String cldId, Integer slocId, String hoOrgId, String orgId, String pln_doc_Id) {
        //        return (String) callStoredFunction(STRING, "fn_mnf_pln_del_inpt_src(?,?,?,?,?)", new Object[] {
        //                                           cldId, slocId, hoOrgId, orgId, pln_doc_Id
        //    });
        String res = null;
        Object r = null;
        try {
            r = ADFModelUtils.callFunction(this, new StringBuilder("fn_mnf_pln_del_inpt_src(?,?,?,?,?)"), new Object[] {
                                           cldId, slocId, hoOrgId, orgId, pln_doc_Id
            }, Types.VARCHAR);

        } catch (Exception e) {
            e.printStackTrace();
        }
        res = r == null ? null : r.toString();
        return res;
    }

    /**
     * fn_mnf_pln_upd_cust_priority(
            p_cld_id         VARCHAR2,
            p_sloc_id        NUMBER,
            p_org_id         VARCHAR2,
            p_pln_doc_id     VARCHAR2,
            p_priority_type  number
     */

    public String updateCustomerProfile(String cldId, Integer slocId, String orgId, String pln_doc_Id,
                                        Integer priorityNo) {
        //        return (String) callStoredFunction(STRING, "fn_mnf_pln_upd_cust_priority(?,?,?,?,?)", new Object[] {



        //                                           cldId, slocId, orgId, pln_doc_Id, priorityNo
        //    });
        String res = null;
        Object r = null;
        try {
            r = ADFModelUtils.callFunction(this, new StringBuilder("fn_mnf_pln_upd_cust_priority(?,?,?,?,?)"), new Object[] {
                                           cldId, slocId, orgId, pln_doc_Id, priorityNo
            }, Types.VARCHAR);

        } catch (Exception e) {
            e.printStackTrace();
        }
        res = r == null ? null : r.toString();
        return res;
    }


    /**calling db function to freeze the plan
     * fn_mnf_pln_upd_avl_qty (
   p_cld_id            VARCHAR2,
   p_sloc_id           NUMBER,
   p_ho_org_id         VARCHAR2,
   p_org_id            VARCHAR2,
   p_pln_doc_id        VARCHAR2,
   p_doc_id_src        VARCHAR2,
   p_outpt_itm_id      VARCHAR2,
   p_txn_doc_dlv_dt    DATE)
     */

    public Integer freezePlan(String cldId, Integer slocId, String hoOrgId, String orgId, String plnDocId,
                              String srcDocId, String outItmId, Timestamp dlvDt) {
        //        return (Integer) callStoredFunction(NUMBER, "fn_mnf_pln_upd_avl_qty(?,?,?,?,?,?,?,?)", new Object[] {
        //                                            cldId, slocId, hoOrgId, orgId, plnDocId, srcDocId, outItmId, dlvDt
        //    });
        Integer res = null;
        Object r = null;
        try {
            r = ADFModelUtils.callFunction(this, new StringBuilder("fn_mnf_pln_upd_avl_qty(?,?,?,?,?,?,?,?)"), new Object[] {
                                           cldId, slocId, hoOrgId, orgId, plnDocId, srcDocId, outItmId, dlvDt
            }, Types.INTEGER);

        } catch (Exception e) {
            e.printStackTrace();
        }
        res = r == null ? null : (Integer) r;
        return res;
    }

    /**
     * calling db function to release the plan
     * @param cldId
     * @param slocId
     * @param hoOrgId
     * @param orgId
     * @param plnDocId
     * @param srcDocId
     * @param outItmId
     * @param dlvDt
     * @return
     */
    public Integer releasePlan(String cldId, Integer slocId, String hoOrgId, String orgId, String plnDocId,
                               String srcDocId, String outItmId, Timestamp dlvDt) {
        //        return (Integer) callStoredFunction(NUMBER, "fn_mnf_pln_upd_avl_qty(?,?,?,?,?,?,?,?)", new Object[] {
        //                                            cldId, slocId, hoOrgId, orgId, plnDocId, srcDocId, outItmId, dlvDt
        //    });

        Integer res = null;
        Object r = null;
        try {
            r = ADFModelUtils.callFunction(this, new StringBuilder("fn_mnf_pln_upd_avl_qty(?,?,?,?,?,?,?,?)"), new Object[] {
                                           cldId, slocId, hoOrgId, orgId, plnDocId, srcDocId, outItmId, dlvDt
            }, Types.INTEGER);

        } catch (Exception e) {
            e.printStackTrace();
        }
        res = r == null ? null : (Integer) r;
        return res;
    }

    /** Method to call db function for generating PDO
     * fn_mnf_pln_gen_pdo(
                     p_cld_id       VARCHAR2,
                     p_sloc_id      NUMBER,
                     p_ho_org_id    VARCHAR2,
                     p_org_id       VARCHAR2,
                     p_pln_doc_id   VARCHAR2,
                     p_pln_disp_id  VARCHAR2,
                     p_doc_id_src   VARCHAR2,
                     p_bom_id       VARCHAR2,
                     p_doc_dt       DATE,
                     p_outpt_itm_id VARCHAR2,
                     p_outpt_qty    NUMBER,
                     p_strt_dt      DATE,
                     p_dlv_dt       DATE,
                     p_usr_id       NUMBER,
                     p_usr_dt       DATE
     */
    public String generatePdo(Object cldId, Object slocId, Object hoOrgId, Object orgId, Object plnDocId,
                              Object plnDispId, Object bomId, Object planDt, Object srcDocId, Object outItmId,
                              Object dlvQty, Object startDt, Object dlvDt, Object usrId, Object usrDt) {
        //        return (String) callStoredFunction(STRING, "fn_mnf_pln_gen_pdo(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
        //                                           cldId, slocId, hoOrgId, orgId, plnDocId, plnDispId, srcDocId, bomId, planDt,
        //                                           outItmId, dlvQty, startDt, dlvDt, usrId, usrDt
        //    });
        String res = null;
        Object r = null;
        try {
            r = ADFModelUtils.callFunction(this, new StringBuilder("fn_mnf_pln_gen_pdo(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"), new Object[] {
                                           cldId, slocId, hoOrgId, orgId, plnDocId, plnDispId, srcDocId, bomId, planDt,
                                           outItmId, dlvQty, startDt, dlvDt, usrId, usrDt
            }, Types.VARCHAR);

        } catch (Exception e) {
            e.printStackTrace();
        }
        res = r == null ? null : r.toString();
        return res;
    }


    /**
     * fn_mnf_pln_upd_inpt_src(
        p_cld_id         VARCHAR2,
        p_sloc_id        NUMBER,
        p_ho_org_id      VARCHAR2,
        p_org_id         VARCHAR2,
        p_pln_doc_id     VARCHAR2,
        p_doc_id_src     VARCHAR2,
        p_outpt_itm_id   VARCHAR2,
        p_txn_doc_dlv_dt DATE)
     */

    public String updateInputSource(String cldId, Integer slocId, String hoOrgId, String orgId, String plnDocId,
                                    String srcDocId, String outItmId, Timestamp dlvDt) {
        //        return (String) callStoredFunction(STRING, "fn_mnf_pln_upd_inpt_src(?,?,?,?,?,?,?,?)", new Object[] {
        //                                           cldId, slocId, hoOrgId, orgId, plnDocId, srcDocId, outItmId, dlvDt
        //    });
        String res = null;
        Object r = null;
        try {
            r = ADFModelUtils.callFunction(this, new StringBuilder("fn_mnf_pln_upd_inpt_src(?,?,?,?,?,?,?,?)"), new Object[] {
                                           cldId, slocId, hoOrgId, orgId, plnDocId, srcDocId, outItmId, dlvDt
            }, Types.VARCHAR);

        } catch (Exception e) {
            e.printStackTrace();
        }
        res = r == null ? null : r.toString();
        return res;
    }


    /**
     * Methot to update date in other tables
     * fn_mnf_pln_upd_date(
        p_cld_id         VARCHAR2,
        p_sloc_id        NUMBER,
        p_ho_org_id      VARCHAR2,
        p_org_id         VARCHAR2,
        p_pln_doc_id     VARCHAR2,
        p_doc_id_src     VARCHAR2,
        p_outpt_itm_id   VARCHAR2,
        p_txn_doc_dlv_dt DATE)
     */

    public String updateItmDate(String cldId, Integer slocId, String hoOrgId, String orgId, String plnDocId,
                                String srcDocId, String outItmId, Timestamp dlvDt) {
        //        return (String) callStoredFunction(STRING, "fn_mnf_pln_upd_date(?,?,?,?,?,?,?,?)", new Object[] {
        //                                           cldId, slocId, hoOrgId, orgId, plnDocId, srcDocId, outItmId, dlvDt
        //    });

        String res = null;
        Object r = null;
        try {
            r = ADFModelUtils.callFunction(this, new StringBuilder("fn_mnf_pln_upd_date(?,?,?,?,?,?,?,?)"), new Object[] {
                                           cldId, slocId, hoOrgId, orgId, plnDocId, srcDocId, outItmId, dlvDt
            }, Types.VARCHAR);

        } catch (Exception e) {
            e.printStackTrace();
        }
        res = r == null ? null : r.toString();
        return res;
    }


    /**
     * Method to update status on continue
     * fn_mnf_pln_upd_stat(
        p_cld_id         VARCHAR2,
        p_sloc_id        NUMBER,
        p_ho_org_id      VARCHAR2,
        p_org_id         VARCHAR2,
        p_pln_doc_id     VARCHAR2)
     */

    public Integer statUpdateTxn(String cldId, Integer slocId, String orgId, String hoOrgId, String doc_Id) {
        Integer res = null;
        Object r = null;
        try {
            r = ADFModelUtils.callFunction(this, new StringBuilder("fn_mnf_pln_upd_stat(?,?,?,?,?)"), new Object[] {
                                           cldId, slocId, hoOrgId, orgId, doc_Id
            }, Types.INTEGER);

        } catch (Exception e) {
            e.printStackTrace();
        }
        res = r == null ? null : (Integer)r;
        return res;
        //        return (Integer) callStoredFunction(NUMBER, "fn_mnf_pln_upd_stat(?,?,?,?,?)", new Object[] {
        //                                            cldId, slocId, hoOrgId, orgId, doc_Id
        //    });
    }

    /**
     * Generalized method used to display the facesmessages.
     * Created by Mousham Barman on 06-01-2015.
     * @param msgHdr is to set the header for message dialog
     * @param msgDtl is to set if further detail information in meassage is required.
     * @param msgSeverity is to set severity mode.
     * **/
    public void showFacesMsg(String msgHdr, String msgDtl, javax.faces.application.FacesMessage.Severity msgSeverity,
                             String msgMode) {

        FacesMessage msg = new FacesMessage(msgHdr);
        msg.setDetail(msgDtl);
        msg.setSeverity(msgSeverity);
        FacesContext.getCurrentInstance().addMessage(null, msg);

    }

    /**
     * Method Before Save
     *Method to remove all the order with no plan check
     */
    public void beforeSave() {

        System.out.println(plan_doc_id + " this is the doc id that need to be rmoved. =======================");
        if (plan_doc_id != null) {
            removeUnplannedData(getCldId(), getSlocId(), getHoOrgId(), getOrgId(), plan_doc_id);
        }
        getMnfPlnVO().executeQuery();
    }

    /**
     * Container's getter for VIEWTxnProductDetailsVO1.
     * @return VIEWTxnProductDetailsVO1
     */
    public ViewObjectImpl getVIEWTxnProductDetailsVO() {
        return (ViewObjectImpl) findViewObject("VIEWTxnProductDetailsVO");
    }

    /**
     * Container's getter for VIEWOverviewProductDetails1.
     * @return VIEWOverviewProductDetails1
     */
    public ViewObjectImpl getVIEWOverviewProductDetails() {
        return (ViewObjectImpl) findViewObject("VIEWOverviewProductDetails");
    }

    /**
     * Container's getter for VIEWTxnCustomerVO1.
     * @return VIEWTxnCustomerVO1
     */
    public ViewObjectImpl getVIEWTxnCustomerVO() {
        return (ViewObjectImpl) findViewObject("VIEWTxnCustomerVO");
    }

    /**
     * Container's getter for MnfPlnSuppVO1.
     * @return MnfPlnSuppVO1
     */
    public ViewObjectImpl getMnfPlnSuppVO() {
        return (ViewObjectImpl) findViewObject("MnfPlnSuppVO");
    }

    /**
     * Container's getter for MnfPlnBomVO1.
     * @return MnfPlnBomVO1
     */
    public ViewObjectImpl getMnfPlnBomVO() {
        return (ViewObjectImpl) findViewObject("MnfPlnBomVO");
    }

    /**
     * Container's getter for MnfPlnItmVO1.
     * @return MnfPlnItmVO1
     */
    public ViewObjectImpl getMnfPlnItmVO() {
        return (ViewObjectImpl) findViewObject("MnfPlnItmVO");
    }

    /**
     * Container's getter for LOVOverviewPrdCustList1.
     * @return LOVOverviewPrdCustList1
     */
    public ViewObjectImpl getLOVOverviewPrdCustList() {
        return (ViewObjectImpl) findViewObject("LOVOverviewPrdCustList");
    }

    /**
     * Container's getter for VIEWOverviewCustomerVO1.
     * @return VIEWOverviewCustomerVO1
     */
    public ViewObjectImpl getVIEWOverviewCustomerVO() {
        return (ViewObjectImpl) findViewObject("VIEWOverviewCustomerVO");
    }

    /**
     * Container's getter for DualCustmrView1.
     * @return DualCustmrView1
     */
    public ViewObjectImpl getDualCustmrView() {
        return (ViewObjectImpl) findViewObject("DualCustmrView");
    }

    /**
     * Container's getter for LOVMainCustomerNameList1.
     * @return LOVMainCustomerNameList1
     */
    public ViewObjectImpl getLOVMainCustomerNameList() {
        return (ViewObjectImpl) findViewObject("LOVMainCustomerNameList");
    }


    /**
     * Container's getter for VIEWInputSrcVo1.
     * @return VIEWInputSrcVo1
     */
    public ViewObjectImpl getVIEWInputSrcVo() {
        return (ViewObjectImpl) findViewObject("VIEWInputSrcVo");
    }

    /**
     * Container's getter for VIEWOverviewVo1.
     * @return VIEWOverviewVo1
     */
    public ViewObjectImpl getVIEWOverviewVo() {
        return (ViewObjectImpl) findViewObject("VIEWOverviewVo");
    }

    /**
     * Container's getter for VIEWBOM1.
     * @return VIEWBOM1
     */
    public ViewObjectImpl getVIEWBOMVO() {
        return (ViewObjectImpl) findViewObject("VIEWBOMVO");
    }

    /**
     * Container's getter for LISTProductForBom1.
     * @return LISTProductForBom1
     */
    public ViewObjectImpl getLISTProductForBomVO() {
        return (ViewObjectImpl) findViewObject("LISTProductForBomVO");
    }

    /**
     * Container's getter for LISTBOMForProduct1.
     * @return LISTBOMForProduct1
     */
    public ViewObjectImpl getLISTBOMForProduct() {
        return (ViewObjectImpl) findViewObject("LISTBOMForProduct");
    }

    /**
     * Container's getter for LISTItemForProduct1.
     * @return LISTItemForProduct1
     */
    public ViewObjectImpl getLISTItemForProduct() {
        return (ViewObjectImpl) findViewObject("LISTItemForProduct");
    }

    /**
     * Container's getter for DualInputSrcConfig.
     * @return DualInputSrcConfig
     */
    public ViewObjectImpl getDualInputSrcConfig() {
        return (ViewObjectImpl) findViewObject("DualInputSrcConfig");
    }


    /**
     * Container's getter for GraphPrdQty1.
     * @return GraphPrdQty1
     */
    public ViewObjectImpl getGraphPrdQty() {
        return (ViewObjectImpl) findViewObject("GraphPrdQty");
    }

    /**
     * Container's getter for GraphPrdCost1.
     * @return GraphPrdCost1
     */
    public ViewObjectImpl getGraphPrdCost() {
        return (ViewObjectImpl) findViewObject("GraphPrdCost");
    }

    /**
     * Container's getter for GraphPrdQtyForCostVL1.
     * @return GraphPrdQtyForCostVL1
     */
    public ViewLinkImpl getGraphPrdQtyForCostVL1() {
        return (ViewLinkImpl) findViewLink("GraphPrdQtyForCostVL1");
    }

    /**
     * Container's getter for VIEWRawMaterial1.
     * @return VIEWRawMaterial1
     */
    public ViewObjectImpl getVIEWRawMaterial() {
        return (ViewObjectImpl) findViewObject("VIEWRawMaterial");
    }

    /**
     * Container's getter for GraphPrdCost1.
     * @return GraphPrdCost1
     */
    public ViewObjectImpl getGraphPrdCost1() {
        return (ViewObjectImpl) findViewObject("GraphPrdCost1");
    }

    /**
     * Container's getter for VIEWOverviewRawMatVo1.
     * @return VIEWOverviewRawMatVo1
     */
    public ViewObjectImpl getVIEWOverviewRawMat() {
        return (ViewObjectImpl) findViewObject("VIEWOverviewRawMat");
    }

    /**
     * Container's getter for VIEWTXNRawMat1.
     * @return VIEWTXNRawMat1
     */
    public ViewObjectImpl getVIEWTXNRawMat() {
        return (ViewObjectImpl) findViewObject("VIEWTXNRawMat");
    }

    /**
     * Container's getter for GraphCustProduct1.
     * @return GraphCustProduct1
     */
    public ViewObjectImpl getGraphCustProduct() {
        return (ViewObjectImpl) findViewObject("GraphCustProduct");
    }


    /**
     * Container's getter for LOVCustomerNameList1.
     * @return LOVCustomerNameList1
     */
    public ViewObjectImpl getLOVCustomerNameList() {
        return (ViewObjectImpl) findViewObject("LOVCustomerNameList");
    }

    /**
     * Container's getter for MnfPlnPrdVO1.
     * @return MnfPlnPrdVO1
     */
    public ViewObjectImpl getMnfPlnPrdVO() {
        return (ViewObjectImpl) findViewObject("MnfPlnPrdVO");
    }

    /**
     * Container's getter for LOVSalesOrderVO1.
     * @return LOVSalesOrderVO1
     */
    public ViewObjectImpl getLOVSalesOrderVO() {
        return (ViewObjectImpl) findViewObject("LOVSalesOrderVO");
    }

    /**
     * Container's getter for GraphTotalRMValue1.
     * @return GraphTotalRMValue1
     */
    public ViewObjectImpl getGraphTotalRMValue() {
        return (ViewObjectImpl) findViewObject("GraphTotalRMValue");
    }

    /**
     * Container's getter for LISTRmOverview1.
     * @return LISTRmOverview1
     */
    public ViewObjectImpl getLISTRmOverview() {
        return (ViewObjectImpl) findViewObject("LISTRmOverview");
    }

    /**
     * Container's getter for LISTProductPerRm1.
     * @return LISTProductPerRm1
     */
    public ViewObjectImpl getLISTProductPerRm() {
        return (ViewObjectImpl) findViewObject("LISTProductPerRm");
    }


    /**
     * Container's getter for LISTProductWithDlvPerRm2.
     * @return LISTProductWithDlvPerRm2
     */
    public ViewObjectImpl getLISTProductWithDlvPerRm() {
        return (ViewObjectImpl) findViewObject("LISTProductWithDlvPerRm");
    }

    /**
     * Container's getter for GraphReqResrvRMQty1.
     * @return GraphReqResrvRMQty1
     */
    public ViewObjectImpl getGraphReqResrvRMQty() {
        return (ViewObjectImpl) findViewObject("GraphReqResrvRMQty");
    }

    /**
     * Container's getter for LISTSupplierPerRM1.
     * @return LISTSupplierPerRM1
     */
    public ViewObjectImpl getLISTSupplierPerRM() {
        return (ViewObjectImpl) findViewObject("LISTSupplierPerRM");
    }

    /**
     * Container's getter for DualRmSearchPage1.
     * @return DualRmSearchPage1
     */
    public ViewObjectImpl getDualRmSearchPage() {
        return (ViewObjectImpl) findViewObject("DualRmSearchPage");
    }

    /**
     * Container's getter for VIEWSupplier1.
     * @return VIEWSupplier1
     */
    public ViewObjectImpl getVIEWSupplier() {
        return (ViewObjectImpl) findViewObject("VIEWSupplier");
    }

    /**
     * Container's getter for VIEWSupplierRawPerProduct1.
     * @return VIEWSupplierRawPerProduct1
     */
    public ViewObjectImpl getVIEWSupplierRawPerProduct() {
        return (ViewObjectImpl) findViewObject("VIEWSupplierRawPerProduct");
    }

    /**
     * Container's getter for VIEWSupplierRawMate1.
     * @return VIEWSupplierRawMate1
     */
    public ViewObjectImpl getVIEWSupplierRawMate() {
        return (ViewObjectImpl) findViewObject("VIEWSupplierRawMate");
    }

    /**
     * Container's getter for ProductForRMDetail1.
     * @return ProductForRMDetail1
     */
    public ViewObjectImpl getProductForRMDetail() {
        return (ViewObjectImpl) findViewObject("ProductForRMDetail");
    }

    /**
     * Container's getter for LISTProductForRMDetail1.
     * @return LISTProductForRMDetail1
     */
    public ViewObjectImpl getLISTProductForRMDetail() {
        return (ViewObjectImpl) findViewObject("LISTProductForRMDetail");
    }

    /**
     * Container's getter for LISTRmPerPrdForRMDetail1.
     * @return LISTRmPerPrdForRMDetail1
     */
    public ViewObjectImpl getLISTRmPerPrdForRMDetail() {
        return (ViewObjectImpl) findViewObject("LISTRmPerPrdForRMDetail");
    }

    /**
     * Container's getter for LISTSupplierForRMDetail1.
     * @return LISTSupplierForRMDetail1
     */
    public ViewObjectImpl getLISTSupplierForRMDetail() {
        return (ViewObjectImpl) findViewObject("LISTSupplierForRMDetail");
    }

    /**
     * Container's getter for DualOverviewPage1.
     * @return DualOverviewPage1
     */
    public ViewObjectImpl getDualOverviewPage() {
        return (ViewObjectImpl) findViewObject("DualOverviewPage");
    }

    /**
     * Container's getter for LISTSupplierFullForRMDetail1.
     * @return LISTSupplierFullForRMDetail1
     */
    public ViewObjectImpl getLISTSupplierFullForRMDetail() {
        return (ViewObjectImpl) findViewObject("LISTSupplierFullForRMDetail");
    }

    /**
     * Container's getter for LISTCustomerPerProductForRMDetails1.
     * @return LISTCustomerPerProductForRMDetails1
     */
    public ViewObjectImpl getLISTCustomerPerProductForRMDetails() {
        return (ViewObjectImpl) findViewObject("LISTCustomerPerProductForRMDetails");
    }

    /**
     * Container's getter for GraphRmMaxMinLine1.
     * @return GraphRmMaxMinLine1
     */
    public ViewObjectImpl getGraphRmMaxMinLine() {
        return (ViewObjectImpl) findViewObject("GraphRmMaxMinLine");
    }

    /**
     * Container's getter for LISTEntity1.
     * @return LISTEntity1
     */
    public ViewObjectImpl getLISTEntity() {
        return (ViewObjectImpl) findViewObject("LISTEntity");
    }

    /**
     * Container's getter for LISTProductCustomerOverView1.
     * @return LISTProductCustomerOverView1
     */
    public ViewObjectImpl getLISTProductCustomerOverView() {
        return (ViewObjectImpl) findViewObject("LISTProductCustomerOverView");
    }


    /**
     * Container's getter for DualCustomerEvolution1.
     * @return DualCustomerEvolution1
     */
    public ViewObjectImpl getDualCustomerEvolution() {
        return (ViewObjectImpl) findViewObject("DualCustomerEvolution");
    }

    /**
     * Container's getter for LISTCustomer1.
     * @return LISTCustomer1
     */
    public ViewObjectImpl getLISTCustomer() {
        return (ViewObjectImpl) findViewObject("LISTCustomer");
    }

    /**
     * Container's getter for LISTProductDetailsCustOver1.
     * @return LISTProductDetailsCustOver1
     */
    public ViewObjectImpl getLISTProductDetailsCustOver() {
        return (ViewObjectImpl) findViewObject("LISTProductDetailsCustOver");
    }

    /**
     * Container's getter for LISTBom1.
     * @return LISTBom1
     */
    public ViewObjectImpl getLISTBom() {
        return (ViewObjectImpl) findViewObject("LISTBom");
    }

    /**
     * Container's getter for LISTBomOutput1.
     * @return LISTBomOutput1
     */
    public ViewObjectImpl getLISTBomOutput() {
        return (ViewObjectImpl) findViewObject("LISTBomOutput");
    }

    /**
     * Container's getter for LISTBomInputItm1.
     * @return LISTBomInputItm1
     */
    public ViewObjectImpl getLISTBomInputItm() {
        return (ViewObjectImpl) findViewObject("LISTBomInputItm");
    }

    /**
     * Container's getter for LISTBomAllProductVo1.
     * @return LISTBomAllProductVo1
     */
    public ViewObjectImpl getLISTBomAllProductVo() {
        return (ViewObjectImpl) findViewObject("LISTBomAllProductVo");
    }

    /**
     * Container's getter for MnfPln1.
     * @return MnfPln1
     */
    public ViewObjectImpl getMnfPlnVO() {
        return (ViewObjectImpl) findViewObject("MnfPlnVO");
    }

    /**
     * Container's getter for LOVPlanDispId1.
     * @return LOVPlanDispId1
     */
    public ViewObjectImpl getLOVPlanDispId() {
        return (ViewObjectImpl) findViewObject("LOVPlanDispId");
    }

    /**
     * Container's getter for DualPlanSearch1.
     * @return DualPlanSearch1
     */
    public ViewObjectImpl getDualPlanSearch() {
        return (ViewObjectImpl) findViewObject("DualPlanSearch");
    }

    /**
     * Container's getter for LISTExcOrder1.
     * @return LISTExcOrder1
     */
    public ViewObjectImpl getLISTExcOrder() {
        return (ViewObjectImpl) findViewObject("LISTExcOrder");
    }

    /**
     * Container's getter for LISTExcOrderPdo1.
     * @return LISTExcOrderPdo1
     */
    public ViewObjectImpl getLISTExcOrderPdo() {
        return (ViewObjectImpl) findViewObject("LISTExcOrderPdo");
    }

    /**
     * Container's getter for ExcOrderToExcOrderPdoVL1.
     * @return ExcOrderToExcOrderPdoVL1
     */
    public ViewLinkImpl getExcOrderToExcOrderPdoVL() {
        return (ViewLinkImpl) findViewLink("ExcOrderToExcOrderPdoVL");
    }

    /**
     * Container's getter for LISTExcPdo1.
     * @return LISTExcPdo1
     */
    public ViewObjectImpl getLISTExcPdo() {
        return (ViewObjectImpl) findViewObject("LISTExcPdo");
    }

    /**
     * Container's getter for LISTExcPdoJobCard1.
     * @return LISTExcPdoJobCard1
     */
    public ViewObjectImpl getLISTExcPdoJobCard() {
        return (ViewObjectImpl) findViewObject("LISTExcPdoJobCard");
    }

    /**
     * Container's getter for ExcPdoToExcPdoJobCardVL1.
     * @return ExcPdoToExcPdoJobCardVL1
     */
    public ViewLinkImpl getExcPdoToExcPdoJobCardVL() {
        return (ViewLinkImpl) findViewLink("ExcPdoToExcPdoJobCardVL");
    }

    /**
     * Container's getter for LISTExcRm1.
     * @return LISTExcRm1
     */
    public ViewObjectImpl getLISTExcRm() {
        return (ViewObjectImpl) findViewObject("LISTExcRm");
    }

    /**
     * Container's getter for LISTExcRmWithSupp1.
     * @return LISTExcRmWithSupp1
     */
    public ViewObjectImpl getLISTExcRmWithSupp() {
        return (ViewObjectImpl) findViewObject("LISTExcRmWithSupp");
    }

    /**
     * Container's getter for LISTExcRmListToOrder1.
     * @return LISTExcRmListToOrder1
     */
    public ViewObjectImpl getLISTExcRmListToOrder() {
        return (ViewObjectImpl) findViewObject("LISTExcRmListToOrder");
    }

    /**
     * Container's getter for LISTExcSuppListForRM1.
     * @return LISTExcSuppListForRM1
     */
    public ViewObjectImpl getLISTExcSuppListForRM() {
        return (ViewObjectImpl) findViewObject("LISTExcSuppListForRM");
    }

    /**
     * Container's getter for ExcRmOrderToExcSuppPerRmVL1.
     * @return ExcRmOrderToExcSuppPerRmVL1
     */
    public ViewLinkImpl getExcRmOrderToExcSuppPerRmVL() {
        return (ViewLinkImpl) findViewLink("ExcRmOrderToExcSuppPerRmVL");
    }

    /**
     * Container's getter for GraphOrderState1.
     * @return GraphOrderState1
     */
    public ViewObjectImpl getGraphOrderState() {
        return (ViewObjectImpl) findViewObject("GraphOrderState");
    }

    /**
     * Container's getter for GraphTotalPlanState1.
     * @return GraphTotalPlanState1
     */
    public ViewObjectImpl getGraphTotalPlanState() {
        return (ViewObjectImpl) findViewObject("GraphTotalPlanState");
    }

    /**
     * Container's getter for GraphTotalProductPerPlan1.
     * @return GraphTotalProductPerPlan1
     */
    public ViewObjectImpl getGraphTotalProductPerPlan() {
        return (ViewObjectImpl) findViewObject("GraphTotalProductPerPlan");
    }
}

