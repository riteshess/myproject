package mnfproductioncosting.model.services;

import adf.utils.bean.StaticValue;
import adf.utils.ebiz.EbizParams;

import adf.utils.ebiz.WorkFlowUtils;
import adf.utils.model.ADFModelUtils;

import java.sql.CallableStatement;
import java.sql.SQLException;

import java.sql.Types;

import java.util.Iterator;

import javax.el.ELContext;
import javax.el.ExpressionFactory;

import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import mnfproductioncosting.model.services.common.MNFProductionCostingAM;
import mnfproductioncosting.model.views.DualAddCOADetailVOImpl;
import mnfproductioncosting.model.views.DualAddCOADetailVORowImpl;
import mnfproductioncosting.model.views.DualSearchDocumentVOImpl;

import mnfproductioncosting.model.views.ProductionCostingCOAVORowImpl;

import oracle.jbo.ApplicationModule;
import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.eclipse.persistence.internal.oxm.record.deferred.EndDTDEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Jul 01 17:53:25 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MNFProductionCostingAMImpl extends ApplicationModuleImpl implements MNFProductionCostingAM {
    /**
     * This is the default constructor (do not remove).
     */

    private Integer glblDocId = 26007;
    private Integer glblDocTypeId = 0;

    public MNFProductionCostingAMImpl() {
    }


    /********* Check Pending user at the Time of Edit **********/

    public Integer chkPendingUsr() {
        String docTxnId = (String) this.getProductionCostingMainVO1().getCurrentRow().getAttribute("DocId");
        return WorkFlowUtils.docPendingAt(this.getRootApplicationModule(), glblDocId, glblDocTypeId, docTxnId);
    }

    public String getUsrNm(Integer usrId) {
        Object o = EbizParams.getUsrDescFrmUsrId(this, usrId);
        return (o == null ? " " : o.toString());
    }

    /***** ADD Workflow ***********/

    public Integer insertIntoWF() {

        Integer i = -1;

        ViewObjectImpl costingMainVO1 = this.getProductionCostingMainVO1();
        Row currentRow = costingMainVO1.getCurrentRow();
        Object docTxnId = currentRow.getAttribute("DocId");
        Object userIdCreate = currentRow.getAttribute("UsrIdCreate");

        try {
            i = WorkFlowUtils.insertWfTxnEntriesForCurrDoc(this, 26007, 0, docTxnId, (Integer) userIdCreate,
                                                           (Integer) userIdCreate, " ", StaticValue.NUMBER_ZERO);
        } catch (Exception e) {

            ADFModelUtils.showFormattedFacesMessage("Error while getting Workflow details.", " ",
                                                    FacesMessage.SEVERITY_ERROR);
        }
        return i;

    }


    public String getWfId() {
        Object flowId = null;
        flowId = WorkFlowUtils.getWorkFlowId(this, 26007, 0);
        return (flowId == null ? null : flowId.toString());
    }


    public Integer getCurUser(String docId) {
        System.out.println("docID is:::::::::" + docId);
        Integer val = WorkFlowUtils.docPendingAt(this, 26007, 0, docId);
        System.out.println("value is :::::::::::::" + val);
        return val;
    }

    public void updateWfStat(String mode, String docId) {

        System.out.println(" in updateWFStatus function in am");
        System.out.println("moode is " + mode);

        Row[] rw = this.getProductionCostingMainVO1().getFilteredRows("DocId", docId);
        switch (mode) {
        case "A":
            rw[0].setAttribute("CostngStat", 73);
            rw[0].setAttribute("CostngMode", 76);

            entryIntoGL();

            ADFModelUtils.showFormattedFacesMessage("Successfull", "Record Approved Successfully",
                                                    FacesMessage.SEVERITY_INFO);

            break;
        case "F":
            rw[0].setAttribute("CostngMode", 78);
            ADFModelUtils.showFormattedFacesMessage("Successfull", "Record Forwarded Successfully",
                                                    FacesMessage.SEVERITY_INFO);

            break;
        case "R":
            ADFModelUtils.showFormattedFacesMessage("Successfull", "Record Rejected Successfully",
                                                    FacesMessage.SEVERITY_INFO);
            break;
        case "V":
            ADFModelUtils.showFormattedFacesMessage("Successfull", "Record Reverted Successfully",
                                                    FacesMessage.SEVERITY_INFO);
            break;
        }
        this.getDBTransaction().commit();
    }


    /**
     *  start date=1
     *  end date=2
     * @return
     */
    public Integer populateData() {
        System.out.println("in populate data method");

        Integer i = 0;

        ViewObjectImpl costingMainVO1 = this.getProductionCostingMainVO1();
        Row currentRow = costingMainVO1.getCurrentRow();
        Object StartDate = currentRow.getAttribute("StrtDt") == null ? " " : currentRow.getAttribute("StrtDt");
        Object EndDate = currentRow.getAttribute("EndDt") == null ? " " : currentRow.getAttribute("EndDt");
        if (StartDate == null || StartDate.equals(" ")) {
            i = 1;
        } else if (EndDate == null || EndDate.equals(" ")) {
            i = 2;
        } else {

            Row r = costingMainVO1.getCurrentRow();

            Object CldId = r.getAttribute("CldId");
            Object HoOrgId = r.getAttribute("HoOrgId");
            Object SlocId = r.getAttribute("SlocId");
            Object OrgId = r.getAttribute("OrgId");
            Object DocId = r.getAttribute("DocIdSrc");
            Object ItemId = r.getAttribute("ItmId");


            System.out.println("Start date is:::::" + StartDate);
            System.out.println("End date is:::::" + EndDate);
            System.out.println(" ItemId is:::::" + ItemId);


            ViewObjectImpl dataVO1 = this.getLOVSearchDataVO1();
            dataVO1.setNamedWhereClauseParam("BindCldId", CldId);
            dataVO1.setNamedWhereClauseParam("BindCreateDt", StartDate);
            dataVO1.setNamedWhereClauseParam("BindCreateToDt", EndDate);
            dataVO1.setNamedWhereClauseParam("BindDocId", DocId);
            dataVO1.setNamedWhereClauseParam("BindHoOrgId", HoOrgId);
            dataVO1.setNamedWhereClauseParam("BindOrgId", OrgId);
            dataVO1.setNamedWhereClauseParam("BindSlocId", SlocId);
            dataVO1.setNamedWhereClauseParam("BindItemId", ItemId);
            dataVO1.executeQuery();
            System.out.println("*****************" + dataVO1.getRowCount());
            RowSetIterator Iterator = dataVO1.createRowSetIterator(null);


            ViewObjectImpl cVO2 = this.getProductionCostingSRCVO2();
            while (Iterator.hasNext()) {

                System.out.println("in iterartor loop");

                Row row = Iterator.next();
                //   Object JeId = row.getAttribute("JeId");     JeID will be set in getter
                Object DocDt = row.getAttribute("SrcDocDt");
                Object docid = row.getAttribute("DocId");
                Object OutputItemId = row.getAttribute("OutptItmId");
                Object OutputItemQty = row.getAttribute("OutptItmQty");
                System.out.println("Output Item Id is:::::::" + OutputItemId);
                System.out.println("Output Item qty is:::::::" + OutputItemQty);
                System.out.println("document id is::::" + docid);
                System.out.println("Doc Date is::::" + DocDt);

                Row createRow = cVO2.createRow();
                createRow.setAttribute("DocTypeSrc", new Integer(26006));
                createRow.setAttribute("DocIdSrc", docid);
                createRow.setAttribute("DocDtSrc", DocDt);
                createRow.setAttribute("OutptItmId", OutputItemId);
                createRow.setAttribute("OutptItmQty", OutputItemQty);

                cVO2.insertRow(createRow);
            }
            Iterator.closeRowSetIterator();

            getDBTransaction().postChanges();
            cVO2.executeQuery();
            System.out.println("end of populate data method");

        }
        return i;
    }

    public void resetData() {
        System.out.println("in reset data method in am");
        delprdcstfrmsrc();
    }

    /**
     * Container's getter for LOVSearchDataVO1.
     * @return LOVSearchDataVO1
     */
    public ViewObjectImpl getLOVSearchDataVO1() {
        return (ViewObjectImpl) findViewObject("LOVSearchDataVO1");
    }


    public Boolean checkValueInJEDetail() {
        Boolean flag = false;
        System.out.println("CheckValueInJEDetail method is called......");
        ViewObjectImpl cVO2 = this.getProductionCostingSRCVO2();
        RowSetIterator itr = cVO2.createRowSetIterator(null);
        System.out.println("Itr row count :::: " + cVO2.getRowCount());

        while (itr.hasNext()) {
            System.out.println("in iterartor get CheckValueInJEDetail loop");
            Row row = itr.next();
            System.out.println("row.getAttribute(\"TransCheckSel\") :::: " + row.getAttribute("TransCheckSel"));
            if (row.getAttribute("TransCheckSel").equals("Y")) {
                flag = true;
                return flag;
            }
        }
        itr.closeRowSetIterator();
        cVO2.executeQuery();
        return flag;
    }

    public String getCost() {
        System.out.println("getCost method is called......");

        ViewObjectImpl cVO2 = this.getProductionCostingSRCVO2();
        RowSetIterator itr = cVO2.createRowSetIterator(null);
        while (itr.hasNext()) {
            String chk = "N";
            System.out.println("in iterartor get cost while loop");
            Row row = itr.next();

            Object selection = row.getAttribute("TransCheckSel");
            Object docIdSrc = row.getAttribute("DocIdSrc");
            Object docTypeSrc = row.getAttribute("DocTypeSrc");
            Object prd_cost_doc_id = row.getAttribute("DocId");
            System.out.println("value of selection is ::::" + selection + " | " + "value of docIdsrc is ::::" +
                               docIdSrc + " | " + "value of docTypeSrc is ::::" + docTypeSrc + " | " +
                               "value of prd_cost_doc_id ::::" + prd_cost_doc_id);
            if (row.getAttribute("TransCheckSel") != null) {
                chk = row.getAttribute("TransCheckSel").toString();
            }
            if ("Y".equalsIgnoreCase(chk)) {

                Object retval;
                retval =
                    ADFModelUtils.callFunction(this,
                                               new StringBuilder("FN_MNF_INS_PRD_COSTNG_FRM_SRC(?,?,?,?,?,?,?,?,?)"), new Object[] {
                                               EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                               EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(), docTypeSrc,
                                               docIdSrc, prd_cost_doc_id, EbizParams.GLBL_APP_USR(),
                                               StaticValue.getCurrDtWidTimestamp()
                }, Types.NUMERIC);
                System.out.println("retval ::: " + retval);

            } else {
                System.out.println("selection value is false");
            }
            System.out.println("end of while loop");
        }

        itr.closeRowSetIterator();
        cVO2.executeQuery();
        this.getDBTransaction().postChanges();
        this.getProductionCostingCOAVO3().executeQuery();
        getProductionCostingCOAVO2().executeQuery();
        getProductionCostingCOAVO4().executeQuery();
        getAllCOADetailVO1().executeQuery();

        System.out.println("end of getcost method in am");
        return null;

    }

    public String validateAtSaveAndForward() {
        String flag = "N";
        ViewObjectImpl aVO3 = this.getProductionCostingCOAVO4();
        aVO3.executeQuery();
        int count = aVO3.getRowCount();
        if (count > 0) {
            return "Y";
        }
        return flag;
    }


    public void getAllCOADetailVO() {
        System.out.println("in getallCoaDEtail in am");
        getDBTransaction().postChanges();
        getAllCOADetailVO1().executeQuery();

    }

    public void entryIntoGL() {

        System.out.println("entryintoGL method is called......");

        ViewObjectImpl cVO2 = this.getProductionCostingMainVO1();
        Row currentRow = cVO2.getCurrentRow();
        Object Prd_docId = currentRow.getAttribute("DocId");

        Object retval;

        System.out.println("prd doc id is :::::::" + Prd_docId + "    " + EbizParams.GLBL_APP_USR() + " " +
                           StaticValue.getCurrDtWidTimestamp());

        retval = ADFModelUtils.callFunction(this, new StringBuilder("fn_mnf_prd_cost_gl(?,?,?,?,?,?,?)"), new Object[] {
                                            EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                            EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(), Prd_docId,
                                            EbizParams.GLBL_APP_USR(), StaticValue.getCurrDtWidTimestamp(),
        }, Types.VARCHAR);
        System.out.println("retval of entryintoGL function is:::::::::: " + retval);


    }

    public void delprdcstfrmsrc() {
        System.out.println(" delete production codting from SRC Table......");
        Object prd_cost_doc_id = this.getProductionCostingMainVO1().getCurrentRow().getAttribute("DocId");
        Object retval;
        try {
            retval = ADFModelUtils.callFunction(this, new StringBuilder("FN_MNF_DEL_PRD_COSTNG_FRM_SRC(?,?,?,?,?,?,?)"), new Object[] {
                                                EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                                EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                                prd_cost_doc_id, EbizParams.GLBL_APP_USR(),
                                                StaticValue.getCurrDtWidTimestamp()
            }, Types.NUMERIC);
            System.out.println("retval ::: " + retval);
        } catch (Exception ex) {
        }
        getProductionCostingSRCVO2().executeQuery();
        getDBTransaction().postChanges();
    }


    public void afterDeleteExecuteCoaDetail() {

        /*  DualAddCOADetailVOImpl aDetailVO1 = this.getDualAddCOADetailVO1();
        aDetailVO1.executeQuery(); */
        /*    this.getProductionCostingCOAVO1().executeQuery();
        this.getProductionCostingCOAVO2().executeQuery();
        this.getProductionCostingCOAVO3().executeQuery();
        this.getProductionCostingCOAVO4().executeQuery(); */
    }

    /**
     * Container's getter for ProductionCostingMainVO1.
     * @return ProductionCostingMainVO1
     */
    public ViewObjectImpl getProductionCostingMainVO1() {
        return (ViewObjectImpl) findViewObject("ProductionCostingMainVO1");
    }

    /**
     * Container's getter for SearchCostingVO1.
     * @return SearchCostingVO1
     */
    public ViewObjectImpl getSearchCostingVO1() {
        return (ViewObjectImpl) findViewObject("SearchCostingVO1");
    }

    /**
     * Container's getter for DualSearchDocumentVO1.
     * @return DualSearchDocumentVO1
     */
    public DualSearchDocumentVOImpl getDualSearchDocumentVO1() {
        return (DualSearchDocumentVOImpl) findViewObject("DualSearchDocumentVO1");
    }

    public void searchDocumentId() {

        System.out.println("in search document Id method in am");

        ViewObjectImpl documentVO1 = this.getDualSearchDocumentVO1();

        Row currentRow = documentVO1.getCurrentRow();

        Object documentId = currentRow.getAttribute("TransDocumentId");
        Object CostingId = currentRow.getAttribute("TransCostingId");
        Object CldId = currentRow.getAttribute("TransCldId");
        Object HoOrgId = currentRow.getAttribute("TransHoOrgId");
        Object OrgId = currentRow.getAttribute("TransOrgId");
        Object SlocId = currentRow.getAttribute("TransSlocId");
        Object CostingMode = currentRow.getAttribute("TransCostingMode");
        Object CostingStatus = currentRow.getAttribute("TransCostingStatus");
        Object UserIdCreate = currentRow.getAttribute("TransUserIdCreate");
        Object DateFrom = currentRow.getAttribute("TransDateFrom");
        Object DateTo = currentRow.getAttribute("TransDateTo");


        String docId = null;
        if (documentId != null) {
            docId = documentId.toString();
        }
        System.out.println(docId + "document id is:::::" + documentId + " " + HoOrgId + "" + CldId + "" + OrgId + "" +
                           SlocId);

        ViewObjectImpl costingVO1 = this.getSearchCostingVO1();
        costingVO1.setNamedWhereClauseParam("CldIdBind", CldId);
        costingVO1.setNamedWhereClauseParam("HoOrgIdBind", HoOrgId);
        costingVO1.setNamedWhereClauseParam("OrgIdBind", OrgId);
        costingVO1.setNamedWhereClauseParam("SlocIdBind", SlocId);
        costingVO1.setNamedWhereClauseParam("DispIdBind", CostingId);
        costingVO1.setNamedWhereClauseParam("CostingModeBind", CostingMode);
        costingVO1.setNamedWhereClauseParam("CostingStatBind", CostingStatus);
        costingVO1.setNamedWhereClauseParam("UserIdCreateBind", UserIdCreate);
        costingVO1.setNamedWhereClauseParam("BindCreateDt", DateFrom);
        costingVO1.setNamedWhereClauseParam("BindCreateToDt", DateTo);
        costingVO1.executeQuery();

    }

    public void resetDocumentId() {
        System.out.println("in reset document Id method in am");
        ViewObjectImpl documentVO1 = this.getDualSearchDocumentVO1();
        Row currentRow = documentVO1.getCurrentRow();
        Object documentId = currentRow.getAttribute("TransDocumentId");
        Object CldId = currentRow.getAttribute("TransCldId");
        Object HoOrgId = currentRow.getAttribute("TransHoOrgId");
        Object OrgId = currentRow.getAttribute("TransOrgId");
        Object SlocId = currentRow.getAttribute("TransSlocId");
        System.out.println("document id is:::::" + documentId);

        ViewObjectImpl costingVO1 = this.getSearchCostingVO1();
        costingVO1.setNamedWhereClauseParam("DispIdBind", null);
        costingVO1.setNamedWhereClauseParam("CldIdBind", null);
        costingVO1.setNamedWhereClauseParam("HoOrgIdBind", null);
        costingVO1.setNamedWhereClauseParam("OrgIdBind", null);
        costingVO1.setNamedWhereClauseParam("SlocIdBind", null);
        costingVO1.executeQuery();
        documentVO1.executeQuery();
    }

    public Integer checkDuplicateCOA() {
        //Integer i=0;
        ViewObjectImpl prdCoa = this.getProductionCostingCOAVO3();
        DualAddCOADetailVOImpl aDetailVOImpl = this.getDualAddCOADetailVO1();
        DualAddCOADetailVORowImpl currentRow = (DualAddCOADetailVORowImpl) aDetailVOImpl.getCurrentRow();
        Integer coaId = currentRow.getTransCOAId();
        System.out.println("Value of coa in current row::" + coaId);
        Row[] rr = prdCoa.getFilteredRows("CoaId", coaId);
        if (rr.length > 0) {
            Integer count = rr.length;
            System.out.println("Value of count" + count);
            if (count > 0) {
                return new Integer(10);
            } else
                return new Integer(20);
        }

        return new Integer(20);

    }

    public Integer addCoaDetail() {

        Integer i = 0;

        DualAddCOADetailVOImpl aDetailVO1 = this.getDualAddCOADetailVO1();
        DualAddCOADetailVORowImpl currentRow = (DualAddCOADetailVORowImpl) aDetailVO1.getCurrentRow();

        Integer coaId = currentRow.getTransCOAId();
        Number amount = currentRow.getTransAmount();

        Integer coa = checkDuplicateCOA();
        System.out.println("Value of coa::" + coa);

        if (!(coaId == null || coaId.equals(" "))) {

            if (!(amount == null || amount.equals(" "))) {
                System.out.println("iffifififiiiffi");
                if (coa == 10) {
                    System.out.println("################");
                    i = 4;

                }
            } else {
                System.out.println("elselelseleslelslelelse");
                i = 2;
                return i;
            }
        } else {
            i = 1;
        }
        if (i == 4 || i == 1) {
            return i;
        } else {
            System.out.println("in add COA Detail  method in am");
            ViewObjectImpl vo = this.getProductionCostingCOAVO3();
            ProductionCostingCOAVORowImpl curRow = (ProductionCostingCOAVORowImpl) vo.createRow();
            curRow.setTotAmtSp(amount);
            curRow.setCoaId(coaId);

            Integer bsForCurrOrg = EbizParams.getCurrIdBsForCurrOrg(this);
            Number conF = EbizParams.getCurrRateForCurrId(this, bsForCurrOrg);
            curRow.setTotAmtBs(amount);
            vo.insertRow(curRow);

            vo.executeQuery();
            aDetailVO1.executeQuery();
            this.getDBTransaction().postChanges();
            getAllCOADetailVO1().executeQuery();

        }

        return i;
    }


    public void filterOnthebasisOfId() {

        System.out.println("in filter id method");
        System.out.println("VaLUE OF dOCid:::" + ADFModelUtils.resolvEl("#{pageFlowScope.DOC_ID}").toString());
        ViewObjectImpl costingMainVO1 = this.getProductionCostingMainVO1();
        costingMainVO1.setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
        costingMainVO1.setNamedWhereClauseParam("HoOrgBind", EbizParams.GLBL_HO_ORG_ID());
        costingMainVO1.setNamedWhereClauseParam("OrgIdBind", EbizParams.GLBL_APP_USR_ORG());
        costingMainVO1.setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
        costingMainVO1.setNamedWhereClauseParam("DocIdBind", ADFModelUtils.resolvEl("#{pageFlowScope.DOC_ID}"));
        costingMainVO1.executeQuery();
    }

    /**
     * Container's getter for ProductionCostingCOAVO1.
     * @return ProductionCostingCOAVO1
     */
    public ViewObjectImpl getProductionCostingCOAVO1() {
        return (ViewObjectImpl) findViewObject("ProductionCostingCOAVO1");
    }


    /**
     * Container's getter for ProductionCostingSRCVO1.
     * @return ProductionCostingSRCVO1
     */
    public ViewObjectImpl getProductionCostingSRCVO1() {
        return (ViewObjectImpl) findViewObject("ProductionCostingSRCVO1");
    }

    /**
     * Container's getter for ProductionCostingCOAVO2.
     * @return ProductionCostingCOAVO2
     */
    public ViewObjectImpl getProductionCostingCOAVO2() {
        return (ViewObjectImpl) findViewObject("ProductionCostingCOAVO2");
    }

    /**
     * Container's getter for PrdCstngSrcTOPrdCstngCOA1.
     * @return PrdCstngSrcTOPrdCstngCOA1
     */
    public ViewLinkImpl getPrdCstngSrcTOPrdCstngCOA1() {
        return (ViewLinkImpl) findViewLink("PrdCstngSrcTOPrdCstngCOA1");
    }

    /**
     * Container's getter for ProductionCostingSRCVO2.
     * @return ProductionCostingSRCVO2
     */
    public ViewObjectImpl getProductionCostingSRCVO2() {
        return (ViewObjectImpl) findViewObject("ProductionCostingSRCVO2");
    }

    /**
     * Container's getter for PrdcstMainTOPrdcstSrc1.
     * @return PrdcstMainTOPrdcstSrc1
     */
    public ViewLinkImpl getPrdcstMainTOPrdcstSrc1() {
        return (ViewLinkImpl) findViewLink("PrdcstMainTOPrdcstSrc1");
    }

    /**
     * Container's getter for ProductionCostingCOAVO3.
     * @return ProductionCostingCOAVO3
     */
    public ViewObjectImpl getProductionCostingCOAVO3() {
        return (ViewObjectImpl) findViewObject("ProductionCostingCOAVO3");
    }

    /**
     * Container's getter for PrdCstngSrcTOPrdCstngCOA2.
     * @return PrdCstngSrcTOPrdCstngCOA2
     */
    public ViewLinkImpl getPrdCstngSrcTOPrdCstngCOA2() {
        return (ViewLinkImpl) findViewLink("PrdCstngSrcTOPrdCstngCOA2");
    }

    /**
     * Container's getter for ProductionCostingCOAVO4.
     * @return ProductionCostingCOAVO4
     */
    public ViewObjectImpl getProductionCostingCOAVO4() {
        return (ViewObjectImpl) findViewObject("ProductionCostingCOAVO4");
    }

    /**
     * Container's getter for PrdCstMainTOPrdCstCOA1.
     * @return PrdCstMainTOPrdCstCOA1
     */
    public ViewLinkImpl getPrdCstMainTOPrdCstCOA1() {
        return (ViewLinkImpl) findViewLink("PrdCstMainTOPrdCstCOA1");
    }

    /**
     * Container's getter for JEIdfromDocIdVO1.
     * @return JEIdfromDocIdVO1
     */
    public ViewObjectImpl getJEIdfromDocIdVO1() {
        return (ViewObjectImpl) findViewObject("JEIdfromDocIdVO1");
    }

    /**
     * Container's getter for LOVCostingCOADetailVO1.
     * @return LOVCostingCOADetailVO1
     */
    public ViewObjectImpl getLOVCostingCOADetailVO1() {
        return (ViewObjectImpl) findViewObject("LOVCostingCOADetailVO1");
    }

    /**
     * Container's getter for DualAddCOADetailVO1.
     * @return DualAddCOADetailVO1
     */
    public DualAddCOADetailVOImpl getDualAddCOADetailVO1() {
        return (DualAddCOADetailVOImpl) findViewObject("DualAddCOADetailVO1");
    }


    /**
     * Container's getter for LOVUserIdCreate1.
     * @return LOVUserIdCreate1
     */
    public ViewObjectImpl getLOVUserIdCreate1() {
        return (ViewObjectImpl) findViewObject("LOVUserIdCreate1");
    }


    /**
     * Container's getter for AllCOADetailVO1.
     * @return AllCOADetailVO1
     */
    public ViewObjectImpl getAllCOADetailVO1() {
        return (ViewObjectImpl) findViewObject("AllCOADetailVO1");
    }

    /**
     * Container's getter for PrdCstMainTOAllCOAdetail2.
     * @return PrdCstMainTOAllCOAdetail2
     */
    public ViewLinkImpl getPrdCstMainTOAllCOAdetail2() {
        return (ViewLinkImpl) findViewLink("PrdCstMainTOAllCOAdetail2");
    }
}

