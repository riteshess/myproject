package mnfshopfloorfeedback.model.views;

import mnfshopfloorfeedback.model.entities.MnfFdbkParamEOImpl;

import mnfshopfloorfeedback.model.services.MNFShopFloorFeedbackAMImpl;

import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.domain.NClobDomain;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Sep 17 14:30:53 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MnfFdbkParamVORowImpl extends ViewRowImpl {


    public static final int ENTITY_MNFFDBKPARAMEO = 0;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CldId,
        SlocId,
        OrgId,
        HoOrgId,
        DocId,
        ParamId,
        ParamVal,
        UsrIdCreate,
        UsrIdCreateDt,
        UsrIdMod,
        UsrIdModDt,
        transName,
        transType,
        ParameterId,
        transParamSet,
        transParamSetId,
        transParamType,
        transParamBasis,
        transParamBasisName,
        transRowKey,
        ParamValType,
        TlrncLower,
        TlrncType,
        TlrncUpper,
        UpperLimit,
        LowerLimit,
        transParamValTypeName,
        transParamUomName,
        ParamRmrk,
        LOVFdbkParamVO1,
        LOVParamVO1,
        LOVParamSetVO1,
        LOVParamValTypeVO1;
        static AttributesEnum[] vals = null;
        ;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int PARAMID = AttributesEnum.ParamId.index();
    public static final int PARAMVAL = AttributesEnum.ParamVal.index();
    public static final int USRIDCREATE = AttributesEnum.UsrIdCreate.index();
    public static final int USRIDCREATEDT = AttributesEnum.UsrIdCreateDt.index();
    public static final int USRIDMOD = AttributesEnum.UsrIdMod.index();
    public static final int USRIDMODDT = AttributesEnum.UsrIdModDt.index();
    public static final int TRANSNAME = AttributesEnum.transName.index();
    public static final int TRANSTYPE = AttributesEnum.transType.index();
    public static final int PARAMETERID = AttributesEnum.ParameterId.index();
    public static final int TRANSPARAMSET = AttributesEnum.transParamSet.index();
    public static final int TRANSPARAMSETID = AttributesEnum.transParamSetId.index();
    public static final int TRANSPARAMTYPE = AttributesEnum.transParamType.index();
    public static final int TRANSPARAMBASIS = AttributesEnum.transParamBasis.index();
    public static final int TRANSPARAMBASISNAME = AttributesEnum.transParamBasisName.index();
    public static final int TRANSROWKEY = AttributesEnum.transRowKey.index();
    public static final int PARAMVALTYPE = AttributesEnum.ParamValType.index();
    public static final int TLRNCLOWER = AttributesEnum.TlrncLower.index();
    public static final int TLRNCTYPE = AttributesEnum.TlrncType.index();
    public static final int TLRNCUPPER = AttributesEnum.TlrncUpper.index();
    public static final int UPPERLIMIT = AttributesEnum.UpperLimit.index();
    public static final int LOWERLIMIT = AttributesEnum.LowerLimit.index();
    public static final int TRANSPARAMVALTYPENAME = AttributesEnum.transParamValTypeName.index();
    public static final int TRANSPARAMUOMNAME = AttributesEnum.transParamUomName.index();
    public static final int PARAMRMRK = AttributesEnum.ParamRmrk.index();
    public static final int LOVFDBKPARAMVO1 = AttributesEnum.LOVFdbkParamVO1.index();
    public static final int LOVPARAMVO1 = AttributesEnum.LOVParamVO1.index();
    public static final int LOVPARAMSETVO1 = AttributesEnum.LOVParamSetVO1.index();
    public static final int LOVPARAMVALTYPEVO1 = AttributesEnum.LOVParamValTypeVO1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public MnfFdbkParamVORowImpl() {
    }

    /**
     * Gets MnfFdbkParamEO entity object.
     * @return the MnfFdbkParamEO
     */
    public MnfFdbkParamEOImpl getMnfFdbkParamEO() {
        return (MnfFdbkParamEOImpl) getEntity(ENTITY_MNFFDBKPARAMEO);
    }

    /**
     * Gets the attribute value for CLD_ID using the alias name CldId.
     * @return the CLD_ID
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as attribute value for CLD_ID using the alias name CldId.
     * @param value value to set the CLD_ID
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for SLOC_ID using the alias name SlocId.
     * @return the SLOC_ID
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for SLOC_ID using the alias name SlocId.
     * @param value value to set the SLOC_ID
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for ORG_ID using the alias name OrgId.
     * @return the ORG_ID
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as attribute value for ORG_ID using the alias name OrgId.
     * @param value value to set the ORG_ID
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for HO_ORG_ID using the alias name HoOrgId.
     * @return the HO_ORG_ID
     */
    public String getHoOrgId() {
        return (String) getAttributeInternal(HOORGID);
    }

    /**
     * Sets <code>value</code> as attribute value for HO_ORG_ID using the alias name HoOrgId.
     * @param value value to set the HO_ORG_ID
     */
    public void setHoOrgId(String value) {
        setAttributeInternal(HOORGID, value);
    }

    /**
     * Gets the attribute value for DOC_ID using the alias name DocId.
     * @return the DOC_ID
     */
    public String getDocId() {
        return (String) getAttributeInternal(DOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for DOC_ID using the alias name DocId.
     * @param value value to set the DOC_ID
     */
    public void setDocId(String value) {
        setAttributeInternal(DOCID, value);
    }

    /**
     * Gets the attribute value for PARAM_ID using the alias name ParamId.
     * @return the PARAM_ID
     */
    public String getParamId() {
        return (String) getAttributeInternal(PARAMID);
    }

    /**
     * Sets <code>value</code> as attribute value for PARAM_ID using the alias name ParamId.
     * @param value value to set the PARAM_ID
     */
    public void setParamId(String value) {
        setAttributeInternal(PARAMID, value);
    }

    /**
     * Gets the attribute value for PARAM_VAL using the alias name ParamVal.
     * @return the PARAM_VAL
     */
    public Number getParamVal() {
        return (Number) getAttributeInternal(PARAMVAL);
    }

    /**
     * Sets <code>value</code> as attribute value for PARAM_VAL using the alias name ParamVal.
     * @param value value to set the PARAM_VAL
     */
    public void setParamVal(Number value) {
        setAttributeInternal(PARAMVAL, value);
    }

    /**
     * Gets the attribute value for USR_ID_CREATE using the alias name UsrIdCreate.
     * @return the USR_ID_CREATE
     */
    public Integer getUsrIdCreate() {
        return (Integer) getAttributeInternal(USRIDCREATE);
    }

    /**
     * Sets <code>value</code> as attribute value for USR_ID_CREATE using the alias name UsrIdCreate.
     * @param value value to set the USR_ID_CREATE
     */
    public void setUsrIdCreate(Integer value) {
        setAttributeInternal(USRIDCREATE, value);
    }

    /**
     * Gets the attribute value for USR_ID_CREATE_DT using the alias name UsrIdCreateDt.
     * @return the USR_ID_CREATE_DT
     */
    public Timestamp getUsrIdCreateDt() {
        return (Timestamp) getAttributeInternal(USRIDCREATEDT);
    }

    /**
     * Sets <code>value</code> as attribute value for USR_ID_CREATE_DT using the alias name UsrIdCreateDt.
     * @param value value to set the USR_ID_CREATE_DT
     */
    public void setUsrIdCreateDt(Timestamp value) {
        setAttributeInternal(USRIDCREATEDT, value);
    }

    /**
     * Gets the attribute value for USR_ID_MOD using the alias name UsrIdMod.
     * @return the USR_ID_MOD
     */
    public Integer getUsrIdMod() {
        return (Integer) getAttributeInternal(USRIDMOD);
    }

    /**
     * Sets <code>value</code> as attribute value for USR_ID_MOD using the alias name UsrIdMod.
     * @param value value to set the USR_ID_MOD
     */
    public void setUsrIdMod(Integer value) {
        setAttributeInternal(USRIDMOD, value);
    }

    /**
     * Gets the attribute value for USR_ID_MOD_DT using the alias name UsrIdModDt.
     * @return the USR_ID_MOD_DT
     */
    public Timestamp getUsrIdModDt() {
        return (Timestamp) getAttributeInternal(USRIDMODDT);
    }

    /**
     * Sets <code>value</code> as attribute value for USR_ID_MOD_DT using the alias name UsrIdModDt.
     * @param value value to set the USR_ID_MOD_DT
     */
    public void setUsrIdModDt(Timestamp value) {
        setAttributeInternal(USRIDMODDT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute transName.
     * @return the transName
     */
    public String gettransName() {
        if (getParamId() != null) {
            if (getAM().getLOVAllParameterForViewMode1().getFilteredRows("ParamId", getParamId()).length > 0) {
                settransParamBasis(Integer.parseInt(getAM().getLOVAllParameterForViewMode1().getFilteredRows("ParamId",
                                                                                      getParamId())[0].getAttribute("ParamBasis").toString()));
                return (getAM().getLOVAllParameterForViewMode1().getFilteredRows("ParamId",
                                                               getParamId()))[0].getAttribute("ParamNme").toString();
            }
        }
        return (String) getAttributeInternal(TRANSNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute transName.
     * @param value value to set the  transName
     */
    public void settransName(String value) {
        setAttributeInternal(TRANSNAME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute transType.
     * @return the transType
     */
    public String gettransType() {
        if (getParamId() != null) {
            if (getAM().getLOVAllParameterForViewMode1().getFilteredRows("ParamId", getParamId()).length > 0) {
                return (getAM().getLOVAllParameterForViewMode1().getFilteredRows("ParamId",
                                                               getParamId()))[0].getAttribute("AttNme").toString();
            }
        }
        return (String) getAttributeInternal(TRANSTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute transType.
     * @param value value to set the  transType
     */
    public void settransType(String value) {
        setAttributeInternal(TRANSTYPE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ParameterId.
     * @return the ParameterId
     */
    public String getParameterId() {
        return (String) getAttributeInternal(PARAMETERID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ParameterId.
     * @param value value to set the  ParameterId
     */
    public void setParameterId(String value) {
        setAttributeInternal(PARAMETERID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute transParamSet.
     * @return the transParamSet
     */
    public String gettransParamSet() {
        if (gettransParamSetId() != null && getParamId()!=null) {
            if (getAM().getLOVAllParameterSetForViewMode1().getFilteredRows("ParamSetId", gettransParamSetId()).length > 0) {
                return (getAM().getLOVAllParameterSetForViewMode1().getFilteredRows("ParamSetId",
                                                               gettransParamSetId()))[0].getAttribute("ParamSetDesc").toString();
            }
        }
        return (String) getAttributeInternal(TRANSPARAMSET);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute transParamSet.
     * @param value value to set the  transParamSet
     */
    public void settransParamSet(String value) {
        if (gettransParamSetId() != null && getParamId()!=null) {
            if (getAM().getLOVAllParameterSetForViewMode1().getFilteredRows("ParamSetId", gettransParamSetId()).length > 0) {
                setAttributeInternal(TRANSPARAMSET, getAM().getLOVAllParameterSetForViewMode1().getFilteredRows("ParamSetId", gettransParamSetId())[0].getAttribute("ParamSetDesc").toString());
            }
        }
        else {
            setAttributeInternal(TRANSPARAMSET, value);
        }
    }

    /**
     * Gets the attribute value for the calculated attribute transParamSetId.
     * @return the transParamSetId
     */
    public String gettransParamSetId() {
        if (getParamId()!=null) {
            if (getAM().getLOVAllParameterForViewMode1().getFilteredRows("ParamId", getParamId()).length > 0) {
                return (getAM().getLOVAllParameterForViewMode1().getFilteredRows("ParamId",
                                                               getParamId()))[0].getAttribute("ParamSetId").toString();
            }
        }
        return (String) getAttributeInternal(TRANSPARAMSETID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute transParamSetId.
     * @param value value to set the  transParamSetId
     */
    public void settransParamSetId(String value) {
        if (getParamId()!=null) {
            if (getAM().getLOVAllParameterForViewMode1().getFilteredRows("ParamId", getParamId()).length > 0) {
                setAttributeInternal(TRANSPARAMSETID, (getAM().getLOVAllParameterForViewMode1().getFilteredRows("ParamId", getParamId()))[0].getAttribute("ParamSetId").toString());
            }
        }
        else {
            setAttributeInternal(TRANSPARAMSETID, value);
        }
    }

    /**
     * Gets the attribute value for the calculated attribute transParamType.
     * @return the transParamType
     */
    public Integer gettransParamType() {
        return (Integer) getAttributeInternal(TRANSPARAMTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute transParamType.
     * @param value value to set the  transParamType
     */
    public void settransParamType(Integer value) {
        setAttributeInternal(TRANSPARAMTYPE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute transParamBasis.
     * @return the transParamBasis
     */
    public Integer gettransParamBasis() {
        return (Integer) getAttributeInternal(TRANSPARAMBASIS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute transParamBasis.
     * @param value value to set the  transParamBasis
     */
    public void settransParamBasis(Integer value) {
        setAttributeInternal(TRANSPARAMBASIS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute transParamBasisName.
     * @return the transParamBasisName
     */
    public String gettransParamBasisName() {
        if(gettransParamBasis()!=null){
            if(gettransParamBasis()==31){
                return "FIXED";
            }
            else {
                return "VARIABLE";
            }
        }
        return (String) getAttributeInternal(TRANSPARAMBASISNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute transParamBasisName.
     * @param value value to set the  transParamBasisName
     */
    public void settransParamBasisName(String value) {
        if(gettransParamBasis()!=null){
            if(gettransParamBasis()==31){
                setAttributeInternal(TRANSPARAMBASISNAME, "FIXED");
            }
            else {
                setAttributeInternal(TRANSPARAMBASISNAME, "VARIABLE");
            }
        }
        setAttributeInternal(TRANSPARAMBASISNAME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute transRowKey.
     * @return the transRowKey
     */
    public Object gettransRowKey() {
        return getKey();
        //return (Object) getAttributeInternal(TRANSROWKEY);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute transRowKey.
     * @param value value to set the  transRowKey
     */
    public void settransRowKey(Object value) {
        setAttributeInternal(TRANSROWKEY, value);
    }

    /**
     * Gets the attribute value for PARAM_VAL_TYPE using the alias name ParamValType.
     * @return the PARAM_VAL_TYPE
     */
    public Integer getParamValType() {
        return (Integer) getAttributeInternal(PARAMVALTYPE);
    }

    /**
     * Sets <code>value</code> as attribute value for PARAM_VAL_TYPE using the alias name ParamValType.
     * @param value value to set the PARAM_VAL_TYPE
     */
    public void setParamValType(Integer value) {
        setAttributeInternal(PARAMVALTYPE, value);
    }

    /**
     * Gets the attribute value for TLRNC_LOWER using the alias name TlrncLower.
     * @return the TLRNC_LOWER
     */
    public Number getTlrncLower() {
        return (Number) getAttributeInternal(TLRNCLOWER);
    }

    /**
     * Sets <code>value</code> as attribute value for TLRNC_LOWER using the alias name TlrncLower.
     * @param value value to set the TLRNC_LOWER
     */
    public void setTlrncLower(Number value) {
        setAttributeInternal(TLRNCLOWER, value);
    }

    /**
     * Gets the attribute value for TLRNC_TYPE using the alias name TlrncType.
     * @return the TLRNC_TYPE
     */
    public String getTlrncType() {
        return (String) getAttributeInternal(TLRNCTYPE);
    }

    /**
     * Sets <code>value</code> as attribute value for TLRNC_TYPE using the alias name TlrncType.
     * @param value value to set the TLRNC_TYPE
     */
    public void setTlrncType(String value) {
        setAttributeInternal(TLRNCTYPE, value);
    }

    /**
     * Gets the attribute value for TLRNC_UPPER using the alias name TlrncUpper.
     * @return the TLRNC_UPPER
     */
    public Number getTlrncUpper() {
        return (Number) getAttributeInternal(TLRNCUPPER);
    }

    /**
     * Sets <code>value</code> as attribute value for TLRNC_UPPER using the alias name TlrncUpper.
     * @param value value to set the TLRNC_UPPER
     */
    public void setTlrncUpper(Number value) {
        setAttributeInternal(TLRNCUPPER, value);
    }

    /**
     * Gets the attribute value for UPPER_LIMIT using the alias name UpperLimit.
     * @return the UPPER_LIMIT
     */
    public Number getUpperLimit() {
        return (Number) getAttributeInternal(UPPERLIMIT);
    }

    /**
     * Sets <code>value</code> as attribute value for UPPER_LIMIT using the alias name UpperLimit.
     * @param value value to set the UPPER_LIMIT
     */
    public void setUpperLimit(Number value) {
        setAttributeInternal(UPPERLIMIT, value);
    }

    /**
     * Gets the attribute value for LOWER_LIMIT using the alias name LowerLimit.
     * @return the LOWER_LIMIT
     */
    public Number getLowerLimit() {
        return (Number) getAttributeInternal(LOWERLIMIT);
    }

    /**
     * Sets <code>value</code> as attribute value for LOWER_LIMIT using the alias name LowerLimit.
     * @param value value to set the LOWER_LIMIT
     */
    public void setLowerLimit(Number value) {
        setAttributeInternal(LOWERLIMIT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute transParamValTypeName.
     * @return the transParamValTypeName
     */
    public String gettransParamValTypeName() {
        if(getParamValType()!=null){
            if(getParamValType()==112){
                return "Mandatory";
            }
            else{
                return "Value Based";
            }
        }
        return (String) getAttributeInternal(TRANSPARAMVALTYPENAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute transParamValTypeName.
     * @param value value to set the  transParamValTypeName
     */
    public void settransParamValTypeName(String value) {
        if(getParamValType()!=null){
            if(getParamValType()==112){
                setAttributeInternal(TRANSPARAMVALTYPENAME, "Mandatory");
            }
            else{
                setAttributeInternal(TRANSPARAMVALTYPENAME, "Value Based");
            }
        }
        //setAttributeInternal(TRANSPARAMVALTYPENAME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute transParamUomName.
     * @return the transParamUomName
     */
    public String gettransParamUomName() {
        if(getParamId()!=null){
            Row r[] = getAM().getLOVAllParameterForViewMode1().getFilteredRows("ParamId", getParamId());
            if(r.length>0){
                if (r[0].getAttribute("Uomdesc")!=null) 
                    return r[0].getAttribute("Uomdesc").toString();
            }
        }
        return (String) getAttributeInternal(TRANSPARAMUOMNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute transParamUomName.
     * @param value value to set the  transParamUomName
     */
    public void settransParamUomName(String value) {
        if(getParamId()!=null){
            Row r[] = getAM().getLOVAllParameterForViewMode1().getFilteredRows("ParamId", getParamId());
            if(r.length>0){
                if (r[0].getAttribute("Uomdesc")!=null) 
                setAttributeInternal(TRANSPARAMUOMNAME, r[0].getAttribute("Uomdesc").toString());   
            }
        }
        setAttributeInternal(TRANSPARAMUOMNAME, value);
    }

    /**
     * Gets the attribute value for PARAM_RMRK using the alias name ParamRmrk.
     * @return the PARAM_RMRK
     */
    public String getParamRmrk() {
        return (String) getAttributeInternal(PARAMRMRK);
    }

    /**
     * Sets <code>value</code> as attribute value for PARAM_RMRK using the alias name ParamRmrk.
     * @param value value to set the PARAM_RMRK
     */
    public void setParamRmrk(String value) {
        setAttributeInternal(PARAMRMRK, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LOVFdbkParamVO1.
     */
    public RowSet getLOVFdbkParamVO1() {
        return (RowSet) getAttributeInternal(LOVFDBKPARAMVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LOVParamVO1.
     */
    public RowSet getLOVParamVO1() {
        RowSet rs = (RowSet)getAttributeInternal(LOVPARAMVO1);
        rs.getViewObject().clearCache();
        rs.setNamedWhereClauseParam("ParamSetIdBindVar", gettransParamSetId());
        rs.resetExecuted();
        return rs;
        //return (RowSet) getAttributeInternal(LOVPARAMVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LOVParamSetVO1.
     */
    public RowSet getLOVParamSetVO1() {
        return (RowSet) getAttributeInternal(LOVPARAMSETVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LOVParamValTypeVO1.
     */
    public RowSet getLOVParamValTypeVO1() {
        return (RowSet) getAttributeInternal(LOVPARAMVALTYPEVO1);
    }

    private MNFShopFloorFeedbackAMImpl getAM() {
        return (MNFShopFloorFeedbackAMImpl) getApplicationModule();
    }
}

