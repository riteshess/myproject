package mnfshopfloorfeedback.model.views;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import oracle.jbo.ViewCriteria;
import oracle.jbo.server.QueryCollection;
import oracle.jbo.server.SQLBuilder;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.ViewRowSetImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Sep 17 18:15:40 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class LOVSearchViewVOImpl extends ViewObjectImpl {
    /**
     * This is the default constructor (do not remove).
     */
    public LOVSearchViewVOImpl() {
    }


    protected boolean showSql = false;
         @Override
            public long getEstimatedRowCount() {
                long init = System.currentTimeMillis();
                long counter = super.getEstimatedRowCount();
                long end = System.currentTimeMillis() - init;
                
               if (showSql)
                   System.out.println("VO: " + this.getName() + ", from AM: " + this.getApplicationModule().getName() + ", executes SQL Count in: " + end + " (miliseconds)");
                
                return counter;
            }
        @Override
        protected void executeQueryForCollection(Object qc, Object[] params, int noUserParams) {
            short fetchSize = 10;
             if (this.getRangeSize() > 0) {
                fetchSize = ((short)(this.getRangeSize() + 3));
            }
            if (this.getRangeSize() < 10) {
               // System.out.println("Potentially small range size : " + this.getRangeSize() + " for table VO : " +
               //             this.getViewObject().getDefFullName());
                fetchSize = 10;
            }
      
           // System.out.println("Original fetch size : " + this.getFetchSize() + ", Updated fetch size : " + fetchSize +
           //             " for : " + this.getViewObject().getDefFullName());
            if (fetchSize > this.getFetchSize()) {
              //  System.out.println("Updating fetch size : " + fetchSize);
                this.setFetchSize(fetchSize);
            } else {
               // System.out.println("Current fetch size : " + this.getFetchSize() + " for : " +
               //             this.getViewObject().getDefFullName());
            } 
      
            long init = System.currentTimeMillis();
            super.executeQueryForCollection(qc, params, noUserParams);
            long end = System.currentTimeMillis() - init;
      
            //if (showSql)
           //     System.out.println("VO: " + this.getName() + ", from AM: " + this.getApplicationModule().getName() +
            //                  ", executes SQL in: " + end + " (miliseconds)");
        }
        @Override
           protected void bindParametersForCollection(QueryCollection queryCollection, Object[] object, PreparedStatement preparedStatement) throws SQLException, SQLException {
               // TODO Implement this method
             if (showSql)
                 logQueryStatementAndBindParameters(queryCollection, object);
               
               super.bindParametersForCollection(queryCollection, object, preparedStatement);
           } 
            
           /**
            * method used to introspect the query produced at runtime by the vo.
            * @param qc
            * @param params
            */
             private void logQueryStatementAndBindParameters(QueryCollection qc, Object[] params) {
               String vrsiName = null;
               if (qc != null) {
                   ViewRowSetImpl vrsi = qc.getRowSetImpl();
                   vrsiName = vrsi.isDefaultRS() ? "<Default>" : vrsi.getName();
               }
               String voName = getName();
               String voDefName = getDefFullName();
               if (qc != null) {
                  // System.out.println("----[Exec query for VO=" + voName + ", RS=" + vrsiName + "]----");
               } else {
                  // System.out.println("----[Exec COUNT query for VO=" + voName + "]----");
               }
              // System.out.println("VO Definition Name = {0}"+ voDefName);
      
               String dbVCs = appliedCriteriaString(ViewCriteria.CRITERIA_MODE_QUERY);
               if (!dbVCs.isEmpty()) {
                  // System.out.println("Applied Database VCs = {0} "+ dbVCs);
               }
      
               String memVCs = appliedCriteriaString(ViewCriteria.CRITERIA_MODE_CACHE);
               if (!memVCs.isEmpty()) {
                   //System.out.println("Applied In-Memory VCs = {0} "+ memVCs);
               }
      
               String bothVCs = appliedCriteriaString(ViewCriteria.CRITERIA_MODE_QUERY | ViewCriteria.CRITERIA_MODE_CACHE);
               if (!bothVCs.isEmpty()) {
                  // System.out.println("Applied 'Both' VCs = {0}"+ bothVCs);
               }
      
               System.out.println("Generated query : {0}"+ getQuery());
      
               if (params != null) {
                   if (getBindingStyle() == SQLBuilder.BINDING_STYLE_ORACLE_NAME) {
                       Map<String, Object> bindsMap = new HashMap<String, Object>(params.length);
                       for (Object param : params) {
                           Object[] nameValue = (Object[])param;
                           String name = (String)nameValue[0];
                           Object value = nameValue[1];
                           bindsMap.put(name, value);
                       }
                       System.out.println("Bind Variables : {0}"+ bindsMap);
                   }
               }
           }
      
           @Override
           public ViewRowImpl createInstanceFromResultSet(QueryCollection queryCollection, ResultSet resultSet) {
               ViewRowImpl row = super.createInstanceFromResultSet(queryCollection, resultSet);
               if (showSql)
                  System.out.println("Fetching " + this.getViewObject().getName() + " row with the key " + row.getKey());
               return row;
      
           }
      
           private String appliedCriteriaString(int mode) {
               ViewCriteria[] appliedCriterias = getApplyViewCriterias(mode);
               String result = "";
               if (appliedCriterias != null && appliedCriterias.length > 0) {
                   List<String> list = new ArrayList<String>(appliedCriterias.length);
                   for (ViewCriteria vc : appliedCriterias) {
                       list.add(vc.getName());
                   }
                   result = list.toString();
               }
               return result;
           }

    /**
     * Returns the bind variable value for CLDBIND.
     * @return bind variable value for CLDBIND
     */
    public String getCLDBIND() {
        return (String) getNamedWhereClauseParam("CLDBIND");
    }

    /**
     * Sets <code>value</code> for bind variable CLDBIND.
     * @param value value to bind as CLDBIND
     */
    public void setCLDBIND(String value) {
        setNamedWhereClauseParam("CLDBIND", value);
    }

    /**
     * Returns the bind variable value for SLOCBIND.
     * @return bind variable value for SLOCBIND
     */
    public String getSLOCBIND() {
        return (String) getNamedWhereClauseParam("SLOCBIND");
    }

    /**
     * Sets <code>value</code> for bind variable SLOCBIND.
     * @param value value to bind as SLOCBIND
     */
    public void setSLOCBIND(String value) {
        setNamedWhereClauseParam("SLOCBIND", value);
    }

    /**
     * Returns the bind variable value for HOBIND.
     * @return bind variable value for HOBIND
     */
    public String getHOBIND() {
        return (String) getNamedWhereClauseParam("HOBIND");
    }

    /**
     * Sets <code>value</code> for bind variable HOBIND.
     * @param value value to bind as HOBIND
     */
    public void setHOBIND(String value) {
        setNamedWhereClauseParam("HOBIND", value);
    }

    /**
     * Returns the bind variable value for ORGBIND.
     * @return bind variable value for ORGBIND
     */
    public String getORGBIND() {
        return (String) getNamedWhereClauseParam("ORGBIND");
    }

    /**
     * Sets <code>value</code> for bind variable ORGBIND.
     * @param value value to bind as ORGBIND
     */
    public void setORGBIND(String value) {
        setNamedWhereClauseParam("ORGBIND", value);
    }

    /**
     * Returns the bind variable value for FDBKIDBIND.
     * @return bind variable value for FDBKIDBIND
     */
    public String getFDBKIDBIND() {
        return (String) getNamedWhereClauseParam("FDBKIDBIND");
    }

    /**
     * Sets <code>value</code> for bind variable FDBKIDBIND.
     * @param value value to bind as FDBKIDBIND
     */
    public void setFDBKIDBIND(String value) {
        setNamedWhereClauseParam("FDBKIDBIND", value);
    }

    /**
     * Returns the bind variable value for FDBKBASISBIND.
     * @return bind variable value for FDBKBASISBIND
     */
    public String getFDBKBASISBIND() {
        return (String) getNamedWhereClauseParam("FDBKBASISBIND");
    }

    /**
     * Sets <code>value</code> for bind variable FDBKBASISBIND.
     * @param value value to bind as FDBKBASISBIND
     */
    public void setFDBKBASISBIND(String value) {
        setNamedWhereClauseParam("FDBKBASISBIND", value);
    }

    /**
     * Returns the bind variable value for JCIDBIND.
     * @return bind variable value for JCIDBIND
     */
    public String getJCIDBIND() {
        return (String) getNamedWhereClauseParam("JCIDBIND");
    }

    /**
     * Sets <code>value</code> for bind variable JCIDBIND.
     * @param value value to bind as JCIDBIND
     */
    public void setJCIDBIND(String value) {
        setNamedWhereClauseParam("JCIDBIND", value);
    }

    /**
     * Returns the bind variable value for RCIDNIND.
     * @return bind variable value for RCIDNIND
     */
    public String getRCIDNIND() {
        return (String) getNamedWhereClauseParam("RCIDNIND");
    }

    /**
     * Sets <code>value</code> for bind variable RCIDNIND.
     * @param value value to bind as RCIDNIND
     */
    public void setRCIDNIND(String value) {
        setNamedWhereClauseParam("RCIDNIND", value);
    }

    /**
     * Returns the bind variable value for CREATEFROMBIND.
     * @return bind variable value for CREATEFROMBIND
     */
    public Timestamp getCREATEFROMBIND() {
        return (Timestamp) getNamedWhereClauseParam("CREATEFROMBIND");
    }

    /**
     * Sets <code>value</code> for bind variable CREATEFROMBIND.
     * @param value value to bind as CREATEFROMBIND
     */
    public void setCREATEFROMBIND(Timestamp value) {
        setNamedWhereClauseParam("CREATEFROMBIND", value);
    }

    /**
     * Returns the bind variable value for CREATETOBIND.
     * @return bind variable value for CREATETOBIND
     */
    public Timestamp getCREATETOBIND() {
        return (Timestamp) getNamedWhereClauseParam("CREATETOBIND");
    }

    /**
     * Sets <code>value</code> for bind variable CREATETOBIND.
     * @param value value to bind as CREATETOBIND
     */
    public void setCREATETOBIND(Timestamp value) {
        setNamedWhereClauseParam("CREATETOBIND", value);
    }

    /**
     * Returns the bind variable value for USERBIND.
     * @return bind variable value for USERBIND
     */
    public String getUSERBIND() {
        return (String) getNamedWhereClauseParam("USERBIND");
    }

    /**
     * Sets <code>value</code> for bind variable USERBIND.
     * @param value value to bind as USERBIND
     */
    public void setUSERBIND(String value) {
        setNamedWhereClauseParam("USERBIND", value);
    }
}

