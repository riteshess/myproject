package mnfshopfloorfeedback.model.views;

import mnfshopfloorfeedback.model.entities.MnfFdbkEOImpl;

import mnfshopfloorfeedback.model.services.MNFShopFloorFeedbackAMImpl;
import mnfshopfloorfeedback.model.views.common.MnfFdbkVORow;

import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.RowSet;
import oracle.jbo.domain.NClobDomain;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Sep 12 14:42:37 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MnfFdbkVORowImpl extends ViewRowImpl implements MnfFdbkVORow {


    public static final int ENTITY_MNFFDBKEO = 0;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CldId,
        SlocId,
        HoOrgId,
        OrgId,
        DocId,
        DocDt,
        FdbkType,
        JcId,
        RcId,
        FdbkId,
        FdbkRmrk,
        UsrIdCreate,
        UsrIdCreateDt,
        UsrIdMod,
        UsrIdModDt,
        FdbkBasis,
        RefFdbkId,
        FreezeFdbk,
        transShiftName,
        transWCName,
        transWSName,
        transEmpName,
        transStartDt,
        transEndDate,
        transRefDocId,
        transJCId,
        transRcId,
        transOpId,
        transOpSrNo,
        transOpDesc,
        OpId,
        OpSrNo,
        transOutputItm,
        transQty,
        MnfFdbkParam,
        MnfFdbkAttch,
        LOVFeedbackTypeVO1,
        LOVFdbkBasisVO1,
        MnfFdbkVO1,
        LOVAppUserVO1,
        LOVMnfRCVO1,
        LOVMnfJCVO1,
        LOVFeedbackIdVO1,
        LOVCopyPreviousFdbkVO1,
        LOVJcRcInfoViewVO1,
        LOVJcRcInfoViewVO2;
        static AttributesEnum[] vals = null;
        ;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int DOCDT = AttributesEnum.DocDt.index();
    public static final int FDBKTYPE = AttributesEnum.FdbkType.index();
    public static final int JCID = AttributesEnum.JcId.index();
    public static final int RCID = AttributesEnum.RcId.index();
    public static final int FDBKID = AttributesEnum.FdbkId.index();
    public static final int FDBKRMRK = AttributesEnum.FdbkRmrk.index();
    public static final int USRIDCREATE = AttributesEnum.UsrIdCreate.index();
    public static final int USRIDCREATEDT = AttributesEnum.UsrIdCreateDt.index();
    public static final int USRIDMOD = AttributesEnum.UsrIdMod.index();
    public static final int USRIDMODDT = AttributesEnum.UsrIdModDt.index();
    public static final int FDBKBASIS = AttributesEnum.FdbkBasis.index();
    public static final int REFFDBKID = AttributesEnum.RefFdbkId.index();
    public static final int FREEZEFDBK = AttributesEnum.FreezeFdbk.index();
    public static final int TRANSSHIFTNAME = AttributesEnum.transShiftName.index();
    public static final int TRANSWCNAME = AttributesEnum.transWCName.index();
    public static final int TRANSWSNAME = AttributesEnum.transWSName.index();
    public static final int TRANSEMPNAME = AttributesEnum.transEmpName.index();
    public static final int TRANSSTARTDT = AttributesEnum.transStartDt.index();
    public static final int TRANSENDDATE = AttributesEnum.transEndDate.index();
    public static final int TRANSREFDOCID = AttributesEnum.transRefDocId.index();
    public static final int TRANSJCID = AttributesEnum.transJCId.index();
    public static final int TRANSRCID = AttributesEnum.transRcId.index();
    public static final int TRANSOPID = AttributesEnum.transOpId.index();
    public static final int TRANSOPSRNO = AttributesEnum.transOpSrNo.index();
    public static final int TRANSOPDESC = AttributesEnum.transOpDesc.index();
    public static final int OPID = AttributesEnum.OpId.index();
    public static final int OPSRNO = AttributesEnum.OpSrNo.index();
    public static final int TRANSOUTPUTITM = AttributesEnum.transOutputItm.index();
    public static final int TRANSQTY = AttributesEnum.transQty.index();
    public static final int MNFFDBKPARAM = AttributesEnum.MnfFdbkParam.index();
    public static final int MNFFDBKATTCH = AttributesEnum.MnfFdbkAttch.index();
    public static final int LOVFEEDBACKTYPEVO1 = AttributesEnum.LOVFeedbackTypeVO1.index();
    public static final int LOVFDBKBASISVO1 = AttributesEnum.LOVFdbkBasisVO1.index();
    public static final int MNFFDBKVO1 = AttributesEnum.MnfFdbkVO1.index();
    public static final int LOVAPPUSERVO1 = AttributesEnum.LOVAppUserVO1.index();
    public static final int LOVMNFRCVO1 = AttributesEnum.LOVMnfRCVO1.index();
    public static final int LOVMNFJCVO1 = AttributesEnum.LOVMnfJCVO1.index();
    public static final int LOVFEEDBACKIDVO1 = AttributesEnum.LOVFeedbackIdVO1.index();
    public static final int LOVCOPYPREVIOUSFDBKVO1 = AttributesEnum.LOVCopyPreviousFdbkVO1.index();
    public static final int LOVJCRCINFOVIEWVO1 = AttributesEnum.LOVJcRcInfoViewVO1.index();
    public static final int LOVJCRCINFOVIEWVO2 = AttributesEnum.LOVJcRcInfoViewVO2.index();

    /**
     * This is the default constructor (do not remove).
     */
    public MnfFdbkVORowImpl() {
    }

    private MNFShopFloorFeedbackAMImpl getAm() {
        return (MNFShopFloorFeedbackAMImpl) getApplicationModule();
    }

    /**
     * Gets MnfFdbkEO entity object.
     * @return the MnfFdbkEO
     */
    public MnfFdbkEOImpl getMnfFdbkEO() {
        return (MnfFdbkEOImpl) getEntity(ENTITY_MNFFDBKEO);
    }

    /**
     * Gets the attribute value for CLD_ID using the alias name CldId.
     * @return the CLD_ID
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as attribute value for CLD_ID using the alias name CldId.
     * @param value value to set the CLD_ID
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for SLOC_ID using the alias name SlocId.
     * @return the SLOC_ID
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for SLOC_ID using the alias name SlocId.
     * @param value value to set the SLOC_ID
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for HO_ORG_ID using the alias name HoOrgId.
     * @return the HO_ORG_ID
     */
    public String getHoOrgId() {
        return (String) getAttributeInternal(HOORGID);
    }

    /**
     * Sets <code>value</code> as attribute value for HO_ORG_ID using the alias name HoOrgId.
     * @param value value to set the HO_ORG_ID
     */
    public void setHoOrgId(String value) {
        setAttributeInternal(HOORGID, value);
    }

    /**
     * Gets the attribute value for ORG_ID using the alias name OrgId.
     * @return the ORG_ID
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as attribute value for ORG_ID using the alias name OrgId.
     * @param value value to set the ORG_ID
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for DOC_ID using the alias name DocId.
     * @return the DOC_ID
     */
    public String getDocId() {
        return (String) getAttributeInternal(DOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for DOC_ID using the alias name DocId.
     * @param value value to set the DOC_ID
     */
    public void setDocId(String value) {
        setAttributeInternal(DOCID, value);
    }

    /**
     * Gets the attribute value for DOC_DT using the alias name DocDt.
     * @return the DOC_DT
     */
    public Timestamp getDocDt() {
        return (Timestamp) getAttributeInternal(DOCDT);
    }

    /**
     * Sets <code>value</code> as attribute value for DOC_DT using the alias name DocDt.
     * @param value value to set the DOC_DT
     */
    public void setDocDt(Timestamp value) {
        setAttributeInternal(DOCDT, value);
    }

    /**
     * Gets the attribute value for FDBK_TYPE using the alias name FdbkType.
     * @return the FDBK_TYPE
     */
    public Integer getFdbkType() {
        return (Integer) getAttributeInternal(FDBKTYPE);
    }

    /**
     * Sets <code>value</code> as attribute value for FDBK_TYPE using the alias name FdbkType.
     * @param value value to set the FDBK_TYPE
     */
    public void setFdbkType(Integer value) {
        setAttributeInternal(FDBKTYPE, value);
    }

    /**
     * Gets the attribute value for JC_ID using the alias name JcId.
     * @return the JC_ID
     */
    public String getJcId() {
        return (String) getAttributeInternal(JCID);
    }

    /**
     * Sets <code>value</code> as attribute value for JC_ID using the alias name JcId.
     * @param value value to set the JC_ID
     */
    public void setJcId(String value) {
        setAttributeInternal(JCID, value);
    }

    /**
     * Gets the attribute value for RC_ID using the alias name RcId.
     * @return the RC_ID
     */
    public String getRcId() {
        return (String) getAttributeInternal(RCID);
    }

    /**
     * Sets <code>value</code> as attribute value for RC_ID using the alias name RcId.
     * @param value value to set the RC_ID
     */
    public void setRcId(String value) {
        setAttributeInternal(RCID, value);
    }

    /**
     * Gets the attribute value for FDBK_ID using the alias name FdbkId.
     * @return the FDBK_ID
     */
    public String getFdbkId() {
        return (String) getAttributeInternal(FDBKID);
    }

    /**
     * Sets <code>value</code> as attribute value for FDBK_ID using the alias name FdbkId.
     * @param value value to set the FDBK_ID
     */
    public void setFdbkId(String value) {
        setAttributeInternal(FDBKID, value);
    }

    /**
     * Gets the attribute value for FDBK_RMRK using the alias name FdbkRmrk.
     * @return the FDBK_RMRK
     */
    public String getFdbkRmrk() {
        return (String) getAttributeInternal(FDBKRMRK);
    }

    /**
     * Sets <code>value</code> as attribute value for FDBK_RMRK using the alias name FdbkRmrk.
     * @param value value to set the FDBK_RMRK
     */
    public void setFdbkRmrk(String value) {
        setAttributeInternal(FDBKRMRK, value);
    }

    /**
     * Gets the attribute value for USR_ID_CREATE using the alias name UsrIdCreate.
     * @return the USR_ID_CREATE
     */
    public Integer getUsrIdCreate() {
        return (Integer) getAttributeInternal(USRIDCREATE);
    }

    /**
     * Sets <code>value</code> as attribute value for USR_ID_CREATE using the alias name UsrIdCreate.
     * @param value value to set the USR_ID_CREATE
     */
    public void setUsrIdCreate(Integer value) {
        setAttributeInternal(USRIDCREATE, value);
    }

    /**
     * Gets the attribute value for USR_ID_CREATE_DT using the alias name UsrIdCreateDt.
     * @return the USR_ID_CREATE_DT
     */
    public Timestamp getUsrIdCreateDt() {
        return (Timestamp) getAttributeInternal(USRIDCREATEDT);
    }

    /**
     * Sets <code>value</code> as attribute value for USR_ID_CREATE_DT using the alias name UsrIdCreateDt.
     * @param value value to set the USR_ID_CREATE_DT
     */
    public void setUsrIdCreateDt(Timestamp value) {
        setAttributeInternal(USRIDCREATEDT, value);
    }

    /**
     * Gets the attribute value for USR_ID_MOD using the alias name UsrIdMod.
     * @return the USR_ID_MOD
     */
    public Integer getUsrIdMod() {
        return (Integer) getAttributeInternal(USRIDMOD);
    }

    /**
     * Sets <code>value</code> as attribute value for USR_ID_MOD using the alias name UsrIdMod.
     * @param value value to set the USR_ID_MOD
     */
    public void setUsrIdMod(Integer value) {
        setAttributeInternal(USRIDMOD, value);
    }

    /**
     * Gets the attribute value for USR_ID_MOD_DT using the alias name UsrIdModDt.
     * @return the USR_ID_MOD_DT
     */
    public Timestamp getUsrIdModDt() {
        return (Timestamp) getAttributeInternal(USRIDMODDT);
    }

    /**
     * Sets <code>value</code> as attribute value for USR_ID_MOD_DT using the alias name UsrIdModDt.
     * @param value value to set the USR_ID_MOD_DT
     */
    public void setUsrIdModDt(Timestamp value) {
        setAttributeInternal(USRIDMODDT, value);
    }

    /**
     * Gets the attribute value for FDBK_BASIS using the alias name FdbkBasis.
     * @return the FDBK_BASIS
     */
    public Integer getFdbkBasis() {
        return (Integer) getAttributeInternal(FDBKBASIS);
    }

    /**
     * Sets <code>value</code> as attribute value for FDBK_BASIS using the alias name FdbkBasis.
     * @param value value to set the FDBK_BASIS
     */
    public void setFdbkBasis(Integer value) {
        setAttributeInternal(FDBKBASIS, value);
    }

    /**
     * Gets the attribute value for REF_FDBK_ID using the alias name RefFdbkId.
     * @return the REF_FDBK_ID
     */
    public String getRefFdbkId() {
        return (String) getAttributeInternal(REFFDBKID);
    }

    /**
     * Sets <code>value</code> as attribute value for REF_FDBK_ID using the alias name RefFdbkId.
     * @param value value to set the REF_FDBK_ID
     */
    public void setRefFdbkId(String value) {
        setAttributeInternal(REFFDBKID, value);
    }

    /**
     * Gets the attribute value for FREEZE_FDBK using the alias name FreezeFdbk.
     * @return the FREEZE_FDBK
     */
    public String getFreezeFdbk() {
        return (String) getAttributeInternal(FREEZEFDBK);
    }

    /**
     * Sets <code>value</code> as attribute value for FREEZE_FDBK using the alias name FreezeFdbk.
     * @param value value to set the FREEZE_FDBK
     */
    public void setFreezeFdbk(String value) {
        setAttributeInternal(FREEZEFDBK, value);
    }

    /**
     * Gets the attribute value for the calculated attribute transShiftName.
     * @return the transShiftName
     */
    public String gettransShiftName() {
        if (getJcId() != null) {
            getAM().getLOVJcRcInfoView1().setBindType(new Number(26004));
            ViewObjectImpl voImpl = getAM().getLOVJcRcInfoView1();
            RowQualifier rowQualifier = new RowQualifier(voImpl);
            rowQualifier.setWhereClause("DocId='"+getJcId()+"' AND OpId='"+getOpId()+"' AND OpSrNo="+getOpSrNo());
            Row[] filteredRows = voImpl.getFilteredRows(rowQualifier); 
            if (filteredRows.length > 0) {
                return (filteredRows)[0].getAttribute("ShiftDesc").toString();
            }
        }
        if (getRcId() != null) {
            getAM().getLOVJcRcInfoView1().setBindType(new Number(26003));
                ViewObjectImpl voImpl = getAM().getLOVJcRcInfoView1();
                RowQualifier rowQualifier = new RowQualifier(voImpl);
                rowQualifier.setWhereClause("DocId='"+getRcId()+"' AND OpId='"+getOpId()+"' AND OpSrNo="+getOpSrNo());
                Row[] filteredRows = voImpl.getFilteredRows(rowQualifier); 
                if (filteredRows.length > 0) {
                return (String)(filteredRows)[0].getAttribute("ShiftDesc");
            }
        }
            return (String) getAttributeInternal(TRANSSHIFTNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute transShiftName.
     * @param value value to set the  transShiftName
     */
    public void settransShiftName(String value) {
        setAttributeInternal(TRANSSHIFTNAME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute transWCName.
     * @return the transWCName
     */
    public String gettransWCName() {
            if (getJcId() != null) {
                getAM().getLOVJcRcInfoView1().setBindType(new Number(26004));
                ViewObjectImpl voImpl = getAM().getLOVJcRcInfoView1();
                RowQualifier rowQualifier = new RowQualifier(voImpl);
                rowQualifier.setWhereClause("DocId='"+getJcId()+"' AND OpId='"+getOpId()+"' AND OpSrNo="+getOpSrNo());
                Row[] filteredRows = voImpl.getFilteredRows(rowQualifier); 
                if (filteredRows.length > 0) {
                    return (filteredRows)[0].getAttribute("WcDesc").toString();
                }
            }
            if (getRcId() != null) {
                getAM().getLOVJcRcInfoView1().setBindType(new Number(26003));
                    ViewObjectImpl voImpl = getAM().getLOVJcRcInfoView1();
                    RowQualifier rowQualifier = new RowQualifier(voImpl);
                    rowQualifier.setWhereClause("DocId='"+getRcId()+"' AND OpId='"+getOpId()+"' AND OpSrNo="+getOpSrNo());
                    Row[] filteredRows = voImpl.getFilteredRows(rowQualifier); 
                    if (filteredRows.length > 0) {
                    return (filteredRows)[0].getAttribute("WcDesc").toString();
                }
            }
            return (String) getAttributeInternal(TRANSWCNAME);
        }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute transWCName.
     * @param value value to set the  transWCName
     */
    public void settransWCName(String value) {
        setAttributeInternal(TRANSWCNAME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute transWSName.
     * @return the transWSName
     */
    public String gettransWSName() {
        if (getJcId() != null) {
            getAM().getLOVJcRcInfoView1().setBindType(new Number(26004));
            ViewObjectImpl voImpl = getAM().getLOVJcRcInfoView1();
            RowQualifier rowQualifier = new RowQualifier(voImpl);
            rowQualifier.setWhereClause("DocId='"+getJcId()+"' AND OpId='"+getOpId()+"' AND OpSrNo="+getOpSrNo());
            Row[] filteredRows = voImpl.getFilteredRows(rowQualifier); 
            if (filteredRows.length > 0) {
                if((filteredRows)[0].getAttribute("WsDesc")!=null){
                    return (filteredRows)[0].getAttribute("WsDesc").toString();
                }
            }
        }
        if (getRcId() != null) {
            getAM().getLOVJcRcInfoView1().setBindType(new Number(26003));
                ViewObjectImpl voImpl = getAM().getLOVJcRcInfoView1();
                RowQualifier rowQualifier = new RowQualifier(voImpl);
                rowQualifier.setWhereClause("DocId='"+getRcId()+"' AND OpId='"+getOpId()+"' AND OpSrNo="+getOpSrNo());
                Row[] filteredRows = voImpl.getFilteredRows(rowQualifier); 
                if (filteredRows.length > 0) {
                    if((filteredRows)[0].getAttribute("WsDesc")!=null){
                        return (filteredRows)[0].getAttribute("WsDesc").toString();
                }
            }
        }
        return (String) getAttributeInternal(TRANSWSNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute transWSName.
     * @param value value to set the  transWSName
     */
    public void settransWSName(String value) {
        setAttributeInternal(TRANSWSNAME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute transEmpName.
     * @return the transEmpName
     */
    public String gettransEmpName() {
        if (getJcId() != null) {
            getAM().getLOVJcRcInfoView1().setBindType(new Number(26004));
            ViewObjectImpl voImpl = getAM().getLOVJcRcInfoView1();
            RowQualifier rowQualifier = new RowQualifier(voImpl);
            rowQualifier.setWhereClause("DocId='"+getJcId()+"' AND OpId='"+getOpId()+"' AND OpSrNo="+getOpSrNo());
            Row[] filteredRows = voImpl.getFilteredRows(rowQualifier); 
            if (filteredRows.length > 0) {
                return (filteredRows)[0].getAttribute("EmpNm").toString();
            }
        }
        if (getRcId() != null) {
            getAM().getLOVJcRcInfoView1().setBindType(new Number(26003));
                ViewObjectImpl voImpl = getAM().getLOVJcRcInfoView1();
                RowQualifier rowQualifier = new RowQualifier(voImpl);
                rowQualifier.setWhereClause("DocId='"+getRcId()+"' AND OpId='"+getOpId()+"' AND OpSrNo="+getOpSrNo());
                Row[] filteredRows = voImpl.getFilteredRows(rowQualifier); 
                if (filteredRows.length > 0) {
                    
                return (String)(filteredRows)[0].getAttribute("EmpNm");
            }
        }
        return (String) getAttributeInternal(TRANSEMPNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute transEmpName.
     * @param value value to set the  transEmpName
     */
    public void settransEmpName(String value) {
        setAttributeInternal(TRANSEMPNAME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute transStartDt.
     * @return the transStartDt
     */
    public Timestamp gettransStartDt() {
           if (getJcId() != null) {
               getAM().getLOVJcRcInfoView1().setBindType(new Number(26004));
               ViewObjectImpl voImpl = getAM().getLOVJcRcInfoView1();
               RowQualifier rowQualifier = new RowQualifier(voImpl);
               rowQualifier.setWhereClause("DocId='"+getJcId()+"' AND OpId='"+getOpId()+"' AND OpSrNo="+getOpSrNo());
               Row[] filteredRows = voImpl.getFilteredRows(rowQualifier); 
               if (filteredRows.length > 0) {
                   if((filteredRows)[0].getAttribute("StrtDt")!=null){
                        return (Timestamp)(filteredRows)[0].getAttribute("StrtDt");
                   }
                   else {
                       return (new Timestamp());
                   }
               }
           }
           if (getRcId() != null) {
               getAM().getLOVJcRcInfoView1().setBindType(new Number(26003));
                   ViewObjectImpl voImpl = getAM().getLOVJcRcInfoView1();
                   RowQualifier rowQualifier = new RowQualifier(voImpl);
                   rowQualifier.setWhereClause("DocId='"+getRcId()+"' AND OpId='"+getOpId()+"' AND OpSrNo="+getOpSrNo());
                   Row[] filteredRows = voImpl.getFilteredRows(rowQualifier); 
                   if (filteredRows.length > 0) {
                   if((filteredRows)[0].getAttribute("StrtDt")!=null){
                        return (Timestamp)(filteredRows)[0].getAttribute("StrtDt");
                   }
                   else {
                       return (new Timestamp());
                   }
                }
           }
            return (Timestamp) getAttributeInternal(TRANSSTARTDT);
       }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute transStartDt.
     * @param value value to set the  transStartDt
     */
    public void settransStartDt(Timestamp value) {
        setAttributeInternal(TRANSSTARTDT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute transEndDate.
     * @return the transEndDate
     */
    public Timestamp gettransEndDate() {
            if (getJcId() != null) {
                getAM().getLOVJcRcInfoView1().setBindType(new Number(26004));
                ViewObjectImpl voImpl = getAM().getLOVJcRcInfoView1();
                RowQualifier rowQualifier = new RowQualifier(voImpl);
                rowQualifier.setWhereClause("DocId='"+getJcId()+"' AND OpId='"+getOpId()+"' AND OpSrNo="+getOpSrNo());
                Row[] filteredRows = voImpl.getFilteredRows(rowQualifier); 
                if (filteredRows.length > 0) {
                    if((filteredRows)[0].getAttribute("StrtDt")!=null){
                         return (Timestamp)(filteredRows)[0].getAttribute("EndDt");
                    }
                    else {
                        return (new Timestamp());
                    }
                }
            }
            if (getRcId() != null) {
                getAM().getLOVJcRcInfoView1().setBindType(new Number(26003));
                    ViewObjectImpl voImpl = getAM().getLOVJcRcInfoView1();
                    RowQualifier rowQualifier = new RowQualifier(voImpl);
                    rowQualifier.setWhereClause("DocId='"+getRcId()+"' AND OpId='"+getOpId()+"' AND OpSrNo="+getOpSrNo());
                    Row[] filteredRows = voImpl.getFilteredRows(rowQualifier); 
                    if (filteredRows.length > 0) {
                    if((filteredRows)[0].getAttribute("StrtDt")!=null){
                         return (Timestamp)(filteredRows)[0].getAttribute("EndDt");
                    }
                    else {
                        return (new Timestamp());
                    }
                 }
            }
            return (Timestamp) getAttributeInternal(TRANSENDDATE);
       }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute transEndDate.
     * @param value value to set the  transEndDate
     */
    public void settransEndDate(Timestamp value) {
        setAttributeInternal(TRANSENDDATE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute transRefDocId.
     * @return the transRefDocId
     */
    public String gettransRefDocId() {
        if (getRefFdbkId() != null) {
            if (getAM().getLOVCopyPreviousFdbk1().getFilteredRows("DocId", getRefFdbkId()).length > 0) {
                return (getAM().getLOVCopyPreviousFdbk1().getFilteredRows("DocId", getRefFdbkId()))[0].getAttribute("FdbkId").toString();
            }
        }
        return (String) getAttributeInternal(TRANSREFDOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute transRefDocId.
     * @param value value to set the  transRefDocId
     */
    public void settransRefDocId(String value) {
        setAttributeInternal(TRANSREFDOCID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute transJCId.
     * @return the transJCId
     */
    public String gettransJCId() {
        if (getJcId() != null) {
            getAM().getLOVJcRcInfoView1().setBindType(new Number(26004));
            System.out.println("gettransJCId 1");
            if (getAM().getLOVJcRcInfoView1().getFilteredRows("DocId", getJcId()).length > 0) {
                System.out.println("gettransJCId 2");
                return (getAM().getLOVJcRcInfoView1().getFilteredRows("DocId",getJcId()))[0].getAttribute("DispDocId").toString();
            }
        }
        return (String) getAttributeInternal(TRANSJCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute transJCId.
     * @param value value to set the  transJCId
     */
    public void settransJCId(String value) {
        setAttributeInternal(TRANSJCID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute transRcId.
     * @return the transRcId
     */
    public String gettransRcId() {
        if (getRcId() != null) {
            getAM().getLOVJcRcInfoView1().setBindType(new Number(26003));
            System.out.println("gettransRcId 1");
            if (getAM().getLOVJcRcInfoView1().getFilteredRows("DocId", getRcId()).length > 0) {
                System.out.println("gettransRcId 2");
                return (getAM().getLOVJcRcInfoView1().getFilteredRows("DocId",
                                                               getRcId()))[0].getAttribute("DispDocId").toString();
            }
        }
        return (String) getAttributeInternal(TRANSRCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute transRcId.
     * @param value value to set the  transRcId
     */
    public void settransRcId(String value) {
        setAttributeInternal(TRANSRCID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute transOpId.
     * @return the transOpId
     */
    public String gettransOpId() {
            if (getJcId() != null) {
               // System.out.println("in the job card::");
                getAM().getLOVJcRcInfoView1().setBindType(new Number(26004));
                ViewObjectImpl voImpl = getAM().getLOVJcRcInfoView1();
                RowQualifier rowQualifier = new RowQualifier(voImpl);
                //System.out.println("Value of opId::"+getOpId()+"value of DocId::"+getJcId()+"Value of opSrNo::"+getOpSrNo());
                rowQualifier.setWhereClause("DocId='"+getJcId()+"' AND OpId='"+getOpId()+"' AND OpSrNo="+getOpSrNo());
               // System.out.println("Value off opId:::"+getOpId());
                Row[] filteredRows = voImpl.getFilteredRows(rowQualifier); 
                //System.out.println("value of filteredRow::"+filteredRows.length);
                if (filteredRows.length > 0) {
                    //System.out.println("value of Operation::::"+(filteredRows)[0].getAttribute("DispOpId").toString());
                    return (filteredRows)[0].getAttribute("DispOpId").toString();
                }
            }
            if (getRcId() != null) {
                //System.out.println("in the Rc block");
                getAM().getLOVJcRcInfoView1().setBindType(new Number(26003));
                //System.out.println("Value of opId::"+getOpId()+"value of DocId::"+getRcId()+"Value of opSrNo::"+getOpSrNo());
                    ViewObjectImpl voImpl = getAM().getLOVJcRcInfoView1();
                    RowQualifier rowQualifier = new RowQualifier(voImpl);
                    rowQualifier.setWhereClause("DocId= '"+getRcId()+"' AND OpId='"+getOpId()+"' AND OpSrNo="+getOpSrNo());
                    Row[] filteredRows = voImpl.getFilteredRows(rowQualifier);
                //System.out.println("value of filteredRowRCC::"+filteredRows.length);
                    if (filteredRows.length > 0) {
                        //System.out.println("Name of operation::"+(filteredRows)[0].getAttribute("DispOpId").toString());
                    return (filteredRows)[0].getAttribute("DispOpId").toString();
                }
            }
        return (String) getAttributeInternal(TRANSOPID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute transOpId.
     * @param value value to set the  transOpId
     */
    public void settransOpId(String value) {
        setAttributeInternal(TRANSOPID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute transOpSrNo.
     * @return the transOpSrNo
     */
    public Integer gettransOpSrNo() {
        if (getJcId() != null) {
            getAM().getLOVJcRcInfoView1().setBindType(new Number(26004));
            ViewObjectImpl voImpl = getAM().getLOVJcRcInfoView1();
            RowQualifier rowQualifier = new RowQualifier(voImpl);
            rowQualifier.setWhereClause("DocId='"+getJcId()+"' AND OpId='"+getOpId()+"' AND OpSrNo="+getOpSrNo());
            Row[] filteredRows = voImpl.getFilteredRows(rowQualifier); 
            if (filteredRows.length > 0) {
                return Integer.parseInt((filteredRows)[0].getAttribute("OpSrNo").toString());
            }
        }
        if (getRcId() != null) {
            getAM().getLOVJcRcInfoView1().setBindType(new Number(26003));
                ViewObjectImpl voImpl = getAM().getLOVJcRcInfoView1();
                RowQualifier rowQualifier = new RowQualifier(voImpl);
                rowQualifier.setWhereClause("DocId='"+getRcId()+"' AND OpId='"+getOpId()+"' AND OpSrNo="+getOpSrNo());
                Row[] filteredRows = voImpl.getFilteredRows(rowQualifier); 
                if (filteredRows.length > 0) {
                return Integer.parseInt((filteredRows)[0].getAttribute("OpSrNo").toString());
            }
        }
        return (Integer) getAttributeInternal(TRANSOPSRNO);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute transOpSrNo.
     * @param value value to set the  transOpSrNo
     */
    public void settransOpSrNo(Integer value) {
        setAttributeInternal(TRANSOPSRNO, value);
    }

    /**
     * Gets the attribute value for the calculated attribute transOpDesc.
     * @return the transOpDesc
     */
    public String gettransOpDesc() {
            if (getJcId() != null) {
                getAM().getLOVJcRcInfoView1().setBindType(new Number(26004));
                ViewObjectImpl voImpl = getAM().getLOVJcRcInfoView1();
                RowQualifier rowQualifier = new RowQualifier(voImpl);
                rowQualifier.setWhereClause("DocId='"+getJcId()+"' AND OpId='"+getOpId()+"' AND OpSrNo="+getOpSrNo());
                Row[] filteredRows = voImpl.getFilteredRows(rowQualifier); 
                if (filteredRows.length > 0) {
                    return (filteredRows)[0].getAttribute("OpDesc").toString();
                }
            }
            if (getRcId() != null) {
                getAM().getLOVJcRcInfoView1().setBindType(new Number(26003));
                    ViewObjectImpl voImpl = getAM().getLOVJcRcInfoView1();
                    RowQualifier rowQualifier = new RowQualifier(voImpl);
                    rowQualifier.setWhereClause("DocId='"+getRcId()+"' AND OpId='"+getOpId()+"' AND OpSrNo="+getOpSrNo());
                    Row[] filteredRows = voImpl.getFilteredRows(rowQualifier); 
                    if (filteredRows.length > 0) {
                    return (filteredRows)[0].getAttribute("OpDesc").toString();
                }
            }
        return (String) getAttributeInternal(TRANSOPDESC);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute transOpDesc.
     * @param value value to set the  transOpDesc
     */
    public void settransOpDesc(String value) {
        setAttributeInternal(TRANSOPDESC, value);
    }

    /**
     * Gets the attribute value for OP_ID using the alias name OpId.
     * @return the OP_ID
     */
    public String getOpId() {
        return (String) getAttributeInternal(OPID);
    }

    /**
     * Sets <code>value</code> as attribute value for OP_ID using the alias name OpId.
     * @param value value to set the OP_ID
     */
    public void setOpId(String value) {
        setAttributeInternal(OPID, value);
    }

    /**
     * Gets the attribute value for OP_SR_NO using the alias name OpSrNo.
     * @return the OP_SR_NO
     */
    public Integer getOpSrNo() {
        return (Integer) getAttributeInternal(OPSRNO);
    }

    /**
     * Sets <code>value</code> as attribute value for OP_SR_NO using the alias name OpSrNo.
     * @param value value to set the OP_SR_NO
     */
    public void setOpSrNo(Integer value) {
        setAttributeInternal(OPSRNO, value);
    }

    /**
     * Gets the attribute value for the calculated attribute transOutputItm.
     * @return the transOutputItm
     */
    public String gettransOutputItm() {
        if (getJcId() != null) {
            getAM().getLOVJcRcInfoView1().setBindType(new Number(26004));
            ViewObjectImpl voImpl = getAM().getLOVJcRcInfoView1();
            RowQualifier rowQualifier = new RowQualifier(voImpl);
            rowQualifier.setWhereClause("DocId='"+getJcId()+"' AND OpId='"+getOpId()+"' AND OpSrNo="+getOpSrNo());
            Row[] filteredRows = voImpl.getFilteredRows(rowQualifier); 
            if (filteredRows.length > 0) {
                return (filteredRows)[0].getAttribute("OutItmDesc").toString();
            }
        }
        if (getRcId() != null) {
            getAM().getLOVJcRcInfoView1().setBindType(new Number(26003));
                ViewObjectImpl voImpl = getAM().getLOVJcRcInfoView1();
                RowQualifier rowQualifier = new RowQualifier(voImpl);
                rowQualifier.setWhereClause("DocId='"+getRcId()+"' AND OpId='"+getOpId()+"' AND OpSrNo="+getOpSrNo());
                Row[] filteredRows = voImpl.getFilteredRows(rowQualifier); 
                if (filteredRows.length > 0) {
                return (filteredRows)[0].getAttribute("OutItmDesc").toString();
            }
        }
        return (String) getAttributeInternal(TRANSOUTPUTITM);
    }

    /**
     * Gets the attribute value for the calculated attribute transQty.
     * @return the transQty
     */
    public Number gettransQty() {
        if (getJcId() != null) {
            getAM().getLOVJcRcInfoView1().setBindType(new Number(26004));
            ViewObjectImpl voImpl = getAM().getLOVJcRcInfoView1();
            RowQualifier rowQualifier = new RowQualifier(voImpl);
            rowQualifier.setWhereClause("DocId='"+getJcId()+"' AND OpId='"+getOpId()+"' AND OpSrNo="+getOpSrNo());
            Row[] filteredRows = voImpl.getFilteredRows(rowQualifier); 
            if (filteredRows.length > 0) {
                return (Number)(filteredRows)[0].getAttribute("OutptItmQty");
            }
        }
        if (getRcId() != null) {
            getAM().getLOVJcRcInfoView1().setBindType(new Number(26003));
                ViewObjectImpl voImpl = getAM().getLOVJcRcInfoView1();
                RowQualifier rowQualifier = new RowQualifier(voImpl);
                rowQualifier.setWhereClause("DocId='"+getRcId()+"' AND OpId='"+getOpId()+"' AND OpSrNo="+getOpSrNo());
                Row[] filteredRows = voImpl.getFilteredRows(rowQualifier); 
                if (filteredRows.length > 0) {
                return (Number)(filteredRows)[0].getAttribute("OutptItmQty");
            }
        }
        return (Number) getAttributeInternal(TRANSQTY);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link MnfFdbkParam.
     */
    public RowIterator getMnfFdbkParam() {
        return (RowIterator) getAttributeInternal(MNFFDBKPARAM);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link MnfFdbkAttch.
     */
    public RowIterator getMnfFdbkAttch() {
        return (RowIterator) getAttributeInternal(MNFFDBKATTCH);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LOVFeedbackTypeVO1.
     */
    public RowSet getLOVFeedbackTypeVO1() {
        return (RowSet) getAttributeInternal(LOVFEEDBACKTYPEVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LOVFdbkBasisVO1.
     */
    public RowSet getLOVFdbkBasisVO1() {
        return (RowSet) getAttributeInternal(LOVFDBKBASISVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> MnfFdbkVO1.
     */
    public RowSet getMnfFdbkVO1() {
        return (RowSet) getAttributeInternal(MNFFDBKVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LOVAppUserVO1.
     */
    public RowSet getLOVAppUserVO1() {
        return (RowSet) getAttributeInternal(LOVAPPUSERVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LOVMnfRCVO1.
     */
    public RowSet getLOVMnfRCVO1() {
        return (RowSet) getAttributeInternal(LOVMNFRCVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LOVMnfJCVO1.
     */
    public RowSet getLOVMnfJCVO1() {
        return (RowSet) getAttributeInternal(LOVMNFJCVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LOVFeedbackIdVO1.
     */
    public RowSet getLOVFeedbackIdVO1() {
        return (RowSet) getAttributeInternal(LOVFEEDBACKIDVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LOVCopyPreviousFdbkVO1.
     */
    public RowSet getLOVCopyPreviousFdbkVO1() {
        return (RowSet) getAttributeInternal(LOVCOPYPREVIOUSFDBKVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LOVJcRcInfoViewVO1.
     */
    public RowSet getLOVJcRcInfoViewVO1() {
        return (RowSet) getAttributeInternal(LOVJCRCINFOVIEWVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LOVJcRcInfoViewVO2.
     */
    public RowSet getLOVJcRcInfoViewVO2() {
        return (RowSet) getAttributeInternal(LOVJCRCINFOVIEWVO2);
    }

    private MNFShopFloorFeedbackAMImpl getAM() {
        return (MNFShopFloorFeedbackAMImpl)getApplicationModule();
    }
}

