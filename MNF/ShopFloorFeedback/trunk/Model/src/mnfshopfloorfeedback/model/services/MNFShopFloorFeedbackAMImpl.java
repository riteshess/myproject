package mnfshopfloorfeedback.model.services;

import java.io.File;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import javax.el.ELContext;
import javax.el.ValueExpression;

import mnfshopfloorfeedback.model.services.common.MNFShopFloorFeedbackAM;


import mnfshopfloorfeedback.model.views.LOVJcRcInfoViewVOImpl;
import mnfshopfloorfeedback.model.views.LOVSearchViewVOImpl;
import mnfshopfloorfeedback.model.views.MnfFdbkParamVOImpl;
import mnfshopfloorfeedback.model.views.MnfFdbkVOImpl;

import oracle.adf.share.ADFContext;

import oracle.jbo.ApplicationModule;
import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.domain.Number;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Sep 03 10:16:44 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MNFShopFloorFeedbackAMImpl extends ApplicationModuleImpl implements MNFShopFloorFeedbackAM {
    /**
     * This is the default constructor (do not remove).
     */
    public MNFShopFloorFeedbackAMImpl() {
    }

    /**
     * Container's getter for MnfFdbk1.
     * @return MnfFdbk1
     */
    public MnfFdbkVOImpl getMnfFdbk1() {
        return (MnfFdbkVOImpl) findViewObject("MnfFdbk1");
    }


    /**
     * Container's getter for MnfFdbkParam1.
     * @return MnfFdbkParam1
     */
    public MnfFdbkParamVOImpl getMnfFdbkParam1() {
        return (MnfFdbkParamVOImpl) findViewObject("MnfFdbkParam1");
    }

    /**
     * Container's getter for MnfFdbkParam2.
     * @return MnfFdbkParam2
     */
    public MnfFdbkParamVOImpl getMnfFdbkParam2() {
        return (MnfFdbkParamVOImpl) findViewObject("MnfFdbkParam2");
    }

    /**
     * Container's getter for MnfFdbkTOMnfFdbkParamVL1.
     * @return MnfFdbkTOMnfFdbkParamVL1
     */
    public ViewLinkImpl getMnfFdbkTOMnfFdbkParamVL1() {
        return (ViewLinkImpl) findViewLink("MnfFdbkTOMnfFdbkParamVL1");
    }


    /**
     * Container's getter for MnfFdbkTOMnfFdbkAttchVL1.
     * @return MnfFdbkTOMnfFdbkAttchVL1
     */
    public ViewLinkImpl getMnfFdbkTOMnfFdbkAttchVL1() {
        return (ViewLinkImpl) findViewLink("MnfFdbkTOMnfFdbkAttchVL1");
    }

     /**
      * Function to Attach document
      * **/ 
    public String insertInMnfFdbkAttch(String AttchFileExtn, String AttchFilepath, String AttchExtn, String DispFlNm) {
        ViewObjectImpl attch1 = this.getMnfFdbkAttch();

        Row createRow = attch1.createRow();
        String cloudId = this.getCldId().toString();
        String hoOrgId = this.getHoOrgId().toString();
        String slocId = this.getSlocId().toString();
        String orgId = this.getOrgId().toString();

        String Nm = "";
        try {
            Nm = callStoredFunction(Types.VARCHAR, "APP.FN_APP_GEN_FILE_ATTCH_ID(?,?,?,?,?)", new Object[] {
                                    slocId, cloudId, hoOrgId, orgId, "MNF.MNF$FDBK$ATTCH"
            }).toString();

        } catch (Exception e) {
            Nm = "TEST";
        }
        String AttchFilepathToServer = "";
        AttchFilepathToServer = getServerPathToAttachFile(this.getSlocId());


        createRow.setAttribute("AttchFlNm", Nm);
        createRow.setAttribute("AttchFlExtn", AttchFileExtn);
        createRow.setAttribute("AttchFlPath", AttchFilepathToServer + Nm + AttchExtn);
        createRow.setAttribute("DispFlNm", DispFlNm);
        createRow.setAttribute("UsrIdCreate", getUsrId());
        createRow.setAttribute("UsrIdCreateDt", new Timestamp(System.currentTimeMillis()));
        attch1.insertRow(createRow);
        return Nm;
    }
     
    /**
     * Function to get path from server of a particular file
     * **/ 
    public String getServerPathToAttachFile(int slocId) {
        String serverPath = "";
        try {
            serverPath = callStoredFunction(Types.VARCHAR, "APP.fn_get_app_doc_attach_path(?)", new Object[] {
                                            slocId }).toString();


        } catch (Exception e) {
            System.out.println("ERROR IN CALLING FUNCTION :" + e.getMessage());
        }
        return serverPath;


    }

    private String getCldId() {
        return resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
    }

    private Integer getSlocId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
    }

    private Integer getUsrId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
    }

    private String getHoOrgId() {
        return resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
    }

    private String getOrgId() {
        return resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
    }

    /**
     * Function to set Global Parameters initially
     * **/ 
    public void setGlobalParameters(){
        ViewObjectImpl vo = this.getLOVFeedbackId1();
        ViewObjectImpl vo1 = this.getTransSearchFdbk1();
        ViewObjectImpl vo2 = this.getLOVParam1();
        ViewObjectImpl vo3 = this.getLOVParamSet1();
        ViewObjectImpl vo5 = this.getLOVJcRcInfoView1();
        ViewObjectImpl vo6 = this.getLOVCopyPreviousFdbk1();
        ViewObjectImpl vo7 = this.getLOVSearchView1();
        //ViewObjectImpl vo8 = this.getLOVParamUOM1();
        //vo8.setNamedWhereClauseParam("BindSlocId", getSlocId());   
        //vo8.setNamedWhereClauseParam("BindCldId", getCldId());
        
        vo5.setNamedWhereClauseParam("BindOrgId", getOrgId());   
        vo5.setNamedWhereClauseParam("BindCldId", getCldId());
        vo5.setNamedWhereClauseParam("BindHoId", getHoOrgId());
        vo5.setNamedWhereClauseParam("BindSlocId", getSlocId());
        //vo5.setNamedWhereClauseParam("BindType", new oracle.jbo.domain.Number(26004));
        vo3.setNamedWhereClauseParam("BindCldId", getCldId());
        vo3.setNamedWhereClauseParam("BindHoOrgID", getHoOrgId());
        vo3.setNamedWhereClauseParam("BindSlocId", getSlocId());
        vo2.setNamedWhereClauseParam("BindCldId", getCldId());
        vo2.setNamedWhereClauseParam("BindHOrgId", getHoOrgId());
        vo2.setNamedWhereClauseParam("BindSlocId", getSlocId());
        vo.setNamedWhereClauseParam("BindCldId", getCldId());
        vo.setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        vo.setNamedWhereClauseParam("BindOrgId", getOrgId());
        vo.setNamedWhereClauseParam("BindSlcId", getSlocId());
        vo1.setNamedWhereClauseParam("BindCldId", getCldId());
        vo1.setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        vo1.setNamedWhereClauseParam("BindOrgId", getOrgId());
        vo1.setNamedWhereClauseParam("BindSlcId", getSlocId());
        vo6.setNamedWhereClauseParam("BindOrgId", getOrgId());   
        vo6.setNamedWhereClauseParam("BindCldId", getCldId());
        vo6.setNamedWhereClauseParam("BindHoId", getHoOrgId());
        vo6.setNamedWhereClauseParam("BindSlocId", getSlocId());
        vo.executeQuery();
        vo1.executeQuery();
        vo2.executeQuery();
        vo5.executeQuery();
        vo6.executeQuery();
        vo7.setNamedWhereClauseParam("FDBKIDBIND", null);
        vo7.setNamedWhereClauseParam("USERBIND", null);
        vo7.setNamedWhereClauseParam("FDBKBASISBIND", null);
        vo7.setNamedWhereClauseParam("CREATEFROMBIND", null);
        vo7.setNamedWhereClauseParam("CREATETOBIND", null);
        vo7.setNamedWhereClauseParam("JCIDBIND", null);
        vo7.setNamedWhereClauseParam("RCIDNIND", null);
        vo7.setNamedWhereClauseParam("CLDBIND", null);
        vo7.setNamedWhereClauseParam("HOBIND", null);
        vo7.setNamedWhereClauseParam("ORGBIND", null);
        vo7.setNamedWhereClauseParam("SLOCBIND", null);
        vo7.executeQuery();
        
        this.getLOVAllParameterSetForViewMode1().setNamedWhereClauseParam("BindCldId", getCldId());
        this.getLOVAllParameterSetForViewMode1().setNamedWhereClauseParam("BindHoOrgID", getHoOrgId());
        this.getLOVAllParameterSetForViewMode1().setNamedWhereClauseParam("BindSlocId", getSlocId());
        this.getLOVAllParameterSetForViewMode1().executeQuery();
        
        this.getLOVAllParameterForViewMode1().setNamedWhereClauseParam("BindCldId", getCldId());
        this.getLOVAllParameterForViewMode1().setNamedWhereClauseParam("BindHoId", getHoOrgId());
        this.getLOVAllParameterForViewMode1().setNamedWhereClauseParam("BindSlocId", getSlocId());
        this.getLOVAllParameterForViewMode1().executeQuery();
    }
    
    public Object resolvEl(String data) {
        ADFContext adfCtx = ADFContext.getCurrent();
        ELContext elContext = adfCtx.getELContext();
        ValueExpression valueExp = adfCtx.getExpressionFactory().createValueExpression(elContext, data, Object.class);
        Object Message = valueExp.getValue(elContext).toString();
        return Message;
    }

    /**
     * Function to check duplicate Parameter
     * **/ 
    private String duplicateParamID(String paramVal)
    {
        String paraId = null;
        
        if (paramVal != null) {
              ViewObjectImpl paramDescvoimpl =  this.getLOVParam1();
              paramDescvoimpl.setNamedWhereClauseParam("BindCldId", getCldId());
              paramDescvoimpl.setNamedWhereClauseParam("BindHOrgId", getHoOrgId());
              paramDescvoimpl.setNamedWhereClauseParam("BindSlocId", getSlocId());
              //paramDescvoimpl.setNamedWhereClauseParam("BindOrgId", getOrgId());
              paramDescvoimpl.executeQuery();
              Row [] paramDesc = paramDescvoimpl.getFilteredRows("ParamNme", paramVal);
              if (paramDesc.length > 0) {
              if (paramDesc[0].getAttribute("ParamId") != null)
                paraId = paramDesc[0].getAttribute("ParamId").toString();
              }
            ViewObjectImpl voimpl =  this.getMnfFdbkParam();
            Row [] paramName = voimpl.getFilteredRows("transName", paramVal);
            if (paramName.length > 0 && paramName[0]!=voimpl.getCurrentRow()) {
                return "true";
            }
        }
        
        return paraId;
     
    }
     
     
    /**
    * 
    * Check For Duplicacy 
    * 
    * **/
    public String chkDuplicate(String tab , String val)
    {
        if(tab.equals("PARAM"))
        {
            System.out.println("Value is : "+val);
            //return duplicateParamID(val)    ;
            int result = chkNmDuplicate(val);
            if(result==1){
                return "true";
            }else{
                return "false";
            }
        }
        
        return "NONE";
    }

//    /**
//     * Function used to call DB functions
//     * **/ 
//    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
//        CallableStatement st = null;
//        try {
//            st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
//            st.registerOutParameter(1, sqlReturnType);
//            if (bindVars != null) {
//                for (int z = 0; z < bindVars.length; z++) {
//                    st.setObject(z + 2, bindVars[z]);
//                    System.out.println(z+" "+ bindVars[z]);
//                }
//            }
//            st.executeUpdate();
//            return st.getObject(1);
//        } catch (SQLException e) {
//            e.printStackTrace();
//            throw new JboException(e);
//        } finally {
//            if (st != null) {
//                try {
//                    st.close();
//                } catch (SQLException e) {
//                    e.printStackTrace();
//                }
//            }
//        }
//    }

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {

            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                    // System.out.println(bindVars[z] + "z");
                }
            }
            st.executeUpdate();

            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                }
            }
        }
    }

    /**
     * Function to set Search Form Parameters
     * **/ 
    public void setFdbkSearchParams(Timestamp createdto, String id, Integer createdBy, Integer basis,
                                    Timestamp createdOn, String jcid, String rcid) {
        ViewObjectImpl fdbkVO = this.getLOVSearchView1();
        ViewObjectImpl transfdbkVO = this.getTransSearchFdbk1();
        Row r = transfdbkVO.first();
        fdbkVO.setNamedWhereClauseParam("FDBKIDBIND", (id == null) ? null : id);
        fdbkVO.setNamedWhereClauseParam("USERBIND", r.getAttribute("transCreatedById"));
        fdbkVO.setNamedWhereClauseParam("FDBKBASISBIND", (basis == null) ? null : basis);
        fdbkVO.setNamedWhereClauseParam("CREATEFROMBIND", r.getAttribute("CreatedOn"));
        fdbkVO.setNamedWhereClauseParam("CREATETOBIND", r.getAttribute("CreatedTo"));
        fdbkVO.setNamedWhereClauseParam("JCIDBIND", r.getAttribute("JcId"));
        fdbkVO.setNamedWhereClauseParam("RCIDNIND", r.getAttribute("RcId"));
        fdbkVO.setNamedWhereClauseParam("CLDBIND", getCldId());
        fdbkVO.setNamedWhereClauseParam("HOBIND", getHoOrgId());
        fdbkVO.setNamedWhereClauseParam("ORGBIND", getOrgId());
        fdbkVO.setNamedWhereClauseParam("SLOCBIND", getSlocId());
        fdbkVO.executeQuery();
    }
  
    /**
     * Function to reset the Search Parameters
     * **/   
    public void setResetFdbkSearchParams() {
        ViewObjectImpl fdbkVO = this.getLOVSearchView1();
        ViewObjectImpl transfdbkVO = this.getTransSearchFdbk1();
        
        Row r = transfdbkVO.getCurrentRow();
        r.setAttribute("FdbkId", null);
        r.setAttribute("FdbkBasis", null);
        r.setAttribute("CreatedBy", null);
        r.setAttribute("CreatedOn", null);
        r.setAttribute("CreatedTo", null);
        r.setAttribute("JcId", null);
        r.setAttribute("RcId", null);
        
        fdbkVO.setNamedWhereClauseParam("FDBKIDBIND", null);
        fdbkVO.setNamedWhereClauseParam("USERBIND", null);
        fdbkVO.setNamedWhereClauseParam("FDBKBASISBIND", null);
        fdbkVO.setNamedWhereClauseParam("CREATEFROMBIND", null);
        fdbkVO.setNamedWhereClauseParam("CREATETOBIND", null);
        fdbkVO.setNamedWhereClauseParam("JCIDBIND", null);
        fdbkVO.setNamedWhereClauseParam("RCIDNIND", null);
        fdbkVO.setNamedWhereClauseParam("CLDBIND", null);
        fdbkVO.setNamedWhereClauseParam("HOBIND", null);
        fdbkVO.setNamedWhereClauseParam("ORGBIND", null);
        fdbkVO.setNamedWhereClauseParam("SLOCBIND", null);
        fdbkVO.executeQuery();
    }

    /**
     * Function to set Global Parameters for Create View
     *
     * **/ 
    public void setCreateViewFdbkParams(Integer slocId, String hoOrgId, String orgId, Integer userId, String fdbkId) {

        ViewObjectImpl fdbkVO = this.getMnfFdbk1();
        ViewCriteria vc = fdbkVO.getViewCriteria("MnfFdbkVOCriteria1");
        fdbkVO.applyViewCriteria(vc);
        //fdbkVO.setNamedWhereClauseParam("bindUserId", (userId == null) ? null : userId);
        fdbkVO.setNamedWhereClauseParam("bindDocId", (fdbkId == null) ? null : fdbkId);
        fdbkVO.setNamedWhereClauseParam("bindHoOrgId", (hoOrgId == null) ? null : hoOrgId);
        fdbkVO.setNamedWhereClauseParam("bindOrgId", (orgId == null) ? null : orgId);
        fdbkVO.setNamedWhereClauseParam("bindSlocId", (slocId == null) ? null : slocId);
        fdbkVO.executeQuery();
    }

    /**
     * Function to get the fields of Reference Feedback
     * **/ 
    public void getReferenceFeedback(){
        ViewObject fdbkVO = this.getMnfFdbk1();
        Row r = fdbkVO.getCurrentRow();
        String doc_id = r.getAttribute("DocId").toString();
        String ref_doc_id = r.getAttribute("RefFdbkId").toString();
        String fdbk_id = r.getAttribute("FdbkId").toString();
        String ref_fdbk_id = r.getAttribute("transRefDocId").toString();
        String success = setReferenceFeedback(getCldId(), getSlocId(), getHoOrgId(), getOrgId(), getUsrId(), "MNF.MNF$FDBK", fdbk_id, ref_fdbk_id, doc_id, ref_doc_id);
        System.out.println("Copy Previous Function Returns " + success);
        if(success.equalsIgnoreCase("0")){
            getMnfFdbkParam().executeQuery();
            getMnfFdbkAttch().executeQuery();
            disableReservedMode();
        }
        else {
            System.out.println("Cannot Insert data");
        }       
    }

    /**
     * Function to set the Child Table values from Copy Previous Functionality
     * **/ 
    public String setReferenceFeedback(String cldId, Integer slocId, String hoId, String orgId, Integer usrId, String tableName, String fdbkId, String refFdbkId, String doc_id, String ref_doc_id){
        try {
            //System.out.println("in the setfeedback id::");
            //System.out.println("CldID::"+cldId+"SlocId::"+slocId+"hoOrgId::"+hoId+"OrgId::"+orgId+"usrId:::"+usrId+"tableName::"+tableName+"fdbkId::"+fdbkId+"doc_id::"+doc_id+"ef_doc_id::"+ref_doc_id);
                return callStoredFunction(Types.VARCHAR, "MNF.FN_MNF_COPY_PRF(?,?,?,?,?,?,?,?,?,?,?)", new Object[] {cldId, slocId, hoId, orgId, usrId, tableName, fdbkId, null, doc_id, ref_doc_id, "Default Feedback"}).toString();

        } catch (Exception e) {
            System.out.println("ERROR IN CALLING FUNCTION :" + e.getMessage());
        }
        return null; 
    }
    /**
     * Container's getter for TransSearchFdbk1.
     * @return TransSearchFdbk1
     */
    public ViewObjectImpl getTransSearchFdbk1() {
        return (ViewObjectImpl) findViewObject("TransSearchFdbk1");
    }


    /**
     * Container's getter for LOVSearchView1.
     * @return LOVSearchView1
     */
    public LOVSearchViewVOImpl getLOVSearchView1() {
        return (LOVSearchViewVOImpl) findViewObject("LOVSearchView1");
    }

    /**
     * Container's getter for MnfFdbkAttch3.
     * @return MnfFdbkAttch3
     */
    public ViewObjectImpl getMnfFdbkAttch() {
        return (ViewObjectImpl) findViewObject("MnfFdbkAttch");
    }

    /**
     * Container's getter for MnfFdbkTOMnfFdbkAttchVL2.
     * @return MnfFdbkTOMnfFdbkAttchVL2
     */
    public ViewLinkImpl getMnfFdbkTOMnfFdbkAttchVL2() {
        return (ViewLinkImpl) findViewLink("MnfFdbkTOMnfFdbkAttchVL2");
    }

    /**
     * Container's getter for MnfFdbkParam4.
     * @return MnfFdbkParam4
     */
    public MnfFdbkParamVOImpl getMnfFdbkParam() {
        return (MnfFdbkParamVOImpl) findViewObject("MnfFdbkParam");
    }

    /**
     * Container's getter for MnfFdbkTOMnfFdbkParamVL3.
     * @return MnfFdbkTOMnfFdbkParamVL3
     */
    public ViewLinkImpl getMnfFdbkTOMnfFdbkParamVL3() {
        return (ViewLinkImpl) findViewLink("MnfFdbkTOMnfFdbkParamVL3");
    }


    /**
     * Container's getter for LOVParam1.
     * @return LOVParam1
     */
    public ViewObjectImpl getLOVParam1() {
        return (ViewObjectImpl) findViewObject("LOVParam1");
    }

    /**
     * Container's getter for LOVFeedbackId1.
     * @return LOVFeedbackId1
     */
    public ViewObjectImpl getLOVFeedbackId1() {
        return (ViewObjectImpl) findViewObject("LOVFeedbackId1");
    }

    /**
     * Container's getter for LOVJcRcInfoView1.
     * @return LOVJcRcInfoView1
     */
    public LOVJcRcInfoViewVOImpl getLOVJcRcInfoView1() {
        return (LOVJcRcInfoViewVOImpl) findViewObject("LOVJcRcInfoView1");
    }

    /**
     * Container's getter for LOVCopyPreviousFdbk1.
     * @return LOVCopyPreviousFdbk1
     */
    public ViewObjectImpl getLOVCopyPreviousFdbk1() {
        return (ViewObjectImpl) findViewObject("LOVCopyPreviousFdbk1");
    }

    /**
     * Function to create a row for FIle Attachment
     * **/     
    public String createAttchmntRow(String contentTyp, String fileNm, String extn) {

        String path = getUpFilePath(getSlocId());
        String fileId = getUpFileId(getCldId(), getSlocId(), getHoOrgId(), getOrgId());
        Row r = getMnfFdbkAttch().createRow();

        r.setAttribute("AttchFlExtn", contentTyp);
        r.setAttribute("DispFlNm", fileNm);
        //r.setAttribute("AttchFlNm", fileNm);
        r.setAttribute("AttchFlNm", fileId);
        r.setAttribute("AttchFlPath", path + fileId + extn);

        getMnfFdbkAttch().insertRow(r);
        return path + fileId;
    }
    
    /**
         * Method to get system generated file no
         * **/
        public String getUpFileId(String cldId, Integer slcId, String hoOrgId, String orgId) {

            Object fnRetVal;

            try {
                fnRetVal = callStoredFunction(Types.VARCHAR, "APP.FN_APP_GEN_FILE_ATTCH_ID(?,?,?,?,?)", new Object[] {
                                              slcId, cldId, hoOrgId, orgId, "MNF$FDBK$ATTCH"
                });

                if (fnRetVal != null) {

                    if (fnRetVal.equals(-1)) {
                        //showFacesMsg("Error while fetching file Id details", null, FacesMessage.SEVERITY_ERROR, null);
                    }

                    return fnRetVal.toString();
                }

            } catch (Exception e) {

                e.printStackTrace();

            }
            //showFacesMsg("Error while fetching file Id details", null, FacesMessage.SEVERITY_ERROR, null);

            return "0";
        }

        /**
         * Method to get default file location
         * **/
        public String getUpFilePath(Integer slcId) {
            Object fnRetVal;

            try {
                fnRetVal = callStoredFunction(Types.VARCHAR, "APP.FN_GET_APP_DOC_ATTACH_PATH(?)", new Object[] { slcId });

                if (fnRetVal != null) {

                    if (fnRetVal.equals(-1)) {
                        //showFacesMsg("Error while fetching file path details", null, FacesMessage.SEVERITY_ERROR, null);
                    }

                    return fnRetVal.toString();
                }

            } catch (Exception e) {

                e.printStackTrace();

            }
            //showFacesMsg("Error while fetching file path details", null, FacesMessage.SEVERITY_ERROR, null);

            return null;
        }

    /**
     * Container's getter for LOVParamSet1.
     * @return LOVParamSet1
     */
    public ViewObjectImpl getLOVParamSet1() {
        return (ViewObjectImpl) findViewObject("LOVParamSet1");
    }
    
    public void enableReservedMode() {
        if (getReleaseLevel() != ApplicationModule.RELEASE_LEVEL_RESERVED) {
            System.out.println("Setting release level as RELEASE_LEVEL_RESERVED.....");

            setReleaseLevel(ApplicationModule.RELEASE_LEVEL_RESERVED);
        }
    }

    public void disableReservedMode() {
        if (getReleaseLevel() != ApplicationModule.RELEASE_LEVEL_MANAGED) {
            System.out.println("Setting release level as RELEASE_LEVEL_MANAGED.....");

            setReleaseLevel(ApplicationModule.RELEASE_LEVEL_MANAGED);
        }
    }

    /**
     * Container's getter for LOVAllParameterForViewMode1.
     * @return LOVAllParameterForViewMode1
     */
    public ViewObjectImpl getLOVAllParameterForViewMode1() {
        return (ViewObjectImpl) findViewObject("LOVAllParameterForViewMode1");
    }

    /**
     * Container's getter for LOVAllParameterSetForViewMode1.
     * @return LOVAllParameterSetForViewMode1
     */
    public ViewObjectImpl getLOVAllParameterSetForViewMode1() {
        return (ViewObjectImpl) findViewObject("LOVAllParameterSetForViewMode1");
    }
    
    public int chkNmDuplicate(String val){
        System.out.println("Value in AM "+val);
        ViewObjectImpl pa=this.getLOVParam1();
        Row[] row = pa.getFilteredRows("ParamNme", val);
        String paramId = row[0].getAttribute("ParamId").toString();
        ViewObjectImpl par=this.getMnfFdbkParam();
        Row r=this.getMnfFdbkParam().getCurrentRow();
        String docId =(String)r.getAttribute("DocId");
        System.out.println(paramId+ " "+ docId);
        RowQualifier rq= new RowQualifier(par);
        rq.setWhereClause("CldId='"+getCldId()+"' and SlocId="+getSlocId()+" and OrgId='"+getOrgId()+
                          "' and DocId='"+docId+"' and ParamId='"+paramId+"'");
        System.out.println(rq.getExprStr());
        Row r1[]=par.getFilteredRows(rq);
        System.out.println(r1.length);
        if(r1.length>0) {
           // r.remove();
            for(Row dupliRow : r1)
            {
            if(dupliRow.equals(r))//match object
            {
            System.out.println("Same Row");
            }else
            return 1;
            }
        }
     return 0;
    }
    public void deleteAttachFileRow(String path) {
            RowSetIterator rowSetIterator = null;
            try{
            //System.out.println("File path in AMimpl : " + path);
            String filePath = "";
            String cldId = "",horgId ="",orgId ="",docId ="",fileNm = "";
            int slocId =1;
            ViewObjectImpl attch1 = this.getMnfFdbkAttch();
            Row[] rows = attch1.getFilteredRows("AttchFlPath", path);
                //System.out.println(rows.length);
                if(rows.length>0){
                   fileNm = (String)rows[0].getAttribute("AttchFlNm");
                   cldId  = (String)rows[0].getAttribute("CldId");
                   horgId = (String)rows[0].getAttribute("HoOrgId");
                   orgId = (String)rows[0].getAttribute("OrgId");
                   slocId = Integer.parseInt(rows[0].getAttribute("SlocId").toString());
                   docId = (String)rows[0].getAttribute("DocId");
                }
                                rowSetIterator = attch1.getRowSetIterator();
                                Key key = new Key(new Object[] { cldId,slocId,horgId,orgId,docId,fileNm });
                                Row[] ro = rowSetIterator.findByKey(key, 1);
                                //System.out.println("Filtered Row : "+ro.length);
                                Row row = rowSetIterator.findByKey(key, 1)[0];
                                rowSetIterator.setCurrentRow(row);
            //Row r = this.getMnfFdbkAttch().getCurrentRow();
            //filePath = (String)r.getAttribute("AttchFlPath");
            //System.out.println("Current Row File Path : "+filePath);
            filePath = (String)row.getAttribute("AttchFlPath");
            System.out.println("Row File Path : "+filePath);                
            File f = new File(filePath);
                if(f.exists()){
                boolean success = f.delete();
                System.out.println("File Deleted");
                }
            } catch (Exception x) {

                System.err.format("%s: no such" + " file or directory%n", path);
            }
            rowSetIterator.removeCurrentRow();
        }
    
    public Number checkYearFyId(){
                BigDecimal pdoFyId = new BigDecimal(0.0);
                String cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
                String usrOrg = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
                System.out.println("cldId::"+cldId+"usrOrg:::"+usrOrg);
                try {
                    pdoFyId = (BigDecimal) callStoredFunction(Types.NUMERIC, "APP.GET_ORG_FY_ID(?,?,?)", new Object[] {
                                                          cldId, usrOrg, new Timestamp(System.currentTimeMillis())
                    });
                } catch (NumberFormatException nfe) {
                    // TODO: Add catch code
                    nfe.printStackTrace();
                }
                //System.out.println(" financial id   " + pdoFyId );
                System.out.println("fucntion return::"+pdoFyId);
                Number val = null;
            try {
            
                val = new Number(pdoFyId);
            } catch (SQLException e) {
                System.out.println("current error is "+e);
            }
            System.out.println("return value is "+val);
            return val;
        }
}

