package mnfshopfloorfeedback.model.entities;

import java.sql.CallableStatement;
import java.sql.SQLException;

import java.sql.Types;

import java.util.Date;

import javax.el.ELContext;

import javax.el.ValueExpression;

import oracle.adf.share.ADFContext;

import oracle.jbo.AttributeList;
import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.RowInconsistentException;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;

import oracle.sql.NUMBER;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Sep 05 16:04:09 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MnfFdbkEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CldId,
        SlocId,
        HoOrgId,
        OrgId,
        DocId,
        DocDt,
        FdbkType,
        JcId,
        RcId,
        FdbkId,
        FdbkRmrk,
        UsrIdCreate,
        UsrIdCreateDt,
        UsrIdMod,
        UsrIdModDt,
        FdbkBasis,
        RefFdbkId,
        FyId,
        FreezeFdbk,
        OpId,
        OpSrNo,
        MnfFdbkAttch,
        MnfFdbkParam;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int DOCDT = AttributesEnum.DocDt.index();
    public static final int FDBKTYPE = AttributesEnum.FdbkType.index();
    public static final int JCID = AttributesEnum.JcId.index();
    public static final int RCID = AttributesEnum.RcId.index();
    public static final int FDBKID = AttributesEnum.FdbkId.index();
    public static final int FDBKRMRK = AttributesEnum.FdbkRmrk.index();
    public static final int USRIDCREATE = AttributesEnum.UsrIdCreate.index();
    public static final int USRIDCREATEDT = AttributesEnum.UsrIdCreateDt.index();
    public static final int USRIDMOD = AttributesEnum.UsrIdMod.index();
    public static final int USRIDMODDT = AttributesEnum.UsrIdModDt.index();
    public static final int FDBKBASIS = AttributesEnum.FdbkBasis.index();
    public static final int REFFDBKID = AttributesEnum.RefFdbkId.index();
    public static final int FYID = AttributesEnum.FyId.index();
    public static final int FREEZEFDBK = AttributesEnum.FreezeFdbk.index();
    public static final int OPID = AttributesEnum.OpId.index();
    public static final int OPSRNO = AttributesEnum.OpSrNo.index();
    public static final int MNFFDBKATTCH = AttributesEnum.MnfFdbkAttch.index();
    public static final int MNFFDBKPARAM = AttributesEnum.MnfFdbkParam.index();

    /**
     * This is the default constructor (do not remove).
     */
    public MnfFdbkEOImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("mnfshopfloorfeedback.model.entities.MnfFdbkEO");
    }


    /**
     * Gets the attribute value for CldId, using the alias name CldId.
     * @return the value of CldId
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CldId.
     * @param value value to set the CldId
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for SlocId, using the alias name SlocId.
     * @return the value of SlocId
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for SlocId.
     * @param value value to set the SlocId
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for HoOrgId, using the alias name HoOrgId.
     * @return the value of HoOrgId
     */
    public String getHoOrgId() {
        return (String) getAttributeInternal(HOORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for HoOrgId.
     * @param value value to set the HoOrgId
     */
    public void setHoOrgId(String value) {
        setAttributeInternal(HOORGID, value);
    }

    /**
     * Gets the attribute value for OrgId, using the alias name OrgId.
     * @return the value of OrgId
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for OrgId.
     * @param value value to set the OrgId
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for DocId, using the alias name DocId.
     * @return the value of DocId
     */
    public String getDocId() {
        return (String) getAttributeInternal(DOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for DocId.
     * @param value value to set the DocId
     */
    public void setDocId(String value) {
        setAttributeInternal(DOCID, value);
    }

    /**
     * Gets the attribute value for DocDt, using the alias name DocDt.
     * @return the value of DocDt
     */
    public Timestamp getDocDt() {
        return (Timestamp) getAttributeInternal(DOCDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for DocDt.
     * @param value value to set the DocDt
     */
    public void setDocDt(Timestamp value) {
        setAttributeInternal(DOCDT, value);
    }

    /**
     * Gets the attribute value for FdbkType, using the alias name FdbkType.
     * @return the value of FdbkType
     */
    public Integer getFdbkType() {
        return (Integer) getAttributeInternal(FDBKTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for FdbkType.
     * @param value value to set the FdbkType
     */
    public void setFdbkType(Integer value) {
        setAttributeInternal(FDBKTYPE, value);
    }

    /**
     * Gets the attribute value for JcId, using the alias name JcId.
     * @return the value of JcId
     */
    public String getJcId() {
        return (String) getAttributeInternal(JCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for JcId.
     * @param value value to set the JcId
     */
    public void setJcId(String value) {
        setAttributeInternal(JCID, value);
    }

    /**
     * Gets the attribute value for RcId, using the alias name RcId.
     * @return the value of RcId
     */
    public String getRcId() {
        return (String) getAttributeInternal(RCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for RcId.
     * @param value value to set the RcId
     */
    public void setRcId(String value) {
        setAttributeInternal(RCID, value);
    }

    /**
     * Gets the attribute value for FdbkId, using the alias name FdbkId.
     * @return the value of FdbkId
     */
    public String getFdbkId() {
        return (String) getAttributeInternal(FDBKID);
    }

    /**
     * Sets <code>value</code> as the attribute value for FdbkId.
     * @param value value to set the FdbkId
     */
    public void setFdbkId(String value) {
        setAttributeInternal(FDBKID, value);
    }

    /**
     * Gets the attribute value for FdbkRmrk, using the alias name FdbkRmrk.
     * @return the value of FdbkRmrk
     */
    public String getFdbkRmrk() {
        return (String) getAttributeInternal(FDBKRMRK);
    }

    /**
     * Sets <code>value</code> as the attribute value for FdbkRmrk.
     * @param value value to set the FdbkRmrk
     */
    public void setFdbkRmrk(String value) {
        setAttributeInternal(FDBKRMRK, value);
    }

    /**
     * Gets the attribute value for UsrIdCreate, using the alias name UsrIdCreate.
     * @return the value of UsrIdCreate
     */
    public Integer getUsrIdCreate() {
        return (Integer) getAttributeInternal(USRIDCREATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdCreate.
     * @param value value to set the UsrIdCreate
     */
    public void setUsrIdCreate(Integer value) {
        setAttributeInternal(USRIDCREATE, value);
    }

    /**
     * Gets the attribute value for UsrIdCreateDt, using the alias name UsrIdCreateDt.
     * @return the value of UsrIdCreateDt
     */
    public Timestamp getUsrIdCreateDt() {
        return (Timestamp) getAttributeInternal(USRIDCREATEDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdCreateDt.
     * @param value value to set the UsrIdCreateDt
     */
    public void setUsrIdCreateDt(Timestamp value) {
        setAttributeInternal(USRIDCREATEDT, value);
    }

    /**
     * Gets the attribute value for UsrIdMod, using the alias name UsrIdMod.
     * @return the value of UsrIdMod
     */
    public Integer getUsrIdMod() {
        return (Integer) getAttributeInternal(USRIDMOD);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdMod.
     * @param value value to set the UsrIdMod
     */
    public void setUsrIdMod(Integer value) {
        setAttributeInternal(USRIDMOD, value);
    }

    /**
     * Gets the attribute value for UsrIdModDt, using the alias name UsrIdModDt.
     * @return the value of UsrIdModDt
     */
    public Timestamp getUsrIdModDt() {
        return (Timestamp) getAttributeInternal(USRIDMODDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdModDt.
     * @param value value to set the UsrIdModDt
     */
    public void setUsrIdModDt(Timestamp value) {
        setAttributeInternal(USRIDMODDT, value);
    }

    /**
     * Gets the attribute value for FdbkBasis, using the alias name FdbkBasis.
     * @return the value of FdbkBasis
     */
    public Integer getFdbkBasis() {
        return (Integer) getAttributeInternal(FDBKBASIS);
    }

    /**
     * Sets <code>value</code> as the attribute value for FdbkBasis.
     * @param value value to set the FdbkBasis
     */
    public void setFdbkBasis(Integer value) {
        setAttributeInternal(FDBKBASIS, value);
    }

    /**
     * Gets the attribute value for RefFdbkId, using the alias name RefFdbkId.
     * @return the value of RefFdbkId
     */
    public String getRefFdbkId() {
        return (String) getAttributeInternal(REFFDBKID);
    }

    /**
     * Sets <code>value</code> as the attribute value for RefFdbkId.
     * @param value value to set the RefFdbkId
     */
    public void setRefFdbkId(String value) {
        setAttributeInternal(REFFDBKID, value);
    }

    /**
     * Gets the attribute value for FyId, using the alias name FyId.
     * @return the value of FyId
     */
    public Integer getFyId() {
        return (Integer) getAttributeInternal(FYID);
    }

    /**
     * Sets <code>value</code> as the attribute value for FyId.
     * @param value value to set the FyId
     */
    public void setFyId(Integer value) {
        setAttributeInternal(FYID, value);
    }

    /**
     * Gets the attribute value for FreezeFdbk, using the alias name FreezeFdbk.
     * @return the value of FreezeFdbk
     */
    public String getFreezeFdbk() {
        return (String) getAttributeInternal(FREEZEFDBK);
    }

    /**
     * Sets <code>value</code> as the attribute value for FreezeFdbk.
     * @param value value to set the FreezeFdbk
     */
    public void setFreezeFdbk(String value) {
        setAttributeInternal(FREEZEFDBK, value);
    }

    /**
     * Gets the attribute value for OpId, using the alias name OpId.
     * @return the value of OpId
     */
    public String getOpId() {
        return (String) getAttributeInternal(OPID);
    }

    /**
     * Sets <code>value</code> as the attribute value for OpId.
     * @param value value to set the OpId
     */
    public void setOpId(String value) {
        setAttributeInternal(OPID, value);
    }

    /**
     * Gets the attribute value for OpSrNo, using the alias name OpSrNo.
     * @return the value of OpSrNo
     */
    public Integer getOpSrNo() {
        return (Integer) getAttributeInternal(OPSRNO);
    }

    /**
     * Sets <code>value</code> as the attribute value for OpSrNo.
     * @param value value to set the OpSrNo
     */
    public void setOpSrNo(Integer value) {
        setAttributeInternal(OPSRNO, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getMnfFdbkAttch() {
        return (RowIterator) getAttributeInternal(MNFFDBKATTCH);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getMnfFdbkParam() {
        return (RowIterator) getAttributeInternal(MNFFDBKPARAM);
    }


    /**
     * @param cldId key constituent
     * @param slocId key constituent
     * @param hoOrgId key constituent
     * @param orgId key constituent
     * @param docId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(String cldId, Integer slocId, String hoOrgId, String orgId, String docId) {
        return new Key(new Object[] { cldId, slocId, hoOrgId, orgId, docId });
    }

    /**
     * @param userid user id
     * @param OrgId organisation id
     * @param slocid server location id
     * @param docId document id ()
     * @return next Doc id
     */
    public String getTxnId(String cldId, Integer slocid, String OrgId, Integer userid, Integer docId) {
        String txnID = (String)callStoredFunction(Types.VARCHAR, "app.get_txn_id(?,?,?,?,?,?)", new Object[] {cldId, slocid,OrgId, userid, docId, 0});
        return txnID; 
    }
    
    public String getDispDocId(Integer slocid, String cldId, String OrgId, String docId, String fy_id) {
        String disp_doc_ID = (String)callStoredFunction(Types.VARCHAR, "mnf.FN_MNF_GEN_DISP_DOC_ID(?,?,?,?,?,?,?,?,?)", new Object[] {slocid, cldId, OrgId, 26005, docId, null, "MNF$FDBK", fy_id, 0});
        return disp_doc_ID; 
    }
    
    public String getFinancialYearId(String cldId, String OrgId, Timestamp txn_date) {
        String FY_ID = (String)callStoredFunction(Types.VARCHAR, "app.fn_get_fy_id(?,?,?,?)", new Object[] {cldId, OrgId, txn_date, "FY"});
        return FY_ID; 
    }
    
    /********************    STORED Function    *************************************/
     
        protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
            CallableStatement st = null;
            try {
                st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
                st.registerOutParameter(1, sqlReturnType);
                if (bindVars != null) {
                    for (int z = 0; z < bindVars.length; z++) {
                        st.setObject(z + 2, bindVars[z]);
                        System.out.println(bindVars[z]);
                    }
                }
                st.executeUpdate();
                return st.getObject(1);
            } catch (SQLException e) {
                e.printStackTrace();
                throw new JboException(e);
            } finally {
                if (st != null) {
                    try {
                        st.close();
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                }
            }
        }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
        setUsrIdCreateDt(new Timestamp(System.currentTimeMillis()));
        setDocDt(new oracle.jbo.domain.Timestamp(System.currentTimeMillis()));
        setFdbkBasis(33);
        if (resolvEl("#{pageFlowScope.GLBL_APP_USR}") != null) {
            setUsrIdCreate(Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString()));
        }
        setDocId(getTxnId(getCldId(), getSlocId(), getOrgId(), getUsrIdCreate(), 26005).toString());
        String fy_id = getFinancialYearId(getCldId(), getOrgId(), getDocDt());
        setFyId(Integer.parseInt(fy_id));
        setFdbkId(getDispDocId(getSlocId(), getCldId(), getOrgId(), getDocId(), fy_id).toString());
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
            try {
                super.lock();
            } catch (RowInconsistentException e) {
                refresh(REFRESH_WITH_DB_ONLY_IF_UNCHANGED | REFRESH_CONTAINEES);
                super.lock();
            }
        }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        if (operation == DML_UPDATE) {
            setModifyHistParam();
        }
        super.doDML(operation, e);
    }

    /**
     * Method to set the row modification history
     * **/

     public void setModifyHistParam() {
        setUsrIdModDt(new Timestamp(System.currentTimeMillis()));
        if (resolvEl("#{pageFlowScope.GLBL_APP_USR}") != null) {
            setUsrIdMod(Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString()));
        }

    } 

      public Object resolvEl(String data) {
        ADFContext adfCtx = ADFContext.getCurrent();
        ELContext elContext = adfCtx.getELContext();
        ValueExpression valueExp = adfCtx.getExpressionFactory().createValueExpression(elContext, data, Object.class);
        Object Message = valueExp.getValue(elContext).toString();
        return Message;
    } 
}

