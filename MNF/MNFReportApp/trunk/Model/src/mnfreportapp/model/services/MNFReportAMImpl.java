package mnfreportapp.model.services;


import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.util.Date;

import javax.el.ELContext;

import javax.el.ExpressionFactory;

import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import mnfreportapp.model.services.common.MNFReportAM;

import mnfreportapp.model.views.LovRptAppVOImpl;
import mnfreportapp.model.views.MNFReportSearchVOImpl;
import mnfreportapp.model.views.MNFReportSearchVORowImpl;
import mnfreportapp.model.views.RptTransVOImpl;

import oracle.adf.share.ADFContext;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Oct 15 15:03:08 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MNFReportAMImpl extends ApplicationModuleImpl implements MNFReportAM {
    /**
     * This is the default constructor (do not remove).
     */
    public MNFReportAMImpl() {
    }

    public String getCldIdValue() {
        return resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
    }

    public Integer getSlocIdValue() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
    }

    public String getHoOrgIdValue() {
        return resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
    }

    public String getOrgIdValue() {
        return resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
    }

    public Integer getUsrId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
    }

    /**Method to resolve expression- returns String value*/
    public String resolvEl(String data) {
        ADFContext adfCtx = ADFContext.getCurrent();
        ELContext elContext = adfCtx.getELContext();
        ValueExpression valueExp = adfCtx.getExpressionFactory().createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }

    /**
     * Container's getter for MNFReportSearchVO1.
     * @return MNFReportSearchVO1
     */
    public MNFReportSearchVOImpl getMNFReportSearchVO1() {
        return (MNFReportSearchVOImpl) findViewObject("MNFReportSearchVO1");
    }

    /**
     * Set Bind Variables for Report Search VO
     */
    public void GlobalVariablesSet() {
        ViewObjectImpl fReportSearchVO1 = this.getMNFReportSearchVO1();
        fReportSearchVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        fReportSearchVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        fReportSearchVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        fReportSearchVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
        fReportSearchVO1.executeQuery();

        ViewObjectImpl dataVO1 = this.getMNFTempDataVO1();
        dataVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        dataVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        dataVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        dataVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
        dataVO1.executeQuery();
    }

    /**
     * Container's getter for MNFTempData1.
     * @return MNFTempData1
     */
    public ViewObjectImpl getMNFTempDataVO1() {
        return (ViewObjectImpl) findViewObject("MNFTempDataVO1");
    }


    /**
     * Container's getter for LOVBomDetail1.
     * @return LOVBomDetail1
     */
    public ViewObjectImpl getLOVBomDetail() {
        return (ViewObjectImpl) findViewObject("LOVBomDetail");
    }

    /**
     * Container's getter for LOVPdoDetail1.
     * @return LOVPdoDetail1
     */
    public ViewObjectImpl getLOVPdoDetail() {
        return (ViewObjectImpl) findViewObject("LOVPdoDetail");
    }

    /**
     * Container's getter for RptTrans1.
     * @return RptTrans1
     */
    public RptTransVOImpl getRptTrans1() {
        return (RptTransVOImpl) findViewObject("RptTrans1");
    }

    /**
     * Container's getter for LovRptApp1.
     * @return LovRptApp1
     */
    public LovRptAppVOImpl getLovRptApp1() {
        return (LovRptAppVOImpl) findViewObject("LovRptApp1");
    }
    // Method to call the SQl function
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            // 1. Create a JDBC CallabledStatement
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            // 2. Register the first bind variable for the return value
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                // 3. Loop over values for the bind variables passed in, if any
                for (int z = 0; z < bindVars.length; z++) {
                    // 4. Set the value of user-supplied bind vars in the stmt
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            // 5. Set the value of user-supplied bind vars in the stmt
            st.executeUpdate();
            // 6. Return the value of the first bind variable
            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    // 7. Close the statement
                    st.close();
                } catch (SQLException e) {
                }
            }
        }
    }

    public void setProdFcTypeTrans(){
        MNFReportSearchVOImpl  mnfS = this.getMNFReportSearchVO1();
        
        ViewObjectImpl vo = this.getLovOrg1();
        vo.setNamedWhereClauseParam("BindOrgId", mnfS.getCurrentRow().getAttribute("OrgId"));
        vo.executeQuery();
        
     //   System.out.println("fc type "+mnfS.getCurrentRow().getAttribute("bdgMthTrans"));
       // System.out.println("fc teype from lov vw "+this.getLovOrg1().getCurrentRow().getAttribute("BdgMethd"));
    }

    public void setDate(){
                Date dt = new Date();
                Timestamp ts = null;
                try {
                    dt = (Date) (callStoredFunction(Types.DATE, "APP.fn_get_fy_start_date(?,?,?,?)", new Object[] {
                                                    getCldIdValue(), getOrgIdValue(), new Timestamp(System.currentTimeMillis()), "FY"
                    }));
                    ts = new Timestamp(dt.getTime());
                } catch (Exception e) {
                    e.printStackTrace();
                }
                   ViewObjectImpl searchVO = (ViewObjectImpl)this.getMNFReportSearchVO1();
                   searchVO.getCurrentRow().setAttribute("StartDateTrans", ts);
                   searchVO.getCurrentRow().setAttribute("EndDateTrans", new Timestamp(System.currentTimeMillis()));
               }

    /**
     * Container's getter for LovOrg1.
     * @return LovOrg1
     */
    public ViewObjectImpl getLovOrg1() {
        return (ViewObjectImpl) findViewObject("LovOrg1");
    }
}


