package mnfroutecard.model.services;

import adf.utils.ebiz.EbizParams;

import adf.utils.model.ADFModelUtils;

import appCostCenterSevice.model.service.AppCostCenterServiceAMImpl;

import java.io.File;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.ListIterator;
import java.util.Set;

import java.util.StringTokenizer;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import mnfroutecard.model.services.common.MNFRouteCardAM;
import mnfroutecard.model.views.MnfItmStkBinRqmtVwVOImpl;
import mnfroutecard.model.views.MnfItmStkBinVwVOImpl;
import mnfroutecard.model.views.MnfItmStkLotRqmtVwVOImpl;
import mnfroutecard.model.views.MnfItmStkLotVWVOImpl;
import mnfroutecard.model.views.MnfItmStkSrRqmtVwVOImpl;
import mnfroutecard.model.views.MnfItmStkSrVwVOImpl;

import mnfroutecard.model.views.MnfRcSrcVORowImpl;

import oracle.adf.share.ADFContext;

import oracle.jbo.ApplicationModule;
import oracle.jbo.AttributeDef;
import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewObject;
import oracle.jbo.client.Configuration;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.apache.myfaces.trinidad.context.RequestContext;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Sep 19 14:46:06 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MNFRouteCardAMImpl extends ApplicationModuleImpl implements MNFRouteCardAM {
    /**
     * This is the default constructor (do not remove).
     */
    private static int NUMBER = Types.INTEGER;
    private static int NUMERIC = Types.NUMERIC;
    private static int VARCHAR = Types.VARCHAR;

    /* private String CldIdValue;
    private Integer SlocIdValue;
    private String HoOrgIdValue;
    private String OrgIdValue; */

    public String getCldIdValue() {
        return resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
    }

    public Integer getSlocIdValue() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
    }

    public String getHoOrgIdValue() {
        return resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
    }

    public String getOrgIdValue() {
        return resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
    }

    public Integer getUsrId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
    }

    public MNFRouteCardAMImpl() {
    }

    /**
     * Container's getter for MnfRcVO.
     * @return MnfRcVO
     */
    public ViewObjectImpl getMnfRcVO() {
        return (ViewObjectImpl) findViewObject("MnfRcVO");
    }

    /**
     * Container's getter for TempSearchVO.
     * @return TempSearchVO
     */
    public ViewObjectImpl getTempSearchVO() {
        return (ViewObjectImpl) findViewObject("TempSearchVO");
    }


    /**
     * Container's getter for SearchData1.
     * @return SearchData1
     */
    public ViewObjectImpl getSearchDataVO() {
        return (ViewObjectImpl) findViewObject("SearchDataVO");
    }

    /**Method to resolve expression- returns String value*/
    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }

    /**Method to resolve expression- returns String value*/
    public Object resolvElO(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        Object Message = valueExp.getValue(elContext);
        return Message;
    }


    /**
     * Get Bind Variable Values for First Time
     */
    public void GlobalVariablesSet() {

        ViewObjectImpl impl = this.getTempSearchVO();
        impl.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        impl.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        impl.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        impl.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
        impl.executeQuery();

        ViewObjectImpl lOVProjectNameVO1 = this.getLOVProjectNameVO1();
        lOVProjectNameVO1.setNamedWhereClauseParam("BindCldId", getCldIdValue());
        lOVProjectNameVO1.setNamedWhereClauseParam("BindSlocId", getSlocIdValue());
        lOVProjectNameVO1.setNamedWhereClauseParam("BindOrgId", getOrgIdValue());
        lOVProjectNameVO1.executeQuery();

    }

    /**
     * Code for Search Button
     */
    public void SearchForData() {
        // System.out.println("Inside Search");
        ViewObjectImpl tempVo = this.getTempSearchVO();
        Row tempRow = tempVo.getCurrentRow();

        ViewObjectImpl dataVo = this.getSearchDataVO();
        /*  System.out.println("Cld " + this.getCldIdValue() + " sloc " + this.getSlocIdValue() + " Ho " +
                           this.getHoOrgIdValue() + " Org " + this.getOrgIdValue());
       */dataVo.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        dataVo.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        dataVo.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        dataVo.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());

        if (tempRow != null) {
            if (tempRow.getAttribute("RcDocIdTrans") != null) {
                dataVo.setNamedWhereClauseParam("BindRcId", tempRow.getAttribute("RcDocIdTrans"));
            }
            if (tempRow.getAttribute("StatusIdTrans") != null) {
                dataVo.setNamedWhereClauseParam("BindStatusId", tempRow.getAttribute("StatusIdTrans"));
            }
            if (tempRow.getAttribute("MppDocIdTrans") != null) {
                dataVo.setNamedWhereClauseParam("BindRefDocId", tempRow.getAttribute("MppDocIdTrans"));
            }
            if (tempRow.getAttribute("ModeIdTrans") != null) {
                dataVo.setNamedWhereClauseParam("BindModeId", tempRow.getAttribute("ModeIdTrans"));
            }
            if (tempRow.getAttribute("FromDateTrans") != null) {
                dataVo.setNamedWhereClauseParam("BindStartDate", tempRow.getAttribute("FromDateTrans"));
            }
            if (tempRow.getAttribute("ToDateTrans") != null) {
                dataVo.setNamedWhereClauseParam("BindEndDate", tempRow.getAttribute("ToDateTrans"));
            }
            if (tempRow.getAttribute("UserIdTrans") != null) {
                dataVo.setNamedWhereClauseParam("BindUserId", tempRow.getAttribute("UserIdTrans"));
            }

            dataVo.executeQuery();
        }
        //System.out.println("Outside Search");
    }

    /**
     * For Reset The Data in Table
     */
    public void ResetTable() {
        // System.out.println("Inside Reset");
        ViewObjectImpl impl = this.getTempSearchVO();
        impl.executeQuery();

        ViewObjectImpl dataVO = this.getSearchDataVO();

        dataVO.setNamedWhereClauseParam("BindCldId", "-1");
        dataVO.setNamedWhereClauseParam("BindSlocId", -1);
        dataVO.setNamedWhereClauseParam("BindHoOrgId", "-1");
        dataVO.setNamedWhereClauseParam("BindOrgId", "-1");
        dataVO.setNamedWhereClauseParam("BindRcId", null);
        dataVO.setNamedWhereClauseParam("BindStatusId", null);
        dataVO.setNamedWhereClauseParam("BindRefDocId", null);
        dataVO.setNamedWhereClauseParam("BindModeId", null);
        dataVO.setNamedWhereClauseParam("BindStartDate", null);
        dataVO.setNamedWhereClauseParam("BindEndDate", null);
        dataVO.setNamedWhereClauseParam("BindUserId", null);

        dataVO.executeQuery();
        //System.out.println("Outside Reset");
    }

    /**
     * To Filter Detail data from Search to Detail
     */
    public void FilterDetailData() {
        //System.out.println("Inside 2nd Page");
        ViewObjectImpl impl = this.getMnfRcVO();
        String docId = null;
        ViewCriteria criteria = impl.getViewCriteria("MnfRcVOCriteria");
        impl.applyViewCriteria(criteria);

        impl.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        impl.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        impl.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        impl.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());

        if (resolvEl("#{pageFlowScope.P_DOC_ID}") != null) {
            impl.setNamedWhereClauseParam("BindDocId", resolvEl("#{pageFlowScope.P_DOC_ID}"));

            docId = resolvEl("#{pageFlowScope.P_DOC_ID}");
        }
        impl.executeQuery();
        // System.out.println("------------->>>> " + docId);
        setdualOverheadParam1(getCldIdValue(), getSlocIdValue(), getHoOrgIdValue(), getOrgIdValue(), docId);
        setdualMachineDownTimeParam1(getCldIdValue(), getSlocIdValue(), getHoOrgIdValue(), getOrgIdValue(), docId);
        setQcParameter(getCldIdValue(), getSlocIdValue(), getHoOrgIdValue());
        setDualItmStk(getCldIdValue(), getSlocIdValue(), getHoOrgIdValue(), getOrgIdValue(), docId);
        //  defaultDualItmStk();
        // setParamForParamId(getCldIdValue(), getSlocIdValue(), getHoOrgIdValue(), getOrgIdValue());
        //setParamForParamSet(getCldIdValue(), getSlocIdValue(), getHoOrgIdValue(), getOrgIdValue());
        //setParamForOpDesc(getCldIdValue(), getSlocIdValue(), getHoOrgIdValue(), getOrgIdValue());

        if (data == "YES" || data.equals("YES")) {
            stkStatuspdate1(getCldIdValue(), getSlocIdValue(), getHoOrgIdValue(), getOrgIdValue(), docId);

        }

        ViewObjectImpl impl1 = this.getLOVQcParamNameVO1();
        impl1.setNamedWhereClauseParam("BindCldId", getCldIdValue());
        impl1.setNamedWhereClauseParam("BindSlocId", getSlocIdValue());
        impl1.setNamedWhereClauseParam("BindOrgId", getOrgIdValue());
        impl1.executeQuery();

        ViewObjectImpl lOVProjectNameVO1 = this.getLOVProjectNameVO1();
        lOVProjectNameVO1.setNamedWhereClauseParam("BindCldId", getCldIdValue());
        lOVProjectNameVO1.setNamedWhereClauseParam("BindSlocId", getSlocIdValue());
        lOVProjectNameVO1.setNamedWhereClauseParam("BindOrgId", getOrgIdValue());
        lOVProjectNameVO1.executeQuery();

        ADFContext.getCurrent().getPageFlowScope().put("CC_CHK", getCostCenterChk());

    }

    public void setCreateTFParamAfterCreate() {
        String docId = null;
        /* if( resolvEl("#{pageFlowScope.P_DOC_ID}") != null)
              docId = resolvEl("#{pageFlowScope.P_DOC_ID}");
             else{ */
        ViewObjectImpl impl = this.getMnfRcVO();
        docId = impl.getCurrentRow().getAttribute("DocId").toString();

        // }
        // System.out.println("helloooo 2222 " + docId);
        setdualOverheadParam1(getCldIdValue(), getSlocIdValue(), getHoOrgIdValue(), getOrgIdValue(), docId);
        setdualMachineDownTimeParam1(getCldIdValue(), getSlocIdValue(), getHoOrgIdValue(), getOrgIdValue(), docId);
        setQcParameter(getCldIdValue(), getSlocIdValue(), getHoOrgIdValue());
        setDualItmStk(getCldIdValue(), getSlocIdValue(), getHoOrgIdValue(), getOrgIdValue(), docId);
        //setOpItm()
        ViewObjectImpl impl1 = this.getLOVQcParamNameVO1();
        impl1.setNamedWhereClauseParam("BindCldId", getCldIdValue());
        impl1.setNamedWhereClauseParam("BindSlocId", getSlocIdValue());
        impl1.setNamedWhereClauseParam("BindOrgId", getOrgIdValue());
        impl1.executeQuery();
        ADFContext.getCurrent().getPageFlowScope().put("CC_CHK", getCostCenterChk());
    }

    /**
     * To set parametere for OverheadParameter.
     *
     * **/
    private void setParamForOpDesc(String cld, Integer slc, String ho, String org) {

        ViewObjectImpl Voimpl = this.getLOVOpDescVO1();
        Voimpl.setNamedWhereClauseParam("BindCldId", cld);
        Voimpl.setNamedWhereClauseParam("BindSlcId", slc);
        Voimpl.setNamedWhereClauseParam("BindHoOrgId", ho);
        Voimpl.setNamedWhereClauseParam("BindOrgId", org);
        //Voimpl.setNamedWhereClauseParam("BindDocId",docId);
        Voimpl.executeQuery();

    }

    /**
     * To set parametere for OverheadParameter.
     *
     * **/
    private void setdualOverheadParam1(String cld, Integer slc, String ho, String org, String docId) {

        ViewObjectImpl Voimpl = this.getDualOverHeadParamVO1();
        Voimpl.setNamedWhereClauseParam("BindCldId", cld);
        Voimpl.setNamedWhereClauseParam("BindSlocId", slc);
        Voimpl.setNamedWhereClauseParam("BindHoOrgId", ho);
        Voimpl.setNamedWhereClauseParam("BindOrgId", org);
        //Voimpl.setNamedWhereClauseParam("BindDocId",docId);
        Voimpl.executeQuery();
        // Row currentRow = this.getDualOverHeadParamVO1().getCurrent;
        Row currentRow = getDualOverHeadParamVO1().first();
        currentRow.setAttribute("DocId", docId);
        //getDualOverHeadParamVO1().executeQuery();
    }

    /**
     * To set parametere for OverheadParameter.
     *
     * **/
    private void setdualMachineDownTimeParam1(String cld, Integer slc, String ho, String org, String docId) {

        ViewObjectImpl Voimpl = this.getDualMachineDowntimeVO1();
        Voimpl.setNamedWhereClauseParam("BindCldId", cld);
        Voimpl.setNamedWhereClauseParam("BindSlocId", slc);
        Voimpl.setNamedWhereClauseParam("BindHoOrgId", ho);
        Voimpl.setNamedWhereClauseParam("BindOrgId", org);

        Voimpl.executeQuery();

        Row currentRow = getDualMachineDowntimeVO1().first();
        currentRow.setAttribute("RcDocId", docId);

    }

    /**
     * To set parametere for QC.
     *
     * **/
    private void setQcParameter(String cld, Integer slc, String org) {

        ViewObjectImpl Voimpl = this.getLOVQcParameterVO1();
        Voimpl.setNamedWhereClauseParam("BindCldId", cld);
        Voimpl.setNamedWhereClauseParam("BindSlocId", slc);
        Voimpl.setNamedWhereClauseParam("BindOrgId", org);

        Voimpl.executeQuery();


    }

    /**
     * To set parametere for overheadParameterId.
     *
     * **/
    private void setParamForParamId(String cld, Integer slc, String ho, String org) {
        ViewObjectImpl Voimpl = this.getLOVOverHeadParameterVO1();
        Voimpl.setNamedWhereClauseParam("BindCldId", cld);
        Voimpl.setNamedWhereClauseParam("BindSlocId", slc);
        Voimpl.setNamedWhereClauseParam("BindHoOrgId", ho);
        Voimpl.setNamedWhereClauseParam("BindOrgId", org);
        Voimpl.setNamedWhereClauseParam("BindSetID", null);
        Voimpl.executeQuery();
    }

    /**
     * To set parametere for OverheadParameterSet.
     *
     * **/
    private void setParamForParamSet(String cld, Integer slc, String ho, String org) {
        ViewObjectImpl Voimpl = this.getLOVRouteCardParamSetVO1();
        Voimpl.setNamedWhereClauseParam("BindCldId", cld);
        Voimpl.setNamedWhereClauseParam("BindHoOrgID", ho);
        //  Voimpl.setNamedWhereClauseParam("BindParamType", null);
        Voimpl.setNamedWhereClauseParam("BindSlocId", slc);
        Voimpl.executeQuery();
    }


    /**
     * Container's getter for MnfRcOp1.
     * @return MnfRcOp1
     */
    public ViewObjectImpl getMnfRcOpVO1() {
        return (ViewObjectImpl) findViewObject("MnfRcOpVO1");
    }

    /**
     * Container's getter for MnfRcToMnfRcOpVL1.
     * @return MnfRcToMnfRcOpVL1
     */
    public ViewLinkImpl getMnfRcToMnfRcOpVL1() {
        return (ViewLinkImpl) findViewLink("MnfRcToMnfRcOpVL1");
    }

    /**
     * Container's getter for MnfRcOpItm1.
     * @return MnfRcOpItm1
     */
    public ViewObjectImpl getMnfRcOpItmVO1() {
        return (ViewObjectImpl) findViewObject("MnfRcOpItmVO1");
    }

    /**
     * Container's getter for MnfRcOpToMnfRcOpItmVL1.
     * @return MnfRcOpToMnfRcOpItmVL1
     */
    public ViewLinkImpl getMnfRcOpToMnfRcOpItmVL1() {
        return (ViewLinkImpl) findViewLink("MnfRcOpToMnfRcOpItmVL1");
    }

    /********************    STORED Function    *************************************/

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        //  System.out.println("Inside Callable Function");
        CallableStatement st = null;
        try {
            st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            // System.out.println("Statement is " + st);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    // System.out.println("Bind Variable is " + bindVars[z]);
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.executeUpdate();
            // System.out.println("Return value is " + st.getObject(1));
            return st.getObject(1);
        } catch (SQLException e) {
            e.printStackTrace();
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }


    /**
     * Fetch Data from PDO/MPP to RC
     */
    public Boolean FetchDataToRc() {
        Boolean retVal = false;
        ViewObjectImpl impl = this.getMnfRcVO();
        Row currentRow = impl.getCurrentRow();
        /*     DeleteRecords((String) currentRow.getAttribute("HoOrgId"), (String) currentRow.getAttribute("OrgId"),
                      (Integer) currentRow.getAttribute("SlocId"), (String) currentRow.getAttribute("CldId"),
                      (String) currentRow.getAttribute("DocId")); */
        ViewObjectImpl itmVO2 = this.getMnfRcOpItmDispVO1();
        System.out.println("befre Row Count  is : " + itmVO2.getRowCount());
        int count = itmVO2.getRowCount();
        if (currentRow != null) {
            ViewObjectImpl msr = this.getMnfRcSrcVO1();
            Row msrrow = msr.getCurrentRow();
            if (msrrow != null) {
                Integer JcBasis = 0;
                Integer DocTypeSrc = (Integer) msrrow.getAttribute("DocTypeSrc");
                if (DocTypeSrc == 92) {
                    JcBasis = 26001;
                } else if (DocTypeSrc == 91) {
                    JcBasis = 26002;
                }
                String DocIdSrc = (String) msrrow.getAttribute("DocIdSrc");
                System.out.println("Doc value__=======::" + DocIdSrc + "  " + JcBasis + "  " +
                                   currentRow.getAttribute("DocId") + "  " +
                                   currentRow.getAttribute("EmployeeIdRcTrans") + "  " +
                                   currentRow.getAttribute("OutptItmQty") + "  " +
                                   currentRow.getAttribute("ActOutptItmQty"));
                try {
                    this.callStoredFunction(Types.INTEGER,
                                            "MNF.FN_MNF_INS_SRC_TO_JC_RC(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                            this.getCldIdValue(), this.getSlocIdValue(), this.getHoOrgIdValue(),
                                            this.getOrgIdValue(), JcBasis, DocIdSrc, currentRow.getAttribute("DocId"),
                                            currentRow.getAttribute("DocDt"), currentRow.getAttribute("UsrIdCreate"),
                                            currentRow.getAttribute("UsrIdCreateDt"), "RC", 0, 0,
                                            currentRow.getAttribute("EmployeeIdRcTrans"),
                                            currentRow.getAttribute("ShiftIdFromRcTrans"),
                                            currentRow.getAttribute("OutptItmQty"),
                                            currentRow.getAttribute("ActOutptItmQty")
                    });
                    retVal = true;
                } catch (Exception e) {
                    e.printStackTrace();
                    //  System.out.println("ERROR IN CALLING FUNCTION FN_MNF_INS_PDO_TO_JC_RC at AMIMPL:" + e.getMessage());
                }
            }
        }

        //  System.out.println("Before executing Query");

        this.getMnfRcOpOutputItmVO1().executeQuery();
        this.getMnfRcOpInputItmVO1().executeQuery();
        this.getMnfRcOpItmVO1().executeQuery();
        this.getMnfRcOpItmDispVO1().executeQuery();
        this.getMnfRcOpVO1().executeQuery();

        /*  System.out.println("After executing all queries");
        System.out.println("No of rows in MnfRcOp is " + this.getMnfRcOpVO1().getEstimatedRowCount());
        System.out.println("No of rows in MnfRcOpItm is " + this.getMnfRcOpItmVO1().getEstimatedRowCount());
        System.out.println("No of rows in MnfRcOpInput is " + this.getMnfRcOpInputItmVO1().getEstimatedRowCount());
        System.out.println("No of rows in MnfRcOpOutput is " + this.getMnfRcOpOutputItmVO1().getEstimatedRowCount()); */

        if (retVal) {
            if (this.getMnfRcVO().getCurrentRow() != null) {

                Object stDate = this.getMnfRcVO().getCurrentRow().getAttribute("StrtDt");
                Object endDate = this.getMnfRcVO().getCurrentRow().getAttribute("EndDt");

                RowSetIterator rsi = this.getMnfRcOpVO1().createRowSetIterator(null);
                Row next = null;
                while (rsi.hasNext()) {
                    next = rsi.next();
                    if (next != null && stDate != null && next.getAttribute("StrtDt") == null && endDate != null &&
                        next.getAttribute("EndDt") == null) {
                        next.setAttribute("StrtDt", stDate);
                        next.setAttribute("EndDt", endDate);
                    }
                }
                if (rsi != null) {
                    rsi.closeRowSetIterator();
                }
                ViewObjectImpl itmVO1 = this.getMnfRcOpItmDispVO1();
                System.out.println("Row Count  is : " + itmVO1.getRowCount());
                if (count == 0) {
                    itmVO1.setRangeSize(-1);
                    Row[] itmRsi = itmVO1.getAllRowsInRange();
                    RowSetIterator rsetItr = this.getMnfRcSrcVO1().createRowSetIterator(null);
                    Object whId = this.getMnfRcVO().getCurrentRow().getAttribute("WhId");
                    Object rqmtId = this.getMnfRcVO().getCurrentRow().getAttribute("RqmtAreaId");
                    Object prjId = this.getMnfRcVO().getCurrentRow().getAttribute("PrjId");
                    while (rsetItr.hasNext()) {
                        Row nex = rsetItr.next();
                        if (whId != null) {
                            nex.setAttribute("WhId", whId.toString());
                        }
                    }
                    if (itmRsi != null) {
                        for (int i = 0; i < itmRsi.length; i++) {
                            if (whId != null) {
                                itmRsi[i].setAttribute("WhId", whId.toString());
                            }
                            if (rqmtId != null) {
                                itmRsi[i].setAttribute("RqmtAreaId", Integer.parseInt(rqmtId.toString()));
                            }
                            if (prjId != null) {
                                itmRsi[i].setAttribute("PrjId", prjId.toString());
                            }
                        }
                    }
                }
            }
        }

        //updateCostCenterAmt();
        if (resolvEl("#{pageFlowScope.CC_CHK}").toString().equals("Y") ||
            resolvEl("#{pageFlowScope.CC_CHK}").toString() == "Y") {
            this.updateCostCenterAmt();
        }

        this.getDBTransaction().postChanges();
        System.out.println("Final Return Value");
        return retVal;
    }

    /**
     * Function which tells whether to edit Actual Available Quantity or not
     */
    public String ChkActualAvailableQtyEditOrNot() {
        String retVal = "N";
        try {
            retVal = this.callStoredFunction(Types.VARCHAR, "MNF.FN_MNF_CHK_ORG_PRF(?,?,?,?)", new Object[] {
                                             this.getCldIdValue(), this.getSlocIdValue(), this.getOrgIdValue(),
                                             "AUTO_CONSMPTN_BASIS"
            }).toString();


        } catch (Exception e) {
            // System.out.println("ERROR IN CALLING FUNCTION FN_MNF_CHK_ORG_PRF at AMIMPL :" + e.getMessage());
        }

        return retVal;
    }

    /**
     * Method to get system generated file no
     * **/
    public String getUpFileId(String cldId, Integer slcId, String hoOrgId, String orgId) {

        Object fnRetVal;

        try {
            fnRetVal = callStoredFunction(Types.VARCHAR, "APP.FN_APP_GEN_FILE_ATTCH_ID(?,?,?,?,?)", new Object[] {
                                          slcId, cldId, hoOrgId, orgId, "MNF$RC$ATTCH"
            });

            if (fnRetVal != null) {

                if (fnRetVal.equals(-1)) {
                    showFacesMsg("Error while fetching file Id details", null, FacesMessage.SEVERITY_ERROR, null);
                }

                return fnRetVal.toString();
            }

        } catch (Exception e) {
            //  System.out.println("ERROR IN CALLING FUNCTION FN_APP_GEN_FILE_ATTCH_ID at AMIMPL :" + e.getMessage());
            e.printStackTrace();

        }
        showFacesMsg("Error while fetching file Id details", null, FacesMessage.SEVERITY_ERROR, null);

        return "0";
    }

    /**
     * Method to get default file location
     * **/
    public String getUpFilePath(Integer slcId) {
        Object fnRetVal;

        try {
            fnRetVal = callStoredFunction(Types.VARCHAR, "APP.FN_GET_APP_DOC_ATTACH_PATH(?)", new Object[] { slcId });

            if (fnRetVal != null) {

                if (fnRetVal.equals(-1)) {
                    showFacesMsg("Error while fetching file path details", null, FacesMessage.SEVERITY_ERROR, null);
                }

                return fnRetVal.toString();
            }

        } catch (Exception e) {
            // System.out.println("ERROR IN CALLING FUNCTION FN_GET_APP_DOC_ATTACH_PATH at AMIMPL :" + e.getMessage());
            e.printStackTrace();

        }
        showFacesMsg("Error while fetching file path details", null, FacesMessage.SEVERITY_ERROR, null);

        return null;
    }


    public String createAttchmntRow(String contentTyp, String fileNm, String extn) {
        // System.out.println("Inside AMIMPL");
        String path = getUpFilePath(getSlocIdValue());
        // System.out.println("path " + path);

        String fileId = getUpFileId(getCldIdValue(), getSlocIdValue(), getHoOrgIdValue(), getOrgIdValue());
        //  System.out.println("fileId " + fileId);

        Row r = getMnfRcAttchVO1().createRow();

        // System.out.println("contentTyp " + contentTyp);
        r.setAttribute("AttchFlExtn", contentTyp);
        r.setAttribute("DispFlNm", fileNm);
        r.setAttribute("AttchFlNm", fileId);
        r.setAttribute("AttchFlPath", path + fileId + extn);

        getMnfRcAttchVO1().insertRow(r);

        this.getDBTransaction().postChanges(); // Used this for increasing fileId else throws too many object error

        return path + fileId;
    }

    /**
     * Container's getter for MnfRcAttch1.
     * @return MnfRcAttch1
     */
    public ViewObjectImpl getMnfRcAttchVO1() {
        return (ViewObjectImpl) findViewObject("MnfRcAttchVO1");
    }

    /**
     * Container's getter for MnfRcToMnfRcAttchVL1.
     * @return MnfRcToMnfRcAttchVL1
     */
    public ViewLinkImpl getMnfRcToMnfRcAttchVL1() {
        return (ViewLinkImpl) findViewLink("MnfRcToMnfRcAttchVL1");
    }

    /**
     * For Faces Message
     */
    public void showFacesMsg(String msgHdr, String msgDtl, javax.faces.application.FacesMessage.Severity msgSeverity,
                             String msgMode) {

        FacesMessage msg = new FacesMessage(msgHdr);
        msg.setDetail(msgDtl);
        msg.setSeverity(msgSeverity);
        FacesContext.getCurrentInstance().addMessage(msgMode, msg);

    }

    /**
     * Container's getter for MnfRcOpItm1.
     * @return MnfRcOpItm1
     */
    public ViewObjectImpl getMnfRcOpInputItmVO1() {
        return (ViewObjectImpl) findViewObject("MnfRcOpInputItmVO1");
    }

    /**
     * Container's getter for MnfRcOpToMnfRcOpItmVL2.
     * @return MnfRcOpToMnfRcOpItmVL2
     */
    public ViewLinkImpl getMnfRcOpToMnfRcOpItmVL2() {
        return (ViewLinkImpl) findViewLink("MnfRcOpToMnfRcOpItmVL2");
    }


    /**
     * Container's getter for LOVEmpId1.
     * @return LOVEmpId1
     */
    public ViewObjectImpl getLOVEmpIdVO1() {
        return (ViewObjectImpl) findViewObject("LOVEmpIdVO1");
    }


    /**
     * Container's getter for LOVUserName1.
     * @return LOVUserName1
     */
    public ViewObjectImpl getLOVUserNameVO1() {
        return (ViewObjectImpl) findViewObject("LOVUserNameVO1");
    }


    /**
     * Container's getter for LOVMnfParam1.
     * @return LOVMnfParam1
     */
    public ViewObjectImpl getLOVMnfParamVO1() {
        return (ViewObjectImpl) findViewObject("LOVMnfParamVO1");
    }

    /**
     * Set BindVariables for all Vo which were added in AmImpl at CreateOrViewRCTF
     */
    public void setBindVariableOfAm() {

        ViewObjectImpl Voimpl = this.getDualOverHeadParamVO1();
        Voimpl.setNamedWhereClauseParam("BindCldId", getCldIdValue());
        Voimpl.setNamedWhereClauseParam("BindSlocId", getSlocIdValue());
        Voimpl.setNamedWhereClauseParam("BindHoOrgId", getHoOrgIdValue());
        Voimpl.setNamedWhereClauseParam("BindOrgId", getOrgIdValue());
        //Voimpl.setNamedWhereClauseParam("BindDocId",docId);
        Voimpl.executeQuery();

        ViewObjectImpl Voimpl1 = this.getLOVOverHeadParameterVO1();
        Voimpl1.setNamedWhereClauseParam("BindCldId", getCldIdValue());
        Voimpl1.setNamedWhereClauseParam("BindSlocId", getSlocIdValue());
        Voimpl1.setNamedWhereClauseParam("BindHoOrgId", getHoOrgIdValue());
        Voimpl1.setNamedWhereClauseParam("BindOrgId", getOrgIdValue());
        Voimpl1.setNamedWhereClauseParam("BindSetID", null);
        Voimpl1.executeQuery();


        ViewObjectImpl Voimpl2 = this.getLOVRouteCardParamSetVO1();
        Voimpl2.setNamedWhereClauseParam("BindCldId", getCldIdValue());
        Voimpl2.setNamedWhereClauseParam("BindHoOrgID", getHoOrgIdValue());
        Voimpl2.setNamedWhereClauseParam("BindSlocId", getSlocIdValue());
        Voimpl2.executeQuery();

        ViewObjectImpl Voimpl3 = this.getLOVOpDescVO1();
        Voimpl3.setNamedWhereClauseParam("BindCldId", getCldIdValue());
        Voimpl3.setNamedWhereClauseParam("BindSlcId", getSlocIdValue());
        Voimpl3.setNamedWhereClauseParam("BindHoOrgId", getHoOrgIdValue());
        //Voimpl3.setNamedWhereClauseParam("BindOrgId",  getOrgIdValue());
        //Voimpl.setNamedWhereClauseParam("BindDocId",docId);
        Voimpl3.executeQuery();

        ViewObjectImpl empIdVO1 = this.getLOVEmpIdVO1();
        empIdVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        empIdVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        empIdVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        empIdVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
        empIdVO1.executeQuery();

        ViewObjectImpl paramVO1 = this.getLOVMnfParamVO1();
        paramVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        paramVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        paramVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        paramVO1.executeQuery();

        ViewObjectImpl impl = this.getLOVPdoIdVO1();
        impl.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        impl.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        impl.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        impl.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
        impl.executeQuery();

        ViewObjectImpl downTimeVO1 = this.getLOVMachineDownTimeVO1();
        downTimeVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        downTimeVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        downTimeVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        downTimeVO1.executeQuery();

        ViewObjectImpl itmNmVO1 = this.getLOVItmNmVO1();
        itmNmVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        itmNmVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        itmNmVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        itmNmVO1.executeQuery();

        //String prjId = resolvEl("#{pageFlowScope.GLBL_ORG_PROJ_ID}");
        ViewObjectImpl lOVWhIdVO1 = this.getLOVWhIdVO1();
        lOVWhIdVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        lOVWhIdVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        lOVWhIdVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        lOVWhIdVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
        //lOVWhIdVO1.setNamedWhereClauseParam("BindUsrId", this.getUsrId());
        //if (!prjId.equals(""))
    //  lOVWhIdVO1.setNamedWhereClauseParam("BindPrjId", prjId);
        lOVWhIdVO1.executeQuery();

        ViewObjectImpl lOVWhIdVO2 = this.getLOVWhNmeVO1();
        lOVWhIdVO2.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        lOVWhIdVO2.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        lOVWhIdVO2.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        lOVWhIdVO2.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
        lOVWhIdVO2.executeQuery();

        MnfItmStkBinVwVOImpl binVwVO1 = this.getMnfItmStkBinVwVO1();
        binVwVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        binVwVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        binVwVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
        binVwVO1.executeQuery();

        MnfItmStkLotVWVOImpl itmStkLotVWVO1 = this.getMnfItmStkLotVWVO1();
        itmStkLotVWVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        itmStkLotVWVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        itmStkLotVWVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
        itmStkLotVWVO1.executeQuery();

        MnfItmStkSrVwVOImpl itmStkSrVwVO1 = this.getMnfItmStkSrVwVO1();
        itmStkSrVwVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        itmStkSrVwVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        itmStkSrVwVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
        itmStkSrVwVO1.executeQuery();

        ViewObjectImpl allItemSearchDualVO1 = this.getAllItemSearchDualVO1();
        allItemSearchDualVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        allItemSearchDualVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        allItemSearchDualVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        allItemSearchDualVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
        allItemSearchDualVO1.executeQuery();

        ViewObjectImpl dualVO1 = this.getMnfGenerateJcDualVO1();
        dualVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        dualVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        dualVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        dualVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
        dualVO1.executeQuery();

        ViewObjectImpl lOVRequirementIdVO1 = this.getLOVRequirementIdVO1();
        lOVRequirementIdVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        lOVRequirementIdVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        lOVRequirementIdVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
        lOVRequirementIdVO1.executeQuery();

        /* Done this because used this VO in Row Impl
         * ViewObjectImpl fromPrfVO1 = this.getLOVItemFromPrfVO1();
        fromPrfVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        fromPrfVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        fromPrfVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        fromPrfVO1.executeQuery(); */

        /* Done this because used this VO in Row Impl
         * ViewObjectImpl lOVOpIdVO1 = this.getLOVOpIdVO1();
        lOVOpIdVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        lOVOpIdVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        lOVOpIdVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        lOVOpIdVO1.executeQuery(); */
    }

    /**
     * Container's getter for MnfRcParam1.
     * @return MnfRcParam1
     */
    public ViewObjectImpl getMnfRcParamOverHeadVO1() {
        return (ViewObjectImpl) findViewObject("MnfRcParamOverHeadVO1");
    }

    /**
     * Container's getter for MnfRcToMnfRcParamVL1.
     * @return MnfRcToMnfRcParamVL1
     */
    public ViewLinkImpl getMnfRcToMnfRcParamVL1() {
        return (ViewLinkImpl) findViewLink("MnfRcToMnfRcParamVL1");
    }

    /**
     * Container's getter for LOVMachineDownTime1.
     * @return LOVMachineDownTime1
     */
    public ViewObjectImpl getLOVMachineDownTimeVO1() {
        return (ViewObjectImpl) findViewObject("LOVMachineDownTimeVO1");
    }

    /**
     * Container's getter for MnfRcParam1.
     * @return MnfRcParam1
     */
    public ViewObjectImpl getMnfRcParamMceDownTimeVO1() {
        return (ViewObjectImpl) findViewObject("MnfRcParamMceDownTimeVO1");
    }

    /**
     * Container's getter for MnfRcToMnfRcParamVL2.
     * @return MnfRcToMnfRcParamVL2
     */
    public ViewLinkImpl getMnfRcToMnfRcParamVL2() {
        return (ViewLinkImpl) findViewLink("MnfRcToMnfRcParamVL2");
    }

    /**
     * OverHead Parameter Name Duplicate Check
     */
    public Boolean ChkOverHeadDuplicate(String paramName) {
        Boolean retVal = false;

        String id = null;
        ViewObjectImpl impl = this.getLOVMnfParamVO1();
        Row[] r = impl.getFilteredRows("ParamDesc", paramName);
        if (r.length > 0) {
            id = r[0].getAttribute("ParamId").toString();
        }
        ViewObjectImpl headVO1 = this.getMnfRcParamOverHeadVO1();
        Row[] r1 = headVO1.getFilteredRows("ParamId", id);
        if (r1.length > 0 && r1[0] != headVO1.getCurrentRow()) {
            retVal = true;
        }
        return retVal;
    }

    /**
     * MachineDowntime Param Name Duplicate Check
     */
    public Boolean ChkMachineDownDuplicate(String downName) {
        Boolean retVal = false;

        String id = null;
        //  System.out.println("DownName is " + downName);
        ViewObjectImpl impl = this.getLOVMachineDownTimeVO1();
        Row[] r = impl.getFilteredRows("ParamDesc", downName);
        //  System.out.println("R.Length is " + r.length);
        if (r.length > 0) {
            id = r[0].getAttribute("ParamId").toString();
        }
        ViewObjectImpl headVO1 = this.getMnfRcParamMceDownTimeVO1();
        Row[] r1 = headVO1.getFilteredRows("ParamId", id);
        if (r1.length > 0 && r1[0] != headVO1.getCurrentRow()) {
            retVal = true;
        }

        return retVal;
    }

    /*--------------------------ResolveEdic Message Method----------------------------*/
    public Object resolvElDCMsg(String data) {
        ADFContext adfCtx = ADFContext.getCurrent();
        ELContext elContext = adfCtx.getELContext();
        ValueExpression valueExp = adfCtx.getExpressionFactory().createValueExpression(elContext, data, Object.class);
        return valueExp.getValue(elContext);
    }

    /**
     * Method used to call work flow function.
     * calls db functions APP.WF_GET_USR_LEVEL & APP.WF_INS_TXN
     * Created by Vishal Kumar on 09-09-2014.
     * **/

    public String callWfFunctions() {
        //get the work flow for the document 26003
        //String wfId = getWfId(this.getCldIdValue(), this.getSlocIdValue(), this.getOrgIdValue(), 26003, 0);
        String wfId = getWfId();
        //String action = "I";
        //String remark = "A";
        //Number amount11 = new Number(0);
        // System.out.println("wfId " + wfId);
        Object level;
        try {
            level = callStoredFunction(NUMBER, "APP.WF_GET_USR_LEVEL(?,?,?,?,?,?,?)", new Object[] {
                                       this.getSlocIdValue(), this.getCldIdValue(), this.getOrgIdValue(),
                                       this.getUsrId(), wfId, 26003, 0
            });

            if (this.getMnfRcVO().getCurrentRow() != null &&
                this.getMnfRcVO().getCurrentRow().getAttribute("DocId") != null) {

                //  System.out.println("level " + level);
                callStoredFunction(NUMBER, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                   this.getSlocIdValue(), this.getCldIdValue(), this.getOrgIdValue(), 26003, 0, wfId,
                                   this.getMnfRcVO().getCurrentRow().getAttribute("DocId"), this.getUsrId(),
                                   this.getUsrId(), level, level, "I", "A", 0
                });
            }
        } catch (Exception nfe) {

            showFacesMsg(resolvElDCMsg("#{bundle['MSG.1113']}").toString(), null, FacesMessage.SEVERITY_ERROR, null);

            nfe.printStackTrace();
        }

        return null;
    }


    /**
     * Method used to get the Work flow id for a document.
     * Created by Vishal Kumar on 09-09-2014.
     * **/

    public String getWfId() {

        try {
            return callStoredFunction(VARCHAR, "APP.WF_GET_ID(?,?,?,?,?)", new Object[] {
                                      this.getSlocIdValue(), this.getCldIdValue(), this.getOrgIdValue(), 26003, 0
        }).toString();
        } catch (Exception e) {
            e.printStackTrace();

            StringBuilder saveMsg = new StringBuilder("<html><body><p><b>Error in getting Work Flow Details. </b></p>");

            saveMsg.append("</body></html>");

            showFacesMsg(saveMsg.toString(), null, FacesMessage.SEVERITY_ERROR, null);

        }
        return "0";
    }

    /**
     * Method created to call DB fucntion to get the user at which the document is pending
     * Created by Vishal Kumar on 09-09-2014.
     * **/

    public Integer getDocUsrFromWF() {
        Object fnRetVal;

        /* System.out.println("getDocUsrFromWF--- slcId " + slcId + " cldId " + cldId + "  " + " orgId " + orgId +
                                  " docId " + docId + " tvouId " + tvouId + " docTypId " + docTypId); */
        try {
            if (this.getMnfRcVO().getCurrentRow() != null &&
                this.getMnfRcVO().getCurrentRow().getAttribute("DocId") != null) {
                fnRetVal = callStoredFunction(NUMBER, "APP.WF_GET_CUR_USR(?,?,?,?,?,?)", new Object[] {
                                              this.getSlocIdValue(), this.getCldIdValue(), this.getOrgIdValue(), 26003,
                                              this.getMnfRcVO().getCurrentRow().getAttribute("DocId"), 0
                });

                if (fnRetVal != null) {

                    /*   if (fnRetVal.equals(-1)) {
                           showFacesMsg("Error while fetching user work flow details", null, FacesMessage.SEVERITY_ERROR,null);
                       } */

                    return Integer.parseInt(fnRetVal.toString());
                }
            }
        } catch (Exception e) {

            e.printStackTrace();

        }
        showFacesMsg("Error while fetching user work flow details", null, FacesMessage.SEVERITY_ERROR, null);
        return 0;
    }

    /*------------------------Get User Name for Given UserId--------------------------*/
    public String getUserName(Integer usrId) {
        String uname = null;
        ViewObjectImpl impl = this.getLOVUserNameVO1();
        impl.setNamedWhereClauseParam("BindUsrId", usrId);
        impl.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        impl.executeQuery();
        Row[] allRowsInRange = impl.getAllRowsInRange();
        if (allRowsInRange.length > 0) {
            Object a = allRowsInRange[0].getAttribute("UsrName");
            String s = (a == null ? null : a.toString());
            uname = s;
        }
        return uname;
    }

    String data = "NO";

    /**
     * Method which will execute after Returned from work Flow
     */
    public void updateWfStatus() {

        // System.out.println("wf_mode " + resolvEl("#{pageFlowScope.WF_RETURN_VALUE}"));

        //wf_mode : V - revert, I - Initialize, F - Forwarded, A - Approved, R - Reject

        if (resolvEl("#{pageFlowScope.WF_RETURN_VALUE}") != null) {
            String wf_mode = resolvEl("#{pageFlowScope.WF_RETURN_VALUE}");
            Row r = getMnfRcVO().getCurrentRow();

            if ("I".equals(wf_mode)) {
                r.setAttribute("RcMode", 79);

            } else if ("F".equals(wf_mode)) {
                r.setAttribute("RcMode", 78);

            } else if ("A".equals(wf_mode)) {
                r.setAttribute("RcMode", 76);
                //r.setAttribute("RcStat", 73); // Changes the status to close
                //   this.getDBTransaction().postChanges();
                //   stkStatuspdate();
                data = "YES";
                this.GenerateMrsDocument(); // For Generating MRS Document

            } else if ("R".equals(wf_mode)) {
                r.setAttribute("RcMode", 77);

            }
            getDBTransaction().commit();

            this.getMnfGenerateJcDualVO1().executeQuery();
            this.getMnfRcVO().executeQuery();

        }
    }

    /**
     * Function used to generate MRS for this Document
     */
    public void GenerateMrsDocument() {
        try {
            ViewObjectImpl impl = this.getMnfRcVO();
            Row currentRow = impl.getCurrentRow();

            if (currentRow != null && currentRow.getAttribute("DocId") != null) {
                /* p_cld_id     VARCHAR2,
                                p_sloc_id    NUMBER,
                                p_ho_org_id  VARCHAR2,
                                p_org_id     VARCHAR2,
                                p_doc_id     VARCHAR2, --------DOCUMENT ID of CI Job Card(26003) Route Card (26004)
                                p_doc_hex_id VARCHAR2,      --- Hexadecimal id of document
                                p_usr_id     NUMBER,
                                p_usr_dt     DATE,
                                p_fy_id      NUMBER,
                                p_wh_id      VARCHAR2 */
                Object val = callStoredFunction(Types.INTEGER, "MNF.FN_MNF_GEN_MRS(?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                this.getCldIdValue(), this.getSlocIdValue(), this.getHoOrgIdValue(),
                                                this.getOrgIdValue(), 26003, currentRow.getAttribute("DocId"),
                                                this.getUsrId(), new Timestamp(System.currentTimeMillis()),
                                                currentRow.getAttribute("FyId"), currentRow.getAttribute("WhId"),
                                                currentRow.getAttribute("RqmtAreaId")
                });
                if (val != null && Integer.parseInt(val.toString()) != 1) {
                    FacesMessage msg = new FacesMessage("Problem occurred while generating MRS.");
                    msg.setSeverity(FacesMessage.SEVERITY_ERROR);
                    FacesContext.getCurrentInstance().addMessage(null, msg);
                }
            }
        } catch (Exception e) {
            //  System.out.println("ERROR IN CALLING FUNCTION FN_MNF_GEN_MRS at AMIMPL :" + e.getMessage());
            e.printStackTrace();
            FacesMessage msg = new FacesMessage("Problem occurred while generating MRS.");
            msg.setSeverity(FacesMessage.SEVERITY_WARN);
            FacesContext.getCurrentInstance().addMessage(null, msg);
        }
    }

    /**
     * Function to Release the Route Card
     */
    public void ReleaseRouteCard() {
        Row r = getMnfRcVO().getCurrentRow();
        r.setAttribute("RcStat", 74); // Changes Status To Released
        getDBTransaction().postChanges();
        //getDBTransaction().commit();

        if (chkGlEntry()) {
            InsertGlItemStock();
        }

        InsertItemIntoMM();

        getDBTransaction().commit();
    }

    /**
     * Check whether to call Gl Entry or not
     */
    public Boolean chkGlEntry() {
        Boolean val = false;
        try {
            String chk = this.callStoredFunction(Types.VARCHAR, "MNF.FN_MNF_CHK_ORG_PRF(?,?,?,?)", new Object[] {
                                                 this.getCldIdValue(), this.getSlocIdValue(), this.getOrgIdValue(),
                                                 "AUTO_CONSMPTN"
            }).toString();
            if (chk.equalsIgnoreCase("Y")) {
                val = true;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return val;
    }

    /**
     * Function to generate Financial Entry
     */
    public Boolean InsertGlItemStock() {
        Boolean val = false;

        try {
            if (this.getMnfRcVO().getCurrentRow().getAttribute("FyId") != null &&
                this.getMnfRcVO().getCurrentRow().getAttribute("DocId") != null &&
                this.getMnfRcVO().getCurrentRow().getAttribute("DocDt") != null) {

                /* P_SLOCID    NUMBER,
                    P_CLDID     VARCHAR2,
                    P_HO_ORGID  VARCHAR2,
                    P_ORGID     VARCHAR2,
                    P_FYID      NUMBER,
                    P_DOCID     VARCHAR2, -- Issu doc id
                    P_DOCDT     DATE,
                    P_USRID     NUMBER */

                callStoredFunction(NUMBER, "MNF.MNF_INS_GL_CONSM_OUTPT_STK(?,?,?,?,?,?,?,?)", new Object[] {
                                   this.getSlocIdValue(), this.getCldIdValue(), this.getHoOrgIdValue(),
                                   this.getOrgIdValue(), this.getMnfRcVO().getCurrentRow().getAttribute("FyId"),
                                   this.getMnfRcVO().getCurrentRow().getAttribute("DocId"),
                                   this.getMnfRcVO().getCurrentRow().getAttribute("DocDt"), this.getUsrId()
                });
                val = true;
            }
        } catch (Exception e) {
            // System.out.println("Problem in inserting Financial Entry at AMIMPL MNF.MNF_INS_GL_CONSM_OUTPT_STK");
            e.printStackTrace();
        }
        return val;
    }

    /**
     * Function which will insert into MM FN_MNF_TO_MM_RC_ITM
     */
    public Boolean InsertItemIntoMM() {
        Boolean val = false;

        try {
            if (this.getMnfRcVO().getCurrentRow().getAttribute("FyId") != null &&
                this.getMnfRcVO().getCurrentRow().getAttribute("WhId") != null &&
                this.getMnfRcVO().getCurrentRow().getAttribute("DocId") != null &&
                this.getMnfRcVO().getCurrentRow().getAttribute("DocDt") != null) {
                callStoredFunction(NUMBER, "MNF.FN_MNF_TO_MM_RC_ITM(?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                   this.getCldIdValue(), this.getSlocIdValue(), this.getHoOrgIdValue(),
                                   this.getOrgIdValue(), this.getMnfRcVO().getCurrentRow().getAttribute("WhId"),
                                   this.getMnfRcVO().getCurrentRow().getAttribute("FyId"),
                                   this.getMnfRcVO().getCurrentRow().getAttribute("DocDt"),
                                   this.getMnfRcVO().getCurrentRow().getAttribute("DocId"),
                                   this.getMnfRcVO().getCurrentRow().getAttribute("DocDt"), null, this.getUsrId(),
                                   new Timestamp(System.currentTimeMillis()),
                                   this.getMnfRcVO().getCurrentRow().getAttribute("RqmtAreaId"),
                                   this.getMnfRcVO().getCurrentRow().getAttribute("PrjId")
                });
                val = true;
            }
        } catch (Exception e) {
            System.out.println("Problem in inserting at MM Entry at AMIMPL MNF.FN_MNF_TO_MM_RC_ITM");
            e.printStackTrace();
        }

        return val;

    }

    /**
     * Container's getter for MnfRcOpItm1.
     * @return MnfRcOpItm1
     */
    public ViewObjectImpl getMnfRcOpItmDispVO1() {
        return (ViewObjectImpl) findViewObject("MnfRcOpItmDispVO1");
    }

    /**
     * Container's getter for MnfRcToMnfRcOpItmDispVL1.
     * @return MnfRcToMnfRcOpItmDispVL1
     */
    public ViewLinkImpl getMnfRcToMnfRcOpItmDispVL1() {
        return (ViewLinkImpl) findViewLink("MnfRcToMnfRcOpItmDispVL1");
    }

    /**
     * Container's getter for MnfRcBarcode1.
     * @return MnfRcBarcode1
     */
    public ViewObjectImpl getMnfRcBarcodeVO1() {
        return (ViewObjectImpl) findViewObject("MnfRcBarcodeVO1");
    }

    /**
     * Container's getter for MnfRcToMnfRcBarcodeVL1.
     * @return MnfRcToMnfRcBarcodeVL1
     */
    public ViewLinkImpl getMnfRcToMnfRcBarcodeVL1() {
        return (ViewLinkImpl) findViewLink("MnfRcToMnfRcBarcodeVL1");
    }

    /**
     * Function which will generate barcode
     */
    public Boolean GenerateBarCode() {
        Boolean retVal = false;
        try {
            if (this.getMnfRcVO().getCurrentRow().getAttribute("DocId") != null &&
                this.getMnfRcVO().getCurrentRow().getAttribute("QtyBrct") != null) {
                // System.out.println("Estimate Row Count is " + this.getMnfRcBarcodeVO1().getAllRowsInRange().length);

                callStoredFunction(NUMBER, "MNF.FN_MNF_INS_BARCODE_JC_RC(?,?,?,?,?,?,?,?,?)", new Object[] {
                                   this.getCldIdValue(), this.getSlocIdValue(), this.getHoOrgIdValue(),
                                   this.getOrgIdValue(), this.getMnfRcVO().getCurrentRow().getAttribute("DocId"),
                                   this.getUsrId(), new Timestamp(System.currentTimeMillis()), "RC",
                                   this.getMnfRcVO().getCurrentRow().getAttribute("QtyBrct")
                });
                retVal = true;

                //this.getMnfRcBarcodeVO1().executeQuery();
                System.out.println("Estimate Row Count is12334 " +
                                   this.getMnfRcBarcodeVO1().getAllRowsInRange().length);
                this.getMnfRcBarcodeVO1().executeQuery();
            }
        } catch (Exception e) {
            //   System.out.println("Problem in Generating Barcode at AMIMPL FN_MNF_INS_BARCODE_JC_RC");
            e.printStackTrace();
        }
        return retVal;
    }

    /**
     * Container's getter for LOVItmNm1.
     * @return LOVItmNm1
     */
    public ViewObjectImpl getLOVItmNmVO1() {
        return (ViewObjectImpl) findViewObject("LOVItmNmVO1");
    }

    /**
     * Container's getter for LOVWhId1.
     * @return LOVWhId1
     */
    public ViewObjectImpl getLOVWhIdVO1() {
        return (ViewObjectImpl) findViewObject("LOVWhIdVO1");
    }

    /**
     * Container's getter for MnfItmStkLotVW1.
     * @return MnfItmStkLotVW1
     */
    public MnfItmStkLotVWVOImpl getMnfItmStkLotVWVO1() {
        return (MnfItmStkLotVWVOImpl) findViewObject("MnfItmStkLotVWVO1");
    }

    /**
     * Container's getter for MnfRcOpItmToMnfItmStkLotVWVL1.
     * @return MnfRcOpItmToMnfItmStkLotVWVL1
     */
    public ViewLinkImpl getMnfRcOpItmToMnfItmStkLotVWVL1() {
        return (ViewLinkImpl) findViewLink("MnfRcOpItmToMnfItmStkLotVWVL1");
    }

    /**
     * Container's getter for MnfItmStkBinVw1.
     * @return MnfItmStkBinVw1
     */
    public MnfItmStkBinVwVOImpl getMnfItmStkBinVwVO1() {
        return (MnfItmStkBinVwVOImpl) findViewObject("MnfItmStkBinVwVO1");
    }

    /**
     * Container's getter for MnfRcOpItmToMnfItmStkBinVWVL1.
     * @return MnfRcOpItmToMnfItmStkBinVWVL1
     */
    public ViewLinkImpl getMnfRcOpItmToMnfItmStkBinVWVL1() {
        return (ViewLinkImpl) findViewLink("MnfRcOpItmToMnfItmStkBinVWVL1");
    }

    /**
     * Container's getter for MnfItmStkSrVw1.
     * @return MnfItmStkSrVw1
     */
    public MnfItmStkSrVwVOImpl getMnfItmStkSrVwVO1() {
        return (MnfItmStkSrVwVOImpl) findViewObject("MnfItmStkSrVwVO1");
    }

    /**
     * Container's getter for MnfRcOpItmToMnfItmStkSrVWVL1.
     * @return MnfRcOpItmToMnfItmStkSrVWVL1
     */
    public ViewLinkImpl getMnfRcOpItmToMnfItmStkSrVWVL1() {
        return (ViewLinkImpl) findViewLink("MnfRcOpItmToMnfItmStkSrVWVL1");
    }

    /**
     * Container's getter for MnfRcOpItmBin1.
     * @return MnfRcOpItmBin1
     */
    public ViewObjectImpl getMnfRcOpItmBinVO1() {
        return (ViewObjectImpl) findViewObject("MnfRcOpItmBinVO1");
    }

    /**
     * Container's getter for MnfRcOpItmToMnfRcOpItmBinVL1.
     * @return MnfRcOpItmToMnfRcOpItmBinVL1
     */
    public ViewLinkImpl getMnfRcOpItmToMnfRcOpItmBinVL1() {
        return (ViewLinkImpl) findViewLink("MnfRcOpItmToMnfRcOpItmBinVL1");
    }

    /**
     * Container's getter for MnfRcOpItmLot1.
     * @return MnfRcOpItmLot1
     */
    public ViewObjectImpl getMnfRcOpItmLotVO1() {
        return (ViewObjectImpl) findViewObject("MnfRcOpItmLotVO1");
    }

    /**
     * Container's getter for MnfRcOpItmToMnfRcOpItmLotVL1.
     * @return MnfRcOpItmToMnfRcOpItmLotVL1
     */
    public ViewLinkImpl getMnfRcOpItmToMnfRcOpItmLotVL1() {
        return (ViewLinkImpl) findViewLink("MnfRcOpItmToMnfRcOpItmLotVL1");
    }

    /**
     * Container's getter for MnfRcOpItmSr1.
     * @return MnfRcOpItmSr1
     */
    public ViewObjectImpl getMnfRcOpItmSrVO1() {
        return (ViewObjectImpl) findViewObject("MnfRcOpItmSrVO1");
    }

    /**
     * Container's getter for MnfRcOpItmToMnfRcOpItmSrVL1.
     * @return MnfRcOpItmToMnfRcOpItmSrVL1
     */
    public ViewLinkImpl getMnfRcOpItmToMnfRcOpItmSrVL1() {
        return (ViewLinkImpl) findViewLink("MnfRcOpItmToMnfRcOpItmSrVL1");
    }

    /***Method to Auto Issue item from Stock in case of LIFO/FIFO*/

    public void IssueAutoItem() {

        ViewObject mnfRc = this.getMnfRcVO();
        Row rcRow = mnfRc.getCurrentRow();
        ViewObject pickItm = this.getMnfRcOpItmDispVO1();
            //rcRow.getAttribute("WhId")
        Row itmRow = pickItm.getCurrentRow();
        String binChkFlg = resolvEl("#{pageFlowScope.GLBL_ORG_BIN_CHK}");
        BigDecimal ret =
            (BigDecimal) callStoredFunction(Types.NUMERIC,
                                            "MNF.FN_MNF_RC_ISSU_AUTO(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                            this.getCldIdValue(), this.getSlocIdValue(), this.getHoOrgIdValue(),
                                            this.getOrgIdValue(),itmRow.getAttribute("WhId") ,
                                            itmRow.getAttribute("ItmId"), itmRow.getAttribute("ActItmQty"),
                                            itmRow.getAttribute("ItmPickOrderTrans"),
                                            itmRow.getAttribute("ItmSerializedFlgTrans"), binChkFlg,
                                            itmRow.getAttribute("DocId"), itmRow.getAttribute("PdoId"),
                                            itmRow.getAttribute("OpId"), itmRow.getAttribute("OpSrNo"),
                                            itmRow.getAttribute("ItmType"), itmRow.getAttribute("ItmUom"),
                                            itmRow.getAttribute("ItmUom"), 1,
                                            itmRow.getAttribute("PrjId")
        });

        this.getMnfRcOpItmLotVO1().executeQuery();
        this.getMnfRcOpItmBinVO1().executeQuery();
        this.getMnfRcOpItmSrVO1().executeQuery();

        //   System.out.println("No of Rows is " + this.getMnfRcOpItmLotVO1().getAllRowsInRange().length);
        //  System.out.println("No of Rows is " + this.getMnfRcOpItmBinVO1().getAllRowsInRange().length);
        //  System.out.println("No of Rows is " + this.getMnfRcOpItmSrVO1().getAllRowsInRange().length);
        this.getDBTransaction().postChanges();

        if (ret.compareTo(new BigDecimal(1)) != 0) {
            StringBuilder saveMsg =
                new StringBuilder("<html><body><b><p style='color:red'>" +
                                  "There have been an error in Auto Item Issue !" + "</p></b>");
            saveMsg.append("<b>Please try again or contact ESS !");
            saveMsg.append("</body></html>");
            FacesMessage msg = new FacesMessage(saveMsg.toString());
            msg.setSeverity(FacesMessage.SEVERITY_WARN);
            FacesContext.getCurrentInstance().addMessage(null, msg);
        }
    }

    /***Method to Auto Issue item from Stock in case of LIFO/FIFO In case of Shop Floor*/

    public void IssueAutoItem_SF() {

        ViewObject mnfRc = this.getMnfRcVO();
        Row rcRow = mnfRc.getCurrentRow();
        ViewObject pickItm = this.getMnfRcOpItmDispVO1();
        Row itmRow = pickItm.getCurrentRow();
        String binChkFlg = resolvEl("#{pageFlowScope.GLBL_ORG_BIN_CHK}");
        BigDecimal ret =
            (BigDecimal) callStoredFunction(Types.NUMERIC,
                                            "MNF.FN_MNF_RC_ISSU_AUTO_RQMT(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                            this.getCldIdValue(), this.getSlocIdValue(), this.getHoOrgIdValue(),
                                            this.getOrgIdValue(), itmRow.getAttribute("WhId"),
                                            itmRow.getAttribute("ItmId"), itmRow.getAttribute("ActItmQty"),
                                            itmRow.getAttribute("ItmPickOrderTrans"),
                                            itmRow.getAttribute("ItmSerializedFlgTrans"), binChkFlg,
                                            itmRow.getAttribute("DocId"), itmRow.getAttribute("PdoId"),
                                            itmRow.getAttribute("OpId"), itmRow.getAttribute("OpSrNo"),
                                            itmRow.getAttribute("ItmType"), itmRow.getAttribute("ItmUom"),
                                            itmRow.getAttribute("ItmUom"), 1, itmRow.getAttribute("RqmtAreaId"),
                                            itmRow.getAttribute("PrjId")
        });

        this.getMnfRcOpItmLotVO1().executeQuery();
        this.getMnfRcOpItmBinVO1().executeQuery();
        this.getMnfRcOpItmSrVO1().executeQuery();

        //   System.out.println("No of Rows is " + this.getMnfRcOpItmLotVO1().getAllRowsInRange().length);
        //  System.out.println("No of Rows is " + this.getMnfRcOpItmBinVO1().getAllRowsInRange().length);
        //  System.out.println("No of Rows is " + this.getMnfRcOpItmSrVO1().getAllRowsInRange().length);
        this.getDBTransaction().postChanges();

        if (ret.compareTo(new BigDecimal(1)) != 0) {
            StringBuilder saveMsg =
                new StringBuilder("<html><body><b><p style='color:red'>" +
                                  "There have been an error in Auto Item Issue !" + "</p></b>");
            saveMsg.append("<b>Please try again or contact ESS !");
            saveMsg.append("</body></html>");
            FacesMessage msg = new FacesMessage(saveMsg.toString());
            msg.setSeverity(FacesMessage.SEVERITY_WARN);
            FacesContext.getCurrentInstance().addMessage(null, msg);
        }
    }

    /**Method to filter Serial Number View ,as per Item Selected
     * */
    public void FilterSrNoAsPerItem() {

//ViewObject mnfrc = this.getMnfRcVO();
       // Row rcRow = mnfrc.getCurrentRow();
         ViewObjectImpl issItm = this.getMnfRcOpItmDispVO1();
           Row rcRow = issItm.getCurrentRow();
        /*this.getMnfItmStkSrVwVO1().setWhereClause("SR_NO NOT IN (SELECT SR_NO from MNF$RC$OP$ITM$LOT where itm_id = '" +
                                                  curRow.getAttribute("ItmId").toString() + "')");
        this.getMnfItmStkSrVwVO1().executeQuery(); */

        if (rcRow != null) {
            ViewObject stkSr = this.getMnfItmStkSrVwVO1();
            //   System.out.println("Total Row in Srno-" + stkSr.getRowCount());
            stkSr.setNamedWhereClauseParam("BindWhId", rcRow.getAttribute("WhId"));
            stkSr.executeQuery();
            //   System.out.println("Total Row in SrNo after filter-" + stkSr.getRowCount());
        }
    }

    /**Method to filter Serial Number View ,as per Item Selected (In Case of Shop Floor)
     * */
    public void FilterSrNoAsPerItem_SF() {
        ViewObject mnfrc = this.getMnfRcVO();
        Row rcRow = mnfrc.getCurrentRow();
        if (rcRow != null) {
            ViewObject stkSr = this.getMnfItmStkSrRqmtVwVO1();
            System.out.println("Total Row in Srno-" + stkSr.getRowCount());
            stkSr.setNamedWhereClauseParam("BindCldId", rcRow.getAttribute("CldId"));
            stkSr.setNamedWhereClauseParam("BindItmId",
                                           this.getMnfRcOpItmDispVO1().getCurrentRow().getAttribute("ItmId"));
            stkSr.setNamedWhereClauseParam("BindOrgId", rcRow.getAttribute("OrgId"));
            stkSr.setNamedWhereClauseParam("BindSlocId", rcRow.getAttribute("SlocId"));
            //stkSr.setNamedWhereClauseParam("BindWhId", rcRow.getAttribute("WhId"));
            stkSr.setNamedWhereClauseParam("BindWhId", this.getMnfRcOpItmDispVO1().getCurrentRow().getAttribute("WhId"));
            stkSr.setNamedWhereClauseParam("BindReqArId",
                                           this.getMnfRcOpItmDispVO1().getCurrentRow().getAttribute("RqmtAreaId"));
            stkSr.executeQuery();
            //  System.out.println("Total Row in SrNo after filter-" + stkSr.getRowCount());
        }
    }

    /**To Select Bin,Lot and SrNo for Item
     * Method to select lot, bin and SrNo for item (If Organisation is using/not using bin and Items  serialised)
     */
    public void InsertIntoPickItmSr() {
        ViewObjectImpl rcItm = this.getMnfRcOpItmDispVO1();
        ViewObjectImpl rcItmSr = this.getMnfRcOpItmSrVO1();
        ViewObjectImpl rcItmBin = this.getMnfRcOpItmBinVO1();
        ViewObjectImpl rcItmLot = this.getMnfRcOpItmLotVO1();
        ViewObjectImpl viewSummSr = this.getMnfItmStkSrVwVO1();
        ViewObject mnfRc = this.getMnfRcVO();
        Row rcRow = mnfRc.getCurrentRow();
        Row currItm = rcItm.getCurrentRow();
        String binChkFlg = resolvEl("#{pageFlowScope.GLBL_ORG_BIN_CHK}");
        Row[] srRow = this.getMnfItmStkSrVwVO1().getFilteredRows("ItmId", currItm.getAttribute("ItmId"));
        ArrayList<String> arrlist = new ArrayList<String>();
        // add  selected  lotId in a arraylist
        if (srRow.length > 0) {
            for (Row r1 : srRow) {
                if (r1.getAttribute("SelectSrNoStkTrans") != null) {
                    if ("Y".equalsIgnoreCase(r1.getAttribute("SelectSrNoStkTrans").toString())) {
                        String lotId = r1.getAttribute("LotId").toString();
                        //
                        arrlist.add(lotId);
                        // System.out.println("Lot id new : " + lotId);
                    }
                }
            }
            // System.out.println("No of lots added : " + arrlist);
        }
        // Using Set for remove duplicate LotId
        Set<String> lotset = new HashSet<String>(arrlist);
        for (String key : lotset) {
            // Create new row in lot table Key as LotId and lotVal use quantity for SR No Selection
            Integer lotQty = Collections.frequency(arrlist, key);
            Number lotvalu = new Number(0);
            try {
                lotvalu = new Number(lotQty);
            } catch (Exception e) {
                e.printStackTrace();
                //   System.out.println("Error in AMimpl");
            }
            System.out.println(key + ": " + Collections.frequency(arrlist, key) + "------" + lotvalu);
            // RowQualifier for filter Lot table to check Lot exist or not.....
            RowQualifier rowQualifier = new RowQualifier(rcItmLot);
            rowQualifier.setWhereClause(" DocId ='" + currItm.getAttribute("DocId") + "' and ItmId = '" +
                                        currItm.getAttribute("ItmId") + "' and LotId = '" + key + "'");
            Row[] rows = rcItmLot.getFilteredRows(rowQualifier);
            //  System.out.println("" + rowQualifier.getExprStr());
            if (rows.length > 0) { // update lot quantity if lot already exist......:
                System.out.println(" ALREADY PRESENT  LOT-----");
                for (Row r : rows) {
                    String lotId = (String) r.getAttribute("LotId");
                    System.out.println(" Lot id is : -----" + lotId);
                    Number prLotVal = (Number) r.getAttribute("ItmQty");
                    Number newQty = prLotVal.add(lotvalu);
                    System.out.println("new vale FOR LOT----------  " + newQty);
                    r.setAttribute("ItmQty", newQty);
                    r.setAttribute("ItmQtyBs", newQty);

                    BigDecimal avail = new BigDecimal(0);
                    try {
                      String whId =  currItm.getAttribute("WhId").toString();
                      //  String whId = rcRow.getAttribute("WhId").toString();
                        /*  p_cld_id        VARCHAR2,
                            p_sloc_id       NUMBER,
                            p_org_id        VARCHAR2,
                            p_wh_id         VARCHAR2,
                            p_itm_id        VARCHAR2,
                            p_lot_id VARCHAR2,
                            P_FYID NUMBER     */
                        avail =
                            (BigDecimal) callStoredFunction(Types.NUMERIC,
                                                            "MNF.FN_MNF_GET_ITM_LOT_PRICE(?,?,?,?,?,?,?,?)", new Object[] {
                                                            this.getCldIdValue(), this.getSlocIdValue(),
                                                            this.getOrgIdValue(), whId, currItm.getAttribute("ItmId"),
                                                            lotId, rcRow.getAttribute("FyId"),
                                                            currItm.getAttribute("IssuType")
                        });
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    if (avail.compareTo(new BigDecimal(-1)) == 0) {
                        avail = new BigDecimal(0);
                    }
                    Number multiply = new Number(0);
                    try {
                        multiply = newQty.multiply(new Number(avail));
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                    System.out.println("Item Lot Cost : " + multiply);
                    r.setAttribute("ItmLotCost", multiply);
                }
            } else {
                System.out.println("CREATE NEW  LOT-----");
                Row insrtLot = rcItmLot.createRow();
                insrtLot.setAttribute("LotId", key);
                insrtLot.setAttribute("ItmQty", lotvalu);
                insrtLot.setAttribute("ItmQtyBs", lotvalu);
               // insrtLot.setAttribute("WhId", rcRow.getAttribute("WhId"));
               insrtLot.setAttribute("WhId", currItm.getAttribute("WhId"));
                insrtLot.setAttribute("PrjId", currItm.getAttribute("PrjId"));
                insrtLot.setAttribute("ItmUom", currItm.getAttribute("ItmUom"));
                BigDecimal avail = new BigDecimal(0);
                try {
                   // String whId = rcRow.getAttribute("WhId").toString();
                   String whId = currItm.getAttribute("WhId").toString();
                    avail =
                        (BigDecimal) callStoredFunction(Types.NUMERIC, "MNF.FN_MNF_GET_ITM_LOT_PRICE(?,?,?,?,?,?,?,?)", new Object[] {
                                                        this.getCldIdValue(), this.getSlocIdValue(),
                                                        this.getOrgIdValue(), whId, currItm.getAttribute("ItmId"), key,
                                                        rcRow.getAttribute("FyId"), currItm.getAttribute("IssuType")
                    });


                    System.out.println("Lot price is : " + avail);

                } catch (Exception e) {
                    e.printStackTrace();
                }
                if (avail.compareTo(new BigDecimal(-1)) == 0) {
                    avail = new BigDecimal(0);
                }
                Number multiply = new Number(0);
                try {
                    multiply = lotvalu.multiply(new Number(avail));
                } catch (SQLException e) {
                    e.printStackTrace();
                }
                System.out.println("Lot inserted");
                insrtLot.setAttribute("ItmLotCost", multiply);
                rcItmLot.insertRow(insrtLot);
                rcItmLot.executeQuery();
            }
        }
        Iterator i = lotset.iterator();
        System.out.println("----------" + lotset);
        // Adding Bin in bin Table for using lotSet Value When organisation using Bin concept binChkFlg == Y
        if ("Y".equalsIgnoreCase(binChkFlg)) {
            while (i.hasNext()) {
                String lot = (String) i.next();
                ArrayList<String> arrListbin = new ArrayList<String>(); // for Storing all bin selected paticular lot
                System.out.println("--------------" + lot);
                for (Row r2 : srRow) {
                    if (r2.getAttribute("SelectSrNoStkTrans") != null) {
                        if ("Y".equalsIgnoreCase(r2.getAttribute("SelectSrNoStkTrans").toString()) &&
                            r2.getAttribute("LotId").toString().equals(lot)) {
                            arrListbin.add(r2.getAttribute("BinId").toString());
                        }
                    }
                }
                // Using Set for remove duplicate Bin
                Set<String> binSet = new HashSet<String>(arrListbin);
                for (String key : binSet) {
                    // Create new row in bin table Key as BinIds and lotVal use quantity for SR No Selection
                    Integer binQty = Collections.frequency(arrListbin, key);
                    Number binvalu = new Number(0);
                    try {
                        binvalu = new Number(binQty);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    // RowQualifier for filter bin table to check bin exist or not.....
                    RowQualifier rowQualifier = new RowQualifier(rcItmBin);
                    rowQualifier.setWhereClause(" DocId ='" + currItm.getAttribute("DocId") + "' and ItmId = '" +
                                                currItm.getAttribute("ItmId") + "' and LotId = '" + lot +
                                                "' and BinId ='" + key + "'");
                    Row[] rows = rcItmBin.getFilteredRows(rowQualifier);
                    // System.out.println("" + rowQualifier.getExprStr());
                    if (rows.length > 0) {
                        System.out.println("BIN ALREADY PRESENT FOR LOT-----");
                        for (Row r : rows) {
                            Number prBinVal = (Number) r.getAttribute("ItmQty");
                            Number newQty = prBinVal.add(binvalu);
                            //System.out.println("new vale FOR BIN----------  " + newQty);
                            r.setAttribute("ItmQty", newQty);
                            r.setAttribute("ItmQtyBs", newQty);
                        }
                    } else {
                        System.out.println("Create new Bin For Lot-----");
                        Row binInst = rcItmBin.createRow();
                        binInst.setAttribute("LotId", lot);
                        binInst.setAttribute("BinId", key);
                        binInst.setAttribute("ItmQty", binvalu);
                        binInst.setAttribute("ItmQtyBs", binvalu);
                       // System.out.println("Values in Bin-" + lot + "Bin id-" + key + "quant-" + binvalu);
                        binInst.setAttribute("WhId",currItm.getAttribute("WhId"));
                        binInst.setAttribute("PrjId",currItm.getAttribute("PrjId"));                        
                        //binInst.setAttribute("WhId", rcRow.getAttribute("WhId"));
                        binInst.setAttribute("ItmUom", currItm.getAttribute("ItmUom"));

                        rcItmBin.insertRow(binInst);
                        rcItmBin.executeQuery();
                        //System.out.println(key + ": " + Collections.frequency(arrListbin, key) + "-------" + binvalu);
                    }
                }
               // System.out.println("" + arrListbin);
               // System.out.println("" + binSet);
            }
        }
        if (srRow.length > 0) {
            for (Row rr : srRow) {
                if (rr.getAttribute("SelectSrNoStkTrans") != null) {
                    if ("Y".equalsIgnoreCase(rr.getAttribute("SelectSrNoStkTrans").toString())) {
                        System.out.println("Create SrNo for Selected Serials");
                        Row srInst = rcItmSr.createRow();
                        srInst.setAttribute("LotId", rr.getAttribute("LotId"));
                        srInst.setAttribute("BinId", rr.getAttribute("BinId"));
                        srInst.setAttribute("SrNo", rr.getAttribute("SrNo"));
                        srInst.setAttribute("ItmQty", new Number(1));
                        srInst.setAttribute("ItmQtyBs", new Number(1));
                        //srInst.setAttribute("WhId", rcRow.getAttribute("WhId"));
                        srInst.setAttribute("WhId", currItm.getAttribute("WhId"));
                        srInst.setAttribute("PrjId", currItm.getAttribute("PrjId"));
                        srInst.setAttribute("ItmUom", currItm.getAttribute("ItmUom"));

                        rcItmSr.insertRow(srInst);
                        rcItmSr.executeQuery();
                    }
                }
            }
        }
        //System.out.println("Post Changes ____");
        //  this.getDBTransaction().postChanges();
        //System.out.println("___________________________1");
        //   this.getMnfRcOpItmLotVO1().executeQuery();
        //System.out.println("___________________________2");
        //  this.getMnfRcOpItmBinVO1().executeQuery();
        //System.out.println("___________________________3");
        //  this.getMnfRcOpItmSrVO1().executeQuery();
        //System.out.println("___________________________4");
        //  viewSummSr.executeQuery();
        //System.out.println("___________________________5");
        // this.getDBTransaction().postChanges();
    }

    /**To Select Bin,Lot and SrNo for Item (In case of Shop Floor)
     * Method to select lot, bin and SrNo for item (If Organisation is using/not using bin and Items  serialised)
     */
    public void InsertIntoPickItmSr_SF() {
        ViewObjectImpl rcItm = this.getMnfRcOpItmDispVO1();
        ViewObjectImpl rcItmSr = this.getMnfRcOpItmSrVO1();
        ViewObjectImpl rcItmBin = this.getMnfRcOpItmBinVO1();
        ViewObjectImpl rcItmLot = this.getMnfRcOpItmLotVO1();
        ViewObjectImpl viewSummSr = this.getMnfItmStkSrRqmtVwVO1();
        ViewObject mnfRc = this.getMnfRcVO();
        Row rcRow = mnfRc.getCurrentRow();
        Row currItm = rcItm.getCurrentRow();
        String binChkFlg = resolvEl("#{pageFlowScope.GLBL_ORG_BIN_CHK}");
        Row[] srRow = this.getMnfItmStkSrRqmtVwVO1().getFilteredRows("ItmId", currItm.getAttribute("ItmId"));
        ArrayList<String> arrlist = new ArrayList<String>();
        // add  selected  lotId in a arraylist
        if (srRow.length > 0) {
            for (Row r1 : srRow) {
                if (r1.getAttribute("SelectSrNoStkTrans_SF") != null) {
                    if ("Y".equalsIgnoreCase(r1.getAttribute("SelectSrNoStkTrans_SF").toString())) {
                        String lotId = r1.getAttribute("LotId").toString();
                        //
                        arrlist.add(lotId);
                        System.out.println("Lot id new : " + lotId);
                    }
                }
            }
            System.out.println("No of lots added : " + arrlist);
        }
        // Using Set for remove duplicate LotId
        Set<String> lotset = new HashSet<String>(arrlist);
        for (String key : lotset) {
            // Create new row in lot table Key as LotId and lotVal use quantity for SR No Selection
            Integer lotQty = Collections.frequency(arrlist, key);
            Number lotvalu = new Number(0);
            try {
                lotvalu = new Number(lotQty);
            } catch (Exception e) {
                e.printStackTrace();
                System.out.println("Error in AMimpl");
            }
            System.out.println(key + ": " + Collections.frequency(arrlist, key) + "------" + lotvalu);
            // RowQualifier for filter Lot table to check Lot exist or not.....
            RowQualifier rowQualifier = new RowQualifier(rcItmLot);
            rowQualifier.setWhereClause(" DocId ='" + currItm.getAttribute("DocId") + "' and ItmId = '" +
                                        currItm.getAttribute("ItmId") + "' and LotId = '" + key + "'");
            Row[] rows = rcItmLot.getFilteredRows(rowQualifier);
            // System.out.println("" + rowQualifier.getExprStr());
            if (rows.length > 0) { // update lot quantity if lot already exist......:
                System.out.println(" ALREADY PRESENT  LOT-----");
                for (Row r : rows) {
                    String lotId = (String) r.getAttribute("LotId");
                    System.out.println(" Lot id is : -----" + lotId);
                    Number prLotVal = (Number) r.getAttribute("ItmQty");
                    Number newQty = prLotVal.add(lotvalu);
                    System.out.println("new vale FOR LOT----------  " + newQty);
                    r.setAttribute("ItmQty", newQty);
                    r.setAttribute("ItmQtyBs", newQty);

                    BigDecimal avail = new BigDecimal(0);
                    try {
                        //String whId = rcRow.getAttribute("WhId").toString();
                        String whId = currItm.getAttribute("WhId").toString();
                        avail =
                            (BigDecimal) callStoredFunction(Types.NUMERIC,
                                                            "MNF.FN_MNF_GET_ITM_LOT_PRICE(?,?,?,?,?,?,?,?)", new Object[] {
                                                            this.getCldIdValue(), this.getSlocIdValue(),
                                                            this.getOrgIdValue(), whId, currItm.getAttribute("ItmId"),
                                                            lotId, rcRow.getAttribute("FyId"),
                                                            currItm.getAttribute("IssuType")
                        });
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    if (avail.compareTo(new BigDecimal(-1)) == 0) {
                        avail = new BigDecimal(0);
                    }
                    Number multiply = new Number(0);
                    try {
                        multiply = newQty.multiply(new Number(avail));
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                    System.out.println("Item Lot Cost : " + multiply);
                    r.setAttribute("ItmLotCost", multiply);
                }
            } else {
                System.out.println("CREATE NEW  LOT-----");
                Row insrtLot = rcItmLot.createRow();
                insrtLot.setAttribute("LotId", key);
                insrtLot.setAttribute("ItmQty", lotvalu);
                insrtLot.setAttribute("ItmQtyBs", lotvalu);
               // insrtLot.setAttribute("WhId", rcRow.getAttribute("WhId"));
               insrtLot.setAttribute("WhId", currItm.getAttribute("WhId"));
                insrtLot.setAttribute("PrjId", currItm.getAttribute("PrjId"));
                insrtLot.setAttribute("ItmUom", currItm.getAttribute("ItmUom"));
                BigDecimal avail = new BigDecimal(0);
                try {
                    //String whId = rcRow.getAttribute("WhId").toString();
                    String whId =currItm.getAttribute("WhId").toString();
                    avail =
                        (BigDecimal) callStoredFunction(Types.NUMERIC, "MNF.FN_MNF_GET_ITM_LOT_PRICE(?,?,?,?,?,?,?,?)", new Object[] {
                                                        this.getCldIdValue(), this.getSlocIdValue(),
                                                        this.getOrgIdValue(), whId, currItm.getAttribute("ItmId"), key,
                                                        rcRow.getAttribute("FyId"), currItm.getAttribute("IssuType")
                    });


                    System.out.println("Lot price is : " + avail);

                } catch (Exception e) {
                    e.printStackTrace();
                }
                if (avail.compareTo(new BigDecimal(-1)) == 0) {
                    avail = new BigDecimal(0);
                }
                Number multiply = new Number(0);
                try {
                    multiply = lotvalu.multiply(new Number(avail));
                } catch (SQLException e) {
                    e.printStackTrace();
                }
                System.out.println("Lot inserted");
                insrtLot.setAttribute("ItmLotCost", multiply);
                rcItmLot.insertRow(insrtLot);
                // rcItmLot.executeQuery();
            }
        }
        Iterator i = lotset.iterator();
        System.out.println("----------" + lotset);
        // Adding Bin in bin Table for using lotSet Value When organisation using Bin concept binChkFlg == Y
        if ("Y".equalsIgnoreCase(binChkFlg)) {
            while (i.hasNext()) {
                String lot = (String) i.next();
                ArrayList<String> arrListbin = new ArrayList<String>(); // for Storing all bin selected paticular lot
                System.out.println("--------------" + lot);
                for (Row r2 : srRow) {
                    if (r2.getAttribute("SelectSrNoStkTrans_SF") != null) {
                        if ("Y".equalsIgnoreCase(r2.getAttribute("SelectSrNoStkTrans_SF").toString()) &&
                            r2.getAttribute("LotId").toString().equals(lot)) {
                            arrListbin.add(r2.getAttribute("BinId").toString());
                        }
                    }
                }
                // Using Set for remove duplicate Bin
                Set<String> binSet = new HashSet<String>(arrListbin);
                for (String key : binSet) {
                    // Create new row in bin table Key as BinIds and lotVal use quantity for SR No Selection
                    Integer binQty = Collections.frequency(arrListbin, key);
                    Number binvalu = new Number(0);
                    try {
                        binvalu = new Number(binQty);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    // RowQualifier for filter bin table to check bin exist or not.....
                    RowQualifier rowQualifier = new RowQualifier(rcItmBin);
                    rowQualifier.setWhereClause(" DocId ='" + currItm.getAttribute("DocId") + "' and ItmId = '" +
                                                currItm.getAttribute("ItmId") + "' and LotId = '" + lot +
                                                "' and BinId ='" + key + "'");
                    Row[] rows = rcItmBin.getFilteredRows(rowQualifier);
                    //   System.out.println("" + rowQualifier.getExprStr());
                    if (rows.length > 0) {
                        System.out.println("BIN ALREADY PRESENT FOR LOT-----");
                        for (Row r : rows) {
                            Number prBinVal = (Number) r.getAttribute("ItmQty");
                            Number newQty = prBinVal.add(binvalu);
                            System.out.println("new vale FOR BIN----------  " + newQty);
                            r.setAttribute("ItmQty", newQty);
                            r.setAttribute("ItmQtyBs", newQty);
                        }
                    } else {
                        System.out.println("Create new Bin For Lot-----");
                        Row binInst = rcItmBin.createRow();
                        binInst.setAttribute("LotId", lot);
                        binInst.setAttribute("BinId", key);
                        binInst.setAttribute("ItmQty", binvalu);
                        binInst.setAttribute("ItmQtyBs", binvalu);
                       // System.out.println("Values in Bin-" + lot + "Bin id-" + key + "quant-" + binvalu);
                       //binInst.setAttribute("WhId", rcRow.getAttribute("WhId"));
                       binInst.setAttribute("WhId", currItm.getAttribute("WhId"));
                        binInst.setAttribute("PrjId", currItm.getAttribute("PrjId"));
                        binInst.setAttribute("ItmUom", currItm.getAttribute("ItmUom"));

                        rcItmBin.insertRow(binInst);
                        //  rcItmBin.executeQuery();
                        // System.out.println(key + ": " + Collections.frequency(arrListbin, key) + "-------" + binvalu);
                    }
                }
              //  System.out.println("" + arrListbin);
              //  System.out.println("" + binSet);
            }
        }
        if (srRow.length > 0) {
            for (Row rr : srRow) {
                if (rr.getAttribute("SelectSrNoStkTrans_SF") != null) {
                    if ("Y".equalsIgnoreCase(rr.getAttribute("SelectSrNoStkTrans_SF").toString())) {
                        System.out.println("Create SrNo for Selected Serials");
                        Row srInst = rcItmSr.createRow();
                        srInst.setAttribute("LotId", rr.getAttribute("LotId"));
                        srInst.setAttribute("BinId", rr.getAttribute("BinId"));
                        srInst.setAttribute("SrNo", rr.getAttribute("SrNo"));
                        srInst.setAttribute("ItmQty", new Number(1));
                        srInst.setAttribute("ItmQtyBs", new Number(1));
                        //srInst.setAttribute("WhId", rcRow.getAttribute("WhId"));
                        srInst.setAttribute("WhId", currItm.getAttribute("WhId"));
                        srInst.setAttribute("PrjId", currItm.getAttribute("PrjId"));
                        srInst.setAttribute("ItmUom", currItm.getAttribute("ItmUom"));

                        rcItmSr.insertRow(srInst);
                        // rcItmSr.executeQuery();
                    }
                }
            }
        }
        //System.out.println("Post Changes ____");
        //this.getDBTransaction().postChanges();
        /*  System.out.println("___________________________1");
        this.getMnfRcOpItmLotVO1().executeQuery();
        System.out.println("___________________________2");
        this.getMnfRcOpItmBinVO1().executeQuery();
        System.out.println("___________________________3");
    this.getMnfRcOpItmSrVO1().executeQuery();
        System.out.println("___________________________4");
      viewSummSr.executeQuery();
        System.out.println("___________________________5"); */
        // this.getDBTransaction().postChanges();
    }

    /**Method to filter Stock Lot data warehouse wise*/

    public void FilterLotWhWise() {
        ViewObject mnfRc = this.getMnfRcVO();
        Row rcRow = mnfRc.getCurrentRow();
        ViewObjectImpl rcItm = this.getMnfRcOpItmDispVO1();
        Row currItm = rcItm.getCurrentRow();
        if (rcRow != null) {
            ViewObject stkLot = this.getMnfItmStkLotVWVO1();
            System.out.println("Total Row in Lot-" + stkLot.getRowCount());
           // stkLot.setNamedWhereClauseParam("BindWhId", rcRow.getAttribute("WhId"));
           stkLot.setNamedWhereClauseParam("BindWhId", currItm.getAttribute("WhId"));
            stkLot.executeQuery();
            System.out.println("Total Row in Lot after filter-" + stkLot.getRowCount());
        }
    }

    /**Method to filter Stock Lot data warehouse wise(In Case of Shop Floor)*/

    public void FilterLotWhWise_SF() {
        ViewObject mnfRc = this.getMnfRcVO();
        Row rcRow = mnfRc.getCurrentRow();
        if (rcRow != null) {
            ViewObject stkLot = this.getMnfItmStkLotRqmtVwVO1();
            System.out.println("Total Row in Lot-" + stkLot.getRowCount());
            stkLot.setNamedWhereClauseParam("BindCldId", rcRow.getAttribute("CldId"));
            stkLot.setNamedWhereClauseParam("BindItmId",
                                            this.getMnfRcOpItmDispVO1().getCurrentRow().getAttribute("ItmId"));
            stkLot.setNamedWhereClauseParam("BindOrgId", rcRow.getAttribute("OrgId"));
            stkLot.setNamedWhereClauseParam("BindSlocId", rcRow.getAttribute("SlocId"));
          //  stkLot.setNamedWhereClauseParam("BindWhId", rcRow.getAttribute("WhId"));
          stkLot.setNamedWhereClauseParam("BindWhId", this.getMnfRcOpItmDispVO1().getCurrentRow().getAttribute("WhId"));
            stkLot.setNamedWhereClauseParam("BindRqmtArId",
                                            this.getMnfRcOpItmDispVO1().getCurrentRow().getAttribute("RqmtAreaId"));
            stkLot.executeQuery();
            System.out.println("Total Row in Lot after filter-" + stkLot.getRowCount());
        }
    }

    /**To Add Item Lot Wise
     * Method to select lot for item (If Organisation is not using bin and Items are not serialised)
     */

    public void InsertIntoRcItmLot() {

        ViewObjectImpl mtlItm = this.getMnfRcOpItmDispVO1();
        ViewObjectImpl mtlLot = this.getMnfRcOpItmLotVO1();
        ViewObject mnfRc = this.getMnfRcVO();

        Row currItm = mtlItm.getCurrentRow();
        Row rcRow = mnfRc.getCurrentRow();

        oracle.jbo.domain.Number zero = new oracle.jbo.domain.Number(0);
        Row[] srRow = this.getMnfItmStkLotVWVO1().getFilteredRows("ItmId", currItm.getAttribute("ItmId"));
        System.out.println("lenth sr     " + srRow.length);

        if (srRow.length > 0) {
            for (Row rr : srRow) {
                if (rr.getAttribute("TransIssuQtyValue") != null) {
                    if (((oracle.jbo.domain.Number) rr.getAttribute("TransIssuQtyValue")).compareTo(zero) >= 0) {

                        // Filter Lot Table to ckeck Lot exist or not, Basis of DocId , SoId , ItmId and LotId

                        RowQualifier rowQualifier = new RowQualifier(mtlLot);
                        rowQualifier.setWhereClause("DocId = '" + currItm.getAttribute("DocId") + "' and ItmId = '" +
                                                    currItm.getAttribute("ItmId") + "' and LotId = '" +
                                                    rr.getAttribute("LotId").toString() + "'");
                        Row[] rows = mtlLot.getFilteredRows(rowQualifier);
                        //  System.out.println("RowQuali String-" + rowQualifier.getExprStr());

                        // Check that Lot exist or not for that item
                        if (rows.length > 0) {
                            for (Row r : rows) {
                                if (((oracle.jbo.domain.Number) rr.getAttribute("TransIssuQtyValue")).compareTo(zero) ==
                                    0) {

                                    System.out.println("Lot remove-------------------");
                                    r.remove();
                                } else if (((oracle.jbo.domain.Number) rr.getAttribute("TransIssuQtyValue")).compareTo(zero) >
                                           0) {

                                    System.out.println("Lot Update -------------------");
                                    r.setAttribute("ItmQty", rr.getAttribute("TransIssuQtyValue"));
                                    r.setAttribute("ItmQtyBs", rr.getAttribute("TransIssuQtyValue"));
                                    String LotId = (String) r.getAttribute("LotId");
                                    System.out.println("Lot Already Exists | Lot Number is : " + LotId);

                                    //-------------------------------------------------------------------------------------------------------------
                                    BigDecimal avail = new BigDecimal(0);
                                    try {
                                        String whId = rcRow.getAttribute("WhId").toString();

                                        avail =
                                            (BigDecimal) callStoredFunction(Types.NUMERIC,
                                                                            "MNF.FN_MNF_GET_ITM_LOT_PRICE(?,?,?,?,?,?,?,?)", new Object[] {
                                                                            this.getCldIdValue(), this.getSlocIdValue(),
                                                                            this.getOrgIdValue(), whId,
                                                                            currItm.getAttribute("ItmId"), LotId,
                                                                            rcRow.getAttribute("FyId"),
                                                                            currItm.getAttribute("IssuType")
                                        });
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                    }
                                    if (avail.compareTo(new BigDecimal(-1)) == 0) {
                                        avail = new BigDecimal(0);
                                    }
                                    Number lotQty = new Number(0);
                                    lotQty = (Number) rr.getAttribute("TransIssuQtyValue");
                                    Number multiply = new Number(0);
                                    try {
                                        multiply = lotQty.multiply(new Number(avail));
                                    } catch (SQLException e) {
                                        e.printStackTrace();
                                    }
                                    System.out.println("Item Lot Cost : " + multiply);
                                    r.setAttribute("ItmLotCost", multiply);

                                    //-------------------------------------------------------------------------------------------------------------
                                }
                            }
                        } else {
                            if (((oracle.jbo.domain.Number) rr.getAttribute("TransIssuQtyValue")).compareTo(zero) > 0) {
                                Row lotInst = mtlLot.createRow();
                                lotInst.setAttribute("LotId", rr.getAttribute("LotId"));
                                lotInst.setAttribute("ItmQty", rr.getAttribute("TransIssuQtyValue"));
                                lotInst.setAttribute("ItmQtyBs", rr.getAttribute("TransIssuQtyValue"));
                                lotInst.setAttribute("ItmUom", currItm.getAttribute("ItmUom"));
                                System.out.println("Warehouse is--" + rr.getAttribute("WhId"));
                                lotInst.setAttribute("WhId", rr.getAttribute("WhId"));
                                //-------------------------------------------------------------------------------------------------------------
                                String LotId = (String) rr.getAttribute("LotId");
                                System.out.println("Lot Do not Exists | New Lot Number is generated : " + LotId);
                                BigDecimal avail = new BigDecimal(0);
                                try {
                                    String whId = rcRow.getAttribute("WhId").toString();

                                    avail =
                                        (BigDecimal) callStoredFunction(Types.NUMERIC,
                                                                        "MNF.FN_MNF_GET_ITM_LOT_PRICE(?,?,?,?,?,?,?,?)", new Object[] {
                                                                        this.getCldIdValue(), this.getSlocIdValue(),
                                                                        this.getOrgIdValue(), whId,
                                                                        currItm.getAttribute("ItmId"), LotId,
                                                                        rcRow.getAttribute("FyId"),
                                                                        currItm.getAttribute("IssuType")
                                    });
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }
                                Number lotQty = new Number(0);
                                lotQty = (Number) rr.getAttribute("TransIssuQtyValue");
                                if (avail.compareTo(new BigDecimal(-1)) == 0) {
                                    avail = new BigDecimal(0);
                                }
                                Number multiply = new Number(0);
                                try {
                                    multiply = lotQty.multiply(new Number(avail));
                                } catch (SQLException e) {
                                    e.printStackTrace();
                                }
                                System.out.println("Item Lot Cost : " + multiply);
                                lotInst.setAttribute("ItmLotCost", multiply);

                                mtlLot.insertRow(lotInst);
                                // mtlLot.executeQuery();
                            }
                        }
                    }
                }
            }
        }
        //  mtlItm.executeQuery();
        //  this.getDBTransaction().postChanges();
    }


    /**To Add Item Lot Wise(In Case of Shop Floor)
     * Method to select lot for item (If Organisation is not using bin and Items are not serialised)
     */

    public void InsertIntoRcItmLot_SF() {

        ViewObjectImpl mtlItm = this.getMnfRcOpItmDispVO1();
        ViewObjectImpl mtlLot = this.getMnfRcOpItmLotVO1();
        ViewObject mnfRc = this.getMnfRcVO();

        Row currItm = mtlItm.getCurrentRow();
        Row rcRow = mnfRc.getCurrentRow();

        oracle.jbo.domain.Number zero = new oracle.jbo.domain.Number(0);
        Row[] srRow = this.getMnfItmStkLotRqmtVwVO1().getFilteredRows("ItmId", currItm.getAttribute("ItmId"));
        System.out.println("lenth sr     " + srRow.length);

        if (srRow.length > 0) {
            for (Row rr : srRow) {
                if (rr.getAttribute("TransIssuQtyValue_SF") != null) {
                    if (((oracle.jbo.domain.Number) rr.getAttribute("TransIssuQtyValue_SF")).compareTo(zero) >= 0) {

                        // Filter Lot Table to ckeck Lot exist or not, Basis of DocId , SoId , ItmId and LotId

                        RowQualifier rowQualifier = new RowQualifier(mtlLot);
                        rowQualifier.setWhereClause("DocId = '" + currItm.getAttribute("DocId") + "' and ItmId = '" +
                                                    currItm.getAttribute("ItmId") + "' and LotId = '" +
                                                    rr.getAttribute("LotId").toString() + "'");
                        Row[] rows = mtlLot.getFilteredRows(rowQualifier);
                        // System.out.println("RowQuali String-" + rowQualifier.getExprStr());

                        // Check that Lot exist or not for that item
                        if (rows.length > 0) {
                            for (Row r : rows) {
                                if (((oracle.jbo.domain.Number) rr.getAttribute("TransIssuQtyValue_SF")).compareTo(zero) ==
                                    0) {

                                    System.out.println("Lot remove-------------------");
                                    r.remove();
                                } else if (((oracle.jbo.domain.Number) rr.getAttribute("TransIssuQtyValue_SF")).compareTo(zero) >
                                           0) {

                                    System.out.println("Lot Update -------------------");
                                    r.setAttribute("ItmQty", rr.getAttribute("TransIssuQtyValue_SF"));
                                    r.setAttribute("ItmQtyBs", rr.getAttribute("TransIssuQtyValue_SF"));
                                    String LotId = (String) r.getAttribute("LotId");
                                    System.out.println("Lot Already Exists | Lot Number is : " + LotId);

                                    //-------------------------------------------------------------------------------------------------------------
                                    BigDecimal avail = new BigDecimal(0);
                                    try {
                                       // String whId = rcRow.getAttribute("WhId").toString();
                                       String whId = currItm.getAttribute("WhId").toString();
                                        avail =
                                            (BigDecimal) callStoredFunction(Types.NUMERIC,
                                                                            "MNF.FN_MNF_GET_ITM_LOT_PRICE(?,?,?,?,?,?,?,?)", new Object[] {
                                                                            this.getCldIdValue(), this.getSlocIdValue(),
                                                                            this.getOrgIdValue(), whId,
                                                                            currItm.getAttribute("ItmId"), LotId,
                                                                            rcRow.getAttribute("FyId"),
                                                                            currItm.getAttribute("IssuType")
                                        });
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                    }
                                    if (avail.compareTo(new BigDecimal(-1)) == 0) {
                                        avail = new BigDecimal(0);
                                    }
                                    Number lotQty = new Number(0);
                                    lotQty = (Number) rr.getAttribute("TransIssuQtyValue_SF");
                                    Number multiply = new Number(0);
                                    try {
                                        multiply = lotQty.multiply(new Number(avail));
                                    } catch (SQLException e) {
                                        e.printStackTrace();
                                    }
                                    System.out.println("Item Lot Cost : " + multiply);
                                    r.setAttribute("ItmLotCost", multiply);

                                    //-------------------------------------------------------------------------------------------------------------
                                }
                            }
                        } else {
                            if (((oracle.jbo.domain.Number) rr.getAttribute("TransIssuQtyValue_SF")).compareTo(zero) >
                                0) {
                                Row lotInst = mtlLot.createRow();
                                lotInst.setAttribute("LotId", rr.getAttribute("LotId"));
                                lotInst.setAttribute("ItmQty", rr.getAttribute("TransIssuQtyValue_SF"));
                                lotInst.setAttribute("ItmQtyBs", rr.getAttribute("TransIssuQtyValue_SF"));
                                lotInst.setAttribute("ItmUom", currItm.getAttribute("ItmUom"));
                              //  System.out.println("Warehouse is--" + rr.getAttribute("WhId"));
                              //  lotInst.setAttribute("WhId", rr.getAttribute("WhId"));
                              lotInst.setAttribute("WhId", currItm.getAttribute("WhId"));
                                lotInst.setAttribute("PrjId", currItm.getAttribute("PrjId"));
                                //-------------------------------------------------------------------------------------------------------------
                                String LotId = (String) rr.getAttribute("LotId");
                                System.out.println("Lot Do not Exists | New Lot Number is generated : " + LotId);
                                BigDecimal avail = new BigDecimal(0);
                                try {
                                   // String whId = rcRow.getAttribute("WhId").toString();
                                   String whId = currItm.getAttribute("WhId").toString();

                                    avail =
                                        (BigDecimal) callStoredFunction(Types.NUMERIC,
                                                                        "MNF.FN_MNF_GET_ITM_LOT_PRICE(?,?,?,?,?,?,?,?)", new Object[] {
                                                                        this.getCldIdValue(), this.getSlocIdValue(),
                                                                        this.getOrgIdValue(), whId,
                                                                        currItm.getAttribute("ItmId"), LotId,
                                                                        rcRow.getAttribute("FyId"),
                                                                        currItm.getAttribute("IssuType")
                                    });
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }
                                Number lotQty = new Number(0);
                                lotQty = (Number) rr.getAttribute("TransIssuQtyValue_SF");
                                if (avail.compareTo(new BigDecimal(-1)) == 0) {
                                    avail = new BigDecimal(0);
                                }
                                Number multiply = new Number(0);
                                try {
                                    multiply = lotQty.multiply(new Number(avail));
                                } catch (SQLException e) {
                                    e.printStackTrace();
                                }
                                System.out.println("Item Lot Cost : " + multiply);
                                lotInst.setAttribute("ItmLotCost", multiply);

                                mtlLot.insertRow(lotInst);
                                //  mtlLot.executeQuery();
                            }
                        }
                    }
                }
            }
        }
        // mtlItm.executeQuery();
        // this.getDBTransaction().postChanges();
    }

    /**Method to filter Stock Bin data warehouse wise*/

    public void FilterBinWhWise() {
        ViewObject mnfRc = this.getMnfRcVO();
        Row rcRow = mnfRc.getCurrentRow();
        if (rcRow != null) {
            ViewObject stkLot = this.getMnfItmStkBinVwVO1();
            System.out.println("Total Row in Bin-" + stkLot.getRowCount());
            stkLot.setNamedWhereClauseParam("BindWhId",  this.getMnfRcOpItmDispVO1().getCurrentRow().getAttribute("WhId"));
           // stkLot.setNamedWhereClauseParam("BindWhId", rcRow.getAttribute("WhId"));
            stkLot.executeQuery();
            System.out.println("Total Row in Bin after filter-" + stkLot.getRowCount());
        }
    }

    /**Method to filter Stock Bin data warehouse wise(In Case of Shop Floor)*/

    public void FilterBinWhWise_SF() {
        ViewObject mnfRc = this.getMnfRcVO();
        
        Row rcRow = mnfRc.getCurrentRow();
        if (rcRow != null) {
            ViewObject stkLot = this.getMnfItmStkBinRqmtVwVO1();
            System.out.println("Total Row in Bin-" + stkLot.getRowCount());
            stkLot.setNamedWhereClauseParam("BindCldId", rcRow.getAttribute("CldId"));
            stkLot.setNamedWhereClauseParam("BindItmId",
                                            this.getMnfRcOpItmDispVO1().getCurrentRow().getAttribute("ItmId"));
            stkLot.setNamedWhereClauseParam("BindOrgId", rcRow.getAttribute("OrgId"));
            stkLot.setNamedWhereClauseParam("BindSlocId", rcRow.getAttribute("SlocId"));
            //stkLot.setNamedWhereClauseParam("BindWhId", rcRow.getAttribute("WhId"));
            stkLot.setNamedWhereClauseParam("BindWhId", this.getMnfRcOpItmDispVO1().getCurrentRow().getAttribute("WhId"));
            stkLot.setNamedWhereClauseParam("BindRqmtArId",
                                            this.getMnfRcOpItmDispVO1().getCurrentRow().getAttribute("RqmtAreaId"));
            stkLot.executeQuery();
            System.out.println("Total Row in Bin after filter-" + stkLot.getRowCount());
        }
    }

    /**
     * Check mandatory Fields before populating the Operations and there details
     * Doing this because of duplicate values is showing auto suggestion
     */
    public Integer chkMandatoryEnteredOrNot() {
        ViewObjectImpl impl = this.getMnfRcVO();
        Row cr = impl.getCurrentRow();
        Integer RqmtAreaId = (Integer) cr.getAttribute("RqmtAreaId");
        String WhId = (String) cr.getAttribute("WhId");
        String PrjId = (String) cr.getAttribute("PrjId");
        Number ActOutptItmQty = (Number) cr.getAttribute("ActOutptItmQty");
        String DocIdSrc = (String) this.getMnfRcSrcVO1().getCurrentRow().getAttribute("DocIdSrc");
        if (DocIdSrc == null) {
            return 1;
        } else if (RqmtAreaId == null) {
            return 2;
        } else if (WhId == null) {
            return 3;
        } else if (ActOutptItmQty == null) {
            return 4;
        }else if (PrjId == null) {
            return 6;
        } else {
            return 5;
        }
    }

    /**To Select Bin and Lot for Item
     * Method to select lot and bin for item (If Organisation is using bin and Items are not serialised)
     * @param
     */
    public void InsertIntoRcItmBin() {
        //insertIntoPickItmSr

        ViewObjectImpl mtlItm = this.getMnfRcOpItmDispVO1();
        ViewObjectImpl mtlBin = this.getMnfRcOpItmBinVO1();

        ViewObjectImpl mtlLot = this.getMnfRcOpItmLotVO1();
        Row currItm = mtlItm.getCurrentRow();

        ViewObject mnfRc = this.getMnfRcVO();
        Row rcRow = mnfRc.getCurrentRow();
        Number zero = new Number(0);
        ViewObjectImpl stkSummBin = this.getMnfItmStkBinVwVO1();
        Row[] binRow = this.getMnfItmStkBinVwVO1().getFilteredRows("ItmId", currItm.getAttribute("ItmId"));

        ArrayList<String> arrlist = new ArrayList<String>();

        if (binRow.length > 0) {
            for (Row r1 : binRow) {
                if (r1.getAttribute("TransIssueQty") != null) {
                    if (((Number) r1.getAttribute("TransIssueQty")).compareTo(zero) > 0) {
                        String lotId = r1.getAttribute("LotId").toString();
                        arrlist.add(lotId);
                        System.out.println("lot id Bin-- " + lotId);
                    }
                }
            }
            System.out.println("Lot ArrayList size " + arrlist.size());
        }
        Set<String> lotset = new HashSet<String>(arrlist);

        Iterator itr = lotset.iterator();
        while (itr.hasNext()) {
            String lotId = itr.next().toString();
            Number lotQty = new Number(0);
            for (Row r1 : binRow) {
                if (r1.getAttribute("TransIssueQty") != null) {
                    if (((Number) r1.getAttribute("TransIssueQty")).compareTo(zero) > 0 &&
                        r1.getAttribute("LotId").toString().equals(lotId)) {
                        lotQty = lotQty.add((Number) r1.getAttribute("TransIssueQty"));
                    }
                }
            }
            System.out.println(" lot id   ---" + lotId + "----qty------" + lotQty);

            // Check lot already created or not

            RowQualifier rowQualifier = new RowQualifier(mtlLot);
            rowQualifier.setWhereClause(" DocId ='" + currItm.getAttribute("DocId") + "' and ItmId = '" +
                                        currItm.getAttribute("ItmId") + "' and LotId = '" + lotId + "'");
            Row[] rows = mtlLot.getFilteredRows(rowQualifier);
            System.out.println("" + rowQualifier.getExprStr());
            if (rows.length > 0) {
                for (Row r : rows) {
                    r.setAttribute("ItmQty", lotQty);
                    r.setAttribute("ItmQtyBs", lotQty);
                }
            } else {
                RowQualifier rq = new RowQualifier(stkSummBin);
                rq.setWhereClause("ItmId='" + currItm.getAttribute("ItmId"));
                Row binRows[] = stkSummBin.getFilteredRows(rq);
                //system.out.println("Total Item for This Lot -" + binRows.length);

                Row instLot = mtlLot.createRow();
                mtlLot.insertRow(instLot);
                instLot.setAttribute("LotId", lotId);
                instLot.setAttribute("ItmQty", lotQty);
                instLot.setAttribute("ItmQtyBs", lotQty);
                instLot.setAttribute("ItmUom", currItm.getAttribute("ItmUom"));
                instLot.setAttribute("WhId", currItm.getAttribute("WhId"));
                instLot.setAttribute("PrjId", currItm.getAttribute("PrjId"));
                BigDecimal avail = new BigDecimal(0);
                try {
                    //String whId = rcRow.getAttribute("WhId").toString();
                    String whId = currItm.getAttribute("WhId").toString();

                    avail =
                        (BigDecimal) callStoredFunction(Types.NUMERIC, "MNF.FN_MNF_GET_ITM_LOT_PRICE(?,?,?,?,?,?,?,?)", new Object[] {
                                                        this.getCldIdValue(), this.getSlocIdValue(),
                                                        this.getOrgIdValue(), whId, currItm.getAttribute("ItmId"),
                                                        lotId, rcRow.getAttribute("FyId"),
                                                        currItm.getAttribute("IssuType")
                    });

                } catch (Exception e) {
                    e.printStackTrace();
                }
                if (avail.compareTo(new BigDecimal(-1)) == 0) {
                    avail = new BigDecimal(0);
                }
                Number multiply = new Number(0);
                try {
                    multiply = (Number) lotQty.multiply(new Number(avail));
                } catch (SQLException e) {
                    e.printStackTrace();
                }
                System.out.println("Item Lot Cost : " + multiply);
                instLot.setAttribute("ItmLotCost", multiply);

                // mtlLot.executeQuery();
            }
        }
        System.out.println("----------" + lotset);
        if (binRow.length > 0) {
            for (Row rr : binRow) {
                if (rr.getAttribute("TransIssueQty") != null) {
                    if (((Number) rr.getAttribute("TransIssueQty")).compareTo(zero) >= 0) {
                        System.out.println("Condition true create Bin");

                        // Check bin already created or not

                        RowQualifier rowQualifier = new RowQualifier(mtlBin);
                        rowQualifier.setWhereClause(" DocId ='" + currItm.getAttribute("DocId") + "' and ItmId = '" +
                                                    currItm.getAttribute("ItmId") + "' and LotId = '" +
                                                    rr.getAttribute("LotId").toString() + "' and BinId = '" +
                                                    rr.getAttribute("BinId").toString() + "'");
                        Row[] rows = mtlBin.getFilteredRows(rowQualifier);
                        //  System.out.println("" + rowQualifier.getExprStr());
                        //   System.out.println("length   " + rows.length);
                        if (rows.length > 0) {
                            for (Row r : rows) {
                                if (((Number) rr.getAttribute("TransIssueQty")).compareTo(zero) == 0) {
                                    System.out.println("row removed ----------");
                                    r.remove();
                                } else if (((Number) rr.getAttribute("TransIssueQty")).compareTo(zero) > 0) {
                                    // Update created bin quantity.
                                    System.out.println("row update ----------");
                                    r.setAttribute("ItmQty", rr.getAttribute("TransIssueQty"));
                                    r.setAttribute("ItmQtyBs", rr.getAttribute("TransIssueQty"));
                                }
                            }
                        } else {
                            // if row  not exist create new Bin row  .
                            if (((Number) rr.getAttribute("TransIssueQty")).compareTo(zero) > 0) {
                                System.out.println("row created ----------");
                                Row binInst = mtlBin.createRow();
                                binInst.setAttribute("LotId", rr.getAttribute("LotId"));
                                binInst.setAttribute("BinId", rr.getAttribute("BinId"));
                                binInst.setAttribute("ItmQty", rr.getAttribute("TransIssueQty"));
                                binInst.setAttribute("ItmQtyBs", rr.getAttribute("TransIssueQty"));
                                //binInst.setAttribute("WhId", rcRow.getAttribute("WhId"));
                                binInst.setAttribute("WhId", currItm.getAttribute("WhId"));
                                binInst.setAttribute("PrjId", currItm.getAttribute("PrjId"));
                                binInst.setAttribute("ItmUom", currItm.getAttribute("ItmUom"));
                                mtlBin.insertRow(binInst);
                                //  mtlBin.executeQuery();
                            }
                        }
                    }
                }
            }
        }
        /* this.getMnfRcOpItmBinVO1().executeQuery();
       this.getMnfRcOpItmLotVO1().executeQuery();
        this.getMnfRcOpItmDispVO1().executeQuery();
        this.getDBTransaction().postChanges(); */
    }


    /**To Select Bin and Lot for Item(In Case of Shop Floor)
     * Method to select lot and bin for item (If Organisation is using bin and Items are not serialised)
     * @param
     */
    public void InsertIntoRcItmBin_SF() {
        ViewObjectImpl mtlItm = this.getMnfRcOpItmDispVO1();
        ViewObjectImpl mtlBin = this.getMnfRcOpItmBinVO1();

        ViewObjectImpl mtlLot = this.getMnfRcOpItmLotVO1();
        Row currItm = mtlItm.getCurrentRow();

        ViewObject mnfRc = this.getMnfRcVO();
        Row rcRow = mnfRc.getCurrentRow();
        Number zero = new Number(0);
        ViewObjectImpl stkSummBin = this.getMnfItmStkBinRqmtVwVO1();
        Row[] binRow = this.getMnfItmStkBinRqmtVwVO1().getFilteredRows("ItmId", currItm.getAttribute("ItmId"));

        ArrayList<String> arrlist = new ArrayList<String>();

        if (binRow.length > 0) {
            for (Row r1 : binRow) {
                if (r1.getAttribute("TransIssueQty_SF") != null) {
                    if (((Number) r1.getAttribute("TransIssueQty_SF")).compareTo(zero) > 0) {
                        String lotId = r1.getAttribute("LotId").toString();
                        arrlist.add(lotId);
                        System.out.println("lot id Bin-- " + lotId);
                    }
                }
            }
            System.out.println("Lot ArrayList size " + arrlist.size());
        }
        Set<String> lotset = new HashSet<String>(arrlist);

        Iterator itr = lotset.iterator();
        while (itr.hasNext()) {
            String lotId = itr.next().toString();
            Number lotQty = new Number(0);
            for (Row r1 : binRow) {
                if (r1.getAttribute("TransIssueQty_SF") != null) {
                    if (((Number) r1.getAttribute("TransIssueQty_SF")).compareTo(zero) > 0 &&
                        r1.getAttribute("LotId").toString().equals(lotId)) {
                        lotQty = lotQty.add((Number) r1.getAttribute("TransIssueQty_SF"));
                    }
                }
            }
            System.out.println(" lot id   ---" + lotId + "----qty------" + lotQty);

            // Check lot already created or not

            RowQualifier rowQualifier = new RowQualifier(mtlLot);
            rowQualifier.setWhereClause(" DocId ='" + currItm.getAttribute("DocId") + "' and ItmId = '" +
                                        currItm.getAttribute("ItmId") + "' and LotId = '" + lotId + "'");
            Row[] rows = mtlLot.getFilteredRows(rowQualifier);
            System.out.println("" + rowQualifier.getExprStr());
            if (rows.length > 0) {
                for (Row r : rows) {
                    r.setAttribute("ItmQty", lotQty);
                    r.setAttribute("ItmQtyBs", lotQty);
                }
            } else {
                RowQualifier rq = new RowQualifier(stkSummBin);
                rq.setWhereClause("ItmId='" + currItm.getAttribute("ItmId"));
                Row binRows[] = stkSummBin.getFilteredRows(rq);
                //system.out.println("Total Item for This Lot -" + binRows.length);

                Row instLot = mtlLot.createRow();
                mtlLot.insertRow(instLot);
                instLot.setAttribute("LotId", lotId);
                instLot.setAttribute("ItmQty", lotQty);
                instLot.setAttribute("ItmQtyBs", lotQty);
                instLot.setAttribute("ItmUom", currItm.getAttribute("ItmUom"));
                //instLot.setAttribute("WhId", rcRow.getAttribute("WhId"));
                instLot.setAttribute("WhId", currItm.getAttribute("WhId"));
                instLot.setAttribute("PrjId", currItm.getAttribute("PrjId"));
                BigDecimal avail = new BigDecimal(0);
                try {
                    //String whId = rcRow.getAttribute("WhId").toString();
                    String whId = currItm.getAttribute("WhId").toString();

                    avail =
                        (BigDecimal) callStoredFunction(Types.NUMERIC, "MNF.FN_MNF_GET_ITM_LOT_PRICE(?,?,?,?,?,?,?,?)", new Object[] {
                                                        this.getCldIdValue(), this.getSlocIdValue(),
                                                        this.getOrgIdValue(), whId, currItm.getAttribute("ItmId"),
                                                        lotId, rcRow.getAttribute("FyId"),
                                                        currItm.getAttribute("IssuType")
                    });

                } catch (Exception e) {
                    e.printStackTrace();
                }
                if (avail.compareTo(new BigDecimal(-1)) == 0) {
                    avail = new BigDecimal(0);
                }
                Number multiply = new Number(0);
                try {
                    multiply = (Number) lotQty.multiply(new Number(avail));
                } catch (SQLException e) {
                    e.printStackTrace();
                }
                System.out.println("Item Lot Cost : " + multiply);
                instLot.setAttribute("ItmLotCost", multiply);

                // mtlLot.executeQuery();
            }
        }
        System.out.println("----------" + lotset);
        if (binRow.length > 0) {
            for (Row rr : binRow) {
                if (rr.getAttribute("TransIssueQty_SF") != null) {
                    if (((Number) rr.getAttribute("TransIssueQty_SF")).compareTo(zero) >= 0) {
                        System.out.println("Condition true create Bin");

                        // Check bin already created or not

                        RowQualifier rowQualifier = new RowQualifier(mtlBin);
                        rowQualifier.setWhereClause(" DocId ='" + currItm.getAttribute("DocId") + "' and ItmId = '" +
                                                    currItm.getAttribute("ItmId") + "' and LotId = '" +
                                                    rr.getAttribute("LotId").toString() + "' and BinId = '" +
                                                    rr.getAttribute("BinId").toString() + "'");
                        Row[] rows = mtlBin.getFilteredRows(rowQualifier);
                        System.out.println("" + rowQualifier.getExprStr());
                        System.out.println("length   " + rows.length);
                        if (rows.length > 0) {
                            for (Row r : rows) {
                                if (((Number) rr.getAttribute("TransIssueQty_SF")).compareTo(zero) == 0) {
                                    System.out.println("row removed ----------");
                                    r.remove();
                                } else if (((Number) rr.getAttribute("TransIssueQty_SF")).compareTo(zero) > 0) {
                                    // Update created bin quantity.
                                    System.out.println("row update ----------");
                                    r.setAttribute("ItmQty", rr.getAttribute("TransIssueQty_SF"));
                                    r.setAttribute("ItmQtyBs", rr.getAttribute("TransIssueQty_SF"));
                                }
                            }
                        } else {
                            // if row  not exist create new Bin row  .
                            if (((Number) rr.getAttribute("TransIssueQty_SF")).compareTo(zero) > 0) {
                                System.out.println("row created ----------");
                                Row binInst = mtlBin.createRow();
                                binInst.setAttribute("LotId", rr.getAttribute("LotId"));
                                binInst.setAttribute("BinId", rr.getAttribute("BinId"));
                                binInst.setAttribute("ItmQty", rr.getAttribute("TransIssueQty_SF"));
                                binInst.setAttribute("ItmQtyBs", rr.getAttribute("TransIssueQty_SF"));
                               // binInst.setAttribute("WhId", rcRow.getAttribute("WhId"));
                                binInst.setAttribute("WhId", currItm.getAttribute("WhId"));
                                binInst.setAttribute("PrjId", currItm.getAttribute("PrjId"));
                                binInst.setAttribute("ItmUom", currItm.getAttribute("ItmUom"));
                                mtlBin.insertRow(binInst);
                                // mtlBin.executeQuery();
                            }
                        }
                    }
                }
            }
        }
        /*  this.getMnfRcOpItmBinVO1().executeQuery();
        this.getMnfRcOpItmLotVO1().executeQuery();
        this.getMnfRcOpItmDispVO1().executeQuery();
        this.getDBTransaction().postChanges(); */
    }


    /**
     * Function which will check whether operations were in Open State or not or else throw a message Saying
     * Job card is generated and we cannot generate Route Card
     */

    /*----------------------------------Delete Records in Item tables--------------------------------------*/
    public void DeleteRecords(String Ho_Org_Id, String Org_Id, Integer Sloc_Id, String Cld_Id, String Doc_Id) {
        PreparedStatement stat = null;
        try {
            String sql =
                "DELETE FROM MNF$RC$OP$ITM WHERE CLD_ID='" + Cld_Id + "' AND SLOC_ID='" + Sloc_Id +
                "' AND HO_ORG_ID='" + Ho_Org_Id + "' AND ORG_ID='" + Org_Id + "' AND DOC_ID='" + Doc_Id + "'";
            stat = this.getDBTransaction().createPreparedStatement(sql, 1);
            stat.executeUpdate();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (stat != null) {
                try {
                    stat.close();
                } catch (SQLException e) {
                }
            }
        }
    }

    public Boolean ChkDocumentStatus() {
        Boolean retVal = false;

        try {
            ViewObjectImpl impl = this.getMnfRcSrcVO1();
            Row currentRow = impl.getCurrentRow();
            if (currentRow != null) {
                Integer JcBasis = 0;
                String docId = (String) currentRow.getAttribute("DocIdSrc");
                Integer docTypeId = (Integer) currentRow.getAttribute("DocTypeSrc");
                if (docTypeId == 92) {
                    JcBasis = 26001;
                } else if (docTypeId == 91) {
                    JcBasis = 26002;
                }
                Object val = callStoredFunction(Types.VARCHAR, "MNF.FN_MNF_CHK_JC_EXISTS(?,?,?,?,?)", new Object[] {
                                                this.getCldIdValue(), this.getSlocIdValue(), this.getOrgIdValue(),
                                                JcBasis, docId
                });
                if (val != null && val.toString().equalsIgnoreCase("Y")) {
                    retVal = true;
                } else {
                    retVal = false;
                }
            }
        } catch (Exception e) {
            System.out.println("ERROR IN CALLING FUNCTION FN_MNF_CHK_JC_EXISTS at AMIMPL :" + e.getMessage());
            e.printStackTrace();
        }
        return retVal;
    }

    /**
     * Function to Update Document Status at the time of Save or Save and Forward
     */
    public void UpdateDocumentOpStatus(String Flag) {
        Row currentRow = this.getMnfRcVO().getCurrentRow();
        Integer JcBasis = 0;
        Integer docId = (Integer) this.getMnfRcSrcVO1().getCurrentRow().getAttribute("DocTypeSrc");
        if (docId == 92) {
            JcBasis = 26001;
        } else if (docId == 91) {
            JcBasis = 26002;
        }
        String docHexId = (String) this.getMnfRcSrcVO1().getCurrentRow().getAttribute("DocIdSrc");
        if (currentRow != null && docId != null && docHexId != null) {
            RowSetIterator rsi = this.getMnfRcOpVO1().createRowSetIterator(null);
            Row next = null;
            try {
                while (rsi.hasNext()) {
                    next = rsi.next();
                    if (next != null && docId != null && docHexId != null && next.getAttribute("OpId") != null &&
                        next.getAttribute("OpSrNo") != null && next.getAttribute("UsrIdCreate") != null &&
                        next.getAttribute("UsrIdCreateDt") != null) {

                        callStoredFunction(Types.VARCHAR, "MNF.FN_MNF_UPD_DOC_OP_STAT(?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                           this.getCldIdValue(), this.getSlocIdValue(), this.getHoOrgIdValue(),
                                           this.getOrgIdValue(), JcBasis, docHexId, next.getAttribute("OpId"),
                                           next.getAttribute("OpSrNo"), next.getAttribute("UsrIdCreate"),
                                           next.getAttribute("UsrIdCreateDt"), 108,
                                           currentRow.getAttribute("OutptItmId"),
                                           currentRow.getAttribute("OutptItmQty"), Flag
                        });
                    }
                }
            } catch (Exception e) {
                System.out.println("ERROR IN CALLING FUNCTION FN_MNF_UPD_DOC_OP_STAT at AMIMPL :" + e.getMessage());
                e.printStackTrace();
                showFacesMsg("Error while closing Operation Status", null, FacesMessage.SEVERITY_ERROR, null);
            } finally {
                if (rsi != null) {
                    rsi.closeRowSetIterator();
                }
            }
        }
    }


    /**
     * Refresh MnfCreateJc Vo for setting the popup values to null
     */
    public void RefreshJcVO() {
        ViewObjectImpl createJcVO1 = this.getMnfGenerateJcDualVO1();

        createJcVO1.executeQuery();
    }

    /**
     * Function which will generate Job Card Conditionally
     */
    public Boolean GenerateJobCardOnType() {
        Boolean retVal = false;
        Integer val = null;
        String srcdocid = null;
        ViewObjectImpl impl = this.getMnfRcVO();
        Row row = impl.getCurrentRow();

        if (row.getAttribute("DocId") != null) {
            srcdocid = row.getAttribute("DocId").toString();
        }

        ViewObjectImpl createJcVO1 = this.getMnfGenerateJcDualVO1();
        Row currentRow = createJcVO1.getCurrentRow();
        if (currentRow != null) {
            if (currentRow.getAttribute("GenerateTypeTrans") != null) {
                if (currentRow.getAttribute("ShiftIdDispTrans") != null &&
                    currentRow.getAttribute("EmplIdDispTrans") != null &&
                    currentRow.getAttribute("StrtDtJcTrans") != null &&
                    currentRow.getAttribute("EndDtJcTrans") != null &&
                    currentRow.getAttribute("OpRmrkJcTrans") != null && srcdocid != null &&
                    row.getAttribute("DocDt") != null && row.getAttribute("FyId") != null &&
                    row.getAttribute("RqmtAreaId") != null && row.getAttribute("WhId") != null) {
                    if (currentRow.getAttribute("GenerateTypeTrans").equals(1)) { // For Individual Operation
                        try {
                            val =
                                Integer.parseInt(this.callStoredFunction(Types.INTEGER,
                                                                         "MNF.FN_MNF_GEN_JC_RC(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                                         this.getCldIdValue(), this.getSlocIdValue(),
                                                                         this.getHoOrgIdValue(), this.getOrgIdValue(),
                                                                         srcdocid, 26003, row.getAttribute("DocDt"),
                                                                         currentRow.getAttribute("UsrIdCreate"),
                                                                         new Timestamp(System.currentTimeMillis()), 105,
                                                                         currentRow.getAttribute("OperationIdDispTrans"),
                                                                         currentRow.getAttribute("OpSrNoJcTrans"),
                                                                         currentRow.getAttribute("OutputItmIdJcTrans"),
                                                                         currentRow.getAttribute("OutputItmQtyJcTrans"),
                                                                         row.getAttribute("FyId"),
                                                                         currentRow.getAttribute("OpRmrkJcTrans"),
                                                                         currentRow.getAttribute("ShiftIdDispTrans"),
                                                                         currentRow.getAttribute("WcIdJcTrans"),
                                                                         currentRow.getAttribute("WorkStationIdDispTrans"),
                                                                         currentRow.getAttribute("OpLocTypeJcTrans"),
                                                                         currentRow.getAttribute("StrtDtJcTrans"),
                                                                         currentRow.getAttribute("EndDtJcTrans"),
                                                                         currentRow.getAttribute("EmplIdDispTrans"),
                                                                         row.getAttribute("RqmtAreaId"),
                                                                         row.getAttribute("WhId")
                            }).toString());
                            if (val != null && val == 1) {
                                retVal = true;
                            }
                        } catch (Exception e) {
                            System.out.println("Error at calling Function in  FN_MNF_GEN_JC_RC in AMIMPL " +
                                               e.getMessage());
                            retVal = false;
                            showFacesMsg("Unable to generate the Job Card", null, FacesMessage.SEVERITY_ERROR, null);
                        }
                    } else { // For All Operations

                        // For Selecting Work Station if All Operations is Selected
                        Object wsId = null;

                        ViewObjectImpl lOVOperationNmVO1 = this.getLOVOperationNmVO1();
                        lOVOperationNmVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
                        lOVOperationNmVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
                        lOVOperationNmVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
                        lOVOperationNmVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
                        lOVOperationNmVO1.setNamedWhereClauseParam("BindRcDocId", srcdocid);
                        lOVOperationNmVO1.executeQuery();
                        lOVOperationNmVO1.setRangeSize(-1);
                        //System.out.println("Print Query "+lOVOperationNmVO1.getQuery());
                        //System.out.println("Cld "+this.getCldIdValue()+" sloc "+this.getSlocIdValue()+" Ho "+this.getHoOrgIdValue()+" Org "+this.getOrgIdValue()+"Src "+srcdocid);
                        Row[] allRowsInRange = lOVOperationNmVO1.getAllRowsInRange();
                        //System.out.println("All Rows in Range length is "+allRowsInRange.length);
                        try {
                            for (int i = 0; i < allRowsInRange.length; i++) {
                                /* p_cld_id     VARCHAR2,
                                p_sloc_id    NUMBER,
                                p_ho_org_id  VARCHAR2,
                                p_org_id     VARCHAR2,
                                p_src_doc_id VARCHAR2,         ---------MPP OR PDO ID  hex id for 26001, 26002
                                p_src_type   VARCHAR2,         ---------APPLICATION DOCUMENT ID OF PDO OR MPP 26002,26001
                                p_doc_dt     DATE,         -------------DATE FOR WHICH JOB CARD OR ROUTE CARD NEED TO BE CREATED
                                p_usr_id     NUMBER,         -----------USER ID
                                p_usr_dt     DATE,          ------------USER CREATE DATE
                                p_mode       NUMBER ,         -----'JC' for job card,'RC' for route card
                                P_OP_doc_ID      VARCHAR2 DEFAULT NULL,-----OPERATION ID FOR WHICH JOB CARD NEED TO BE GENERATED IN
                                                                    -- CASE OF ROUTE CARD IT WILLL BE NULL
                                P_OP_SR_NO      NUMBER DEFAULT NULL,----SERIAL  NO OF OPERATION
                                p_outpt_itm_id  VARCHAR2,           ----OPERATION OUTPUT ITEM ID
                                p_outpt_itm_qty NUMBER,           ------OPERATION OUTPUT ITEM QUANTITY
                                p_fy_id         NUMBER,          -------FINACIAL YEAR ID
                                p_RMRK          VARCHAR2,            ---REMARKa
                                p_shift_id      VARCHAR2,            ---SHIFT FOR JC/RC
                                p_wc_id         VARCHAR2,            ---WC FOR JC/RC
                                p_ws_id         VARCHAR2,            ---WS FOR JC/RC
                                p_LOC_TYPE      NUMBER,            -----LOCATION TYPE
                                p_strt_dt       DATE,            -------START TIME OF JC/RC
                                p_end_dt        DATE,             ------END TIME OF JC/RC
                                p_EMP_ID        NUMBER
                                p_RQMT_AREA_ID  NUMBER ,      ----------rEQIREMENT AREA ID
                                p_WH_ID         VARCHAR2      ----------WAREHOUSE ID*/
                                if (allRowsInRange[i].getAttribute("WsId") != null) {
                                    wsId = allRowsInRange[i].getAttribute("WsId");
                                } else {
                                    if (currentRow.getAttribute("WorkStationIdDispTrans") != null) {
                                        wsId = currentRow.getAttribute("WorkStationIdDispTrans");
                                    }
                                }
                                val =
                                    Integer.parseInt(this.callStoredFunction(Types.INTEGER,
                                                                             "MNF.FN_MNF_GEN_JC_RC(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                                             this.getCldIdValue(),
                                                                             this.getSlocIdValue(),
                                                                             this.getHoOrgIdValue(),
                                                                             this.getOrgIdValue(), srcdocid, 26003,
                                                                             row.getAttribute("DocDt"),
                                                                             allRowsInRange[i].getAttribute("UsrIdCreate"),
                                                                             new Timestamp(System.currentTimeMillis()),
                                                                             105,
                                                                             allRowsInRange[i].getAttribute("OpId"),
                                                                             allRowsInRange[i].getAttribute("OpSrNo"),
                                                                             allRowsInRange[i].getAttribute("OutptItmId"),
                                                                             allRowsInRange[i].getAttribute("OutptItmQty"),
                                                                             row.getAttribute("FyId"),
                                                                             currentRow.getAttribute("OpRmrkJcTrans"),
                                                                             currentRow.getAttribute("ShiftIdDispTrans"),
                                                                             allRowsInRange[i].getAttribute("WcId"),
                                                                             wsId,
                                                                             allRowsInRange[i].getAttribute("OpLocType"),
                                                                             currentRow.getAttribute("StrtDtJcTrans"),
                                                                             currentRow.getAttribute("EndDtJcTrans"),
                                                                             currentRow.getAttribute("EmplIdDispTrans"),
                                                                             row.getAttribute("RqmtAreaId"),
                                                                             row.getAttribute("WhId")
                                }).toString());
                            }
                            if (val != null && val == 1) {
                                retVal = true;
                            }

                        } catch (Exception e) {
                            System.out.println("Error at calling Function in  FN_MNF_GEN_JC_RC in AMIMPL " +
                                               e.getMessage());
                            retVal = false;
                            showFacesMsg("Unable to generate the Job Card", null, FacesMessage.SEVERITY_ERROR, null);
                        }
                    }
                } else {
                    showFacesMsg("Unable to generate the Job Card", null, FacesMessage.SEVERITY_ERROR, null);
                }
            }
        }
        this.getMnfRcVO().executeQuery();
        return retVal;
    }

    public void ChkRcBasisVcl(Integer val) {
        if (val != null) {
            ViewObjectImpl impl = this.getMnfRcSrcVO1();
            MnfRcSrcVORowImpl s = (MnfRcSrcVORowImpl) impl.getCurrentRow();
            s.getLOVSourceDocTypeVO1();
        }
    }

    /*--------------------------Function for get lot number-----------------------*/
    public String GetlotNo() {
        ViewObjectImpl lotImpl = this.getMnfRcVO();
        Row lotRow = lotImpl.getCurrentRow();
        Object rVal;
        try {
            rVal = callStoredFunction(VARCHAR, "MNF.FN_MNF_GET_LOT_NO(?,?,?,?,?)", new Object[] {
                                      lotRow.getAttribute("CldId"), lotRow.getAttribute("SlocId"),
                                      lotRow.getAttribute("OrgId"), lotRow.getAttribute("WhId"),
                                      //   lotRow.getAttribute("ActOutptItmQty")
                                      lotRow.getAttribute("OutptItmId")
            });
            if (rVal != null) {
                System.out.println("Value of Validity" + rVal);
                return rVal.toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        showFacesMsg("Error while fetching user work flow details", null, FacesMessage.SEVERITY_ERROR, null);
        return "0";
    }
    int itemMovementType = 0;
    /*-------------------------------LOT Entry for output Item-----------------------*/
    public void AddLotEntry(String CldId, String OrgId, String HoOrgId, Integer SlocId, String lotId, String lotQty,
                            Integer UserId) {
        ViewObjectImpl stkImpl = this.getMnfRcItmStkVOLot();
        /// ViewObjectImpl opItm = this.getMnfRcOpOutputItmVO1();
        //opItm.executeQuery();

        //RowQualifier rq = new RowQualifier(opItm);
        /* rq.setWhereClause("SlocId=" + SlocId + " and CldId='" + CldId + "' and OrgId='" +
                          OrgId + "' and HoOrgId='" + HoOrgId + "' and ItmId='" +
                          this.getMnfRcVO().getCurrentRow().getAttribute("OutptItmId") + "' and DocId= '"+this.getMnfRcVO().getCurrentRow().getAttribute("DocId")+"'");

        rq.setWhereClause("SlocId = " + getSlocIdValue() + " and CldId ='" + getCldIdValue() + "' and OrgId ='" +
                          getOrgIdValue() + "' and HoOrgId ='" + getHoOrgIdValue() + "' and ItmId='" +
                          this.getMnfRcVO().getCurrentRow().getAttribute("OutptItmId").toString() + "' and DocId = '" +
                          this.getMnfRcVO().getCurrentRow().getAttribute("DocId").toString() +"' and ItmType = " + 67);

        System.out.println(rq.getExprStr());*/

        ViewObjectImpl opItm = this.getLOVGetOpItmForLotVO1();
        opItm.setNamedWhereClauseParam("BindCldId", getCldIdValue());
        opItm.setNamedWhereClauseParam("BindHoOrgID", getHoOrgIdValue());
        opItm.setNamedWhereClauseParam("BindOrgId", getOrgIdValue());
        opItm.setNamedWhereClauseParam("BindSlocId", getSlocIdValue());
        opItm.setNamedWhereClauseParam("BindDocId", this.getMnfRcVO().getCurrentRow().getAttribute("DocId").toString());
        opItm.setNamedWhereClauseParam("BindItmId",
                                       this.getMnfRcVO().getCurrentRow().getAttribute("OutptItmId").toString());

        opItm.executeQuery();

        Row allRowsInRange[] =
            opItm.getFilteredRows("ItmId", this.getMnfRcVO().getCurrentRow().getAttribute("OutptItmId").toString());

        // System.out.println("Total rows Count :" + allRowsInRange.length);
        String pdoId =
            getOutputItemPdoId(allRowsInRange[0].getAttribute("ItmId").toString(),
                               this.getMnfRcVO().getCurrentRow().getAttribute("DocId").toString(),
                               allRowsInRange[0].getAttribute("OpId").toString());

        // System.out.println("Pdo id in case of GPP " + pdoId);
        //   itemMovementType =   (Integer) this.getMnfRcItmStkVOLot().getCurrentRow().getAttribute("ItmMvmtType");
        // System.out.println("NISHAA=========AAA");
        if (allRowsInRange.length > 0) {
            // stkImpl.getCurrentRow().remove();
            //  Row CR = stkImpl.createRow();
            Row CR = stkImpl.getCurrentRow();
            CR.setAttribute("CldId", getCldIdValue());
            CR.setAttribute("DocId", this.getMnfRcVO().getCurrentRow().getAttribute("DocId"));
            CR.setAttribute("HoOrgId", getHoOrgIdValue());
            CR.setAttribute("ItmId", allRowsInRange[0].getAttribute("ItmId"));
            CR.setAttribute("ItmType", 67); // should be change
            CR.setAttribute("ItmUom", allRowsInRange[0].getAttribute("ItmUom"));
            CR.setAttribute("LotId", lotId);
            CR.setAttribute("OpId", allRowsInRange[0].getAttribute("OpId"));
            CR.setAttribute("OpSrNo", allRowsInRange[0].getAttribute("OpSrNo"));
            CR.setAttribute("OrgId", getOrgIdValue());
            if (Integer.parseInt(this.getMnfRcVO().getCurrentRow().getAttribute("RcBasis").toString()) == 91) {
                CR.setAttribute("PdoId", pdoId);
            } else {
                CR.setAttribute("PdoId", this.getMnfRcSrcVO1().getCurrentRow().getAttribute("DocIdSrc"));
            }
            CR.setAttribute("SlocId", getSlocIdValue());
            CR.setAttribute("SrNo", 0);
            CR.setAttribute("TotQty", lotQty);
            CR.setAttribute("UsrIdCreate", getUsrId());
            CR.setAttribute("UsrIdCreateDt", new Timestamp(System.currentTimeMillis()));
            // CR.setAttribute("ItmMvmtType", 123);
            //  stkImpl.insertRow(CR);
            stkImpl.setCurrentRow(CR);
            this.getDBTransaction().postChanges();
        }
    }

    private String getOutputItemPdoId(String itemId, String docId, String opId) {

        ViewObjectImpl voVal = this.getMnfRcOpItmVO1();
        voVal.executeQuery();
        RowQualifier rq = new RowQualifier(voVal);
        rq.setWhereClause("SlocId=" + getSlocIdValue() + " and CldId='" + getCldIdValue() + "' and OrgId='" +
                          getOrgIdValue() + "' and HoOrgId='" + getHoOrgIdValue() + "' and DocId='" + docId +
                          "' and ItmId='" + itemId + "' and  OpId='" + opId + "'");
        System.out.println(rq.getExprStr());
        Row fltrdrow[] = voVal.getFilteredRows(rq);
        System.out.println("hello------------" + fltrdrow.length);
        if (fltrdrow.length > 0) {
            return fltrdrow[0].getAttribute("PdoId").toString();
        }
        return null;
    }

    public void AddSerialLotEntry(String lotId, String lotQty) {
        ViewObjectImpl stkImpl = this.getMnfRcItmStkVOSerial();

        ViewObjectImpl opItm = this.getLOVGetOpItmForLotVO1();
        opItm.setNamedWhereClauseParam("BindCldId", getCldIdValue());
        opItm.setNamedWhereClauseParam("BindHoOrgID", getHoOrgIdValue());
        opItm.setNamedWhereClauseParam("BindOrgId", getOrgIdValue());
        opItm.setNamedWhereClauseParam("BindSlocId", getSlocIdValue());
        opItm.setNamedWhereClauseParam("BindDocId", this.getMnfRcVO().getCurrentRow().getAttribute("DocId").toString());
        opItm.setNamedWhereClauseParam("BindItmId",
                                       this.getMnfRcVO().getCurrentRow().getAttribute("OutptItmId").toString());

        opItm.executeQuery();

        Row allRowsInRange[] =
            opItm.getFilteredRows("ItmId", this.getMnfRcVO().getCurrentRow().getAttribute("OutptItmId").toString());

        System.out.println("Total rows Count :" + allRowsInRange.length);

        //itemMovementType =   (Integer) this.getMnfRcItmStkVOLot().getCurrentRow().getAttribute("ItmMvmtType");
        System.out.println("Inside Add Serial Lot Entry");
        if (allRowsInRange.length > 0) {
            //  Row CR = stkImpl.createRow();
            Row CR = stkImpl.getCurrentRow();
            CR.setAttribute("CldId", getCldIdValue());
            CR.setAttribute("DocId", this.getMnfRcVO().getCurrentRow().getAttribute("DocId"));
            CR.setAttribute("HoOrgId", getHoOrgIdValue());
            CR.setAttribute("ItmId", allRowsInRange[0].getAttribute("ItmId"));
            CR.setAttribute("ItmType", 67); // should be change
            CR.setAttribute("ItmUom", allRowsInRange[0].getAttribute("ItmUom"));
            CR.setAttribute("LotId", lotId);
            CR.setAttribute("OpId", allRowsInRange[0].getAttribute("OpId"));
            CR.setAttribute("OpSrNo", allRowsInRange[0].getAttribute("OpSrNo"));
            CR.setAttribute("OrgId", getOrgIdValue());
            CR.setAttribute("PdoId", this.getMnfRcSrcVO1().getCurrentRow().getAttribute("DocIdSrc"));
            CR.setAttribute("SlocId", getSlocIdValue());
            CR.setAttribute("SrNo", 0);
            CR.setAttribute("TotQty", lotQty);
            CR.setAttribute("UsrIdCreate", getUsrId());
            CR.setAttribute("UsrIdCreateDt", new Timestamp(System.currentTimeMillis()));
            //  stkImpl.insertRow(CR);
            // stkImpl.setCurrentRow(CR);
            this.getDBTransaction().postChanges();
        }
    }


    /*----------------------------------Serial Entry for Output Item---------------------------*/
    public void AddSerialEntry(String lotId, String serial) {

        /*  ViewObjectImpl stklotImpl = this.getMnfRcItmStkVOLot();

        if(stklotImpl.getRowCount()>0)
        {
            RowSetIterator row = stklotImpl.createRowSetIterator(null);
                       while(row.hasNext()){
                           row.next();
                            row.removeCurrentRow();
                       }

        } */
        //By Nisha for scrap cycle.
        // ViewObjectImpl stkImpl = this.getMnfRcItmStkVOSerial();
        ViewObjectImpl stkImpl = this.getMnfRcItmStkSrVO1();
        Row CR = stkImpl.createRow();
        // System.out.println("Row created for serial item");
        // CR.setAttribute("CldId", this.getMnfRcItmStkVOLot().getCurrentRow().getAttribute("CldId"));
        CR.setAttribute("CldId", getCldIdValue());
        CR.setAttribute("DocId", this.getMnfRcItmStkVOLot().getCurrentRow().getAttribute("DocId"));
        // CR.setAttribute("HoOrgId", this.getMnfRcItmStkVOLot().getCurrentRow().getAttribute("HoOrgId"));
        CR.setAttribute("HoOrgId", getHoOrgIdValue());
        CR.setAttribute("ItmId", this.getMnfRcItmStkVOLot().getCurrentRow().getAttribute("ItmId"));
        CR.setAttribute("ItmType", this.getMnfRcItmStkVOLot().getCurrentRow().getAttribute("ItmType"));
        CR.setAttribute("ItmUom", this.getMnfRcItmStkVOLot().getCurrentRow().getAttribute("ItmUom"));
        CR.setAttribute("LotId", lotId);
        CR.setAttribute("OpId", this.getMnfRcItmStkVOLot().getCurrentRow().getAttribute("OpId"));
        CR.setAttribute("OpSrNo", this.getMnfRcItmStkVOLot().getCurrentRow().getAttribute("OpSrNo"));
        CR.setAttribute("OrgId", this.getMnfRcItmStkVOLot().getCurrentRow().getAttribute("OrgId"));
        CR.setAttribute("PdoId", this.getMnfRcItmStkVOLot().getCurrentRow().getAttribute("PdoId"));
        //  CR.setAttribute("SlocId", this.getMnfRcItmStkVOLot().getCurrentRow().getAttribute("SlocId"));
        CR.setAttribute("SlocId", getSlocIdValue());
        CR.setAttribute("SrNo", serial);
        CR.setAttribute("TotQty", 1);
        // CR.setAttribute("UsrIdCreate", this.getMnfRcItmStkVOLot().getCurrentRow().getAttribute("UsrIdCreate"));
        CR.setAttribute("UsrIdCreate", getUsrId());
        CR.setAttribute("UsrIdCreateDt", new Timestamp(System.currentTimeMillis()));
        // CR.setAttribute("ItmMvmtType", this.getMnfRcItmStkVOLot().getCurrentRow().getAttribute("ItmMvmtType"));
        stkImpl.insertRow(CR);
        // stkImpl.setCurrentRow(CR);
        stkImpl.executeQuery();
        this.getDBTransaction().postChanges();
    }

    /*--------------------------------Allow Lot Id Editable-----------------------------------*/
    public String AllowLotIdEditable(String cld_id, Integer sloc_id, String org_id) {
        Object retval;
        try {
            retval = callStoredFunction(VARCHAR, "mm.mm_chk_org_prf(?,?,?,?)", new Object[] {
                                        cld_id, sloc_id, org_id, "AUTO_LOT_GEN" });
            if (retval != null) {
                System.out.println("Value in Stk Point :" + retval);
                return retval.toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        showFacesMsg("Error while fetching user work flow details", null, FacesMessage.SEVERITY_ERROR, null);
        return "0";
    }

    /*------------------------------------Check output Item Serialized----------------------------*/
    public String ChkOutputItmSerialized() {
        ViewObjectImpl chkSer = this.getLOVChkItmSerializedVO1();
        chkSer.setNamedWhereClauseParam("BindCldId", this.getMnfRcVO().getCurrentRow().getAttribute("CldId"));
        chkSer.setNamedWhereClauseParam("BindHoOrgId", this.getMnfRcVO().getCurrentRow().getAttribute("HoOrgId"));
        chkSer.setNamedWhereClauseParam("BindItmId", this.getMnfRcVO().getCurrentRow().getAttribute("OutptItmId"));
        chkSer.setNamedWhereClauseParam("BindSlocId", this.getMnfRcVO().getCurrentRow().getAttribute("SlocId"));
        chkSer.executeQuery();
        Row[] allRowsInRange = chkSer.getAllRowsInRange();
        System.out.println("Count is : " + allRowsInRange.length);
        if (allRowsInRange.length > 0) {
            Object a = allRowsInRange[0].getAttribute("SerializedFlg");
            String Ser = (a == null ? null : a.toString());
            return Ser;
        }
        return "0";
    }

    public String ChkItmSerialized(String ItmId) {
        ViewObjectImpl chkSer = this.getLOVChkItmSerializedVO1();
        chkSer.setNamedWhereClauseParam("BindCldId", this.getMnfRcVO().getCurrentRow().getAttribute("CldId"));
        chkSer.setNamedWhereClauseParam("BindHoOrgId", this.getMnfRcVO().getCurrentRow().getAttribute("HoOrgId"));
        chkSer.setNamedWhereClauseParam("BindItmId", ItmId);
        chkSer.setNamedWhereClauseParam("BindSlocId", this.getMnfRcVO().getCurrentRow().getAttribute("SlocId"));
        chkSer.executeQuery();
        Row[] allRowsInRange = chkSer.getAllRowsInRange();
        System.out.println("Count is : " + allRowsInRange.length);
        if (allRowsInRange.length > 0) {
            Object a = allRowsInRange[0].getAttribute("SerializedFlg");
            String Ser = (a == null ? null : a.toString());
            return Ser;
        }
        return "0";
    }

    /*------------------------Validation for check Lot Entry of Input Items-------------------------*/
    public String CheckforInputItmLot() {
        Row cR = this.getMnfRcVO().getCurrentRow();
        // RowSetIterator csItr = this.getMnfRcOpInputItmVO1().createRowSetIterator(null);
        RowSetIterator csItr = this.getMnfRcOpItmDispVO1().createRowSetIterator(null);
        RowSetIterator kritr = this.getMnfRcOpOutputItmVO1().createRowSetIterator(null);
        ArrayList<String> al = new ArrayList<String>();
        ArrayList<String> outItm = new ArrayList<String>();
        while (csItr.hasNext()) {
            Row nxt = csItr.next();
            Object itmId = nxt.getAttribute("ItmId");
            //Nisha modified on 21-sep-2015
            if (Integer.parseInt(nxt.getAttribute("ItmType").toString()) == 67 ||
                Integer.parseInt(nxt.getAttribute("ItmType").toString()) == 66 ||
                Integer.parseInt(nxt.getAttribute("ItmType").toString()) == 65) {
                outItm.add(itmId.toString());
            } else {
                al.add(itmId.toString());
            }
        }
        csItr.closeRowSetIterator();
        System.out.println("Size before" + al.size());

        Iterator<String> iterator = outItm.listIterator();

        while (iterator.hasNext()) {
            Object itm = iterator.next();
            //Object itm = nt.getAttribute("ItmId");
            al.remove(itm);
        }
        RowSetIterator csItr1 = this.getMnfRcOpItmDispVO1().createRowSetIterator(null);
        while (csItr1.hasNext()) {
            Row nxt = csItr1.next();
            Object itmId = nxt.getAttribute("ItmId");
            System.out.println("item is " + itmId);
            if (Integer.parseInt(nxt.getAttribute("ItmType").toString()) == 62 &&
                nxt.getAttribute("ConsmptnFlg").toString().equals("N")) {
                System.out.println("---" + itmId);
                al.remove(itmId);
            }
        }
        csItr1.closeRowSetIterator();
        System.out.println("Size after" + al.size());
        for (String val : al) {
            System.out.println("Name of Items==========================" + val.toString());
            ViewObjectImpl voVal = this.getMnfRcOpItmLotVO2();
            voVal.executeQuery();
            RowQualifier rq = new RowQualifier(voVal);
            rq.setWhereClause("SlocId=" + cR.getAttribute("SlocId") + " and CldId='" + cR.getAttribute("CldId") +
                              "' and OrgId='" + cR.getAttribute("OrgId") + "' and HoOrgId='" +
                              cR.getAttribute("HoOrgId") + "' and DocId='" + cR.getAttribute("DocId") +
                              "' and ItmId='" + val + "'");
            Row fltrdrow[] = voVal.getFilteredRows(rq);
            System.out.println("Value find in filterrow ------------" + fltrdrow.length);
            if (fltrdrow.length <= 0) {
                ViewObjectImpl il = this.getLOVgetItemNmVO1();
                il.setNamedWhereClauseParam("BindCldId", cR.getAttribute("CldId"));
                il.setNamedWhereClauseParam("BindHoOrgId", cR.getAttribute("HoOrgId"));
                il.setNamedWhereClauseParam("BindItemId", val);
                il.setNamedWhereClauseParam("BindSlocId", cR.getAttribute("SlocId"));
                il.executeQuery();
                Row[] aR = il.getAllRowsInRange();
                if (aR.length > 0) {
                    return aR[0].getAttribute("ItmDesc").toString();
                }
            }
        }
        return "checked";
    }

    /*----------------------------Validate Source DOc Id-------------------------*/

    public String checkSourceDocIdValidate(String SrcDispId) {
        String PdoDocId = null;
        Row cR = this.getMnfRcVO().getCurrentRow();
        ArrayList<String> al = new ArrayList<String>();
        ViewObjectImpl voImpl = this.getLOVgetMnfJcSrcVO1();
        voImpl.executeQuery();
        RowQualifier rq = new RowQualifier(voImpl);
        rq.setWhereClause("SlocId=" + cR.getAttribute("SlocId") + " and CldId='" + cR.getAttribute("CldId") +
                          "' and OrgId='" + cR.getAttribute("OrgId") + "' and HoOrgId='" + cR.getAttribute("HoOrgId") +
                          "'");
        Row fltrdrow[] = voImpl.getFilteredRows(rq);
        for (int i = 0; i < fltrdrow.length; ++i) {
            al.add(fltrdrow[i].getAttribute("DocIdSrc").toString());
        }
        ViewObjectImpl il = this.getLOVGetMnfPdoVO1();
        il.setNamedWhereClauseParam("CldIdBind", cR.getAttribute("CldId"));
        il.setNamedWhereClauseParam("HoOrgIdBind", cR.getAttribute("HoOrgId"));
        il.setNamedWhereClauseParam("OrgIdBind", cR.getAttribute("OrgId"));
        il.setNamedWhereClauseParam("SlocIdBind", cR.getAttribute("SlocId"));
        il.setNamedWhereClauseParam("PdoIdBind", SrcDispId);
        il.executeQuery();
        Row[] aR = il.getAllRowsInRange();
        if (aR.length > 0) {
            PdoDocId = aR[0].getAttribute("DocId").toString();
        }
        if (al.contains(PdoDocId) && cR.getAttribute("RcBasis") == 92) {
            return "Y";
        } else {
            return "N";
        }
    }

    /**
     * Container's getter for AllItemSearchDual1.
     * @return AllItemSearchDual1
     */
    public ViewObjectImpl getAllItemSearchDualVO1() {
        return (ViewObjectImpl) findViewObject("AllItemSearchDualVO1");
    }

    /**
     * Container's getter for MnfGenerateJcDual1.
     * @return MnfGenerateJcDual1
     */
    public ViewObjectImpl getMnfGenerateJcDualVO1() {
        // stkStatuspdate();
        return (ViewObjectImpl) findViewObject("MnfGenerateJcDualVO1");

    }

    /**
     * Container's getter for LOVRequirementId1.
     * @return LOVRequirementId1
     */
    public ViewObjectImpl getLOVRequirementIdVO1() {
        return (ViewObjectImpl) findViewObject("LOVRequirementIdVO1");
    }

    /**
     * Container's getter for LOVOperationNm1.
     * @return LOVOperationNm1
     */
    public ViewObjectImpl getLOVOperationNmVO1() {
        return (ViewObjectImpl) findViewObject("LOVOperationNmVO1");
    }

    /**
     * Function which tells whether to edit Work Station or Not
     */
    public String ChkAllowWorkStationEntryOrNot() {
        String retVal = "N";
        try {
            retVal = this.callStoredFunction(Types.VARCHAR, "MNF.FN_MNF_CHK_ORG_PRF(?,?,?,?)", new Object[] {
                                             this.getCldIdValue(), this.getSlocIdValue(), this.getOrgIdValue(),
                                             "ALLOW_JC_WS"
            }).toString();


        } catch (Exception e) {
            System.out.println("ERROR IN CALLING FUNCTION FN_MNF_CHK_ORG_PRF1 at AMIMPL :" + e.getMessage());
        }

        return retVal;
    }

    /**
     * Container's getter for MnfRcOpItm1.
     * @return MnfRcOpItm1
     */
    public ViewObjectImpl getMnfRcOpItmCoOrByProductsVO1() {
        return (ViewObjectImpl) findViewObject("MnfRcOpItmCoOrByProductsVO1");
    }

    /**
     * Container's getter for MnfRcToMnfRcOpItmDispVL2.
     * @return MnfRcToMnfRcOpItmDispVL2
     */
    public ViewLinkImpl getMnfRcToMnfRcOpItmDispVL2() {
        return (ViewLinkImpl) findViewLink("MnfRcToMnfRcOpItmDispVL2");
    }

    /**
     * Container's getter for LOVItemFromPrf1.
     * @return LOVItemFromPrf1
     */
    public ViewObjectImpl getLOVItemFromPrfVO1() {
        return (ViewObjectImpl) findViewObject("LOVItemFromPrfVO1");
    }

    /**
     * Container's getter for LOVOpId1.
     * @return LOVOpId1
     */
    public ViewObjectImpl getLOVOpIdVO1() {
        return (ViewObjectImpl) findViewObject("LOVOpIdVO1");
    }

    /**
     * Container's getter for MnfRcSrcVO1.
     * @return MnfRcSrcVO1
     */
    public ViewObjectImpl getMnfRcSrcVO1() {
        return (ViewObjectImpl) findViewObject("MnfRcSrcVO1");
    }

    /**
     * Container's getter for MnfRcToMnfRcSrcVL1.
     * @return MnfRcToMnfRcSrcVL1
     */
    public ViewLinkImpl getMnfRcToMnfRcSrcVL1() {
        return (ViewLinkImpl) findViewLink("MnfRcToMnfRcSrcVL1");
    }

    /**
     * Container's getter for LOVPdoIdVO1.
     * @return LOVPdoIdVO1
     */
    public ViewObjectImpl getLOVPdoIdVO1() {
        return (ViewObjectImpl) findViewObject("LOVPdoIdVO1");
    }

    /**
     * Container's getter for LOVOutputItmNmVO1.
     * @return LOVOutputItmNmVO1
     */
    public ViewObjectImpl getLOVOutputItmNmVO1() {
        return (ViewObjectImpl) findViewObject("LOVOutputItmNmVO1");
    }

    /**
     * Container's getter for LOVItemOutputNmVO1.
     * @return LOVItemOutputNmVO1
     */
    public ViewObjectImpl getLOVItemOutputNmVO1() {
        return (ViewObjectImpl) findViewObject("LOVItemOutputNmVO1");
    }

    /**
     * Container's getter for LOVSourceDispIdVO1.
     * @return LOVSourceDispIdVO1
     */
    public ViewObjectImpl getLOVSourceDispIdVO1() {
        return (ViewObjectImpl) findViewObject("LOVSourceDispIdVO1");
    }

    /**
     * Container's getter for MnfRcItmStkVO1.
     * @return MnfRcItmStkVO1
     */
    public ViewObjectImpl getMnfRcItmStkVOLot() {
        return (ViewObjectImpl) findViewObject("MnfRcItmStkVOLot");
    }

    /**
     * Container's getter for MnfRcToMnfRcItmStkVL1.
     * @return MnfRcToMnfRcItmStkVL1
     */
    public ViewLinkImpl getMnfRcToMnfRcItmStkVL1() {
        return (ViewLinkImpl) findViewLink("MnfRcToMnfRcItmStkVL1");
    }

    /**
     * Container's getter for MnfRcItmStkVO2.
     * @return MnfRcItmStkVO2
     */
    public ViewObjectImpl getMnfRcItmStkVOSerial() {
        return (ViewObjectImpl) findViewObject("MnfRcItmStkVOSerial");
    }

    /**
     * Container's getter for MnfRcToMnfRcItmStkVL2.
     * @return MnfRcToMnfRcItmStkVL2
     */
    public ViewLinkImpl getMnfRcToMnfRcItmStkVL2() {
        return (ViewLinkImpl) findViewLink("MnfRcToMnfRcItmStkVL2");
    }

    /**
     * Container's getter for LOVChkItmSerializedVO1.
     * @return LOVChkItmSerializedVO1
     */
    public ViewObjectImpl getLOVChkItmSerializedVO1() {
        return (ViewObjectImpl) findViewObject("LOVChkItmSerializedVO1");
    }


    /**
     * Container's getter for MnfItmStkBinRqmtVwVO1.
     * @return MnfItmStkBinRqmtVwVO1
     */
    public MnfItmStkBinRqmtVwVOImpl getMnfItmStkBinRqmtVwVO1() {
        return (MnfItmStkBinRqmtVwVOImpl) findViewObject("MnfItmStkBinRqmtVwVO1");
    }

    /**
     * Container's getter for MnfRcOpItmToMnfItmStkBinRqmtVwVL1.
     * @return MnfRcOpItmToMnfItmStkBinRqmtVwVL1
     */
    public ViewLinkImpl getMnfRcOpItmToMnfItmStkBinRqmtVwVL1() {
        return (ViewLinkImpl) findViewLink("MnfRcOpItmToMnfItmStkBinRqmtVwVL1");
    }

    /**
     * Container's getter for MnfItmStkLotRqmtVwVO1.
     * @return MnfItmStkLotRqmtVwVO1
     */
    public MnfItmStkLotRqmtVwVOImpl getMnfItmStkLotRqmtVwVO1() {
        return (MnfItmStkLotRqmtVwVOImpl) findViewObject("MnfItmStkLotRqmtVwVO1");
    }

    /**
     * Container's getter for MnfRcOpItmToMnfItmStkLotRqmtVwVL1.
     * @return MnfRcOpItmToMnfItmStkLotRqmtVwVL1
     */
    public ViewLinkImpl getMnfRcOpItmToMnfItmStkLotRqmtVwVL1() {
        return (ViewLinkImpl) findViewLink("MnfRcOpItmToMnfItmStkLotRqmtVwVL1");
    }

    /**
     * Container's getter for MnfItmStkSrRqmtVwVO1.
     * @return MnfItmStkSrRqmtVwVO1
     */
    public MnfItmStkSrRqmtVwVOImpl getMnfItmStkSrRqmtVwVO1() {
        return (MnfItmStkSrRqmtVwVOImpl) findViewObject("MnfItmStkSrRqmtVwVO1");
    }

    /**
     * Container's getter for MnfRcOpItmToMnfItmStkSrRqmtVwVL1.
     * @return MnfRcOpItmToMnfItmStkSrRqmtVwVL1
     */
    public ViewLinkImpl getMnfRcOpItmToMnfItmStkSrRqmtVwVL1() {
        return (ViewLinkImpl) findViewLink("MnfRcOpItmToMnfItmStkSrRqmtVwVL1");
    }


    /**
     * Container's getter for LOVgetItemNmVO1.
     * @return LOVgetItemNmVO1
     */
    public ViewObjectImpl getLOVgetItemNmVO1() {
        return (ViewObjectImpl) findViewObject("LOVgetItemNmVO1");
    }

    /**
     * Container's getter for LOVgetMnfJcSrcVO1.
     * @return LOVgetMnfJcSrcVO1
     */
    public ViewObjectImpl getLOVgetMnfJcSrcVO1() {
        return (ViewObjectImpl) findViewObject("LOVgetMnfJcSrcVO1");
    }

    /**
     * Container's getter for LOVGetMnfPdoVO1.
     * @return LOVGetMnfPdoVO1
     */
    public ViewObjectImpl getLOVGetMnfPdoVO1() {
        return (ViewObjectImpl) findViewObject("LOVGetMnfPdoVO1");
    }

    public void deleteAttachFileRow(String path) {
        RowSetIterator rowSetIterator = null;
        try {
            //System.out.println("File path in AMimpl : " + path);
            String filePath = "";
            String fileNm = "", cldId = "", docId = "", horgId = "", orgId = "";
            int slocId = 1;
            ViewObjectImpl attch1 = this.getMnfRcAttchVO1();
            Row[] rows = attch1.getFilteredRows("AttchFlPath", path);
            System.out.println(rows.length);
            if (rows.length > 0) {
                fileNm = (String) rows[0].getAttribute("AttchFlNm");
                cldId = (String) rows[0].getAttribute("CldId");
                horgId = (String) rows[0].getAttribute("HoOrgId");
                orgId = (String) rows[0].getAttribute("OrgId");
                slocId = Integer.parseInt(rows[0].getAttribute("SlocId").toString());
                docId = (String) rows[0].getAttribute("DocId");
            }
            rowSetIterator = attch1.getRowSetIterator();
            Key key = new Key(new Object[] { fileNm, cldId, docId, horgId, orgId, slocId });
            Row[] ro = rowSetIterator.findByKey(key, 1);
            //System.out.println("Filtered Row : "+ro.length);
            Row row = rowSetIterator.findByKey(key, 1)[0];
            rowSetIterator.setCurrentRow(row);
            Row r = this.getMnfRcAttchVO1().getCurrentRow();
            filePath = (String) r.getAttribute("AttchFlPath");
            //System.out.println("Current Row File Path : "+filePath);
            filePath = (String) row.getAttribute("AttchFlPath");
            //System.out.println("Row File Path : "+filePath);
            File f = new File(filePath);
            if (f.exists()) {
                boolean success = f.delete();
                System.out.println("File Deleted");
            }
        } catch (Exception x) {

            System.err.format("%s: no such" + " file or directory%n", path);
        }
        rowSetIterator.removeCurrentRow();
    }

    /**
     * Container's getter for MnfRcOpItmLotVO2.
     * @return MnfRcOpItmLotVO2
     */
    public ViewObjectImpl getMnfRcOpItmLotVO2() {
        return (ViewObjectImpl) findViewObject("MnfRcOpItmLotVO2");
    }

    /**
     * Container's getter for LOVWsNameVO1.
     * @return LOVWsNameVO1
     */
    public ViewObjectImpl getLOVWsNameVO1() {
        return (ViewObjectImpl) findViewObject("LOVWsNameVO1");
    }

    /**
     * Container's getter for LOVDisplayShiftNameVO1.
     * @return LOVDisplayShiftNameVO1
     */
    public ViewObjectImpl getLOVDisplayShiftNameVO1() {
        return (ViewObjectImpl) findViewObject("LOVDisplayShiftNameVO1");
    }

    /**
     * Container's getter for LOVWcNameVO1.
     * @return LOVWcNameVO1
     */
    public ViewObjectImpl getLOVWcNameVO1() {
        return (ViewObjectImpl) findViewObject("LOVWcNameVO1");
    }

    /**
     * Container's getter for MnfRcOpItmVO2.
     * @return MnfRcOpItmVO2
     */
    public ViewObjectImpl getMnfRcOpOutputItmVO1() {
        return (ViewObjectImpl) findViewObject("MnfRcOpOutputItmVO1");
    }

    /**
     * Container's getter for MnfRcOpToMnfRcOpItmVL3.
     * @return MnfRcOpToMnfRcOpItmVL3
     */
    public ViewLinkImpl getMnfRcOpToMnfRcOpItmVL3() {
        return (ViewLinkImpl) findViewLink("MnfRcOpToMnfRcOpItmVL3");
    }

    /**
     * Container's getter for LOVGetOpItmForLotVO1.
     * @return LOVGetOpItmForLotVO1
     */
    public ViewObjectImpl getLOVGetOpItmForLotVO1() {
        return (ViewObjectImpl) findViewObject("LOVGetOpItmForLotVO1");
    }

    /**
     * To delete Lot stock entry if item is serialized
     * */
    public void deleteStkLot() {
        ViewObjectImpl stkImpl = this.getMnfRcItmStkVOLot();
        stkImpl.getCurrentRow().remove();
        //stkImpl.removeCurrentRow();
        stkImpl.executeQuery();

        //  getDBTransaction().commit();
    }

    /**
     * Container's getter for chkItemSerialCountVO1.
     * @return chkItemSerialCountVO1
     */
    public ViewObjectImpl getchkItemSerialCountVO1() {
        return (ViewObjectImpl) findViewObject("chkItemSerialCountVO1");
    }

    /**
     * To get count of serialized item in database for an item
     * */
    public Integer getSerializedItemCount(String serial, String itmId) {
        Integer val = 0;
        ViewObjectImpl impl = this.getchkItemSerialCountVO1();
        impl.setNamedWhereClauseParam("BindCldID", this.getCldIdValue());
        impl.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        impl.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        impl.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
        impl.setNamedWhereClauseParam("BindItmId", itmId);
        // this.getMnfRcVO().getCurrentRow().getAttribute("OutptItmId").toString());
        impl.setNamedWhereClauseParam("BindSrNo", serial);
        impl.executeQuery();
        Row[] row =
            // impl.getFilteredRows("ItmId", this.getMnfRcVO().getCurrentRow().getAttribute("OutptItmId").toString());
            impl.getFilteredRows("ItmId", itmId);
        if (row.length > 0) {

            return (Integer) row[0].getAttribute("Countserial");
        }
        return val;
    }

    /**
     * Container's getter for LOVOpDescVO1.
     * @return LOVOpDescVO1
     */
    public ViewObjectImpl getLOVOpDescVO1() {
        return (ViewObjectImpl) findViewObject("LOVOpDescVO1");
    }

    /**
     * Container's getter for DualOverHeadParamVO1.
     * @return DualOverHeadParamVO1
     */
    public ViewObjectImpl getDualOverHeadParamVO1() {
        return (ViewObjectImpl) findViewObject("DualOverHeadParamVO1");
    }

    /**
     * Container's getter for LOVRouteCardParamSetVO1.
     * @return LOVRouteCardParamSetVO1
     */
    public ViewObjectImpl getLOVRouteCardParamSetVO1() {
        return (ViewObjectImpl) findViewObject("LOVRouteCardParamSetVO1");
    }

    /**
     * Container's getter for LOVOverHeadParameterVO1.
     * @return LOVOverHeadParameterVO1
     */
    public ViewObjectImpl getLOVOverHeadParameterVO1() {
        return (ViewObjectImpl) findViewObject("LOVOverHeadParameterVO1");
    }

    /**
     * To Add Overhead Parameter t PDO..
     *
     * **/
    public void attachOverhead(String operation) {

        Row r = getDualOverHeadParamVO1().getCurrentRow();

        String parm_Id = r.getAttribute("ParameterId") != null ? r.getAttribute("ParameterId").toString() : "";
        String setparam = r.getAttribute("ParameterSetId") != null ? r.getAttribute("ParameterSetId").toString() : "";
        Number parmValue = (Number) r.getAttribute("Value");
        Integer parmBais = (Integer) r.getAttribute("Basis");
        // System.out.println("---- "+ parmBais);
        // String routeId = getMnfBomOp().getCurrentRow().getAttribute("RtId").toString();
        String doc_Id = r.getAttribute("DocId") != null ? r.getAttribute("DocId").toString() : "";
        Number opSr = new Number(1);

        //        removeAllParm(param);
        String newDlimitedDocId =
            (r.getAttribute("OperationId") == null ? "" : r.getAttribute("OperationId").toString());
        // System.out.println("Total Operation " +newDlimitedDocId);
        StringTokenizer newValueTokens = new StringTokenizer(newDlimitedDocId, ",");

        if (doc_Id != null && parm_Id != null) {
            while (newValueTokens.hasMoreTokens()) {
                String currentToken = (newValueTokens.nextToken().toString());
                // System.out.println("Op ID 0" + currentToken);
                opSr = getOprSrFromCurrOpr(currentToken);
                // System.out.println("Op " + opSr);
                removeAllOverheadParm(doc_Id, parm_Id, currentToken);
                //  System.out.println("Inserting");
                insertOprForParam(currentToken, parm_Id, setparam, parmValue, opSr, 39);
                //   System.out.println("added");
            }
        }
        // resetOverhead();
        setdualOverheadParam1(this.getCldIdValue(), this.getSlocIdValue(), this.getHoOrgIdValue(), this.getOrgIdValue(),
                              doc_Id);
    }

    /**
     * To get serail no of an operation.
     *@return number
     *
     * **/
    public Number getOprSrFromCurrOpr(String oprId) {

        Row[] a = getLOVOpIdVO1().getFilteredRows("OpId", oprId);
        Row r = null;
        if (a.length > 0) {
            // System.out.println("SRNO " + (Number) a[0].getAttribute("OpSrNo"));
            return (Number) a[0].getAttribute("OpSrNo");
        }
        return new Number(1);
    }

    /**
     * To remove existing overhead parameter
     * against an overhead parameter.
     *
     * **/
    public void removeAllOverheadParm(String doc_id, String parmId, String oprId) {
        //Assuming not many child rows. Can have better logic if child rows are large
        if (doc_id != null && parmId != null && oprId != null) {
            // System.out.println("1 ");
            RowSetIterator rtr = getMnfRcParamOverHeadVO1().createRowSetIterator(null);
            Row cr = null;
            while (rtr.hasNext()) {
                // System.out.println("2 ");
                cr = rtr.next();
                if (cr.getAttribute("DocId").toString().equalsIgnoreCase(doc_id) &&
                    cr.getAttribute("ParamId").toString().equalsIgnoreCase(parmId) &&
                    cr.getAttribute("OpId").toString().equalsIgnoreCase(oprId)) {
                    cr.remove();
                    // System.out.println("3 ");
                }
            }

            rtr.closeRowSetIterator();

        }

    }

    /**
     * Insert an operation to Overhead Parameter.
     *
     * **/
    public void insertOprForParam(String oprID, String param, String setparam, Number paramVal, Number opSr,
                                  Integer paramType) {

        // System.out.println(oprID + " Operation ID" );
        //opSr = getOprSrFromCurrOpr(oprID);
        Row docIdRow = getMnfRcParamOverHeadVO1().createRow();
        docIdRow.setAttribute("OpId", oprID);
        docIdRow.setAttribute("ParamId", param);
        docIdRow.setAttribute("ParamSetId", setparam);
        docIdRow.setAttribute("ParamType", paramType);
        docIdRow.setAttribute("ParamVal", paramVal);
        docIdRow.setAttribute("OpSrNo", getOprSrFromCurrOpr(oprID));
        getMnfRcParamOverHeadVO1().insertRow(docIdRow);
        getMnfRcParamOverHeadVO1().setCurrentRow(docIdRow);

    }

    /**
     * Container's getter for DualMachineDowntimeVO1.
     * @return DualMachineDowntimeVO1
     */
    public ViewObjectImpl getDualMachineDowntimeVO1() {
        return (ViewObjectImpl) findViewObject("DualMachineDowntimeVO1");
    }

    public void attachMachineDowntime() {

        Row r = getDualMachineDowntimeVO1().getCurrentRow();

        String parm_Id = r.getAttribute("RcParameterId") != null ? r.getAttribute("RcParameterId").toString() : "";
        String setparam =
            r.getAttribute("RcParameterSetId") != null ? r.getAttribute("RcParameterSetId").toString() : "";
        Number parmValue = (Number) r.getAttribute("RcValue");
        Integer parmBais = (Integer) r.getAttribute("RcBasis");
        // System.out.println("---- "+ parmBais);
        // String routeId = getMnfBomOp().getCurrentRow().getAttribute("RtId").toString();
        String doc_Id = r.getAttribute("RcDocId") != null ? r.getAttribute("RcDocId").toString() : "";
        oracle.jbo.domain.Timestamp startDt = (Timestamp) r.getAttribute("StartDt");
        oracle.jbo.domain.Timestamp endDt = (Timestamp) r.getAttribute("EndDate");
        String remarks = r.getAttribute("RcRemarks") != null ? r.getAttribute("RcRemarks").toString() : "";
        Number opSr = new Number(1);

        //        removeAllParm(param);
        String newDlimitedDocId =
            (r.getAttribute("RcOperationId") == null ? "" : r.getAttribute("RcOperationId").toString());
        System.out.println("Total Operation " + newDlimitedDocId);
        StringTokenizer newValueTokens = new StringTokenizer(newDlimitedDocId, ",");

        if (doc_Id != null && parm_Id != null) {
            while (newValueTokens.hasMoreTokens()) {
                String currentToken = (newValueTokens.nextToken().toString());
                System.out.println("Op ID 0" + currentToken);
                opSr = getOprSrFromCurrOpr(currentToken);
                System.out.println("Op " + opSr);
                removeMachineDownTime(doc_Id, parm_Id, currentToken);
                System.out.println("Inserting");
                insertOprForDownTimeParam(currentToken, parm_Id, setparam, parmValue, opSr, 40, startDt, endDt,
                                          remarks);
                System.out.println("added");
            }
        }
        // resetOverhead();
        setdualMachineDownTimeParam1(this.getCldIdValue(), this.getSlocIdValue(), this.getHoOrgIdValue(),
                                     this.getOrgIdValue(), doc_Id);
    }

    /**
     * Insert an operation to Overhead Parameter.
     *
     * **/
    public void insertOprForDownTimeParam(String oprID, String param, String setparam, Number paramVal, Number opSr,
                                          Integer paramType, Timestamp startDt, Timestamp endDt, String ParamRemark) {

        // System.out.println(oprID + " Operation ID" );
        //opSr = getOprSrFromCurrOpr(oprID);
        Row docIdRow = getMnfRcParamMceDownTimeVO1().createRow();
        docIdRow.setAttribute("OpId", oprID);
        docIdRow.setAttribute("ParamId", param);
        docIdRow.setAttribute("ParamSetId", setparam);
        docIdRow.setAttribute("ParamType", paramType);
        docIdRow.setAttribute("ParamVal", paramVal);
        docIdRow.setAttribute("OpSrNo", getOprSrFromCurrOpr(oprID));
        docIdRow.setAttribute("ParamRmrk", ParamRemark);
        docIdRow.setAttribute("StrtDt", startDt);
        docIdRow.setAttribute("EndDt", endDt);
        getMnfRcParamMceDownTimeVO1().insertRow(docIdRow);
        getMnfRcParamMceDownTimeVO1().setCurrentRow(docIdRow);

    }


    /**
     * To remove existing Machine parameter
     * against an Machine parameter.
     *
     * **/
    public void removeMachineDownTime(String doc_id, String parmId, String oprId) {
        //Assuming not many child rows. Can have better logic if child rows are large
        if (doc_id != null && parmId != null && oprId != null) {
            System.out.println("1 ");
            RowSetIterator rtr = getMnfRcParamMceDownTimeVO1().createRowSetIterator(null);
            Row cr = null;
            while (rtr.hasNext()) {
                System.out.println("2 ");
                cr = rtr.next();
                if (cr.getAttribute("DocId").toString().equalsIgnoreCase(doc_id) &&
                    cr.getAttribute("ParamId").toString().equalsIgnoreCase(parmId) &&
                    cr.getAttribute("OpId").toString().equalsIgnoreCase(oprId)) {
                    cr.remove();
                    System.out.println("3 ");
                }
            }

            rtr.closeRowSetIterator();

        }

    }

    /**
     * Container's getter for MnfRcOpQcParamVO1.
     * @return MnfRcOpQcParamVO1
     */
    public ViewObjectImpl getMnfRcOpQcParamVO1() {
        return (ViewObjectImpl) findViewObject("MnfRcOpQcParamVO1");
    }

    /**
     * Container's getter for MnfRcToMnfRcOpQcParamVL1.
     * @return MnfRcToMnfRcOpQcParamVL1
     */
    public ViewLinkImpl getMnfRcToMnfRcOpQcParamVL1() {
        return (ViewLinkImpl) findViewLink("MnfRcToMnfRcOpQcParamVL1");
    }

    /**
     * Container's getter for LOVQcParameterVO1.
     * @return LOVQcParameterVO1
     */
    public ViewObjectImpl getLOVQcParameterVO1() {
        return (ViewObjectImpl) findViewObject("LOVQcParameterVO1");
    }

    /**
     * Container's getter for LOVQcParamNameVO1.
     * @return LOVQcParamNameVO1
     */
    public ViewObjectImpl getLOVQcParamNameVO1() {
        return (ViewObjectImpl) findViewObject("LOVQcParamNameVO1");
    }

    /**
     * Container's getter for LOVOpOutputItemVO1.
     * @return LOVOpOutputItemVO1
     */
    public ViewObjectImpl getLOVOpOutputItemVO1() {
        return (ViewObjectImpl) findViewObject("LOVOpOutputItemVO1");
    }


    public boolean duplicateQcParameter(String shiftName, String itemNme) {
        RowSetIterator rSetIter = getMnfRcOpQcParamVO1().createRowSetIterator(null);
        Integer countVal = 0;
        if (shiftName != null) {
            while (rSetIter.hasNext()) {
                Row r = rSetIter.next();
                if ((shiftName.equals(r.getAttribute("TransQcParamter"))) &&
                    (itemNme.equals(r.getAttribute("TransItemName")))) {
                    System.out.println("1 Org Found : " + shiftName.equals(r.getAttribute("TransQcParamter")));
                    countVal = countVal + 1;
                }
            }
            rSetIter.closeRowSetIterator();
            Row currentRow = getMnfRcOpQcParamVO1().getCurrentRow();

            if ((shiftName.equals(currentRow.getAttribute("TransQcParamter"))) &&
                (itemNme.equals(currentRow.getAttribute("TransItemName")))) {
                System.out.println("2 Org Id Found : " + shiftName.equals(currentRow.getAttribute("TransQcParamter")));
                countVal = countVal - 1;
            }
        }
        return countVal == 1 ? true : false;
    }

    public void setItemAccordingToOperation(String opId) {
        String operationId = null;
        System.out.println("Attach op is :" + opId);
        Row[] wcRow = this.getLOVOpDescVO1().getFilteredRows("OpDesc", opId);
        if (wcRow.length > 0) {
            if (wcRow[0].getAttribute("OpDesc") != null) {
                operationId = wcRow[0].getAttribute("DocId").toString();
                System.out.println("operation Id is " + operationId);

            }
        }


        Row currentRow = this.getMnfRcOpQcParamVO1().getCurrentRow();

        // currentRow.setAttribute("PdoId", this.getMnfRcSrcVO1().getCurrentRow().getAttribute("DocIdSrc"));
        ViewObjectImpl impl = this.getLOVOpOutputItemVO1();
        impl.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        impl.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        impl.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        impl.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
        impl.setNamedWhereClauseParam("BindDocId", currentRow.getAttribute("DocId").toString());
        impl.setNamedWhereClauseParam("BindOpId", currentRow.getAttribute("OpId").toString());
        impl.executeQuery();
        System.out.println("SetITmacc" + impl.getRowCount());
        String itmId = null;
        Row[] allRowsInRange = impl.getAllRowsInRange();
        if (allRowsInRange.length > 0) {
            System.out.println("Item name from outputitemvo is : " + (String) allRowsInRange[0].getAttribute("ItmId"));
            // return (String)allRowsInRange[0].getAttribute("ItmDesc");
            itmId = (String) allRowsInRange[0].getAttribute("ItmId");
            currentRow.setAttribute("ItmId", allRowsInRange[0].getAttribute("ItmId"));
            currentRow.setAttribute("ItmType", allRowsInRange[0].getAttribute("ItmType"));
            currentRow.setAttribute("PdoId", allRowsInRange[0].getAttribute("PdoId"));
        }

        ViewObjectImpl Voimpl1 = this.getLOVQcParameterVO1();
        Voimpl1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        Voimpl1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        Voimpl1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
        Voimpl1.setNamedWhereClauseParam("BindItmId", itmId);
        Voimpl1.executeQuery();
        System.out.println("qcparamcount" + Voimpl1.getRowCount());
    }

    public void setSrcIdToQcParam() {
        Row currentRow = this.getMnfRcOpQcParamVO1().getCurrentRow();
        currentRow.setAttribute("PdoId", this.getMnfRcSrcVO1().getCurrentRow().getAttribute("DocIdSrc"));
    }

    /**
     * Container's getter for LOVItemFromPrfVO2.
     * @return LOVItemFromPrfVO2
     */
    public ViewObjectImpl getLOVItemFromPrfVO2() {
        return (ViewObjectImpl) findViewObject("LOVItemFromPrfVO2");
    }


    public Number chkgetYearFyId() {
        // EbizParams.getFyId(arg0, arg1, arg2)
        BigDecimal pdoFyId = new BigDecimal(0.0);
        try {
            pdoFyId = (BigDecimal) callStoredFunction(Types.NUMERIC, "APP.GET_ORG_FY_ID(?,?,?,?)", new Object[] {
                                                      this.getCldIdValue(), this.getOrgIdValue(),
                                                      new Timestamp(System.currentTimeMillis()), "FY"
            });
        } catch (NumberFormatException nfe) {
            // TODO: Add catch code
            nfe.printStackTrace();
        }

        Number data = new Number(0);
        try {
            data = new Number(pdoFyId);
        } catch (SQLException e) {
        }
        //System.out.println(" financial id   " + pdoFyId );
        return data;

    }

    /**
     * Container's getter for MnfRcOpQcParamVO2.
     * @return MnfRcOpQcParamVO2
     */
    public ViewObjectImpl getMnfRcOpQcParamVO2() {
        return (ViewObjectImpl) findViewObject("MnfRcOpQcParamVO2");
    }

    public String chkNmDuplicate(String val, String itm_id) {
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String ho_org_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        String org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        /*System.out.println("Value in AM "+val);
        ViewObjectImpl param = this.getLovTransQcNm1();
        param.setNamedWhereClauseParam("BindCldId", cld_id);
        param.setNamedWhereClauseParam("BindOrgId", org_id);
        param.setNamedWhereClauseParam("BindSlocId", sloc_id);
        param.executeQuery();
        Row[] parm = param.getFilteredRows("ParamNm", val);
        String paramId ="";
        if(parm.length>0){
            paramId = parm[0].getAttribute("ParamId").toString();
        } */

        ViewObjectImpl Voimpl1 = this.getLOVQcParamNameVO1();
        Voimpl1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        Voimpl1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        Voimpl1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
        //  Voimpl1.setNamedWhereClauseParam("BindItmId", itm_id);
        Voimpl1.executeQuery();

        Row[] parm = Voimpl1.getFilteredRows("ParamNm", val);
        String paramId = "";
        if (parm.length > 0) {
            paramId = parm[0].getAttribute("ParamId").toString();
        }

        ViewObjectImpl par = this.getMnfRcOpQcParamVO1();
        Row r = par.getCurrentRow();
        System.out.println("Param Id : " + val);
        ViewObjectImpl pa = this.getMnfRcOpQcParamVO2();
        RowQualifier rq = new RowQualifier(pa);
        rq.setWhereClause("CldId='" + cld_id + "' and SlocId=" + sloc_id + " and OrgId='" + org_id + "' and HoOrgId='" +
                          ho_org_id + "' and ParamId='" + paramId + "' and ItmId='" + itm_id + "' and DocId='" +
                          r.getAttribute("DocId").toString() + "'");
        //   System.out.println(rq.getExprStr());
        Row[] row = pa.getFilteredRows(rq);
        System.out.println(row.length);
        if (row.length > 1) {
            return "true";
        }
        return "false";
    }


    public Number stkStatuspdate() {
        // EbizParams.getFyId(arg0, arg1, arg2)

        String DocIdSrc = this.getMnfRcSrcVO1().getCurrentRow().getAttribute("DocIdSrc").toString();
        Integer DocIdSrcTyp =
            Integer.parseInt(this.getMnfRcSrcVO1().getCurrentRow().getAttribute("DocTypeSrc").toString());
        //   System.out.println(DocIdSrc + " " + DocIdSrcTyp);
        BigDecimal pdoFyId = new BigDecimal(0.0);
        try {
            pdoFyId = (BigDecimal) callStoredFunction(Types.NUMERIC, "MNF.fn_mnf_RC_to_src_back_upd_stat(?,?,?,?,?,?)", new Object[] {
                                                      this.getCldIdValue(), this.getSlocIdValue(),
                                                      this.getHoOrgIdValue(), this.getOrgIdValue(), DocIdSrc,
                                                      DocIdSrcTyp
            });
        } catch (NumberFormatException nfe) {
            // TODO: Add catch code
            nfe.printStackTrace();
        }

        Number data = new Number(0);
        try {
            data = new Number(pdoFyId);

        } catch (SQLException e) {
        }
        //  System.out.println(" financial id   " + pdoFyId);
        this.getDBTransaction().commit();
        return data;

    }

    /**
     * Container's getter for LOVRcSrcVO1.
     * @return LOVRcSrcVO1
     */
    public ViewObjectImpl getLOVRcSrcVO1() {
        return (ViewObjectImpl) findViewObject("LOVRcSrcVO1");
    }

    /**
     * To update a bal qty after an approval.
     *
     */
    public Number stkStatuspdate1(String cld, Integer slc, String ho, String org, String docId) {
        String DocIdSrc = null;
        Integer DocIdSrcTyp = 0;
        ViewObjectImpl Voimpl = this.getLOVRcSrcVO1();
        Voimpl.setNamedWhereClauseParam("BindCldId", cld);
        Voimpl.setNamedWhereClauseParam("BindSlcId", slc);
        Voimpl.setNamedWhereClauseParam("BindHoOrgId", ho);
        Voimpl.setNamedWhereClauseParam("BindOrgId", org);
        Voimpl.executeQuery();

        Row[] r = Voimpl.getFilteredRows("DocId", docId);
        if (r.length > 0) {
            DocIdSrc = r[0].getAttribute("DocIdSrc").toString();
            DocIdSrcTyp = Integer.parseInt(r[0].getAttribute("DocTypeSrc").toString());
        }


        BigDecimal pdoFyId = new BigDecimal(0.0);
        try {
            pdoFyId = (BigDecimal) callStoredFunction(Types.NUMERIC, "MNF.fn_mnf_RC_to_src_back_upd_stat(?,?,?,?,?,?)", new Object[] {
                                                      this.getCldIdValue(), this.getSlocIdValue(),
                                                      this.getHoOrgIdValue(), this.getOrgIdValue(), DocIdSrc,
                                                      DocIdSrcTyp
            });
        } catch (NumberFormatException nfe) {
            // TODO: Add catch code
            nfe.printStackTrace();
        }

        Number data = new Number(0);
        try {
            data = new Number(pdoFyId);

        } catch (SQLException e) {
        }
        System.out.println(" financial id   " + pdoFyId);
        this.getDBTransaction().commit();
        return data;

    }

    public Number getPendingItmForJC(String cld_id, Integer slc_id, String org_id, Number src_doc_typ,
                                     String src_doc_id, String op_doc_id, Number op_sr_no, String output_itm,
                                     Integer jc_rc) {
        Object fn_ret_val = null;

        src_doc_id = this.getMnfRcVO().getCurrentRow().getAttribute("DocId").toString();
        Row r = getMnfGenerateJcDualVO1().first();
        // Row r =  getMnfGenerateJcDualVO1().getCurrentRow();
        ViewObjectImpl lOVOperationNmVO1 = this.getLOVOperationNmVO1();
        lOVOperationNmVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        lOVOperationNmVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        lOVOperationNmVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        lOVOperationNmVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
        lOVOperationNmVO1.setNamedWhereClauseParam("BindRcDocId", src_doc_id);
        lOVOperationNmVO1.executeQuery();
        Number qty = new Number(0);
        String opDocId = null;
        Integer opSrNo = 0;
        // r.getAttribute(arg0)
        Row[] r1 = lOVOperationNmVO1.getFilteredRows("OpDescription", op_doc_id);
        if (r1.length > 0) {
            opDocId = r1[0].getAttribute("OpId").toString();
            opSrNo = (Integer) r1[0].getAttribute("OpSrNo");
            output_itm = r1[0].getAttribute("OutptItmId").toString();
            qty = (Number) r1[0].getAttribute("OutptItmQty");
        }


        if (jc_rc == 105) {
            src_doc_typ = new Number(26003);
            System.out.println(cld_id + slc_id + org_id + src_doc_typ + src_doc_id + output_itm + qty + op_doc_id +
                               op_sr_no);
            fn_ret_val = callStoredFunction(Types.NUMERIC, "FN_MNF_GET_DOC_ITM_PEND_QTY(?,?,?,?,?,?,?,?,?)", new Object[] {
                                            cld_id, slc_id, org_id, src_doc_typ, src_doc_id, opDocId, opSrNo,
                                            output_itm, qty
            });
        }

        if (fn_ret_val != null) {
            try {
                System.out.println("Pending Qty " + new Number(fn_ret_val));
                r.setAttribute("PendindOpQty", new Number(fn_ret_val));
                return new Number(fn_ret_val);
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

        return null;
    }


    /**
     * Method which will let us know whether cost center is applicable for this current document or not
     */
    public Boolean chkCcApplicableOrNot() {
        Boolean val = false;

        ViewObjectImpl appCcDocVO1 = this.getAppCcDocVO1();
        appCcDocVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        appCcDocVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        appCcDocVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        appCcDocVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
        appCcDocVO1.setNamedWhereClauseParam("BindDocId", 26003);
        appCcDocVO1.executeQuery();

        Row[] allRowsInRange = appCcDocVO1.getAllRowsInRange();
        if (allRowsInRange.length > 0) {
            val = true;
        }

        return val;
    }


    public AppCostCenterServiceAMImpl getAppAM() {
        String appModuleName = "appCostCenterSevice.model.service.AppCostCenterServiceAM";
        String appModuleConfig = "AppCostCenterServiceAMLocal";
        return (AppCostCenterServiceAMImpl) Configuration.createRootApplicationModule(appModuleName, appModuleConfig);
    }


    public void releaseAppAM(AppCostCenterServiceAMImpl appCostCenter) {
        Configuration.releaseRootApplicationModule((ApplicationModule) appCostCenter, true);
    }

    @Override
    protected void finalize() throws Throwable {

        releaseAppAM(getAppAM());

        super.finalize();
    }

    /**
     * Method which will be called when user click on generate Cost Ceneter based on header wise
     */
    public void generateCostCenterHeaderWise() {
        if (chkCcApplicableOrNot()) {
            AppCostCenterServiceAMImpl amCC = getAppAM();
            /*
           * @param cldId
           * @param slocId
           * @param hoOrgId
           * @param orgId
           * @param tempId
           * @param tempSrc
           * @param docId
           * @param usrId
           * @param tempCcId
           * @param amount
           * @param pCcLevel1
           * @param pCcLevel2
           * @param pCcLevel3
           * @param pCcLevel4
           * @param pCcLevel5
           */
            //   SlsSoVOImpl impl = this.getMnfPDOVO1();
            ViewObjectImpl impl = this.getMnfRcVO();
            Row currentRow = impl.getCurrentRow();

            if (currentRow != null) {
                declareGlblValuesForCC();
                System.out.println(this.getCldIdValue() + this.getSlocIdValue() + this.getHoOrgIdValue() +
                                   this.getOrgIdValue() + currentRow.getAttribute("DocId").toString());
                amCC.generateCostCenterApp(this.getCldIdValue(), this.getSlocIdValue(), this.getHoOrgIdValue(),
                                           this.getOrgIdValue(), currentRow.getAttribute("DocId").toString(), "H",
                                           26003, this.getUsrId(), currentRow.getAttribute("DocId").toString(),
                                           new Number(0), (String) resolvElO("#{pageFlowScope.P_CC_LEVEL1}"),
                                           (String) resolvElO("#{pageFlowScope.P_CC_LEVEL2}"),
                                           (String) resolvElO("#{pageFlowScope.P_CC_LEVEL3}"),
                                           (String) resolvElO("#{pageFlowScope.P_CC_LEVEL4}"),
                                           (String) resolvElO("#{pageFlowScope.P_CC_LEVEL5}"));

            }
        }
    }


    /**
     * Method which will set Global Parameter Values and will be called before opening AppCostCenterServicesTF
     */
    public void declareGlblValuesForCC() {
        ViewObjectImpl appCcVwVO1 = this.getAppCcVwVO1();
        appCcVwVO1.setRangeSize(-1);

        appCcVwVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        appCcVwVO1.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        appCcVwVO1.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        appCcVwVO1.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        appCcVwVO1.setNamedWhereClauseParam("BindDocId", 26003);

        // Row currentRow = this.getSlsSoItm1().getCurrentRow();
        Row currentRow = this.getMnfRcOpItmDispVO1().getCurrentRow();
        if (currentRow != null) {
            for (int i = 1; i <= 5; i++) {
                appCcVwVO1.setNamedWhereClauseParam("BindCcPos", i);
                appCcVwVO1.executeQuery();

                Row[] allRowsInRange = appCcVwVO1.getAllRowsInRange();
                if (allRowsInRange.length > 0) {
                    String columnName = null;
                    for (Row r : allRowsInRange) {
                        AttributeDef[] attributeDef = this.getMnfRcOpItmDispVO1().getAttributeDefs();

                        for (int j = 0; j < attributeDef.length; j++) {
                            /*  System.out.println("j value is " + attributeDef[j].getColumnName());
                               System.out.println("------------ null value is " + r.getAttribute("DbobColNm"));
                               System.out.println("attributeDef[j].getColumnName().equalsIgnoreCase(r.getAttribute(\"DbobColNm\").toString()) " +
                                                  attributeDef[j].getColumnName().equals(r.getAttribute("DbobColNm")));
                               */
                            if (attributeDef[j].getColumnName() != null &&
                                attributeDef[j].getColumnName().equals(r.getAttribute("DbobColNm"))) {
                                columnName = attributeDef[j].getName();
                            }
                        }
                        System.out.println("Column Name is " + columnName);

                        if (columnName != null) {

                            System.out.println("i is " + i + " Cost center Value is " +
                                               currentRow.getAttribute(columnName));


                            RequestContext.getCurrentInstance().getPageFlowScope().put("P_CC_LEVEL" + i,
                                                                                       currentRow.getAttribute(columnName));
                        }
                    }
                } else {
                    System.out.println("i is" + i + " cost center value is null");

                    RequestContext.getCurrentInstance().getPageFlowScope().put("P_CC_LEVEL" + i, null);

                }
            }
        }
    }

    /** ---------- To create HexDocId Id for CC -------------**/

    public String getHexDocNoFromFun() {

        String hexDocIdFromFun = "0";
        try {
            hexDocIdFromFun = this.callStoredFunction(Types.VARCHAR, "APP.GET_TXN_ID_CC(?,?,?,?,?,?,?)", new Object[] {
                                                      this.getCldIdValue(), this.getSlocIdValue(), this.getOrgIdValue(),
                                                      this.getUsrId(), 26003, 84901, 0
            }).toString();

        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("ERROR IN CALLING FUNCTION GET_TXN_ID at BdgEoBudgetEoImpl :" + e.getMessage());
        }
        System.out.println("===========" + hexDocIdFromFun);

        return hexDocIdFromFun;
    }


    /**
     * Method which will update amount present in cost center table
     */
    public void updateCostCenterAmt() {
        if (chkCcApplicableOrNot()) {
            System.out.println("Inside cost ceneter update amount method");
            //   SlsSoItmVOImpl impl = this.getSlsSoItm1();
            //  ViewObjectImpl impl = this.getMnfPdoOpItmVO6();

            RowSetIterator rowItr = getMnfRcOpItmDispVO1().createRowSetIterator(null);

            Row currentRow = null;

            while (rowItr.hasNext()) {

                // Row currentRow = impl.getCurrentRow();
                currentRow = rowItr.next();
                if (currentRow != null && currentRow.getAttribute("CcId") != null &&
                    currentRow.getAttribute("ItmTotAmt") != null) {
                    AppCostCenterServiceAMImpl amCC = getAppAM();
                    System.out.println("Inside Am after cresting object");
                    if (amCC != null) {

                        declareGlblValuesForCC();

                        System.out.println("------------------ Not null");
                        Boolean amount =
                            amCC.updateCCAmount(EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                                EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                                currentRow.getAttribute("DocId").toString(), "L", 26003,
                                                EbizParams.GLBL_APP_USR(), currentRow.getAttribute("CcId").toString(),
                                                (Number) currentRow.getAttribute("ItmTotAmt"),
                                                (String) resolvElO("#{pageFlowScope.P_CC_LEVEL1}"),
                                                (String) resolvElO("#{pageFlowScope.P_CC_LEVEL2}"),
                                                (String) resolvElO("#{pageFlowScope.P_CC_LEVEL3}"),
                                                (String) resolvElO("#{pageFlowScope.P_CC_LEVEL4}"),
                                                (String) resolvElO("#{pageFlowScope.P_CC_LEVEL5}"));
                        if (!amount) {
                            ADFModelUtils.showFormattedFacesMessage("Update Cost Center",
                                                                    "Please Update Cost Center Values.",
                                                                    FacesMessage.SEVERITY_ERROR);
                        }
                    }
                }
                //   System.out.println("After calling Update method");
            }

            rowItr.closeRowSetIterator();

        }
    }

    /**
     * Method which will push data of Cost Center from TempCostCenter to SlsSoCostCenter Table
     */
    public void sendDataFromTempCcToRcOpItm() {
        if (chkCcApplicableOrNot()) {
            System.out.println("hellooooooooooooooooooooooooooooozz" +
                               this.getMnfRcVO().getCurrentRow().getAttribute("DocId"));
            String result = (String) callStoredFunction(Types.VARCHAR, "APP.FN_SAVE_COST_CENTER(?,?,?,?,?,?,?,?)", new Object[] {
                                                        EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                                        EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                                        26003, "MNF", "MNF$RC$COST$CENTER",
                                                        this.getMnfRcVO().getCurrentRow().getAttribute("DocId")
            });
            System.out.println("Value of result:::" + result);
        }
    }

    /**
     * Container's getter for AppCcVwVO1.
     * @return AppCcVwVO1
     */
    public ViewObjectImpl getAppCcVwVO1() {
        return (ViewObjectImpl) findViewObject("AppCcVwVO1");
    }

    /**
     * Container's getter for AppCcDocVO1.
     * @return AppCcDocVO1
     */
    public ViewObjectImpl getAppCcDocVO1() {
        return (ViewObjectImpl) findViewObject("AppCcDocVO1");
    }

    public String getCostCenterChk() {

        String CcChk = null;
        int vv = 0;

        try {
            BigDecimal val = (BigDecimal) callStoredFunction(Types.NUMERIC, "App.fn_is_cost_center_present(?,?,?,?,?)", new Object[] {
                                                             this.getCldIdValue(), this.getSlocIdValue(),
                                                             this.getHoOrgIdValue(), this.getOrgIdValue(), 26003
            });
            vv = val.intValue();

        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }

        if (vv >= 1)
            CcChk = "Y";
        else
            CcChk = "N";
        System.out.println("---->> " + CcChk);
        return CcChk;

    }

    public void insertIntoSubContrator() {
        ViewObjectImpl impl = this.getMnfRcVO();
        Row currentRow = impl.getCurrentRow();
        Integer retVal = 0;
        System.out.println("CAllingggggggggggggggggggggggggggggg");
        try {
            this.callStoredFunction(Types.INTEGER, "MNF.fn_mnf_gen_sco_from_jc_rc(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                    this.getCldIdValue(), this.getSlocIdValue(), this.getHoOrgIdValue(),
                                    this.getOrgIdValue(), currentRow.getAttribute("DocId"), 26003,
                                    currentRow.getAttribute("DocDt"), currentRow.getAttribute("UsrIdCreate"),
                                    currentRow.getAttribute("UsrIdCreateDt"), 106, null, null,
                                    currentRow.getAttribute("OutptItmQty"), currentRow.getAttribute("FyId"),
                                    currentRow.getAttribute("RcRmrk"), currentRow.getAttribute("EoId")
                                    //  currentRow.getAttribute("CurrIdSp"),
                                    //  currentRow.getAttribute("CurrConvFctr")





            });

        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("ERROR IN CALLING FUNCTION FN_MNF_INS_PDO_TO_JC_RC at AMIMPL:" + e.getMessage());
        }
    }

    /**
     * Container's getter for LOVSubContractorVO1.
     * @return LOVSubContractorVO1
     */
    public ViewObjectImpl getLOVSubContractorVO1() {
        return (ViewObjectImpl) findViewObject("LOVSubContractorVO1");
    }

    /**
     * Container's getter for LOVSubContractorViewVO1.
     * @return LOVSubContractorViewVO1
     */
    public ViewObjectImpl getLOVSubContractorViewVO1() {
        return (ViewObjectImpl) findViewObject("LOVSubContractorViewVO1");
    }

    /**
     * Container's getter for LOVCurrIdSpFctrVO1.
     * @return LOVCurrIdSpFctrVO1
     */
    public ViewObjectImpl getLOVCurrIdSpFctrVO1() {
        return (ViewObjectImpl) findViewObject("LOVCurrIdSpFctrVO1");
    }

    public void yieldPercActOutPutQty(Number qty) {
        ViewObjectImpl impl = this.getMnfRcSrcVO1();
        Row currentRow = impl.getCurrentRow();
        Object doc_id_src = currentRow.getAttribute("DocIdSrc");
        System.out.println("docidsrc : " + doc_id_src.toString());
        Number addVal1 = new Number(0);
        Number addVal3 = new Number(0);

        // System.out.println("Val to be updated : " + qty + "  " + yieldPer(doc_id_src.toString()));
        // addVal1 = (Number)this.getMnfRcVO().getCurrentRow().getAttribute("OutptItmQty");
        //  addVal3 = (qty.multiply(addVal2)).divide(new Number(100));
        //  Integer q = new Integer(yieldPer(doc_id_src.toString()));
        addVal1 = yieldPer(doc_id_src.toString());
        System.out.println("Val to be updated : " + qty + "  " + addVal1);
        addVal3 = (qty.multiply(addVal1)).divide(new Number(100));
        System.out.println("Val to be updated : " + addVal3);
        this.getMnfRcVO().getCurrentRow().setAttribute("ActOutptItmQty", addVal3);

    }

    private Number yieldPer(String doc_id_src) {
        // Number addVal2= new Number(0);
        oracle.jbo.domain.Number dummy = new oracle.jbo.domain.Number(0);
        try {
            BigDecimal val =
                (BigDecimal) callStoredFunction(Types.NUMERIC, "MNF.fn_mnf_get_max_op_yield_per(?,?,?,?,?,?)", new Object[] {
                                                this.getCldIdValue(), this.getSlocIdValue(), this.getHoOrgIdValue(),
                                                this.getOrgIdValue(), doc_id_src, 26001
            });
            System.out.println("Retun val is : " + val);
            if (val != null)
                dummy = new oracle.jbo.domain.Number(val);
        } catch (Exception ex) {
        }

        return dummy;
    }


    public String qcFlagChk() {
        String dummy = "N";
        try {
            dummy = (String) callStoredFunction(Types.VARCHAR, "MM.MM_GET_QC_REQD_FLG(?,?,?,?,?)", new Object[] {
                                                this.getCldIdValue(), this.getSlocIdValue(), this.getHoOrgIdValue(),
                                                (String) this.getMnfRcVO().getCurrentRow().getAttribute("OutptItmId"),
                                                this.getOrgIdValue()
            });
            System.out.println("Retun val is : " + dummy);

        } catch (Exception ex) {
        }

        return dummy;
    }

    public String shortcloseChk() {

        oracle.jbo.domain.Number dummy = new oracle.jbo.domain.Number(0);
        Row row = this.getMnfRcVO().getCurrentRow();
        String DocId = row.getAttribute("DocId").toString();
        String rtn = "N";
        try {
            rtn = (String) callStoredFunction(Types.VARCHAR, "fn_mnf_pdo_jc_rc_partial_check(?,?,?,?,?,?)", new Object[] {
                                              this.getCldIdValue(), this.getSlocIdValue(), this.getOrgIdValue(),
                                              this.getHoOrgIdValue(), DocId, "RC"
            });
        } catch (Exception e) {

            e.printStackTrace();
        }
        return rtn;
    }

    private void setDualItmStk(String cld, Integer slc, String ho, String org, String docId) {

        ViewObjectImpl Voimpl = this.getDualItmStkVO1();
        Voimpl.setNamedWhereClauseParam("BindCldId", cld);
        Voimpl.setNamedWhereClauseParam("BindSlocId", slc);
        Voimpl.setNamedWhereClauseParam("BindHoOrgId", ho);
        Voimpl.setNamedWhereClauseParam("BindOrgId", org);
        //  Voimpl.setNamedWhereClauseParam("BindDocId",docId);
        Voimpl.executeQuery();
        // Row currentRow = this.getDualOverHeadParamVO1().getCurrent;
    }

    /**
     * Container's getter for DualItmStkVO1.
     * @return DualItmStkVO1
     */
    public ViewObjectImpl getDualItmStkVO1() {
        return (ViewObjectImpl) findViewObject("DualItmStkVO1");
    }

    String opIdForOpItm = null;
    Integer OpSrNoForOpItm = 1;

    public void defaultDualItmStk() {
        ViewObjectImpl opItm = this.getLOVGetOpItmForLotVO1();
        opItm.setNamedWhereClauseParam("BindCldId", getCldIdValue());
        opItm.setNamedWhereClauseParam("BindHoOrgID", getHoOrgIdValue());
        opItm.setNamedWhereClauseParam("BindOrgId", getOrgIdValue());
        opItm.setNamedWhereClauseParam("BindSlocId", getSlocIdValue());
        opItm.setNamedWhereClauseParam("BindDocId", this.getMnfRcVO().getCurrentRow().getAttribute("DocId").toString());
        opItm.setNamedWhereClauseParam("BindItmId",
                                       this.getMnfRcVO().getCurrentRow().getAttribute("OutptItmId").toString());
        opItm.executeQuery();
        Row allRowsInRange[] =
            opItm.getFilteredRows("ItmId", this.getMnfRcVO().getCurrentRow().getAttribute("OutptItmId").toString());
        Row currentRow = getDualItmStkVO1().first();
        currentRow.setAttribute("Doc_Id", this.getMnfRcVO().getCurrentRow().getAttribute("DocId").toString());
        if (allRowsInRange.length > 0) {
            currentRow.setAttribute("ItmUom", allRowsInRange[0].getAttribute("ItmUom"));
            opIdForOpItm = (String) allRowsInRange[0].getAttribute("OpId");
            currentRow.setAttribute("OpId", allRowsInRange[0].getAttribute("OpId"));
            OpSrNoForOpItm = (Integer) allRowsInRange[0].getAttribute("OpSrNo");
            currentRow.setAttribute("OpSrNo", allRowsInRange[0].getAttribute("OpSrNo"));
        }
    }

    public String qcFlagChkforItems(String ItemId) {
        System.out.println("itemid:" + ItemId);
        ViewObjectImpl dualItmStkVO1 = getDualItmStkVO1();
        Row curRow = dualItmStkVO1.getCurrentRow();
        ItemId = curRow.getAttribute("ItmId").toString();
        System.out.println("itemid:" + ItemId);
        String dummy = "N";
        try {
            dummy = (String) callStoredFunction(Types.VARCHAR, "MM.MM_GET_QC_REQD_FLG(?,?,?,?,?)", new Object[] {
                                                this.getCldIdValue(), this.getSlocIdValue(), this.getHoOrgIdValue(),
                                                ItemId, this.getOrgIdValue()
            });
            System.out.println("Retun val is : " + dummy);

        } catch (Exception ex) {
        }
        return dummy;
    }

    public void addToItmStk() {
        ViewObjectImpl dualItmStkVO1 = getDualItmStkVO1();
        Row curRow = dualItmStkVO1.getCurrentRow();
        ViewObjectImpl stkImpl = this.getMnfRcItmStkVOLot();
        Row CR = stkImpl.createRow();
        CR.setAttribute("CldId", getCldIdValue());
        CR.setAttribute("SlocId", getSlocIdValue());
        CR.setAttribute("OrgId", getOrgIdValue());
        CR.setAttribute("HoOrgId", getHoOrgIdValue());
        CR.setAttribute("DocId", curRow.getAttribute("Doc_Id"));
        CR.setAttribute("ItmId", curRow.getAttribute("ItmId"));
        CR.setAttribute("ItmType", curRow.getAttribute("ItmTyp"));
        CR.setAttribute("ItmUom", curRow.getAttribute("ItmUom"));
        CR.setAttribute("LotId", GetlotofItm(curRow.getAttribute("ItmId").toString()));
        CR.setAttribute("OpId", curRow.getAttribute("OpId"));
        CR.setAttribute("OpSrNo", curRow.getAttribute("OpSrNo"));
        String pdoId =
            getOutputItemPdoId(curRow.getAttribute("ItmId").toString(),
                               this.getMnfRcVO().getCurrentRow().getAttribute("DocId").toString(),
                               curRow.getAttribute("OpId").toString());
        if (Integer.parseInt(this.getMnfRcVO().getCurrentRow().getAttribute("RcBasis").toString()) == 91) {
            CR.setAttribute("PdoId", pdoId);
        } else {
            CR.setAttribute("PdoId", this.getMnfRcSrcVO1().getCurrentRow().getAttribute("DocIdSrc"));
        }
        //CR.setAttribute("PdoId", pdoId);
        CR.setAttribute("SrNo", 0);
        CR.setAttribute("TotQty", curRow.getAttribute("ItmQty"));
        CR.setAttribute("UsrIdCreate", getUsrId());
        CR.setAttribute("UsrIdCreateDt", new Timestamp(System.currentTimeMillis()));
        //  if (qcFlagChkforItems(curRow.getAttribute("ItmId").toString()).equals("N"))
        if (curRow.getAttribute("ItemQcChk").toString().equals("N"))
            CR.setAttribute("ItmMvmtType", curRow.getAttribute("MvmntId"));
        else
            CR.setAttribute("ItmMvmtType", 122);
        CR.setAttribute("ExpiryDt", curRow.getAttribute("ExpiryDate"));
        stkImpl.insertRow(CR);
        stkImpl.setCurrentRow(CR);
        //stkImpl.executeQuery();
        this.getDBTransaction().postChanges();
        setDualItmStk(getCldIdValue(), getSlocIdValue(), getHoOrgIdValue(), getOrgIdValue(),
                      this.getMnfRcVO().getCurrentRow().getAttribute("DocId").toString());
        defaultDualItmStk();
    }

    public String GetlotofItm(String ItmNme) {
        ViewObjectImpl lotImpl = this.getMnfRcVO();
        Row lotRow = lotImpl.getCurrentRow();
        Object rVal;
        try {
            rVal = callStoredFunction(VARCHAR, "MNF.FN_MNF_GET_LOT_NO(?,?,?,?,?)", new Object[] {
                                      lotRow.getAttribute("CldId"), lotRow.getAttribute("SlocId"),
                                      lotRow.getAttribute("OrgId"), lotRow.getAttribute("WhId"), ItmNme
            });
            if (rVal != null) {
                System.out.println("Value of Validity" + rVal);
                return rVal.toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        showFacesMsg("Error while fetching user work flow details", null, FacesMessage.SEVERITY_ERROR, null);
        return "0";
    }

    /**
     * Container's getter for LOVOpItemVO1.
     * @return LOVOpItemVO1
     */
    public ViewObjectImpl getLOVOpItemVO1() {
        return (ViewObjectImpl) findViewObject("LOVOpItemVO1");
    }

    public Integer chkOutputItmStk(String itmId) {
        ViewObjectImpl pa = this.getMnfRcItmStkVOLot();
        System.out.println("row count is ::" + this.getMnfRcItmStkVOLot().getRowCount());
        RowQualifier rq = new RowQualifier(pa);
        rq.setWhereClause("CldId='" + getCldIdValue() + "' and SlocId=" + getSlocIdValue() + " and OrgId='" +
                          getOrgIdValue() + "' and HoOrgId='" + getHoOrgIdValue() + "' and ItmId='" + itmId +
                          "' and DocId='" + this.getMnfRcVO().getCurrentRow().getAttribute("DocId").toString() + "'");
        System.out.println(rq.getExprStr());
        Row[] row = pa.getFilteredRows(rq);
        System.out.println(row.length);
        if (row.length > 0) {
            return 1;
        }
        return 0;
    }

    public Integer getItmStkRecord() {
        ViewObjectImpl Voimpl = this.getLOVOpItemVO1();
        Voimpl.setNamedWhereClauseParam("BindCldId", getCldIdValue());
        Voimpl.setNamedWhereClauseParam("BindSlocId", getSlocIdValue());
        Voimpl.setNamedWhereClauseParam("BindHoOrgId", getHoOrgIdValue());
        Voimpl.setNamedWhereClauseParam("BindOrgId", getOrgIdValue());
        Voimpl.setNamedWhereClauseParam("BindDocId",
                                        this.getMnfRcVO().getCurrentRow().getAttribute("DocId").toString());
        Voimpl.setNamedWhereClauseParam("BindOpId", opIdForOpItm);
        Voimpl.setNamedWhereClauseParam("BindOpSrNo", OpSrNoForOpItm);
        Voimpl.executeQuery();

        Integer data = Voimpl.getRowCount();

        if (data > 0)
            return data;
        else
            return 1;


    }

    /**
     * Container's getter for MnfRcItmStkSrVO1.
     * @return MnfRcItmStkSrVO1
     */
    public ViewObjectImpl getMnfRcItmStkSrVO1() {
        return (ViewObjectImpl) findViewObject("MnfRcItmStkSrVO1");
    }

    /**
     * Container's getter for MnfRcItmStkToMnfRcItmStkSrVL1.
     * @return MnfRcItmStkToMnfRcItmStkSrVL1
     */
    public ViewLinkImpl getMnfRcItmStkToMnfRcItmStkSrVL1() {
        return (ViewLinkImpl) findViewLink("MnfRcItmStkToMnfRcItmStkSrVL1");
    }

    /**
     * Container's getter for LOVfg_sgfLotStkVO1.
     * @return LOVfg_sgfLotStkVO1
     */
    public ViewObjectImpl getLOVfg_sgfLotStkVO1() {
        return (ViewObjectImpl) findViewObject("LOVfg_sgfLotStkVO1");
    }

    /**
     * Container's getter for LOVProjectNameVO1.
     * @return LOVProjectNameVO1
     */
    public ViewObjectImpl getLOVProjectNameVO1() {
        return (ViewObjectImpl) findViewObject("LOVProjectNameVO1");
    }

    /**
     * Container's getter for LOVWhNmeVO1.
     * @return LOVWhNmeVO1
     */
    public ViewObjectImpl getLOVWhNmeVO1() {
        return (ViewObjectImpl) findViewObject("LOVWhNmeVO1");
    }
}
