package mnfroutecard.model.views;

import java.math.BigDecimal;

import java.sql.CallableStatement;

import java.sql.SQLException;

import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import mnfroutecard.model.entities.MnfRcEOImpl;

import mnfroutecard.model.services.MNFRouteCardAMImpl;


import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.RowSet;
import oracle.jbo.domain.NClobDomain;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Sep 23 16:37:11 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MnfRcVORowImpl extends ViewRowImpl {


    public static final int ENTITY_MNFRCEO = 0;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CldId,
        SlocId,
        HoOrgId,
        OrgId,
        DocId,
        DocDt,
        EndDt,
        FyId,
        RcId,
        RcMode,
        RcRmrk,
        RcStat,
        StrtDt,
        UsrIdCreate,
        UsrIdCreateDt,
        UsrIdMod,
        UsrIdModDt,
        RcType,
        RcBasis,
        ShiftIdFromRcTrans,
        EmployeeIdRcTrans,
        ShiftNameRcTrans,
        EmployeeNameRcTrans,
        QtyBrct,
        WhId,
        WhNameTrans,
        RqmtAreaId,
        RqmtNmTrans,
        ChkJcAllowedTrans,
        ActOutptItmQty,
        OutptItmId,
        OutptItmQty,
        MrsId,
        TransOutputItmNm,
        PendingQty,
        TransOutItmQty,
        LocType,
        EoId,
        TransEoNme,
        TransLocType,
        CurrConvFctr,
        CurrIdSp,
        TransCurrIdSpFctr,
        TransBaseCurId,
        ActStrtDt,
        ActEndDt,
        TransShortCloseChk,
        TransSerialFlag,
        TransProjNme,
        PrjId,
        MnfRcOp,
        MnfRcAttch,
        MnfRcParam,
        MnfRcOpItm,
        MnfRcBarcode,
        MnfRcSrc,
        MnfRcItmStk,
        MnfRcOpQcParam,
        LOVUserNameVO1,
        LOVModifiedByVO1,
        LOVRcStatusVO1,
        LOVRcModeVO1,
        LOVRcBasisVO1,
        LOVRcTypeVO1,
        LOVShiftIdVO1,
        LOVEmpIdVO1,
        LOVWhIdVO1,
        LOVRequirementIdVO1,
        LOVSubContractorVO1,
        LOVCurIdVO1,
        LOVCurrIdSpFctrVO1,
        LOVProjectNameVO1;
        static AttributesEnum[] vals = null;
        ;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int DOCDT = AttributesEnum.DocDt.index();
    public static final int ENDDT = AttributesEnum.EndDt.index();
    public static final int FYID = AttributesEnum.FyId.index();
    public static final int RCID = AttributesEnum.RcId.index();
    public static final int RCMODE = AttributesEnum.RcMode.index();
    public static final int RCRMRK = AttributesEnum.RcRmrk.index();
    public static final int RCSTAT = AttributesEnum.RcStat.index();
    public static final int STRTDT = AttributesEnum.StrtDt.index();
    public static final int USRIDCREATE = AttributesEnum.UsrIdCreate.index();
    public static final int USRIDCREATEDT = AttributesEnum.UsrIdCreateDt.index();
    public static final int USRIDMOD = AttributesEnum.UsrIdMod.index();
    public static final int USRIDMODDT = AttributesEnum.UsrIdModDt.index();
    public static final int RCTYPE = AttributesEnum.RcType.index();
    public static final int RCBASIS = AttributesEnum.RcBasis.index();
    public static final int SHIFTIDFROMRCTRANS = AttributesEnum.ShiftIdFromRcTrans.index();
    public static final int EMPLOYEEIDRCTRANS = AttributesEnum.EmployeeIdRcTrans.index();
    public static final int SHIFTNAMERCTRANS = AttributesEnum.ShiftNameRcTrans.index();
    public static final int EMPLOYEENAMERCTRANS = AttributesEnum.EmployeeNameRcTrans.index();
    public static final int QTYBRCT = AttributesEnum.QtyBrct.index();
    public static final int WHID = AttributesEnum.WhId.index();
    public static final int WHNAMETRANS = AttributesEnum.WhNameTrans.index();
    public static final int RQMTAREAID = AttributesEnum.RqmtAreaId.index();
    public static final int RQMTNMTRANS = AttributesEnum.RqmtNmTrans.index();
    public static final int CHKJCALLOWEDTRANS = AttributesEnum.ChkJcAllowedTrans.index();
    public static final int ACTOUTPTITMQTY = AttributesEnum.ActOutptItmQty.index();
    public static final int OUTPTITMID = AttributesEnum.OutptItmId.index();
    public static final int OUTPTITMQTY = AttributesEnum.OutptItmQty.index();
    public static final int MRSID = AttributesEnum.MrsId.index();
    public static final int TRANSOUTPUTITMNM = AttributesEnum.TransOutputItmNm.index();
    public static final int PENDINGQTY = AttributesEnum.PendingQty.index();
    public static final int TRANSOUTITMQTY = AttributesEnum.TransOutItmQty.index();
    public static final int LOCTYPE = AttributesEnum.LocType.index();
    public static final int EOID = AttributesEnum.EoId.index();
    public static final int TRANSEONME = AttributesEnum.TransEoNme.index();
    public static final int TRANSLOCTYPE = AttributesEnum.TransLocType.index();
    public static final int CURRCONVFCTR = AttributesEnum.CurrConvFctr.index();
    public static final int CURRIDSP = AttributesEnum.CurrIdSp.index();
    public static final int TRANSCURRIDSPFCTR = AttributesEnum.TransCurrIdSpFctr.index();
    public static final int TRANSBASECURID = AttributesEnum.TransBaseCurId.index();
    public static final int ACTSTRTDT = AttributesEnum.ActStrtDt.index();
    public static final int ACTENDDT = AttributesEnum.ActEndDt.index();
    public static final int TRANSSHORTCLOSECHK = AttributesEnum.TransShortCloseChk.index();
    public static final int TRANSSERIALFLAG = AttributesEnum.TransSerialFlag.index();
    public static final int TRANSPROJNME = AttributesEnum.TransProjNme.index();
    public static final int PRJID = AttributesEnum.PrjId.index();
    public static final int MNFRCOP = AttributesEnum.MnfRcOp.index();
    public static final int MNFRCATTCH = AttributesEnum.MnfRcAttch.index();
    public static final int MNFRCPARAM = AttributesEnum.MnfRcParam.index();
    public static final int MNFRCOPITM = AttributesEnum.MnfRcOpItm.index();
    public static final int MNFRCBARCODE = AttributesEnum.MnfRcBarcode.index();
    public static final int MNFRCSRC = AttributesEnum.MnfRcSrc.index();
    public static final int MNFRCITMSTK = AttributesEnum.MnfRcItmStk.index();
    public static final int MNFRCOPQCPARAM = AttributesEnum.MnfRcOpQcParam.index();
    public static final int LOVUSERNAMEVO1 = AttributesEnum.LOVUserNameVO1.index();
    public static final int LOVMODIFIEDBYVO1 = AttributesEnum.LOVModifiedByVO1.index();
    public static final int LOVRCSTATUSVO1 = AttributesEnum.LOVRcStatusVO1.index();
    public static final int LOVRCMODEVO1 = AttributesEnum.LOVRcModeVO1.index();
    public static final int LOVRCBASISVO1 = AttributesEnum.LOVRcBasisVO1.index();
    public static final int LOVRCTYPEVO1 = AttributesEnum.LOVRcTypeVO1.index();
    public static final int LOVSHIFTIDVO1 = AttributesEnum.LOVShiftIdVO1.index();
    public static final int LOVEMPIDVO1 = AttributesEnum.LOVEmpIdVO1.index();
    public static final int LOVWHIDVO1 = AttributesEnum.LOVWhIdVO1.index();
    public static final int LOVREQUIREMENTIDVO1 = AttributesEnum.LOVRequirementIdVO1.index();
    public static final int LOVSUBCONTRACTORVO1 = AttributesEnum.LOVSubContractorVO1.index();
    public static final int LOVCURIDVO1 = AttributesEnum.LOVCurIdVO1.index();
    public static final int LOVCURRIDSPFCTRVO1 = AttributesEnum.LOVCurrIdSpFctrVO1.index();
    public static final int LOVPROJECTNAMEVO1 = AttributesEnum.LOVProjectNameVO1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public MnfRcVORowImpl() {
    }

    /**
     * Gets MnfRcEO entity object.
     * @return the MnfRcEO
     */
    public MnfRcEOImpl getMnfRcEO() {
        return (MnfRcEOImpl) getEntity(ENTITY_MNFRCEO);
    }

    /**
     * Gets the attribute value for CLD_ID using the alias name CldId.
     * @return the CLD_ID
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as attribute value for CLD_ID using the alias name CldId.
     * @param value value to set the CLD_ID
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for SLOC_ID using the alias name SlocId.
     * @return the SLOC_ID
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for SLOC_ID using the alias name SlocId.
     * @param value value to set the SLOC_ID
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for HO_ORG_ID using the alias name HoOrgId.
     * @return the HO_ORG_ID
     */
    public String getHoOrgId() {
        return (String) getAttributeInternal(HOORGID);
    }

    /**
     * Sets <code>value</code> as attribute value for HO_ORG_ID using the alias name HoOrgId.
     * @param value value to set the HO_ORG_ID
     */
    public void setHoOrgId(String value) {
        setAttributeInternal(HOORGID, value);
    }

    /**
     * Gets the attribute value for ORG_ID using the alias name OrgId.
     * @return the ORG_ID
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as attribute value for ORG_ID using the alias name OrgId.
     * @param value value to set the ORG_ID
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for DOC_ID using the alias name DocId.
     * @return the DOC_ID
     */
    public String getDocId() {
        return (String) getAttributeInternal(DOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for DOC_ID using the alias name DocId.
     * @param value value to set the DOC_ID
     */
    public void setDocId(String value) {
        setAttributeInternal(DOCID, value);
    }

    /**
     * Gets the attribute value for DOC_DT using the alias name DocDt.
     * @return the DOC_DT
     */
    public Timestamp getDocDt() {
        return (Timestamp) getAttributeInternal(DOCDT);
    }

    /**
     * Sets <code>value</code> as attribute value for DOC_DT using the alias name DocDt.
     * @param value value to set the DOC_DT
     */
    public void setDocDt(Timestamp value) {
        setAttributeInternal(DOCDT, value);
    }

    /**
     * Gets the attribute value for END_DT using the alias name EndDt.
     * @return the END_DT
     */
    public Timestamp getEndDt() {
        return (Timestamp) getAttributeInternal(ENDDT);
    }

    /**
     * Sets <code>value</code> as attribute value for END_DT using the alias name EndDt.
     * @param value value to set the END_DT
     */
    public void setEndDt(Timestamp value) {
        setAttributeInternal(ENDDT, value);
    }

    /**
     * Gets the attribute value for FY_ID using the alias name FyId.
     * @return the FY_ID
     */
    public Integer getFyId() {
        return (Integer) getAttributeInternal(FYID);
    }

    /**
     * Sets <code>value</code> as attribute value for FY_ID using the alias name FyId.
     * @param value value to set the FY_ID
     */
    public void setFyId(Integer value) {
        setAttributeInternal(FYID, value);
    }


    /**
     * Gets the attribute value for RC_ID using the alias name RcId.
     * @return the RC_ID
     */
    public String getRcId() {
        return (String) getAttributeInternal(RCID);
    }

    /**
     * Sets <code>value</code> as attribute value for RC_ID using the alias name RcId.
     * @param value value to set the RC_ID
     */
    public void setRcId(String value) {
        setAttributeInternal(RCID, value);
    }

    /**
     * Gets the attribute value for RC_MODE using the alias name RcMode.
     * @return the RC_MODE
     */
    public Integer getRcMode() {
        return (Integer) getAttributeInternal(RCMODE);
    }

    /**
     * Sets <code>value</code> as attribute value for RC_MODE using the alias name RcMode.
     * @param value value to set the RC_MODE
     */
    public void setRcMode(Integer value) {
        setAttributeInternal(RCMODE, value);
    }

    /**
     * Gets the attribute value for RC_RMRK using the alias name RcRmrk.
     * @return the RC_RMRK
     */
    public String getRcRmrk() {
        return (String) getAttributeInternal(RCRMRK);
    }

    /**
     * Sets <code>value</code> as attribute value for RC_RMRK using the alias name RcRmrk.
     * @param value value to set the RC_RMRK
     */
    public void setRcRmrk(String value) {
        setAttributeInternal(RCRMRK, value);
    }

    /**
     * Gets the attribute value for RC_STAT using the alias name RcStat.
     * @return the RC_STAT
     */
    public Integer getRcStat() {
        return (Integer) getAttributeInternal(RCSTAT);
    }

    /**
     * Sets <code>value</code> as attribute value for RC_STAT using the alias name RcStat.
     * @param value value to set the RC_STAT
     */
    public void setRcStat(Integer value) {
        setAttributeInternal(RCSTAT, value);
    }

    /**
     * Gets the attribute value for STRT_DT using the alias name StrtDt.
     * @return the STRT_DT
     */
    public Timestamp getStrtDt() {
        return (Timestamp) getAttributeInternal(STRTDT);
    }

    /**
     * Sets <code>value</code> as attribute value for STRT_DT using the alias name StrtDt.
     * @param value value to set the STRT_DT
     */
    public void setStrtDt(Timestamp value) {
        setAttributeInternal(STRTDT, value);
    }

    /**
     * Gets the attribute value for USR_ID_CREATE using the alias name UsrIdCreate.
     * @return the USR_ID_CREATE
     */
    public Integer getUsrIdCreate() {
        return (Integer) getAttributeInternal(USRIDCREATE);
    }

    /**
     * Sets <code>value</code> as attribute value for USR_ID_CREATE using the alias name UsrIdCreate.
     * @param value value to set the USR_ID_CREATE
     */
    public void setUsrIdCreate(Integer value) {
        setAttributeInternal(USRIDCREATE, value);
    }

    /**
     * Gets the attribute value for USR_ID_CREATE_DT using the alias name UsrIdCreateDt.
     * @return the USR_ID_CREATE_DT
     */
    public Timestamp getUsrIdCreateDt() {
        return (Timestamp) getAttributeInternal(USRIDCREATEDT);
    }

    /**
     * Sets <code>value</code> as attribute value for USR_ID_CREATE_DT using the alias name UsrIdCreateDt.
     * @param value value to set the USR_ID_CREATE_DT
     */
    public void setUsrIdCreateDt(Timestamp value) {
        setAttributeInternal(USRIDCREATEDT, value);
    }

    /**
     * Gets the attribute value for USR_ID_MOD using the alias name UsrIdMod.
     * @return the USR_ID_MOD
     */
    public Integer getUsrIdMod() {
        return (Integer) getAttributeInternal(USRIDMOD);
    }

    /**
     * Sets <code>value</code> as attribute value for USR_ID_MOD using the alias name UsrIdMod.
     * @param value value to set the USR_ID_MOD
     */
    public void setUsrIdMod(Integer value) {
        setAttributeInternal(USRIDMOD, value);
    }

    /**
     * Gets the attribute value for USR_ID_MOD_DT using the alias name UsrIdModDt.
     * @return the USR_ID_MOD_DT
     */
    public Timestamp getUsrIdModDt() {
        return (Timestamp) getAttributeInternal(USRIDMODDT);
    }

    /**
     * Sets <code>value</code> as attribute value for USR_ID_MOD_DT using the alias name UsrIdModDt.
     * @param value value to set the USR_ID_MOD_DT
     */
    public void setUsrIdModDt(Timestamp value) {
        setAttributeInternal(USRIDMODDT, value);
    }

    /**
     * Gets the attribute value for RC_TYPE using the alias name RcType.
     * @return the RC_TYPE
     */
    public Integer getRcType() {
        return (Integer) getAttributeInternal(RCTYPE);
    }

    /**
     * Sets <code>value</code> as attribute value for RC_TYPE using the alias name RcType.
     * @param value value to set the RC_TYPE
     */
    public void setRcType(Integer value) {
        setAttributeInternal(RCTYPE, value);
    }

    /**
     * Gets the attribute value for RC_BASIS using the alias name RcBasis.
     * @return the RC_BASIS
     */
    public Integer getRcBasis() {
        return (Integer) getAttributeInternal(RCBASIS);
    }

    /**
     * Sets <code>value</code> as attribute value for RC_BASIS using the alias name RcBasis.
     * @param value value to set the RC_BASIS
     */
    public void setRcBasis(Integer value) {
        setAttributeInternal(RCBASIS, value);
    }


    /**
     * Gets the attribute value for the calculated attribute ShiftIdFromRcTrans.
     * @return the ShiftIdFromRcTrans
     */
    public String getShiftIdFromRcTrans() {
        return (String) getAttributeInternal(SHIFTIDFROMRCTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ShiftIdFromRcTrans.
     * @param value value to set the  ShiftIdFromRcTrans
     */
    public void setShiftIdFromRcTrans(String value) {
        setAttributeInternal(SHIFTIDFROMRCTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute EmployeeIdRcTrans.
     * @return the EmployeeIdRcTrans
     */
    public Integer getEmployeeIdRcTrans() {
        return (Integer) getAttributeInternal(EMPLOYEEIDRCTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute EmployeeIdRcTrans.
     * @param value value to set the  EmployeeIdRcTrans
     */
    public void setEmployeeIdRcTrans(Integer value) {
        setAttributeInternal(EMPLOYEEIDRCTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ShiftNameRcTrans.
     * @return the ShiftNameRcTrans
     */
    public String getShiftNameRcTrans() {
        return (String) getAttributeInternal(SHIFTNAMERCTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ShiftNameRcTrans.
     * @param value value to set the  ShiftNameRcTrans
     */
    public void setShiftNameRcTrans(String value) {
        setAttributeInternal(SHIFTNAMERCTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute EmployeeNameRcTrans.
     * @return the EmployeeNameRcTrans
     */
    public String getEmployeeNameRcTrans() {
        return (String) getAttributeInternal(EMPLOYEENAMERCTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute EmployeeNameRcTrans.
     * @param value value to set the  EmployeeNameRcTrans
     */
    public void setEmployeeNameRcTrans(String value) {
        setAttributeInternal(EMPLOYEENAMERCTRANS, value);
    }


    /**
     * Gets the attribute value for QTY_BRCT using the alias name QtyBrct.
     * @return the QTY_BRCT
     */
    public Integer getQtyBrct() {
        return (Integer) getAttributeInternal(QTYBRCT);
    }

    /**
     * Sets <code>value</code> as attribute value for QTY_BRCT using the alias name QtyBrct.
     * @param value value to set the QTY_BRCT
     */
    public void setQtyBrct(Integer value) {
        setAttributeInternal(QTYBRCT, value);
    }

    /**
     * Gets the attribute value for WH_ID using the alias name WhId.
     * @return the WH_ID
     */
    public String getWhId() {
        return (String) getAttributeInternal(WHID);
    }

    /**
     * Sets <code>value</code> as attribute value for WH_ID using the alias name WhId.
     * @param value value to set the WH_ID
     */
    public void setWhId(String value) {
        setAttributeInternal(WHID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute WhNameTrans.
     * @return the WhNameTrans
     */
    public String getWhNameTrans() {
        String id = this.getWhId();
        if (id != null) {
            MNFRouteCardAMImpl am = (MNFRouteCardAMImpl) this.getApplicationModule();
            //ViewObjectImpl idVO1 = am.getLOVWhIdVO1();
            ViewObjectImpl idVO1 = am.getLOVWhNmeVO1();

            RowQualifier rQ = new RowQualifier(idVO1);
            rQ.setWhereClause("CldId='" + this.getCldId() + "' AND SlocId=" + this.getSlocId() + " AND HoOrgId='" +
                              this.getHoOrgId() + "' AND OrgId='" + this.getOrgId() + "' AND WhId='" + id + "'");
            Row[] filteredRows = idVO1.getFilteredRows(rQ);
            if (filteredRows.length > 0) {
                return filteredRows[0].getAttribute("WhNm").toString();
            }
        }
        return (String) getAttributeInternal(WHNAMETRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute WhNameTrans.
     * @param value value to set the  WhNameTrans
     */
    public void setWhNameTrans(String value) {
        setAttributeInternal(WHNAMETRANS, value);
    }

    /**
     * Gets the attribute value for RQMT_AREA_ID using the alias name RqmtAreaId.
     * @return the RQMT_AREA_ID
     */
    public Integer getRqmtAreaId() {
        return (Integer) getAttributeInternal(RQMTAREAID);
    }

    /**
     * Sets <code>value</code> as attribute value for RQMT_AREA_ID using the alias name RqmtAreaId.
     * @param value value to set the RQMT_AREA_ID
     */
    public void setRqmtAreaId(Integer value) {
        setAttributeInternal(RQMTAREAID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute RqmtNmTrans.
     * @return the RqmtNmTrans
     */
    public String getRqmtNmTrans() {
        if (getAttributeInternal(RQMTNMTRANS) == null) {
            Integer id = this.getRqmtAreaId();
            if (id != null) {
                MNFRouteCardAMImpl am = (MNFRouteCardAMImpl) this.getApplicationModule();
                ViewObjectImpl idVO1 = am.getLOVRequirementIdVO1();

                RowQualifier rQ = new RowQualifier(idVO1);
                rQ.setWhereClause("CldId='" + this.getCldId() + "' AND SlocId=" + this.getSlocId() + " AND OrgId='" +
                                  this.getOrgId() + "' AND RqmtAreaId=" + id);
                Row[] filteredRows = idVO1.getFilteredRows(rQ);
                if (filteredRows.length > 0) {
                    return filteredRows[0].getAttribute("RqmtAreaNm").toString();
                }
            }
        }
        return (String) getAttributeInternal(RQMTNMTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute RqmtNmTrans.
     * @param value value to set the  RqmtNmTrans
     */
    public void setRqmtNmTrans(String value) {
        setAttributeInternal(RQMTNMTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ChkJcAllowedTrans.
     * @return the ChkJcAllowedTrans
     */
    public String getChkJcAllowedTrans() {
        try {
            Object val = this.callStoredFunction(Types.VARCHAR, "MNF.fn_chk_jc_allowed(?,?,?,?)", new Object[] {
                                                 this.getCldId(), this.getSlocId(), this.getOrgId(), 93




            });
            if (val != null && val.toString().equalsIgnoreCase("Y")) {
                return "Y";
            }
        } catch (Exception e) {
            e.printStackTrace();
         //   System.out.println("ERROR IN CALLING FUNCTION fn_chk_jc_allowed at RcRowImpl:" + e.getMessage());

        }
        //return (String)getAttributeInternal(CHKJCALLOWEDTRANS);
        return "N";
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ChkJcAllowedTrans.
     * @param value value to set the  ChkJcAllowedTrans
     */
    public void setChkJcAllowedTrans(String value) {
        setAttributeInternal(CHKJCALLOWEDTRANS, value);
    }

    /**
     * Gets the attribute value for ACT_OUTPT_ITM_QTY using the alias name ActOutptItmQty.
     * @return the ACT_OUTPT_ITM_QTY
     */
    public Number getActOutptItmQty() {
        return (Number) getAttributeInternal(ACTOUTPTITMQTY);
    }

    /**
     * Sets <code>value</code> as attribute value for ACT_OUTPT_ITM_QTY using the alias name ActOutptItmQty.
     * @param value value to set the ACT_OUTPT_ITM_QTY
     */
    public void setActOutptItmQty(Number value) {
        setAttributeInternal(ACTOUTPTITMQTY, value);
    }

    /**
     * Gets the attribute value for OUTPT_ITM_ID using the alias name OutptItmId.
     * @return the OUTPT_ITM_ID
     */
    public String getOutptItmId() {
        String rc_md = (String) resolvEl("#{pageFlowScope.RC_MODE}").toString();
        //System.out.println("Page Mode Value :" + rc_md);
        /* if(!"V".equals(rc_md))
        { */
        MNFRouteCardAMImpl am = (MNFRouteCardAMImpl) this.getApplicationModule();
        ViewObjectImpl impl = am.getMnfRcSrcVO1();
        Row currentRow = impl.getCurrentRow();
        Object doc_id_src = currentRow.getAttribute("DocIdSrc");
        if (doc_id_src != null) {
            ViewObjectImpl outp = am.getLOVOutputItmNmVO1();
            outp.setNamedWhereClauseParam("BindCldId", getCldId());
            outp.setNamedWhereClauseParam("BindSlocId", getSlocId());
            outp.setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
            outp.setNamedWhereClauseParam("BindOrgId", getOrgId());
            outp.setNamedWhereClauseParam("BindDocId", doc_id_src);
            outp.executeQuery();
            Row[] allRowsInRange = outp.getAllRowsInRange();
            if (allRowsInRange.length > 0) {
                Number addVal1 = new Number(0);
                Number addVal2 = (Number) allRowsInRange[0].getAttribute("PendingOutptQty");
                if ("A".equals(rc_md)) {
                    if ((getAttributeInternal(TRANSOUTITMQTY) == null)) {
                        this.setOutptItmQty((Number) allRowsInRange[0].getAttribute("FinalOutptItmQty"));
                      //  this.setActOutptItmQty((Number) allRowsInRange[0].getAttribute("FinalOutptItmQty"));
                      this.setActOutptItmQty((Number) allRowsInRange[0].getAttribute("ActPendingOutptQty"));
                    }
                    this.setOutptItmId(allRowsInRange[0].getAttribute("FinalOutptItmId").toString());
                    this.setPendingQty(addVal2);
                } else if (!"A".equals(rc_md)) {
                    //this.setOutptItmQty((Number)allRowsInRange[0].getAttribute("PendingOutptQty"));
                    addVal1 = this.getOutptItmQty();
                    this.setPendingQty(addVal2.add(addVal1));

                }
                //   addVal1 = this.getOutptItmQty();
                // Number addVal2 = (Number)allRowsInRange[0].getAttribute("PendingOutptQty");
                Object a = allRowsInRange[0].getAttribute("FinalOutptItmId");
               // System.out.println("Value of final output :" + a);
                String val = (a == null ? null : a.toString());
                return val;
            }
            //  }
        }
        return (String) getAttributeInternal(OUTPTITMID);
    }

    /**Method to resolve expression- returns String value*/
    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }

    /**
     * Sets <code>value</code> as attribute value for OUTPT_ITM_ID using the alias name OutptItmId.
     * @param value value to set the OUTPT_ITM_ID
     */
    public void setOutptItmId(String value) {
        setAttributeInternal(OUTPTITMID, value);
    }

    /**
     * Gets the attribute value for OUTPT_ITM_QTY using the alias name OutptItmQty.
     * @return the OUTPT_ITM_QTY
     */
    public Number getOutptItmQty() {
        return (Number) getAttributeInternal(OUTPTITMQTY);
    }

    /**
     * Sets <code>value</code> as attribute value for OUTPT_ITM_QTY using the alias name OutptItmQty.
     * @param value value to set the OUTPT_ITM_QTY
     */
    public void setOutptItmQty(Number value) {
        setAttributeInternal(OUTPTITMQTY, value);
    }

    /**
     * Gets the attribute value for MRS_ID using the alias name MrsId.
     * @return the MRS_ID
     */
    public String getMrsId() {
        return (String) getAttributeInternal(MRSID);
    }

    /**
     * Sets <code>value</code> as attribute value for MRS_ID using the alias name MrsId.
     * @param value value to set the MRS_ID
     */
    public void setMrsId(String value) {
        setAttributeInternal(MRSID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransOutputItmNm.
     * @return the TransOutputItmNm
     */
    public String getTransOutputItmNm() {
        MNFRouteCardAMImpl am = (MNFRouteCardAMImpl) this.getApplicationModule();
        if (this.getOutptItmId() != null) {
            ViewObjectImpl out = am.getLOVItemOutputNmVO1();
            out.setNamedWhereClauseParam("BindCldId", getCldId());
            out.setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
            out.setNamedWhereClauseParam("BindItmId", getOutptItmId());
            out.setNamedWhereClauseParam("BindOrgId", getOrgId());
            out.setNamedWhereClauseParam("BindSlocId", getSlocId());
            Row[] ar = out.getAllRowsInRange();
            if (ar.length > 0) {
                Object att = ar[0].getAttribute("ItmDesc");
                String val = (att == null ? null : att.toString());
                setAttributeInternal(TRANSSERIALFLAG,(String)ar[0].getAttribute("SerializedFlg") );
                return val;
            }
        }
        return (String) getAttributeInternal(TRANSOUTPUTITMNM);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransOutputItmNm.
     * @param value value to set the  TransOutputItmNm
     */
    public void setTransOutputItmNm(String value) {
        setAttributeInternal(TRANSOUTPUTITMNM, value);
    }

    /**
     * Gets the attribute value for the calculated attribute PendingQty.
     * @return the PendingQty
     */
    public Number getPendingQty() {
        return (Number) getAttributeInternal(PENDINGQTY);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute PendingQty.
     * @param value value to set the  PendingQty
     */
    public void setPendingQty(Number value) {

        setAttributeInternal(PENDINGQTY, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransOutItmQty.
     * @return the TransOutItmQty
     */
    public Number getTransOutItmQty() {
        if ((getAttributeInternal(TRANSOUTITMQTY) == null) || getAttributeInternal(TRANSOUTITMQTY) == 0) {
            String rc_md = (String) resolvEl("#{pageFlowScope.RC_MODE}").toString();
          //  System.out.println("Page Mode Value from transout :" + rc_md);
            Number value = new Number(0);
            if ("A".equals(rc_md)) {

                MNFRouteCardAMImpl am = (MNFRouteCardAMImpl) this.getApplicationModule();
                ViewObjectImpl impl = am.getMnfRcSrcVO1();
                Row currentRow = impl.getCurrentRow();
                Object doc_id_src = currentRow.getAttribute("DocIdSrc");
                if (doc_id_src != null) {
                    ViewObjectImpl outp = am.getLOVOutputItmNmVO1();
                    outp.setNamedWhereClauseParam("BindCldId", getCldId());
                    outp.setNamedWhereClauseParam("BindSlocId", getSlocId());
                    outp.setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
                    outp.setNamedWhereClauseParam("BindOrgId", getOrgId());
                    outp.setNamedWhereClauseParam("BindDocId", doc_id_src);
                    outp.executeQuery();
                    Row[] allRowsInRange = outp.getAllRowsInRange();
                    if (allRowsInRange.length > 0) {
                        Number addVal1 = new Number(0);
                        Number addVal2 = (Number) allRowsInRange[0].getAttribute("PendingOutptQty");
                        value = (Number) allRowsInRange[0].getAttribute("FinalOutptItmQty");
                        this.setPendingQty(addVal2);
                        setAttributeInternal(TRANSOUTITMQTY,
                                             (Number) allRowsInRange[0].getAttribute("FinalOutptItmQty"));
                       // System.out.println("returniing from trns output");
                        //return (Number) allRowsInRange[0].getAttribute("FinalOutptItmQty");
                    }
                }

                // setAttributeInternal(TRANSOUTITMQTY,value);
            } else {
                setAttributeInternal(TRANSOUTITMQTY, (Number) this.getOutptItmQty());
            }
        }
        return (Number) getAttributeInternal(TRANSOUTITMQTY);
    }


    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransOutItmQty.
     * @param value value to set the  TransOutItmQty
     */
    public void setTransOutItmQty(Number value) {
        setAttributeInternal(TRANSOUTITMQTY, value);
      //  System.out.println("inside of setting trnas val");
        if (value != null)
            this.setOutptItmQty(value);
    }

    /**
     * Gets the attribute value for LOC_TYPE using the alias name LocType.
     * @return the LOC_TYPE
     */
    public Integer getLocType() {
        return (Integer) getAttributeInternal(LOCTYPE);
    }

    /**
     * Sets <code>value</code> as attribute value for LOC_TYPE using the alias name LocType.
     * @param value value to set the LOC_TYPE
     */
    public void setLocType(Integer value) {
        setAttributeInternal(LOCTYPE, value);
    }

    /**
     * Gets the attribute value for EO_ID using the alias name EoId.
     * @return the EO_ID
     */
    public Number getEoId() {
        return (Number) getAttributeInternal(EOID);
    }

    /**
     * Sets <code>value</code> as attribute value for EO_ID using the alias name EoId.
     * @param value value to set the EO_ID
     */
    public void setEoId(Number value) {
        setAttributeInternal(EOID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransEoNme.
     * @return the TransEoNme
     */
    public String getTransEoNme() {
        MNFRouteCardAMImpl am = (MNFRouteCardAMImpl) this.getApplicationModule();
        if (this.getEoId() != null) {
            ViewObjectImpl out = am.getLOVSubContractorViewVO1();
            out.setNamedWhereClauseParam("CldIdBind", getCldId());
            out.setNamedWhereClauseParam("HoOrgIdBind", getHoOrgId());
           // out.setNamedWhereClauseParam("OrgIdBind", getOrgId());
            out.setNamedWhereClauseParam("SlocIdBind", getSlocId());
            //Row[] ar = out.getAllRowsInRange();
            Row[] ar = out.getFilteredRows("EoId", getEoId());
            if (ar.length > 0) {
                Object att = ar[0].getAttribute("EoNm");
                setTransBaseCurId((Number) ar[0].getAttribute("CurrIdSp"));
                String val = (att == null ? null : att.toString());
                return val;
            }
        }
        return (String) getAttributeInternal(TRANSEONME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransEoNme.
     * @param value value to set the  TransEoNme
     */
    public void setTransEoNme(String value) {
        setAttributeInternal(TRANSEONME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransLocType.
     * @return the TransLocType
     */
    public String getTransLocType() {
           if(getLocType() != null  && getLocType() == 4)
            return "Y";
        else 
        return (String) getAttributeInternal(TRANSLOCTYPE);
   //     return "N";
  
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransLocType.
     * @param value value to set the  TransLocType
     */
    public void setTransLocType(String value) {
        if(value.equals("Y"))
            setLocType(4);  
        else
        setAttributeInternal(TRANSLOCTYPE, value);
    }

    /**
     * Gets the attribute value for CURR_CONV_FCTR using the alias name CurrConvFctr.
     * @return the CURR_CONV_FCTR
     */
    public Number getCurrConvFctr() {
        return (Number) getAttributeInternal(CURRCONVFCTR);
    }

    /**
     * Sets <code>value</code> as attribute value for CURR_CONV_FCTR using the alias name CurrConvFctr.
     * @param value value to set the CURR_CONV_FCTR
     */
    public void setCurrConvFctr(Number value) {
        setAttributeInternal(CURRCONVFCTR, value);
    }

    /**
     * Gets the attribute value for CURR_ID_SP using the alias name CurrIdSp.
     * @return the CURR_ID_SP
     */
    public Integer getCurrIdSp() {
        return (Integer) getAttributeInternal(CURRIDSP);
    }

    /**
     * Sets <code>value</code> as attribute value for CURR_ID_SP using the alias name CurrIdSp.
     * @param value value to set the CURR_ID_SP
     */
    public void setCurrIdSp(Integer value) {
        setAttributeInternal(CURRIDSP, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransCurrIdSpFctr.
     * @return the TransCurrIdSpFctr
     */
    public String getTransCurrIdSpFctr() {
        MNFRouteCardAMImpl am = (MNFRouteCardAMImpl) this.getApplicationModule();
        if (this.getEoId() != null) {
            ViewObjectImpl out = am.getLOVCurrIdSpFctrVO1();
            out.setNamedWhereClauseParam("BindCldId", getCldId());
            out.setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
            out.setNamedWhereClauseParam("BindOrgId", getOrgId());
            out.setNamedWhereClauseParam("BindCurrId", getTransBaseCurId());
            
            //Row[] ar = out.getAllRowsInRange();
            Row[] ar = out.getFilteredRows("CcCurrIdTxn", getCurrIdSp());
            if (ar.length > 0) {
                Object att = ar[0].getAttribute("CurrDescTxn");
                
                String val = (att == null ? null : att.toString());
                return val;
            }
        }
        return (String) getAttributeInternal(TRANSCURRIDSPFCTR);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransCurrIdSpFctr.
     * @param value value to set the  TransCurrIdSpFctr
     */
    public void setTransCurrIdSpFctr(String value) {
        setAttributeInternal(TRANSCURRIDSPFCTR, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransBaseCurId.
     * @return the TransBaseCurId
     */
    public Number getTransBaseCurId() {
        return (Number) getAttributeInternal(TRANSBASECURID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransBaseCurId.
     * @param value value to set the  TransBaseCurId
     */
    public void setTransBaseCurId(Number value) {
        setAttributeInternal(TRANSBASECURID, value);
    }

    /**
     * Gets the attribute value for ACT_STRT_DT using the alias name ActStrtDt.
     * @return the ACT_STRT_DT
     */
    public Timestamp getActStrtDt() {
        return (Timestamp) getAttributeInternal(ACTSTRTDT);
    }

    /**
     * Sets <code>value</code> as attribute value for ACT_STRT_DT using the alias name ActStrtDt.
     * @param value value to set the ACT_STRT_DT
     */
    public void setActStrtDt(Timestamp value) {
        setAttributeInternal(ACTSTRTDT, value);
    }

    /**
     * Gets the attribute value for ACT_END_DT using the alias name ActEndDt.
     * @return the ACT_END_DT
     */
    public Timestamp getActEndDt() {
        return (Timestamp) getAttributeInternal(ACTENDDT);
    }

    /**
     * Sets <code>value</code> as attribute value for ACT_END_DT using the alias name ActEndDt.
     * @param value value to set the ACT_END_DT
     */
    public void setActEndDt(Timestamp value) {
        setAttributeInternal(ACTENDDT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransShortCloseChk.
     * @return the TransShortCloseChk
     */
    public String getTransShortCloseChk() {
        return (String) getAttributeInternal(TRANSSHORTCLOSECHK);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransShortCloseChk.
     * @param value value to set the  TransShortCloseChk
     */
    public void setTransShortCloseChk(String value) {
        setAttributeInternal(TRANSSHORTCLOSECHK, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransSerialFlag.
     * @return the TransSerialFlag
     */
    public String getTransSerialFlag() {
        return (String) getAttributeInternal(TRANSSERIALFLAG);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransSerialFlag.
     * @param value value to set the  TransSerialFlag
     */
    public void setTransSerialFlag(String value) {
        setAttributeInternal(TRANSSERIALFLAG, value);
    }


    /**
     * Gets the attribute value for the calculated attribute TransProjNme.
     * @return the TransProjNme
     */
    public String getTransProjNme() {
        MNFRouteCardAMImpl am = (MNFRouteCardAMImpl) this.getApplicationModule();
        if (this.getWhId() != null) {
            ViewObjectImpl out = am.getLOVProjectNameVO1();
            out.setNamedWhereClauseParam("BindCldId", getCldId());
            out.setNamedWhereClauseParam("BindSlocId", getSlocId());
            out.setNamedWhereClauseParam("BindOrgId", getOrgId());
            out.setNamedWhereClauseParam("BindWhId", getWhId());
            Row[] ar = out.getFilteredRows("PrjId", getPrjId());
            if (ar.length > 0) {
                Object att = ar[0].getAttribute("ProjNm");
                String val = (att == null ? null : att.toString());
                return val;
            }
        }
        return (String) getAttributeInternal(TRANSPROJNME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransProjNme.
     * @param value value to set the  TransProjNme
     */
    public void setTransProjNme(String value) {
        setAttributeInternal(TRANSPROJNME, value);
    }

    /**
     * Gets the attribute value for PRJ_ID using the alias name PrjId.
     * @return the PRJ_ID
     */
    public String getPrjId() {
        return (String) getAttributeInternal(PRJID);
    }

    /**
     * Sets <code>value</code> as attribute value for PRJ_ID using the alias name PrjId.
     * @param value value to set the PRJ_ID
     */
    public void setPrjId(String value) {
        setAttributeInternal(PRJID, value);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link MnfRcOp.
     */
    public RowIterator getMnfRcOp() {
        return (RowIterator) getAttributeInternal(MNFRCOP);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link MnfRcAttch.
     */
    public RowIterator getMnfRcAttch() {
        return (RowIterator) getAttributeInternal(MNFRCATTCH);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link MnfRcParam.
     */
    public RowIterator getMnfRcParam() {
        return (RowIterator) getAttributeInternal(MNFRCPARAM);
    }


    /**
     * Gets the associated <code>RowIterator</code> using master-detail link MnfRcOpItm.
     */
    public RowIterator getMnfRcOpItm() {
        return (RowIterator) getAttributeInternal(MNFRCOPITM);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link MnfRcBarcode.
     */
    public RowIterator getMnfRcBarcode() {
        return (RowIterator) getAttributeInternal(MNFRCBARCODE);
    }


    /**
     * Gets the associated <code>RowIterator</code> using master-detail link MnfRcSrc.
     */
    public RowIterator getMnfRcSrc() {
        return (RowIterator) getAttributeInternal(MNFRCSRC);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link MnfRcItmStk.
     */
    public RowIterator getMnfRcItmStk() {
        return (RowIterator) getAttributeInternal(MNFRCITMSTK);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link MnfRcOpQcParam.
     */
    public RowIterator getMnfRcOpQcParam() {
        return (RowIterator) getAttributeInternal(MNFRCOPQCPARAM);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LOVUserNameVO1.
     */
    public RowSet getLOVUserNameVO1() {
        return (RowSet) getAttributeInternal(LOVUSERNAMEVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LOVModifiedByVO1.
     */
    public RowSet getLOVModifiedByVO1() {
        return (RowSet) getAttributeInternal(LOVMODIFIEDBYVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LOVRcStatusVO1.
     */
    public RowSet getLOVRcStatusVO1() {
        return (RowSet) getAttributeInternal(LOVRCSTATUSVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LOVRcModeVO1.
     */
    public RowSet getLOVRcModeVO1() {
        return (RowSet) getAttributeInternal(LOVRCMODEVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LOVRcBasisVO1.
     */
    public RowSet getLOVRcBasisVO1() {
        return (RowSet) getAttributeInternal(LOVRCBASISVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LOVRcTypeVO1.
     */
    public RowSet getLOVRcTypeVO1() {
        return (RowSet) getAttributeInternal(LOVRCTYPEVO1);
    }


    /**
     * Gets the view accessor <code>RowSet</code> LOVShiftIdVO1.
     */
    public RowSet getLOVShiftIdVO1() {
        return (RowSet) getAttributeInternal(LOVSHIFTIDVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LOVEmpIdVO1.
     */
    public RowSet getLOVEmpIdVO1() {
        return (RowSet) getAttributeInternal(LOVEMPIDVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LOVWhIdVO1.
     */
    public RowSet getLOVWhIdVO1() {
        return (RowSet) getAttributeInternal(LOVWHIDVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LOVRequirementIdVO1.
     */
    public RowSet getLOVRequirementIdVO1() {
        return (RowSet) getAttributeInternal(LOVREQUIREMENTIDVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LOVSubContractorVO1.
     */
    public RowSet getLOVSubContractorVO1() {
        return (RowSet) getAttributeInternal(LOVSUBCONTRACTORVO1);
    }


    /**
     * Gets the view accessor <code>RowSet</code> LOVCurIdVO1.
     */
    public RowSet getLOVCurIdVO1() {
        return (RowSet) getAttributeInternal(LOVCURIDVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LOVCurrIdSpFctrVO1.
     */
    public RowSet getLOVCurrIdSpFctrVO1() {
        return (RowSet) getAttributeInternal(LOVCURRIDSPFCTRVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LOVProjectNameVO1.
     */
    public RowSet getLOVProjectNameVO1() {
        return (RowSet) getAttributeInternal(LOVPROJECTNAMEVO1);
    }

    /********************    STORED Function    *************************************/

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
      //  System.out.println("Inside Callable Function");
        CallableStatement st = null;
        try {
            st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
         //   System.out.println("Statement is " + st);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                //    System.out.println("Bind Variable is " + bindVars[z]);
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.executeUpdate();
           // System.out.println("Return value is " + st.getObject(1));
            return st.getObject(1);
        } catch (SQLException e) {
            e.printStackTrace();
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }
}

