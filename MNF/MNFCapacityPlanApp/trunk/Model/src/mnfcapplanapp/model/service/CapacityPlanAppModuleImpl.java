package mnfcapplanapp.model.service;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

import javax.el.ELContext;
import javax.el.ValueExpression;

import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import mnfcapplanapp.model.service.common.CapacityPlanAppModule;

import oracle.adf.share.ADFContext;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewCriteriaRow;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Feb 13 19:26:13 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CapacityPlanAppModuleImpl extends ApplicationModuleImpl implements CapacityPlanAppModule {
    /**
     * This is the default constructor (do not remove).
     */
    public CapacityPlanAppModuleImpl() {
    }

    /** Function for Resolve Global pageflowscope Values.
     */
    public Object resolvEl(String data) {
        ADFContext adfCtx = ADFContext.getCurrent();
        ELContext elContext = adfCtx.getELContext();
        ValueExpression valueExp = adfCtx.getExpressionFactory().createValueExpression(elContext, data, Object.class);
        Object Message = valueExp.getValue(elContext);
        return Message;
    }

    /** Function for First Filter Data In Capacity Planning Application.
     * */
    public void filterCapacityPlanApp_Func(String cld_id, Integer sloc_id, String ho_org_id, String org_id) {
        filterSearchcCpln_vw_Func(cld_id, sloc_id, ho_org_id, org_id);
        filterChart_Func(cld_id, sloc_id, ho_org_id, org_id);
    }

    /*********************************Filter Search View***************************************************/
    public void filterSearchcCpln_vw_Func(String cld_id, Integer sloc_id, String ho_org_id, String org_id) {
        ViewObjectImpl cCpln_Vw1 = this.getSearchCCpln_Vw1();
        cCpln_Vw1.setNamedWhereClauseParam("BIND_CLD_ID", cld_id);
        cCpln_Vw1.setNamedWhereClauseParam("BIND_HO_ORG_ID", ho_org_id);
        cCpln_Vw1.setNamedWhereClauseParam("BIND_ORG_ID", org_id);
        cCpln_Vw1.setNamedWhereClauseParam("BIND_SLOC_ID", sloc_id);
        cCpln_Vw1.setNamedWhereClauseParam("BIND_CAP_PLN_DOC_ID", -1);
        cCpln_Vw1.executeQuery();
    }

    /********************************Filter Chart View*****************************************************/
    public void filterChart_Func(String cld_id, Integer sloc_id, String ho_org_id, String org_id) {
        ViewObjectImpl chartCustQty1 = this.getWorkCenterUtilizationChart1();
        chartCustQty1.setNamedWhereClauseParam("BindCldId", cld_id);
        chartCustQty1.setNamedWhereClauseParam("BindHoOrgId", ho_org_id);
        chartCustQty1.setNamedWhereClauseParam("BindOrgId", org_id);
        chartCustQty1.setNamedWhereClauseParam("BindSlocId", sloc_id);
        chartCustQty1.executeQuery();
    }


    /** Function for First Filter Data In Project gantt Chart and Resource Gantt Chart
     * */
    public void filterProjectGanttChart_Func(String cld_id, Integer sloc_id, String ho_org_id, String org_id) {
        ProjectGanttChart_Func(cld_id, sloc_id, ho_org_id, org_id);
        ResourceGanttChart_Func(cld_id, sloc_id, ho_org_id, org_id);
        ScheduleGanttChart_Func(cld_id, sloc_id, ho_org_id, org_id);
    }

    /****************************filter project Gantt Chart View******************************/
    public void ProjectGanttChart_Func(String cld_id, Integer sloc_id, String ho_org_id, String org_id) {
        ViewObjectImpl chartVO1 = this.getProjectGanttChartVO1();
        ViewCriteria criteria = chartVO1.getViewCriteria("ProjectGanttChartVOCriteria");
        chartVO1.applyViewCriteria(criteria);
        chartVO1.setNamedWhereClauseParam("BindCldId", cld_id);
        chartVO1.setNamedWhereClauseParam("BindHoOrgId", ho_org_id);
        chartVO1.setNamedWhereClauseParam("BindOrgId", org_id);
        chartVO1.setNamedWhereClauseParam("BindSlocId", sloc_id);
        chartVO1.executeQuery();
    }

    /****************************filter Resource Gantt Chart View******************************/
    public void ResourceGanttChart_Func(String cld_id, Integer sloc_id, String ho_org_id, String org_id) {
        ViewObjectImpl chartVO1 = this.getResourceWorkCenterVO1();
        chartVO1.setNamedWhereClauseParam("BindCldId", cld_id);
        chartVO1.setNamedWhereClauseParam("BindHoOrgId", ho_org_id);
        chartVO1.setNamedWhereClauseParam("BindOrgId", org_id);
        chartVO1.setNamedWhereClauseParam("BindSlocId", sloc_id);
        chartVO1.executeQuery();
    }

    /****************************filter Schedule Gantt Chart View******************************/
    public void ScheduleGanttChart_Func(String cld_id, Integer sloc_id, String ho_org_id, String org_id) {
        ViewObjectImpl chartVO1 = this.getScheduleWorkCenterVO1();
        chartVO1.setNamedWhereClauseParam("BindCldId", cld_id);
        chartVO1.setNamedWhereClauseParam("BindHoOrgId", ho_org_id);
        chartVO1.setNamedWhereClauseParam("BindOrgId", org_id);
        chartVO1.setNamedWhereClauseParam("BindSlocId", sloc_id);
        chartVO1.executeQuery();
    }


    /**Function for Filter Mnf Cap Plan table in View Mode
     * */
    public void filterMnfCapPln_Func(String cld_id, Integer sloc_id, String ho_org_id, String org_id,
                                     String CapPlnDocId) {
        ViewObjectImpl capPlnVO1 = this.getMnfCapPlnVO1();
        ViewCriteria criteria = capPlnVO1.getViewCriteria("MnfCapPlnVOCriteria");
        capPlnVO1.applyViewCriteria(criteria);
        capPlnVO1.setNamedWhereClauseParam("CapPlanDocIdBindVar", CapPlnDocId);
        capPlnVO1.setNamedWhereClauseParam("CldIdBindVar", cld_id);
        capPlnVO1.setNamedWhereClauseParam("HoOrgIdBindVar", ho_org_id);
        capPlnVO1.setNamedWhereClauseParam("OrgIdBindVar", org_id);
        capPlnVO1.setNamedWhereClauseParam("SlocIdBindVar", sloc_id);
        capPlnVO1.executeQuery();
        performSearchPdoMpp_Func();
    }

    /** Function of Search In Capacity Planning..
     * */
    public void searchCapPlan_Func() {
        Row TrCr = this.getTransientVO1().getCurrentRow();
        ViewObjectImpl cCpln_Vw1 = this.getSearchCCpln_Vw1();
        cCpln_Vw1.setNamedWhereClauseParam("BIND_CLD_ID", TrCr.getAttribute("TransCldId"));
        cCpln_Vw1.setNamedWhereClauseParam("BIND_HO_ORG_ID", TrCr.getAttribute("TransHoOrgId"));
        cCpln_Vw1.setNamedWhereClauseParam("BIND_ORG_ID", TrCr.getAttribute("TransOrgId"));
        cCpln_Vw1.setNamedWhereClauseParam("BIND_SLOC_ID", TrCr.getAttribute("TransSlocId"));
        cCpln_Vw1.setNamedWhereClauseParam("BIND_FROM_DATE", TrCr.getAttribute("TransStartDt"));
        cCpln_Vw1.setNamedWhereClauseParam("BIND_TO_DATE", TrCr.getAttribute("TransEndDt"));
        cCpln_Vw1.setNamedWhereClauseParam("BIND_CAP_PLN_DOC_ID", TrCr.getAttribute("TransPlnDocId"));
        cCpln_Vw1.executeQuery();
    }

    /** Function of Reset In Capacity Planning..
     **/
    public void resetCapPlan_Func() {
        Row TrCr = this.getTransientVO1().getCurrentRow();
        ViewObjectImpl cCpln_Vw1 = this.getSearchCCpln_Vw1();
        cCpln_Vw1.setNamedWhereClauseParam("BIND_CLD_ID", TrCr.getAttribute("TransCldId"));
        cCpln_Vw1.setNamedWhereClauseParam("BIND_HO_ORG_ID", TrCr.getAttribute("TransHoOrgId"));
        cCpln_Vw1.setNamedWhereClauseParam("BIND_ORG_ID", TrCr.getAttribute("TransOrgId"));
        cCpln_Vw1.setNamedWhereClauseParam("BIND_SLOC_ID", TrCr.getAttribute("TransSlocId"));
        cCpln_Vw1.setNamedWhereClauseParam("BIND_CAP_PLN_DOC_ID", -1);
        cCpln_Vw1.executeQuery();
        this.getTransientVO1().executeQuery();
    }

    /** Function for Filter CalendarTypes
     * */
    public void filterCalendarByCalendarTypes_Func(String filterCalendarTypesString, String cld_id, Integer sloc_id,
                                                   String ho_org_id, String org_id) {
        ViewObjectImpl voImpl = this.getMnfCapSfClndrVO1();
        ViewCriteria vc = voImpl.createViewCriteria();
        vc.setName("filterCalendarTypesString");
        ViewCriteriaRow vcRow = vc.createViewCriteriaRow();
        vcRow.setAttribute("ClndrType", "IN (" + filterCalendarTypesString + ")");
        vc.insertRow(vcRow);
        voImpl.applyViewCriteria(vc, true);
        voImpl.executeQuery();
    }

    /** function for Get Currentrow in Calendar
     * */
    public void getCalendarCurrentRow_Func(String activityId, String cld_id, Integer sloc_id, String ho_org_id,
                                           String org_id) {
        RowQualifier rq = new RowQualifier(this.getMnfCapSfClndrVO1());
        rq.setWhereClause("SfCalId='" + activityId + "' and CldId='" + cld_id + "' and HoOrgId='" + ho_org_id +
                          "' and OrgId='" + org_id + "' and SlocId='" + sloc_id + "'");
        Row fr[] = this.getMnfCapSfClndrVO1().getFilteredRows(rq);
        for (Row r : fr) {
            if (!(r.equals(this.getMnfCapSfClndrVO1().getCurrentRow()))) {
                this.getMnfCapSfClndrVO1().setCurrentRow(r);
            }
        }
    }

    /**
     * Method to reset search view
     * **/
    public void performResetPdoMpp_Func() {
        this.getTransientVO1().executeQuery();
        ViewObjectImpl resetVO = this.getPdoMppSearchVO1();
        resetVO.setNamedWhereClauseParam("BindCldId", null);
        resetVO.setNamedWhereClauseParam("BindSlocId", null);
        resetVO.setNamedWhereClauseParam("BindHoOrgId", null);
        resetVO.setNamedWhereClauseParam("BindOrgId", null);
        resetVO.setNamedWhereClauseParam("BindEoId", null);
        resetVO.setNamedWhereClauseParam("BindOutptItmId", null);
        resetVO.setNamedWhereClauseParam("BindPdoId", null);
        resetVO.setNamedWhereClauseParam("BindFrmDt", null);
        resetVO.setNamedWhereClauseParam("BindToDt", null);
        resetVO.executeQuery();
    }

    /**
     * Mtethod to perform search action in search page
     * **/
    public void performSearchPdoMpp_Func() {
        ViewObjectImpl transVO = this.getTransientVO1();
        Row r = transVO.getCurrentRow();
        ViewObjectImpl searchVO = this.getPdoMppSearchVO1();
        searchVO.setNamedWhereClauseParam("BindCldId", r.getAttribute("TransCldId"));
        searchVO.setNamedWhereClauseParam("BindSlocId", r.getAttribute("TransSlocId"));
        searchVO.setNamedWhereClauseParam("BindHoOrgId", r.getAttribute("TransHoOrgId"));
        searchVO.setNamedWhereClauseParam("BindOrgId", r.getAttribute("TransOrgId"));
        searchVO.setNamedWhereClauseParam("BindEoId", r.getAttribute("TransCustId"));
        searchVO.setNamedWhereClauseParam("BindOutptItmId", r.getAttribute("TransProductId"));
        searchVO.setNamedWhereClauseParam("BindPdoId", r.getAttribute("TransProductionOrderDocId"));
        searchVO.setNamedWhereClauseParam("BindFrmDt", r.getAttribute("TransStartDt"));
        searchVO.setNamedWhereClauseParam("BindToDt", r.getAttribute("TransEndDt"));
        searchVO.executeQuery();
    }

    /**
     * method to sellect all the pdo at once
     */
    public void selectAllPdo() {
        RowSetIterator PdoRS = getPdoMppSearchVO1().createRowSetIterator(null);
        while (PdoRS.hasNext()) {
            Row next = PdoRS.next();
            next.setAttribute("TransSelectPdo", "Y");
        }
        PdoRS.closeRowSetIterator();
    }

    /**
     * method to desellect all the pdo at once
     */
    public void unselectAllPdo() {
        RowSetIterator PdoRS = getPdoMppSearchVO1().createRowSetIterator(null);
        while (PdoRS.hasNext()) {
            Row next = PdoRS.next();
            next.setAttribute("TransSelectPdo", "N");
            //  System.out.println(next.getAttribute("SelectPdo"));
        }
        PdoRS.closeRowSetIterator();
    }

    /**Insert Into SRC Table
     * */
    public void insertIntoMnfCapPlnSrc_Func(String cld_id, Integer sloc_id, String ho_org_id, String org_id,
                                            String selectval) {
        if (checkAllSrcOp_Func()) {
            RowQualifier rq = new RowQualifier(this.getPdoMppSearchVO1());
            rq.setWhereClause("CldId='" + cld_id + "' and HoOrgId='" + ho_org_id + "' and OrgId='" + org_id +
                              "' and SlocId='" + sloc_id + "' and TransSelectPdo='" + selectval + "'");
            Row[] fr = this.getPdoMppSearchVO1().getFilteredRows(rq);
            for (Row r : fr) {
                RowQualifier rq1 = new RowQualifier(this.getPdoOperationsVO1());
                rq1.setWhereClause("CldId='" + cld_id + "' and HoOrgId='" + ho_org_id + "' and OrgId='" + org_id +
                                   "' and SlocId='" + sloc_id + "' and DocId='" + r.getAttribute("DocId") + "'");
                Row[] fr1 = this.getPdoOperationsVO1().getFilteredRows(rq1);
                for (Row r1 : fr1) {
                    ViewObjectImpl capPlnSrcVO1 = this.getMnfCapPlnSrcVO1();
                    Row cR = capPlnSrcVO1.createRow();
                    cR.setAttribute("BomId", r1.getAttribute("BomId"));
                    cR.setAttribute("CapPlnDocDt", this.getMnfCapPlnVO1().getCurrentRow().getAttribute("CapPlnDocDt"));
                    cR.setAttribute("CapPlnDocId", this.getMnfCapPlnVO1().getCurrentRow().getAttribute("CapPlnDocId"));
                    cR.setAttribute("CldId", cld_id);
                    cR.setAttribute("DocIdPriority", r1.getAttribute("PdoPriority"));
                    cR.setAttribute("DocIdSrc", r1.getAttribute("DocId"));
                    cR.setAttribute("HoOrgId", ho_org_id);
                    cR.setAttribute("OpId", r1.getAttribute("OpId"));
                    cR.setAttribute("OpSrNo", r1.getAttribute("OpSrNo"));
                    cR.setAttribute("OrgId", org_id);
                    cR.setAttribute("OutptItmId", r1.getAttribute("OutptItmId"));
                    cR.setAttribute("OutptItmQty", r1.getAttribute("OutptItmQty"));
                    cR.setAttribute("SlocId", sloc_id);
                    cR.setAttribute("UsrIdCreate", this.getMnfCapPlnVO1().getCurrentRow().getAttribute("UsrIdCreate"));
                    cR.setAttribute("UsrIdCreateDt",
                                    this.getMnfCapPlnVO1().getCurrentRow().getAttribute("UsrIdCreateDt"));
                    cR.setAttribute("WcId", r1.getAttribute("WcId"));
                    cR.setAttribute("CheckVal", "N");
                    capPlnSrcVO1.insertRow(cR);
                }
            }
        }
    }

    /**Function for check Src table have entry or Not /// Or Remove All Rows
     * */
    public Boolean checkAllSrcOp_Func() {
        Row[] rows = this.getMnfCapPlnSrcVO1().getAllRowsInRange();
        for (int r = 0; r < rows.length; r++)
            if (rows[r] != null)
                rows[r].remove();
        return true;
    }

    /** Insert Into Work Center and Work Station Schedule Table
     * */
    public void insertIntoMnfSchedule_Func(String cld_id, Integer sloc_id, String ho_org_id, String org_id,
                                           String checkVal) {
        if ("true".equals(checkVal)) {
            String checkSchedule_Func =
                getCheckSchedule_Func(sloc_id, cld_id, org_id, ho_org_id,
                                      this.getMnfCapPlnSrcVO1().getCurrentRow().getAttribute("CapPlnDocId").toString(),
                                      this.getMnfCapPlnSrcVO1().getCurrentRow().getAttribute("OpId").toString());
            if ("N".equals(checkSchedule_Func.toString())) {
                Row cRow = this.getMnfCapPlnSrcVO1().getCurrentRow();
                Integer areaID_Func =
                    getReqAreaID_Func(cRow.getAttribute("CldId").toString(), cRow.getAttribute("HoOrgId").toString(),
                                      cRow.getAttribute("OrgId").toString(), cRow.getAttribute("WcId").toString(),
                                      (Integer) cRow.getAttribute("SlocId"));
                String d_Func =
                    getWarehouseID_Func(cRow.getAttribute("CldId").toString(), cRow.getAttribute("HoOrgId").toString(),
                                        cRow.getAttribute("OrgId").toString(), cRow.getAttribute("WcId").toString(),
                                        (Integer) cRow.getAttribute("SlocId"));
                insertIntoWcWsSchdl_Func(cld_id, sloc_id, ho_org_id, org_id, cRow.getAttribute("CapPlnDocId"),
                                         cRow.getAttribute("CapPlnDocDt"), cRow.getAttribute("DocIdSrc"),
                                         cRow.getAttribute("OutptItmId"), cRow.getAttribute("OutptItmQty"),
                                         cRow.getAttribute("DocIdPriority"), cRow.getAttribute("BomId"),
                                         cRow.getAttribute("OpId"), cRow.getAttribute("OpSrNo"),
                                         cRow.getAttribute("WcId"), "WS", d_Func, areaID_Func);
            }
        } else {
            Row dRow = this.getMnfCapPlnSrcVO1().getCurrentRow();
            RowQualifier rq = new RowQualifier(this.getMnfCapPlnSchdlVO1());
            rq.setWhereClause("CldId='" + cld_id + "' and HoOrgId='" + ho_org_id + "' and OrgId='" + org_id +
                              "' and SlocId='" + sloc_id + "' and CapPlnDocId='" + dRow.getAttribute("CapPlnDocId") +
                              "' and DocIdSrc='" + dRow.getAttribute("DocIdSrc") + "' and OutptItmId='" +
                              dRow.getAttribute("OutptItmId") + "' and OpId='" + dRow.getAttribute("OpId") +
                              "' and OpSrNo='" + dRow.getAttribute("OpSrNo") + "'");
            Row[] fr = this.getMnfCapPlnSchdlVO1().getFilteredRows(rq);
            for (Row r : fr) {
                r.remove();
            }
        }
    }

    public void insertIntoWcWsSchdl_Func(String cld_id, Integer sloc_id, String ho_org_id, String org_id,
                                         Object CapPlnDocId, Object CapPlnDocDt, Object DocIdSrc, Object OutptItmId,
                                         Object OutptItmQty, Object DocIdPriority, Object BomId, Object OpId,
                                         Object OpSrNo, Object WcId, Object WsId, String WhId, Integer RqmtAreaId) {
        ViewObjectImpl ShdlVO = this.getMnfCapPlnSchdlVO1();
        Row cR = ShdlVO.createRow();
        cR.setAttribute("CldId", cld_id);
        cR.setAttribute("SlocId", sloc_id);
        cR.setAttribute("HoOrgId", ho_org_id);
        cR.setAttribute("OrgId", org_id);
        cR.setAttribute("CapPlnDocId", CapPlnDocId);
        cR.setAttribute("CapPlnDocDt", CapPlnDocDt);
        cR.setAttribute("DocIdSrc", DocIdSrc);
        cR.setAttribute("OutptItmId", OutptItmId);
        cR.setAttribute("OutptItmQty", OutptItmQty);
        cR.setAttribute("DocIdPriority", DocIdPriority);
        cR.setAttribute("BomId", BomId);
        cR.setAttribute("OpId", OpId);
        cR.setAttribute("OpSrNo", OpSrNo);
        cR.setAttribute("WcId", WcId);
        cR.setAttribute("WsId", WsId);
        cR.setAttribute("EmpId", 0);
        cR.setAttribute("ShiftId", "SHIFT");
        cR.setAttribute("RqmtAreaId", RqmtAreaId);
        cR.setAttribute("WhId", WhId);
        ShdlVO.insertRow(cR);
    }

    /** Check for Entry done for scheduling or not
     **/
    public String getCheckSchedule_Func(Integer slocId, String CldId, String OrgId, String HoOrgId, String DocId,
                                        String opId) {
        ViewObjectImpl mnfSchedVO = this.getMnfCapPlnSchdlVO1();
        mnfSchedVO.executeQuery();
        RowQualifier rq = new RowQualifier(mnfSchedVO);
        rq.setWhereClause("SlocId=" + slocId + " and CldId='" + CldId + "' and OrgId='" + OrgId + "' and HoOrgId='" +
                          HoOrgId + "' and CapPlnDocId='" + DocId + "' and OpId='" + opId + "'");
        Row fltrdrow[] = mnfSchedVO.getFilteredRows(rq);
        if (fltrdrow.length > 0) {
            return "Y";
        } else {
            return "N";
        }
    }


    /*---------------------------------------------Work Flow Setup---------------------------------------------------*/
    /*------------------------Declaration of Type Oracle---------------------------*/
    private static int NUMBER = Types.INTEGER;
    private static int NUMERIC = Types.NUMERIC;
    private static int VARCHAR = Types.VARCHAR;

    /**
     * Function to call a database function .
     * */
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {

        CallableStatement st = null;
        try {
            // 1. Create a JDBC CallabledStatement
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            // 2. Register the first bind variable for the return value
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                // 3. Loop over values for the bind variables passed in, if any
                for (int z = 0; z < bindVars.length; z++) {
                    // 4. Set the value of user-supplied bind vars in the stmt
                    //   System.out.println("bindVars " + z + " " + bindVars[z]);
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            // 5. Set the value of user-supplied bind vars in the stmt
            st.executeUpdate();
            // 6. Return the value of the first bind variable
            //  System.out.println("Function return " + st.getObject(1));
            return st.getObject(1);
        } catch (Exception e) {
            e.printStackTrace();
            //   System.out.println("In Exception exch and Op and generate-->");

            String msg = e.getMessage();
            //  System.out.println(msg);
            FacesMessage ermsg = new FacesMessage(msg);
            ermsg.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, ermsg);
            return null;
        } finally {
            if (st != null) {
                try {
                    // 7. Close the statement
                    st.close();
                } catch (SQLException e) {
                    throw new JboException(e.getMessage());
                }
            }
        }
    }

    /**
     * Generalized method used to display the facesmessages.
     * Created by Vishal Kumar on 09-09-2014.
     * @param msgHdr is to set the header for message dialog
     * @param msgDtl is to set if further detail information in meassage is required.
     * @param msgSeverity is to set severity mode.
     * @param msgMode is kept to incorporate conditional activities.
     * **/
    public void showFacesMsg(String msgHdr, String msgDtl, javax.faces.application.FacesMessage.Severity msgSeverity,
                             String msgMode) {
        FacesMessage msg = new FacesMessage(msgHdr);
        msg.setDetail(msgDtl);
        msg.setSeverity(msgSeverity);
        FacesContext.getCurrentInstance().addMessage(null, msg);
    }

    public Object resolvElDCMsg(String data) {
        ADFContext adfCtx = ADFContext.getCurrent();
        ELContext elContext = adfCtx.getELContext();
        ValueExpression valueExp = adfCtx.getExpressionFactory().createValueExpression(elContext, data, Object.class);
        return valueExp.getValue(elContext);
    }

    /**
     * Method used to call work flow function.
     * calls db functions APP.WF_GET_USR_LEVEL & APP.WF_INS_TXN
     * Created by Vishal Kumar on 09-09-2014.
     * **/

    public String callWfFunctions() {
        String cldId = this.getMnfCapPlnVO1().getCurrentRow().getAttribute("CldId").toString();
        Integer slcId = (Integer) this.getMnfCapPlnVO1().getCurrentRow().getAttribute("SlocId");
        String orgId = this.getMnfCapPlnVO1().getCurrentRow().getAttribute("OrgId").toString();
        Integer usrId = (Integer) this.getMnfCapPlnVO1().getCurrentRow().getAttribute("UsrIdCreate");
        String txnId = this.getMnfCapPlnVO1().getCurrentRow().getAttribute("CapPlnDocId").toString();
        Integer docId = 26502;
        Integer docTypId = 0;
        String wfId = getWfId();
        Object level;
        try {
            level = callStoredFunction(NUMBER, "APP.WF_GET_USR_LEVEL(?,?,?,?,?,?,?)", new Object[] {
                                       slcId, cldId, orgId, usrId, wfId, docId, docTypId
            });
            callStoredFunction(NUMBER, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                               slcId, cldId, orgId, docId, docTypId, wfId, txnId, usrId, usrId, level, level, "I", "A",
                               0
            });
        } catch (Exception nfe) {
            showFacesMsg(resolvElDCMsg("#{bundle['MSG.1113']}").toString(), null, FacesMessage.SEVERITY_ERROR, null);
            nfe.printStackTrace();
        }
        return null;
    }

    /**
     * Method used to get the Work flow id for a document.
     * Created by Vishal Kumar on 09-09-2014.
     * **/

    public String getWfId() {
        String cldId = this.getMnfCapPlnVO1().getCurrentRow().getAttribute("CldId").toString();
        Integer slcId = (Integer) this.getMnfCapPlnVO1().getCurrentRow().getAttribute("SlocId");
        String orgId = this.getMnfCapPlnVO1().getCurrentRow().getAttribute("OrgId").toString();
        Integer docId = 26502;
        Integer docTypId = 0;
        try {
            return callStoredFunction(VARCHAR, "APP.WF_GET_ID(?,?,?,?,?)", new Object[] {
                                      slcId, cldId, orgId, docId, docTypId }).toString();
        } catch (Exception e) {
            e.printStackTrace();
            StringBuilder saveMsg = new StringBuilder("<html><body><p><b>Error in getting Work Flow Details. </b></p>");
            saveMsg.append("</body></html>");
            showFacesMsg(saveMsg.toString(), null, FacesMessage.SEVERITY_ERROR, null);
        }
        return "0";
    }

    /**
     * Method created to call DB fucntion to get the user at which the document is pending
     * Created by Vishal Kumar on 09-09-2014.
     * **/

    public Integer getDocUsrFromWF() {
        String cldId = this.getMnfCapPlnVO1().getCurrentRow().getAttribute("CldId").toString();
        Integer slcId = (Integer) this.getMnfCapPlnVO1().getCurrentRow().getAttribute("SlocId");
        String orgId = this.getMnfCapPlnVO1().getCurrentRow().getAttribute("OrgId").toString();
        Integer usrId = (Integer) this.getMnfCapPlnVO1().getCurrentRow().getAttribute("UsrIdCreate");
        String txnId = this.getMnfCapPlnVO1().getCurrentRow().getAttribute("CapPlnDocId").toString();
        Integer docId = 26502;
        Integer docTypId = 0;
        Object fnRetVal;
        try {
            fnRetVal = callStoredFunction(NUMBER, "APP.WF_GET_CUR_USR(?,?,?,?,?,?)", new Object[] {
                                          slcId, cldId, orgId, docId, txnId, docTypId
            });
            if (fnRetVal != null) {
                return Integer.parseInt(fnRetVal.toString());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        showFacesMsg("Error while fetching user work flow details", null, FacesMessage.SEVERITY_ERROR, null);
        return 0;
    }

    /*---------------------------------Get User Name for Given UserId-------------------------------------*/
    public String getUserName(Integer u_Id, Integer slc_id) {
        String uname = "";
        ViewObjectImpl impl = this.getLOVUserNmWF1();
        impl.setNamedWhereClauseParam("UsrIdBindVar", u_Id);
        impl.setNamedWhereClauseParam("SlocIDBindVar", slc_id);
        impl.executeQuery();
        Row[] allRowsInRange = impl.getAllRowsInRange();
        if (allRowsInRange.length > 0) {
            Object a = allRowsInRange[0].getAttribute("UsrName");
            String s = (a == null ? null : a.toString());
            uname = s;
        }
        return uname;
    }

    /*---------------------------------After Approval Change Status Function----------------------------*/
    public void updateWfStatus(String wf_mode, String cld_id, Integer sloc_id, String ho_org_id, String org_id,
                               String doc_txn_id) {
        //wf_mode : V - revert, I - Initialize, F - Forwarded, A - Approved, R - Reject
        ViewObjectImpl impl = this.getMnfCapPlnVO1();
        Row r = impl.getCurrentRow();
        if ("I".equals(wf_mode)) {
            r.setAttribute("CapPlnMode", 47);
        }
        if ("F".equals(wf_mode)) {
            r.setAttribute("CapPlnMode", 46);
        } else if ("A".equals(wf_mode)) {
            r.setAttribute("CapPlnStat", 41);
            r.setAttribute("CapPlnMode", 43);
        } else if ("R".equals(wf_mode)) {
            r.setAttribute("CapPlnMode", 45);
        }
        this.getDBTransaction().commit();
    }

    /** Function for Auto Check Production Orders In View Mode
     **/
    public void autoSelectPdoMppInViewMode_Func(String cld_id, Integer sloc_id, String ho_org_id, String org_id) {
        Set<String> setDocIdSrc = new HashSet<String>();
        RowSetIterator srcRS = getMnfCapPlnSrcVO1().createRowSetIterator(null);
        while (srcRS.hasNext()) {
            Row next = srcRS.next();
            setDocIdSrc.add(next.getAttribute("DocIdSrc").toString());
        }
        srcRS.closeRowSetIterator();
        Iterator<String> iterSrc = setDocIdSrc.iterator();
        while (iterSrc.hasNext()) {
            String itrSrc = iterSrc.next();
            RowQualifier rq = new RowQualifier(this.getPdoMppSearchVO1());
            rq.setWhereClause("CldId='" + cld_id + "' and HoOrgId='" + ho_org_id + "' and OrgId='" + org_id +
                              "' and SlocId='" + sloc_id + "' and DocId='" + itrSrc + "'");
            Row[] fr = this.getPdoMppSearchVO1().getFilteredRows(rq);
            for (Row r : fr) {
                r.setAttribute("TransSelectPdo", "Y");
            }
        }
    }

    /**Function for Select/Unselect All Operation
     * */
    public void selectAllOperation_Func() {
        RowSetIterator srcRS = getMnfCapPlnSrcVO1().createRowSetIterator(null);
        while (srcRS.hasNext()) {
            Row cRow = srcRS.next();
            cRow.setAttribute("CheckVal", "Y");
            Integer areaID_Func =
                getReqAreaID_Func(cRow.getAttribute("CldId").toString(), cRow.getAttribute("HoOrgId").toString(),
                                  cRow.getAttribute("OrgId").toString(), cRow.getAttribute("WcId").toString(),
                                  (Integer) cRow.getAttribute("SlocId"));
            String d_Func =
                getWarehouseID_Func(cRow.getAttribute("CldId").toString(), cRow.getAttribute("HoOrgId").toString(),
                                    cRow.getAttribute("OrgId").toString(), cRow.getAttribute("WcId").toString(),
                                    (Integer) cRow.getAttribute("SlocId"));
            insertIntoWcWsSchdl_Func(cRow.getAttribute("CldId").toString(),
                                     Integer.parseInt(cRow.getAttribute("SlocId").toString()),
                                     cRow.getAttribute("HoOrgId").toString(), cRow.getAttribute("OrgId").toString(),
                                     cRow.getAttribute("CapPlnDocId"), cRow.getAttribute("CapPlnDocDt"),
                                     cRow.getAttribute("DocIdSrc"), cRow.getAttribute("OutptItmId"),
                                     cRow.getAttribute("OutptItmQty"), cRow.getAttribute("DocIdPriority"),
                                     cRow.getAttribute("BomId"), cRow.getAttribute("OpId"), cRow.getAttribute("OpSrNo"),
                                     cRow.getAttribute("WcId"), "WS", d_Func, areaID_Func);
        }
        srcRS.closeRowSetIterator();
    }

    public void unselectAllOperation_Func() {
        RowSetIterator srcRS = getMnfCapPlnSrcVO1().createRowSetIterator(null);
        while (srcRS.hasNext()) {
            Row next = srcRS.next();
            next.setAttribute("CheckVal", "N");
            Row[] rows = this.getMnfCapPlnSchdlVO1().getAllRowsInRange();
            for (int r = 0; r < rows.length; r++)
                if (rows[r] != null)
                    rows[r].remove();
        }
        srcRS.closeRowSetIterator();
    }

    /*---------------------------------Generate Schedulling By Algorithm------------------------*/
    public Integer generateScheduleAlgo_Func(String cld_id, Integer sloc_id, String ho_org_id, String org_id) {
        this.getDBTransaction().postChanges();
        Row cR = this.getMnfCapPlnVO1().getCurrentRow();
        Integer retVal = 0;
        try {
            retVal = (Integer) this.callStoredFunction(Types.INTEGER, "mnf.fn_mnf_cap_pln_schdl_algos(?,?,?,?,?,?)", new Object[] {
                                                       cld_id, sloc_id, ho_org_id, org_id,
                                                       cR.getAttribute("CapPlnDocId"), cR.getAttribute("SchdlAlgthm")
            });
            System.out.println("Value of Return : " + retVal);
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("Error in Function Found...." + e.getMessage());
        }
        System.out.println("Value of Return : " + retVal);
        this.getMnfCapPlnSchdlVO1().executeQuery();
        return retVal;
    }

    /*------------------------------Filter Opertaion for schedule gantt chart-------------------------*/
    public void filterScheduleOperation_Func(String RnId) {
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        String ho_org_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        String org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        RowQualifier rq = new RowQualifier(this.getLOVfilterScheduleOPeration1());
        rq.setWhereClause("CldId='" + cld_id + "' and HoOrgId='" + ho_org_id + "' and OrgId='" + org_id +
                          "' and SlocId='" + sloc_id + "' and Rn='" + RnId + "'");
        Row fr[] = this.getLOVfilterScheduleOPeration1().getFilteredRows(rq);
        for (Row r : fr) {
            String WcId = r.getAttribute("WcId").toString();
            String WsId = r.getAttribute("WsId").toString();
            String ShiftId = r.getAttribute("ShiftId").toString();
            ViewObjectImpl opImpl = this.getMnfCapPlnSchdl_2VO1();
            ViewCriteria opCr = opImpl.getViewCriteria("MnfCapPlnSchdl_2VOCriteria");
            opImpl.applyViewCriteria(opCr);
            opImpl.setNamedWhereClauseParam("BindShiftId", ShiftId);
            opImpl.setNamedWhereClauseParam("BindWcId", WcId);
            opImpl.setNamedWhereClauseParam("BindWsId", WsId);
            opImpl.setNamedWhereClauseParam("BindCldId", cld_id);
            opImpl.setNamedWhereClauseParam("BindHoOrgId", ho_org_id);
            opImpl.setNamedWhereClauseParam("BindOrgId", org_id);
            opImpl.setNamedWhereClauseParam("BindSlocId", sloc_id);
            opImpl.executeQuery();
        }
    }

    /*-------------------------------Function for drag and Drop in schedule gantt chart---------------------------*/
    public Integer rescheduleOpeartion_FUNC(String taskId, Timestamp newStrtDate, Timestamp newEndDate,
                                            String fromResourceId, String toResourceId) {
        String op_id = null;
        String output_itm_id = null;
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        String ho_org_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        String org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        RowQualifier rq = new RowQualifier(this.getLOVfilterScheduleOPeration1());
        rq.setWhereClause("CldId='" + cld_id + "' and HoOrgId='" + ho_org_id + "' and OrgId='" + org_id +
                          "' and SlocId='" + sloc_id + "' and Rn='" + taskId + "'");
        Row fr[] = this.getLOVfilterScheduleOPeration1().getFilteredRows(rq);
        for (Row r : fr) {
            op_id = r.getAttribute("OpId").toString();
            output_itm_id = r.getAttribute("OutptItmId").toString();
        }
        String[] sourceVal = fromResourceId.split("-");
        String fromWc = sourceVal[0];
        String fromWs = sourceVal[1];
        String fromShift = sourceVal[2];
        String[] destVal = toResourceId.split("-");
        String toWc = destVal[0];
        String toWs = destVal[1];
        String toShift = destVal[2];
        Integer retVal = 0;
        try {
            retVal =
                (Integer) this.callStoredFunction(Types.INTEGER,
                                                  "mnf.fn_mnf_cap_pln_schdl_manual(?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                  cld_id, sloc_id, ho_org_id, org_id, newStrtDate, newEndDate, fromWs,
                                                  toWs, toWc, toShift, op_id, output_itm_id
            });
            System.out.println("Value of Return : " + retVal);
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("Error in Function Found...." + e.getMessage());
        }
        if (retVal == 1) {
            this.getDBTransaction().commit();
            this.getMnfCapPlnSchdlVO1().executeQuery();
        }
        return retVal;
    }

    /*-----------------------------Function for generate Job Card---------------------------------------------*/
    public void generateJobCard_Func() {
        Integer retVal = 0;
        String jc_remark = "Job Card Generated from Capacity Planning";
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        String ho_org_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        String org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        RowSetIterator schdl = getMnfCapPlnSchdlVO1().createRowSetIterator(null);
        while (schdl.hasNext()) {
            Row next = schdl.next();
            try {
                retVal =
                    (Integer) this.callStoredFunction(Types.INTEGER,
                                                      "mnf.fn_mnf_gen_jc_rc(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                      cld_id, sloc_id, ho_org_id, org_id, next.getAttribute("DocIdSrc"),
                                                      26001, new Timestamp(System.currentTimeMillis()),
                                                      next.getAttribute("UsrIdCreate"),
                                                      next.getAttribute("UsrIdCreateDt"), 105,
                                                      next.getAttribute("OpId"), next.getAttribute("OpSrNo"),
                                                      next.getAttribute("OutptItmId"), next.getAttribute("OutptItmQty"),
                                                      this.getMnfCapPlnVO1().getCurrentRow().getAttribute("FyId"),
                                                      jc_remark, next.getAttribute("ShiftId"),
                                                      next.getAttribute("WcId"), next.getAttribute("WsId"), 3,
                                                      next.getAttribute("StrtTm"), next.getAttribute("EndTm"),
                                                      next.getAttribute("EmpId"), next.getAttribute("RqmtAreaId"),
                                                      next.getAttribute("WhId"), next.getAttribute("OutptItmQty")
                });
                System.out.println("Value of Return : " + retVal);
            } catch (Exception e) {
                e.printStackTrace();
                System.out.println("Error in Function Found...." + e.getMessage());
            }
        }
        schdl.closeRowSetIterator();
    }

    /*---------------------Function to get Req. Area ID----------------------------------*/
    public Integer getReqAreaID_Func(String BIND_CLD_ID, String BIND_HO_ORG_ID, String BIND_ORG_ID, String BIND_WC_ID,
                                     Integer BIND_SLOC_ID) {
        ViewObjectImpl areaID1 = this.getLOVReqAreaID1();
        areaID1.setNamedWhereClauseParam("BIND_CLD_ID", BIND_CLD_ID);
        areaID1.setNamedWhereClauseParam("BIND_HO_ORG_ID", BIND_HO_ORG_ID);
        areaID1.setNamedWhereClauseParam("BIND_ORG_ID", BIND_ORG_ID);
        areaID1.setNamedWhereClauseParam("BIND_WC_ID", BIND_WC_ID);
        areaID1.setNamedWhereClauseParam("BIND_SLOC_ID", BIND_SLOC_ID);
        areaID1.executeQuery();
        Row[] allRowsInRange = areaID1.getAllRowsInRange();
        if (allRowsInRange.length > 0) {
            Integer ReqVal = (Integer) allRowsInRange[0].getAttribute("RqmtAreaId");
            return ReqVal;
        } else {
            return 0;
        }
    }

    /*---------------------Function to get warehouse. Area ID----------------------------------*/
    public String getWarehouseID_Func(String BIND_CLD_ID, String BIND_HO_ORG_ID, String BIND_ORG_ID, String BIND_WC_ID,
                                      Integer BIND_SLOC_ID) {
        ViewObjectImpl areaID1 = this.getLOVWhId1();
        areaID1.setNamedWhereClauseParam("BIND_CLD_ID", BIND_CLD_ID);
        areaID1.setNamedWhereClauseParam("BIND_HO_ORG_ID", BIND_HO_ORG_ID);
        areaID1.setNamedWhereClauseParam("BIND_ORG_ID", BIND_ORG_ID);
        areaID1.setNamedWhereClauseParam("BIND_WC_ID", BIND_WC_ID);
        areaID1.setNamedWhereClauseParam("BIND_SLOC_ID", BIND_SLOC_ID);
        areaID1.executeQuery();
        Row[] allRowsInRange = areaID1.getAllRowsInRange();
        if (allRowsInRange.length > 0) {
            String ReqVal = (String) allRowsInRange[0].getAttribute("DfltWh");
            return ReqVal;
        } else {
            return "0";
        }
    }

    /*************************************************END*************************************************/

    /**
     * Container's getter for TransientVO1.
     * @return TransientVO1
     */
    public ViewObjectImpl getTransientVO1() {
        return (ViewObjectImpl) findViewObject("TransientVO1");
    }

    /**
     * Container's getter for MnfCapSfClndrVO1.
     * @return MnfCapSfClndrVO1
     */
    public ViewObjectImpl getMnfCapSfClndrVO1() {
        return (ViewObjectImpl) findViewObject("MnfCapSfClndrVO1");
    }

    /**
     * Container's getter for LOVCalEntryTypeVO1.
     * @return LOVCalEntryTypeVO1
     */
    public ViewObjectImpl getLOVCalEntryType1() {
        return (ViewObjectImpl) findViewObject("LOVCalEntryType1");
    }

    /**
     * Container's getter for MnfCapPlnVO1.
     * @return MnfCapPlnVO1
     */
    public ViewObjectImpl getMnfCapPlnVO1() {
        return (ViewObjectImpl) findViewObject("MnfCapPlnVO1");
    }

    /**
     * Container's getter for PdoMppSearchVO1.
     * @return PdoMppSearchVO1
     */
    public ViewObjectImpl getPdoMppSearchVO1() {
        return (ViewObjectImpl) findViewObject("PdoMppSearchVO1");
    }

    /**
     * Container's getter for MnfCapPlnSrcVO1.
     * @return MnfCapPlnSrcVO1
     */
    public ViewObjectImpl getMnfCapPlnSrcVO1() {
        return (ViewObjectImpl) findViewObject("MnfCapPlnSrcVO1");
    }

    /**
     * Container's getter for MnfCapPlnTOMnfCapPlnSrcVL1.
     * @return MnfCapPlnTOMnfCapPlnSrcVL1
     */
    public ViewLinkImpl getMnfCapPlnTOMnfCapPlnSrcVL1() {
        return (ViewLinkImpl) findViewLink("MnfCapPlnTOMnfCapPlnSrcVL1");
    }


    /**
     * Container's getter for LOVSchdlPersnInchrgeDisp1.
     * @return LOVSchdlPersnInchrgeDisp1
     */
    public ViewObjectImpl getLOVSchdlPersnInchrgeDisp1() {
        return (ViewObjectImpl) findViewObject("LOVSchdlPersnInchrgeDisp1");
    }

    /**
     * Container's getter for LOVSchdlShiftDisp1.
     * @return LOVSchdlShiftDisp1
     */
    public ViewObjectImpl getLOVSchdlShiftDisp1() {
        return (ViewObjectImpl) findViewObject("LOVSchdlShiftDisp1");
    }

    /**
     * Container's getter for LOVSchdlWcDisp1.
     * @return LOVSchdlWcDisp1
     */
    public ViewObjectImpl getLOVSchdlWcDisp1() {
        return (ViewObjectImpl) findViewObject("LOVSchdlWcDisp1");
    }

    /**
     * Container's getter for LOVSchdlWsDisp1.
     * @return LOVSchdlWsDisp1
     */
    public ViewObjectImpl getLOVSchdlWsDisp1() {
        return (ViewObjectImpl) findViewObject("LOVSchdlWsDisp1");
    }

    /**
     * Container's getter for SearchCCpln_Vw1.
     * @return SearchCCpln_Vw1
     */
    public ViewObjectImpl getSearchCCpln_Vw1() {
        return (ViewObjectImpl) findViewObject("SearchCCpln_Vw1");
    }

    /**
     * Container's getter for PdoOperationsVO1.
     * @return PdoOperationsVO1
     */
    public ViewObjectImpl getPdoOperationsVO1() {
        return (ViewObjectImpl) findViewObject("PdoOperationsVO1");
    }

    /**
     * Container's getter for LOVUserNmWF1.
     * @return LOVUserNmWF1
     */
    public ViewObjectImpl getLOVUserNmWF1() {
        return (ViewObjectImpl) findViewObject("LOVUserNmWF1");
    }


    /**
     * Container's getter for MnfCapPlnSchdlVO2.
     * @return MnfCapPlnSchdlVO2
     */
    public ViewObjectImpl getMnfCapPlnSchdlVO1() {
        return (ViewObjectImpl) findViewObject("MnfCapPlnSchdlVO1");
    }

    /**
     * Container's getter for MnfCapPlnTOMnfCapPlnSchdlVL1.
     * @return MnfCapPlnTOMnfCapPlnSchdlVL1
     */
    public ViewLinkImpl getMnfCapPlnTOMnfCapPlnSchdlVL1() {
        return (ViewLinkImpl) findViewLink("MnfCapPlnTOMnfCapPlnSchdlVL1");
    }

    /**
     * Container's getter for ProjectGanttChartVO1.
     * @return ProjectGanttChartVO1
     */
    public ViewObjectImpl getProjectGanttChartVO1() {
        return (ViewObjectImpl) findViewObject("ProjectGanttChartVO1");
    }

    /**
     * Container's getter for WorkCenterUtilizationChart1.
     * @return WorkCenterUtilizationChart1
     */
    public ViewObjectImpl getWorkCenterUtilizationChart1() {
        return (ViewObjectImpl) findViewObject("WorkCenterUtilizationChart1");
    }

    /**
     * Container's getter for ResourceWorkCenterVO1.
     * @return ResourceWorkCenterVO1
     */
    public ViewObjectImpl getResourceWorkCenterVO1() {
        return (ViewObjectImpl) findViewObject("ResourceWorkCenterVO1");
    }

    /**
     * Container's getter for ScheduleWorkCenterVO1.
     * @return ScheduleWorkCenterVO1
     */
    public ViewObjectImpl getScheduleWorkCenterVO1() {
        return (ViewObjectImpl) findViewObject("ScheduleWorkCenterVO1");
    }


    /**
     * Container's getter for MnfCapPlnSchdl_2VO1.
     * @return MnfCapPlnSchdl_2VO1
     */
    public ViewObjectImpl getMnfCapPlnSchdl_2VO1() {
        return (ViewObjectImpl) findViewObject("MnfCapPlnSchdl_2VO1");
    }

    /**
     * Container's getter for LOVfilterScheduleOPeration1.
     * @return LOVfilterScheduleOPeration1
     */
    public ViewObjectImpl getLOVfilterScheduleOPeration1() {
        return (ViewObjectImpl) findViewObject("LOVfilterScheduleOPeration1");
    }

    /**
     * Container's getter for LOVReqAreaID1.
     * @return LOVReqAreaID1
     */
    public ViewObjectImpl getLOVReqAreaID1() {
        return (ViewObjectImpl) findViewObject("LOVReqAreaID1");
    }

    /**
     * Container's getter for LOVWhId1.
     * @return LOVWhId1
     */
    public ViewObjectImpl getLOVWhId1() {
        return (ViewObjectImpl) findViewObject("LOVWhId1");
    }

    /**
     * Container's getter for LOVgenJobCard1.
     * @return LOVgenJobCard1
     */
    public ViewObjectImpl getLOVgenJobCard1() {
        return (ViewObjectImpl) findViewObject("LOVgenJobCard1");
    }

    /**
     * Container's getter for MnfCapplnTOLOVGenJobCard1.
     * @return MnfCapplnTOLOVGenJobCard1
     */
    public ViewLinkImpl getMnfCapplnTOLOVGenJobCard1() {
        return (ViewLinkImpl) findViewLink("MnfCapplnTOLOVGenJobCard1");
    }
}

