package svcdashboardapp.model.services;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;

import java.util.ArrayList;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewObjectImpl;

import oracle.jdbc.OracleTypes;

import svcdashboardapp.model.ds.TickerRowDS;
import svcdashboardapp.model.services.common.SvcDashboardAM;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Dec 15 12:10:36 PST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SvcDashboardAMImpl extends ApplicationModuleImpl implements SvcDashboardAM {
    /**
     * This is the default constructor (do not remove).
     */
    private static ADFLogger adfLog = ADFLogger.createADFLogger(SvcDashboardAMImpl.class);

    public SvcDashboardAMImpl() {
    }

    /**
     * Method to Get SlocId
     * @return
     */
    public Integer getSlocId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
    }

    /**
     * Method to Get OrgId
     * @return
     */
    public String getOrgId() {
        return resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
    }

    /**
     * Method to Get HoOrgId
     * @return
     */
    public String getHoOrgId() {
        return resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
    }

    /**
     * Method to Get CldId
     * @return
     */
    public String getCldId() {
        return resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
    }

    /**
     * Method to Get UsrId
     * @return
     */
    public String getUsrId() {
        return resolvEl("#{pageFlowScope.GLBL_APP_USR}");
    }

    public String getTkrLableName(Integer tkrPos) {
        String tkrId = null;
        String tkrName = null;
        ViewObjectImpl tkrUseVo = this.getSvcTkrUsr1();
        tkrUseVo.executeQuery();
        RowQualifier rq = new RowQualifier(tkrUseVo);
        rq.setWhereClause("CldId = '" + this.getCldId() + "' AND  SlocId = " + this.getSlocId() + " AND TkrPos = " +
                          tkrPos + "  AND OrgId ='" + this.getOrgId() + "' AND UsrId = " + this.getUsrId());
        Row[] filteredRows = tkrUseVo.getFilteredRows(rq);
        if (filteredRows.length > 0) {
            tkrId = filteredRows[0].getAttribute("TkrId").toString();
        }
        if (tkrId != null) {
            Row[] mmtkr = this.getSvcGlblTkr1().getFilteredRows("TkrId", tkrId);
            if (mmtkr.length > 0) {
                tkrName = mmtkr[0].getAttribute("TkrNm").toString();
            }
        }
        return tkrName;
    }


    /**Method to resolve expression- returns String value*/
    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }

    /**
     * Method to fetch all the tickers
     * @return
     */
    public ArrayList<TickerRowDS> getTickerList() {

        adfLog.info(" in the TickerList Method");
        ArrayList<TickerRowDS> list = new ArrayList<TickerRowDS>();
        ViewObjectImpl impl = this.getSvcTkrUsr1();
        ViewObjectImpl mmtkr = this.getSvcTkr1();
        RowQualifier rq = new RowQualifier(impl);
        rq.setWhereClause("CldId = '" + this.getCldId() + "' AND  SlocId = " + this.getSlocId() + " AND OrgId ='" +
                          this.getOrgId() + "' AND UsrId = " + this.getUsrId());
        Row[] rr = this.getSvcTkrUsr1().getFilteredRows(rq);
        Integer i = 1;
        Integer j = 0;
        if (rr.length > 0) {
            adfLog.info("length of Array::" + rr.length);
            for (Row tkr : rr) {
                if (tkr.getAttribute("TkrId") != null) {
                    String tkrId = tkr.getAttribute("TkrId").toString();
                    String tkrName = null;
                    RowQualifier rqtkr = new RowQualifier(mmtkr);
                    rqtkr.setWhereClause("CldId = '" + this.getCldId() + "' AND  SlocId = " + this.getSlocId() +
                                         " AND OrgId ='" + this.getOrgId() + "' AND TkrId = '" + tkrId + "' ");
                    Row[] rrTr = this.getSvcTkr1().getFilteredRows(rqtkr);
                    if (rrTr.length > 0) {
                        tkrName = rrTr[0].getAttribute("TkrNm").toString();
                    }

                    if (tkrName != null) {
                        list.add(new TickerRowDS(tkrId, i, new StringBuffer(tkrName)));
                        i = i + 1;
                    }

                }
            }
        }
        return list;
    }

    /**
     * Method to fetch all the tickers
     * @return
     */
    public ArrayList<TickerRowDS> getSelectedTickerList() {
        ArrayList<TickerRowDS> selectedSettingsList = new ArrayList<TickerRowDS>();
        ViewObjectImpl mapViewVO = this.getSvcTkrUsr1();
        ViewObjectImpl mmtkr = this.getSvcTkr1();
        mapViewVO.executeQuery();
        RowQualifier rq = new RowQualifier(mapViewVO);
        Integer zero = 0;
        StringBuffer query =
            new StringBuffer("CldId = '" + this.getCldId() + "' AND  SlocId = " + this.getSlocId() + " AND OrgId ='" +
                             this.getOrgId() + "' AND UsrId = " + this.getUsrId() + " AND TkrPos > " + zero);
        rq.setWhereClause(query.toString());

        Row[] filteredRows = mapViewVO.getFilteredRows(rq);
        Integer i = 1;
        for (Row rr : filteredRows) {
            if (rr.getAttribute("TkrId") != null) {
                String tkrId = rr.getAttribute("TkrId").toString();
                String tkrName = null;
                RowQualifier rqtkr = new RowQualifier(mmtkr);
                rqtkr.setWhereClause("CldId = '" + this.getCldId() + "' AND  SlocId = " + this.getSlocId() +
                                     " AND OrgId ='" + this.getOrgId() + "' AND TkrId = '" + tkrId + "' ");
                Row[] rrTr = this.getSvcTkr1().getFilteredRows(rqtkr);
                if (rrTr.length > 0) {
                    tkrName = rrTr[0].getAttribute("TkrNm").toString();
                }
                if (tkrName != null) {
                    selectedSettingsList.add(new TickerRowDS(rr.getAttribute("TkrId").toString(),
                                                             (Integer) rr.getAttribute("TkrPos"),
                                                             new StringBuffer(tkrName)));
                }
            }
        }
        adfLog.info("Rows in AM :");
        for (TickerRowDS r : selectedSettingsList) {

        }

        return selectedSettingsList;


    }


    public String getTkrIdValue(Integer tkrPos) {
        String tkrId = null;
        ViewObjectImpl tkrUseVo = this.getSvcTkrUsr1();
        tkrUseVo.executeQuery();
        RowQualifier rq = new RowQualifier(tkrUseVo);
        rq.setWhereClause("CldId = '" + this.getCldId() + "' AND  SlocId = " + this.getSlocId() + " AND TkrPos = " +
                          tkrPos + "  AND OrgId ='" + this.getOrgId() + "' AND UsrId = " + this.getUsrId());
        Row[] filteredRows = tkrUseVo.getFilteredRows(rq);
        if (filteredRows.length > 0) {
            tkrId = filteredRows[0].getAttribute("TkrId").toString();
        }
        return tkrId;
    }

    public ArrayList<Number> executeTkrQuery(String tkrId) {
        ViewObjectImpl glblTkr = this.getSvcGlblTkr1();
        ArrayList<Number> queryVal = new ArrayList<Number>();
        Row[] rr = glblTkr.getFilteredRows("TkrId", tkrId);
        String query = null;
        StringBuilder cldNew = new StringBuilder();
        cldNew.append("'");
        cldNew.append(getCldId());
        cldNew.append("'");
        StringBuilder orgNew = new StringBuilder();
        orgNew.append("'");
        orgNew.append(getOrgId());
        orgNew.append("'");
        Integer fyId = getFYid();
        adfLog.info("tickerid    " + tkrId);
        if (tkrId != null) {

            //if(rr[0].getAttribute("TkrQry")!=null){

            //query = rr[0].getAttribute("TkrQry").toString();
            //query= (String)callStoredFunction(Types.VARCHAR, "MM_GET_TKR_QRY(?)", new Object[] {tkrId});
            query = getQuery(tkrId);
            //adfLog.info("Query String:"+query);

        }
        if (query != null) {
            String newQuery =
                query.replaceAll(":BindCldId", cldNew.toString()).replaceAll(":BindOrgId",
                                                                             orgNew.toString()).replaceAll(":BindSlocId",
                                                                                                           getSlocId().toString()).replaceAll(":BindFyId",
                                                                                                                                              fyId.toString());


            ResultSet rs;
            Number code = null;
            Number codenew = null;
            try {
                rs = getDBTransaction().createStatement(0).executeQuery(newQuery);
                if (rs.next()) {
                    BigDecimal currAmt = ((BigDecimal) rs.getObject(1));
                    BigDecimal prvAmt = ((BigDecimal) rs.getObject(2));
                    if (currAmt != null) {
                        code = new Number(currAmt);
                        queryVal.add(code);
                    }
                    if (prvAmt != null) {
                        codenew = new Number(prvAmt);
                        queryVal.add(codenew);
                    }

                }

                rs.close();

                // return code;

            } catch (SQLException e) {
                throw new JboException(e);
            }


        }
        adfLog.info("  queryVal " + queryVal);
        return queryVal;
    }

    public String getQuery(String tkrId) {

        String query = "";
        String sp = "{? = call (MM.MM_GET_TKR_QRY(?))}";
        Connection conn = null;
        CallableStatement proc = null;
        try {
            proc = getDBTransaction().createCallableStatement(sp, 0);
            proc.registerOutParameter(1, OracleTypes.VARCHAR);
            proc.setObject(2, tkrId);
            proc.executeQuery();
            query = proc.getString(1);
        } catch (Exception e) {
            System.out.println(e);
        }
        return query;
    }


    public Integer getFYid() {
        Timestamp date = new Timestamp(System.currentTimeMillis());
        Integer fyId = (Integer) (callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID (?,?,?)", new Object[] {
                                                     getCldId(), getOrgId(), date
        }));
        if (fyId > 0) {
            return fyId;
        } else
            return 1;

    }

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        //_log.info("__________________________________________begin");
        try {
            st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                    // _log.info(""+bindVars[z]);
                }
            }
            st.executeUpdate();
            // _log.info("__________________________________________end");
            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                }
            }
        }

    }

    public Number getDocPendingCountForMyApproval(Integer DocTypeId, StringBuffer CountType) {
        Number count = new Number(0);
        /* sls_doc_wf_cnt(
        p_cld_id varchar2,
        p_sloc_id number,
        p_org_id varchar2,
        p_usr_id number,
        p_doc_id number,
        p_wf_type varchar2 /* O--Pending with others ,M--Pending of my approval,U--Pending for posting
        )
         */


        try {
            System.out.println("in the getDocpendingCount ForApproval");


            BigDecimal s = (BigDecimal) callStoredFunction(Types.NUMERIC, "SVC_GET_DOC_CNT(?,?,?,?,?,?)", new Object[] {
                                                           this.getCldId(), this.getSlocId(), this.getOrgId(),
                                                           DocTypeId, this.getUsrId(), CountType.toString()
            });
            count = new Number(s);
            adfLog.info("Sloc" + getSlocId() + "CldId:" + getCldId() + "orgID:" + getOrgId() + "Usr" + getUsrId() +
                        " DocId::::" + DocTypeId + "Type:::" + CountType + "Function Returned Value:::" + count);
        } catch (Exception e) {
            FacesMessage message = new FacesMessage("There have been an error in calling function 'MM_GET_DOC_CNT' !");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            e.printStackTrace();
        }


        return count;
    }


    public void unsetAllTkrPosForUsr() {
        ViewObjectImpl tkrUsr = this.getSvcTkrUsr1();
        tkrUsr.executeQuery();
        RowQualifier rq = new RowQualifier(tkrUsr);
        rq.setWhereClause("CldId = '" + this.getCldId() + "' AND  SlocId = " + this.getSlocId() + " AND OrgId ='" +
                          this.getOrgId() + "' AND UsrId = " + this.getUsrId());
        Row[] filteredRows = tkrUsr.getFilteredRows(rq);
        if (filteredRows.length > 0) {
            for (Row rr : filteredRows) {
                rr.setAttribute("TkrPos", 0);
            }
        }
    }

    /**
     *
     * @param seqNo
     * @param tickeId
     */

    public void updateTickerSettingForUsr(Integer seqNo, String tickeId) {
        ViewObjectImpl tkrUsr = this.getSvcTkrUsr1();
        tkrUsr.executeQuery();
        RowQualifier rq = new RowQualifier(tkrUsr);
        rq.setWhereClause("CldId = '" + this.getCldId() + "' AND  SlocId = " + this.getSlocId() + " AND OrgId ='" +
                          this.getOrgId() + "' AND TkrId ='" + tickeId + "' AND UsrId = " + this.getUsrId());
        Row[] filteredRows = tkrUsr.getFilteredRows(rq);
        if (filteredRows.length > 0) {
            for (Row rr : filteredRows) {
                if (rr.getAttribute("TkrId") != null) {
                    rr.setAttribute("TkrPos", seqNo);
                }

            }
        }
    }


    /**
     * Container's getter for SvcGlblTkr1.
     * @return SvcGlblTkr1
     */
    public ViewObjectImpl getSvcGlblTkr1() {
        return (ViewObjectImpl) findViewObject("SvcGlblTkr1");
    }

    /**
     * Container's getter for SvcTkrUsr1.
     * @return SvcTkrUsr1
     */
    public ViewObjectImpl getSvcTkrUsr1() {
        return (ViewObjectImpl) findViewObject("SvcTkrUsr1");
    }


    /**
     * Container's getter for SvcTkr1.
     * @return SvcTkr1
     */
    public ViewObjectImpl getSvcTkr1() {
        return (ViewObjectImpl) findViewObject("SvcTkr1");
    }

    /**
     * Container's getter for WfViewSC1.
     * @return WfViewSC1
     */
    public ViewObjectImpl getWfViewSC1() {
        return (ViewObjectImpl) findViewObject("WfViewSC1");
    }

    /**
     * Container's getter for WfViewSvcInvc1.
     * @return WfViewSvcInvc1
     */
    public ViewObjectImpl getWfViewSvcInvc1() {
        return (ViewObjectImpl) findViewObject("WfViewSvcInvc1");
    }

    /**
     * Container's getter for WfSvcWo1.
     * @return WfSvcWo1
     */
    public ViewObjectImpl getWfSvcWo1() {
        return (ViewObjectImpl) findViewObject("WfSvcWo1");
    }

    public void setWFScView(StringBuffer type) {
        if (type != null) {
            ViewObjectImpl sc = this.getWfViewSC1();
            sc.setNamedWhereClauseParam("BindSlocId", this.getSlocId());
            sc.setNamedWhereClauseParam("BindCldId", this.getCldId());
            sc.setNamedWhereClauseParam("BindOrgId", this.getOrgId());
            sc.setNamedWhereClauseParam("BindUsrId", this.getUsrId());
            sc.setNamedWhereClauseParam("BindOpType", type.toString());
            sc.executeQuery();
        }

    }


    public void setWFWorkOrderView(StringBuffer type) {
        if (type != null) {
            ViewObjectImpl wo = this.getWfSvcWo1();
            wo.setNamedWhereClauseParam("BindSlocId", this.getSlocId());
            wo.setNamedWhereClauseParam("BindCldId", this.getCldId());
            wo.setNamedWhereClauseParam("BindOrgId", this.getOrgId());
            wo.setNamedWhereClauseParam("BindUsrId", this.getUsrId());
            wo.setNamedWhereClauseParam("BindOpType", type.toString());
            wo.executeQuery();
        }

    }


    public void setWFSvcInvcView(StringBuffer type) {
        if (type != null) {
            ViewObjectImpl invc = this.getWfViewSvcInvc1();
            invc.setNamedWhereClauseParam("BindSlocId", this.getSlocId());
            invc.setNamedWhereClauseParam("BindCldId", this.getCldId());
            invc.setNamedWhereClauseParam("BindOrgId", this.getOrgId());
            invc.setNamedWhereClauseParam("BindUsrId", this.getUsrId());
            invc.setNamedWhereClauseParam("BindOpType", type.toString());
            invc.executeQuery();
        }

    }

    /**
     * Container's getter for DataRangeView1.
     * @return DataRangeView1
     */
    public ViewObjectImpl getDataRangeView1() {
        return (ViewObjectImpl) findViewObject("DataRangeView1");
    }

    public String getTckrDataRange(String Tkr) {
        adfLog.info("Name of tckr::::" + Tkr);
        Integer range = null;
        String name = null;
        Integer days = null;
        if (Tkr != null) {
            Row r[] = this.getSvcTkr1().getFilteredRows("TkrNm", Tkr);
            if (r.length > 0) {
                range = (Integer) r[0].getAttribute("DataRangeType");
                if (range != null) {
                    Row r1[] = this.getDataRangeView1().getFilteredRows("AttId", range);
                    if (r1.length > 0) {
                        name = (String) r1[0].getAttribute("AttNm");
                        if (name.equalsIgnoreCase("month")) {
                            name = "Month on Month";
                            return name;
                        } else if (name.equalsIgnoreCase("Year")) {
                            name = "Year on Year";
                            return name;
                        } else if (name.equalsIgnoreCase("Quater")) {
                            name = "Quater on Quater";
                            return name;
                        } else if (name.equalsIgnoreCase("Half Year")) {
                            name = "Half Yearly Comparison";
                            return name;
                        } else if (name.equalsIgnoreCase("Custom")) {
                            days = (Integer) r[0].getAttribute("DataRangeDays");
                        }

                    }
                }
            }
        }

        return name;
    }

    /**
     * Container's getter for SvcTopCustAmc1.
     * @return SvcTopCustAmc1
     */
    public ViewObjectImpl getSvcTopCustAmc1() {
        return (ViewObjectImpl) findViewObject("SvcTopCustAmc1");
    }

    /**
     * Container's getter for SvcTopCustInvc1.
     * @return SvcTopCustInvc1
     */
    public ViewObjectImpl getSvcTopCustInvc1() {
        return (ViewObjectImpl) findViewObject("SvcTopCustInvc1");
    }

    public void executeQueryForAllViews() {
        executeTopNCustInvcVO(5);
        executeTopNCustAmcVO(5);
        executeTopNTktVO(5);
        executeTopNDefectVO(5);
    }

    public void executeTopNCustInvcVO(Integer val) {
        ViewObjectImpl productCust = this.getSvcTopCustInvc1();
        productCust.setNamedWhereClauseParam("CldIdBind", this.getCldId());
        productCust.setNamedWhereClauseParam("HoOrgIdBind", this.getHoOrgId());
        productCust.setNamedWhereClauseParam("CountBind", val);

        productCust.executeQuery();
    }

    public void executeTopNCustAmcVO(Integer val) {
        ViewObjectImpl amcCust = this.getSvcTopCustAmc1();
        amcCust.setNamedWhereClauseParam("CldIdBind", this.getCldId());
        amcCust.setNamedWhereClauseParam("HoOrgIdBind", this.getHoOrgId());
        amcCust.setNamedWhereClauseParam("CountBind", val);
        amcCust.executeQuery();
    }

    public void executeTopNDefectVO(Integer val) {
        ViewObjectImpl dfct = this.getSvcTopDfct1();
        dfct.setNamedWhereClauseParam("CldIdBind", this.getCldId());
        dfct.setNamedWhereClauseParam("HoOrgIdBind", this.getHoOrgId());
        dfct.setNamedWhereClauseParam("CountBind", val);
        dfct.executeQuery();
    }


    public void executeTopNTktVO(Integer val) {
        ViewObjectImpl call = this.getSvcTopCustCall1();
        call.setNamedWhereClauseParam("CldIdBind", this.getCldId());
        call.setNamedWhereClauseParam("HoOrgIdBind", this.getHoOrgId());
        call.setNamedWhereClauseParam("CountBind", val);
        call.executeQuery();
    }


    /**
     * Container's getter for SvcTopCustCall1.
     * @return SvcTopCustCall1
     */
    public ViewObjectImpl getSvcTopCustCall1() {
        return (ViewObjectImpl) findViewObject("SvcTopCustCall1");
    }

    /**
     * Container's getter for SvcTopDfct1.
     * @return SvcTopDfct1
     */
    public ViewObjectImpl getSvcTopDfct1() {
        return (ViewObjectImpl) findViewObject("SvcTopDfct1");
    }
}

