package svcserviceexecutive.model.entities;

import java.math.BigInteger;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;


import oracle.adf.share.ADFContext;

import oracle.jbo.AttributeList;
import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;

import svcserviceexecutive.model.services.ServiceExecutiveAMImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Oct 14 15:42:33 PDT 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SvcExecSplEOImpl extends EntityImpl {
    /**
     * Add locking logic here.
     */
    public void lock() {
       // super.lock();
    }
    public Object resolvElDC(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp =
            elFactory.createValueExpression(elContext, "#{data." + data + ".dataProvider}", Object.class);
        return valueExp.getValue(elContext);
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
    }

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CldId,
        SlocId,
        HoOrgId,
        OrgId,
        EmpCode,
        DfctTypeId,
        SvcExec;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int EMPCODE = AttributesEnum.EmpCode.index();
    public static final int DFCTTYPEID = AttributesEnum.DfctTypeId.index();
    public static final int SVCEXEC = AttributesEnum.SvcExec.index();

    /**
     * This is the default constructor (do not remove).
     */
    public SvcExecSplEOImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("svcserviceexecutive.model.entities.SvcExecSplEO");
    }


    /**
     * Gets the attribute value for CldId, using the alias name CldId.
     * @return the value of CldId
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CldId.
     * @param value value to set the CldId
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for SlocId, using the alias name SlocId.
     * @return the value of SlocId
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for SlocId.
     * @param value value to set the SlocId
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for HoOrgId, using the alias name HoOrgId.
     * @return the value of HoOrgId
     */
    public String getHoOrgId() {
        return (String) getAttributeInternal(HOORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for HoOrgId.
     * @param value value to set the HoOrgId
     */
    public void setHoOrgId(String value) {
        setAttributeInternal(HOORGID, value);
    }

    /**
     * Gets the attribute value for OrgId, using the alias name OrgId.
     * @return the value of OrgId
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for OrgId.
     * @param value value to set the OrgId
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for EmpCode, using the alias name EmpCode.
     * @return the value of EmpCode
     */
    public Integer getEmpCode() {
        return (Integer) getAttributeInternal(EMPCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for EmpCode.
     * @param value value to set the EmpCode
     */
    public void setEmpCode(Integer value) {
        setAttributeInternal(EMPCODE, value);
    }

    /**
     * Gets the attribute value for DfctTypeId, using the alias name DfctTypeId.
     * @return the value of DfctTypeId
     */
    public Integer getDfctTypeId() {
        return (Integer) getAttributeInternal(DFCTTYPEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for DfctTypeId.
     * @param value value to set the DfctTypeId
     */
    public void setDfctTypeId(Integer value) {
        setAttributeInternal(DFCTTYPEID, value);
    }

    /**
     * @return the associated entity SvcExecEOImpl.
     */
    public SvcExecEOImpl getSvcExec() {
        return (SvcExecEOImpl) getAttributeInternal(SVCEXEC);
    }

    /**
     * Sets <code>value</code> as the associated entity SvcExecEOImpl.
     */
    public void setSvcExec(SvcExecEOImpl value) {
        setAttributeInternal(SVCEXEC, value);
    }


    /**
     * @param cldId key constituent
     * @param slocId key constituent
     * @param orgId key constituent
     * @param empCode key constituent
     * @param dfctTypeId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(String cldId, Integer slocId, String orgId, Integer empCode,
                                       Integer dfctTypeId) {
        return new Key(new Object[] { cldId, slocId, orgId, empCode, dfctTypeId });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String msg = valueExp.getValue(elContext).toString();
        return msg;
    }
    protected void create(AttributeList attributeList) {
        Integer usrId=Integer.parseInt( resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
         String CldId= resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
         String OrgId= resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
         String HoOrgId= resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
         Integer SlocId=Integer.parseInt( resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        System.out.println("User Id:"+usrId+" "+CldId+" "+OrgId+" "+HoOrgId+" "+SlocId);
        
        //ServiceExecutiveAMImpl am = (ServiceExecutiveAMImpl)resolvElDC("AppUsersAMDataControl");
          
         System.out.println("User Id:"+usrId+" "+CldId+" "+OrgId+" "+HoOrgId+" "+SlocId);
         setCldId(CldId);
         setOrgId(OrgId);
         setSlocId(SlocId);
         setHoOrgId(HoOrgId);
         
         
         //setEmpCode();
         
        super.create(attributeList);
    }
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {

            // 1. Create a JDBC CallabledStatement
            st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            // 2. Register the first bind variable for the return value
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                // 3. Loop over values for the bind variables passed in, if any
                for (int z = 0; z < bindVars.length; z++) {
                    // 4. Set the value of user-supplied bind vars in the stmt
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            // 5. Set the value of user-supplied bind vars in the stmt
            st.executeUpdate();
            // 6. Return the value of the first bind variable
            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    // 7. Close the statement
                    st.close();
                } catch (SQLException e) {
                }
            }
        }
    }
}

