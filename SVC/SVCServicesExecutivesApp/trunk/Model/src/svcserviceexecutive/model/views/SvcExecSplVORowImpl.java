package svcserviceexecutive.model.views;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;

import svcserviceexecutive.model.entities.SvcExecSplEOImpl;
import svcserviceexecutive.model.services.ServiceExecutiveAMImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Oct 15 19:49:04 PDT 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SvcExecSplVORowImpl extends ViewRowImpl {


    public static final int ENTITY_SVCEXECSPLEO = 0;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CldId,
        SlocId,
        HoOrgId,
        OrgId,
        EmpCode,
        DfctTypeId,
        TransSpclName,
        LovDeftNameVO1;
        static AttributesEnum[] vals = null;
        ;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int EMPCODE = AttributesEnum.EmpCode.index();
    public static final int DFCTTYPEID = AttributesEnum.DfctTypeId.index();
    public static final int TRANSSPCLNAME = AttributesEnum.TransSpclName.index();
    public static final int LOVDEFTNAMEVO1 = AttributesEnum.LovDeftNameVO1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public SvcExecSplVORowImpl() {
    }

    /**
     * Gets SvcExecSplEO entity object.
     * @return the SvcExecSplEO
     */
    public SvcExecSplEOImpl getSvcExecSplEO() {
        return (SvcExecSplEOImpl) getEntity(ENTITY_SVCEXECSPLEO);
    }

    /**
     * Gets the attribute value for CLD_ID using the alias name CldId.
     * @return the CLD_ID
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as attribute value for CLD_ID using the alias name CldId.
     * @param value value to set the CLD_ID
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for SLOC_ID using the alias name SlocId.
     * @return the SLOC_ID
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for SLOC_ID using the alias name SlocId.
     * @param value value to set the SLOC_ID
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for HO_ORG_ID using the alias name HoOrgId.
     * @return the HO_ORG_ID
     */
    public String getHoOrgId() {
        return (String) getAttributeInternal(HOORGID);
    }

    /**
     * Sets <code>value</code> as attribute value for HO_ORG_ID using the alias name HoOrgId.
     * @param value value to set the HO_ORG_ID
     */
    public void setHoOrgId(String value) {
        setAttributeInternal(HOORGID, value);
    }

    /**
     * Gets the attribute value for ORG_ID using the alias name OrgId.
     * @return the ORG_ID
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as attribute value for ORG_ID using the alias name OrgId.
     * @param value value to set the ORG_ID
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for EMP_CODE using the alias name EmpCode.
     * @return the EMP_CODE
     */
    public Integer getEmpCode() {
        return (Integer) getAttributeInternal(EMPCODE);
    }

    /**
     * Sets <code>value</code> as attribute value for EMP_CODE using the alias name EmpCode.
     * @param value value to set the EMP_CODE
     */
    public void setEmpCode(Integer value) {
        setAttributeInternal(EMPCODE, value);
    }

    /**
     * Gets the attribute value for DFCT_TYPE_ID using the alias name DfctTypeId.
     * @return the DFCT_TYPE_ID
     */
    public Integer getDfctTypeId() {
        return (Integer) getAttributeInternal(DFCTTYPEID);
    }

    /**
     * Sets <code>value</code> as attribute value for DFCT_TYPE_ID using the alias name DfctTypeId.
     * @param value value to set the DFCT_TYPE_ID
     */
    public void setDfctTypeId(Integer value) {
        setAttributeInternal(DFCTTYPEID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransSpclName.
     * @return the TransSpclName
     */
     
    public String getTransSpclName() {
        if(getAttributeInternal(TRANSSPCLNAME)!=null)
        {
            return (String) getAttributeInternal(TRANSSPCLNAME);
        }else
        {
        if(getDfctTypeId()!=null){
        //System.out.println("Getter of spl invoked :"+getDfctTypeId());
        ServiceExecutiveAMImpl am =(ServiceExecutiveAMImpl)this.getApplicationModule();
        ViewObjectImpl dfctvo=am.getLovDeftName1();
        RowQualifier rq=new RowQualifier(dfctvo);
        rq.setWhereClause("CldId='"+getCldId()+"' and SlocId="+getSlocId()+" and HoOrgId= '"+getHoOrgId()+"' and DfctTypeId="+getDfctTypeId());
        Row s[]=dfctvo.getFilteredRows(rq);
        System.out.println("Lengh-------------- "+s.length);
        if(s.length>0) {
            String deftnm=s[0].getAttribute("DfctTypeNm").toString();
            System.out.println("DefectNm================ "+deftnm);
            return deftnm;
        }
        }
        }
        return (String) getAttributeInternal(TRANSSPCLNAME);
    }
    
    public Object resolvElDC(String data) {
    FacesContext fc = FacesContext.getCurrentInstance();
    Application app = fc.getApplication();
    ExpressionFactory elFactory = app.getExpressionFactory();
    ELContext elContext = fc.getELContext();
    ValueExpression valueExp =
    elFactory.createValueExpression(elContext, "#{data." + data + ".dataProvider}", Object.class);
    return valueExp.getValue(elContext);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransSpclName.
     * @param value value to set the  TransSpclName
     */
    public void setTransSpclName(String value) {
        setAttributeInternal(TRANSSPCLNAME, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovDeftNameVO1.
     */
    public RowSet getLovDeftNameVO1() {
        return (RowSet) getAttributeInternal(LOVDEFTNAMEVO1);
    }
}

