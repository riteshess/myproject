package svcserviceexecutive.model.services;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import svcserviceexecutive.model.services.common.ServiceExecutiveAM;
import svcserviceexecutive.model.views.LovReqtAreaVOImpl;
import svcserviceexecutive.model.views.SearchTransVOImpl;
import svcserviceexecutive.model.views.SvcExecSplVOImpl;
import svcserviceexecutive.model.views.SvcExecVOImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Oct 14 16:42:15 PDT 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ServiceExecutiveAMImpl extends ApplicationModuleImpl implements ServiceExecutiveAM {
    /**
     * This is the default constructor (do not remove).
     */
    public ServiceExecutiveAMImpl() {
    }
    
    public String getcldId(){
        return resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
    }
    
    public Integer getSlocId(){
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
    }
    
    public String getOrgId(){
       return resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
    }
    
    public Integer getUsrId(){
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
    }
    
    public String gethoOrgId(){
        return resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
    }
    /*  String cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
    Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
    String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
    Integer usrId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
    String hoOrgId=resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString(); */
    
    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }

    /**
     * Container's getter for SvcDfctType1.
     * @return SvcDfctType1
     */
    public ViewObjectImpl getSvcDfctType1() {
        return (ViewObjectImpl) findViewObject("SvcDfctType1");
    }

    /**
     * Container's getter for SvcExecSpl1.
     * @return SvcExecSpl1
     */
    public SvcExecSplVOImpl getSvcExecSpl1() {
        return (SvcExecSplVOImpl) findViewObject("SvcExecSpl1");
    }

    /**
     * Container's getter for SvcExec1.
     * @return SvcExec1
     */
    public SvcExecVOImpl getSvcExec1() {
        return (SvcExecVOImpl) findViewObject("SvcExec1");
    }

    /**
     * Container's getter for SvcExecSpl2.
     * @return SvcExecSpl2
     */
    public SvcExecSplVOImpl getSvcExecSpl2() {
        return (SvcExecSplVOImpl) findViewObject("SvcExecSpl2");
    }

    /**
     * Container's getter for SearchTrans1.
     * @return SearchTrans1
     */
    public SearchTransVOImpl getSearchTrans1() {
        return (SearchTransVOImpl) findViewObject("SearchTrans1");
    }

    /**
     * Container's getter for LovReqtArea1.
     * @return LovReqtArea1
     */
    public LovReqtAreaVOImpl getLovReqtArea1() {
        return (LovReqtAreaVOImpl) findViewObject("LovReqtArea1");
    }

    /**
     * Container's getter for LovManagerNm1.
     * @return LovManagerNm1
     */
    public ViewObjectImpl getLovManagerNm1() {
        return (ViewObjectImpl) findViewObject("LovManagerNm1");
    }

    /**
     * Container's getter for LovDeftName1.
     * @return LovDeftName1
     */
    public ViewObjectImpl getLovDeftName1() {
        return (ViewObjectImpl) findViewObject("LovDeftName1");
    }

    /**
     * Container's getter for FkSvcExecSplVL1.
     * @return FkSvcExecSplVL1
     */
    public ViewLinkImpl getFkSvcExecSplVL1() {
        return (ViewLinkImpl) findViewLink("FkSvcExecSplVL1");
    }
    public void SearchEmployee(String name) {
    
             System.out.println("name---------->"+name);
            ViewObjectImpl voAppDept1=getSvcExec1();
            ViewCriteria vc=voAppDept1.getViewCriteria("SvcExecVOCriteria1");
            voAppDept1.applyViewCriteria(vc);
            voAppDept1.setNamedWhereClauseParam("BindUsrNm", name);
           voAppDept1.setNamedWhereClauseParam("bindCldId", getcldId());
           voAppDept1.setNamedWhereClauseParam("bindSlocId", getSlocId());
           voAppDept1.setNamedWhereClauseParam("bindHoOrgId", gethoOrgId());
           voAppDept1.setNamedWhereClauseParam("bindOrgId", getOrgId());
           voAppDept1.executeQuery(); 
        
    }

    /**
     * Container's getter for SvcDfctType2.
     * @return SvcDfctType2
     */
    public ViewObjectImpl getSvcDfctType2() {
        return (ViewObjectImpl) findViewObject("SvcDfctType2");
    }

    /**
     * Container's getter for LovReqtArea2.
     * @return LovReqtArea2
     */
    public LovReqtAreaVOImpl getLovReqtArea2() {
        return (LovReqtAreaVOImpl) findViewObject("LovReqtArea2");
    }

    public void AddSpcl(String spcl) {
        Integer dfctid = 0;
        if (spcl != null) {
            ViewObjectImpl dftNmvo = this.getLovDeftName1();
            RowQualifier rowQualifier = new RowQualifier(dftNmvo);
            rowQualifier.setWhereClause("HoOrgId ='"+gethoOrgId()+"' and DfctTypeNm = '"+spcl+"'");
        
            
         //   Row[] r1 = this.getLovDeftName1().getFilteredRows("DfctTypeNm", spcl);
            Row[] r1 = dftNmvo.getFilteredRows(rowQualifier);
            System.out.println("------>>111"+r1.length);
            if (r1.length > 0) {
                dfctid = Integer.parseInt(r1[0].getAttribute("DfctTypeId").toString());
              //  System.out.println("------>>1"+r1.length);
            }
            Row r = this.getSvcExecSpl2().createRow();
            // System.out.println("------>>2");
            r.setAttribute("DfctTypeId", dfctid);
            this.getSvcExecSpl2().insertRow(r);
            
        Row curr=this.getSvcExec1().getCurrentRow();
        if(curr!=null){
            curr.setAttribute("TransSpclNm", null);
            curr.setAttribute("TransDefectTypeId", null);
            
        }
            // System.out.println("------>>3");

        }
    }
    
    
    public String duplicatechk(){
        //exectsp2
        //TransSpclNm
        Row curr=this.getSvcExec1().getCurrentRow();
        if(curr.getAttribute("TransDefectTypeId")!=null){
            ViewObjectImpl spVo=this.getSvcExecSpl2();
            
            Row [] rr1=spVo.getFilteredRows("DfctTypeId", curr.getAttribute("TransDefectTypeId"));
        
            if(rr1.length>0){
                return "N";
            }else{
                return "Y";
            }
        }
        
        return "Y";
    }
    
    public String isdeptNameNull(){
        Row curr=this.getSvcExec1().getCurrentRow();
        
        if(curr.getAttribute("RqmtAreaId")!=null){
            return "Y";
        }else{
            return "N";
        }
       
    }
    
    public void setBindVariable(){
        //SvcExecVOCriteria1
        
   System.out.println("cld "+getcldId()+" org id "+getOrgId()+"   "+gethoOrgId() +"  "+getSlocId() );
        
        ViewObjectImpl execvo=this.getSvcExec1();
       // ViewObjectImpl vo=this.getSvcSc1();
        ViewCriteria vc = execvo.getViewCriteria("SvcExecVOCriteria1");
        execvo.applyViewCriteria(vc);
        execvo.setNamedWhereClauseParam("bindCldId",getcldId());
        execvo.setNamedWhereClauseParam("bindSlocId", getSlocId());
        execvo.setNamedWhereClauseParam("bindOrgId", getOrgId());
        execvo.setNamedWhereClauseParam("bindHoOrgId", gethoOrgId());
        execvo.executeQuery();
        
        ViewObjectImpl emplVo=this.getLovDeftName1();
        ViewCriteria vc1 = execvo.getViewCriteria("LovDeftNameVOCriteria");
        emplVo.applyViewCriteria(vc1);
        emplVo.setNamedWhereClauseParam("BindCldId",getcldId());
        emplVo.setNamedWhereClauseParam("BindHoOrgId", gethoOrgId());
        emplVo.setNamedWhereClauseParam("BindSlocId", getSlocId());
        emplVo.executeQuery();
        
            
    }

    public String dupEmp(String empNm) {
        Row curr = this.getSvcExec1().getCurrentRow();
        if (curr != null) {
            RowQualifier rq = new RowQualifier(this.getSvcExec1());
            rq.setWhereClause("HoOrgId ='" + gethoOrgId() + "' and  OrgId = '" + getOrgId() + "' and EmpNm ='" + empNm +
                              "'");

            Row[] rr1 = this.getSvcExec1().getFilteredRows(rq);
            System.out.println(rq.getExprStr() + " length " + rr1.length);

            if (rr1.length > 1) {
                return "Y";
            } else {
                return "N";
            }
        } else
            return "N";

    }
}

