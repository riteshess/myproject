package svcwarrantyprfapp.model.services;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import svcwarrantyprfapp.model.services.common.SvcWarrantyPrFAM;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Nov 11 12:04:46 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SvcWarrantyPrFAMImpl extends ApplicationModuleImpl implements SvcWarrantyPrFAM {
    /**
     * This is the default constructor (do not remove).
     */

    public String cldId() {
        return resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
    }

    public Integer slocId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
    }

    public String orgId() {
        return resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
    }

    public String hoOrgId() {

        return resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
    }


    public SvcWarrantyPrFAMImpl() {
    }

    /**
     * Container's getter for Dummy1.
     * @return Dummy1
     */
    public ViewObjectImpl getDummy1() {
        return (ViewObjectImpl) findViewObject("Dummy1");
    }

    /**
     * Container's getter for SvcWtyPrf1.
     * @return SvcWtyPrf1
     */
    public ViewObjectImpl getSvcWtyPrf1() {
        return (ViewObjectImpl) findViewObject("SvcWtyPrf1");
    }

    public void setBindVarOnPageLoad() {
        String hoOrgId = (String) resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String cldId = (String) resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        this.getSvcWtyPrf1().setNamedWhereClauseParam("bindcldid", cldId);
        this.getSvcWtyPrf1().setNamedWhereClauseParam("bindhoorgid", hoOrgId);
        this.getSvcWtyPrf1().setNamedWhereClauseParam("bindslocid", slocId);
        this.getSvcWtyPrf1().setNamedWhereClauseParam("bindcldID", cldId);
        this.getSvcWtyPrf1().setNamedWhereClauseParam("bindhoorgID", hoOrgId);
        this.getSvcWtyPrf1().setNamedWhereClauseParam("bindslocID", slocId);
        this.getLovItemName1().setNamedWhereClauseParam("bindhoorgid", hoOrgId);
        this.getLovItemName1().setNamedWhereClauseParam("bindcldid", cldId);
        this.getLovItemName1().setNamedWhereClauseParam("bindslocid", slocId);
        this.getLovItemName1().executeQuery();
        this.getSvcWtyPrf1().executeQuery();


    }

    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String msg = valueExp.getValue(elContext).toString();
        return msg;
    }


    public void searchwaranty(String warantynam) {
        String hoOrgId = (String) resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String cldId = (String) resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());

        ViewObjectImpl vo = getSvcWtyPrf1();
        ViewCriteria vc = vo.getViewCriteria("SvcWtyPrfVOCriteriaSearch");
        vo.applyViewCriteria(vc);
        vo.setNamedWhereClauseParam("bindwarrantyname", warantynam);
        vo.setNamedWhereClauseParam("bindSLOCID", slocId);
        vo.setNamedWhereClauseParam("bindHOORGID", hoOrgId);
        vo.setNamedWhereClauseParam("bindCLDID", cldId);
        vo.executeQuery();
    }

    public void resetwarrantyname() {
        String hoOrgId = (String) resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String cldId = (String) resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());


        ViewObjectImpl vo = getSvcWtyPrf1();
        ViewObjectImpl vo1 = getDummy1();
        ViewCriteria vc = vo.getViewCriteria("SvcWtyPrfVOCriteriaSearch");
        vo.applyViewCriteria(vc);
        vo.setNamedWhereClauseParam("bindwarrantyname", null);
        vo.setNamedWhereClauseParam("bindSLOCID", slocId);
        vo.setNamedWhereClauseParam("bindHOORGID", hoOrgId);
        vo.setNamedWhereClauseParam("bindCLDID", cldId);
        vo.executeQuery();
        vo1.executeQuery();

    }


    public void getWarrantyId() {
        String cldId = (resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());

        Integer slocId = (Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString()));
        String hoOrgId = (resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString());

        String dept = (String) (callStoredFunction(Types.VARCHAR, "SVC_GEN_ID (?,?,?,?,?)", new Object[] {
                                                   cldId, slocId, hoOrgId, null, "SVC$WTY$PRF"
        }));
        System.out.println("warranty id-----------" + dept);
        ViewObjectImpl voAppDept1 = getSvcWtyPrf1();
        voAppDept1.getCurrentRow().setAttribute("WtyId", dept);
        //voAppDept1.executeQuery();
    }


    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {

            // 1. Create a JDBC CallabledStatement
            st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            // 2. Register the first bind variable for the return value
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                // 3. Loop over values for the bind variables passed in, if any
                for (int z = 0; z < bindVars.length; z++) {
                    // 4. Set the value of user-supplied bind vars in the stmt
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            // 5. Set the value of user-supplied bind vars in the stmt
            st.executeUpdate();
            // 6. Return the value of the first bind variable
            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    // 7. Close the statement
                    st.close();
                } catch (SQLException e) {
                }
            }
        }
    }

    public String warrantyNamevalidate(String type) {
        ViewObjectImpl vo = getSvcWtyPrf1();

        //Row[] rw=vo.getFilteredRows("AttTypeNm", type);
        RowQualifier rowQualifier = new RowQualifier(vo);
        // filtering data using method setWhereClause
        rowQualifier.setWhereClause("UPPER(WtyNm)=UPPER('" + type + "')");
        // use method getFilteredRows to return Row[] type after filter.
        Row[] rw = vo.getFilteredRows(rowQualifier);
        System.out.println(rw.length);
        if (rw.length > 0) {
            //System.out.println("duplicate");
            for (Row r : rw) {
                if (!r.equals(vo.getCurrentRow()))
                    return "Y";
            }

        }

        return "N";


    }

    public void addwarrantyItem(String type) {
        String hoOrgId = (String) resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String cldId = (String) resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        Row rs = this.getAppItmWty1().createRow();
        rs.setAttribute("WtyId", this.getSvcWtyPrf1().getCurrentRow().getAttribute("WtyId"));
        rs.setAttribute("HoOrgId", hoOrgId);
        rs.setAttribute("CldId", cldId);
        rs.setAttribute("SlocId", slocId);
        System.out.println("ItmId---" + this.getSvcWtyPrf1().getCurrentRow().getAttribute("transItemId"));
        rs.setAttribute("ItmId", this.getSvcWtyPrf1().getCurrentRow().getAttribute("transItemId"));

        rs.setAttribute("Actv", "Y");

        this.getAppItmWty1().insertRow(rs);
        this.getSvcWtyPrf1().getCurrentRow().setAttribute("transItemName", null);
    }


    public String itemNamevalidate(String type) {
        ViewObjectImpl vo = this.getAppItmWty1();

        //Row[] rw=vo.getFilteredRows("AttTypeNm", type);
        RowQualifier rowQualifier = new RowQualifier(vo);
        // filtering data using method setWhereClause
        rowQualifier.setWhereClause("UPPER(transappname)=UPPER('" + type + "')");
        // use method getFilteredRows to return Row[] type after filter.
        Row[] rw = vo.getFilteredRows(rowQualifier);
        System.out.println(rw.length);
        if (rw.length > 0) {
            //System.out.println("duplicate");
            for (Row r : rw) {
                return "Y";
                //                           if(!r.equals(vo.getCurrentRow()))
                //                           return "Y";
                //                           }
            }
        }

        return "N";


    }

    /**
     * Container's getter for AppItmWty1.
     * @return AppItmWty1
     */
    public ViewObjectImpl getAppItmWty1() {
        return (ViewObjectImpl) findViewObject("AppItmWty1");
    }

    /**
     * Container's getter for SvcWarrantyPrfToAppItmWtyVL1.
     * @return SvcWarrantyPrfToAppItmWtyVL1
     */
    public ViewLinkImpl getSvcWarrantyPrfToAppItmWtyVL1() {
        return (ViewLinkImpl) findViewLink("SvcWarrantyPrfToAppItmWtyVL1");
    }

    /**
     * Container's getter for LovItemName1.
     * @return LovItemName1
     */
    public ViewObjectImpl getLovItemName1() {
        return (ViewObjectImpl) findViewObject("LovItemName1");
    }


}

