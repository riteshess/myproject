package svctatApp.model.entities;

import javax.el.ELContext;
import javax.el.ValueExpression;

import oracle.adf.share.ADFContext;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.RowInconsistentException;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Nov 11 12:02:06 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class svcEscTimeEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CldId,
        SlocId,
        HoOrgId,
        OrgId,
        EscLvl,
        BalPrd,
        BalPrdUnit,
        TatDays,
        UsrIdCrt,
        CrtDt,
        UsrIdMod,
        ModDt,
        svcEscHrcyEO;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int ESCLVL = AttributesEnum.EscLvl.index();
    public static final int BALPRD = AttributesEnum.BalPrd.index();
    public static final int BALPRDUNIT = AttributesEnum.BalPrdUnit.index();
    public static final int TATDAYS = AttributesEnum.TatDays.index();
    public static final int USRIDCRT = AttributesEnum.UsrIdCrt.index();
    public static final int CRTDT = AttributesEnum.CrtDt.index();
    public static final int USRIDMOD = AttributesEnum.UsrIdMod.index();
    public static final int MODDT = AttributesEnum.ModDt.index();
    public static final int SVCESCHRCYEO = AttributesEnum.svcEscHrcyEO.index();

    /**
     * This is the default constructor (do not remove).
     */
    public svcEscTimeEOImpl() {
    }

    /**
     * Gets the attribute value for CldId, using the alias name CldId.
     * @return the value of CldId
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CldId.
     * @param value value to set the CldId
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for SlocId, using the alias name SlocId.
     * @return the value of SlocId
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for SlocId.
     * @param value value to set the SlocId
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for HoOrgId, using the alias name HoOrgId.
     * @return the value of HoOrgId
     */
    public String getHoOrgId() {
        return (String) getAttributeInternal(HOORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for HoOrgId.
     * @param value value to set the HoOrgId
     */
    public void setHoOrgId(String value) {
        setAttributeInternal(HOORGID, value);
    }

    /**
     * Gets the attribute value for OrgId, using the alias name OrgId.
     * @return the value of OrgId
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for OrgId.
     * @param value value to set the OrgId
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for EscLvl, using the alias name EscLvl.
     * @return the value of EscLvl
     */
    public Integer getEscLvl() {
        return (Integer) getAttributeInternal(ESCLVL);
    }

    /**
     * Sets <code>value</code> as the attribute value for EscLvl.
     * @param value value to set the EscLvl
     */
    public void setEscLvl(Integer value) {
        setAttributeInternal(ESCLVL, value);
    }

    /**
     * Gets the attribute value for BalPrd, using the alias name BalPrd.
     * @return the value of BalPrd
     */
    public Number getBalPrd() {
        return (Number) getAttributeInternal(BALPRD);
    }

    /**
     * Sets <code>value</code> as the attribute value for BalPrd.
     * @param value value to set the BalPrd
     */
    public void setBalPrd(Number value) {
        setAttributeInternal(BALPRD, value);
    }

    /**
     * Gets the attribute value for BalPrdUnit, using the alias name BalPrdUnit.
     * @return the value of BalPrdUnit
     */
    public Number getBalPrdUnit() {
        return (Number) getAttributeInternal(BALPRDUNIT);
    }

    /**
     * Sets <code>value</code> as the attribute value for BalPrdUnit.
     * @param value value to set the BalPrdUnit
     */
    public void setBalPrdUnit(Number value) {
        setAttributeInternal(BALPRDUNIT, value);
    }

    /**
     * Gets the attribute value for TatDays, using the alias name TatDays.
     * @return the value of TatDays
     */
    public Number getTatDays() {
        return (Number) getAttributeInternal(TATDAYS);
    }

    /**
     * Sets <code>value</code> as the attribute value for TatDays.
     * @param value value to set the TatDays
     */
    public void setTatDays(Number value) {
        setAttributeInternal(TATDAYS, value);
    }

    /**
     * Gets the attribute value for UsrIdCrt, using the alias name UsrIdCrt.
     * @return the value of UsrIdCrt
     */
    public Integer getUsrIdCrt() {
        return (Integer) getAttributeInternal(USRIDCRT);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdCrt.
     * @param value value to set the UsrIdCrt
     */
    public void setUsrIdCrt(Integer value) {
        setAttributeInternal(USRIDCRT, value);
    }

    /**
     * Gets the attribute value for CrtDt, using the alias name CrtDt.
     * @return the value of CrtDt
     */
    public Timestamp getCrtDt() {
        return (Timestamp) getAttributeInternal(CRTDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for CrtDt.
     * @param value value to set the CrtDt
     */
    public void setCrtDt(Timestamp value) {
        setAttributeInternal(CRTDT, value);
    }

    /**
     * Gets the attribute value for UsrIdMod, using the alias name UsrIdMod.
     * @return the value of UsrIdMod
     */
    public Integer getUsrIdMod() {
        return (Integer) getAttributeInternal(USRIDMOD);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdMod.
     * @param value value to set the UsrIdMod
     */
    public void setUsrIdMod(Integer value) {
        setAttributeInternal(USRIDMOD, value);
    }

    /**
     * Gets the attribute value for ModDt, using the alias name ModDt.
     * @return the value of ModDt
     */
    public Timestamp getModDt() {
        return (Timestamp) getAttributeInternal(MODDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for ModDt.
     * @param value value to set the ModDt
     */
    public void setModDt(Timestamp value) {
        setAttributeInternal(MODDT, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getsvcEscHrcyEO() {
        return (RowIterator) getAttributeInternal(SVCESCHRCYEO);
    }

    /**
     * @param cldId key constituent
     * @param slocId key constituent
     * @param orgId key constituent
     * @param escLvl key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(String cldId, Integer slocId, String orgId, Integer escLvl) {
        return new Key(new Object[] { cldId, slocId, orgId, escLvl });
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("svctatApp.model.entities.svcEscTimeEO");
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        if (resolvEl("#{pageFlowScope.GLBL_APP_USR}") != null) {
            setUsrIdCrt((Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString())));
        }
        setCrtDt(new Timestamp(System.currentTimeMillis()));
        
        super.create(attributeList);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        try {
            super.lock();
        } catch (RowInconsistentException e) {
            refresh(REFRESH_WITH_DB_ONLY_IF_UNCHANGED | REFRESH_CONTAINEES);
            super.lock();
        }
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        if (operation == DML_UPDATE) {
            {
                if (resolvEl("#{pageFlowScope.GLBL_APP_USR}") != null) {
                    setUsrIdMod((Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString())));
                }
                setModDt(new Timestamp(System.currentTimeMillis()));

            }
        }
        
        super.doDML(operation, e);
    }
    public Object resolvEl(String data) {
        ADFContext adfCtx = ADFContext.getCurrent();
        ELContext elContext = adfCtx.getELContext();
        ValueExpression valueExp = adfCtx.getExpressionFactory().createValueExpression(elContext, data, Object.class);
       Object Message = valueExp.getValue(elContext).toString();
        return Message;
    } 
}

