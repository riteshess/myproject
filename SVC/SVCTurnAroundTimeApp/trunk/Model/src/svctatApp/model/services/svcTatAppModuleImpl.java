package svctatApp.model.services;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import javax.el.ELContext;
import javax.el.ValueExpression;

import oracle.adf.share.ADFContext;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;

import oracle.jbo.server.ViewObjectImpl;

import svctatApp.model.services.common.svcTatAppModule;
import svctatApp.model.views.LOVUsrNameVOImpl;
import svctatApp.model.views.svcEscHcyVOImpl;
import svctatApp.model.views.svcTatDefectVOImpl;
import svctatApp.model.views.svcTatEntityVOImpl;
import svctatApp.model.views.svcTatLocVOImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Nov 10 10:28:43 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class svcTatAppModuleImpl extends ApplicationModuleImpl implements svcTatAppModule {
    /**
     * This is the default constructor (do not remove).
     */


    String cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
    Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
    String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
    Integer usrId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
    String hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();

    public svcTatAppModuleImpl() {
    }

    /**
     * Container's getter for svcTatDefectVO.
     * @return svcTatDefectVO
     */
    public svcTatDefectVOImpl getsvcTatDefectVO() {
        return (svcTatDefectVOImpl) findViewObject("svcTatDefectVO");
    }

    /**
     * Container's getter for svcTatEntityVO.
     * @return svcTatEntityVO
     */
    public svcTatEntityVOImpl getsvcTatEntityVO() {
        return (svcTatEntityVOImpl) findViewObject("svcTatEntityVO");
    }

    /**
     * Container's getter for svcTatLocVO.
     * @return svcTatLocVO
     */
    public svcTatLocVOImpl getsvcTatLocVO() {
        return (svcTatLocVOImpl) findViewObject("svcTatLocVO");
    }

    /**
     * Container's getter for LOVLocationVO.
     * @return LOVLocationVO
     */
    public ViewObjectImpl getLOVLocationVO() {
        return (ViewObjectImpl) findViewObject("LOVLocationVO");
    }

    /**
     * Container's getter for LOVPrdUnitVO.
     * @return LOVPrdUnitVO
     */
    public ViewObjectImpl getLOVPrdUnitVO() {
        return (ViewObjectImpl) findViewObject("LOVPrdUnitVO");
    }

    public Object resolvEl(String data) {

        ADFContext adfCtx = ADFContext.getCurrent();
        ELContext elContext = adfCtx.getELContext();
        ValueExpression valueExp = adfCtx.getExpressionFactory().createValueExpression(elContext, data, Object.class);
        Object Message = valueExp.getValue(elContext).toString();

        return Message;
    }

    public Integer getSlocId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC }").toString());
    }

    public StringBuffer getCldId() {
        return new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
    }

    public StringBuffer getOrgId() {
        return new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
    }

    public StringBuffer getHoOrgId() {
        return new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString());
    }

    public Integer getUsrId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
    }

    public void setFilterData() {

        setFilterForlocation(getSlocId(), getCldId());
        setFilterForLabel(getSlocId(), getCldId());
        setFilterForSearch(getSlocId(), getCldId(), getHoOrgId(), getOrgId());
        setFilterForDefects(getSlocId(), getCldId(), getHoOrgId());
        setFilterForEmpployee(getSlocId(), getCldId(), getHoOrgId());
        setFilterForDefectSearch(getSlocId(), getCldId(), getHoOrgId());
        setFilterForEmpSearch(getSlocId(), getCldId(), getHoOrgId());
        setFilterForUserNme(getSlocId());
        setEntityParam();
        setLocationParam();
        setDefectsParam();
        setEscTimeParam();
        setFilterForDefctNme(getSlocId(), getCldId(), getHoOrgId());

    }


    private void setFilterForDefctNme(Integer slocId, StringBuffer cldId, StringBuffer HoOrgID) {

        ViewObjectImpl dVO1 = this.getLOVDefectNameVO1();
        dVO1.setNamedWhereClauseParam("BindCldId", cldId);
        dVO1.setNamedWhereClauseParam("BindHoOrgId", HoOrgID);
        dVO1.setNamedWhereClauseParam("BindSlocId", slocId);
        dVO1.executeQuery();
    }

    private void setFilterForDefectSearch(Integer slocId, StringBuffer cldId, StringBuffer HoOrgId) {

        ViewObjectImpl impl = this.getSearchDefectsVO1();
        impl.setNamedWhereClauseParam("BindCldId", cldId);
        impl.setNamedWhereClauseParam("BindSlocId", slocId);
        impl.setNamedWhereClauseParam("BindOrgId", getOrgId().toString());
        impl.setNamedWhereClauseParam("BindHoOrgId", HoOrgId);

        impl.executeQuery();
    }

    private void setFilterForEmpSearch(Integer slocId, StringBuffer cldId, StringBuffer HoOrgId) {

        ViewObjectImpl impl = this.getSearchEntityVO1();
        System.out.println("--->1" + impl.getEstimatedRowCount());
        impl.setNamedWhereClauseParam("BindCldId", cldId);
        impl.setNamedWhereClauseParam("BindSlocId", slocId);
        impl.setNamedWhereClauseParam("BindHoOrgId", HoOrgId);
        impl.executeQuery();
        System.out.println("--->1" + impl.getEstimatedRowCount());
    }

    private void setFilterForlocation(Integer slocId, StringBuffer cldId) {

        ViewObjectImpl impl = this.getLOVLocationVO();
        impl.setNamedWhereClauseParam("BindCldId", cldId);
        impl.setNamedWhereClauseParam("BindSlocId", slocId);
        impl.executeQuery();
    }

    /**
     * Container's getter for LOVLabelVO1.
     * @return LOVLabelVO1
     */
    public ViewObjectImpl getLOVLabelVO() {
        return (ViewObjectImpl) findViewObject("LOVLabelVO");
    }

    private void setFilterForLabel(Integer slocId, StringBuffer CldId) {

        ViewObjectImpl impl = this.getLOVLabelVO();
        impl.setNamedWhereClauseParam("BindCldId", CldId);
        impl.setNamedWhereClauseParam("BindSlocId", slocId);
        //impl.setNamedWhereClauseParam("BindLblId", null);
        impl.executeQuery();
    }

    /**
     * Container's getter for SearchLocationVO1.
     * @return SearchLocationVO1
     */
    public ViewObjectImpl getSearchLocationVO1() {
        return (ViewObjectImpl) findViewObject("SearchLocationVO1");
    }

    private void setFilterForSearch(Integer slocId, StringBuffer cldId, StringBuffer HoLOrgId, StringBuffer orgId) {

        ViewObjectImpl impl = this.getSearchLocationVO1();
        impl.setNamedWhereClauseParam("BindCldId", cldId);
        impl.setNamedWhereClauseParam("BindSlocId", slocId);
        impl.setNamedWhereClauseParam("BindOrgId", HoLOrgId);
        impl.setNamedWhereClauseParam("BindHoOrgId", orgId);
        impl.executeQuery();
    }

    private void setFilterForDefects(Integer slocId, StringBuffer cldId, StringBuffer HoOrgID) {

        ViewObjectImpl dVO1 = this.getLOVDefectIDVO1();
        dVO1.setNamedWhereClauseParam("BindCldId", cldId);
        dVO1.setNamedWhereClauseParam("BindHoOrgId", HoOrgID);
        dVO1.setNamedWhereClauseParam("BindSlocId", slocId);
        dVO1.executeQuery();
    }

    private void setFilterForEmpployee(Integer slocId, StringBuffer cldId, StringBuffer HoOrgID) {

        ViewObjectImpl dVO1 = this.getLOVEmployeeNameVO1();

        dVO1.setNamedWhereClauseParam("BindCldId", cldId);
        dVO1.setNamedWhereClauseParam("BindHoOrgID", HoOrgID);
        dVO1.setNamedWhereClauseParam("BindSlocID", slocId);

        dVO1.executeQuery();
        System.out.println("--->2" + dVO1.getEstimatedRowCount());
    }

    /**
     * Container's getter for LOVDefectIDVO1.
     * @return LOVDefectIDVO1
     */
    public ViewObjectImpl getLOVDefectIDVO1() {
        return (ViewObjectImpl) findViewObject("LOVDefectIDVO1");
    }

    /**
     * Container's getter for LOVEmployeeNameVO1.
     * @return LOVEmployeeNameVO1
     */
    public ViewObjectImpl getLOVEmployeeNameVO1() {
        return (ViewObjectImpl) findViewObject("LOVEmployeeNameVO1");
    }

    /**
     * Container's getter for SearchDefectsVO1.
     * @return SearchDefectsVO1
     */
    public ViewObjectImpl getSearchDefectsVO1() {
        return (ViewObjectImpl) findViewObject("SearchDefectsVO1");
    }

    /**
     * Container's getter for SearchEntityVO1.
     * @return SearchEntityVO1
     */
    public ViewObjectImpl getSearchEntityVO1() {
        return (ViewObjectImpl) findViewObject("SearchEntityVO1");
    }

    private void setEntityParam() {
        svcTatEntityVOImpl entityVO = this.getsvcTatEntityVO();
        System.out.println("--->1" + entityVO.getEstimatedRowCount());
        entityVO.applyViewCriteria(entityVO.getViewCriteria("svcTatEntityVOCriteria"));
        entityVO.setNamedWhereClauseParam("BindCldId", getCldId().toString());
        entityVO.setNamedWhereClauseParam("BindHoOrgId", getHoOrgId().toString());
        entityVO.setNamedWhereClauseParam("BindSlocId", getSlocId());
        entityVO.executeQuery();
        System.out.println("--->2" + entityVO.getEstimatedRowCount());
    }

    /**
     * Search Entity
     *
     * **/
    public void searchEntity() {
        Row first = this.getSearchEntityVO1().first();
        svcTatEntityVOImpl entityVO = this.getsvcTatEntityVO();

        entityVO.applyViewCriteria(entityVO.getViewCriteria("svcTatEntityVOCriteria"));
        entityVO.setNamedWhereClauseParam("BindCldId", getCldId().toString());
        entityVO.setNamedWhereClauseParam("BindHoOrgId", getHoOrgId().toString());
        entityVO.setNamedWhereClauseParam("BindSlocId", getSlocId());
        entityVO.setNamedWhereClauseParam("BindEoId", first.getAttribute("EntityId"));
        entityVO.executeQuery();

    }

    /**
     * Reset Entity
     *
     * **/
    public void resetEntity() {
        getSearchEntityVO1().executeQuery();

        svcTatEntityVOImpl entityVO = this.getsvcTatEntityVO();
        entityVO.applyViewCriteria(entityVO.getViewCriteria("svcTatEntityVOCriteria"));
        entityVO.setNamedWhereClauseParam("BindCldId", -1);
        entityVO.setNamedWhereClauseParam("BindHoOrgId", hoOrgId);
        entityVO.setNamedWhereClauseParam("BindSlocId", slocId);
        entityVO.setNamedWhereClauseParam("BindEoId", null);
        entityVO.executeQuery();
        Row curr = this.getSearchEntityVO1().getCurrentRow();
        if (curr != null) {
            curr.setAttribute("TransEntityNme", null);


        }
        getSearchEntityVO1().executeQuery();
    }

    /**
     *
     * Search Location
     *
     * ***/
    public void searchLocation() {
        Row first = this.getSearchLocationVO1().first();
        svcTatLocVOImpl impl = this.getsvcTatLocVO();

        impl.applyViewCriteria(impl.getViewCriteria("svcTatLocVOCriteria"));
        impl.setNamedWhereClauseParam("BindCldId", getCldId().toString());
        impl.setNamedWhereClauseParam("BindHoOrgId", getHoOrgId().toString());
        impl.setNamedWhereClauseParam("BindSlocId", getSlocId());
        impl.setNamedWhereClauseParam("BindOrgId",
                                      getOrgId() == null ? getHoOrgId().toString() : getOrgId().toString());
        impl.setNamedWhereClauseParam("BindLabelId",
                                      first.getAttribute("LabelId") == null ? "" : first.getAttribute("LabelId"));
        impl.setNamedWhereClauseParam("BindLocId",
                                      first.getAttribute("LocationId") == null ? "" : first.getAttribute("LocationId"));
        impl.executeQuery();


    }

    /**
     * Reset Location
     *
     * **/
    public void resetLocation() {

        this.getSearchLocationVO1().executeQuery();

        svcTatLocVOImpl impl = this.getsvcTatLocVO();

        impl.applyViewCriteria(impl.getViewCriteria("svcTatLocVOCriteria"));
        impl.setNamedWhereClauseParam("BindCldId", -1);
        impl.setNamedWhereClauseParam("BindHoOrgId", hoOrgId);
        impl.setNamedWhereClauseParam("BindSlocId", slocId);
        impl.setNamedWhereClauseParam("BindOrgId", orgId);
        impl.setNamedWhereClauseParam("BindLabelId", -1);
        impl.setNamedWhereClauseParam("BindLocId", -1);
        impl.executeQuery();

        Row curr = this.getSearchLocationVO1().getCurrentRow();
        if (curr != null) {
            curr.setAttribute("LabelNme", null);
            curr.setAttribute("LocationNme", null);

        }
        getSearchLocationVO1().executeQuery();

    }


    /**
     *
     * Search Defects
     *
     * ***/
    public void searchDefects() {
        Row first = this.getSearchDefectsVO1().first();
        svcTatDefectVOImpl impl = this.getsvcTatDefectVO();

        impl.applyViewCriteria(impl.getViewCriteria("svcTatDefectVOCriteria"));
        impl.setNamedWhereClauseParam("BindCldId", getCldId().toString());
        impl.setNamedWhereClauseParam("BindHoOrgId", getHoOrgId().toString());
        impl.setNamedWhereClauseParam("BindSlocId", getSlocId());
        impl.setNamedWhereClauseParam("BindOrgId", getOrgId().toString());
        impl.setNamedWhereClauseParam("BindDefectId",
                                      first.getAttribute("TransDefectId") == null ? "" :
                                      first.getAttribute("TransDefectId"));

        impl.executeQuery();


    }

    /**
     * Reset defects
     *
     * **/
    public void resetDefects() {

        this.getSearchDefectsVO1().executeQuery();

        svcTatDefectVOImpl impl = this.getsvcTatDefectVO();

        impl.applyViewCriteria(impl.getViewCriteria("svcTatDefectVOCriteria"));
        impl.setNamedWhereClauseParam("BindCldId", -1);
        impl.setNamedWhereClauseParam("BindHoOrgId", hoOrgId);
        impl.setNamedWhereClauseParam("BindSlocId", slocId);
        impl.setNamedWhereClauseParam("BindOrgId", orgId);
        impl.setNamedWhereClauseParam("BindDefectId", null);

        impl.executeQuery();
        Row curr = this.getSearchDefectsVO1().getCurrentRow();
        if (curr != null) {
            curr.setAttribute("TransDefectNme", null);


        }
        getSearchDefectsVO1().executeQuery();
    }

    /**
     * Container's getter for svcEscTimeVO1.
     * @return svcEscTimeVO1
     */
    public ViewObjectImpl getsvcEscTimeVO1() {
        return (ViewObjectImpl) findViewObject("svcEscTimeVO1");
    }

    /**
     * Container's getter for svcEscHcyVO1.
     * @return svcEscHcyVO1
     */
    public svcEscHcyVOImpl getsvcEscHcyVO1() {
        return (svcEscHcyVOImpl) findViewObject("svcEscHcyVO1");
    }

    /**
     * Container's getter for svcEscTimeTosvcEscHcyVL1.
     * @return svcEscTimeTosvcEscHcyVL1
     */
    public ViewLinkImpl getsvcEscTimeTosvcEscHcyVL1() {
        return (ViewLinkImpl) findViewLink("svcEscTimeTosvcEscHcyVL1");
    }

    /**
     * Container's getter for LOVUsrNameVO1.
     * @return LOVUsrNameVO1
     */
    public LOVUsrNameVOImpl getLOVUsrNameVO1() {
        return (LOVUsrNameVOImpl) findViewObject("LOVUsrNameVO1");
    }

    private void setFilterForUserNme(Integer slocId) {
        ViewObjectImpl impl = this.getLOVUsrNameVO1();
        impl.setNamedWhereClauseParam("BIndSlocId", slocId);
        impl.executeQuery();
    }

    /**
     *
     *    STORED Function
     *
     * **/

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                    // System.out.println(bindVars[z] + "zzzzzzzzzzzzzzzzzzzzz");
                }
            }
            st.executeUpdate();
            return st.getObject(1);
        } catch (SQLException e) {
            e.printStackTrace();
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    /**
     * Get No of Days
     *
     * **/
    public oracle.jbo.domain.Number getTotalDays(oracle.jbo.domain.Number time, Integer PrdUnit) {

        //Row curr=this.getsvcTatLocVO().getCurrentRow();
        try {
            BigDecimal totalDays = (BigDecimal) callStoredFunction(Types.NUMERIC, "SVC.SVC_GET_TAT_DAYS(?,?)", new Object[] {
                                                                   time, PrdUnit
            });
            System.out.println("total value is " + totalDays);
            oracle.jbo.domain.Number returnVal = new oracle.jbo.domain.Number(0);
            if (totalDays != null) {
                returnVal = new oracle.jbo.domain.Number(totalDays);
            }
            oracle.jbo.domain.Number returnVal1 = (oracle.jbo.domain.Number) returnVal.round(6);
            System.out.println("Total Number of Days is " + totalDays);
            return returnVal1;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;

    }

    /**
     *Setting Level  for ESC Time
     * and creating Row for it.
     *
     */
    public void setParamForESCLevel() {
        Row row = (Row) this.getsvcEscTimeVO1().createRow();

        row.setAttribute("EscLvl", getsvcEscTimeLevelSerialNo());
        row.setAttribute("CldId", getCldId().toString());
        row.setAttribute("OrgId", getOrgId() == null ? getHoOrgId().toString() : getOrgId().toString());
        row.setAttribute("SlocId", getSlocId().toString());
        row.setAttribute("HoOrgId", getHoOrgId().toString());
        row.setAttribute("BalPrdUnit", 15);
        this.getsvcEscTimeVO1().insertRow(row);
        this.getsvcEscTimeVO1().setCurrentRow(row);
    }

    /**
     *Generating Level Serial Number
     *
     */
    public Integer getsvcEscTimeLevelSerialNo() {
        RowSetIterator mnfamc = getsvcEscTimeVO1().createRowSetIterator(null);
        Row row = null;
        Integer amcSrNo = 0;
        Integer currNo = 0;
        while (mnfamc.hasNext()) {
            row = mnfamc.next();
            currNo = (Integer) row.getAttribute("EscLvl");
            if (currNo.compareTo(amcSrNo) == 1) {
                amcSrNo = currNo;
            }
        }
        mnfamc.closeRowSetIterator();
        return (amcSrNo + 1);
    }

    /**
     *Deleting Level Serial Number
     *
     */
    public Integer getEscLevel() {
        Integer curLevel = (Integer) this.getsvcEscTimeVO1().getCurrentRow().getAttribute("EscLvl");
        // System.out.println(" current level " + curLevel);
        RowSetIterator mnfamc = getsvcEscTimeVO1().createRowSetIterator(null);
        Row row = null;
        Integer amcSrNo = 0;
        Integer currNo = 0;
        while (mnfamc.hasNext()) {
            row = mnfamc.next();
            currNo = (Integer) row.getAttribute("EscLvl");
            if (currNo.compareTo(amcSrNo) == 1) {
                amcSrNo = currNo;
                //System.out.println(" higher level " + amcSrNo);
            }
        }
        mnfamc.closeRowSetIterator();
        if (curLevel >= amcSrNo) { //System.out.println("  level " + amcSrNo);
            return 1;
        } else
            return 0;
    }

    private void setLocationParam() {

        svcTatLocVOImpl impl = this.getsvcTatLocVO();

        impl.applyViewCriteria(impl.getViewCriteria("svcTatLocVOCriteria"));
        impl.setNamedWhereClauseParam("BindCldId", getCldId().toString());
        impl.setNamedWhereClauseParam("BindHoOrgId", getHoOrgId().toString());
        impl.setNamedWhereClauseParam("BindSlocId", getSlocId());
        impl.setNamedWhereClauseParam("BindOrgId",
                                      getOrgId() == null ? getHoOrgId().toString() : getOrgId().toString());
        impl.setNamedWhereClauseParam("BindLabelId", null);
        impl.setNamedWhereClauseParam("BindLocId", null);
        impl.executeQuery();
    }

    private void setDefectsParam() {

        svcTatDefectVOImpl impl = this.getsvcTatDefectVO();

        impl.applyViewCriteria(impl.getViewCriteria("svcTatDefectVOCriteria"));
        impl.setNamedWhereClauseParam("BindCldId", getCldId().toString());
        impl.setNamedWhereClauseParam("BindHoOrgId", getHoOrgId().toString());
        impl.setNamedWhereClauseParam("BindSlocId", getSlocId());
        impl.setNamedWhereClauseParam("BindOrgId", getOrgId().toString());
        impl.setNamedWhereClauseParam("BindDefectId", null);

        impl.executeQuery();
    }

    private void setEscTimeParam() {

        ViewObjectImpl entityVO = this.getsvcEscTimeVO1();
        System.out.println("--->1" + entityVO.getEstimatedRowCount());
        entityVO.applyViewCriteria(entityVO.getViewCriteria("svcEscTimeVOCriteria"));
        entityVO.setNamedWhereClauseParam("BindCldId", getCldId().toString());
        entityVO.setNamedWhereClauseParam("BindHoOrgId", getHoOrgId().toString());
        entityVO.setNamedWhereClauseParam("BindSlocId", getSlocId());
        entityVO.executeQuery();
        System.out.println("--->2" + entityVO.getEstimatedRowCount());
    }

    /**
     * Container's getter for LOVDefectNameVO1.
     * @return LOVDefectNameVO1
     */
    public ViewObjectImpl getLOVDefectNameVO1() {
        return (ViewObjectImpl) findViewObject("LOVDefectNameVO1");
    }


    public String validateLocation() {
        ViewObjectImpl vo = this.getsvcTatLoc1();
        Row curr = this.getsvcTatLocVO().getCurrentRow();
        if (curr.getAttribute("TransAddsLocId") != null) {
            String locId = (String) curr.getAttribute("TransAddsLocId");
            RowQualifier rq = new RowQualifier(vo);
            rq.setWhereClause("OrgId = '" + orgId + "'  and AddsLocId = '" + locId + "'");
            Row[] rr = vo.getFilteredRows(rq);
            System.out.println("----lengthe ---------" + rr.length + " " + rq.getExprStr());
            if (rr.length > 1) {
                return "Y";
            } else
                return "N";

        } else
            return "N";
    }

    /**
     * Container's getter for svcTatLoc1.
     * @return svcTatLoc1
     */
    public svcTatLocVOImpl getsvcTatLoc1() {
        return (svcTatLocVOImpl) findViewObject("svcTatLoc1");
    }

    public String validateLoc(String name) {
        ViewObjectImpl vo1 = this.getLOVLocationVO();
        Row[] rl = vo1.getFilteredRows("AddsLoc", name);
   //     System.out.println("--------------" + rl.length);
        String locId = null;
        if (rl.length > 0) {
            locId = (String) rl[0].getAttribute("LocId");
        }
     
        ViewObjectImpl vo = this.getsvcTatLoc1();

        Row curr = this.getsvcTatLocVO().getCurrentRow();
        RowQualifier rq = new RowQualifier(vo);
        rq.setWhereClause("HoOrgId = '" + getHoOrgId() +"' and OrgId = '" + getOrgId() + "'  and AddsLocId = '" + locId + "'");
        Row[] rr = vo.getFilteredRows(rq);
       System.out.println("----lengtheloc ---------" + rr.length + " " + rq.getExprStr());
        for (Row r : rr) {
       System.out.println("--------------keys   "+r.getKey()+" curr "+curr.getKey());
            if (!(r.getKey().equals(curr.getKey()))) {
                return "Y";
            }
        }
        return "N";

    }


    /**
     * Container's getter for LovLocationFilterVO1.
     * @return LovLocationFilterVO1
     */
    public ViewObjectImpl getLovLocationFilterVO1() {
        return (ViewObjectImpl) findViewObject("LovLocationFilterVO1");
    }
}


