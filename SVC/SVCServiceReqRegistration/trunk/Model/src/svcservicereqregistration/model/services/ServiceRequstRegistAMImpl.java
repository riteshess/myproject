package svcservicereqregistration.model.services;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.util.ArrayList;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import oracle.sql.NUMBER;

import svcservicereqregistration.model.services.common.ServiceRequstRegistAM;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Oct 15 14:47:13 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ServiceRequstRegistAMImpl extends ApplicationModuleImpl implements ServiceRequstRegistAM {
    /**
     * This is the default constructor (do not remove).
     */
    public ServiceRequstRegistAMImpl() {
    }
    private static ADFLogger _log = (ADFLogger) ADFLogger.createADFLogger(ServiceRequstRegistAMImpl.class);

    /**
     * Container's getter for SvcCm.
     * @return SvcCm
     */
    public ViewObjectImpl getSvcCm() {
        return (ViewObjectImpl) findViewObject("SvcCm");
    }

    public String getCldIdValue() {
        return resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
    }

    public Integer getSlocIdValue() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
    }

    public String getHoOrgIdValue() {
        return resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
    }

    public String getOrgIdValue() {
        return resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
    }

    public Integer getUsrId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
    }

    /**
     * Container's getter for SvcCmDfct.
     * @return SvcCmDfct
     */
    public ViewObjectImpl getSvcCmDfct() {
        return (ViewObjectImpl) findViewObject("SvcCmDfct");
    }


    /**
     * Container's getter for SvcCmAttch.
     * @return SvcCmAttch
     */
    public ViewObjectImpl getSvcCmAttch() {
        return (ViewObjectImpl) findViewObject("SvcCmAttch");
    }

    /**
     * Container's getter for FkSvcCmDfctVL1.
     * @return FkSvcCmDfctVL1
     */
    public ViewLinkImpl getFkSvcCmDfctVL1() {
        return (ViewLinkImpl) findViewLink("FkSvcCmDfctVL1");
    }


    /**
     * Container's getter for FkSvcCmAttchVL1.
     * @return FkSvcCmAttchVL1
     */
    public ViewLinkImpl getFkSvcCmAttchVL1() {
        return (ViewLinkImpl) findViewLink("FkSvcCmAttchVL1");
    }

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {

        CallableStatement st = null;
        try {
            // 1. Create a JDBC CallabledStatement
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            // 2. Register the first bind variable for the return value
            st.registerOutParameter(1, sqlReturnType);

            if (bindVars != null) {
                // 3. Loop over values for the bind variables passed in, if any
                for (int z = 0; z < bindVars.length; z++) {
                    // 4. Set the value of user-supplied bind vars in the stmt
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            // 5. Set the value of user-supplied bind vars in the stmt
            st.executeUpdate();
            // 6. Return the value of the first bind variable
            _log.info("Function return " + st.getObject(1));
            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e.getMessage());
        } finally {
            if (st != null) {
                try {
                    // 7. Close the statement
                    st.close();
                } catch (SQLException e) {
                    throw new JboException(e.getMessage());
                }
            }
        }
    }


    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }

    /**
     *  Create DocId and DocDt
     * @param UsrId
     * @param CldId
     * @param SlocId
     * @param OrgId
     */


    public void setTxnIdForCurrentRow(Integer UsrId, String CldId, Integer SlocId, String OrgId) {
        Row currentRow = this.getSvcCm().getCurrentRow();
        String docId = (String) (callStoredFunction(Types.VARCHAR, "app.get_txn_id (?,?,?,?,?,?)", new Object[] {
                                                    CldId, SlocId, OrgId, UsrId, new Integer(18516), new Integer(0)
        })); // app.pkg_app.get_txn_id(p_usr_id,p_org_id,p_sloc_id,18505)
        _log.info("--TxnId new created--" + docId);
        Timestamp ts = new Timestamp(System.currentTimeMillis());
        currentRow.setAttribute("DocId", docId);
        currentRow.setAttribute("DocDt", new Timestamp(System.currentTimeMillis()));
        currentRow.setAttribute("CallDt", new Timestamp(System.currentTimeMillis()));
        currentRow.setAttribute("CrtDt", new Timestamp(System.currentTimeMillis()));
        getFYid(CldId, OrgId, ts, "A");


    }

    /**
     *
     * @param SlocId
     * @param CldId
     * @param HoOrgId
     * @param OrgId
     * @param TableName
     * @param WhId
     * @param fyId
     * @return
     */

    public String genCallNo(Integer SlocId, String CldId, String HoOrgId, String OrgId, String TableName,
                            Integer fyId) {
        Row cmRow = this.getSvcCm().getCurrentRow();
        String callNo = null;
        Integer docType = 0;
        if (cmRow.getAttribute("CallNo") == null) {
            // docType =Integer.parseInt(cmRow.getAttribute("CallRefType").toString());
            callNo = (String) callStoredFunction(Types.VARCHAR, "SVC.SVC_GEN_ID(?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                 CldId, SlocId, HoOrgId, OrgId, TableName, fyId, 23002, docType, null,
                                                 null
            });
            _log.info("new id    " + callNo);
            cmRow.setAttribute("CallNo", callNo);
        } else {
            callNo = cmRow.getAttribute("CallNo").toString();
        }

        updateInsIntoCallTrace(42);
        if (cmRow.getAttribute("DocId") != null) {
            String DocId = cmRow.getAttribute("DocId").toString();
            callStoredFunction12("SVC.PR_ALRT_CALL_TRC(?,?,?,?,?,?)", new Object[] {
                                 CldId, SlocId, HoOrgId, OrgId, DocId, 42
            });
        }
        return callNo;
    }

    public String genTktNo(Integer SlocId, String CldId, String HoOrgId, String OrgId, String TableName) {
        Row cmRow = this.getSvcCm().getCurrentRow();
        String tktNo = null;
        Integer docType = 0;
        Integer fyId = Integer.parseInt(cmRow.getAttribute("FyId").toString());
        if (cmRow.getAttribute("TktNo") == null) {
            // docType =Integer.parseInt(cmRow.getAttribute("CallRefType").toString());
            String DocId = cmRow.getAttribute("DocId").toString();
            tktNo = (String) callStoredFunction(Types.VARCHAR, "SVC.SVC_GEN_ID(?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                CldId, SlocId, HoOrgId, OrgId, TableName, fyId, 23002, docType, null,
                                                null
            });
            _log.info("new id    " + tktNo);
            cmRow.setAttribute("TktNo", tktNo);
            cmRow.setAttribute("TktDt", new Timestamp(System.currentTimeMillis()));
            cmRow.setAttribute("CallStat", 43);
            updateInsIntoCallTrace(43);
            callStoredFunction12("SVC.PR_ALRT_CALL_TRC(?,?,?,?,?,?)", new Object[] {
                                 CldId, SlocId, HoOrgId, OrgId, DocId, 43
            });
        } else {
            tktNo = cmRow.getAttribute("TktNo").toString();
        }
        return tktNo;
    }

    /**
     *
     * @param CldId
     * @param OrgId
     * @param geDate
     * @param Mode
     * @return
     */

    public Integer getFYid(String CldId, String OrgId, Timestamp geDate, String Mode) {
        Integer fyId = (Integer) (callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID (?,?,?)", new Object[] {
                                                     CldId, OrgId, geDate
        }));
        _log.info("-FY RETURNED-" + fyId);
        if (Mode.equalsIgnoreCase("A")) {
            _log.info("Set FyId in case mode is add");
            ViewObjectImpl ge = this.getSvcCm();
            if (fyId > 0) {
                ge.getCurrentRow().setAttribute("FyId", fyId);
            }
        } else if (Mode.equalsIgnoreCase("V")) {
            _log.info("In case mode is validation");
        }
        return fyId;
    }


    public void getScView(String CldId, Integer SlocId, String OrgId, String docId) {
        _log.info("inside view getScView  " + CldId + "  " + SlocId + "    " + OrgId + "  " + docId);
        ViewObjectImpl vo = this.getSvcCm();
        ViewCriteria vc = vo.getViewCriteria("SvcCmVOCriteria");
        vo.applyViewCriteria(vc);
        vo.setNamedWhereClauseParam("BindCldId", CldId);
        vo.setNamedWhereClauseParam("BindSlocId", SlocId);
        vo.setNamedWhereClauseParam("BindOrgId", OrgId);
        vo.setNamedWhereClauseParam("BindDocId", docId);
        vo.executeQuery();

    }

    public String chkSupplierNm() {
        ViewObjectImpl cmVO = this.getSvcCm();
        Row rr = cmVO.getCurrentRow();
        String ret = "N";
        Integer callRefTyp = Integer.parseInt(rr.getAttribute("CallRefType").toString());
        if (callRefTyp == 41) {
            if (rr.getAttribute("EoNm") == null) {
                ret = "W";
            }
        } else {
            if (rr.getAttribute("TransEoNm") == null) {
                ret = "E";
            }
        }
        return ret;
    }

    public String chkDefectItmDetails() {
        ViewObjectImpl cmVO = this.getSvcCm();
        Row rr = cmVO.getCurrentRow();
        String ret = "N";
        String srNo = "0";
        Integer callRefTyp = Integer.parseInt(rr.getAttribute("CallRefType").toString());
        if (callRefTyp == 41) {

        } else {
            if (rr.getAttribute("CallRefType") == null) {
                ret = "C";
            }
        }
        _log.info(rr.getAttribute("TransItmName") + "   ggggg  " + rr.getAttribute("TransDefectNm") + "  ::::::: " +
                  rr.getAttribute("TransRemarks"));
        if (rr.getAttribute("TransItmName") == null) {
            ret = "I";
        }
        if (rr.getAttribute("TransItmName") != null && rr.getAttribute("TransDefectNm") == null &&
            rr.getAttribute("TransRemarks") == null) {
            ret = "D";
        }
        if (callRefTyp.compareTo(new Integer(41)) == 0) {
            if (rr.getAttribute("TransManualSrNo") != null) {
                srNo = rr.getAttribute("TransManualSrNo").toString();
            }
        } else {
            if (rr.getAttribute("TransSrNo") != null) {
                srNo = rr.getAttribute("TransSrNo").toString();
            }

        }

        if (rr.getAttribute("TransItmName") != null && rr.getAttribute("TransDefectNm") != null &&
            rr.getAttribute("TransItmId") != null) {
            ViewObjectImpl lovDeft = this.getLovDefectId();
            ViewObjectImpl voDfct = this.getSvcCmDfct1();
            ViewObjectImpl voCm = this.getSvcCm();
            String docId = voCm.getCurrentRow().getAttribute("DocId").toString();
            lovDeft.setNamedWhereClauseParam("BindCldId", getCldIdValue());
            lovDeft.setNamedWhereClauseParam("BindSlocId", getSlocIdValue());
            lovDeft.setNamedWhereClauseParam("BindHoOrgId", getHoOrgIdValue());
            lovDeft.executeQuery();
            String itmId = rr.getAttribute("TransItmId").toString();
            Integer defctId = 0;
            Row[] r = lovDeft.getFilteredRows("DfctNm", rr.getAttribute("TransDefectNm").toString());
            if (r.length > 0) {
                if (r[0].getAttribute("DfctId") != null)
                    defctId = Integer.parseInt(r[0].getAttribute("DfctId").toString());
            }
            RowQualifier rq = new RowQualifier(voDfct);
            rq.setWhereClause("CldId ='" + getCldIdValue() + "' and SlocId =" + getSlocIdValue() + " and OrgId ='" +
                              getOrgIdValue() + "' and HoOrgId ='" + getHoOrgIdValue() + "' and DocId ='" + docId +
                              "' and ItmId ='" + itmId + "' and DfctId =" + defctId + " and SrNo ='" + srNo + "'");
            Row[] rr1 = voDfct.getFilteredRows(rq);
            _log.info(rq.getExprStr() + "       " + rr1.length);
            if (rr1.length > 0) {
                ret = "Y";
            }

        }
        return ret;
    }

    public void addItmDefectDetails(Integer count) {
        //        Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        //        String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        //        String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        //        String p_hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        ViewObjectImpl cmVo = this.getSvcCm();
        ViewObjectImpl defcVo = this.getSvcCmDfct();
        Row rr = cmVo.getCurrentRow();
        Integer callRefType = Integer.parseInt(rr.getAttribute("CallRefType").toString());
        if (rr.getAttribute("TransItmName") != null) {
            ViewObjectImpl lovDeft = this.getLovDefectId();
            lovDeft.setNamedWhereClauseParam("BindCldId", getCldIdValue());
            lovDeft.setNamedWhereClauseParam("BindSlocId", getSlocIdValue());
            lovDeft.setNamedWhereClauseParam("BindHoOrgId", getHoOrgIdValue());
            lovDeft.executeQuery();
            Integer defctId = 0;
            if (rr.getAttribute("TransDefectNm") != null) {
                Row[] r = lovDeft.getFilteredRows("DfctNm", rr.getAttribute("TransDefectNm").toString());
                if (r.length > 0) {
                    if (r[0].getAttribute("DfctId") != null)
                        defctId = Integer.parseInt(r[0].getAttribute("DfctId").toString());
                }
            }
            String srNo = "0";
            if (callRefType.compareTo(new Integer(41)) == 0) {
                if (rr.getAttribute("TransManualSrNo") != null) {
                    srNo = rr.getAttribute("TransManualSrNo").toString();
                }

            } else {
                if (rr.getAttribute("TransSrNo") != null) {
                    srNo = rr.getAttribute("TransSrNo").toString();
                }
            }
            System.out.println("sr no " + srNo);
            Row newR = defcVo.createRow();
            newR.setAttribute("HoOrgId", getHoOrgIdValue());
            newR.setAttribute("DfctSlno", count);
            newR.setAttribute("ItmId", rr.getAttribute("TransItmId"));
            newR.setAttribute("DfctId", defctId); //SrNo
            newR.setAttribute("SrNo", srNo);
            newR.setAttribute("Remarks", rr.getAttribute("TransRemarks"));
            defcVo.insertRow(newR);

        }
        rr.setAttribute("TransItmName", null);
        rr.setAttribute("TransDefectNm", null);
        rr.setAttribute("TransItmId", null);
        rr.setAttribute("TransRemarks", null);
        rr.setAttribute("TransSrNo", null);
        rr.setAttribute("TransManualSrNo", null);
    }
    public void setSrNoNull(){
        ViewObjectImpl cmVo = this.getSvcCm();
        Row rr = cmVo.getCurrentRow();
        rr.setAttribute("TransSrNo", null);
        rr.setAttribute("TransManualSrNo", null);
        
    }
    public String chkDefectAssignToEmp() {
        ViewObjectImpl dfctVo = this.getSvcCmDfct();
        Row rr = dfctVo.getCurrentRow();

        String ret = "N";
        if (rr.getAttribute("TransRequirmentArea") == null) {
            return "R";
        }
        if (rr.getAttribute("TransEmplyeeCode") == null) {
            return "E";
        }
        String dplct = null;
        _log.info((Integer) rr.getAttribute("TransRequirmentArea") + " " + (Integer) rr.getAttribute("TransEmpCode"));
        if (rr.getAttribute("TransRequirmentArea") != null && rr.getAttribute("TransEmpCode") != null &&
            rr.getAttribute("DocId") != null)
            _log.info("current doc id is " + rr.getAttribute("TransRequirmentArea") + " " +
                      rr.getAttribute("TransEmpCode") + " " + rr.getAttribute("DocId"));
        dplct =
            DuplicateCheck((Integer) rr.getAttribute("TransRequirmentArea"), (Integer) rr.getAttribute("TransEmpCode"),
                           rr.getAttribute("DocId").toString());
        if (dplct.equalsIgnoreCase("N")) {
            return "D";
        }


        return ret;
    }

    public String DuplicateCheck(Integer rqmtid, Integer empCode, String DocId) {
        // Integer rqmtid=null;
        //Integer empCode=null;

        ViewObjectImpl dfctVo = this.getSvcCmDfct();
        // Row rr= dfctVo.getCurrentRow();


        RowQualifier rq = new RowQualifier(getSvcCmAsgn1());
        rq.setWhereClause("CldId='" + getCldIdValue() + "' and SlocId= " + getSlocIdValue() + " and OrgId='" +
                          getOrgIdValue() + "' and HoOrgId = '" + getHoOrgIdValue() + "' and RqmtAreaId=" + rqmtid +
                          " and EmpCode= " + empCode + " AND DocId='" + DocId + "'");
        Row[] filter = getSvcCmAsgn1().getFilteredRows(rq);
        _log.info("expr" + rq.getExprStr());
        _log.info("length::" + filter.length);
        if (filter.length > 0) {
            return "N";
        } else {
            return "Y";
        }
    }

    public void addDefectAssignDetails() {
        //        Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        //        String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        //        String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        //        String p_hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        ViewObjectImpl dfctVo = this.getSvcCmDfct();
        ViewObjectImpl assgnVo = this.getSvcCmAsgn();
        Row rr = dfctVo.getCurrentRow();
        if (rr.getAttribute("TransRequirmentArea") != null && rr.getAttribute("TransEmplyeeCode") != null) {
            Row assgnRow = assgnVo.createRow();
            assgnRow.setAttribute("HoOrgId", getHoOrgIdValue());
            assgnRow.setAttribute("RqmtAreaId", rr.getAttribute("TransRequirmentArea"));
            assgnRow.setAttribute("EmpCode", rr.getAttribute("TransEmpCode"));
            assgnRow.setAttribute("AsgnDt", new Timestamp(System.currentTimeMillis()));
            _log.info("---------------rqmt area----" + rr.getAttribute("TransRequirmentArea"));
            assgnVo.insertRow(assgnRow);
        }
        rr.setAttribute("TransRequirmentArea", null);
        rr.setAttribute("TransEmplyeeCode", null);
        rr.setAttribute("TransEmpCode", null);
        rr.setAttribute("TransAssgnDt", null);
    }

    public String populateDatefrmDfct() {
        //        Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        //        String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        //        String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        //        String p_hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        String ret = "N";
        ViewObjectImpl cmVo = this.getSvcCm();
        ViewObjectImpl scItmVo = this.getSvcCmItm();
        Row rr = cmVo.getCurrentRow();
        String docId = rr.getAttribute("DocId").toString();
        ViewObjectImpl dfctVo = this.getLovPopultItmfromDefect();
        dfctVo.setNamedWhereClauseParam("BindCldId", getCldIdValue());
        dfctVo.setNamedWhereClauseParam("BindSlocId", getSlocIdValue());
        dfctVo.setNamedWhereClauseParam("BindHoOrgId", getHoOrgIdValue());
        dfctVo.setNamedWhereClauseParam("BindOrgId", getOrgIdValue());
        dfctVo.setNamedWhereClauseParam("BindDocId", docId);
        dfctVo.executeQuery();
        Row[] rrD = dfctVo.getFilteredRows("DocId", docId);
        _log.info(docId + "  :::: length " + rrD.length);
        if (rrD.length > 0) {
            for (Row rrN : rrD) {
                ret = "Y";
                _log.info("Insert data in CM ITM ::::::::");
                Row rrItm = scItmVo.createRow();
                rrItm.setAttribute("HoOrgId", getHoOrgIdValue());
                rrItm.setAttribute("CldId", getCldIdValue());
                rrItm.setAttribute("OrgId", getOrgIdValue());
                rrItm.setAttribute("SlocId", getSlocIdValue());
                rrItm.setAttribute("ItmId", rrN.getAttribute("ItmId"));
                scItmVo.insertRow(rrItm);
            }
        }
        
        this.getDBTransaction().postChanges();
        this.insertAllSerialNo();
        _log.info("Insert data in CM ITM ::::::::");
        return ret;
    }

    /**
     * Container's getter for LovDefectId1.
     * @return LovDefectId1
     */
    public ViewObjectImpl getLovDefectId() {
        return (ViewObjectImpl) findViewObject("LovDefectId");
    }

    /**
     * Container's getter for SvcCmAsgn1.
     * @return SvcCmAsgn1
     */
    public ViewObjectImpl getSvcCmAsgn() {
        return (ViewObjectImpl) findViewObject("SvcCmAsgn");
    }

    /**
     * Container's getter for FkSvcDfctToAsgnVL1.
     * @return FkSvcDfctToAsgnVL1
     */
    public ViewLinkImpl getFkSvcDfctToAsgnVL1() {
        return (ViewLinkImpl) findViewLink("FkSvcDfctToAsgnVL1");
    }

    /**
     * Container's getter for SvcCmItm1.
     * @return SvcCmItm1
     */
    public ViewObjectImpl getSvcCmItm() {
        return (ViewObjectImpl) findViewObject("SvcCmItm");
    }

    /**
     * Container's getter for FkSvcCmItmVL1.
     * @return FkSvcCmItmVL1
     */
    public ViewLinkImpl getFkSvcCmItmVL1() {
        return (ViewLinkImpl) findViewLink("FkSvcCmItmVL1");
    }

    /**
     * Container's getter for SvcCmItmDfct1.
     * @return SvcCmItmDfct1
     */
    public ViewObjectImpl getSvcCmItmDfct() {
        return (ViewObjectImpl) findViewObject("SvcCmItmDfct");
    }

    /**
     * Container's getter for FkSvcCmItmDfctVL1.
     * @return FkSvcCmItmDfctVL1
     */
    public ViewLinkImpl getFkSvcCmItmDfctVL1() {
        return (ViewLinkImpl) findViewLink("FkSvcCmItmDfctVL1");
    }

    /**
     * Container's getter for SvcCmPhyVer1.
     * @return SvcCmPhyVer1
     */
    public ViewObjectImpl getSvcCmPhyVer() {
        return (ViewObjectImpl) findViewObject("SvcCmPhyVer");
    }

    /**
     * Container's getter for FkSvcCmItmPhyVerVL1.
     * @return FkSvcCmItmPhyVerVL1
     */
    public ViewLinkImpl getFkSvcCmItmPhyVerVL1() {
        return (ViewLinkImpl) findViewLink("FkSvcCmItmPhyVerVL1");
    }

    /**
     * Container's getter for LovItmIdForDisp.
     * @return LovItmIdForDisp
     */
    public ViewObjectImpl getLovItmIdForDisp() {
        return (ViewObjectImpl) findViewObject("LovItmIdForDisp");
    }

    /**
     * Container's getter for LovDefectIdForDisp.
     * @return LovDefectIdForDisp
     */
    public ViewObjectImpl getLovDefectIdForDisp() {
        return (ViewObjectImpl) findViewObject("LovDefectIdForDisp");
    }

    /**
     * Container's getter for LovEmpNameForDisp.
     * @return LovEmpNameForDisp
     */
    public ViewObjectImpl getLovEmpNameForDisp() {
        return (ViewObjectImpl) findViewObject("LovEmpNameForDisp");
    }

    /**
     * Container's getter for LovPopultItmfromDefect.
     * @return LovPopultItmfromDefect
     */
    public ViewObjectImpl getLovPopultItmfromDefect() {
        return (ViewObjectImpl) findViewObject("LovPopultItmfromDefect");
    }

    public Integer isStatusAssigned() {
        //        Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        //        String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        //        String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        //        String p_hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        Integer ret = new Integer(0);
        ViewObjectImpl cmVo = this.getSvcCm();
        ViewObjectImpl cmAssgnVo = this.getSvcCmAsgn1();
        Row rr = cmVo.getCurrentRow();
        String docId = rr.getAttribute("DocId").toString();
        RowQualifier rq = new RowQualifier(cmAssgnVo);
        rq.setWhereClause("CldId = '" + getCldIdValue() + "' and OrgId = '" + getOrgIdValue() + "' and SlocId = " +
                          getSlocIdValue() + " and DocId = '" + docId + "' ");
        Row[] r = cmAssgnVo.getFilteredRows(rq);
        System.out.println(rq.getExprStr() + "   fdsfd    " + r.length);
        _log.info(rq.getExprStr() + "   fdsfd    " + r.length);
        if (r.length > 0) {
            ret = new Integer(1);
        }
        return ret;
    }

    public void updateStatusAssigned() {
        ViewObjectImpl cmVo = this.getSvcCm();
        Row rr = cmVo.getCurrentRow();
        Integer status = Integer.parseInt(rr.getAttribute("CallStat").toString());
        if (status.compareTo(new Integer(42)) == 0) {
            _log.info("Status  updated to assigned .......");
            System.out.println("Status  updated to assigned .......");
            rr.setAttribute("CallStat", 46);
            Integer s1 = (Integer) this.getSvcCm().getCurrentRow().getAttribute("CallStat");
            _log.info("Value of s1::" + s1);

            updateInsIntoCallTrace(46);

        } else {
            _log.info("Status not update.......");
        }
    }

    public void updateStatusPhysical() {
        ViewObjectImpl cmVo = this.getSvcCm();
        Row rr = cmVo.getCurrentRow();
        // Integer status = Integer.parseInt(rr.getAttribute("CallStat").toString());
        String Phyv = rr.getAttribute("PhyVerDone").toString();
        _log.info("Value of Phyv::" + Phyv);
        if ("Y".equalsIgnoreCase(Phyv)) {
            _log.info("Status  updated to Physical Verification Complete .......");
            rr.setAttribute("CallStat", 48);
            Integer s2 = (Integer) this.getSvcCm().getCurrentRow().getAttribute("CallStat");
            _log.info("Value of s2::" + s2);
            updateInsIntoCallTrace(48);

        } else {
            _log.info("Status not update.......");
        }
    }

    public String chkphysicalDefect() {
        ViewObjectImpl dfctVo = this.getSvcCm();
        Row rr = dfctVo.getCurrentRow();
        String ret = "N";
        if (rr.getAttribute("TransDefectNm") == null) {
            return "D";
        }
        if (rr.getAttribute("TransEmpName") == null) {
            return "E";
        }
        if (rr.getAttribute("TransEmpName") != null && rr.getAttribute("TransDefectNm") != null) {
            ViewObjectImpl lovDeft = this.getLovDefectId();
            lovDeft.setNamedWhereClauseParam("BindCldId", getCldIdValue());
            lovDeft.setNamedWhereClauseParam("BindSlocId", getSlocIdValue());
            lovDeft.setNamedWhereClauseParam("BindHoOrgId", getHoOrgIdValue());
            lovDeft.executeQuery();
            Integer defctId = 0;
            if (rr.getAttribute("TransDefectNm") != null) {
                Row[] r = lovDeft.getFilteredRows("DfctNm", rr.getAttribute("TransDefectNm").toString());
                if (r.length > 0) {
                    if (r[0].getAttribute("DfctId") != null)
                        defctId = Integer.parseInt(r[0].getAttribute("DfctId").toString());
                }
            }
            Integer empCode = Integer.parseInt(rr.getAttribute("TransEmpCodeValue").toString());
            String dup = DuplicateDfctCheck(defctId, empCode, rr.getAttribute("DocId").toString(), "D");
            if ("N".equalsIgnoreCase(dup))
                return "S";
        }


        return ret;
    }

    /**type for defect detail D
     * record detail R  * */
    public String DuplicateDfctCheck(Integer dfctId, Integer empCode, String DocId, String Type) {
        // ViewObjectImpl dfctVo = this.getSvcCmDfct();
        // Row rr= dfctVo.getCurrentRow();
        if (Type.equalsIgnoreCase("D")) {
            RowQualifier rq = new RowQualifier(getSvcCmItmDfct());
            rq.setWhereClause("CldId='" + getCldIdValue() + "' and SlocId= " + getSlocIdValue() + " and OrgId='" +
                              getOrgIdValue() + "' and HoOrgId = '" + getHoOrgIdValue() + "' and DfctId=" + dfctId +
                              " AND DocId='" + DocId + "'");
            Row[] filter = getSvcCmItmDfct().getFilteredRows(rq);
            _log.info("expr" + rq.getExprStr());
            _log.info("length::" + filter.length);
            if (filter.length > 0) {
                return "N";
            } else {
                return "Y";
            }
        } else if (Type.equalsIgnoreCase("R")) {
            RowQualifier rq = new RowQualifier(getSvcCmPhyVer());
            rq.setWhereClause("CldId='" + getCldIdValue() + "' and SlocId= " + getSlocIdValue() + " and OrgId='" +
                              getOrgIdValue() + "' and HoOrgId = '" + getHoOrgIdValue() + "' and DfctId=" + dfctId +
                              " AND DocId='" + DocId + "'");
            Row[] filter = getSvcCmPhyVer().getFilteredRows(rq);
            _log.info("expr" + rq.getExprStr());
            _log.info("length::" + filter.length);
            if (filter.length > 0) {
                return "N";
            } else {
                return "Y";
            }
        }
        return null;
    }

    public String chkPhysicalDefectRecords() {
        ViewObjectImpl dfctVo = this.getSvcCm();
        Row rr = dfctVo.getCurrentRow();
        String ret = "N";
        if (rr.getAttribute("TransEmpNameForRecord") == null) {
            return "E";
        }
        if (rr.getAttribute("TransEmpNameForRecord") != null && rr.getAttribute("TransDefectNmForRecord") == null) { //TransRemarksForRecord
            return "D";
        }

        if (rr.getAttribute("TransEmpNameForRecord") != null && rr.getAttribute("TransDefectNmForRecord") != null) {
            ViewObjectImpl lovDeft = this.getLovDefectId();
            lovDeft.setNamedWhereClauseParam("BindCldId", getCldIdValue());
            lovDeft.setNamedWhereClauseParam("BindSlocId", getSlocIdValue());
            lovDeft.setNamedWhereClauseParam("BindHoOrgId", getHoOrgIdValue());
            lovDeft.executeQuery();
            Integer defctId = 0;
            if (rr.getAttribute("TransDefectNmForRecord") != null) {
                Row[] r = lovDeft.getFilteredRows("DfctNm", rr.getAttribute("TransDefectNmForRecord").toString());
                if (r.length > 0) {
                    if (r[0].getAttribute("DfctId") != null)
                        defctId = Integer.parseInt(r[0].getAttribute("DfctId").toString());
                }
            }
            Integer empCode = Integer.parseInt(rr.getAttribute("TransEmpCodeValue").toString());
            String dup = DuplicateDfctCheck(defctId, empCode, rr.getAttribute("DocId").toString(), "R");
            if ("N".equalsIgnoreCase(dup))
                return "S";
        }

        return ret;
    }
    //    Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
    //    String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
    //    String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
    //    String p_hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();

    public void addPhysicalDefect() {
        ViewObjectImpl cmVo = this.getSvcCm();
        ViewObjectImpl itmDefcVo = this.getSvcCmItmDfct(); //TransEmpCodeValue
        Row rr = cmVo.getCurrentRow();
        if (rr.getAttribute("TransEmpName") != null && rr.getAttribute("TransDefectNm") != null &&
            rr.getAttribute("TransEmpCodeValue") != null) {
            ViewObjectImpl lovDeft = this.getLovDefectId();
            lovDeft.setNamedWhereClauseParam("BindCldId", getCldIdValue());
            lovDeft.setNamedWhereClauseParam("BindSlocId", getSlocIdValue());
            lovDeft.setNamedWhereClauseParam("BindHoOrgId", getHoOrgIdValue());
            lovDeft.executeQuery();
            Integer defctId = 0;
            if (rr.getAttribute("TransDefectNm") != null) {
                Row[] r = lovDeft.getFilteredRows("DfctNm", rr.getAttribute("TransDefectNm").toString());
                if (r.length > 0) {
                    if (r[0].getAttribute("DfctId") != null)
                        defctId = Integer.parseInt(r[0].getAttribute("DfctId").toString());
                }
            }
            Integer empCode = Integer.parseInt(rr.getAttribute("TransEmpCodeValue").toString());
            _log.info("add defects for :::::" + defctId);
            Row newR = itmDefcVo.createRow();
            newR.setAttribute("HoOrgId", getHoOrgIdValue());
            newR.setAttribute("EmpCode", empCode);
            newR.setAttribute("DfctId", defctId);
            newR.setAttribute("LogDt", new Timestamp(System.currentTimeMillis()));
            newR.setAttribute("Remarks", rr.getAttribute("TransRemarks"));
            itmDefcVo.insertRow(newR);

        }
        rr.setAttribute("TransEmpName", null);
        rr.setAttribute("TransDefectNm", null);
        rr.setAttribute("TransEmpCodeValue", null);
        rr.setAttribute("TransRemarks", null);

    }

    public void addPhysicalDefectRecords() {
        //        Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        //        String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        //        String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        //        String p_hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        ViewObjectImpl cmVo = this.getSvcCm();
        ViewObjectImpl itmDefcVo = this.getSvcCmPhyVer(); //TransEmpCodeValue
        Row rr = cmVo.getCurrentRow();
        if (rr.getAttribute("TransEmpNameForRecord") != null && rr.getAttribute("TransEmpCodeValue") != null &&
            rr.getAttribute("TransDefectNmForRecord") != null) {
            ViewObjectImpl lovDeft = this.getLovDefectId();
            lovDeft.setNamedWhereClauseParam("BindCldId", getCldIdValue());
            lovDeft.setNamedWhereClauseParam("BindSlocId", getSlocIdValue());
            lovDeft.setNamedWhereClauseParam("BindHoOrgId", getHoOrgIdValue());
            lovDeft.executeQuery();
            Integer defctId = 0;
            if (rr.getAttribute("TransDefectNmForRecord") != null) {
                Row[] r = lovDeft.getFilteredRows("DfctNm", rr.getAttribute("TransDefectNmForRecord").toString());
                if (r.length > 0) {
                    if (r[0].getAttribute("DfctId") != null)
                        defctId = Integer.parseInt(r[0].getAttribute("DfctId").toString());
                }
            }
            Integer empCode = Integer.parseInt(rr.getAttribute("TransEmpCodeValue").toString());
            _log.info("add defects for records :::::" + defctId);
            Row newR = itmDefcVo.createRow();
            newR.setAttribute("HoOrgId", getHoOrgIdValue());
            newR.setAttribute("EmpCode", empCode);
            newR.setAttribute("DfctId", defctId);
            newR.setAttribute("PhyVerDt", new Timestamp(System.currentTimeMillis()));
            newR.setAttribute("Remarks", rr.getAttribute("TransRemarksForRecord"));
            itmDefcVo.insertRow(newR);

        }
        rr.setAttribute("TransEmpNameForRecord", null);
        rr.setAttribute("TransDefectNmForRecord", null);
        rr.setAttribute("TransEmpCodeValue", null);
        rr.setAttribute("TransRemarksForRecord", null);

    }

    public String chkDuplicateItmName() {
        return null;
    }

    public String chkItmForPhy() {
        ViewObjectImpl cmVo = this.getSvcCm();
        ViewObjectImpl itmVo = this.getSvcCmItm1();
        Row rr = cmVo.getCurrentRow();
        String ret = "N";
        String docId = rr.getAttribute("DocId").toString();
        if (rr.getAttribute("TransItmName") == null) {
            ret = "I";
        }

        if (rr.getAttribute("TransItmName") != null) {
            if (rr.getAttribute("TransItmId") != null) {
                String itmId = rr.getAttribute("TransItmId").toString();
                RowQualifier newQ = new RowQualifier(itmVo);
                newQ.setWhereClause("CldId ='" + getCldIdValue() + "' and SlocId =" + getSlocIdValue() +
                                    " and OrgId ='" + getOrgIdValue() + "' and HoOrgId ='" + getHoOrgIdValue() +
                                    "' and DocId ='" + docId + "' and ItmId ='" + itmId + "'");
                Row r1[] = itmVo.getFilteredRows(newQ);
                _log.info(newQ.getExprStr() + "        " + r1.length);
                if (r1.length > 0) {
                    ret = "D";
                }
            }

        }
        _log.info("ret     " + ret);

        return ret;
    }

    public void addItem() {
        //        Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        //        String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        //        String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        //        String p_hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        ViewObjectImpl cmVo = this.getSvcCm();
        ViewObjectImpl itmVo = this.getSvcCmItm();
        Row rr = cmVo.getCurrentRow();
        if (rr.getAttribute("TransItmName") != null) {
            Row rrItm = itmVo.createRow();
            rrItm.setAttribute("HoOrgId", getHoOrgIdValue());
            rrItm.setAttribute("CldId", getCldIdValue());
            rrItm.setAttribute("OrgId", getOrgIdValue());
            rrItm.setAttribute("SlocId", getSlocIdValue());
            rrItm.setAttribute("ItmId", rr.getAttribute("TransItmId"));
            itmVo.insertRow(rrItm);
        }
    }

    /**
     * Method to get system generated file no
     * **/
    public String getUpFileId(String cldId, Integer slcId, String hoOrgId, String orgId) {

        Object fnRetVal;

        try {
            fnRetVal = callStoredFunction(Types.VARCHAR, "APP.FN_APP_GEN_FILE_ATTCH_ID(?,?,?,?,?)", new Object[] {
                                          slcId, cldId, hoOrgId, orgId, "SVC$CM$ATTCH"
            });

            if (fnRetVal != null) {

                if (fnRetVal.equals(-1)) {
                    //showFacesMsg("Error while fetching file Id details", null, FacesMessage.SEVERITY_ERROR, null);
                }

                return fnRetVal.toString();
            }

        } catch (Exception e) {
            System.out.println("ERROR IN CALLING FUNCTION FN_APP_GEN_FILE_ATTCH_ID at AMIMPL :" + e.getMessage());
            e.printStackTrace();

        }
        //showFacesMsg("Error while fetching file Id details", null, FacesMessage.SEVERITY_ERROR, null);

        return "0";
    }

    /**
     * Method to get default file location
     * **/
    public String getUpFilePath(Integer slcId) {
        Object fnRetVal;

        try {
            fnRetVal = callStoredFunction(Types.VARCHAR, "APP.FN_GET_APP_DOC_ATTACH_PATH(?)", new Object[] { slcId });

            if (fnRetVal != null) {

                if (fnRetVal.equals(-1)) {
                    // showFacesMsg("Error while fetching file path details", null, FacesMessage.SEVERITY_ERROR, null);
                }

                return fnRetVal.toString();
            }

        } catch (Exception e) {
            // System.out.println("ERROR IN CALLING FUNCTION FN_GET_APP_DOC_ATTACH_PATH at AMIMPL :" + e.getMessage());
            e.printStackTrace();

        }
        //  showFacesMsg("Error while fetching file path details", null, FacesMessage.SEVERITY_ERROR, null);

        return null;
    }


    public String createAttchmntRow(String contentTyp, String fileNm, String extn) {
        _log.info("Inside AMIMPL");
        String path = getUpFilePath(getSlocIdValue());
        System.out.println("path " + path);

        String fileId = getUpFileId(getCldIdValue(), getSlocIdValue(), getHoOrgIdValue(), getOrgIdValue());
        // _log.info("fileId " + fileId+"prev file length "+fileNm.length());
        if (fileNm != null && fileNm.length() > 49) {
            fileNm = fileNm.substring(0, Math.min(fileNm.length(), 49));
            _log.info("new file name is " + fileNm.length());
        }
        _log.info("new file name is " + fileNm);
        //String upToNCharacters = s.substring(0, Math.min(s.length(), n));

        Row r = getSvcCmAttch().createRow();

        _log.info("contentTyp " + contentTyp);
        r.setAttribute("HoOrgId", getHoOrgIdValue());
        r.setAttribute("FlExtn", contentTyp);
        r.setAttribute("DispFlNm", fileNm);
        r.setAttribute("FlNm", fileId);
        r.setAttribute("FlPath", path + fileId + extn);

        getSvcCmAttch().insertRow(r);

        this.getDBTransaction().postChanges(); // Used this for increasing fileId else throws too many object error

        return path + fileId;
    }

    public String isPhysicalChkBox() {
        ViewObjectImpl cmVo = this.getSvcCm();
        ViewObjectImpl itmVo = this.getSvcCmItmDfct1();
        String ret = "N";
        Row rr = cmVo.getCurrentRow();
        String docId = rr.getAttribute("DocId").toString();
        RowQualifier rq = new RowQualifier(itmVo);
        rq.setWhereClause("CldId = '" + getCldIdValue() + "' and SlocId = " + getSlocIdValue() + " and OrgId ='" +
                          getOrgIdValue() + "' and DocId ='" + docId + "' ");
        Row[] rr1 = itmVo.getFilteredRows(rq);
        //  _log.info(rq.getExprStr() + "    " + rr1.length);
        if (rr1.length > 0) {
            ret = "Y";
        }
        return ret;
    }

    /**
     * Container's getter for SvcCmAsgn1.
     * @return SvcCmAsgn1
     */
    public ViewObjectImpl getSvcCmAsgn1() {
        return (ViewObjectImpl) findViewObject("SvcCmAsgn1");
    }

    /**
     * Container's getter for SvcCmSearch1.
     * @return SvcCmSearch1
     */
    public ViewObjectImpl getSvcCmSearch() {
        return (ViewObjectImpl) findViewObject("SvcCmSearch");
    }

    /**
     * Container's getter for SvcCmItmDfct1.
     * @return SvcCmItmDfct1
     */
    public ViewObjectImpl getSvcCmItmDfct1() {
        return (ViewObjectImpl) findViewObject("SvcCmItmDfct1");
    }

    public void searchIssueAction() {
        String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        ViewObjectImpl trnsSrchVo = this.getTransSearchCm();
        ViewObjectImpl searchVo = this.getSvcCmSearch();
        Row currTransSrch = trnsSrchVo.getCurrentRow();
        // _log.info("BindOrgId--"+p_org_id+"BindRqmtAreaId---"+currTransSrch.getAttribute("TransRqmtAreaIdSrc")+"BindWhIdSrc---"+currTransSrch.getAttribute("TransWhIdSrc")+"BindOrgIdSrc"+currTransSrch.getAttribute("TransOrgIdSrc")+"BindWhId---"+currTransSrch.getAttribute("TransWhId"));
        //_log.info("BindIssuNo---"+currTransSrch.getAttribute("TransIssueNo")+"BindEoIdSrc----"+currTransSrch.getAttribute("TransEoIdSrc")+"BindDateFrom----"+currTransSrch.getAttribute("TransEoIdSrc")+"BindDateTo-----"+currTransSrch.getAttribute("TransIssueDtFrom")+"BindDocIdSrc---"+currTransSrch.getAttribute("TransDocIdSrc")+"BindIssueDocType---"+currTransSrch.getAttribute("TransSourceType"));
        searchVo.setNamedWhereClauseParam("BindOrgId", p_org_id);
        searchVo.setNamedWhereClauseParam("BindCldId", currTransSrch.getAttribute("CldId"));
        searchVo.setNamedWhereClauseParam("BindSlocId", currTransSrch.getAttribute("SlocId"));
        searchVo.setNamedWhereClauseParam("BindHoOrgId", currTransSrch.getAttribute("HoOrgId"));
        searchVo.setNamedWhereClauseParam("BindCallNo", currTransSrch.getAttribute("CallNo"));
        searchVo.setNamedWhereClauseParam("BindTktNo", currTransSrch.getAttribute("TktNo"));
        searchVo.setNamedWhereClauseParam("BindEoNmCust", currTransSrch.getAttribute("EoNmCust"));
        searchVo.setNamedWhereClauseParam("BindEoNm", currTransSrch.getAttribute("EoNm"));
        searchVo.setNamedWhereClauseParam("BindCallStat", currTransSrch.getAttribute("CallStat"));
        searchVo.setNamedWhereClauseParam("BindCallRefType", currTransSrch.getAttribute("CallRefType"));
        searchVo.executeQuery();

    }

    public void resetIssueAction() {
        String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        ViewObjectImpl trnsSrchVo = this.getTransSearchCm();
        ViewObjectImpl searchVo = this.getSvcCmSearch();
        Row currTransSrch = trnsSrchVo.getCurrentRow();
        //_log.info("BindOrgId--"+p_org_id+"BindRqmtAreaId---"+currTransSrch.getAttribute("TransRqmtAreaIdSrc")+"BindWhIdSrc---"+currTransSrch.getAttribute("TransWhIdSrc")+"BindOrgIdSrc"+currTransSrch.getAttribute("TransOrgIdSrc")+"BindWhId---"+currTransSrch.getAttribute("TransWhId"));
        //_log.info("BindIssuNo---"+currTransSrch.getAttribute("TransIssueNo")+"BindEoIdSrc----"+currTransSrch.getAttribute("TransEoIdSrc")+"BindDateFrom----"+currTransSrch.getAttribute("TransEoIdSrc")+"BindDateTo-----"+currTransSrch.getAttribute("TransIssueDtFrom")+"BindDocIdSrc---"+currTransSrch.getAttribute("TransDocIdSrc")+"BindIssueDocType---"+currTransSrch.getAttribute("TransSourceType"));
        searchVo.setNamedWhereClauseParam("BindOrgId", "00");
        searchVo.setNamedWhereClauseParam("BindCldId", null);
        searchVo.setNamedWhereClauseParam("BindSlocId", null);
        searchVo.setNamedWhereClauseParam("BindHoOrgId", null);
        searchVo.setNamedWhereClauseParam("BindCallNo", null);
        searchVo.setNamedWhereClauseParam("BindTktNo", null);
        searchVo.setNamedWhereClauseParam("BindEoNmCust", null);
        searchVo.setNamedWhereClauseParam("BindEoNm", null);
        searchVo.setNamedWhereClauseParam("BindCallStat", null);
        searchVo.setNamedWhereClauseParam("BindCallRefType", null);
        searchVo.executeQuery();

    }


    /**
     * Container's getter for TransSearchCm1.
     * @return TransSearchCm1
     */
    public ViewObjectImpl getTransSearchCm() {
        return (ViewObjectImpl) findViewObject("TransSearchCm");
    }

    /**
     * Container's getter for SvcCmItm1.
     * @return SvcCmItm1
     */
    public ViewObjectImpl getSvcCmItm1() {
        return (ViewObjectImpl) findViewObject("SvcCmItm1");
    }

    /**
     * Container's getter for LovCustomerId1.
     * @return LovCustomerId1
     */
    public ViewObjectImpl getLovCustomerId1() {
        return (ViewObjectImpl) findViewObject("LovCustomerId1");
    }

    /**
     * Container's getter for LovAddressId1.
     * @return LovAddressId1
     */
    public ViewObjectImpl getLovAddressId() {
        return (ViewObjectImpl) findViewObject("LovAddressId");
    }

    public String updateInsIntoCallTrace(Integer docstat) {
        if (docstat != null) {
            String docid = (String) this.getSvcCm().getCurrentRow().getAttribute("DocId");
            _log.info("DocStat:::" + docstat + "docid::" + docid);
            Integer result = (Integer) (callStoredFunction(Types.INTEGER, "SVC.SVC_UPDT_CALL_TRC(?,?,?,?,?,?,?)", new Object[] {
                                                           getCldIdValue(), getSlocIdValue(), getHoOrgIdValue(),
                                                           getOrgIdValue(), docid, docstat, getUsrId()
            })); // app.pkg_app.get_txn_id(p_usr_id,p_org_id,p_sloc_id,18505)
            _log.info("Function--" + result);
        }
        return null;
    }


    public ArrayList<String> getSuggestedAddsDesc(String addsStr) {
        ArrayList<String> h = new ArrayList<String>();
        ViewObjectImpl autoSuggestVO = this.getLovScContainSrch();
        autoSuggestVO.setNamedWhereClauseParam("cldIdBind", getCldIdValue());
        autoSuggestVO.setNamedWhereClauseParam("slocIdBind", getSlocIdValue());
        autoSuggestVO.setNamedWhereClauseParam("orgIdbind", getOrgIdValue());
        autoSuggestVO.setNamedWhereClauseParam("hoOrgIdBind", getHoOrgIdValue());
        autoSuggestVO.setNamedWhereClauseParam("bindaddsid", addsStr);
        autoSuggestVO.executeQuery();
        autoSuggestVO.setRangeSize(12);
        _log.info("bind address id value " + addsStr);
        for (Row r : autoSuggestVO.getAllRowsInRange()) {
            h.add(r.getAttribute("Adds").toString());
        }
        return h;
    }

    /**
     * Container's getter for SvcCmPhyVer1.
     * @return SvcCmPhyVer1
     */
    public ViewObjectImpl getSvcCmPhyVer1() {
        return (ViewObjectImpl) findViewObject("SvcCmPhyVer1");
    }

    /**
     * Container's getter for LovScLocation1.
     * @return LovScLocation1
     */
    public ViewObjectImpl getLovScLocation() {
        return (ViewObjectImpl) findViewObject("LovScLocation");
    }

    /**
     * Container's getter for LovScContainSrch1.
     * @return LovScContainSrch1
     */
    public ViewObjectImpl getLovScContainSrch() {
        return (ViewObjectImpl) findViewObject("LovScContainSrch");
    }

    /**
     * Container's getter for SvcCmDfct1.
     * @return SvcCmDfct1
     */
    public ViewObjectImpl getSvcCmDfct1() {
        return (ViewObjectImpl) findViewObject("SvcCmDfct1");
    }

    public void addlocRefIdAndCstmr() {

        Row locRw = this.getLovScLocation().getCurrentRow(); //TransDocIdRef -- scno // DocIdRef -- docId //
        //TransEoNm // EoId //AddsIdBill
        Row curr = this.getSvcCm().getCurrentRow();
        _log.info("current sc no is " + locRw.getAttribute("ScNo") + " docid is " + locRw.getAttribute("DocId"));
        if (locRw != null) {
            /*
            ViewObjectImpl scvo = this.getLovContractNoVO();
            scvo.setNamedWhereClauseParam("BindCldId", getCldIdValue());
            scvo.setNamedWhereClauseParam("BindEoId", locRw.getAttribute("EoId"));
            scvo.setNamedWhereClauseParam("BindHoOrgId", getHoOrgIdValue());
            scvo.setNamedWhereClauseParam("BindOrgId", getOrgIdValue());
            scvo.setNamedWhereClauseParam("BindScType", null);
            scvo.setNamedWhereClauseParam("BindSlocId", getSlocIdValue());
            scvo.executeQuery(); */


            curr.setAttribute("TransDocIdRef", locRw.getAttribute("ScNo"));
            curr.setAttribute("DocIdRef", locRw.getAttribute("DocId"));
            curr.setAttribute("TransEoNm", locRw.getAttribute("EnoNm"));
            curr.setAttribute("EoId", locRw.getAttribute("EoId"));
            curr.setAttribute("LocAddsId", locRw.getAttribute("LocAddsId"));
            curr.setAttribute("LocRefId", locRw.getAttribute("LocRefId"));
            //curr.setAttribute("AddsIdBill", locRw.getAttribute("LocAddsId"));
            this.getDBTransaction().postChanges();
        }


    }


    public void filterLocationRefId() {
        Row curr = this.getSvcCm().getCurrentRow();

        ViewObjectImpl locScvo = this.getLovScLocation();
        locScvo.setNamedWhereClauseParam("cldIdBind", getCldIdValue());
        locScvo.setNamedWhereClauseParam("hoOrgIdBind", getHoOrgIdValue());
        locScvo.setNamedWhereClauseParam("orgIdbind", getOrgIdValue());
        _log.info("current eo id is " + curr.getAttribute("EoId"));

        if (curr.getAttribute("EoId") != null && curr.getAttribute("EoId") != 0)
            locScvo.setNamedWhereClauseParam("bindEoId", (Integer) curr.getAttribute("EoId"));
        else
            locScvo.setNamedWhereClauseParam("bindEoId", null);

        locScvo.setNamedWhereClauseParam("slocIdBind", getSlocIdValue());
        locScvo.executeQuery();

    }

    protected void callStoredFunction12(String stmt, Object[] bindVars) {
        //used to get best price
        CallableStatement st = null;
        try {
            /** 1. Create a JDBC CallabledStatement */
            st = this.getDBTransaction().createCallableStatement("begin " + stmt + ";end;", 0);
            /** 2. Register the first bind variable for the return value. and last 2 variable for output variable of function. */
            st.setObject(1, bindVars[0]);
            st.setObject(2, bindVars[1]);
            st.setObject(3, bindVars[2]);
            st.setObject(4, bindVars[3]);
            st.setObject(5, bindVars[4]);
            st.setObject(6, bindVars[5]);
            /** 5. Set the value of user-supplied bind vars in the stmt */
            st.executeUpdate();
        } catch (SQLException e) {
            int end = e.getMessage().indexOf("\n");

            throw new JboException(e.getMessage());
        } finally {
            if (st != null) {
                try {
                    /** 7. Close the statement */
                    st.close();
                } catch (SQLException e) {

                }
            }
        }
    }

    public String duplicateItmNameChk(String ItmName) {
        Row cm = this.getSvcCm().getCurrentRow();
        ViewObjectImpl checkvo = getLovItmCheck();
        _log.info("current item id is " + cm.getAttribute("TransItmId"));
        if (cm.getAttribute("TransItmId") != null) {
            String srNo = "0";
            Integer callRefTyp = Integer.parseInt(cm.getAttribute("CallRefType").toString());
            if (callRefTyp.compareTo(new Integer(41)) == 0) {
                if (cm.getAttribute("TransManualSrNo") != null) {
                    srNo = cm.getAttribute("TransManualSrNo").toString();
                }
            } else {
                if (cm.getAttribute("TransSrNo") != null) {
                    srNo = cm.getAttribute("TransSrNo").toString();
                }

            }


            System.out.println("srNo  " + srNo);
            checkvo.setNamedWhereClauseParam("bindCldId", getCldIdValue());
            checkvo.setNamedWhereClauseParam("bindEoId", cm.getAttribute("EoId"));
            checkvo.setNamedWhereClauseParam("bindHoOrgId", getHoOrgIdValue());
            checkvo.setNamedWhereClauseParam("bindItmId", cm.getAttribute("TransItmId"));
            checkvo.setNamedWhereClauseParam("bindOrgId", getOrgIdValue());
            checkvo.setNamedWhereClauseParam("bindSlocId", getSlocIdValue());
            checkvo.setNamedWhereClauseParam("BindSrNo", srNo);
            checkvo.executeQuery();

            Row[] rr = checkvo.getFilteredRows("EoId", (Integer) cm.getAttribute("EoId"));

            _log.info("current total length is " + rr.length);
            if (rr.length > 0) {
                return "N";
            } else {
                return "Y";
            }

        }

        return "Y";
    }


    /**
     * Container's getter for LovContractNoVO1.
     * @return LovContractNoVO1
     */
    public ViewObjectImpl getLovContractNoVO() {
        return (ViewObjectImpl) findViewObject("LovContractNoVO");
    }

    /**
     * Container's getter for LovItmCheckVO1.
     * @return LovItmCheckVO1
     */
    public ViewObjectImpl getLovItmCheck() {
        return (ViewObjectImpl) findViewObject("LovItmCheck");
    }

    /**
     * Container's getter for SvcCmItmSr1.
     * @return SvcCmItmSr1
     */
    public ViewObjectImpl getSvcCmItmSr() {
        return (ViewObjectImpl) findViewObject("SvcCmItmSr");
    }

    /**
     * Container's getter for FkSvcCmItmToSrVL1.
     * @return FkSvcCmItmToSrVL1
     */
    public ViewLinkImpl getFkSvcCmItmToSrVL1() {
        return (ViewLinkImpl) findViewLink("FkSvcCmItmToSrVL1");
    }
    
    public void insertAllSerialNo(){
        ViewObjectImpl vo = this.getSvcCm();
        Row rr = vo.getCurrentRow();
        if(rr!=null){
            Object result =  (callStoredFunction(Types.INTEGER, "SVC.FN_INS_DFCT_TO_ITM_SR(?,?,?,?,?)", new Object[] {
                                                           getCldIdValue(),getOrgIdValue(),  getHoOrgIdValue(),getSlocIdValue(),
                                                            rr.getAttribute("DocId"), 
            }));
            
            System.out.println("Vlauer of object "+result);
            if(result!=null){
            this.getSvcCmItmSr().executeQuery();
            this.getSvcCmItmSr1().executeQuery();
            }
        }
        
          //  FN_INS_DFCT_TO_ITM_SR
    }
    

    public String checkSrNoEnter() {
        Row cm = this.getSvcCm().getCurrentRow();
        Row cmItm = this.getSvcCmItm().getCurrentRow();
        String ret = "N";
        Integer callRefTyp = Integer.parseInt(cm.getAttribute("CallRefType").toString());
        if (callRefTyp.compareTo(new Integer(41)) == 0) {
            if (cmItm.getAttribute("TransItmManualSrNo") == null) {
                System.out.println("TransItmManualSrNo");
                ret = "Y";
            }
        } else {
            if (cmItm.getAttribute("TransItmSrNo") == null) {
                System.out.println("TransItmSrNo");
                ret = "Y";
            }

        }
        System.out.println("TransItmManualSrNo:  " + ret);

        return ret;
    }

    public Integer isSerialNoDuplecate() {
        Row cm = this.getSvcCm().getCurrentRow();
        Row cmItm = this.getSvcCmItm().getCurrentRow();
        ViewObjectImpl vo = this.getSvcCmItmSr1();
        String srNo = "N";
        Integer callRefTyp = Integer.parseInt(cm.getAttribute("CallRefType").toString());
        if (callRefTyp.compareTo(new Integer(41)) == 0) {
            if (cmItm.getAttribute("TransItmManualSrNo") != null &&
                cmItm.getAttribute("TransItmManualSrNo").toString().length() > 0) {
                System.out.println("TransItmManualSrNo");
                srNo = cmItm.getAttribute("TransItmManualSrNo").toString();
            }
        } else {
            if (cmItm.getAttribute("TransItmSrNo") != null) {
                System.out.println("TransItmSrNo");
                srNo = cmItm.getAttribute("TransItmSrNo").toString();
            }

        }

        RowQualifier rq = new RowQualifier(vo);
        rq.setWhereClause("CldId ='" + cmItm.getAttribute("CldId") + "' and OrgId ='" + cmItm.getAttribute("OrgId") +
                          "' and HoOrgId ='" + cmItm.getAttribute("HoOrgId") + "' and SlocId =" +
                          cmItm.getAttribute("SlocId") + " and DocId ='"+cmItm.getAttribute("DocId")+"' and ItmId ='" + cmItm.getAttribute("ItmId") +
                          "' and SrNo ='" + srNo + "'");
       Row rr[] = vo.getFilteredRows(rq);
       
       
        System.out.println(rr.length+"dopli sr "+rq.getExprStr());
        
        if(rr.length>0){
            return 1;
        }else{
            return 0;
        }

    }

    public void insSerialNo() {

        Row cm = this.getSvcCm().getCurrentRow();
        Row cmItm = this.getSvcCmItm().getCurrentRow();
        String srNo = "0";
        Integer callRefTyp = Integer.parseInt(cm.getAttribute("CallRefType").toString());
        if (callRefTyp.compareTo(new Integer(41)) == 0) {
            if (cmItm.getAttribute("TransItmManualSrNo") != null &&
                cmItm.getAttribute("TransItmManualSrNo").toString().length() > 0) {
                System.out.println("TransItmManualSrNo");
                srNo = cmItm.getAttribute("TransItmManualSrNo").toString();
            }
        } else {
            if (cmItm.getAttribute("TransItmSrNo") != null) {
                System.out.println("TransItmSrNo");
                srNo = cmItm.getAttribute("TransItmSrNo").toString();
            }

        }
        Row rr = this.getSvcCmItmSr().createRow();
        rr.setAttribute("SrNo", srNo);
        rr.setAttribute("ItmQty", 1);
        this.getSvcCmItmSr().insertRow(rr);
        System.out.println("Row Insert");

        cmItm.setAttribute("TransItmSrNo", null);
        cmItm.setAttribute("TransItmManualSrNo", null);

    }
    
    

    /**
     * Container's getter for SvcCmItmSr1.
     * @return SvcCmItmSr1
     */
    public ViewObjectImpl getSvcCmItmSr1() {
        return (ViewObjectImpl) findViewObject("SvcCmItmSr1");
    }
}

