package svcprfapp.model.services;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewObjectImpl;

import svcprfapp.model.services.common.SvcPrfAM;
import svcprfapp.model.views.OrgSvcPrfVOImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Dec 20 14:52:50 PST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SvcPrfAMImpl extends ApplicationModuleImpl implements SvcPrfAM {
    /**
     * This is the default constructor (do not remove).
     */
    public SvcPrfAMImpl() {
    }

    /**
     * Container's getter for AppGlblSvcPrf1.
     * @return AppGlblSvcPrf1
     */
    public ViewObjectImpl getAppGlblSvcPrf1() {
        return (ViewObjectImpl) findViewObject("AppGlblSvcPrf1");
    }

    /**
     * Container's getter for OrgSvcPrf1.
     * @return OrgSvcPrf1
     */
    public OrgSvcPrfVOImpl getOrgSvcPrf1() {
        return (OrgSvcPrfVOImpl) findViewObject("OrgSvcPrf1");
    }
    
    
    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }
    public Integer checkHoProfile() {
            String glbl_OrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
            String glbl_CldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
            Integer glbl_SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
            System.out.println("Parameters enterd in function="+glbl_CldId+" "+glbl_SlocId+" "+glbl_OrgId);
            Integer glbl_HoOrggId =
                (Integer)callStoredFunction(Types.INTEGER, "APP.FN_INS_ORG_SVC_PRF(?,?,?)", new Object[] { glbl_CldId,
                                                                                                          glbl_SlocId,
                                                                                                          glbl_OrgId });
            this.getOrgSvcPrf1().executeQuery();
            return glbl_HoOrggId;
        }
    
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.executeUpdate();

            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    throw new JboException(e);
                }
            }
        }
    }
    
    
    
    public String getHoName() {
        String glbl_OrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String glbl_CldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer glbl_SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        String glbl_HoOrggId =
            callStoredFunction(Types.VARCHAR, "MM.MM_GET_HO_ORG(?,?,?)", new Object[] { glbl_CldId, glbl_SlocId,
                                                                                        glbl_OrgId }).toString();
        ViewObjectImpl orgVo = this.getHoName1();
        orgVo.setNamedWhereClauseParam("BindCldId", glbl_CldId);
        orgVo.executeQuery();
        Row[] rw = orgVo.getFilteredRows("OrgId", glbl_HoOrggId);
        if (rw.length > 0) {
            String honame = rw[0].getAttribute("OrgDesc").toString();
            return honame;
        } else {
            return "";
        }

    }
    
    
    public void filterViewDetail() {
    
//        ViewObjectImpl orgPrfVO = this.getOrgMmPrf2();
//        orgPrfVO.setNamedWhereClauseParam("CldIdBind", resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
//        orgPrfVO.setNamedWhereClauseParam("SlocIdBind",
//                                          Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}")));
//        orgPrfVO.setNamedWhereClauseParam("OrgIdBind", resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
//        orgPrfVO.executeQuery();
//        System.out.println("total no of rows in orgmmprf vo is ====" + orgPrfVO.getRowCount());

        ViewObjectImpl orgVo = this.getHoName1();
        orgVo.setNamedWhereClauseParam("OrgIdBind", resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
        orgVo.setNamedWhereClauseParam("BindCldId", resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
        orgVo.executeQuery();
    }

    /**
     * Container's getter for HoName1.
     * @return HoName1
     */
    public ViewObjectImpl getHoName1() {
        return (ViewObjectImpl) findViewObject("HoName1");
    }
    
    
    public void delAction() {
        ViewObjectImpl delvo = this.getOrgSvcPrf1();
        delvo.getCurrentRow().remove();
        delvo.executeQuery();
    }

    /**
     * Container's getter for LovCoaId1.
     * @return LovCoaId1
     */
    public ViewObjectImpl getLovCoaId1() {
        return (ViewObjectImpl) findViewObject("LovCoaId1");
    }
}

