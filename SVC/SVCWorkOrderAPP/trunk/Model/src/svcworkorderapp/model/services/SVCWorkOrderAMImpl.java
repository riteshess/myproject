package svcworkorderapp.model.services;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.util.ArrayList;

import java.util.Collections;
import java.util.HashMap;

import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

//import oracle.adf.mbean.share.config.adfc.String;
import javax.faces.validator.ValidatorException;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.domain.Number;

import oracle.jbo.domain.Timestamp;

import oracle.jbo.server.RowQualifier;


import oracle.jbo.server.ViewObjectImpl;

import svcworkorderapp.model.services.common.SVCWorkOrderAM;
import svcworkorderapp.model.views.SvcCmWoAsgnVOImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun Oct 19 11:31:16 PDT 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SVCWorkOrderAMImpl extends ApplicationModuleImpl //implements SVCWorkOrderAM
    implements SVCWorkOrderAM {
    /**
     * This is the default constructor (do not remove).
     *
     */
    Integer usrId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
    String CldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
    String OrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
    String HoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
    Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
    Integer UsrId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
    String BinChk=resolvEl("#{pageFlowScope.GLBL_ORG_BIN_CHK}").toString();
    
    /**
     *      Method to show validation message(I,E,W)
     *      mesg:Message to display
     *      sev:Severity(I,E,W)
     *      chk:true=if resource bundle is used
     *      typFlg: 'F' for FM , 'V' for VE
     *      clientId : client id for UI component
     * */
    public void showFacesMessage(String mesg, String sev, Boolean chk, String typFlg, String clientId) {
        FacesMessage message = new FacesMessage(mesg);
        if (chk == true) {
            String msg = resolvEl("#{bundle['" + mesg + "']}");
            message = new FacesMessage(msg);
        }
        if (sev.equalsIgnoreCase("E")) {
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
        } else if (sev.equalsIgnoreCase("W")) {
            message.setSeverity(FacesMessage.SEVERITY_WARN);
        } else if (sev.equalsIgnoreCase("I")) {
            message.setSeverity(FacesMessage.SEVERITY_INFO);
        } else {
            message.setSeverity(FacesMessage.SEVERITY_INFO);
        }
        if (typFlg.equals("F")) {
            FacesContext.getCurrentInstance().addMessage(clientId, message);
        } else if (typFlg.equals("V")) {
            throw new ValidatorException(message);
        }
    }
    
    Number zero = new Number(0);
    private static ADFLogger adfLog = (ADFLogger) ADFLogger.createADFLogger(SVCWorkOrderAMImpl.class);

    public SVCWorkOrderAMImpl() {
    }

    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }


    public void setTxnIdForCurrentRow(Integer UsrId, String CldId, Integer SlocId, String OrgId) {
        Row currentRow = this.getSvcCmWo1().getCurrentRow();
        String docId = (String) (callStoredFunction(Types.VARCHAR, "app.get_txn_id (?,?,?,?,?,?)", new Object[] {
                                                    CldId, SlocId, OrgId, UsrId, new Integer(23004), new Integer(0)
        })); // app.pkg_app.get_txn_id(p_usr_id,p_org_id,p_sloc_id,18505)
        adfLog.info("--TxnId new created--" + docId);
        Timestamp ts = new Timestamp(System.currentTimeMillis());
        currentRow.setAttribute("DocId", docId);
        currentRow.setAttribute("DocDt", new Timestamp(System.currentTimeMillis()));
        //currentRow.setAttribute("CallDt", new Timestamp(System.currentTimeMillis()));
        currentRow.setAttribute("CrtDt", new Timestamp(System.currentTimeMillis()));
        getFYid(CldId, OrgId, ts, "A");
       
        
    }

    /**
     *
     * @param SlocId
     * @param CldId
     * @param HoOrgId
     * @param OrgId
     * @param TableName
     * @param WhId
     * @param fyId
     * @return
     */

    public String genCallNo(Integer SlocId, String CldId, String HoOrgId, String OrgId, String TableName,
                            Integer fyId) {
        Row cmRow = this.getSvcCmWo1().getCurrentRow();
        String docNo = null;
        Integer docType = (Integer) this.getSvcCmWo1().getCurrentRow().getAttribute("DocType");
        //  adfLog.info("doctype is :"+docType);
        if (cmRow.getAttribute("DocNo") == null) {
            // docType =Integer.parseInt(cmRow.getAttribute("CallRefType").toString());
            docNo = (String) callStoredFunction(Types.VARCHAR, "SVC.SVC_GEN_ID(?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                CldId, SlocId, HoOrgId, OrgId, TableName, fyId, 23003, docType, null,
                                                null
            });
            if(cmRow.getAttribute("DocIdCm")!=null){
            Object ret=   (callStoredFunction(Types.NUMERIC, "SVC.SVC_UPDT_CALL_TRC (?,?,?,?,?,?,?)", new Object[] {
                                                                     CldId, SlocId, HoOrgId, OrgId, cmRow.getAttribute("DocIdCm"),new Integer(81),UsrId
                         })); 
            adfLog.info("update call trace "+ret);
            }
            // adfLog.info("new id    "+docNo);
            cmRow.setAttribute("DocNo", docNo);
        } else {
            docNo = cmRow.getAttribute("DocNo").toString();
        }
        return docNo;
    }

    public String getWfNo(Integer SlocId, String CldId, String OrgId, Integer DocNo) {
        try {
            Object obj = callStoredFunction(Types.VARCHAR, "APP.WF_GET_ID(?,?,?,?,?)", new Object[] {
                                            SlocId, CldId, OrgId, DocNo, 0
            });
            return obj.toString();
        } catch (Exception e) {
            return "0";
        }

    }

    private static int INTEGER = Types.NUMERIC;
    private static int DATE = Types.DATE;
    private static int STRING = Types.VARCHAR;
    private static int NUMBER = Types.NUMERIC;


    public Integer getUsrLvl(Integer SlocId, String CldId, String OrgId, Integer UsrId, String WfNo, String DocNo) {
        Object obj = callStoredFunction(NUMBER, "APP.WF_GET_USR_LEVEL (?,?,?,?,?,?,?)", new Object[] {
                                        SlocId, CldId, OrgId, UsrId, WfNo, DocNo, 0
        });
        if (obj != null) {
            UsrId = Integer.parseInt(obj.toString());
        }

        return (Integer) UsrId;
    }

    public Integer insIntoTxn(Integer SlocId, String CldId, String OrgId, Integer DocNo, String WfNo, Integer usr_idFrm,
                              Integer usr_idTo, Integer levelTo, Integer levelFrm, String action, String remark,
                              Number amount) {
        String DocId = getSvcCmWo1().getCurrentRow().getAttribute("DocId").toString();

        // Integer DocNo1 = 23003;
        adfLog.info("DocNo-------" + DocNo + "  DocId----" + DocId + "  WfNo----" + WfNo + "DocNo1-----" + DocNo);
        Object obj = callStoredFunction(NUMBER, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                        SlocId, CldId, OrgId, DocNo, 0, WfNo, DocId, usr_idFrm, usr_idTo, levelFrm,
                                        levelTo, action, remark, amount
        });
        adfLog.info("function return a value inthe txn is " + obj);
        Integer temp = Integer.parseInt(obj.toString());
        return temp;

    }

    public Integer pendingCheck(Integer SlocId, String CldId, String OrgId, Integer DocNo) {

        String DocId = getSvcCmWo1().getCurrentRow().getAttribute("DocId").toString();
        //System.out.println("DOCIDTXN--"+docIdTxn);
        // Object obj= callStoredFunction(NUMBER, "APP.PKG_APP_WF.GET_DOC_WF_CUR_USR(?,?,?,?,?)", new Object[] { SlocId,CldId,OrgId,DocNo,DocId });
        Object obj = Integer.parseInt(callStoredFunction(NUMBER, "APP.WF_GET_CUR_USR(?,?,?,?,?,?)", new Object[] {
                                                         SlocId, CldId, OrgId, DocNo, DocId, 0
        }).toString());

        Integer UsrId = null;
        if (obj != null) {
            UsrId = Integer.parseInt(obj.toString());
        }
        return UsrId;
    }


    /**
     *
     * @param CldId
     * @param OrgId
     * @param geDate
     * @param Mode
     * @return
     */

    public Integer getFYid(String CldId, String OrgId, Timestamp geDate, String Mode) {
        Integer fyId = (Integer) (callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID (?,?,?)", new Object[] {
                                                     CldId, OrgId, geDate
        }));
        adfLog.info("-FY RETURNED-" + fyId);
        if (Mode.equalsIgnoreCase("A")) {
            adfLog.info("Set FyId in case mode is add");
            ViewObjectImpl ge = this.getSvcCmWo1();
            if (fyId > 0) {
                ge.getCurrentRow().setAttribute("FyId", fyId);
            }
        } else if (Mode.equalsIgnoreCase("V")) {
            adfLog.info("In case mode is validation");
        }
        return fyId;
    }


    public void setOutcome() {
        Row curr = this.getSvcCmWo1().getCurrentRow();


        if (resolvEl("#{pageFlowScope.wfReturn}") != null) {
            String wfreturn = resolvEl("#{pageFlowScope.wfReturn}").toString();
            if ("A".equalsIgnoreCase(wfreturn)) {
                
                curr.setAttribute("AuthStat", "Y");
                curr.setAttribute("DocStat", 89);
                curr.setAttribute("DocDt", new Timestamp(System.currentTimeMillis()));
                if(curr.getAttribute("DocIdCm")!=null){
                Object ret=   (callStoredFunction(Types.NUMERIC, "SVC.SVC_UPDT_CALL_TRC (?,?,?,?,?,?,?)", new Object[] {
                                                                         CldId, SlocId, HoOrgId, OrgId, curr.getAttribute("DocIdCm"),new Integer(89),UsrId
                             })); 
                adfLog.info("update call trace "+ret);
                }
            } else if ("F".equalsIgnoreCase(wfreturn)) {
                curr.setAttribute("DocStat", 82);
                curr.setAttribute("DocDt", new Timestamp(System.currentTimeMillis()));
                    if(curr.getAttribute("DocIdCm")!=null){
                    Object ret=   (callStoredFunction(Types.NUMERIC, "SVC.SVC_UPDT_CALL_TRC (?,?,?,?,?,?,?)", new Object[] {
                                                                             CldId, SlocId, HoOrgId, OrgId, curr.getAttribute("DocIdCm"),new Integer(82),UsrId
                                 })); 
                    adfLog.info("update call trace "+ret);
                    }
                    }
        }
        //  return null;
    }


    public String discAmtValidator(Number discAmt) {
        Row currItm = null;
        adfLog.info("curr row is " + this.getSvcCmWoItm3().getCurrentRow().getKey());
        if (this.getSvcCmWoItm3().getCurrentRow() != null)
            currItm = this.getSvcCmWoItm3().getCurrentRow();

        if (currItm != null && currItm.getAttribute("ItmId") != null) {
            Number itmQty = (Number) currItm.getAttribute("ItmQty");
            Number itmPrice = (Number) currItm.getAttribute("ItmPrice");
            String discType = currItm.getAttribute("DiscType").toString();
            Number tot = itmQty.multiply(itmPrice);

            adfLog.info("item quantity is " + tot + "item price is " + itmPrice + "item quantity is " + itmQty +
                        " and comparison is " + discAmt.compareTo(tot));
            if (discType.equalsIgnoreCase("A")) {
                if (discAmt.compareTo(tot) == 1 || discAmt.compareTo(tot) == 0) {
                    adfLog.info("disc amount has improper amount " + discAmt);
                    return "N";
                } else {
                    adfLog.info("disc amount ok " + discAmt);
                    return "Y";
                }
            } else if (discType.equalsIgnoreCase("P")) {
                if (discAmt.compareTo(new Number(100)) == 1 || discAmt.compareTo(new Number(100)) == 0) {
                    adfLog.info("percent wise   improper amount " + discAmt);
                    return "P";
                } else {
                    adfLog.info("percent wise  ok " + discAmt);
                    return "Y";
                }

            }
            return "Y";

        }

        return "Y";
    }

    /**
     * Container's getter for SvcCmWoAsgn1.
     * @return SvcCmWoAsgn1
     */
    public SvcCmWoAsgnVOImpl getSvcCmWoAsgn1() {
        return (SvcCmWoAsgnVOImpl) findViewObject("SvcCmWoAsgn1");
    }

    /**
     * Container's getter for SvcCmWoItm1.
     * @return SvcCmWoItm1
     */
    public ViewObjectImpl getSvcCmWoItm1() {
        return (ViewObjectImpl) findViewObject("SvcCmWoItm1");
    }

    /**
     * Container's getter for SvcCmWoOc1.
     * @return SvcCmWoOc1
     */
    public ViewObjectImpl getSvcCmWoOc1() {
        return (ViewObjectImpl) findViewObject("SvcCmWoOc1");
    }

    /**
     * Container's getter for SvcCmWoTrLines1.
     * @return SvcCmWoTrLines1
     */
    public ViewObjectImpl getSvcCmWoTrLines1() {
        return (ViewObjectImpl) findViewObject("SvcCmWoTrLines1");
    }

    /**
     * Container's getter for SvcCmWoTr1.
     * @return SvcCmWoTr1
     */
    public ViewObjectImpl getSvcCmWoTr1() {
        return (ViewObjectImpl) findViewObject("SvcCmWoTr1");
    }

    /**
     * Container's getter for SvcCmWo1.
     * @return SvcCmWo1
     */
    public ViewObjectImpl getSvcCmWo1() {
        return (ViewObjectImpl) findViewObject("SvcCmWo1");
    }


    /**
     * Container's getter for SvcCmWoOc2.
     * @return SvcCmWoOc2
     */
    public ViewObjectImpl getSvcCmWoOc2() {
        return (ViewObjectImpl) findViewObject("SvcCmWoOc2");
    }

    /**
     * Container's getter for SvcCmWoTrLines2.
     * @return SvcCmWoTrLines2
     */
    public ViewObjectImpl getSvcCmWoTrLines2() {
        return (ViewObjectImpl) findViewObject("SvcCmWoTrLines2");
    }

    /**
     * Container's getter for SvcCmWoItm4.
     * @return SvcCmWoItm4
     */
    public ViewObjectImpl getSvcCmWoItm4() {
        return (ViewObjectImpl) findViewObject("SvcCmWoItm4");
    }

    /**
     * Container's getter for SvcCmWoTr3.
     * @return SvcCmWoTr3
     */
    public ViewObjectImpl getSvcCmWoTr3() {
        return (ViewObjectImpl) findViewObject("SvcCmWoTr3");
    }


    /**
     * Container's getter for FkSvcCmWoOcVL1.
     * @return FkSvcCmWoOcVL1
     */
    public ViewLinkImpl getFkSvcCmWoOcVL1() {
        return (ViewLinkImpl) findViewLink("FkSvcCmWoOcVL1");
    }

    /**
     * Container's getter for FkSvcCmWoTrLinesVL1.
     * @return FkSvcCmWoTrLinesVL1
     */
    public ViewLinkImpl getFkSvcCmWoTrLinesVL1() {
        return (ViewLinkImpl) findViewLink("FkSvcCmWoTrLinesVL1");
    }

    /**
     * Container's getter for SvcCmWoItmTOSvcCmWotrVL2.
     * @return SvcCmWoItmTOSvcCmWotrVL2
     */
    public ViewLinkImpl getSvcCmWoItmTOSvcCmWotrVL2() {
        return (ViewLinkImpl) findViewLink("SvcCmWoItmTOSvcCmWotrVL2");
    }


    /**
     * Container's getter for SvcCmWoSrc1.
     * @return SvcCmWoSrc1
     */
    public ViewObjectImpl getSvcCmWoSrc1() {
        return (ViewObjectImpl) findViewObject("SvcCmWoSrc1");
    }

    /**
     * Container's getter for SvcCmWoToSvcCmWoSrcVL1.
     * @return SvcCmWoToSvcCmWoSrcVL1
     */
    public ViewLinkImpl getSvcCmWoToSvcCmWoSrcVL1() {
        return (ViewLinkImpl) findViewLink("SvcCmWoToSvcCmWoSrcVL1");
    }

    /**
     * Container's getter for SvcCmWoItm3.
     * @return SvcCmWoItm3
     */
    public ViewObjectImpl getSvcCmWoItm3() {
        return (ViewObjectImpl) findViewObject("SvcCmWoItm3");
    }

    /**
     * Container's getter for SvcCmWoSrcToSvcCmWoItmVL1.
     * @return SvcCmWoSrcToSvcCmWoItmVL1
     */
    public ViewLinkImpl getSvcCmWoSrcToSvcCmWoItmVL1() {
        return (ViewLinkImpl) findViewLink("SvcCmWoSrcToSvcCmWoItmVL1");
    }

    /**
     * Container's getter for SvcCmWoTr2.
     * @return SvcCmWoTr2
     */
    public ViewObjectImpl getSvcCmWoTr2() {
        return (ViewObjectImpl) findViewObject("SvcCmWoTr2");
    }

    /**
     * Container's getter for SvcCmWoItmTOSvcCmWotrVL1.
     * @return SvcCmWoItmTOSvcCmWotrVL1
     */
    public ViewLinkImpl getSvcCmWoItmTOSvcCmWotrVL1() {
        return (ViewLinkImpl) findViewLink("SvcCmWoItmTOSvcCmWotrVL1");
    }

    /**
     * Container's getter for SvcCmWoTrLines4.
     * @return SvcCmWoTrLines4
     */
    public ViewObjectImpl getSvcCmWoTrLines4() {
        return (ViewObjectImpl) findViewObject("SvcCmWoTrLines4");
    }

    /**
     * Container's getter for SvcCmWotrToSvcCmWotrlinesVL2.
     * @return SvcCmWotrToSvcCmWotrlinesVL2
     */
    public ViewLinkImpl getSvcCmWotrToSvcCmWotrlinesVL2() {
        return (ViewLinkImpl) findViewLink("SvcCmWotrToSvcCmWotrlinesVL2");
    }

    public Integer populateDataSrc(String tcktnm) {
        // System.out.println("in the populateDataSrc");
        Integer result = 0;
        if (tcktnm != null) {
            String docid = this.getSvcCmWo1().getCurrentRow().getAttribute("DocId").toString();
            // System.out.println("main doc id" + docid);
            String docidcm = this.getSvcCmWo1().getCurrentRow().getAttribute("DocIdCm").toString();
            //  System.out.println("cm doc id:" + docidcm);

            //        Row r[]=this.getLovDocIdCm1().getFilteredRows("TktNo", tcktnm);
            //    if(r.length>0) {
            //       docidcm=r[0].getAttribute("DocId").toString();
            //
            //}

            result = (Integer) (callStoredFunction(Types.INTEGER, "SVC.SVC_INS_QUOT_CM(?,?,?,?,?,?)", new Object[] {
                                                   CldId, SlocId, HoOrgId, OrgId, docid, docidcm
            }));
            //  System.out.println("Function Returned Value is:" + result);
            this.getSvcCmWoSrc1().executeQuery();

        }
        return result;
    }
    
    
    public void postChanges(){
      this.getDBTransaction().postChanges();
    }

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {

            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                    // System.out.println(bindVars[z] + "z");
                }
            }
            st.executeUpdate();

            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                }
            }
        }
    }

    /**
     * Container's getter for LovDocIdCm1.
     * @return LovDocIdCm1
     */
    public ViewObjectImpl getLovDocIdCm1() {
        return (ViewObjectImpl) findViewObject("LovDocIdCm1");
    }

    /**
     * Container's getter for LovEoId1.
     * @return LovEoId1
     */
    public ViewObjectImpl getLovEoId1() {
        return (ViewObjectImpl) findViewObject("LovEoId1");
    }

    /**
     * Container's getter for LovCurrency1.
     * @return LovCurrency1
     */
    public ViewObjectImpl getLovCurrency1() {
        return (ViewObjectImpl) findViewObject("LovCurrency1");
    }

    /**
     * Container's getter for LovEoId2.
     * @return LovEoId2
     */
    public ViewObjectImpl getLovEoId2() {
        return (ViewObjectImpl) findViewObject("LovEoId2");
    }

    public String CustomerCheck(String TcktNm) {
        System.out.println("in the Customer Check");
        if (TcktNm != null) {
            Row[] r1 = getLovDocIdCm1().getFilteredRows("TktNo", TcktNm);
            System.out.println(r1.length);
            if (r1.length > 0) {
                Integer eoid = Integer.parseInt(r1[0].getAttribute("EoId").toString());
                System.out.println(eoid);
                if (eoid == 0) {
                    String eonm = r1[0].getAttribute("EoNm").toString();
                    System.out.println(eonm);
                    getSvcCmWo1().getCurrentRow().setAttribute("TransCustNm1", eonm);
                    getSvcCmWo1().getCurrentRow().setAttribute("CurrConvFctr", 1);
                    getSvcCmWo1().getCurrentRow().setAttribute("CurrIdSp", 73);
                    return eonm;
                }
            }
        }
        return "no";
    }

    public void ApplyTax() {
        //    Number taxamount= new Number(0);
        //    String taxflag=this.getSvcCmWo1().getCurrentRow().getAttribute("TaxAfterDiscFlg").toString();
        //    if(taxflag.equals("Y")) {
        //        Number taxamt=(Number)this.getSvcCmWoItm3().getCurrentRow().getAttribute("TransAmt");
        //        Number discamt=(Number)this.getSvcCmWoItm3().getCurrentRow().getAttribute("TransDiscAmt");
        //        taxamount=(Number)taxamt.minus(discamt);
        //    }
        //    else
        //    {
        //        Number taxamt=(Number)this.getSvcCmWoItm3().getCurrentRow().getAttribute("TransAmt");
        //        taxamount=taxamt;
        //    }

        String docid = this.getSvcCmWoItm3().getCurrentRow().getAttribute("DocId").toString();
        String docidsrc = this.getSvcCmWoItm3().getCurrentRow().getAttribute("DocIdSrc").toString();
        String cldid = this.getSvcCmWoItm3().getCurrentRow().getAttribute("CldId").toString();
        String HoorgId = this.getSvcCmWoItm3().getCurrentRow().getAttribute("HoOrgId").toString();
        Integer slocid = Integer.parseInt(this.getSvcCmWoItm3().getCurrentRow().getAttribute("SlocId").toString());
        String orgid = this.getSvcCmWoItm3().getCurrentRow().getAttribute("OrgId").toString();
        String itmidsrc = this.getSvcCmWoItm3().getCurrentRow().getAttribute("ItmIdSrc").toString();
        String dftidsrc = this.getSvcCmWoItm3().getCurrentRow().getAttribute("DfctIdSrc").toString();
        String itmid = this.getSvcCmWoItm3().getCurrentRow().getAttribute("ItmId").toString();
        Number taxamt = (Number) this.getSvcCmWoItm3().getCurrentRow().getAttribute("TaxableAmtSp");
        Number Currfctr = (Number) this.getSvcCmWo1().getCurrentRow().getAttribute("CurrConvFctr");
        ViewObjectImpl taxrule = this.getLovTaxRule2();
        taxrule.setNamedWhereClauseParam("bindCldId", cldid);
        taxrule.setNamedWhereClauseParam("bindHoOrgId", HoorgId);
        taxrule.setNamedWhereClauseParam("bindSlocId", slocid);
        taxrule.executeQuery();

        Row[] r = taxrule.getFilteredRows("ItmId", itmid);
        System.out.println("Length:" + r.length);
        System.out.println(docid + " " + docidsrc + " " + itmidsrc + " " + dftidsrc + " " + itmid + " " + taxamt + " " +
                           Currfctr);
        String taxflg = null;
        Integer taxid = 0;
        if (r.length > 0) {
            adfLog.info("in the if loop");
            taxflg = r[0].getAttribute("TaxExmptFlg").toString();
            taxid = Integer.parseInt(r[0].getAttribute("TaxRuleId").toString());
        }
        System.out.println(taxflg + " " + taxid);
        this.getDBTransaction().postChanges();
        BigDecimal result =
            (BigDecimal) callStoredFunction(Types.NUMERIC, "SVC.SVC_INS_WO_TR_LINES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                            cldid, slocid, HoorgId, orgid, docid, docidsrc, itmidsrc, dftidsrc, itmid,
                                            taxid, taxamt, "I", Currfctr, taxflg, "Y"
        });


        Number ret = zero;
        if (ret != null) {
            try {
                ret = new Number(result);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        this.getDBTransaction().postChanges();
        adfLog.info("Fucntion Returned:" + ret);

        this.getSvcCmWoItm3().getCurrentRow().setAttribute("TransItemTaxAmount", (Number) ret.round(6));
        this.getSvcCmWoItm3().getCurrentRow().setAttribute("TaxAmtSp", (Number) ret.round(6));
        Number curr = (Number) this.getSvcCmWo1().getCurrentRow().getAttribute("CurrConvFctr");
        if (curr != null) {
            this.getSvcCmWoItm3().getCurrentRow().setAttribute("TaxAmtBs",
                                                               (Number) ((Number) ret.multiply(curr)).round(6));
        }

        Number tax = (Number) this.getSvcCmWoItm3().getCurrentRow().getAttribute("TransItemTaxAmount");
        //    String type = this.getSvcCmWoItm3().getCurrentRow().getAttribute("DiscType").toString();
        Number qty = (Number) this.getSvcCmWoItm3().getCurrentRow().getAttribute("ItmQty");
        Number price = (Number) this.getSvcCmWoItm3().getCurrentRow().getAttribute("ItmPrice");
        Number amt = (Number) this.getSvcCmWoItm3().getCurrentRow().getAttribute("DiscAmtSp");
        if (tax != null) {
            this.getSvcCmWoItm3().getCurrentRow().setAttribute("TotAmt",
                                                               (Number) ((Number) tax.add(qty.multiply(price)).minus(amt)).round(6));

            /*  if ("A".equalsIgnoreCase(type)) {
                newtot = (Number) tax.add(qty.multiply(price)).minus(amt);
                this.getSvcCmWoItm3().getCurrentRow().setAttribute("TotAmt", newtot);
                //this.getSvcCmWoItm3().getCurrentRow().setAttribute("DiscVal", amt);

            } else if ("P".equalsIgnoreCase(type)) { */

            // newtot = (Number)((Number) price.multiply(qty).multiply(amt).divide(new Number(100)).round(6)).round(6);
            //this.getSvcCmWoItm3().getCurrentRow().setAttribute("DiscVal", newtot);
            // ;
            // }
        }


    }
    
    
    public String autoIssue(){
        
        Row currIssu = this.getSvcCmWo1().getCurrentRow();
        Row currItm = this.getSvcCmWoItm3().getCurrentRow();
        String binChkFlg = (String)resolvEl("#{pageFlowScope.GLBL_ORG_BIN_CHK}");
        Number issQty = (Number)currItm.getAttribute("ItmQty");
        
        Integer retVal = null;
        
        adfLog.info("binChkFlg-----"+binChkFlg+"wh ---"+currIssu.getAttribute("TransWhId")+"itm   "+currItm.getAttribute("ItmId")+"doc id Src "+currItm.getAttribute("DocIdSrc")+" doc id  "+currIssu.getAttribute("DocId"));
        //if(uomCovrFctr !=null){
         this.getDBTransaction().postChanges();
        retVal = Integer.parseInt(callStoredFunction(Types.NUMERIC, "SVC.SVC_WO_AUTO_ISSU (?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {CldId,SlocId,HoOrgId,OrgId,currIssu.getAttribute("TransWhId").toString(),currIssu.getAttribute("TransReqArea"), 
                                                                                                                                            currItm.getAttribute("DocIdSrc").toString(), currItm.getAttribute("ItmIdSrc").toString(),
                                                                                                                                            currItm.getAttribute("DfctIdSrc").toString(), currItm.getAttribute("ItmId").toString(),issQty,
                                                                                                                                            currIssu.getAttribute("DocId").toString(),
                                                                                                                                            currIssu.getAttribute("FyId").toString(),usrId
                                                                                                                                        }).toString());
       // }
        if(retVal==1){
          this.getSvcCmWoLot().executeQuery();
          this.getSvcCmWoLot1().executeQuery();
          if("Y".equalsIgnoreCase(binChkFlg)){
          this.getSvcCmWoBin1().executeQuery();
          this.getSvcCmWoBin2().executeQuery();
          }
          this.getSvcCmWoSr1().executeQuery();
          this.getSvcCmWoSr2().executeQuery();
        }
        adfLog.info("return value from function ----    "+retVal); 
        
        return null;
    }

    /**
     * Tax check is taxable Y or N
     * Item Quantity in Number itmQty
     * Item Price in Number itmPrice
     * Discount value as discValue
     * Discount Type A/P discType
     *
     * */


    public HashMap getTotalAndTaxableAmt(String taxCheck, Number itmQty, Number itmPrice, Number discValue,
                                         String discType) {

        // adfLog.info("taxcheck " + taxCheck + " itemqty " + itmQty + " itemprice " + itmPrice + " discvalue = " +
        //               discValue + " disctype = " + discType);
        HashMap Hm = new HashMap();
        Number ItemQuantity = new Number(0);
        Number ItemPrice = new Number(0);
        Number discountVal = new Number(0);
        String discountType = "A";
        String taxAfterbefore = "N";

        if (taxCheck != null)
            taxAfterbefore = taxCheck;
        if (itmQty != null)
            ItemQuantity = itmQty;
        if (itmPrice != null)
            ItemPrice = itmPrice;
        if (discValue != null)
            discountVal = discValue;
        if (discType != null)
            discountType = discType;
        Number itmPriceQty = (Number) ItemPrice.multiply(ItemQuantity).round(6);
        Number discAmount = new Number(0);
        Number Hundred = new Number(100);
        Number taxableAmt = new Number(0);
        Number totalAmt = new Number(0);

        if (discountType.equalsIgnoreCase("A")) {
            discAmount = discountVal;

        } else if (discountType.equalsIgnoreCase("P")) {
            discAmount = (Number) itmPriceQty.multiply(discountVal).divide(Hundred).round(6);
        }
        //   adfLog.info("Now discount amount is-------------  " + discAmount);

        if ("Y".equalsIgnoreCase(taxAfterbefore)) {
            taxableAmt = (Number) (((Number) itmPriceQty.minus(discAmount)).round(6));
            totalAmt = (Number) (((Number) itmPriceQty.minus(discAmount)).round(6));


        } else if ("N".equalsIgnoreCase(taxAfterbefore)) {
            taxableAmt = (Number) itmPriceQty.round(6);
            totalAmt = (Number) (((Number) itmPriceQty.minus(discAmount)).round(6));
        }
        Hm.put("TaxableAmount", taxableAmt);
        Hm.put("TotalAmt", totalAmt);
        Hm.put("DiscountAmt", discAmount);

        return Hm;
    }


    /*
    public String chckTotalAmt(){
        String flag=null;
        return flag;
    } */

    /**
     * Container's getter for LovTaxRule1.
     * @return LovTaxRule1
     */


    public ViewObjectImpl getLovTaxRule1() {
        return (ViewObjectImpl) findViewObject("LovTaxRule1");
    }

    /**
     * Container's getter for LovTaxRule2.
     * @return LovTaxRule2
     */
    public ViewObjectImpl getLovTaxRule2() {
        return (ViewObjectImpl) findViewObject("LovTaxRule2");
    }

    /**
     * Container's getter for LovItmDesc1.
     * @return LovItmDesc1
     */
    public ViewObjectImpl getLovItmDesc1() {
        return (ViewObjectImpl) findViewObject("LovItmDesc1");
    }

    /**
     * Container's getter for LovDfctNm1.
     * @return LovDfctNm1
     */
    public ViewObjectImpl getLovDfctNm1() {
        return (ViewObjectImpl) findViewObject("LovDfctNm1");
    }

    public void setDiscVal() {
        this.getSvcCmWoItm3().getCurrentRow().setAttribute("DiscVal", new Number(0));
        this.getSvcCmWoItm3().getCurrentRow().setAttribute("DiscAmtSp", new Number(0));
    }

    /**
     * Container's getter for LovDfctNm2.
     * @return LovDfctNm2
     */
    public ViewObjectImpl getLovDfctNm2() {
        return (ViewObjectImpl) findViewObject("LovDfctNm2");
    }

    public void getWoView(String docId) {
        adfLog.info("inside view getScView  " + CldId + "  " + SlocId + "    " + OrgId + "  " + docId);
        ViewObjectImpl vo = this.getSvcCmWo1();
        ViewCriteria vc = vo.getViewCriteria("SvcCmWoVOCriteria"); //SvcCmWoVOCriteria
        vo.applyViewCriteria(vc);
        vo.setNamedWhereClauseParam("BindCldId", CldId);
        vo.setNamedWhereClauseParam("BindSlocId", SlocId);
        vo.setNamedWhereClauseParam("BindOrgId", OrgId);
        vo.setNamedWhereClauseParam("BindDocId", docId);
        vo.setNamedWhereClauseParam("bindHoOrgId", HoOrgId);
        vo.executeQuery();

    }

    /**
     * Container's getter for TransSearchWo1.
     * @return TransSearchWo1
     */
    public ViewObjectImpl getTransSearchWo1() {
        return (ViewObjectImpl) findViewObject("TransSearchWo1");
    }

    public void SearchWO() {
        String cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        Integer usrId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        String hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();

        ViewObjectImpl srchvo = this.getSearchWo1();
        Row curr = getTransSearchWo1().getCurrentRow();

        srchvo.setNamedWhereClauseParam("bindCldId", cldId);
        srchvo.setNamedWhereClauseParam("bindSlocId", slocId);
        srchvo.setNamedWhereClauseParam("bindHoOrgId", hoOrgId);
        srchvo.setNamedWhereClauseParam("bindOrgId", orgId);
        adfLog.info("doc state " + curr.getAttribute("Status") + " " + curr.getAttribute("TransToDate"));
        if (curr != null) {
            srchvo.setNamedWhereClauseParam("bindDocStat", curr.getAttribute("Status"));
            srchvo.setNamedWhereClauseParam("binddocType", curr.getAttribute("TransDocType"));
            srchvo.setNamedWhereClauseParam("bindTodt", curr.getAttribute("TransToDate"));
            srchvo.setNamedWhereClauseParam("binddocno", curr.getAttribute("WONo"));
            srchvo.setNamedWhereClauseParam("binfFrmdt", curr.getAttribute("TransFrmDate"));
            srchvo.executeQuery();
        }

        srchvo.executeQuery();
    }

    public void resetWo() {
        ViewObjectImpl srchvo = this.getSearchWo1();
        Row curr = getTransSearchWo1().getCurrentRow();
        String cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        Integer usrId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        String hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();

        srchvo.setNamedWhereClauseParam("bindCldId", "-1");
        srchvo.setNamedWhereClauseParam("bindSlocId", slocId);
        srchvo.setNamedWhereClauseParam("bindHoOrgId", hoOrgId);
        srchvo.setNamedWhereClauseParam("bindOrgId", orgId);

        if (curr != null) {
            srchvo.setNamedWhereClauseParam("bindDocStat", null);
            srchvo.setNamedWhereClauseParam("binddocType", null);
            srchvo.setNamedWhereClauseParam("bindTodt", null);
            srchvo.setNamedWhereClauseParam("binddocno", null);
            srchvo.setNamedWhereClauseParam("binfFrmdt", null);
            srchvo.executeQuery();
        }

        srchvo.executeQuery();
    }

    /**
     * Container's getter for SearchWo1.
     * @return SearchWo1
     */
    public ViewObjectImpl getSearchWo1() {
        return (ViewObjectImpl) findViewObject("SearchWo1");
    }

    public String isTaxApplicable() {
        Row curr = this.getSvcCmWoItm3().getCurrentRow();
        String flag = null;
        if (curr.getAttribute("ItmId") != null) {
            ViewObjectImpl taxrulevo = this.getLovTaxRule1();
            taxrulevo.setNamedWhereClauseParam("bindCldId", CldId);
            taxrulevo.setNamedWhereClauseParam("bindSlocId", SlocId);
            taxrulevo.setNamedWhereClauseParam("bindHoOrgId", HoOrgId);
            taxrulevo.executeQuery();
            Row[] rr1 = taxrulevo.getFilteredRows("ItmId", curr.getAttribute("ItmId"));
            if (rr1.length > 0) {
                String taxFlg = rr1[0].getAttribute("TaxExmptFlg").toString();
                if (rr1[0].getAttribute("TaxRuleId") != null) {
                    flag = "N";
                } else {
                    if (taxFlg.equalsIgnoreCase("Y")) {
                        return "N";
                    } else {
                        return "Y";
                    }
                }
            }

        }
        return flag;
    }

    /**
     * Container's getter for SvcCmWoAsgn2.
     * @return SvcCmWoAsgn2
     */
    public SvcCmWoAsgnVOImpl getSvcCmWoAsgn2() {
        return (SvcCmWoAsgnVOImpl) findViewObject("SvcCmWoAsgn2");
    }

    /**
     * Container's getter for SvcCmWoSrcTOSvcCmWoAsgnVL1.
     * @return SvcCmWoSrcTOSvcCmWoAsgnVL1
     */
    public ViewLinkImpl getSvcCmWoSrcTOSvcCmWoAsgnVL1() {
        return (ViewLinkImpl) findViewLink("SvcCmWoSrcTOSvcCmWoAsgnVL1");
    }

    public void UpdateTaxableAmt(String value) {
        adfLog.info(" in the UpdateTaxableAmt");
        //String flag=this.getSvcCmWo1().getCurrentRow().getAttribute("TaxAfterDiscFlg").toString();
        //adfLog.info("Flag :"+flag);
        adfLog.info("value:" + value);
        if (value != null && value.equals(true) &&
            this.getSvcCmWoItm3().getCurrentRow().getAttribute("DiscAmtSp") != null &&
            this.getSvcCmWoItm3().getCurrentRow().getAttribute("TaxableAmtSp") != null) {
            Number disc = (Number) this.getSvcCmWoItm3().getCurrentRow().getAttribute("DiscAmtSp");
            Number amt = (Number) this.getSvcCmWoItm3().getCurrentRow().getAttribute("TaxableAmtSp");
            adfLog.info("Discount value:" + disc + " amount value:" + amt);
            if (disc != null && amt != null) {
                adfLog.info("in the if loop");
                this.getSvcCmWoItm3().getCurrentRow().setAttribute("TaxableAmtSp", amt.minus(disc));
            } else {
                adfLog.info(" in the else block");
                this.getSvcCmWoItm3().getCurrentRow().setAttribute("TaxableAmtSp", amt);
            }

        }
    }

    /**
     * Container's getter for LovEmpName1.
     * @return LovEmpName1
     */
    public ViewObjectImpl getLovEmpName1() {
        return (ViewObjectImpl) findViewObject("LovEmpName1");
    }

    public void createAsgn(String ReqArea, String EmpNm) {
        //Integer usrId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        String HoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        // Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());

        Row curr = this.getSvcCmWo1().getCurrentRow();


        if (curr.getAttribute("TransReqArea") != null && curr.getAttribute("TransEmpCode") != null) {
            ViewObjectImpl asgn = this.getSvcCmWoAsgn2();
            adfLog.info("emp code value is "+curr.getAttribute("TransEmpCode"));
            Row r = asgn.createRow();

            r.setAttribute("RqmtAreaId", curr.getAttribute("TransReqArea"));
            r.setAttribute("HoOrgId", HoOrgId);
            r.setAttribute("EmpCode", curr.getAttribute("TransEmpCode"));
            r.setAttribute("UsrIdCrt", usrId);
            r.setAttribute("CrtDt", new java.sql.Timestamp(System.currentTimeMillis()));
            //  r.setAttribute("ModDt", new java.sql.Timestamp(System.currentTimeMillis())); */
            //r.setAttribute("UsrIdMod", usrId);
            //r.setAttribute(arg0, arg1);
            asgn.insertRow(r);
           curr.setAttribute("TransReqArea", r.getAttribute("RqmtAreaId"));
            curr.setAttribute("TransEmpCode", null);
            curr.setAttribute("TransEmpNm", null);
            
            adfLog.info("curr code value is "+r.getAttribute("EmpCode"));
    
        }

    }

    /**
     * Container's getter for LovReqtArea1.
     * @return LovReqtArea1
     */
    public ViewObjectImpl getLovReqtArea1() {
        return (ViewObjectImpl) findViewObject("LovReqtArea1");
    }

    public String itmnmValidator(String nm) {
        //String id1=this.getSvcCmWoItm3().getCurrentRow().getAttribute("ItmId");
        String id1 = null;
        if (nm != null) {
            Row r1[] = this.getLovItmDesc1().getFilteredRows("ItmDesc", nm);
            if (r1.length > 0) {
                id1 = r1[0].getAttribute("ItmId").toString();
                adfLog.info(" item id:" + id1);
            }
            ViewObjectImpl v1 = this.getSvcCmWoItm3();
            Row curr=this.getSvcCmWoItm3().getCurrentRow();
            RowSetIterator itr = v1.createRowSetIterator(null);
            while (itr.hasNext()) {
                Row r = itr.next();
                if (r != curr) {
                    String id = r.getAttribute("ItmId").toString();
                    if (id != null && id1 != null) {
                        if (id1.equals(id))
                            return "e";
                    }
                }
            }
        }
        return "v";
    }

    public String AsgnDuplicate() {

        Row curr = this.getSvcCmWo1().getCurrentRow();
        //   Row curritm = this.getSvcCmWoItm3().getCurrentRow();
        Row currsrc = this.getSvcCmWoSrc1().getCurrentRow();
        ViewObjectImpl assgn = this.getSvcCmWoAsgn2();
        adfLog.info(" in the AsgnDuplicate " + curr.getAttribute("TransReqArea") + " emp code is  " +
                    curr.getAttribute("TransEmpCode"));
        if (curr.getAttribute("TransReqArea") != null && curr.getAttribute("TransEmpCode") != null) {
            RowQualifier rq = new RowQualifier(assgn);
            rq.setWhereClause("RqmtAreaId=" + curr.getAttribute("TransReqArea") + " and EmpCode= " +
                              curr.getAttribute("TransEmpCode") + " and ItmIdSrc= '" +
                              currsrc.getAttribute("ItmIdSrc") + "'");
            adfLog.info("assgn expression is " + rq.getExprStr());
            Row[] rr = assgn.getFilteredRows(rq);

            if (rr.length > 0) {

                return "N";
            } else {
                return "Y";
            }

        }
        return "Y";
    }

    public String setRqmtAreaId(Integer currValue) {

        Row currwo = this.getSvcCmWo1().getCurrentRow();
        if (getSvcCmWoAsgn2().getCurrentRow() != null) {
            currValue = (Integer) this.getSvcCmWoAsgn2().getCurrentRow().getAttribute("RqmtAreaId");
            currwo.setAttribute("TransReqArea", currValue);
        }

        return null;
    }

    public String filterStk() {
        Row curr = this.getSvcCmWo1().getCurrentRow();
        Row currItm=this.getSvcCmWoItm3().getCurrentRow();

        if (curr != null && currItm!=null) {
            String ItmId=null;
            Integer rqmtArea = new Integer(0);
           String  ItmIdSrc=null;
            String whId = null;
            String docId=null;
            if (curr.getAttribute("TransReqArea") != null)
                rqmtArea = (Integer) curr.getAttribute("TransReqArea");
            if (curr.getAttribute("TransWhId") != null)
                whId = (String) curr.getAttribute("TransWhId");
           if(currItm.getAttribute("ItmId")!=null)
               ItmId=currItm.getAttribute("ItmId").toString();
           if(currItm.getAttribute("ItmIdSrc")!=null)
             ItmIdSrc=  currItm.getAttribute("ItmIdSrc").toString();
           if(curr.getAttribute("DocId")!=null)
               docId=curr.getAttribute("DocId").toString();
            adfLog.info("now the rqmt area and whid is "+rqmtArea+" warehouse name is "+whId);
          
            this.getLovStkRqmtSr().setWhereClause("SR_NO NOT IN (SELECT SR_NO from SVC$CM$WO$SR where itm_id = '"+ItmId+"' and doc_id = '"+currItm.getAttribute("DocId").toString()+"' )");
            this.getLovStkRqmtSr().executeQuery();
          
            ViewObjectImpl lotStk=this.getLovStkRqmt();
            lotStk.setNamedWhereClauseParam("bindCldId", CldId);
            lotStk.setNamedWhereClauseParam("bindSlocId", SlocId);
            lotStk.setNamedWhereClauseParam("bindOrgId", OrgId);
            lotStk.setNamedWhereClauseParam("bindRqmtId", rqmtArea);
            lotStk.setNamedWhereClauseParam("bindWhId", whId);
            lotStk.setNamedWhereClauseParam("bindItmId", ItmId);
            lotStk.executeQuery();
            
            ViewObjectImpl binStk=this.getLovStkRqmtBin();
            binStk.setNamedWhereClauseParam("bindCldId", CldId);
            binStk.setNamedWhereClauseParam("bindSlocId", SlocId);
            binStk.setNamedWhereClauseParam("bindOrgId", OrgId);
            binStk.setNamedWhereClauseParam("bindRqmtId", rqmtArea);
            binStk.setNamedWhereClauseParam("bindWhId", whId);
            binStk.setNamedWhereClauseParam("bindItmId", ItmId);
            binStk.executeQuery();
            
            
            ViewObjectImpl srStk=this.getLovStkRqmtSr();
            srStk.setNamedWhereClauseParam("bindCldId", CldId);
            srStk.setNamedWhereClauseParam("bindSlocId", SlocId);
            srStk.setNamedWhereClauseParam("bindOrgId", OrgId);
            srStk.setNamedWhereClauseParam("bindRqmtId", rqmtArea);
            srStk.setNamedWhereClauseParam("bindWhId", whId);
            srStk.setNamedWhereClauseParam("bindItmId", ItmId);
            srStk.executeQuery();
            //bindItmSrc
            ViewObjectImpl rtrnLotStk=this.getLovSvcRtrnWoLot();
            rtrnLotStk.setNamedWhereClauseParam("bindCldId", CldId);
            rtrnLotStk.setNamedWhereClauseParam("bindSlocId", SlocId);
            rtrnLotStk.setNamedWhereClauseParam("bindOrgId", OrgId);
            rtrnLotStk.setNamedWhereClauseParam("bindRqmtId", rqmtArea);
            rtrnLotStk.setNamedWhereClauseParam("bindWhId", whId);
            rtrnLotStk.setNamedWhereClauseParam("bindItmId", ItmId);
            rtrnLotStk.setNamedWhereClauseParam("bindItmSrc", ItmIdSrc);
            rtrnLotStk.setNamedWhereClauseParam("bindDocId", docId);
            //bindDocId
            rtrnLotStk.executeQuery();
            
            ViewObjectImpl rtrnBinStk=this.getLovSvcRtrnWoBin();
            rtrnBinStk.setNamedWhereClauseParam("bindCldId", CldId);
            rtrnBinStk.setNamedWhereClauseParam("bindSlocId", SlocId);
            rtrnBinStk.setNamedWhereClauseParam("bindOrgId", OrgId);
            rtrnBinStk.setNamedWhereClauseParam("bindRqmtId", rqmtArea);
            rtrnBinStk.setNamedWhereClauseParam("bindWhId", whId);
            rtrnBinStk.setNamedWhereClauseParam("bindItmId", ItmId);
            rtrnBinStk.setNamedWhereClauseParam("bindItmSrc", ItmIdSrc);
            rtrnBinStk.setNamedWhereClauseParam("bindDocId", docId);
            rtrnBinStk.executeQuery();
            
            ViewObjectImpl rtrnSrStk=this.getLovSvcRtrnSr();
            rtrnSrStk.setNamedWhereClauseParam("bindCldId", CldId);
            rtrnSrStk.setNamedWhereClauseParam("bindSlocId", SlocId);
            rtrnSrStk.setNamedWhereClauseParam("bindOrgId", OrgId);
            rtrnSrStk.setNamedWhereClauseParam("bindRqmtId", rqmtArea);
            rtrnSrStk.setNamedWhereClauseParam("bindWhId", whId);
            rtrnSrStk.setNamedWhereClauseParam("bindItmId", ItmId);
            rtrnSrStk.setNamedWhereClauseParam("bindItmSrc", ItmIdSrc);
            rtrnSrStk.setNamedWhereClauseParam("bindDocId", docId);
            rtrnSrStk.executeQuery();
             
            
            
        }

        return null;
    }


    public String pendingFrCstmrAprvl() {
        String flag = "N";
        Row curr = this.getSvcCmWo1().getCurrentRow();
        if (curr.getAttribute("DocStat") != null) {
            Integer docStat = (Integer) curr.getAttribute("DocStat");
            if (docStat == 89) {
                curr.setAttribute("DocStat", 83);
                curr.setAttribute("DocDt", new java.sql.Timestamp(System.currentTimeMillis()));
                flag = "Y";
                    if(curr.getAttribute("DocIdCm")!=null){
                    Object ret=   (callStoredFunction(Types.NUMERIC, "SVC.SVC_UPDT_CALL_TRC (?,?,?,?,?,?,?)", new Object[] {
                                                                             CldId, SlocId, HoOrgId, OrgId, curr.getAttribute("DocIdCm"),new Integer(83),UsrId
                                 })); 
                    adfLog.info("update call trace "+ret);
                    }
                
                }
        }
        return flag;
    }

    public String approveByCustomer() {
        String flag = "N";
        Row curr = this.getSvcCmWo1().getCurrentRow();
        if (curr.getAttribute("DocStat") != null) {
            Integer docStat = (Integer) curr.getAttribute("DocStat");
            if (docStat == 83) {
                curr.setAttribute("DocStat", 84);
                curr.setAttribute("DocDt", new java.sql.Timestamp(System.currentTimeMillis()));
                callStoredFunction(Types.INTEGER, "SVC.SVC_UPDT_CALL_STAT_WO (?,?,?,?,?)", new Object[] {
                                   CldId, SlocId, OrgId, curr.getAttribute("DocIdCm"), 84
                });
                if(curr.getAttribute("DocIdCm")!=null){
                Object ret=   (callStoredFunction(Types.NUMERIC, "SVC.SVC_UPDT_CALL_TRC (?,?,?,?,?,?,?)", new Object[] {
                                                                         CldId, SlocId, HoOrgId, OrgId, curr.getAttribute("DocIdCm"),new Integer(84),UsrId
                             })); 
                adfLog.info("update call trace "+ret);   
                }
                flag = "Y";
            }
        }
        return flag;
    }

    public String workOrderComplete() {
        String flag = "N";
        Row curr = this.getSvcCmWo1().getCurrentRow();
        adfLog.info("work order order check " + curr.getAttribute("WorkComplete"));
        if (curr.getAttribute("DocStat") != null && curr.getAttribute("WorkComplete") != null) {
            Integer docStat = (Integer) curr.getAttribute("DocStat");
            if (docStat == 84) {
                if ("Y".equalsIgnoreCase(curr.getAttribute("WorkComplete").toString())) {
                    curr.setAttribute("DocStat", 86);
                    curr.setAttribute("DocDt", new java.sql.Timestamp(System.currentTimeMillis()));
                    flag = "Y";
                    callStoredFunction(Types.INTEGER, "SVC.SVC_UPDT_CALL_STAT_WO (?,?,?,?,?)", new Object[] {
                                       CldId, SlocId, OrgId, curr.getAttribute("DocIdCm"), 86
                    });
                    if(curr.getAttribute("DocIdCm")!=null){
               Object ret=   (callStoredFunction(Types.NUMERIC, "SVC.SVC_UPDT_CALL_TRC (?,?,?,?,?,?,?)", new Object[] {
                                                                        CldId, SlocId, HoOrgId, OrgId, curr.getAttribute("DocIdCm"),new Integer(86),UsrId
                            })); 
               adfLog.info("update call trace "+ret);
                    }
                    this.getDBTransaction().commit();
                }
            }
        }
        return flag;
    }

    public String getUsrNm(Integer usrId) {
        ViewObjectImpl usrvo = this.getLovUsrId();
        String usrname = null;
        if (usrId != null) {
            Row[] rr = usrvo.getFilteredRows("UsrId", usrId);
            if (rr.length > 0) {
                usrname = rr[0].getAttribute("UsrName").toString();
                return rr[0].getAttribute("UsrName").toString();
            }
        }

        return usrname;
    }

    public String chkValidOutput() {

        Row curr = this.getSvcCmWo1().getCurrentRow();
        if (curr.getAttribute("DocId") != null) {
            ViewObjectImpl cmwosrc = this.getSvcCmWoSrc1();
            Row[] rr = cmwosrc.getFilteredRows("DocId", curr.getAttribute("DocId"));
            if (rr.length > 0) {
                for (Row r : rr) {
                    ViewObjectImpl itmvo = this.getSvcCmWoItm1();
                    Row[] itmrw = itmvo.getFilteredRows("DocId", r.getAttribute("DocId"));
                    if (itmrw.length > 0) {
                        return "Y";
                    }
                }
            }

        }

        return "N";
    }


    public String addOtherCharges() {
        Row curr = this.getSvcCmWo1().getCurrentRow();
        ViewObjectImpl ocVo = this.getSvcCmWoOc2();
        if (curr.getAttribute("TransCoaId") != null && curr.getAttribute("TransOcDesc") != null &&
            curr.getAttribute("TransOcAmt") != null) {
            Number transOcAmt = (Number) curr.getAttribute("TransOcAmt");
            if (transOcAmt.compareTo(new Number(0)) == 1) {
                Row crtOc = ocVo.createRow();
                crtOc.setAttribute("CoaId", (Integer) curr.getAttribute("TransCoaId"));
                crtOc.setAttribute("HoOrgId", HoOrgId);
                crtOc.setAttribute("OcAmtSp", transOcAmt);
                crtOc.setAttribute("OcDesc", (Integer) curr.getAttribute("TransOcDesc"));
                ocVo.insertRow(crtOc);
                //ocVo.executeQuery();
                curr.setAttribute("TransCoaId", null);
                curr.setAttribute("TransOcAmt", new Number(0)); //TransCoaNm
                curr.setAttribute("TransCoaNm", null);
                curr.setAttribute("TransOcDesc", (Integer) 180);

            }
        }
        return null;
    }

    public String dplctOcCheck() {
        Row curr = this.getSvcCmWo1().getCurrentRow();
        ViewObjectImpl ocVo = this.getSvcCmWoOc2();
        if (curr.getAttribute("TransCoaId") != null && curr.getAttribute("TransOcDesc") != null) {
            RowQualifier rq = new RowQualifier(ocVo);
            rq.setWhereClause("CoaId= " + curr.getAttribute("TransCoaId"));
            Row[] rr = ocVo.getFilteredRows(rq);

           adfLog.info("filter rows length is "+rr.length+" expression is "+rq.getExprStr());
            if (rr.length > 0)
                return "N";
            else
                return "Y";

        }
        return "Y";
    }

    public void ocRemove() {
        ViewObjectImpl ocVo = this.getSvcCmWoOc2();
        Row curr = ocVo.getCurrentRow();
        if (curr != null) {
            curr.remove();
        }
        ocVo.executeQuery();
    }

    public Number setOcTotalAmount() {
        Row curr = this.getSvcCmWo1().getCurrentRow();
        ViewObjectImpl ocVo = this.getSvcCmWoOc2();
        Row[] rr = ocVo.getFilteredRows("DocId", curr.getAttribute("DocId"));
        Number sum = new Number(0);
        if (rr.length > 0)
            for (Row r : rr)
                sum = sum.add((Number) r.getAttribute("OcAmtSp"));

        curr.setAttribute("TransOcTtlAmt", sum);

        return sum;
    }

    public String taxablecheck() {
        String chkcurr = checkCurrency();
        adfLog.info("chk currency conv is " + chkcurr);
        if ("Y".equalsIgnoreCase(chkcurr)) {

            Row svcrow = this.getSvcCmWo1().getCurrentRow();
            ViewObjectImpl svcItmvo = this.getSvcCmWoItm3();
            ViewObjectImpl svcTrvo = this.getSvcCmWoTr1();
            svcTrvo.executeQuery();
            adfLog.info("istaxable amt");
            ArrayList ar = new ArrayList();
            if (svcrow.getAttribute("DocId") != null) {
                Row[] rr1 = svcItmvo.getFilteredRows("DocId", svcrow.getAttribute("DocId"));

                if (rr1.length > 0) {
                    for (Row r : rr1) {
                        Number txblAmt = (Number) r.getAttribute("TaxableAmtSp");
                        String ItmId = r.getAttribute("ItmId").toString();
                        RowQualifier rq = new RowQualifier(svcTrvo);
                        rq.setWhereClause("DocId= '" + svcrow.getAttribute("DocId") + "' and ItmId= '" + ItmId + "'");
                        Row[] rr2 = svcTrvo.getFilteredRows(rq);
                        adfLog.info("tr get exprtn is  ----------- " + rq.getExprStr() + " length is " + rr2.length);

                        if (rr2.length > 0) {
                            for (Row rr : rr2) {
                                Number trTxblAmt = (Number) rr.getAttribute("TaxableAmtSp");
                                adfLog.info("taxable amt comparison " + txblAmt.compareTo(trTxblAmt) +
                                            " both amount is ------------------- " + trTxblAmt + " " + txblAmt);
                                if (txblAmt.compareTo(trTxblAmt) == 0) {
                                    adfLog.info("taxable amount value is ok for all items " + ItmId);
                                } else {
                                    ViewObjectImpl itmvo = this.getLovItmDesc1();
                                    itmvo.setNamedWhereClauseParam("BindCldIdVar", CldId);
                                    itmvo.setNamedWhereClauseParam("BindSlocIdVar", SlocId);
                                    itmvo.setNamedWhereClauseParam("BindHoOrgId", HoOrgId);
                                    itmvo.setNamedWhereClauseParam("BindOrgIdVar", OrgId);
                                    itmvo.executeQuery();

                                    Row[] itmR = itmvo.getFilteredRows("ItmId", ItmId);
                                    if (itmR.length > 0)
                                        //  for(Row itmrr :itmR)
                                        ar.add(itmR[0].getAttribute("ItmDesc"));
                                }
                            }
                        }
                    }
                }

            }
            adfLog.info("array list is " + ar);
            if (ar.isEmpty()) {
                return "Y";
            } else {
                FacesMessage message = new FacesMessage("Taxable Amount hase been change Re-Apply Tax " + ar);
                message.setSeverity(FacesMessage.SEVERITY_INFO);
                FacesContext fc = FacesContext.getCurrentInstance();
                fc.addMessage(null, message);
                return "N";
            }
        } else if ("N".equalsIgnoreCase(chkcurr)) {
            FacesMessage message = new FacesMessage("Either currency or conversion factor is not defined ");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext fc = FacesContext.getCurrentInstance();
            fc.addMessage(null, message);
            return "P";
        }
        return "Y";
    }

    public String checkCurrency() {
        Row curr = this.getSvcCmWo1().getCurrentRow();

        if (curr != null) {

            if (curr.getAttribute("CurrIdSp") != null &&
                ((Number) curr.getAttribute("CurrConvFctr")).compareTo(new Number(0)) != 0) {
                return "Y";
            } else {
                return "N";
            }
        }

        return null;
    }


    public String insrtSrNo(){
     Number zero=new Number(0);
     Number one=new Number(1);
                                  
            ViewObjectImpl  mtlItm = this.getSvcCmWoItm3();
            ViewObjectImpl mtlSr  = this.getSvcCmWoSr1();
            ViewObjectImpl mtlBin = this.getSvcCmWoBin1();
            ViewObjectImpl mtlLot = this.getSvcCmWoLot();
            ViewObjectImpl viewSummSr = this.getLovStkRqmtSr();
            Row currItm = mtlItm.getCurrentRow();
            String binChkFlg = (String)resolvEl("#{pageFlowScope.GLBL_ORG_BIN_CHK}");
            Row [] srRow = this.getLovStkRqmtSr().getFilteredRows("ItmId", currItm.getAttribute("ItmId"));
            String whId=null;
            Integer rqmtArea=null;
            if(this.getSvcCmWo1().getCurrentRow().getAttribute("TransWhId")!=null)
              whId=this.getSvcCmWo1().getCurrentRow().getAttribute("TransWhId").toString();
            if(this.getSvcCmWo1().getCurrentRow().getAttribute("TransReqArea")!=null)
             rqmtArea=(Integer)this.getSvcCmWo1().getCurrentRow().getAttribute("TransReqArea");
            
            ArrayList arrlist=new ArrayList();
           
           if(srRow.length>0){
               Number sum=zero;
               for(Row r: srRow){
                   if(r.getAttribute("TransTotStk")!=null){
                       if("Y".equalsIgnoreCase(r.getAttribute("TransTotStk").toString())){
                           sum=sum.add(one);
                           arrlist.add(r.getAttribute("LotId"));
                           /*     Row rr=mtlSr.createRow();
                           rr.setAttribute("RqmtAreaId",r.getAttribute("RqmtAreaId") );
                           rr.setAttribute("WhId",r.getAttribute("WhId") );
                           rr.setAttribute("LotId",r.getAttribute("LotId") );
                           rr.setAttribute("BinId",r.getAttribute("BinId") );
                           rr.setAttribute("SrNo",r.getAttribute("SrNo") );
                           rr.setAttribute("ItmQty",one );
                           rr.setAttribute("RqmtAreaId",r.getAttribute("LotId") );
                        */}
                   }
               }
           }
        // Using Set for remove duplicate LotId
        Set<String> lotset = new HashSet<String>(arrlist);
        for (String key : lotset) {
            // Create new row in lot table Key as LotId and lotVal use quantity for SR No Selection
            Integer lotQty = Collections.frequency(arrlist, key);
            Number lotvalu = new Number(0);
            try{
                lotvalu = new Number(lotQty);
            }catch(Exception e){
                
            }
            adfLog.info(key + ": " + Collections.frequency(arrlist, key)+"------"+lotvalu);
        // RowQualifier for filter Lot table to check Lot exist or not.....
            RowQualifier rowQualifier =new RowQualifier(mtlLot);
            rowQualifier.setWhereClause(" DocIdSrc ='"+currItm.getAttribute("DocIdSrc")+"' and ItmId = '"+currItm.getAttribute("ItmId")+"' and LotId = '"+key+"'");
            Row[] rows=mtlLot.getFilteredRows(rowQualifier);
            adfLog.info(""+rowQualifier.getExprStr());
            if(rows.length>0){  // update lot quantity if lot already exist......:
                adfLog.info(" ALREADY PRESENT  LOT-----");
                for(Row r :rows){
                Number prLotVal = (Number)r.getAttribute("ItmQty");
                    String WhId=r.getAttribute("WhId").toString();
              //  Number prLotValBs = (Number)r.getAttribute("IssuQtyBs");
                Number newQty = prLotVal.add(lotvalu);
                adfLog.info("new vale FOR LOT----------  "+newQty);
                r.setAttribute("ItmQty", newQty);
                r.setAttribute("WhId", WhId);
                r.setAttribute("HoOrgId", HoOrgId);
                r.setAttribute("RqmtAreaId", rqmtArea);
              //  r.setAttribute("ItmQtyBs", newQty);
            }
            } else {
                adfLog.info("CREATE NEW  LOT-----");
                Row insrtLot = mtlLot.createRow();
                insrtLot.setAttribute("LotId", key);
                insrtLot.setAttribute("ItmQty", lotvalu);
            //    insrtLot.setAttribute("HoOrgId", HoOrgId);
                insrtLot.setAttribute("WhId", whId);
                insrtLot.setAttribute("RqmtAreaId", rqmtArea);

                //rqmtArea
                        
          //  insrtLot.setAttribute("IssuQtyBs",lotvalu);
          //  insrtLot.setAttribute("DocDtSrc", currItm.getAttribute("DocDtSrc"));
            mtlLot.insertRow(insrtLot);
            mtlLot.executeQuery();
                adfLog.info("lot Detail is "+insrtLot.getKey());
            }
        }
        Iterator i = lotset.iterator();
        adfLog.info("----------"+lotset);
        // Adding Bin in bin Table for using lotSet Value When organisation using Bin concept binChkFlg == Y
        if("Y".equalsIgnoreCase(binChkFlg)){
        while(i.hasNext()){
            String lot = (String)i.next();
            ArrayList<String> arrListbin = new ArrayList<String>();  // for Storing all bin selected paticular lot              
            adfLog.info("--------------"+lot);
            for(Row r2 : srRow){
                if(r2.getAttribute("TransTotStk")!=null){                
                    if("Y".equalsIgnoreCase(r2.getAttribute("TransTotStk").toString()) && r2.getAttribute("LotId").toString().equals(lot)){   
                            arrListbin.add(r2.getAttribute("BinId").toString());
                  }
            }
            }
            // Using Set for remove duplicate Bin
           Set<String> binSet = new HashSet<String>(arrListbin);
            for (String key : binSet) {
                // Create new row in bin table Key as BinIds and lotVal use quantity for SR No Selection
                Integer binQty = Collections.frequency(arrListbin, key);
                Number binvalu = new Number(0);
                try{
                binvalu = new Number(binQty);
                }catch(Exception e){
                    e.printStackTrace();
                } 
                // RowQualifier for filter bin table to check bin exist or not.....
                RowQualifier rowQualifier =new RowQualifier(mtlBin);
                rowQualifier.setWhereClause(" DocIdSrc ='"+currItm.getAttribute("DocIdSrc")+"' and ItmId = '"+currItm.getAttribute("ItmId")+"' and LotId = '"+lot+"' and BinId ='"+key+"'");
                Row[] rows=mtlBin.getFilteredRows(rowQualifier);
                adfLog.info(""+rowQualifier.getExprStr());
                if(rows.length>0){
                adfLog.info("BIN ALREADY PRESENT FOR LOT-----");
                    for(Row r :rows){
                    Number prBinVal = (Number)r.getAttribute("ItmQty");
                    Number newQty = prBinVal.add(binvalu);
                    adfLog.info("new vale FOR BIN----------  "+newQty);
                    r.setAttribute("ItmQty", newQty);
                    //r.setAttribute("IssuQtyBs", newQty);
                }
                } else{ 
                adfLog.info("BIN CREATE FOR THIS LOT -----");
                Row binInst = mtlBin.createRow();
                binInst.setAttribute("LotId", lot);
                binInst.setAttribute("BinId", key);
                binInst.setAttribute("ItmQty", binvalu);
                binInst.setAttribute("RqmtAreaId",rqmtArea ); 
                binInst.setAttribute("WhId",whId ); 
               // binInst.setAttribute("OrgId",OrgId );
             //   binInst.setAttribute("ItmIdSrc",currItm.getAttribute("ItmIdSrc") ); 
                     
                    
                    
                    
              //  binInst.setAttribute("IssuQtyBs",binvalu);
                //binInst.setAttribute("DocDtSrc", currItm.getAttribute("DocDtSrc"));
                mtlBin.insertRow(binInst);
                mtlBin.executeQuery();
                    adfLog.info("binkeys ------------------------- ????  "+binInst.getKey());
                adfLog.info(key + ": " + Collections.frequency(arrListbin, key)+"-------"+binvalu);
            }
            }
            adfLog.info(""+arrListbin);
            adfLog.info(""+binSet);

        }
        
        }
        
        if(srRow.length>0){
           for(Row rr : srRow){
               if(rr.getAttribute("TransTotStk")!=null){
               if("Y".equalsIgnoreCase(rr.getAttribute("TransTotStk").toString())){
                   adfLog.info("Condition true create sr");
                   Row srInst = mtlSr.createRow();
                   srInst.setAttribute("LotId", rr.getAttribute("LotId"));
                   srInst.setAttribute("BinId", rr.getAttribute("BinId"));
                   srInst.setAttribute("SrNo", rr.getAttribute("SrNo"));
                   srInst.setAttribute("ItmQty", new Number(1));
                   srInst.setAttribute("RqmtAreaId",rqmtArea ); 
                   srInst.setAttribute("WhId",whId ); 
                 
                  // srInst.setAttribute("SrQtyBs", new Number(1));
                   //srInst.setAttribute("DocDtSrc", currItm.getAttribute("DocDtSrc"));
                   mtlSr.insertRow(srInst);
                   mtlSr.executeQuery();
               }
           }
        }
        }
        this.getDBTransaction().postChanges();
        
           
           
           adfLog.info("lenth sr     "+srRow.length);
        //TransTotStk
           
        return null;
    }

    public String binOkInsert() {

        ViewObjectImpl mtlItm = this.getSvcCmWoItm3();
        ViewObjectImpl mtlBin = this.getSvcCmWoBin1();
        ViewObjectImpl srcVo = this.getSvcCmWoSrc1();
        ViewObjectImpl mtlLot = this.getSvcCmWoLot();
        ViewObjectImpl viewSummSr = this.getLovStkRqmtBin();
        Row currItm = mtlItm.getCurrentRow();
        Row currSrc = srcVo.getCurrentRow();
        Number zero = new Number(0);
        Row[] binRow = this.getLovStkRqmtBin().getFilteredRows("ItmId", currItm.getAttribute("ItmId"));
        String whId = null;
        Integer rqmtArea = null;
        if (this.getSvcCmWo1().getCurrentRow().getAttribute("TransWhId") != null)
            whId = this.getSvcCmWo1().getCurrentRow().getAttribute("TransWhId").toString();
        if (this.getSvcCmWo1().getCurrentRow().getAttribute("TransReqArea") != null)
            rqmtArea = (Integer) this.getSvcCmWo1().getCurrentRow().getAttribute("TransReqArea");

        adfLog.info("lenth sr     " + binRow.length);
        // adfLog.info("doc date src     "+currItm.getAttribute("DocDtSrc")+" src "+currSrc.getAttribute("DocDtSrc"));
        ArrayList<String> arrlist = new ArrayList<String>();

        if (binRow.length > 0) {
            for (Row r1 : binRow) {
                if (r1.getAttribute("TransTotStk") != null) {
                    if (((Number) r1.getAttribute("TransTotStk")).compareTo(zero) > 0) {
                        String lotId = r1.getAttribute("LotId").toString();
                        arrlist.add(lotId);
                        adfLog.info("lot id new    " + lotId);
                    }
                }
            }
            adfLog.info(" array size " + arrlist.size());
        }
        Set<String> lotset = new HashSet<String>(arrlist);
        // for(String kay : lotset){
        Iterator itr = lotset.iterator();
        while (itr.hasNext()) {
            String lotId = itr.next().toString();
            Number lotQty = new Number(0);
            for (Row r1 : binRow) {
                if (r1.getAttribute("TransTotStk") != null) {
                    if (((Number) r1.getAttribute("TransTotStk")).compareTo(zero) > 0 &&
                        r1.getAttribute("LotId").toString().equals(lotId)) {
                        lotQty = lotQty.add((Number) r1.getAttribute("TransTotStk"));
                    }
                }
            }
            adfLog.info(" lot id   ---" + lotId + "----qty------" + lotQty);
            // Check lot already created or not
            RowQualifier rowQualifier = new RowQualifier(mtlLot);
            rowQualifier.setWhereClause(" DocIdSrc ='" + currItm.getAttribute("DocIdSrc") + "' and ItmId = '" +
                                        currItm.getAttribute("ItmId") + "' and LotId = '" + lotId + "'");
            Row[] rows = mtlLot.getFilteredRows(rowQualifier);
            adfLog.info("" + rowQualifier.getExprStr());
            if (rows.length > 0) {
                for (Row r : rows) {
                    r.setAttribute("ItmQty", lotQty);
                    //  r.setAttribute("IssuQtyBs", lotQty);
                }
            } else {
                Row instLot = mtlLot.createRow();
                instLot.setAttribute("LotId", lotId);
                instLot.setAttribute("ItmQty", lotQty);
                instLot.setAttribute("HoOrgId", HoOrgId);
                instLot.setAttribute("WhId", whId);
                instLot.setAttribute("RqmtAreaId", rqmtArea);

                //instLot.setAttribute("IssuQtyBs",lotQty);
                // instLot.setAttribute("DocDtSrc", currItm.getAttribute("DocDtSrc"));
                mtlLot.insertRow(instLot);
                mtlLot.executeQuery();
            }
        }
        adfLog.info("----------" + lotset);
        if (binRow.length > 0) {
            for (Row rr : binRow) {
                if (rr.getAttribute("TransTotStk") != null) {
                    if (((Number) rr.getAttribute("TransTotStk")).compareTo(zero) >= 0) {
                        adfLog.info("Condition true create sr");

                        // check bin already created or not
                        RowQualifier rowQualifier = new RowQualifier(mtlBin);
                        rowQualifier.setWhereClause(" DocIdSrc ='" + currItm.getAttribute("DocIdSrc") +
                                                    "' and ItmId = '" + currItm.getAttribute("ItmId") +
                                                    "' and LotId = '" + rr.getAttribute("LotId").toString() +
                                                    "' and BinId = '" + rr.getAttribute("BinId").toString() + "'");
                        Row[] rows = mtlBin.getFilteredRows(rowQualifier);
                        adfLog.info("" + rowQualifier.getExprStr());
                        adfLog.info("length   " + rows.length);
                        if (rows.length > 0) {
                            for (Row r : rows) {
                                if (((Number) rr.getAttribute("TransTotStk")).compareTo(zero) == 0) {
                                    adfLog.info("row removed ----------");
                                    r.remove();
                                } else if (((Number) rr.getAttribute("TransTotStk")).compareTo(zero) > 0) {
                                    // Update created bin quantity.
                                    adfLog.info("row update ----------");
                                    r.setAttribute("ItmQty", rr.getAttribute("TransTotStk"));
                                    //   r.setAttribute("IssuQtyBs", rr.getAttribute("TransIssueQty"));
                                }
                            }
                        } else {
                            // if row  not exist create new Bin row  .
                            if (((Number) rr.getAttribute("TransTotStk")).compareTo(zero) > 0) {
                                adfLog.info("row created ----------");
                                Row binInst = mtlBin.createRow();
                                binInst.setAttribute("LotId", rr.getAttribute("LotId"));
                                binInst.setAttribute("BinId", rr.getAttribute("BinId"));
                                binInst.setAttribute("ItmQty", rr.getAttribute("TransTotStk"));
                                binInst.setAttribute("RqmtAreaId", rqmtArea);
                                binInst.setAttribute("WhId", whId);
                                // binInst.setAttribute("IssuQtyBs",rr.getAttribute("TransIssueQty"));
                                //   binInst.setAttribute("DocDtSrc", currItm.getAttribute("DocDtSrc"));
                                mtlBin.insertRow(binInst);
                                mtlBin.executeQuery();
                            }
                        }
                    }
                }
            }
        }

        return null;
    }
    
    public String lotOkInsert(){
        ViewObjectImpl  mtlItm = this.getSvcCmWoItm3();
        ViewObjectImpl mtlLot  = this.getSvcCmWoLot();
        ViewObjectImpl srcVo = this.getSvcCmWoSrc1();
        ViewObjectImpl viewSummSr = this.getLovStkRqmt();
        Row currItm = mtlItm.getCurrentRow();
        Row currSrc = srcVo.getCurrentRow();
        Number zero = new Number(0);
        Row [] srRow = this.getLovStkRqmt().getFilteredRows("ItmId", currItm.getAttribute("ItmId"));
        adfLog.info("lenth sr     "+srRow.length);
  //      adfLog.info("doc date src     "+currItm.getAttribute("DocDtSrc")+" src "+currSrc.getAttribute("DocDtSrc"));
        if(srRow.length>0){
           for(Row rr : srRow){
               if(rr.getAttribute("TransTotStk")!=null){
               if(((Number)rr.getAttribute("TransTotStk")).compareTo(zero) >= 0){
                  // Filter Lot Table to ckeck Lot exist or not Basis of DocId , DocIdSrc , ItmId and LotId
                   RowQualifier rowQualifier =new RowQualifier(mtlLot);
                   rowQualifier.setWhereClause("DocId = '"+currItm.getAttribute("DocId")+"' and DocIdSrc ='"+currItm.getAttribute("DocIdSrc")+"' and ItmId = '"+currItm.getAttribute("ItmId")+"' and LotId = '"+rr.getAttribute("LotId").toString()+"'");
                   Row[] rows=mtlLot.getFilteredRows(rowQualifier);
                   adfLog.info(""+rowQualifier.getExprStr());
                // Check for Lot are exist or not   
                if(rows.length>0){
                // Lot Already created
                       for(Row r : rows){
                           if(((Number)rr.getAttribute("TransTotStk")).compareTo(zero) == 0){
                               // if Exist Check Lot issue Quantity if 0 Remove lot
                               adfLog.info("Lot remove-------------------");
                               r.remove();
                           }else if(((Number)rr.getAttribute("TransTotStk")).compareTo(zero) > 0){
                               // if Exist Check Lot issue Quantity if issue Quantity greater than 0 update Quantity.
                               adfLog.info("Lot Update -------------------");
                             r.setAttribute("ItmQty", rr.getAttribute("TransTotStk"));
                            // r.setAttribute("IssuQtyBs", rr.getAttribute("TransIssuQtyValue"));
                           }
                       }
                   }else{
                    // Lot not Exist 
                   if(((Number)rr.getAttribute("TransTotStk")).compareTo(zero) > 0){
                       // If Issue Quantity greater than 0 Create Lot
                   adfLog.info("Condition true create lot");
                   Row lotInst = mtlLot.createRow();
                   lotInst.setAttribute("LotId", rr.getAttribute("LotId"));
                   lotInst.setAttribute("ItmQty", rr.getAttribute("TransTotStk"));
                   //lotInst.setAttribute("IssuQtyBs",rr.getAttribute("TransIssuQtyValue"));
                //   lotInst.setAttribute("DocDtSrc", currItm.getAttribute("DocDtSrc"));
                   mtlLot.insertRow(lotInst);
                   mtlLot.executeQuery();
               }
                   }
           }
        }
        }
        } 
        return null;
    }
    
    
    public String setLotTransQuantity() {
        Row curr = this.getSvcCmWoItm3().getCurrentRow();
        ViewObjectImpl scrpLot = this.getSvcCmWoLot();
        ViewObjectImpl binvo = this.getSvcCmWoBin1();
        
        if (curr != null) {
            String srflg = curr.getAttribute("TransSrFlg").toString();
            if ("N".equalsIgnoreCase(srflg) && BinChk.equalsIgnoreCase("N")) {
                Row[] filteredRows = scrpLot.getFilteredRows("ItmId", curr.getAttribute("ItmId"));
              // adfLog.info("row found in scrap lot is "+filteredRows.length+" current itm Id "+curr.getAttribute("ItmId"));
                if (filteredRows.length > 0) {
                    for (Row r1 : filteredRows) {
                        String LotId = r1.getAttribute("LotId").toString();
                        String ItmId = r1.getAttribute("ItmId").toString();
                        Number scrpqty = (Number)r1.getAttribute("ItmQty");
                        //adfLog.info("atribute are "+LotId+"  "+ItmId+"  "+scrpqty);
                        RowQualifier rowQualifier = new RowQualifier(this.getLovStkRqmt());
                        rowQualifier.setWhereClause("LotId='" + LotId + "' AND ItmId= '" + ItmId + "'");
                        Row[] filtered =this. getLovStkRqmt().getFilteredRows(rowQualifier);
                        //adfLog.info("row found in lovstklot is "+filtered.length);
                        if (filtered.length > 0) {
                            filtered[0].setAttribute("TransTotStk", scrpqty);
                       //     adfLog.info("lot quantity set for "+filtered[0].getAttribute("LotId")+"Itm id is "+filtered[0].getAttribute("ItmId"));
                        }

                    }
                }
            }
            else if("N".equalsIgnoreCase(srflg) && BinChk.equalsIgnoreCase("Y")){
                Row[] filteredRows = binvo.getFilteredRows("ItmId", curr.getAttribute("ItmId"));
                // adfLog.info("row found in scrap lot is "+filteredRows.length+" current itm Id "+curr.getAttribute("ItmId"));
                if (filteredRows.length > 0) {
                    for (Row r1 : filteredRows) {
                        String LotId = r1.getAttribute("LotId").toString();
                        String ItmId = r1.getAttribute("ItmId").toString();
                        String BinId=r1.getAttribute("BinId").toString();
                        Number scrpqty = (Number)r1.getAttribute("ItmQty");
                        //adfLog.info("atribute are "+LotId+"  "+ItmId+"  "+scrpqty);
                        RowQualifier rowQualifier = new RowQualifier(this.getLovStkRqmtBin());
                        rowQualifier.setWhereClause("LotId='" + LotId + "' AND ItmId= '" + ItmId + "' and BinId='"+BinId+"'");
                        Row[] filtered =this. getLovStkRqmtBin().getFilteredRows(rowQualifier);
                        //adfLog.info("row found in lovstklot is "+filtered.length);
                        if (filtered.length > 0) {
                            filtered[0].setAttribute("TransTotStk", scrpqty);
                       //     adfLog.info("lot quantity set for "+filtered[0].getAttribute("LotId")+"Itm id is "+filtered[0].getAttribute("ItmId"));
                        }

                    }
                }
            }
        }
        return null;
    }
    
    public String setsrQuantity(){
    Row curr = this.getSvcCmWoItm3().getCurrentRow();
    Row curr1=this.getSvcCmWo1().getCurrentRow();
    ViewObjectImpl lovSr=this.getLovStkRqmtSr();
    String docid =curr1.getAttribute("DocId").toString();
    ViewObjectImpl scrpsrvo = this.getSvcCmWoSr1();
        if (curr != null) {
            String srflg = curr.getAttribute("TransSrFlg").toString();
            if("Y".equalsIgnoreCase(srflg)){
              RowQualifier rowQualifier1 = new RowQualifier(scrpsrvo);
              rowQualifier1.setWhereClause("ItmId='"+curr.getAttribute("ItmId")+"' and DocId='"+docid+"'"); 
              Row[] filteredRows = scrpsrvo.getFilteredRows(rowQualifier1); {
                if(filteredRows.length>0){
                    for(Row r1:filteredRows) {
                       String ItmId = r1.getAttribute("ItmId").toString();
                        String LotId = r1.getAttribute("LotId").toString();
                        String BinId = r1.getAttribute("BinId").toString();
                        String srno=r1.getAttribute("SrNo").toString();
                        
                        RowQualifier rowQualifier = new RowQualifier(lovSr);
                        rowQualifier.setWhereClause("LotId='" + LotId + "' AND ItmId= '" + ItmId + "' AND SrNo ='"+ srno +"' and BinId= '"+BinId+"'");
                        Row[] filtered =lovSr.getFilteredRows(rowQualifier);
                        adfLog.info(rowQualifier.getExprStr()+ " filter"+filtered.length);
                    //    System.out.println(rowQualifier.getExprStr()+ " filter"+filtered.length);
                        if(filtered.length>0){
                                filtered[0].setAttribute("TransTotStk", "Y");
                        }
                    }
                }
            }
          }
        } 
        return null;
    }

    public Number chkTotalQuantity(String type) {
        Row curr=this.getSvcCmWo1().getCurrentRow();
        Row currItm = this.getSvcCmWoItm3().getCurrentRow();
        
        if (currItm != null) {
            Number sum = new Number(0);
            
              Integer rqmtArea = new Integer(0);
              String whId = null;
              if (curr.getAttribute("TransReqArea") != null)
                  rqmtArea = (Integer) curr.getAttribute("TransReqArea");
              if (curr.getAttribute("TransWhId") != null)
                  whId = (String) curr.getAttribute("TransWhId");
              
            String docId = currItm.getAttribute("DocId").toString();
            String ItmId = currItm.getAttribute("ItmId").toString();
            Number itmQty = (Number) currItm.getAttribute("ItmQty");
            ViewObjectImpl stkvo = null;
            if ("L".equalsIgnoreCase(type)){
                stkvo = this.getLovStkRqmt();
                stkvo.setNamedWhereClauseParam("bindCldId", CldId);
                stkvo.setNamedWhereClauseParam("bindSlocId", SlocId);
                stkvo.setNamedWhereClauseParam("bindOrgId", OrgId);
                stkvo.setNamedWhereClauseParam("bindRqmtId", rqmtArea);
                stkvo.setNamedWhereClauseParam("bindWhId", whId);
                stkvo.setNamedWhereClauseParam("bindItmId", ItmId);
             //   stkvo.executeQuery();
            }
            else if ("B".equalsIgnoreCase(type)){
                stkvo = this.getLovStkRqmtBin();
                stkvo.setNamedWhereClauseParam("bindCldId", CldId);
                stkvo.setNamedWhereClauseParam("bindSlocId", SlocId);
                stkvo.setNamedWhereClauseParam("bindOrgId", OrgId);
                stkvo.setNamedWhereClauseParam("bindRqmtId", rqmtArea);
                stkvo.setNamedWhereClauseParam("bindWhId", whId);
                stkvo.setNamedWhereClauseParam("bindItmId", ItmId);
              //  stkvo.executeQuery();
                
            }
             
            //  ViewObjectImpl binStk=this.getLovStkRqmtBin();
              
                RowQualifier rq = new RowQualifier(stkvo);
                rq.setWhereClause("ItmId='" + ItmId +"'");
                Row[] rr = stkvo.getFilteredRows(rq);
                adfLog.info(type+" total filter rows found is "+rr.length+"expression found is "+rq.getExprStr());
                if (rr.length > 0) {
                    for (Row r : rr){
                        adfLog.info("total stock value is "+r.getAttribute("TransTotStk"));
                        if(r.getAttribute("TransTotStk")!=null)
                        sum = sum.add((Number) r.getAttribute("TransTotStk"));
                        
                    }
                    
                }
              adfLog.info(sum + "sum and comparison is " + sum.compareTo(itmQty) + " item quantity is " + itmQty);
              
                return sum;
                /* if (sum.compareTo(itmQty) == 0) {
                    return "Y";
                } else if (sum.compareTo(itmQty) == -1 || sum.compareTo(itmQty) == 1) {
                    return "N";
                } */
          }
        return new Number(0);
    }

    public Number chkSerialTotal(){
        Row currItm=this.getSvcCmWoItm3().getCurrentRow();
        Row curr=this.getSvcCmWo1().getCurrentRow();
        String itmId=null;
        Number sum=new Number(0);
        Integer rqmtArea = new Integer(0);
        String whId = null;
        
        if (curr.getAttribute("TransReqArea") != null)
            rqmtArea = (Integer) curr.getAttribute("TransReqArea");
        if (curr.getAttribute("TransWhId") != null)
            whId = (String) curr.getAttribute("TransWhId");
        ViewObjectImpl stkvo=this.getSvcCmWoSr1();
        
        ViewObjectImpl srStk=this.getLovStkRqmtSr();
        srStk.setNamedWhereClauseParam("bindCldId", CldId);
        srStk.setNamedWhereClauseParam("bindSlocId", SlocId);
        srStk.setNamedWhereClauseParam("bindOrgId", OrgId);
        srStk.setNamedWhereClauseParam("bindRqmtId", rqmtArea);
        srStk.setNamedWhereClauseParam("bindWhId", whId);
        srStk.setNamedWhereClauseParam("bindItmId", null);
      //  srStk.executeQuery();
        
        if(currItm.getAttribute("ItmId")!=null)
            itmId=currItm.getAttribute("ItmId").toString();
        
        RowQualifier rq = new RowQualifier(srStk);
        rq.setWhereClause("ItmId='" + itmId + "' and TransTotStk ='Y' ");
        Row[] rr = srStk.getFilteredRows(rq);
        if (rr.length > 0) {
            for (Row r : rr)
                sum = sum.add(new Number(1));
        }
        return sum;
    }


    public String chkTotAvailableStock() {
       if (this.getSvcCmWo1().getCurrentRow() != null) {
            ArrayList ar = new ArrayList();
            Row currSvcRw = this.getSvcCmWo1().getCurrentRow();
            ViewObjectImpl srcvo = this.getSvcCmWoSrc1();
            ViewObjectImpl itmvo = this.getSvcCmWoItm1();/**it need to be change because of all item record use outer referese*/
            ViewObjectImpl lotvo = this.getSvcCmWoLot1();
            /** bin2 and  sr 2  to use because outer vo need to be used (Without viewlink)*/
            ViewObjectImpl binvo = this.getSvcCmWoBin2();
            ViewObjectImpl srvo = this.getSvcCmWoSr2();
            String DocId = null;
            if (currSvcRw.getAttribute("DocId") != null) {
                DocId = currSvcRw.getAttribute("DocId").toString();
            }
            RowQualifier rqsrc = new RowQualifier(srcvo);
            rqsrc.setWhereClause("DocId= '" + DocId + "'");
            Row[] srcRw = srcvo.getFilteredRows(rqsrc);
            adfLog.info(DocId+"  itm src length  "+srcRw.length);
            if (srcRw.length > 0) {
                for (Row SrcRow : srcRw) {
                      String itmIdSrc = null;
                    if (SrcRow.getAttribute("ItmIdSrc") != null) {
                        itmIdSrc = SrcRow.getAttribute("ItmIdSrc").toString();
                    }

                    RowQualifier rq = new RowQualifier(itmvo);
                    rq.setWhereClause("ItmIdSrc='" + itmIdSrc + "' and TransStkblChk='Y' and DocId='"+DocId+"'");
                    Row[] rr = itmvo.getFilteredRows(rq);
                    adfLog.info(itmIdSrc+"  item table length -------- "+rr.length);
                    if (rr.length > 0) {
                        for (Row r : rr) {
                            String itmId = r.getAttribute("ItmId").toString();
                            String srFlg = r.getAttribute("TransSrFlg").toString();
                            Number itmQty = (Number) r.getAttribute("ItmQty");
                            String ItmIdsrc=r.getAttribute("ItmIdSrc").toString();
                            adfLog.info("Total item quantity is ------ "+itmQty);
                            /**
                             * Code to get Item Name
                             */
                            String ItemDesc=null;
                            ViewObjectImpl Lovitmvo = this.getLovItmDesc1();
                            Lovitmvo.setNamedWhereClauseParam("BindCldIdVar", CldId);
                            Lovitmvo.setNamedWhereClauseParam("BindSlocIdVar", SlocId);
                            Lovitmvo.setNamedWhereClauseParam("BindHoOrgId", HoOrgId);
                            Lovitmvo.setNamedWhereClauseParam("BindOrgIdVar", OrgId);
                            Lovitmvo.executeQuery();

                            Row[] itmR = Lovitmvo.getFilteredRows("ItmId", itmId);
                            if(itmR.length>0){
                                ItemDesc=itmR[0].getAttribute("ItmDesc").toString();
                            }
                            /**finish item for lov item name data filter
                             * code to check data inside lot table
                             * */
                            
                            if ("N".equalsIgnoreCase(srFlg)) {
                                if ("N".equalsIgnoreCase(BinChk)) {
                                    Number sum = new Number(0);
                                    RowQualifier rq1 = new RowQualifier(lotvo);
                                    rq1.setWhereClause("ItmId='" + itmId + "' and ItmIdSrc='"+itmIdSrc+"' and DocId='"+DocId+"'");
                                    Row[] rr1 = lotvo.getFilteredRows(rq1);
                                adfLog.info(itmId+"  inside lot  "+rr.length);
                                    if (rr1.length > 0) {
                                        for (Row r2 : rr1) {
                                            sum = sum.add((Number) r2.getAttribute("ItmQty"));
                                            adfLog.info(sum+"  sum value inside  lot");
                                        }
                                        if (sum.compareTo(itmQty) == 0) {
                                           
                                        }else if(sum.compareTo(itmQty) == -1 || sum.compareTo(itmQty) == 1){
                                            ar.add(ItemDesc);
                                        }
                                    }else if(rr1.length == 0){
                                    adfLog.info("no data found in lot table for this item ---- "+ItemDesc);
                                        ar.add(ItemDesc);
                                    }
                                    
                                   // adfLog.info(ar+"  array value inside lot  ");

                                }
                                /** ------------- code to check data in bin table   -----------*/
                                else if ("Y".equalsIgnoreCase(BinChk)) {
                                    Number sum1 = new Number(0);
                                    RowQualifier rq12 = new RowQualifier(binvo);
                                    rq12.setWhereClause("ItmId='" + itmId + "'and ItmIdSrc='"+itmIdSrc+"' and DocId='"+DocId+"'");
                                    Row[] rr12 = binvo.getFilteredRows(rq12);
                                    adfLog.info(itmId+"  inside bin  "+rr12.length +" expression is "+rq12.getExprStr());
                                    
                                    if (rr12.length > 0) {
                                        for (Row r2 : rr12) {
                                            sum1 = sum1.add((Number) r2.getAttribute("ItmQty"));
                                            adfLog.info(sum1+"  sum value inside  bin");
                                        }
                                        
                                        if (sum1.compareTo(itmQty) == 0) {
                                           // ar.add(itmId);
                                        }else if(sum1.compareTo(itmQty) == -1 || sum1.compareTo(itmQty) == 1){
                                            ar.add(ItemDesc);
                                        }
                                    }else if(rr12.length == 0){
                                        ar.add(ItemDesc);
                                        adfLog.info("no data found in bin table for this item ---- "+ItemDesc);
                                    }
                                   
                                    adfLog.info(ar+"  array value inside bin  ");
                                }
                            }
                            /**------------- code to check data in serial table -------------- */
                            else if ("Y".equalsIgnoreCase(srFlg)) {
                                Number sum1 = new Number(0);
                                RowQualifier rq12 = new RowQualifier(srvo);
                                rq12.setWhereClause("ItmId='" + itmId + "'and ItmIdSrc='"+itmIdSrc+"' and DocId='"+DocId+"'");
                                Row[] rr12 = srvo.getFilteredRows(rq12);
                                adfLog.info(itmId+"  inside Serialized  "+rr12.length+" expression is "+rq12.getExprStr());
                                if (rr12.length > 0) {
                                    for (Row r2 : rr12) {
                                        adfLog.info(itmId+"  inside Serialized  "+r2.getAttribute("SrNo"));
                                        sum1 = sum1.add(new Number(1));
                                        adfLog.info(sum1+"  sum value inside  serial");
                                    }
                                    if (sum1.compareTo(itmQty) == 0) {
                                      //  ar.add(itmId);
                                    }else if(sum1.compareTo(itmQty) == -1 || sum1.compareTo(itmQty) == 1){
                                            ar.add(ItemDesc);
                                        }
                                }else if(rr12.length == 0){
                                    ar.add(ItemDesc);
                                    adfLog.info("no data found in Serial table for this item ---- "+ItemDesc);
                                }
                                
                            }
                           
                            //return ar;
                        }
                    }
                }
            }
            adfLog.info(ar+"  over all array  ");
            
            if(ar.isEmpty()){
                return "Y";
            }else{
                String msg="These items don't have proper Stock"+ar;
                showFacesMessage(msg, "W", false, "F", null);
                return "N";
            }
        }
        
        return null;
    }


    public String updtStock(){
        Row currIssu = this.getSvcCmWo1().getCurrentRow();
        Integer retVal = null;
         this.getDBTransaction().postChanges();
        retVal = Integer.parseInt(callStoredFunction(Types.NUMERIC, "SVC.SVC_UPDT_RQMT_STK (?,?,?,?,?,?,?,?,?,?)", new Object[] {CldId,SlocId,OrgId,currIssu.getAttribute("TransWhId").toString(),currIssu.getAttribute("TransReqArea"), 
                                                                                                                                            23001, currIssu.getAttribute("DocId").toString(),currIssu.getAttribute("FyId").toString(),usrId,"I"
                                                                                                                                        }).toString());
        // }
        if(retVal==1){
          /*  this.getSvcCmWoLot().executeQuery();
          this.getSvcCmWoLot1().executeQuery();
          if("Y".equalsIgnoreCase(binChkFlg)){
          this.getSvcCmWoBin1().executeQuery();
          this.getSvcCmWoBin2().executeQuery();
          }
          this.getSvcCmWoSr1().executeQuery();
          this.getSvcCmWoSr2().executeQuery(); */
        }
        adfLog.info("return value from function ----    "+retVal); 
        
        return null;
    }
   /** Code to Insertion in lot Table  Only**/
    public String lotInsrtAction() {
        ViewObjectImpl stkvo = this.getLovStkRqmt();
        Row curr = this.getSvcCmWo1().getCurrentRow();
        Row currItm = this.getSvcCmWoItm3().getCurrentRow();
        Row currItmSrc = this.getSvcCmWoSrc1().getCurrentRow();
        if (curr != null && currItmSrc != null && currItm != null) {
            String DocId = currItmSrc.getAttribute("DocId").toString();
            String DocIdSrc = currItmSrc.getAttribute("DocIdSrc").toString();
            String ItmIdSrc = currItmSrc.getAttribute("ItmIdSrc").toString();
            Integer DfctIdSrc = Integer.parseInt(currItmSrc.getAttribute("DfctIdSrc").toString());
            Integer RqmtId = Integer.parseInt(curr.getAttribute("TransReqArea").toString());
            String WhId = curr.getAttribute("TransWhId").toString();
            String ItmId = currItm.getAttribute("ItmId").toString();

            Number zero = new Number(0);
            RowSetIterator itr = stkvo.createRowSetIterator(null);
            while (itr.hasNext()) {
                Row r = itr.next();
                Number ItmQty = null;
                if (r.getAttribute("TransTotStk") != null) {
                    ItmQty = (Number) r.getAttribute("TransTotStk");
                }
                if (ItmQty.compareTo(zero) == 1) {
                    String LotId = r.getAttribute("LotId").toString();
                    allIsrtStk(DocId, RqmtId, DocIdSrc, ItmIdSrc, DfctIdSrc, WhId, ItmId, LotId, null, null, ItmQty,
                               "I", "N");
                }
            }
        }
        return null;
    }


    public String binInsrtAction() {
        ViewObjectImpl stkvo = this.getLovStkRqmtBin();
        Row curr = this.getSvcCmWo1().getCurrentRow();
        Row currItm = this.getSvcCmWoItm3().getCurrentRow();
        Row currItmSrc = this.getSvcCmWoSrc1().getCurrentRow();
        if (curr != null && currItmSrc != null && currItm != null) {
            String DocId = currItmSrc.getAttribute("DocId").toString();
            String DocIdSrc = currItmSrc.getAttribute("DocIdSrc").toString();
            String ItmIdSrc = currItmSrc.getAttribute("ItmIdSrc").toString();
            Integer DfctIdSrc = Integer.parseInt(currItmSrc.getAttribute("DfctIdSrc").toString());
            Integer RqmtId = Integer.parseInt(curr.getAttribute("TransReqArea").toString());
            String WhId = curr.getAttribute("TransWhId").toString();
            String ItmId = currItm.getAttribute("ItmId").toString();

            Number zero = new Number(0);
            RowSetIterator itr = stkvo.createRowSetIterator(null);
            while (itr.hasNext()) {
                Row r = itr.next();
                Number ItmQty = null;
                if (r.getAttribute("TransTotStk") != null) {
                    ItmQty = (Number) r.getAttribute("TransTotStk");
                }
                if (ItmQty.compareTo(zero) == 1) {
                    String LotId = r.getAttribute("LotId").toString();
                    String BinId = r.getAttribute("BinId").toString();
                    allIsrtStk(DocId, RqmtId, DocIdSrc, ItmIdSrc, DfctIdSrc, WhId, ItmId, LotId, BinId, null, ItmQty,
                               "I", "N");
                }
            }
        }
        return null;
    }

    public String srInsrtAction() {
        ViewObjectImpl stkvo = this.getLovStkRqmtSr();
        Row curr = this.getSvcCmWo1().getCurrentRow();
        Row currItm = this.getSvcCmWoItm3().getCurrentRow();
        Row currItmSrc = this.getSvcCmWoSrc1().getCurrentRow();
        if (curr != null && currItmSrc != null && currItm != null) {
            String DocId = currItmSrc.getAttribute("DocId").toString();
            String DocIdSrc = currItmSrc.getAttribute("DocIdSrc").toString();
            String ItmIdSrc = currItmSrc.getAttribute("ItmIdSrc").toString();
            Integer DfctIdSrc = Integer.parseInt(currItmSrc.getAttribute("DfctIdSrc").toString());
            Integer RqmtId = Integer.parseInt(curr.getAttribute("TransReqArea").toString());
            String WhId = curr.getAttribute("TransWhId").toString();
            String ItmId = currItm.getAttribute("ItmId").toString();

            Number zero = new Number(0);
            RowSetIterator itr = stkvo.createRowSetIterator(null);
            while (itr.hasNext()) {
                Row r = itr.next();
                String ItmQty = null;
                 if (r.getAttribute("TransTotStk") != null) {
                    ItmQty = r.getAttribute("TransTotStk").toString();
                } 
                adfLog.info(" item serialized value flag is "+ItmQty);
                if(r.getAttribute("TransTotStk") != null){
                if (ItmQty.equalsIgnoreCase("Y") || ItmQty.equalsIgnoreCase("true")) {
                    String LotId = r.getAttribute("LotId").toString();
                    String BinId = r.getAttribute("BinId").toString();
                    String srNo=r.getAttribute("SrNo").toString();
                    allIsrtStk(DocId, RqmtId, DocIdSrc, ItmIdSrc, DfctIdSrc, WhId, ItmId, LotId, BinId, srNo, new Number(1),
                               "I", "Y");
                }
            }
            }
        }
        return null;
    }

    public String lotReturnStk() {
        ViewObjectImpl stkvo = this.getLovSvcRtrnWoLot();
            Row curr = this.getSvcCmWo1().getCurrentRow();
        Row currItm = this.getSvcCmWoItm3().getCurrentRow();
        Row currItmSrc = this.getSvcCmWoSrc1().getCurrentRow();
        if (curr != null && currItmSrc != null && currItm != null) {
            String DocId = currItmSrc.getAttribute("DocId").toString();
            String DocIdSrc = currItmSrc.getAttribute("DocIdSrc").toString();
            String ItmIdSrc = currItmSrc.getAttribute("ItmIdSrc").toString();
            Integer DfctIdSrc = Integer.parseInt(currItmSrc.getAttribute("DfctIdSrc").toString());
            Integer RqmtId = Integer.parseInt(curr.getAttribute("TransReqArea").toString());
            String WhId = curr.getAttribute("TransWhId").toString();
            String ItmId = currItm.getAttribute("ItmId").toString();

            Number zero = new Number(0);
            RowSetIterator itr = stkvo.createRowSetIterator(null);
            while (itr.hasNext()) {
                Row r = itr.next();
                Number ItmQty = null;
                if (r.getAttribute("TransTotStk") != null) {
                    ItmQty = (Number) r.getAttribute("TransTotStk");
                }
                if (ItmQty.compareTo(zero) == 1) {
                    String LotId = r.getAttribute("LotId").toString();
                    allIsrtStk(DocId, RqmtId, DocIdSrc, ItmIdSrc, DfctIdSrc, WhId, ItmId, LotId, null, null, ItmQty,
                               "R", "N");
                }
            }
        }
        return null;
    }
    public String binRtrnAction() {
        ViewObjectImpl stkvo = this.getLovSvcRtrnWoBin();
        Row curr = this.getSvcCmWo1().getCurrentRow();
        Row currItm = this.getSvcCmWoItm3().getCurrentRow();
        Row currItmSrc = this.getSvcCmWoSrc1().getCurrentRow();
        if (curr != null && currItmSrc != null && currItm != null) {
            String DocId = currItmSrc.getAttribute("DocId").toString();
            String DocIdSrc = currItmSrc.getAttribute("DocIdSrc").toString();
            String ItmIdSrc = currItmSrc.getAttribute("ItmIdSrc").toString();
            Integer DfctIdSrc = Integer.parseInt(currItmSrc.getAttribute("DfctIdSrc").toString());
            Integer RqmtId = Integer.parseInt(curr.getAttribute("TransReqArea").toString());
            String WhId = curr.getAttribute("TransWhId").toString();
            String ItmId = currItm.getAttribute("ItmId").toString();

            Number zero = new Number(0);
            RowSetIterator itr = stkvo.createRowSetIterator(null);
            while (itr.hasNext()) {
                Row r = itr.next();
                Number ItmQty = null;
                if (r.getAttribute("TransTotStk") != null) {
                    ItmQty = (Number) r.getAttribute("TransTotStk");
                }
                adfLog.info( r.getAttribute("TransTotStk")+"  bin itm Stock value is "+ItmQty);
                if (ItmQty!=null && ItmQty.compareTo(zero) == 1) {
                    String LotId = r.getAttribute("LotId").toString();
                    String BinId = r.getAttribute("BinId").toString();
                    allIsrtStk(DocId, RqmtId, DocIdSrc, ItmIdSrc, DfctIdSrc, WhId, ItmId, LotId, BinId, null, ItmQty,
                               "R", "N");
                }
            }
        }
        return null;
    }
    

    public String srRtrnAction() {
        ViewObjectImpl stkvo = this.getLovSvcRtrnSr();
        Row curr = this.getSvcCmWo1().getCurrentRow();
        Row currItm = this.getSvcCmWoItm3().getCurrentRow();
        Row currItmSrc = this.getSvcCmWoSrc1().getCurrentRow();
        if (curr != null && currItmSrc != null && currItm != null) {
            String DocId = currItmSrc.getAttribute("DocId").toString();
            String DocIdSrc = currItmSrc.getAttribute("DocIdSrc").toString();
            String ItmIdSrc = currItmSrc.getAttribute("ItmIdSrc").toString();
            Integer DfctIdSrc = Integer.parseInt(currItmSrc.getAttribute("DfctIdSrc").toString());
            Integer RqmtId = Integer.parseInt(curr.getAttribute("TransReqArea").toString());
            String WhId = curr.getAttribute("TransWhId").toString();
            String ItmId = currItm.getAttribute("ItmId").toString();

            Number zero = new Number(0);
            RowSetIterator itr = stkvo.createRowSetIterator(null);
            while (itr.hasNext()) {
                Row r = itr.next();
                String ItmQty = null;
                 if (r.getAttribute("TotalQty") != null) {
                    ItmQty = r.getAttribute("TotalQty").toString();
                } 
                adfLog.info( r.getAttribute("TotalQty")+" item serialized value flag is "+ItmQty);
                if(r.getAttribute("TotalQty") != null){
                if (ItmQty.equalsIgnoreCase("Y") || ItmQty.equalsIgnoreCase("true")) {
                    String LotId = r.getAttribute("LotId").toString();
                    String BinId = r.getAttribute("BinId").toString();
                    String srNo=r.getAttribute("SrNo").toString();
                    allIsrtStk(DocId, RqmtId, DocIdSrc, ItmIdSrc, DfctIdSrc, WhId, ItmId, LotId, BinId, srNo, new Number(1),
                               "R", "Y");
                }
            }
            }
        }
        return null;
    }

    /**
     * docId for
     * Issue Type R for Return
     * Issue Type I for Issue
     */
    public String allIsrtStk(String DocId, Integer RqmtId, String DocIdSrc, String ItmIdSrc, Integer DfctIdSrc,
                                 String WhId, String ItmId, String LotId, String BinId, String Srno, Number Qty,
                                 String IssueType, String SrChk) {
       Object obj=null;
        if (BinChk.equalsIgnoreCase("Y") && SrChk == "Y") {

            obj = callStoredFunction(NUMBER, "SVC.SVC_WO_ISSU_RTN(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                            CldId, SlocId, HoOrgId, OrgId, DocId, RqmtId, DocIdSrc, ItmIdSrc, DfctIdSrc,
                                            WhId, ItmId, LotId, BinId, Srno, Qty,usrId,IssueType
            });
        } else if (BinChk.equalsIgnoreCase("N") && SrChk == "Y") {
           obj = callStoredFunction(NUMBER, "SVC.SVC_WO_ISSU_RTN(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                            CldId, SlocId, HoOrgId, OrgId, DocId, RqmtId, DocIdSrc, ItmIdSrc, DfctIdSrc,
                                            WhId, ItmId, LotId, 0, Srno, Qty,usrId, IssueType
            });

        } else if (BinChk.equalsIgnoreCase("Y") && SrChk == "N") {
            obj = callStoredFunction(NUMBER, "SVC.SVC_WO_ISSU_RTN(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                            CldId, SlocId, HoOrgId, OrgId, DocId, RqmtId, DocIdSrc, ItmIdSrc, DfctIdSrc,
                                            WhId, ItmId, LotId, BinId, null, Qty,usrId, IssueType
            });

        } else if (BinChk.equalsIgnoreCase("N") && SrChk == "N") {
            obj = callStoredFunction(NUMBER, "SVC.SVC_WO_ISSU_RTN(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                            CldId, SlocId, HoOrgId, OrgId, DocId, RqmtId, DocIdSrc, ItmIdSrc, DfctIdSrc,
                                            WhId, ItmId, LotId, null, null, Qty,usrId, IssueType
            });

        }
        adfLog.info("function update value is return "+obj);
        this.getSvcCmWoLot().executeQuery();
        this.getSvcCmWoBin1().executeQuery();
        this.getSvcCmWoSr1().executeQuery();
        
        return null;
    }
    
    /**
     * Container's getter for LovUsrId1.
     * @return LovUsrId1
     */
    public ViewObjectImpl getLovUsrId() {
        return (ViewObjectImpl) findViewObject("LovUsrId");
    }

    /**
     * Container's getter for TcktNoView1.
     * @return TcktNoView1
     */
    public ViewObjectImpl getTcktNoView() {
        return (ViewObjectImpl) findViewObject("TcktNoView");
    }

    /**
     * Container's getter for LovCoaId1.
     * @return LovCoaId1
     */
    public ViewObjectImpl getLovCoaId() {
        return (ViewObjectImpl) findViewObject("LovCoaId");
    }

    /**
     * Container's getter for LovStkRqmt1.
     * @return LovStkRqmt1
     */
    public ViewObjectImpl getLovStkRqmt() {
        return (ViewObjectImpl) findViewObject("LovStkRqmt");
    }

    /**
     * Container's getter for LovStkRqmtSr1.
     * @return LovStkRqmtSr1
     */
    public ViewObjectImpl getLovStkRqmtSr() {
        return (ViewObjectImpl) findViewObject("LovStkRqmtSr");
    }

    /**
     * Container's getter for LovStkRqmtBin1.
     * @return LovStkRqmtBin1
     */
    public ViewObjectImpl getLovStkRqmtBin() {
        return (ViewObjectImpl) findViewObject("LovStkRqmtBin");
    }

    /**
     * Container's getter for LovWhId1.
     * @return LovWhId1
     */
    public ViewObjectImpl getLovWhId() {
        return (ViewObjectImpl) findViewObject("LovWhId");
    }

    /**
     * Container's getter for SvcCmWoLot1.
     * @return SvcCmWoLot1
     */
    public ViewObjectImpl getSvcCmWoLot() {
        return (ViewObjectImpl) findViewObject("SvcCmWoLot");
    }

    /**
     * Container's getter for SvcCmWoItmTOSvcCmWoLotVL1.
     * @return SvcCmWoItmTOSvcCmWoLotVL1
     */
    public ViewLinkImpl getSvcCmWoItmTOSvcCmWoLotVL1() {
        return (ViewLinkImpl) findViewLink("SvcCmWoItmTOSvcCmWoLotVL1");
    }


    /**
     * Container's getter for SvcCmWoSr1.
     * @return SvcCmWoSr1
     */
    public ViewObjectImpl getSvcCmWoSr() {
        return (ViewObjectImpl) findViewObject("SvcCmWoSr");
    }

    /**
     * Container's getter for SvcCmWoLotTOSvcCmSrVL1.
     * @return SvcCmWoLotTOSvcCmSrVL1
     */
    public ViewLinkImpl getSvcCmWoLotTOSvcCmSrVL1() {
        return (ViewLinkImpl) findViewLink("SvcCmWoLotTOSvcCmSrVL1");
    }


    /**
     * Container's getter for SvcCmWoBin1.
     * @return SvcCmWoBin1
     */
    public ViewObjectImpl getSvcCmWoBin() {
        return (ViewObjectImpl) findViewObject("SvcCmWoBin");
    }

    /**
     * Container's getter for SvcCmWoLotToSvcCmWoBinVL1.
     * @return SvcCmWoLotToSvcCmWoBinVL1
     */
    public ViewLinkImpl getSvcCmWoLotToSvcCmWoBinVL1() {
        return (ViewLinkImpl) findViewLink("SvcCmWoLotToSvcCmWoBinVL1");
    }

    /**
     * Container's getter for SvcCmWoBin1.
     * @return SvcCmWoBin1
     */
    public ViewObjectImpl getSvcCmWoBin1() {
        return (ViewObjectImpl) findViewObject("SvcCmWoBin1");
    }

    /**
     * Container's getter for ItemToBinVL1.
     * @return ItemToBinVL1
     */
    public ViewLinkImpl getItemToBinVL1() {
        return (ViewLinkImpl) findViewLink("ItemToBinVL1");
    }


    /**
     * Container's getter for SvcCmWoSr1.
     * @return SvcCmWoSr1
     */
    public ViewObjectImpl getSvcCmWoSr1() {
        return (ViewObjectImpl) findViewObject("SvcCmWoSr1");
    }

    /**
     * Container's getter for ItmToSrVL1.
     * @return ItmToSrVL1
     */
    public ViewLinkImpl getItmToSrVL1() {
        return (ViewLinkImpl) findViewLink("ItmToSrVL1");
    }

    /**
     * Container's getter for LovStkRqmtBin1.
     * @return LovStkRqmtBin1
     */
    public ViewObjectImpl getLovStkRqmtBin1() {
        return (ViewObjectImpl) findViewObject("LovStkRqmtBin1");
    }

    /**
     * Container's getter for LovStkRqmt1.
     * @return LovStkRqmt1
     */
    public ViewObjectImpl getLovStkRqmt1() {
        return (ViewObjectImpl) findViewObject("LovStkRqmt1");
    }

    /**
     * Container's getter for LovStkRqmtSr1.
     * @return LovStkRqmtSr1
     */
    public ViewObjectImpl getLovStkRqmtSr1() {
        return (ViewObjectImpl) findViewObject("LovStkRqmtSr1");
    }

    /**
     * Container's getter for SvcCmWoBin2.
     * @return SvcCmWoBin2
     */
    public ViewObjectImpl getSvcCmWoBin2() {
        return (ViewObjectImpl) findViewObject("SvcCmWoBin2");
    }

    /**
     * Container's getter for SvcCmWoSr2.
     * @return SvcCmWoSr2
     */
    public ViewObjectImpl getSvcCmWoSr2() {
        return (ViewObjectImpl) findViewObject("SvcCmWoSr2");
    }

    /**
     * Container's getter for SvcCmWoLot1.
     * @return SvcCmWoLot1
     */
    public ViewObjectImpl getSvcCmWoLot1() {
        return (ViewObjectImpl) findViewObject("SvcCmWoLot1");
    }

    /**
     * Container's getter for LovSvcRtrnWoLot1.
     * @return LovSvcRtrnWoLot1
     */
    public ViewObjectImpl getLovSvcRtrnWoLot() {
        return (ViewObjectImpl) findViewObject("LovSvcRtrnWoLot");
    }

    /**
     * Container's getter for LovSvcRtrnWoBin1.
     * @return LovSvcRtrnWoBin1
     */
    public ViewObjectImpl getLovSvcRtrnWoBin() {
        return (ViewObjectImpl) findViewObject("LovSvcRtrnWoBin");
    }

    /**
     * Container's getter for LovSvcRtrnSr1.
     * @return LovSvcRtrnSr1
     */
    public ViewObjectImpl getLovSvcRtrnSr() {
        return (ViewObjectImpl) findViewObject("LovSvcRtrnSr");
    }


    public ArrayList<String> getTo() {
        Row curr = this.getSvcCmWo1().getCurrentRow();
        ArrayList<String> al = new ArrayList<>();
        adfLog.info("mail sent to customer id is ---- "+curr.getAttribute("TransEoId"));
        try{
        if (curr.getAttribute("TransEoId") != null) {
            RowQualifier rowQualifier = new RowQualifier(this.getLovEoId1());
            rowQualifier.setWhereClause("EoId =" + curr.getAttribute("TransEoId"));
            Row[] rows = this.getLovEoId1().getFilteredRows(rowQualifier);
            if (rows.length > 0 && rows[0].getAttribute("EmailId") != null)
                al.add(rows[0].getAttribute("EmailId").toString());
            else
                throw new NullPointerException("Customer Email Id not configured correctly");
        }
        adfLog.info("array list ------------- mail sent "+al);
        return al;
        }catch(Exception e){
            e.printStackTrace();
            return null;
        }
    }

    /**
     * Container's getter for ViewSerialCM1.
     * @return ViewSerialCM1
     */
    public ViewObjectImpl getViewSerialCM() {
        return (ViewObjectImpl) findViewObject("ViewSerialCM");
    }
    
    public void serializedItemView(){
        String cmDocId = (String)this.getSvcCmWoSrc1().getCurrentRow().getAttribute("DocIdSrc");
        String itmId = (String)this.getSvcCmWoSrc1().getCurrentRow().getAttribute("ItmIdSrc");
        //Integer dfctId = (Integer)this.getSvcCmWoSrc1().getCurrentRow().getAttribute("DfctIdSrc");
        ViewObjectImpl srVo = this.getViewSerialCM();
        srVo.setNamedWhereClauseParam("BindCldId",CldId);
        srVo.setNamedWhereClauseParam("BindSlocId",SlocId);
        srVo.setNamedWhereClauseParam("BindOrgId",OrgId);
        srVo.setNamedWhereClauseParam("BindHoOrgId",HoOrgId);
        srVo.setNamedWhereClauseParam("BindCMDocId",cmDocId);
        srVo.setNamedWhereClauseParam("BindItmId",itmId);
        //srVo.setNamedWhereClauseParam("BindDfctId", dfctId);
        srVo.executeQuery();
        adfLog.info("parameter are---"+cmDocId+"  "+itmId+"  ");
    }
}


