package svcworkorderapp.model.views;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Timestamp;

import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.RowSet;
import oracle.jbo.domain.NClobDomain;
import oracle.jbo.domain.Number;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewRowImpl;

import svcworkorderapp.model.entities.SvcCmWoEOImpl;
import svcworkorderapp.model.services.SVCWorkOrderAMImpl;
import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun Oct 19 11:05:18 PDT 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SvcCmWoVORowImpl extends ViewRowImpl {


    public static final int ENTITY_SVCCMWOEO = 0;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CldId,
        SlocId,
        HoOrgId,
        OrgId,
        DocId,
        DocDt,
        FyId,
        DocType,
        DocNo,
        DocIdCm,
        DocStat,
        AuthStat,
        DispToCust,
        CustDispDt,
        CustAuthDt,
        TaxAfterDiscFlg,
        DiscType,
        DiscVal,
        DiscAmtSp,
        TaxAmtSp,
        TotAmtSp,
        DiscAmtBs,
        TaxAmtBs,
        TotAmtBs,
        UsrIdCrt,
        CrtDt,
        UsrIdMod,
        ModDt,
        TransCustNm,
        TransEoId,
        TransDocIdCm,
        CurrConvFctr,
        CurrIdSp,
        TransTcktNm,
        TransCurrIdSp,
        TransCustNm1,
        TransSumItmAmt,
        TransSumTaxAmt,
        TransSumDiscAmt,
        TransSumItemPrice,
        TransSumItmAmtBs,
        TransTotAmtSp,
        TransReqArea,
        TransEmpNm,
        TransEmpCode,
        WorkComplete,
        CcIdTrans,
        TransCoaNm,
        TransCoaId,
        TransOcDesc,
        TransTotAmt,
        TransOcTtlAmt,
        TransOcAmt,
        TransWhId,
        SvcCmWoItm,
        SvcCmWoOc,
        SvcCmWoItm1,
        SvcCmWoOc1,
        SvcCmWoAsgn,
        SvcCmWoSrc,
        LovDocTypeVO1,
        LovOrgIdVO1,
        LovCustomerNmVO1,
        LovDocIdCmVO1,
        LovUsrIdVO1,
        LovWoStatusVO1,
        LovCurrencyVO1,
        LovEoIdVO1,
        LovEmpNameVO1,
        LovReqtAreaVO1,
        LovCoaIdVO,
        LocOcDescVO,
        LovWhIdVO;
        static AttributesEnum[] vals = null;
        ;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    private static ADFLogger adfLog = (ADFLogger)ADFLogger.createADFLogger(SvcCmWoVORowImpl.class);


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int DOCDT = AttributesEnum.DocDt.index();
    public static final int FYID = AttributesEnum.FyId.index();
    public static final int DOCTYPE = AttributesEnum.DocType.index();
    public static final int DOCNO = AttributesEnum.DocNo.index();
    public static final int DOCIDCM = AttributesEnum.DocIdCm.index();
    public static final int DOCSTAT = AttributesEnum.DocStat.index();
    public static final int AUTHSTAT = AttributesEnum.AuthStat.index();
    public static final int DISPTOCUST = AttributesEnum.DispToCust.index();
    public static final int CUSTDISPDT = AttributesEnum.CustDispDt.index();
    public static final int CUSTAUTHDT = AttributesEnum.CustAuthDt.index();
    public static final int TAXAFTERDISCFLG = AttributesEnum.TaxAfterDiscFlg.index();
    public static final int DISCTYPE = AttributesEnum.DiscType.index();
    public static final int DISCVAL = AttributesEnum.DiscVal.index();
    public static final int DISCAMTSP = AttributesEnum.DiscAmtSp.index();
    public static final int TAXAMTSP = AttributesEnum.TaxAmtSp.index();
    public static final int TOTAMTSP = AttributesEnum.TotAmtSp.index();
    public static final int DISCAMTBS = AttributesEnum.DiscAmtBs.index();
    public static final int TAXAMTBS = AttributesEnum.TaxAmtBs.index();
    public static final int TOTAMTBS = AttributesEnum.TotAmtBs.index();
    public static final int USRIDCRT = AttributesEnum.UsrIdCrt.index();
    public static final int CRTDT = AttributesEnum.CrtDt.index();
    public static final int USRIDMOD = AttributesEnum.UsrIdMod.index();
    public static final int MODDT = AttributesEnum.ModDt.index();
    public static final int TRANSCUSTNM = AttributesEnum.TransCustNm.index();
    public static final int TRANSEOID = AttributesEnum.TransEoId.index();
    public static final int TRANSDOCIDCM = AttributesEnum.TransDocIdCm.index();
    public static final int CURRCONVFCTR = AttributesEnum.CurrConvFctr.index();
    public static final int CURRIDSP = AttributesEnum.CurrIdSp.index();
    public static final int TRANSTCKTNM = AttributesEnum.TransTcktNm.index();
    public static final int TRANSCURRIDSP = AttributesEnum.TransCurrIdSp.index();
    public static final int TRANSCUSTNM1 = AttributesEnum.TransCustNm1.index();
    public static final int TRANSSUMITMAMT = AttributesEnum.TransSumItmAmt.index();
    public static final int TRANSSUMTAXAMT = AttributesEnum.TransSumTaxAmt.index();
    public static final int TRANSSUMDISCAMT = AttributesEnum.TransSumDiscAmt.index();
    public static final int TRANSSUMITEMPRICE = AttributesEnum.TransSumItemPrice.index();
    public static final int TRANSSUMITMAMTBS = AttributesEnum.TransSumItmAmtBs.index();
    public static final int TRANSTOTAMTSP = AttributesEnum.TransTotAmtSp.index();
    public static final int TRANSREQAREA = AttributesEnum.TransReqArea.index();
    public static final int TRANSEMPNM = AttributesEnum.TransEmpNm.index();
    public static final int TRANSEMPCODE = AttributesEnum.TransEmpCode.index();
    public static final int WORKCOMPLETE = AttributesEnum.WorkComplete.index();
    public static final int CCIDTRANS = AttributesEnum.CcIdTrans.index();
    public static final int TRANSCOANM = AttributesEnum.TransCoaNm.index();
    public static final int TRANSCOAID = AttributesEnum.TransCoaId.index();
    public static final int TRANSOCDESC = AttributesEnum.TransOcDesc.index();
    public static final int TRANSTOTAMT = AttributesEnum.TransTotAmt.index();
    public static final int TRANSOCTTLAMT = AttributesEnum.TransOcTtlAmt.index();
    public static final int TRANSOCAMT = AttributesEnum.TransOcAmt.index();
    public static final int TRANSWHID = AttributesEnum.TransWhId.index();
    public static final int SVCCMWOITM = AttributesEnum.SvcCmWoItm.index();
    public static final int SVCCMWOOC = AttributesEnum.SvcCmWoOc.index();
    public static final int SVCCMWOITM1 = AttributesEnum.SvcCmWoItm1.index();
    public static final int SVCCMWOOC1 = AttributesEnum.SvcCmWoOc1.index();
    public static final int SVCCMWOASGN = AttributesEnum.SvcCmWoAsgn.index();
    public static final int SVCCMWOSRC = AttributesEnum.SvcCmWoSrc.index();
    public static final int LOVDOCTYPEVO1 = AttributesEnum.LovDocTypeVO1.index();
    public static final int LOVORGIDVO1 = AttributesEnum.LovOrgIdVO1.index();
    public static final int LOVCUSTOMERNMVO1 = AttributesEnum.LovCustomerNmVO1.index();
    public static final int LOVDOCIDCMVO1 = AttributesEnum.LovDocIdCmVO1.index();
    public static final int LOVUSRIDVO1 = AttributesEnum.LovUsrIdVO1.index();
    public static final int LOVWOSTATUSVO1 = AttributesEnum.LovWoStatusVO1.index();
    public static final int LOVCURRENCYVO1 = AttributesEnum.LovCurrencyVO1.index();
    public static final int LOVEOIDVO1 = AttributesEnum.LovEoIdVO1.index();
    public static final int LOVEMPNAMEVO1 = AttributesEnum.LovEmpNameVO1.index();
    public static final int LOVREQTAREAVO1 = AttributesEnum.LovReqtAreaVO1.index();
    public static final int LOVCOAIDVO = AttributesEnum.LovCoaIdVO.index();
    public static final int LOCOCDESCVO = AttributesEnum.LocOcDescVO.index();
    public static final int LOVWHIDVO = AttributesEnum.LovWhIdVO.index();

    /**
     * This is the default constructor (do not remove).
     */
    public SvcCmWoVORowImpl() {
    }

    /**
     * Gets SvcCmWoEO entity object.
     * @return the SvcCmWoEO
     */
    public SvcCmWoEOImpl getSvcCmWoEO() {
        return (SvcCmWoEOImpl) getEntity(ENTITY_SVCCMWOEO);
    }

    /**
     * Gets the attribute value for CLD_ID using the alias name CldId.
     * @return the CLD_ID
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as attribute value for CLD_ID using the alias name CldId.
     * @param value value to set the CLD_ID
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for SLOC_ID using the alias name SlocId.
     * @return the SLOC_ID
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for SLOC_ID using the alias name SlocId.
     * @param value value to set the SLOC_ID
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for HO_ORG_ID using the alias name HoOrgId.
     * @return the HO_ORG_ID
     */
    public String getHoOrgId() {
        return (String) getAttributeInternal(HOORGID);
    }

    /**
     * Sets <code>value</code> as attribute value for HO_ORG_ID using the alias name HoOrgId.
     * @param value value to set the HO_ORG_ID
     */
    public void setHoOrgId(String value) {
        setAttributeInternal(HOORGID, value);
    }

    /**
     * Gets the attribute value for ORG_ID using the alias name OrgId.
     * @return the ORG_ID
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as attribute value for ORG_ID using the alias name OrgId.
     * @param value value to set the ORG_ID
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for DOC_ID using the alias name DocId.
     * @return the DOC_ID
     */
    public String getDocId() {
        return (String) getAttributeInternal(DOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for DOC_ID using the alias name DocId.
     * @param value value to set the DOC_ID
     */
    public void setDocId(String value) {
        setAttributeInternal(DOCID, value);
    }

    /**
     * Gets the attribute value for DOC_DT using the alias name DocDt.
     * @return the DOC_DT
     */
    public Timestamp getDocDt() {
        return (Timestamp) getAttributeInternal(DOCDT);
    }

    /**
     * Sets <code>value</code> as attribute value for DOC_DT using the alias name DocDt.
     * @param value value to set the DOC_DT
     */
    public void setDocDt(Timestamp value) {
        setAttributeInternal(DOCDT, value);
    }

    /**
     * Gets the attribute value for FY_ID using the alias name FyId.
     * @return the FY_ID
     */
    public Integer getFyId() {
        return (Integer) getAttributeInternal(FYID);
    }

    /**
     * Sets <code>value</code> as attribute value for FY_ID using the alias name FyId.
     * @param value value to set the FY_ID
     */
    public void setFyId(Integer value) {
        setAttributeInternal(FYID, value);
    }

    /**
     * Gets the attribute value for DOC_TYPE using the alias name DocType.
     * @return the DOC_TYPE
     */
    public Integer getDocType() {
        return (Integer) getAttributeInternal(DOCTYPE);
    }

    /**
     * Sets <code>value</code> as attribute value for DOC_TYPE using the alias name DocType.
     * @param value value to set the DOC_TYPE
     */
    public void setDocType(Integer value) {
        setAttributeInternal(DOCTYPE, value);
    }

    /**
     * Gets the attribute value for DOC_NO using the alias name DocNo.
     * @return the DOC_NO
     */
    public String getDocNo() {
        return (String) getAttributeInternal(DOCNO);
    }

    /**
     * Sets <code>value</code> as attribute value for DOC_NO using the alias name DocNo.
     * @param value value to set the DOC_NO
     */
    public void setDocNo(String value) {
        setAttributeInternal(DOCNO, value);
    }

    /**
     * Gets the attribute value for DOC_ID_CM using the alias name DocIdCm.
     * @return the DOC_ID_CM
     */
    public String getDocIdCm() {
        return (String) getAttributeInternal(DOCIDCM);
    }

    /**
     * Sets <code>value</code> as attribute value for DOC_ID_CM using the alias name DocIdCm.
     * @param value value to set the DOC_ID_CM
     */
    public void setDocIdCm(String value) {
        setAttributeInternal(DOCIDCM, value);
    }

    /**
     * Gets the attribute value for DOC_STAT using the alias name DocStat.
     * @return the DOC_STAT
     */
    public Integer getDocStat() {
        return (Integer) getAttributeInternal(DOCSTAT);
    }

    /**
     * Sets <code>value</code> as attribute value for DOC_STAT using the alias name DocStat.
     * @param value value to set the DOC_STAT
     */
    public void setDocStat(Integer value) {
        setAttributeInternal(DOCSTAT, value);
    }

    /**
     * Gets the attribute value for AUTH_STAT using the alias name AuthStat.
     * @return the AUTH_STAT
     */
    public String getAuthStat() {
        return (String) getAttributeInternal(AUTHSTAT);
    }

    /**
     * Sets <code>value</code> as attribute value for AUTH_STAT using the alias name AuthStat.
     * @param value value to set the AUTH_STAT
     */
    public void setAuthStat(String value) {
        setAttributeInternal(AUTHSTAT, value);
    }

    /**
     * Gets the attribute value for DISP_TO_CUST using the alias name DispToCust.
     * @return the DISP_TO_CUST
     */
    public String getDispToCust() {
        return (String) getAttributeInternal(DISPTOCUST);
    }

    /**
     * Sets <code>value</code> as attribute value for DISP_TO_CUST using the alias name DispToCust.
     * @param value value to set the DISP_TO_CUST
     */
    public void setDispToCust(String value) {
        setAttributeInternal(DISPTOCUST, value);
    }

    /**
     * Gets the attribute value for CUST_DISP_DT using the alias name CustDispDt.
     * @return the CUST_DISP_DT
     */
    public Timestamp getCustDispDt() {
        return (Timestamp) getAttributeInternal(CUSTDISPDT);
    }

    /**
     * Sets <code>value</code> as attribute value for CUST_DISP_DT using the alias name CustDispDt.
     * @param value value to set the CUST_DISP_DT
     */
    public void setCustDispDt(Timestamp value) {
        setAttributeInternal(CUSTDISPDT, value);
    }

    /**
     * Gets the attribute value for CUST_AUTH_DT using the alias name CustAuthDt.
     * @return the CUST_AUTH_DT
     */
    public Timestamp getCustAuthDt() {
        return (Timestamp) getAttributeInternal(CUSTAUTHDT);
    }

    /**
     * Sets <code>value</code> as attribute value for CUST_AUTH_DT using the alias name CustAuthDt.
     * @param value value to set the CUST_AUTH_DT
     */
    public void setCustAuthDt(Timestamp value) {
        setAttributeInternal(CUSTAUTHDT, value);
    }

    /**
     * Gets the attribute value for TAX_AFTER_DISC_FLG using the alias name TaxAfterDiscFlg.
     * @return the TAX_AFTER_DISC_FLG
     */
    public String getTaxAfterDiscFlg() {
        return (String) getAttributeInternal(TAXAFTERDISCFLG);
    }

    /**
     * Sets <code>value</code> as attribute value for TAX_AFTER_DISC_FLG using the alias name TaxAfterDiscFlg.
     * @param value value to set the TAX_AFTER_DISC_FLG
     */
    public void setTaxAfterDiscFlg(String value) {
        setAttributeInternal(TAXAFTERDISCFLG, value);
    }

    /**
     * Gets the attribute value for DISC_TYPE using the alias name DiscType.
     * @return the DISC_TYPE
     */
    public String getDiscType() {
        return (String) getAttributeInternal(DISCTYPE);
    }

    /**
     * Sets <code>value</code> as attribute value for DISC_TYPE using the alias name DiscType.
     * @param value value to set the DISC_TYPE
     */
    public void setDiscType(String value) {
        setAttributeInternal(DISCTYPE, value);
    }

    /**
     * Gets the attribute value for DISC_VAL using the alias name DiscVal.
     * @return the DISC_VAL
     */
    public Number getDiscVal() {
        return (Number) getAttributeInternal(DISCVAL);
    }

    /**
     * Sets <code>value</code> as attribute value for DISC_VAL using the alias name DiscVal.
     * @param value value to set the DISC_VAL
     */
    public void setDiscVal(Number value) {
        setAttributeInternal(DISCVAL, value);
    }

    /**
     * Gets the attribute value for DISC_AMT_SP using the alias name DiscAmtSp.
     * @return the DISC_AMT_SP
     */
    public Number getDiscAmtSp() {
        return (Number) getAttributeInternal(DISCAMTSP);
    }

    /**
     * Sets <code>value</code> as attribute value for DISC_AMT_SP using the alias name DiscAmtSp.
     * @param value value to set the DISC_AMT_SP
     */
    public void setDiscAmtSp(Number value) {
        setAttributeInternal(DISCAMTSP, value);
    }

    /**
     * Gets the attribute value for TAX_AMT_SP using the alias name TaxAmtSp.
     * @return the TAX_AMT_SP
     */
    public Number getTaxAmtSp() {
        return (Number) getAttributeInternal(TAXAMTSP);
    }

    /**
     * Sets <code>value</code> as attribute value for TAX_AMT_SP using the alias name TaxAmtSp.
     * @param value value to set the TAX_AMT_SP
     */
    public void setTaxAmtSp(Number value) {
        setAttributeInternal(TAXAMTSP, value);
    }

    /**
     * Gets the attribute value for TOT_AMT_SP using the alias name TotAmtSp.
     * @return the TOT_AMT_SP
     */
    public Number getTotAmtSp() {
        return (Number) getAttributeInternal(TOTAMTSP);
    }

    /**
     * Sets <code>value</code> as attribute value for TOT_AMT_SP using the alias name TotAmtSp.
     * @param value value to set the TOT_AMT_SP
     */
    public void setTotAmtSp(Number value) {
        setAttributeInternal(TOTAMTSP, value);
    }

    /**
     * Gets the attribute value for DISC_AMT_BS using the alias name DiscAmtBs.
     * @return the DISC_AMT_BS
     */
    public Number getDiscAmtBs() {
        return (Number) getAttributeInternal(DISCAMTBS);
    }

    /**
     * Sets <code>value</code> as attribute value for DISC_AMT_BS using the alias name DiscAmtBs.
     * @param value value to set the DISC_AMT_BS
     */
    public void setDiscAmtBs(Number value) {
        setAttributeInternal(DISCAMTBS, value);
    }

    /**
     * Gets the attribute value for TAX_AMT_BS using the alias name TaxAmtBs.
     * @return the TAX_AMT_BS
     */
    public Number getTaxAmtBs() {
        return (Number) getAttributeInternal(TAXAMTBS);
    }

    /**
     * Sets <code>value</code> as attribute value for TAX_AMT_BS using the alias name TaxAmtBs.
     * @param value value to set the TAX_AMT_BS
     */
    public void setTaxAmtBs(Number value) {
        setAttributeInternal(TAXAMTBS, value);
    }

    /**
     * Gets the attribute value for TOT_AMT_BS using the alias name TotAmtBs.
     * @return the TOT_AMT_BS
     */
    public Number getTotAmtBs() {
        return (Number) getAttributeInternal(TOTAMTBS);
    }

    /**
     * Sets <code>value</code> as attribute value for TOT_AMT_BS using the alias name TotAmtBs.
     * @param value value to set the TOT_AMT_BS
     */
    public void setTotAmtBs(Number value) {
        setAttributeInternal(TOTAMTBS, value);
    }

    /**
     * Gets the attribute value for USR_ID_CRT using the alias name UsrIdCrt.
     * @return the USR_ID_CRT
     */
    public Integer getUsrIdCrt() {
        return (Integer) getAttributeInternal(USRIDCRT);
    }

    /**
     * Sets <code>value</code> as attribute value for USR_ID_CRT using the alias name UsrIdCrt.
     * @param value value to set the USR_ID_CRT
     */
    public void setUsrIdCrt(Integer value) {
        setAttributeInternal(USRIDCRT, value);
    }

    /**
     * Gets the attribute value for CRT_DT using the alias name CrtDt.
     * @return the CRT_DT
     */
    public Timestamp getCrtDt() {
        return (Timestamp) getAttributeInternal(CRTDT);
    }

    /**
     * Sets <code>value</code> as attribute value for CRT_DT using the alias name CrtDt.
     * @param value value to set the CRT_DT
     */
    public void setCrtDt(Timestamp value) {
        setAttributeInternal(CRTDT, value);
    }

    /**
     * Gets the attribute value for USR_ID_MOD using the alias name UsrIdMod.
     * @return the USR_ID_MOD
     */
    public Integer getUsrIdMod() {
        return (Integer) getAttributeInternal(USRIDMOD);
    }

    /**
     * Sets <code>value</code> as attribute value for USR_ID_MOD using the alias name UsrIdMod.
     * @param value value to set the USR_ID_MOD
     */
    public void setUsrIdMod(Integer value) {
        setAttributeInternal(USRIDMOD, value);
    }

    /**
     * Gets the attribute value for MOD_DT using the alias name ModDt.
     * @return the MOD_DT
     */
    public Timestamp getModDt() {
        return (Timestamp) getAttributeInternal(MODDT);
    }

    /**
     * Sets <code>value</code> as attribute value for MOD_DT using the alias name ModDt.
     * @param value value to set the MOD_DT
     */
    public void setModDt(Timestamp value) {
        setAttributeInternal(MODDT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransCustNm.
     * @return the TransCustNm
     */
    public String getTransCustNm() {
        if(getAttributeInternal(TRANSCUSTNM)!=null){
        return (String) getAttributeInternal(TRANSCUSTNM);
        }else{
            SVCWorkOrderAMImpl am=(SVCWorkOrderAMImpl)this.getApplicationModule();
            ViewObjectImpl eovo=am.getLovEoId1();
            eovo.setNamedWhereClauseParam("CldIdBind", getCldId());
            eovo.setNamedWhereClauseParam("HoOrgIdBind", getHoOrgId());
            eovo.setNamedWhereClauseParam("OrgIdBind", getOrgId());
            eovo.setNamedWhereClauseParam("SlocIdBind", getSlocId());
            eovo.executeQuery();
            if(getDocIdCm()!=null){
            Row [] rr=am.getTcktNoView().getFilteredRows("DocId", getDocIdCm());
            
            if(rr.length>0){
                Integer eoId=(Integer)rr[0].getAttribute("EoId");
                if(eoId==0){
                    return rr[0].getAttribute("EoNm").toString();
                }else{
                    Row [] rr2=eovo.getFilteredRows("EoId", eoId);
                    if(rr2.length>0){
                        return rr2[0].getAttribute("EoNm").toString();
                    }
                }
            }
            }
            
         //   Row [] rr=eovo.getFilteredRows("EoId", getcu);
        }
        return (String) getAttributeInternal(TRANSCUSTNM);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransCustNm.
     * @param value value to set the  TransCustNm
     */
    public void setTransCustNm(String value) {
        setAttributeInternal(TRANSCUSTNM, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransEoId.
     * @return the TransEoId
     */
    public Integer getTransEoId() {
        if (getAttributeInternal(TRANSEOID) != null) {
            return (Integer) getAttributeInternal(TRANSEOID);
        } else {
            SVCWorkOrderAMImpl am = (SVCWorkOrderAMImpl) this.getApplicationModule();
            ViewObjectImpl eovo = am.getLovEoId1();
            eovo.setNamedWhereClauseParam("CldIdBind", getCldId());
            eovo.setNamedWhereClauseParam("HoOrgIdBind", getHoOrgId());
            eovo.setNamedWhereClauseParam("OrgIdBind", getOrgId());
            eovo.setNamedWhereClauseParam("SlocIdBind", getSlocId());
            eovo.executeQuery();
            if (getDocIdCm() != null) {
                Row[] rr = am.getTcktNoView().getFilteredRows("DocId", getDocIdCm());

                if (rr.length > 0) {
                    Integer eoId = (Integer) rr[0].getAttribute("EoId");
                    return eoId;
                }
            }

        }
        return (Integer) getAttributeInternal(TRANSEOID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransEoId.
     * @param value value to set the  TransEoId
     */
    public void setTransEoId(Integer value) {
        setAttributeInternal(TRANSEOID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransDocIdCm.
     * @return the TransDocIdCm
     */
    public String getTransDocIdCm() {
        return (String) getAttributeInternal(TRANSDOCIDCM);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransDocIdCm.
     * @param value value to set the  TransDocIdCm
     */
    public void setTransDocIdCm(String value) {
        setAttributeInternal(TRANSDOCIDCM, value);
    }

    /**
     * Gets the attribute value for CURR_CONV_FCTR using the alias name CurrConvFctr.
     * @return the CURR_CONV_FCTR
     */
    public Number getCurrConvFctr() {
        return (Number) getAttributeInternal(CURRCONVFCTR);
    }

    /**
     * Sets <code>value</code> as attribute value for CURR_CONV_FCTR using the alias name CurrConvFctr.
     * @param value value to set the CURR_CONV_FCTR
     */
    public void setCurrConvFctr(Number value) {
        setAttributeInternal(CURRCONVFCTR, value);
    }

    /**
     * Gets the attribute value for CURR_ID_SP using the alias name CurrIdSp.
     * @return the CURR_ID_SP
     */
    public Integer getCurrIdSp() {
        return (Integer) getAttributeInternal(CURRIDSP);
    }

    /**
     * Sets <code>value</code> as attribute value for CURR_ID_SP using the alias name CurrIdSp.
     * @param value value to set the CURR_ID_SP
     */
    public void setCurrIdSp(Integer value) {
        setAttributeInternal(CURRIDSP, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransTcktNm.
     * @return the TransTcktNm
     */
    public String getTransTcktNm() {
        if (getAttributeInternal(TRANSTCKTNM) != null) {
            return (String) getAttributeInternal(TRANSTCKTNM);
        } else {
            if (getDocIdCm() != null) {
                SVCWorkOrderAMImpl am = (SVCWorkOrderAMImpl) this.getApplicationModule();
                Row[] r = am.getTcktNoView().getFilteredRows("DocId", getDocIdCm());
                if (r.length > 0) {
                    String tkno = r[0].getAttribute("TktNo").toString();
                    return tkno;
                }
            }
        }
        return (String) getAttributeInternal(TRANSTCKTNM);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransTcktNm.
     * @param value value to set the  TransTcktNm
     */
    public void setTransTcktNm(String value) {
        setAttributeInternal(TRANSTCKTNM, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransCurrIdSp.
     * @return the TransCurrIdSp
     */
    public String getTransCurrIdSp() {
        if (getAttributeInternal(TRANSCURRIDSP) != null) {
            return (String) getAttributeInternal(TRANSCURRIDSP);
        } else {
            ViewObjectImpl currvo=getAm().getLovCurrency1();
            currvo.setNamedWhereClauseParam("bindCldId", getCldId());
            currvo.setNamedWhereClauseParam("bindHoOrgId", getHoOrgId());
            currvo.setNamedWhereClauseParam("bindOrgId", getOrgId());
            currvo.setNamedWhereClauseParam("bindCcId", getCurrIdSp());
            currvo.executeQuery();
            Row[] r = currvo.getFilteredRows("CcCurrIdTxn", getCurrIdSp());
            if (r.length > 0) {
               return  r[0].getAttribute("CurrDescTxn").toString();
             //   return currnm;
            }else{
               
                ViewObjectImpl currVO=getAm().getLovCurrency1();
                currVO.setNamedWhereClauseParam("bindCldId", getCldId());
                currVO.setNamedWhereClauseParam("bindHoOrgId", getHoOrgId());
                currVO.setNamedWhereClauseParam("bindOrgId", getOrgId());
                currVO.setNamedWhereClauseParam("bindCcId", getCcIdTrans());
                currVO.executeQuery();
                Row [] rr1=currVO.getFilteredRows("CcCurrIdTxn", getCcIdTrans());
                if(rr1.length>0){
                //         _log.info("current currency id is "+rr1[0].getAttribute("CurrDescTxn"));
                    setCurrIdSp(getCcIdTrans());
                    setCurrConvFctr(new Number(1));
                    return rr1[0].getAttribute("CurrDescTxn").toString();
                }
            }
        }
        return (String) getAttributeInternal(TRANSCURRIDSP);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransCurrIdSp.
     * @param value value to set the  TransCurrIdSp
     */
    public void setTransCurrIdSp(String value) {
        setAttributeInternal(TRANSCURRIDSP, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransCustNm1.
     * @return the TransCustNm1
     */
    public String getTransCustNm1() {
        return (String) getAttributeInternal(TRANSCUSTNM1);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransCustNm1.
     * @param value value to set the  TransCustNm1
     */
    public void setTransCustNm1(String value) {
        setAttributeInternal(TRANSCUSTNM1, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransSumItmAmt.
     * @return the TransSumItmAmt
     */
    public Number getTransSumItmAmt() {
        SVCWorkOrderAMImpl am =  (SVCWorkOrderAMImpl)this.getApplicationModule();
        RowQualifier rq=new RowQualifier(am.getSvcCmWoItm3());
               rq.setWhereClause("CldId='"+getCldId()+"' and SlocId="+getSlocId()+" and OrgId='"+getOrgId()+"' and DocId='"+getDocId()+"'");
               Row[] fr=am.getSvcCmWoItm3().getFilteredRows(rq);
               Number sum=new Number(0);
               if(fr.length>0)
               {
                   for(Row r:fr)
                   {
                       Number taxamt=new Number(0);
                       if(r.getAttribute("ItmAmtSp")!=null)
                           taxamt = (Number)r.getAttribute("ItmAmtSp");
                       sum=sum.add(taxamt);
                       }
                       return sum;   
                   }
               
        return (Number) getAttributeInternal(TRANSSUMITMAMT);  
    
         
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransSumItmAmt.
     * @param value value to set the  TransSumItmAmt
     */
    public void setTransSumItmAmt(Number value) {
        setAttributeInternal(TRANSSUMITMAMT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransSumTaxAmt.
     * @return the TransSumTaxAmt
     */
    public Number getTransSumTaxAmt() {
       // System.out.println("in the getter of  TransSumTaxAmt");
        SVCWorkOrderAMImpl am =  (SVCWorkOrderAMImpl)this.getApplicationModule();
        RowQualifier rq=new RowQualifier(am.getSvcCmWoItm3());
               rq.setWhereClause("CldId='"+getCldId()+"' and SlocId="+getSlocId()+" and OrgId='"+getOrgId()+"' and DocId='"+getDocId()+"'");
               Row[] fr=am.getSvcCmWoItm3().getFilteredRows(rq);
               Number sum=new Number(0);
               if(fr.length>0)
               {
                   for(Row r:fr)
                   {
                       Number taxamt=new Number(0);
                       if(r.getAttribute("TaxAmtSp")!=null)
                           taxamt = (Number)r.getAttribute("TaxAmtSp");
                       sum=sum.add(taxamt);
                       }
                       return sum;   
                   }
        return (Number) getAttributeInternal(TRANSSUMTAXAMT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransSumTaxAmt.
     * @param value value to set the  TransSumTaxAmt
     */
    public void setTransSumTaxAmt(Number value) {
        setAttributeInternal(TRANSSUMTAXAMT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransSumDiscAmt.
     * @return the TransSumDiscAmt
     */
    public Number getTransSumDiscAmt() {
      //  System.out.println("in the getter of  TransSumDiscAmt");
        SVCWorkOrderAMImpl am =  (SVCWorkOrderAMImpl)this.getApplicationModule();
        RowQualifier rq=new RowQualifier(am.getSvcCmWoItm3());
               rq.setWhereClause("CldId='"+getCldId()+"' and SlocId="+getSlocId()+" and OrgId='"+getOrgId()+"' and DocId='"+getDocId()+"'");
               Row[] fr=am.getSvcCmWoItm3().getFilteredRows(rq);
               Number sum=new Number(0);
               if(fr.length>0)
               {
                   for(Row r:fr)
                   {
                       Number taxamt=new Number(0);
                       if(r.getAttribute("DiscAmtSp")!=null)
                           taxamt = (Number)r.getAttribute("DiscAmtSp");
                       sum=sum.add(taxamt);
                       }
                       return sum;
               }
        return (Number) getAttributeInternal(TRANSSUMDISCAMT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransSumDiscAmt.
     * @param value value to set the  TransSumDiscAmt
     */
    public void setTransSumDiscAmt(Number value) {
        setAttributeInternal(TRANSSUMDISCAMT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransSumItemPrice.
     * @return the TransSumItemPrice
     */
    public Number getTransSumItemPrice() {
        return (Number) getAttributeInternal(TRANSSUMITEMPRICE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransSumItemPrice.
     * @param value value to set the  TransSumItemPrice
     */
    public void setTransSumItemPrice(Number value) {
        setAttributeInternal(TRANSSUMITEMPRICE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransSumItmAmtBs.
     * @return the TransSumItmAmtBs
     */
    public Number getTransSumItmAmtBs() {
       // System.out.println("in the getter of getTransSumItmAmtBs");
        SVCWorkOrderAMImpl am =  (SVCWorkOrderAMImpl)this.getApplicationModule();
        RowQualifier rq=new RowQualifier(am.getSvcCmWoItm3());
               rq.setWhereClause("CldId='"+getCldId()+"' and SlocId="+getSlocId()+" and OrgId='"+getOrgId()+"' and DocId='"+getDocId()+"'");
               Row[] fr=am.getSvcCmWoItm3().getFilteredRows(rq);
               Number sum=new Number(0);
               if(fr.length>0)
               {
                   for(Row r:fr)
                   {
                       Number taxamt=new Number(0);
                       if(r.getAttribute("ItmAmtBs")!=null)
                           taxamt = (Number)r.getAttribute("ItmAmtBs");
                       sum=sum.add(taxamt);
                       }
                       return sum;
               }
        return (Number) getAttributeInternal(TRANSSUMITMAMTBS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransSumItmAmtBs.
     * @param value value to set the  TransSumItmAmtBs
     */
    public void setTransSumItmAmtBs(Number value) {
        setAttributeInternal(TRANSSUMITMAMTBS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransTotAmtSp.
     * @return the TransTotAmtSp
     */
    public Number getTransTotAmtSp() {
        
        SVCWorkOrderAMImpl am =  (SVCWorkOrderAMImpl)this.getApplicationModule();
        RowQualifier rq=new RowQualifier(am.getSvcCmWoItm1());
               rq.setWhereClause("CldId='"+getCldId()+"' and SlocId="+getSlocId()+" and OrgId='"+getOrgId()+"' and DocId='"+getDocId()+"'");
               Row[] fr=am.getSvcCmWoItm1().getFilteredRows(rq);
               Number sum=new Number(0);
               if(fr.length>0)
               {
                   for(Row r:fr)
                   {
                       Number taxamt=new Number(0);
                       if(r.getAttribute("ItmAmtSp")!=null)
                           taxamt = (Number)r.getAttribute("ItmAmtSp");
                       sum=sum.add(taxamt);
                       }
                   setTotAmtSp(sum);
                   if(getCurrConvFctr() != null ){
                   setTotAmtBs(sum.multiply(getCurrConvFctr()));
                   }
                    return sum;
               }
        return (Number) getAttributeInternal(TRANSTOTAMTSP);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransTotAmtSp.
     * @param value value to set the  TransTotAmtSp
     */
    public void setTransTotAmtSp(Number value) {
        setAttributeInternal(TRANSTOTAMTSP, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransReqArea.
     * @return the TransReqArea
     */
    public Integer getTransReqArea() {
        if (getAttributeInternal(TRANSREQAREA) != null) {
            return (Integer) getAttributeInternal(TRANSREQAREA);
        } else {
            SVCWorkOrderAMImpl am = (SVCWorkOrderAMImpl) this.getApplicationModule();
            if (am.getSvcCmWoAsgn2().getCurrentRow() != null) {
                Row curr = am.getSvcCmWoAsgn2().getCurrentRow();
//                Integer reqId = (Integer) curr.getAttribute("RqmtAreaId");
                return (Integer) curr.getAttribute("RqmtAreaId");
            }
        }
        return (Integer) getAttributeInternal(TRANSREQAREA);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransReqArea.
     * @param value value to set the  TransReqArea
     */
    public void setTransReqArea(Integer value) {
        setAttributeInternal(TRANSREQAREA, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransEmpNm.
     * @return the TransEmpNm
     */
    public String getTransEmpNm() {
        return (String) getAttributeInternal(TRANSEMPNM);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransEmpNm.
     * @param value value to set the  TransEmpNm
     */
    public void setTransEmpNm(String value) {
        setAttributeInternal(TRANSEMPNM, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransEmpCode.
     * @return the TransEmpCode
     */
    public Integer getTransEmpCode() {
        return (Integer) getAttributeInternal(TRANSEMPCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransEmpCode.
     * @param value value to set the  TransEmpCode
     */
    public void setTransEmpCode(Integer value) {
        setAttributeInternal(TRANSEMPCODE, value);
    }

    /**
     * Gets the attribute value for WORK_COMPLETE using the alias name WorkComplete.
     * @return the WORK_COMPLETE
     */
    public String getWorkComplete() {
        return (String) getAttributeInternal(WORKCOMPLETE);
    }

    /**
     * Sets <code>value</code> as attribute value for WORK_COMPLETE using the alias name WorkComplete.
     * @param value value to set the WORK_COMPLETE
     */
    public void setWorkComplete(String value) {
        setAttributeInternal(WORKCOMPLETE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CcIdTrans.
     * @return the CcIdTrans
     */
    public Integer getCcIdTrans() {
        Integer ret=(Integer)(callStoredFunction(Types.INTEGER, "MM.MM_GET_ORG_BS_CURR(?,?)", new Object[]{this.getCldId(),this.getOrgId()}));
        if(ret != null){return ret;}
      
        return (Integer) getAttributeInternal(CCIDTRANS);
    }
    
    
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
          CallableStatement st = null;
          try {
               st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
               st.registerOutParameter(1, sqlReturnType);
              if (bindVars != null) {
                  for (int z = 0; z < bindVars.length; z++) {
                      st.setObject(z + 2, bindVars[z]);
                  }
              }
              st.executeUpdate();

              return st.getObject(1);
          } catch (SQLException e) {
              
             int end = e.getMessage().indexOf("\n");
              //  throw new JboException(e.getMessage().substring(11, end));
              String msg = e.getMessage();
              FacesMessage ermsg = new FacesMessage(msg);
              ermsg.setSeverity(FacesMessage.SEVERITY_ERROR);
              FacesContext.getCurrentInstance().addMessage(null, ermsg);
            //  throw new JboException(e);
              return null;
          } finally {
              if (st != null) {
                  try {
                      st.close();
                  } catch (SQLException e) {
                        e.printStackTrace();}
              }
          }
      }
    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CcIdTrans.
     * @param value value to set the  CcIdTrans
     */
    public void setCcIdTrans(Integer value) {
        setAttributeInternal(CCIDTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransCoaNm.
     * @return the TransCoaNm
     */
    public String getTransCoaNm() {
        return (String) getAttributeInternal(TRANSCOANM);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransCoaNm.
     * @param value value to set the  TransCoaNm
     */
    public void setTransCoaNm(String value) {
        setAttributeInternal(TRANSCOANM, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransCoaId.
     * @return the TransCoaId
     */
    public Integer getTransCoaId() {
        return (Integer) getAttributeInternal(TRANSCOAID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransCoaId.
     * @param value value to set the  TransCoaId
     */
    public void setTransCoaId(Integer value) {
        setAttributeInternal(TRANSCOAID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransOcDesc.
     * @return the TransOcDesc
     */
    public Integer getTransOcDesc() {
        return (Integer) getAttributeInternal(TRANSOCDESC);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransOcDesc.
     * @param value value to set the  TransOcDesc
     */
    public void setTransOcDesc(Integer value) {
        setAttributeInternal(TRANSOCDESC, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransTotAmt.
     * @return the TransTotAmt
     */
    public Number getTransTotAmt() {
        return (Number) getAttributeInternal(TRANSTOTAMT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransTotAmt.
     * @param value value to set the  TransTotAmt
     */
    public void setTransTotAmt(Number value) {
        setAttributeInternal(TRANSTOTAMT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransOcTtlAmt.
     * @return the TransOcTtlAmt
     */
    public Number getTransOcTtlAmt() {
        if (getAttributeInternal(TRANSOCTTLAMT) != null) {
            return (Number) getAttributeInternal(TRANSOCTTLAMT);
        } else {
            SVCWorkOrderAMImpl am = (SVCWorkOrderAMImpl) this.getApplicationModule();
            ViewObjectImpl ocvo = am.getSvcCmWoOc2();
            Row[] rr = ocvo.getFilteredRows("DocId", getDocId());
            Number sum = new Number(0);
            if (rr.length > 0)
                for (Row r : rr)
                    sum = sum.add((Number) r.getAttribute("OcAmtSp"));

            return sum;
            //return (Number) getAttributeInternal(TRANSOCTTLAMT);
        }

    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransOcTtlAmt.
     * @param value value to set the  TransOcTtlAmt
     */
    public void setTransOcTtlAmt(Number value) {
        setAttributeInternal(TRANSOCTTLAMT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransOcAmt.
     * @return the TransOcAmt
     */
    public Number getTransOcAmt() {
        return (Number) getAttributeInternal(TRANSOCAMT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransOcAmt.
     * @param value value to set the  TransOcAmt
     */
    public void setTransOcAmt(Number value) {
        setAttributeInternal(TRANSOCAMT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransWhId.
     * @return the TransWhId
     */
    public String getTransWhId() {
        if((String) getAttributeInternal(TRANSWHID)!=null){
           return (String) getAttributeInternal(TRANSWHID);
        }
        else{
            if(getTransReqArea()!=null){
                SVCWorkOrderAMImpl  am =(SVCWorkOrderAMImpl)this.getApplicationModule();
                ViewObjectImpl reqimpl=am.getLovReqtArea1();
                reqimpl.setNamedWhereClauseParam("BindCldId", getCldId());
                reqimpl.setNamedWhereClauseParam("BindSlocId", getSlocId());
                reqimpl.setNamedWhereClauseParam("BindOrgId", getOrgId());
                reqimpl.executeQuery();
                
                Row [] rr=reqimpl.getFilteredRows("RqmtAreaId", getTransReqArea());
                
                if(rr.length>0){
                    return rr[0].getAttribute("DfltWh").toString();
                    /*  ViewObjectImpl whvo=am.getLovWhId();
                    whvo.setNamedWhereClauseParam("bindCldId", getCldId());
                    whvo.setNamedWhereClauseParam("bindSlocId", getSlocId());
                    whvo.setNamedWhereClauseParam("bindOrgId", getOrgId());
                    whvo.setNamedWhereClauseParam("bindHoOrgId", getHoOrgId());
                    whvo.executeQuery(); */
                   // Row [] rr2=whvo.getFilteredRows("WhId", rr[0].getAttribute("DfltWh"));
                    /*  if(rr2.length>0){
                        return rr2[0].getAttribute("WhNm").toString();
                    } */
                }
            }
        }
        return (String) getAttributeInternal(TRANSWHID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransWhId.
     * @param value value to set the  TransWhId
     */
    public void setTransWhId(String value) {
        setAttributeInternal(TRANSWHID, value);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link SvcCmWoItm.
     */
    public RowIterator getSvcCmWoItm() {
        return (RowIterator) getAttributeInternal(SVCCMWOITM);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link SvcCmWoOc.
     */
    public RowIterator getSvcCmWoOc() {
        return (RowIterator) getAttributeInternal(SVCCMWOOC);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link SvcCmWoItm1.
     */
    public RowIterator getSvcCmWoItm1() {
        return (RowIterator) getAttributeInternal(SVCCMWOITM1);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link SvcCmWoOc1.
     */
    public RowIterator getSvcCmWoOc1() {
        return (RowIterator) getAttributeInternal(SVCCMWOOC1);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link SvcCmWoAsgn.
     */
    public RowIterator getSvcCmWoAsgn() {
        return (RowIterator) getAttributeInternal(SVCCMWOASGN);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link SvcCmWoSrc.
     */
    public RowIterator getSvcCmWoSrc() {
        return (RowIterator) getAttributeInternal(SVCCMWOSRC);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovDocTypeVO1.
     */
    public RowSet getLovDocTypeVO1() {
        return (RowSet) getAttributeInternal(LOVDOCTYPEVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovOrgIdVO1.
     */
    public RowSet getLovOrgIdVO1() {
        return (RowSet) getAttributeInternal(LOVORGIDVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovCustomerNmVO1.
     */
    public RowSet getLovCustomerNmVO1() {
        return (RowSet) getAttributeInternal(LOVCUSTOMERNMVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovDocIdCmVO1.
     */
    public RowSet getLovDocIdCmVO1() {
        return (RowSet) getAttributeInternal(LOVDOCIDCMVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovUsrIdVO1.
     */
    public RowSet getLovUsrIdVO1() {
        return (RowSet) getAttributeInternal(LOVUSRIDVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovWoStatusVO1.
     */
    public RowSet getLovWoStatusVO1() {
        return (RowSet) getAttributeInternal(LOVWOSTATUSVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovCurrencyVO1.
     */
    public RowSet getLovCurrencyVO1() {
        return (RowSet) getAttributeInternal(LOVCURRENCYVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovEoIdVO1.
     */
    public RowSet getLovEoIdVO1() {
        return (RowSet) getAttributeInternal(LOVEOIDVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovEmpNameVO1.
     */
    public RowSet getLovEmpNameVO1() {
        return (RowSet) getAttributeInternal(LOVEMPNAMEVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovReqtAreaVO1.
     */
    public RowSet getLovReqtAreaVO1() {
        return (RowSet) getAttributeInternal(LOVREQTAREAVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovCoaIdVO.
     */
    public RowSet getLovCoaIdVO() {
        return (RowSet) getAttributeInternal(LOVCOAIDVO);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LocOcDescVO.
     */
    public RowSet getLocOcDescVO() {
        return (RowSet) getAttributeInternal(LOCOCDESCVO);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovWhIdVO.
     */
    public RowSet getLovWhIdVO() {
        return (RowSet) getAttributeInternal(LOVWHIDVO);
    }

    public SVCWorkOrderAMImpl getAm() {
        return (SVCWorkOrderAMImpl)resolvElDC("SVCWorkOrderAMDataControl");
    }
    public Object resolvElDC(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp =
            elFactory.createValueExpression(elContext, "#{data." + data + ".dataProvider}", Object.class);
        return valueExp.getValue(elContext);
    }
}

