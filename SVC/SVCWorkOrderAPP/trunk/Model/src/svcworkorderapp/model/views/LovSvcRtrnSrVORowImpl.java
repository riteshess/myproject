package svcworkorderapp.model.views;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;

import svcworkorderapp.model.services.SVCWorkOrderAMImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Dec 20 10:59:54 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class LovSvcRtrnSrVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CldId,
        SlocId,
        OrgId,
        WhId,
        ItmId,
        RqmtAreaId,
        LotId,
        BinId,
        SrNo,
        ItmQty,
        TransTotStk12,
        TransWhNm,
        TransRqmtNm,
        TotalQty,
        LovBinNmVO;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int WHID = AttributesEnum.WhId.index();
    public static final int ITMID = AttributesEnum.ItmId.index();
    public static final int RQMTAREAID = AttributesEnum.RqmtAreaId.index();
    public static final int LOTID = AttributesEnum.LotId.index();
    public static final int BINID = AttributesEnum.BinId.index();
    public static final int SRNO = AttributesEnum.SrNo.index();
    public static final int ITMQTY = AttributesEnum.ItmQty.index();
    public static final int TRANSTOTSTK12 = AttributesEnum.TransTotStk12.index();
    public static final int TRANSWHNM = AttributesEnum.TransWhNm.index();
    public static final int TRANSRQMTNM = AttributesEnum.TransRqmtNm.index();
    public static final int TOTALQTY = AttributesEnum.TotalQty.index();
    public static final int LOVBINNMVO = AttributesEnum.LovBinNmVO.index();

    /**
     * This is the default constructor (do not remove).
     */
    public LovSvcRtrnSrVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute CldId.
     * @return the CldId
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Gets the attribute value for the calculated attribute SlocId.
     * @return the SlocId
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Gets the attribute value for the calculated attribute OrgId.
     * @return the OrgId
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Gets the attribute value for the calculated attribute WhId.
     * @return the WhId
     */
    public String getWhId() {
        return (String) getAttributeInternal(WHID);
    }

    /**
     * Gets the attribute value for the calculated attribute ItmId.
     * @return the ItmId
     */
    public String getItmId() {
        return (String) getAttributeInternal(ITMID);
    }

    /**
     * Gets the attribute value for the calculated attribute RqmtAreaId.
     * @return the RqmtAreaId
     */
    public Integer getRqmtAreaId() {
        return (Integer) getAttributeInternal(RQMTAREAID);
    }

    /**
     * Gets the attribute value for the calculated attribute LotId.
     * @return the LotId
     */
    public String getLotId() {
        return (String) getAttributeInternal(LOTID);
    }

    /**
     * Gets the attribute value for the calculated attribute BinId.
     * @return the BinId
     */
    public String getBinId() {
        return (String) getAttributeInternal(BINID);
    }

    /**
     * Gets the attribute value for the calculated attribute SrNo.
     * @return the SrNo
     */
    public String getSrNo() {
        return (String) getAttributeInternal(SRNO);
    }

    /**
     * Gets the attribute value for the calculated attribute ItmQty.
     * @return the ItmQty
     */
    public Number getItmQty() {
        return (Number) getAttributeInternal(ITMQTY);
    }

    /**
     * Gets the attribute value for the calculated attribute TransTotStk.
     * @return the TransTotStk
     */
    public String getTransTotStk12() {
        return (String) getAttributeInternal(TRANSTOTSTK12);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransTotStk.
     * @param value value to set the  TransTotStk
     */
    public void setTransTotStk12(String value) {
        setAttributeInternal(TRANSTOTSTK12, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransWhNm.
     * @return the TransWhNm
     */
    public String getTransWhNm() {
        if (getWhId() != null) {
            String HoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
            SVCWorkOrderAMImpl am = (SVCWorkOrderAMImpl) this.getApplicationModule();
            ViewObjectImpl vo = am.getLovWhId();
            vo.setNamedWhereClauseParam("bindOrgId", getOrgId());
            vo.setNamedWhereClauseParam("bindCldId", getCldId());
            vo.setNamedWhereClauseParam("bindSlocId", getSlocId());
            vo.setNamedWhereClauseParam("bindHoOrgId", HoOrgId);
            vo.executeQuery();

            Row[] rr1 = vo.getFilteredRows("WhId", getWhId());

            if (rr1.length > 0) {
                return rr1[0].getAttribute("WhNm").toString();
            }
        }
        
        return (String) getAttributeInternal(TRANSWHNM);
    }
    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransWhNm.
     * @param value value to set the  TransWhNm
     */
    public void setTransWhNm(String value) {
        setAttributeInternal(TRANSWHNM, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransRqmtNm.
     * @return the TransRqmtNm
     */
    public String getTransRqmtNm() {
        if (getRqmtAreaId() != null) {
            SVCWorkOrderAMImpl am = (SVCWorkOrderAMImpl) this.getApplicationModule();
            ViewObjectImpl vo = am.getLovReqtArea1();
            vo.setNamedWhereClauseParam("BindOrgId", getOrgId());
            vo.setNamedWhereClauseParam("BindCldId", getCldId());
            vo.setNamedWhereClauseParam("BindSlocId", getSlocId());
            vo.executeQuery();

            Row[] rr1 = vo.getFilteredRows("RqmtAreaId", getRqmtAreaId());

            if (rr1.length > 0) {
                return rr1[0].getAttribute("RqmtAreaNm").toString();
            }
        }

        return (String) getAttributeInternal(TRANSRQMTNM);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransRqmtNm.
     * @param value value to set the  TransRqmtNm
     */
    public void setTransRqmtNm(String value) {
        setAttributeInternal(TRANSRQMTNM, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TotalQty.
     * @return the TotalQty
     */
    public String getTotalQty() {
        return (String) getAttributeInternal(TOTALQTY);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TotalQty.
     * @param value value to set the  TotalQty
     */
    public void setTotalQty(String value) {
        setAttributeInternal(TOTALQTY, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovBinNmVO.
     */
    public RowSet getLovBinNmVO() {
        return (RowSet) getAttributeInternal(LOVBINNMVO);
    }
}

