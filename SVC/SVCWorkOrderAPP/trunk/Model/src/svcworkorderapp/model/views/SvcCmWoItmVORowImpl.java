package svcworkorderapp.model.views;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.SQLException;

import java.sql.Types;

import java.util.ArrayList;

import java.util.*;

//import java.util.Map;

import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.RowSet;
import oracle.jbo.domain.NClobDomain;
import oracle.jbo.domain.Number;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.ViewRowImpl;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.server.ViewObjectImpl;

import oracle.sql.NUMBER;

import svcworkorderapp.model.entities.SvcCmWoItmEOImpl;
import svcworkorderapp.model.services.SVCWorkOrderAMImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Oct 28 14:25:15 PDT 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SvcCmWoItmVORowImpl extends ViewRowImpl {

    public static final int ENTITY_SVCCMWOITMEO = 0;
    private static ADFLogger adfLog = (ADFLogger) ADFLogger.createADFLogger(SvcCmWoItmVORowImpl.class);

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CldId,
        DfctIdSrc,
        DiscAmtBs,
        DiscAmtSp,
        DiscType,
        DiscVal,
        DocId,
        DocIdSrc,
        FocItm,
        HoOrgId,
        ItmAmtBs,
        ItmAmtSp,
        ItmId,
        ItmIdSrc,
        ItmPrice,
        ItmQty,
        ItmUom,
        OrgId,
        SlocId,
        SvcItmFlg,
        TaxAmtBs,
        TaxAmtSp,
        TaxableAmtBs,
        TaxableAmtSp,
        TransItemName,
        TransItemTaxAmount,
        TransDiscAmt,
        TransAmt,
        TransTaxAmt,
        TotAmt,
        TotalItmAmt,
        TotalDisAmt,
        TotalTaxAmt,
        TotalPrice,
        TotalItmAmtBs,
        TransIsItemFoc,
        TransSrFlg,
        TransStkblChk,
        SvcCmWoAsgn,
        SvcCmWoTrLines,
        SvcCmWoTr,
        SvcCmWoLot,
        SvcCmWoBin,
        SvcCmWoSr,
        LovItmDescVO1,
        LovUomIdVO1,
        LovDiscTypeVO1;
        static AttributesEnum[] vals = null;
        ;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    //  SVCWorkOrderAMImpl am =  (SVCWorkOrderAMImpl)this.getApplicationModule();


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int DFCTIDSRC = AttributesEnum.DfctIdSrc.index();
    public static final int DISCAMTBS = AttributesEnum.DiscAmtBs.index();
    public static final int DISCAMTSP = AttributesEnum.DiscAmtSp.index();
    public static final int DISCTYPE = AttributesEnum.DiscType.index();
    public static final int DISCVAL = AttributesEnum.DiscVal.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int DOCIDSRC = AttributesEnum.DocIdSrc.index();
    public static final int FOCITM = AttributesEnum.FocItm.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int ITMAMTBS = AttributesEnum.ItmAmtBs.index();
    public static final int ITMAMTSP = AttributesEnum.ItmAmtSp.index();
    public static final int ITMID = AttributesEnum.ItmId.index();
    public static final int ITMIDSRC = AttributesEnum.ItmIdSrc.index();
    public static final int ITMPRICE = AttributesEnum.ItmPrice.index();
    public static final int ITMQTY = AttributesEnum.ItmQty.index();
    public static final int ITMUOM = AttributesEnum.ItmUom.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int SVCITMFLG = AttributesEnum.SvcItmFlg.index();
    public static final int TAXAMTBS = AttributesEnum.TaxAmtBs.index();
    public static final int TAXAMTSP = AttributesEnum.TaxAmtSp.index();
    public static final int TAXABLEAMTBS = AttributesEnum.TaxableAmtBs.index();
    public static final int TAXABLEAMTSP = AttributesEnum.TaxableAmtSp.index();
    public static final int TRANSITEMNAME = AttributesEnum.TransItemName.index();
    public static final int TRANSITEMTAXAMOUNT = AttributesEnum.TransItemTaxAmount.index();
    public static final int TRANSDISCAMT = AttributesEnum.TransDiscAmt.index();
    public static final int TRANSAMT = AttributesEnum.TransAmt.index();
    public static final int TRANSTAXAMT = AttributesEnum.TransTaxAmt.index();
    public static final int TOTAMT = AttributesEnum.TotAmt.index();
    public static final int TOTALITMAMT = AttributesEnum.TotalItmAmt.index();
    public static final int TOTALDISAMT = AttributesEnum.TotalDisAmt.index();
    public static final int TOTALTAXAMT = AttributesEnum.TotalTaxAmt.index();
    public static final int TOTALPRICE = AttributesEnum.TotalPrice.index();
    public static final int TOTALITMAMTBS = AttributesEnum.TotalItmAmtBs.index();
    public static final int TRANSISITEMFOC = AttributesEnum.TransIsItemFoc.index();
    public static final int TRANSSRFLG = AttributesEnum.TransSrFlg.index();
    public static final int TRANSSTKBLCHK = AttributesEnum.TransStkblChk.index();
    public static final int SVCCMWOASGN = AttributesEnum.SvcCmWoAsgn.index();
    public static final int SVCCMWOTRLINES = AttributesEnum.SvcCmWoTrLines.index();
    public static final int SVCCMWOTR = AttributesEnum.SvcCmWoTr.index();
    public static final int SVCCMWOLOT = AttributesEnum.SvcCmWoLot.index();
    public static final int SVCCMWOBIN = AttributesEnum.SvcCmWoBin.index();
    public static final int SVCCMWOSR = AttributesEnum.SvcCmWoSr.index();
    public static final int LOVITMDESCVO1 = AttributesEnum.LovItmDescVO1.index();
    public static final int LOVUOMIDVO1 = AttributesEnum.LovUomIdVO1.index();
    public static final int LOVDISCTYPEVO1 = AttributesEnum.LovDiscTypeVO1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public SvcCmWoItmVORowImpl() {
    }

    /**
     * Gets SvcCmWoItmEO entity object.
     * @return the SvcCmWoItmEO
     */
    public SvcCmWoItmEOImpl getSvcCmWoItmEO() {
        return (SvcCmWoItmEOImpl) getEntity(ENTITY_SVCCMWOITMEO);
    }

    /**
     * Gets the attribute value for CLD_ID using the alias name CldId.
     * @return the CLD_ID
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as attribute value for CLD_ID using the alias name CldId.
     * @param value value to set the CLD_ID
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for DFCT_ID_SRC using the alias name DfctIdSrc.
     * @return the DFCT_ID_SRC
     */
    public String getDfctIdSrc() {
        return (String) getAttributeInternal(DFCTIDSRC);
    }

    /**
     * Sets <code>value</code> as attribute value for DFCT_ID_SRC using the alias name DfctIdSrc.
     * @param value value to set the DFCT_ID_SRC
     */
    public void setDfctIdSrc(String value) {
        setAttributeInternal(DFCTIDSRC, value);
    }

    /**
     * Gets the attribute value for DISC_AMT_BS using the alias name DiscAmtBs.
     * @return the DISC_AMT_BS
     */
    public Number getDiscAmtBs() {
        return (Number) getAttributeInternal(DISCAMTBS);
    }

    /**
     * Sets <code>value</code> as attribute value for DISC_AMT_BS using the alias name DiscAmtBs.
     * @param value value to set the DISC_AMT_BS
     */
    public void setDiscAmtBs(Number value) {
        setAttributeInternal(DISCAMTBS, value);
    }

    /**
     * Gets the attribute value for DISC_AMT_SP using the alias name DiscAmtSp.
     * @return the DISC_AMT_SP
     */
    public Number getDiscAmtSp() {
        if(getAttributeInternal(DISCAMTSP)!=null){
        Number conv=new Number(1);
        SVCWorkOrderAMImpl am = (SVCWorkOrderAMImpl) this.getApplicationModule();
        if(am.getSvcCmWo1().getCurrentRow().getAttribute("CurrConvFctr")!=null)
        conv=(Number)am.getSvcCmWo1().getCurrentRow().getAttribute("CurrConvFctr");
        Number discbs=(Number)(((Number)getAttributeInternal(DISCAMTSP)).multiply(conv)).round(6);
      //  setTaxableAmtBs(taxableAmtBS);
        setDiscAmtBs(discbs);
        
    }
        
        return (Number) getAttributeInternal(DISCAMTSP);
    }

    /**
     * Sets <code>value</code> as attribute value for DISC_AMT_SP using the alias name DiscAmtSp.
     * @param value value to set the DISC_AMT_SP
     */
    public void setDiscAmtSp(Number value) {
        setAttributeInternal(DISCAMTSP, value);
    }

    /**
     * Gets the attribute value for DISC_TYPE using the alias name DiscType.
     * @return the DISC_TYPE
     */
    public String getDiscType() {
        return (String) getAttributeInternal(DISCTYPE);
    }

    /**
     * Sets <code>value</code> as attribute value for DISC_TYPE using the alias name DiscType.
     * @param value value to set the DISC_TYPE
     */
    public void setDiscType(String value) {
        if (value != null) {
            SVCWorkOrderAMImpl am = (SVCWorkOrderAMImpl) this.getApplicationModule();
            String flag = am.getSvcCmWo1().getCurrentRow().getAttribute("TaxAfterDiscFlg").toString();
            if (value != null && getItmPrice() != null && getItmQty()!=null) {
                
            HashMap hm=am.getTotalAndTaxableAmt(flag, getItmQty(), getItmPrice(), getDiscVal(), value);
           // adfLog.info("taxable-------- "+hm.get("TaxableAmount")+" total amount value is--------- "+hm.get("TotalAmt")+"discount amount is "+hm.get("DiscountAmt"));
           
             setDiscAmtSp((Number)hm.get("DiscountAmt"));
             setTotAmt((Number)hm.get("TotalAmt"));
             setTaxableAmtSp((Number)hm.get("TaxableAmount"));
            }
        }
        setAttributeInternal(DISCTYPE, value);
    }

    /**
     * Gets the attribute value for DISC_VAL using the alias name DiscVal.
     * @return the DISC_VAL
     */
    public Number getDiscVal() {
        if(getAttributeInternal(DISCVAL)!=null)
        return (Number) getAttributeInternal(DISCVAL);
        else
        return new Number(0);
    }

    /**
     * Sets <code>value</code> as attribute value for DISC_VAL using the alias name DiscVal.
     * @param value value to set the DISC_VAL
     */
    public void setDiscVal(Number value) {
        //    adfLog.info("in the settter of Disc Val");
        if (value != null) {
            SVCWorkOrderAMImpl am = (SVCWorkOrderAMImpl) this.getApplicationModule();
            String flag = am.getSvcCmWo1().getCurrentRow().getAttribute("TaxAfterDiscFlg").toString();
            if (value != null && getItmPrice() != null && getItmQty()!=null) {
                
            HashMap hm=am.getTotalAndTaxableAmt(flag, getItmQty(), getItmPrice(), value, getDiscType());
          //  adfLog.info("taxable-------- "+hm.get("TaxableAmount")+" total amount value is--------- "+hm.get("TotalAmt")+"discount amount is "+hm.get("DiscountAmt"));
        
             setDiscAmtSp((Number)hm.get("DiscountAmt"));
             setTotAmt((Number)hm.get("TotalAmt"));
             setTaxableAmtSp((Number)hm.get("TaxableAmount"));
            }
        }
       /*   if (value != null) {
            
            //  this.getDBTransaction().postChanges();
              SVCWorkOrderAMImpl am = (SVCWorkOrderAMImpl) this.getApplicationModule();
            // AppModuleAMImpl am = (AppModuleAMImpl) this.getApplicationModule();
            ViewObjectImpl svcwo = am.getSvcCmWo1();
            // adfLog.info("Value of TaxAfterDiscFlg"+svcwo.getCurrentRow().getAttribute("TaxAfterDiscFlg"));
            if (svcwo.getCurrentRow().getAttribute("TaxAfterDiscFlg") != null) {
                String taxflg = svcwo.getCurrentRow().getAttribute("TaxAfterDiscFlg").toString();
                Number newtot = new Number(0);
                if ("Y".equalsIgnoreCase(taxflg)) {
                    //     adfLog.info(" in the Y loop");
                    if ("A".equalsIgnoreCase(getDiscType())) {
                        newtot = (Number) ((Number) getItmQty().multiply(getItmPrice()).minus(value)).round(6);
                        setTaxableAmtSp(newtot);

                        setDiscAmtSp(value);
                    } else if ("P".equalsIgnoreCase(getDiscType())) {
                        newtot =
                            (Number) (getItmPrice().multiply(getItmQty()).multiply(value)).divide(new Number(100)).round(6);
                        Number roundoff =
                            (Number) ((Number) getItmPrice().multiply(getItmQty()).minus(newtot)).round(6);
                        System.out.println(getItmPrice() + "  11getItmPrice " + getItmQty() + " getItmQty " + value +
                                           "  newtot " + newtot);
                        setTaxableAmtSp(roundoff);
                        setDiscAmtSp(newtot);
                    }
                } else {
                    //  adfLog.info(" in the N loop");
                    if ("A".equalsIgnoreCase(getDiscType())) {
                        // newtot =(Number) getItmQty().multiply(getItmPrice()).minus(value);
                        newtot = (Number) getItmQty().multiply(getItmPrice());
                        setTaxableAmtSp(newtot);
                        setDiscAmtSp(value);
                    } else if ("P".equalsIgnoreCase(getDiscType())) {
                        newtot =
                            (Number) (getItmPrice().multiply(getItmQty()).multiply(value)).divide(new Number(100)).round(6);
                        setTaxableAmtSp((Number) getItmQty().multiply(getItmPrice()));
                        System.out.println(getItmPrice() + "  22getItmPrice " + getItmQty() + " getItmQty " + value +
                                           "  newtot " + newtot);
                        setDiscAmtSp(newtot);
                    }
                }
                // adfLog.info("value transtax in:" +getTransItemTaxAmount());
                if (getTransItemTaxAmount() != null) {
                    if ("A".equalsIgnoreCase(getDiscType())) {
                        newtot =
                            (Number) ((Number) getTransItemTaxAmount().add(getItmQty().multiply(getItmPrice())).minus(value)).round(6);
                        setTotAmt(newtot);
                        //  setDiscVal(value);
                    } else if ("P".equalsIgnoreCase(getDiscType())) {
                        newtot =
                            (Number) getItmPrice().multiply(getItmQty()).multiply(value).divide(new Number(100)).round(6);
                        Number roundoff =
                            (Number) ((Number) getTransItemTaxAmount().add(getItmQty().multiply(getItmPrice())).minus(newtot)).round(6);
                        System.out.println(getItmPrice() + "  22getItmPrice " + getItmQty() + " getItmQty " + value +
                                           "  newtot " + newtot);
                        setTotAmt(roundoff);
                        //   setDiscVal(newtot);
                    }

                    //   Number totamt = (Number) getTaxAmt().add(getItmPrice().multiply(getItmQty())).minus(value);
                 //setTransTotAmt(totamt); 
                }
            }
        }else if(value==null){
            setAttributeInternal(DISCVAL, new Number(0));
            
            if(getItmPrice()!=null && getItmQty()!=null){
                Number tot=(Number)getItmPrice().multiply(getItmQty()).round(6);
                setTaxableAmtSp(tot);
                setTotAmt(tot);
                setDiscAmtSp(new Number(0));
            } 
        }*/
        setAttributeInternal(DISCVAL, value);
    }

    /**
     * Gets the attribute value for DOC_ID using the alias name DocId.
     * @return the DOC_ID
     */
    public String getDocId() {
        return (String) getAttributeInternal(DOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for DOC_ID using the alias name DocId.
     * @param value value to set the DOC_ID
     */
    public void setDocId(String value) {
        setAttributeInternal(DOCID, value);
    }

    /**
     * Gets the attribute value for DOC_ID_SRC using the alias name DocIdSrc.
     * @return the DOC_ID_SRC
     */
    public String getDocIdSrc() {
        return (String) getAttributeInternal(DOCIDSRC);
    }

    /**
     * Sets <code>value</code> as attribute value for DOC_ID_SRC using the alias name DocIdSrc.
     * @param value value to set the DOC_ID_SRC
     */
    public void setDocIdSrc(String value) {
        setAttributeInternal(DOCIDSRC, value);
    }
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
          CallableStatement st = null;
          try {
               st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
               st.registerOutParameter(1, sqlReturnType);
              if (bindVars != null) {
                  for (int z = 0; z < bindVars.length; z++) {
                      st.setObject(z + 2, bindVars[z]);
                  }
              }
              st.executeUpdate();

              return st.getObject(1);
          } catch (SQLException e) {
              e.printStackTrace();
             int end = e.getMessage().indexOf("\n");
              //  throw new JboException(e.getMessage().substring(11, end));
              String msg = e.getMessage();
              FacesMessage ermsg = new FacesMessage(msg);
              ermsg.setSeverity(FacesMessage.SEVERITY_ERROR);
              FacesContext.getCurrentInstance().addMessage(null, ermsg);
            //  throw new JboException(e);
             
              return null;
          } finally {
              if (st != null) {
                  try {
                      st.close();
                  } catch (SQLException e) {
                        e.printStackTrace();}
              }
          }
      }
    
    /**
     * Gets the attribute value for FOC_ITM using the alias name FocItm.
     * @return the FOC_ITM
     */
    public String getFocItm() {
        return (String) getAttributeInternal(FOCITM);
    }

    /**
     * Sets <code>value</code> as attribute value for FOC_ITM using the alias name FocItm.
     * @param value value to set the FOC_ITM
     */
    public void setFocItm(String value) {
        setAttributeInternal(FOCITM, value);
    }

    /**
     * Gets the attribute value for HO_ORG_ID using the alias name HoOrgId.
     * @return the HO_ORG_ID
     */
    public String getHoOrgId() {
        return (String) getAttributeInternal(HOORGID);
    }

    /**
     * Sets <code>value</code> as attribute value for HO_ORG_ID using the alias name HoOrgId.
     * @param value value to set the HO_ORG_ID
     */
    public void setHoOrgId(String value) {
        setAttributeInternal(HOORGID, value);
    }

    /**
     * Gets the attribute value for ITM_AMT_BS using the alias name ItmAmtBs.
     * @return the ITM_AMT_BS
     */
    public Number getItmAmtBs() {
        return (Number) getAttributeInternal(ITMAMTBS);
    }

    /**
     * Sets <code>value</code> as attribute value for ITM_AMT_BS using the alias name ItmAmtBs.
     * @param value value to set the ITM_AMT_BS
     */
    public void setItmAmtBs(Number value) {
        setAttributeInternal(ITMAMTBS, value);
    }

    /**
     * Gets the attribute value for ITM_AMT_SP using the alias name ItmAmtSp.
     * @return the ITM_AMT_SP
     */
    public Number getItmAmtSp() {
        return (Number) getAttributeInternal(ITMAMTSP);
    }

    /**
     * Sets <code>value</code> as attribute value for ITM_AMT_SP using the alias name ItmAmtSp.
     * @param value value to set the ITM_AMT_SP
     */
    public void setItmAmtSp(Number value) {
        setAttributeInternal(ITMAMTSP, value);
    }

    /**
     * Gets the attribute value for ITM_ID using the alias name ItmId.
     * @return the ITM_ID
     */
    public String getItmId() {
        return (String) getAttributeInternal(ITMID);
    }

    /**
     * Sets <code>value</code> as attribute value for ITM_ID using the alias name ItmId.
     * @param value value to set the ITM_ID
     */
    public void setItmId(String value) {
        setAttributeInternal(ITMID, value);
    }

    /**
     * Gets the attribute value for ITM_ID_SRC using the alias name ItmIdSrc.
     * @return the ITM_ID_SRC
     */
    public String getItmIdSrc() {
        return (String) getAttributeInternal(ITMIDSRC);
    }

    /**
     * Sets <code>value</code> as attribute value for ITM_ID_SRC using the alias name ItmIdSrc.
     * @param value value to set the ITM_ID_SRC
     */
    public void setItmIdSrc(String value) {
        setAttributeInternal(ITMIDSRC, value);
    }

    /**
     * Gets the attribute value for ITM_PRICE using the alias name ItmPrice.
     * @return the ITM_PRICE
     */
    public Number getItmPrice() {
        //if(getAttributeInternal(ITMPRICE)!=null)
        return (Number) getAttributeInternal(ITMPRICE);
       // else
        //return new Number(0);
    }

    /**
     * Sets <code>value</code> as attribute value for ITM_PRICE using the alias name ItmPrice.
     * @param value value to set the ITM_PRICE
     */
    public void setItmPrice(Number value) {
        if (value != null) {
            SVCWorkOrderAMImpl am = (SVCWorkOrderAMImpl) this.getApplicationModule();
            String flag = am.getSvcCmWo1().getCurrentRow().getAttribute("TaxAfterDiscFlg").toString();
            if (value != null && getItmQty() != null && getDiscAmtSp() != null) {
                HashMap hm=am.getTotalAndTaxableAmt(flag, getItmQty(), value, getDiscVal(), getDiscType());
              adfLog.info("taxable-------- "+hm.get("TaxableAmount")+" total amount value is--------- "+hm.get("TotalAmt")+"discount amount is "+hm.get("DiscountAmt"));
                
                 setDiscAmtSp((Number)hm.get("DiscountAmt"));
                 setTotAmt((Number)hm.get("TotalAmt"));
                 setTaxableAmtSp((Number)hm.get("TaxableAmount"));
            }
            //ArrayList ar=am.getTotalAndTaxableAmt();
        }
        else{
            setAttributeInternal(ITMPRICE, new Number(0));
        }
        setAttributeInternal(ITMPRICE, value);
    }

    /**
     * Gets the attribute value for ITM_QTY using the alias name ItmQty.
     * @return the ITM_QTY
     */
    public Number getItmQty() {
        //if(getAttributeInternal(ITMQTY)!=null)
        return (Number) getAttributeInternal(ITMQTY);
       // else
        //return new Number(0);
    }

    /**
     * Sets <code>value</code> as attribute value for ITM_QTY using the alias name ItmQty.
     * @param value value to set the ITM_QTY
     */
    public void setItmQty(Number value) {
        if (value != null) {
            SVCWorkOrderAMImpl am = (SVCWorkOrderAMImpl) this.getApplicationModule();
            String flag = am.getSvcCmWo1().getCurrentRow().getAttribute("TaxAfterDiscFlg").toString();
            if (value != null && getItmPrice() != null) {
                
            HashMap hm=am.getTotalAndTaxableAmt(flag, value, getItmPrice(), getDiscVal(), getDiscType());
          //  adfLog.info("taxable-------- "+hm.get("TaxableAmount")+" total amount value is--------- "+hm.get("TotalAmt")+"discount amount is "+hm.get("DiscountAmt"));
           
             setDiscAmtSp((Number)hm.get("DiscountAmt"));
             setTotAmt((Number)hm.get("TotalAmt"));
             setTaxableAmtSp((Number)hm.get("TaxableAmount"));
                Object obj = null;
                try {
                    obj = callStoredFunction(Types.VARCHAR, "SVC.SVC_IS_ITM_FOC_IN_WO(?,?,?,?,?,?,?,?)", new Object[] {
                                                    getCldId(), getSlocId(), getHoOrgId(), getOrgId(), getDocIdSrc(),
                                                    getItmIdSrc(), getItmId(), value
                    });
                } catch (Exception e) {
                    // TODO: Add catch code
                    e.printStackTrace();
                }
                
                if(obj != null){
                    adfLog.info("--------------setting focItem-------- "+obj.toString());
                    setFocItm(obj.toString());
                }
             
             
            }
        }else {
            setAttributeInternal(ITMQTY, new Number(0));
        }
        setAttributeInternal(ITMQTY, value);
    }

    /**
     * Gets the attribute value for ITM_UOM using the alias name ItmUom.
     * @return the ITM_UOM
     */
    public String getItmUom() {
        return (String) getAttributeInternal(ITMUOM);
    }

    /**
     * Sets <code>value</code> as attribute value for ITM_UOM using the alias name ItmUom.
     * @param value value to set the ITM_UOM
     */
    public void setItmUom(String value) {
        setAttributeInternal(ITMUOM, value);
    }

    /**
     * Gets the attribute value for ORG_ID using the alias name OrgId.
     * @return the ORG_ID
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as attribute value for ORG_ID using the alias name OrgId.
     * @param value value to set the ORG_ID
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for SLOC_ID using the alias name SlocId.
     * @return the SLOC_ID
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for SLOC_ID using the alias name SlocId.
     * @param value value to set the SLOC_ID
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for SVC_ITM_FLG using the alias name SvcItmFlg.
     * @return the SVC_ITM_FLG
     */
    public String getSvcItmFlg() {
        return (String) getAttributeInternal(SVCITMFLG);
    }

    /**
     * Sets <code>value</code> as attribute value for SVC_ITM_FLG using the alias name SvcItmFlg.
     * @param value value to set the SVC_ITM_FLG
     */
    public void setSvcItmFlg(String value) {
        setAttributeInternal(SVCITMFLG, value);
    }

    /**
     * Gets the attribute value for TAX_AMT_BS using the alias name TaxAmtBs.
     * @return the TAX_AMT_BS
     */
    public Number getTaxAmtBs() {
        return (Number) getAttributeInternal(TAXAMTBS);
    }

    /**
     * Sets <code>value</code> as attribute value for TAX_AMT_BS using the alias name TaxAmtBs.
     * @param value value to set the TAX_AMT_BS
     */
    public void setTaxAmtBs(Number value) {
        setAttributeInternal(TAXAMTBS, value);
    }

    /**
     * Gets the attribute value for TAX_AMT_SP using the alias name TaxAmtSp.
     * @return the TAX_AMT_SP
     */
    public Number getTaxAmtSp() {
        SVCWorkOrderAMImpl am = (SVCWorkOrderAMImpl) this.getApplicationModule();
        if(getAttributeInternal(TAXAMTSP)!=null){
            Number conv=new Number(1);
            if(am.getSvcCmWo1().getCurrentRow().getAttribute("CurrConvFctr")!=null)
            conv=(Number)am.getSvcCmWo1().getCurrentRow().getAttribute("CurrConvFctr");
            Number taxAmtBS=(Number)(((Number)getAttributeInternal(TAXAMTSP)).multiply(conv)).round(6);
            
            setTaxAmtBs(taxAmtBS);
            
           return (Number) getAttributeInternal(TAXAMTSP);
        }else 
        return new Number(0);
    }

    /**
     * Sets <code>value</code> as attribute value for TAX_AMT_SP using the alias name TaxAmtSp.
     * @param value value to set the TAX_AMT_SP
     */
    public void setTaxAmtSp(Number value) {
        setAttributeInternal(TAXAMTSP, value);
    }

    /**
     * Gets the attribute value for TAXABLE_AMT_BS using the alias name TaxableAmtBs.
     * @return the TAXABLE_AMT_BS
     */
    public Number getTaxableAmtBs() {
        return (Number) getAttributeInternal(TAXABLEAMTBS);
    }

    /**
     * Sets <code>value</code> as attribute value for TAXABLE_AMT_BS using the alias name TaxableAmtBs.
     * @param value value to set the TAXABLE_AMT_BS
     */
    public void setTaxableAmtBs(Number value) {
        if (value == null) {
            value = new Number(0);
        }
        setAttributeInternal(TAXABLEAMTBS, value);
    }

    /**
     * Gets the attribute value for TAXABLE_AMT_SP using the alias name TaxableAmtSp.
     * @return the TAXABLE_AMT_SP
     */
    public Number getTaxableAmtSp() {
        //        Number zero=new Number(0);
        //            Number amt=zero;
        //          Number pr=zero;
        //            Number ord=zero;
        //            System.out.println("in the getter");
        //        System.out.println(getItmPrice()+" "+getItmQty());
        //            if(getItmPrice()!=null && getItmQty()!=null){
        //                pr = new Number((getItmPrice()));
        //                ord=new Number((getItmQty()));
        //                amt= amt.add(pr.multiply(ord));
        //                System.out.println("Amount is:"+amt);
        //               return amt;
        //            }
        if(getAttributeInternal(TAXABLEAMTSP)!=null){
            Number conv=new Number(1);
            SVCWorkOrderAMImpl am = (SVCWorkOrderAMImpl) this.getApplicationModule();
            if(am.getSvcCmWo1().getCurrentRow().getAttribute("CurrConvFctr")!=null)
            conv=(Number)am.getSvcCmWo1().getCurrentRow().getAttribute("CurrConvFctr");
            Number taxableAmtBS=(Number)(((Number)getAttributeInternal(TAXABLEAMTSP)).multiply(conv)).round(6);
            setTaxableAmtBs(taxableAmtBS);
            
        }

        return (Number) getAttributeInternal(TAXABLEAMTSP);
    }

    /**
     * Sets <code>value</code> as attribute value for TAXABLE_AMT_SP using the alias name TaxableAmtSp.
     * @param value value to set the TAXABLE_AMT_SP
     */
    public void setTaxableAmtSp(Number value) {
        if (value == null) {
            value = new Number(0);
        }
        setAttributeInternal(TAXABLEAMTSP, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransItemName.
     * @return the TransItemName
     */
    public String getTransItemName() {
        if (getAttributeInternal(TRANSITEMNAME) != null) {
            return (String) getAttributeInternal(TRANSITEMNAME);
        } else {
            adfLog.info("current item desc got not   "+ getAttributeInternal(TRANSITEMNAME)+" get item id is "+getItmId());
                if (getItmId() != null) {
                SVCWorkOrderAMImpl am = (SVCWorkOrderAMImpl) this.getApplicationModule();
                Row r[] = am.getLovItmDesc1().getFilteredRows("ItmId", getItmId());
                if (r.length > 0) {
                    return r[0].getAttribute("ItmDesc").toString();
                } else {
                    return (String) getAttributeInternal(TRANSITEMNAME);
                }
            } else {
                 return (String) getAttributeInternal(TRANSITEMNAME);
            }
        }
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransItemName.
     * @param value value to set the  TransItemName
     */
    public void setTransItemName(String value) {
        setAttributeInternal(TRANSITEMNAME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransItemTaxAmount.
     * @return the TransItemTaxAmount
     */
    public Number getTransItemTaxAmount() {
        return (Number) getAttributeInternal(TRANSITEMTAXAMOUNT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransItemTaxAmount.
     * @param value value to set the  TransItemTaxAmount
     */
    public void setTransItemTaxAmount(Number value) {
        setAttributeInternal(TRANSITEMTAXAMOUNT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransDiscAmt.
     * @return the TransDiscAmt
     */
    public Number getTransDiscAmt() {
        return (Number) getAttributeInternal(TRANSDISCAMT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransDiscAmt.
     * @param value value to set the  TransDiscAmt
     */
    public void setTransDiscAmt(Number value) {
        if (value == null) {
            value = new Number(0);
        }
        //        SVCWorkOrderAMImpl am =
        //                (SVCWorkOrderAMImpl)this.getApplicationModule();
        //        //String flag=am.getSvcCmWo1().getCurrentRow().getAttribute("TaxAfterDiscFlg").toString();
        //
        //         if(getDiscType()!=null && getDiscType().equals("A")&&getTransAmt()!=null) {
        //             Number disamt=(Number)getTransAmt().minus(getDiscVal());
        //            System.out.println("discount amt"+disamt);
        //             setTransDiscAmt(disamt);
        //            }
        //        if(getDiscType()!=null && getDiscType().equals("P")&& getTransAmt()!=null) {
        //            Number a1=(Number)getTransAmt().multiply(getDiscVal());
        //            Number a2=a1.divide(100);
        //            System.out.println("discount amt"+a2);
        //            setTransDiscAmt(a2);
        //           }
        setAttributeInternal(TRANSDISCAMT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransAmt.
     * @return the TransAmt
     */
    public Number getTransAmt() {
        //        SVCWorkOrderAMImpl am =
        //               (SVCWorkOrderAMImpl)this.getApplicationModule();
        //        adfLog.info("getTransAmt :"+getTransAmt());
        //        if(getTaxableAmtSp()!=null)
        //            return getTaxableAmtSp();
        //        String flag=am.getSvcCmWo1().getCurrentRow().getAttribute("TaxAfterDiscFlg").toString();
        //        if(flag.equals("Y")) {
        //         Number amt=(Number)getTransAmt().minus(getTransDiscAmt());
        //return amt;
        //         }
        return (Number) getAttributeInternal(TRANSAMT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransAmt.
     * @param value value to set the  TransAmt
     */
    public void setTransAmt(Number value) {
        setAttributeInternal(TRANSAMT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransTaxAmt.
     * @return the TransTaxAmt
     */
    public Number getTransTaxAmt() {
        return (Number) getAttributeInternal(TRANSTAXAMT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransTaxAmt.
     * @param value value to set the  TransTaxAmt
     */
    public void setTransTaxAmt(Number value) {
        //        adfLog.info(" in the setter of setTransTaxAmt");
        //        Number newtot=new Number(0);
        //        adfLog.info("getTransItemTaxAmount()");
        //        if(getTransItemTaxAmount()!=null){
        //            if("A".equalsIgnoreCase(getDiscType())){
        //            newtot =(Number) getTransItemTaxAmount().add(getItmQty().multiply(getItmPrice())).minus(value);
        //            setTotAmt(newtot);
        //          //  setDiscVal(value);
        //            }else if("P".equalsIgnoreCase(getDiscType())){
        //               newtot = (Number)getItmPrice().multiply(getItmQty()).multiply(value).divide(new Number(100)).round(6);
        //               setTotAmt((Number)getTransItemTaxAmount().add(getItmQty().multiply(getItmPrice())).minus(newtot));
        //            //   setDiscVal(newtot);
        //            }
        setAttributeInternal(TRANSTAXAMT, value);
        //}
    }

    /**
     * Gets the attribute value for the calculated attribute TotAmt.
     * @return the TotAmt
     */
    public Number getTotAmt() {
        SVCWorkOrderAMImpl am = (SVCWorkOrderAMImpl) this.getApplicationModule();
        Number tax = (Number) getTransItemTaxAmount();
        if(getAttributeInternal(TOTAMT)!=null){
        
            Number conv=new Number(1);
            if(am.getSvcCmWo1().getCurrentRow().getAttribute("CurrConvFctr")!=null)
            conv=(Number)am.getSvcCmWo1().getCurrentRow().getAttribute("CurrConvFctr");
            Number itmAmtbs=(Number)(((Number)getAttributeInternal(TOTAMT)).multiply(conv)).round(6);
            
            setItmAmtSp((Number)getAttributeInternal(TOTAMT));
            setItmAmtBs(itmAmtbs);
            return (Number) getAttributeInternal(TOTAMT);
        }else {
           
            String flag = am.getSvcCmWo1().getCurrentRow().getAttribute("TaxAfterDiscFlg").toString();
            if (getItmPrice() != null && getItmQty()!=null) {
                
            HashMap hm=am.getTotalAndTaxableAmt(flag, getItmQty(), getItmPrice(), getDiscVal(), getDiscType());
            Number gettotAmt=(Number)((Number)hm.get("TotalAmt")).add(getTaxAmtSp()).round(6);
            return gettotAmt;
           
            }
        }
        /* 
        if (getTransAmt() != null && getTransDiscAmt() != null) {
            if (getTransItemTaxAmount() == null) {
                tax = new Number(0);
            }
            Number amt = (Number) (getTransAmt().add(tax)).minus(getTransDiscAmt());
            //  System.out.println("tot amt:"+amt);
            return amt;

        } */
        return (Number) getAttributeInternal(TOTAMT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TotAmt.
     * @param value value to set the  TotAmt
     */
    public void setTotAmt(Number value) {
        setAttributeInternal(TOTAMT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TotalItmAmt.
     * @return the TotalItmAmt
     */
    public Number getTotalItmAmt() {
        return (Number) getAttributeInternal(TOTALITMAMT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TotalItmAmt.
     * @param value value to set the  TotalItmAmt
     */
    public void setTotalItmAmt(Number value) {
        setAttributeInternal(TOTALITMAMT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TotalDisAmt.
     * @return the TotalDisAmt
     */
    public Number getTotalDisAmt() {
        return (Number) getAttributeInternal(TOTALDISAMT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TotalDisAmt.
     * @param value value to set the  TotalDisAmt
     */
    public void setTotalDisAmt(Number value) {
        setAttributeInternal(TOTALDISAMT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TotalTaxAmt.
     * @return the TotalTaxAmt
     */
    public Number getTotalTaxAmt() {
        return (Number) getAttributeInternal(TOTALTAXAMT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TotalTaxAmt.
     * @param value value to set the  TotalTaxAmt
     */
    public void setTotalTaxAmt(Number value) {
        setAttributeInternal(TOTALTAXAMT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TotalPrice.
     * @return the TotalPrice
     */
    public Number getTotalPrice() {
        return (Number) getAttributeInternal(TOTALPRICE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TotalPrice.
     * @param value value to set the  TotalPrice
     */
    public void setTotalPrice(Number value) {
        setAttributeInternal(TOTALPRICE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TotalAmtBs.
     * @return the TotalAmtBs
     */
    public Number getTotalItmAmtBs() {
        return (Number) getAttributeInternal(TOTALITMAMTBS);
    }

    /**
     * Gets the attribute value for the calculated attribute TransIsItemFoc.
     * @return the TransIsItemFoc
     */
    public String getTransIsItemFoc() {
        if (getAttributeInternal(TRANSISITEMFOC) != null) {
            return (String) getAttributeInternal(TRANSISITEMFOC);
        } else {
            if (getDocIdSrc() != null && getItmId() != null) {
                /*   BigDecimal obj = (BigDecimal) callStoredFunction(Types.NUMERIC, "SVC.SVC_IS_ITM_FOC(?,?,?,?,?,?)", new Object[] {
                                                                 getCldId(), getSlocId(), getHoOrgId(), getOrgId(),
                                                                 getDocIdSrc(), getItmId()
                });
                Number temp = null;
                Number zero = new Number(0);
                if (obj != null) {
                    try {
                        temp = new Number(obj);
                    } catch (Exception e) {
                        adfLog.info("is item foc function  " + obj + "   " + e);
                    }

                }

                if (temp !=null && temp.compareTo(zero) == 1) {
                    setFocItm("Y");
                }else{
                    setFocItm("N");
                } */
                
                /*     Object obj =  callStoredFunction(Types.VARCHAR, "SVC.SVC_IS_ITM_FOC_IN_WO(?,?,?,?,?,?,?)", new Object[] {
                                                                                getCldId(), getSlocId(), getHoOrgId(), getOrgId(),
                                                                                getDocIdSrc(), getItmId(),getItmQty()
                               });
                
                if(obj != null){
                    adfLog.info("--------------setting focItem-------- "+obj.toString());
                    setFocItm(obj.toString());
                } */
                

                return (String) getAttributeInternal(TRANSISITEMFOC);
            }
        }
        return (String) getAttributeInternal(TRANSISITEMFOC);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransIsItemFoc.
     * @param value value to set the  TransIsItemFoc
     */
    public void setTransIsItemFoc(String value) {
        setAttributeInternal(TRANSISITEMFOC, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransSrFlg.
     * @return the TransSrFlg
     */
    public String getTransSrFlg() {
        
        if(getItmId()!=null){
            SVCWorkOrderAMImpl am=(SVCWorkOrderAMImpl)this.getApplicationModule();
            ViewObjectImpl itmvo=am.getLovItmDesc1();
            itmvo.setNamedWhereClauseParam("BindCldIdVar", getCldId());
            itmvo.setNamedWhereClauseParam("BindSlocIdVar", getSlocId());
            itmvo.setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
            itmvo.setNamedWhereClauseParam("BindOrgIdVar", getOrgId());
            
            itmvo.executeQuery();
            
            Row [] rr1=itmvo.getFilteredRows("ItmId", getItmId());
            if(rr1.length>0)
            return (String) rr1[0].getAttribute("SerializedFlg");
        }
        return (String) getAttributeInternal(TRANSSRFLG);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransSrFlg.
     * @param value value to set the  TransSrFlg
     */
    public void setTransSrFlg(String value) {
        setAttributeInternal(TRANSSRFLG, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransStkblChk.
     * @return the TransStkblChk
     */
    public String getTransStkblChk() {
        
        if(getItmId()!=null){
            SVCWorkOrderAMImpl am=(SVCWorkOrderAMImpl)this.getApplicationModule();
            ViewObjectImpl itmvo=am.getLovItmDesc1();
            itmvo.setNamedWhereClauseParam("BindCldIdVar", getCldId());
            itmvo.setNamedWhereClauseParam("BindSlocIdVar", getSlocId());
            itmvo.setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
            itmvo.setNamedWhereClauseParam("BindOrgIdVar", getOrgId());
            
            itmvo.executeQuery();
            
            Row [] rr1=itmvo.getFilteredRows("ItmId", getItmId());
            if(rr1.length>0)
            return (String) rr1[0].getAttribute("StockableFlg");
        }
        
        return (String) getAttributeInternal(TRANSSTKBLCHK);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransStkblChk.
     * @param value value to set the  TransStkblChk
     */
    public void setTransStkblChk(String value) {
        setAttributeInternal(TRANSSTKBLCHK, value);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link SvcCmWoAsgn.
     */
    public RowIterator getSvcCmWoAsgn() {
        return (RowIterator) getAttributeInternal(SVCCMWOASGN);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link SvcCmWoTrLines.
     */
    public RowIterator getSvcCmWoTrLines() {
        return (RowIterator) getAttributeInternal(SVCCMWOTRLINES);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link SvcCmWoTr.
     */
    public RowIterator getSvcCmWoTr() {
        return (RowIterator) getAttributeInternal(SVCCMWOTR);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link SvcCmWoLot.
     */
    public RowIterator getSvcCmWoLot() {
        return (RowIterator) getAttributeInternal(SVCCMWOLOT);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link SvcCmWoBin.
     */
    public RowIterator getSvcCmWoBin() {
        return (RowIterator) getAttributeInternal(SVCCMWOBIN);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link SvcCmWoSr.
     */
    public RowIterator getSvcCmWoSr() {
        return (RowIterator) getAttributeInternal(SVCCMWOSR);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovItmDescVO1.
     */
    public RowSet getLovItmDescVO1() {
        return (RowSet) getAttributeInternal(LOVITMDESCVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovUomIdVO1.
     */
    public RowSet getLovUomIdVO1() {
        return (RowSet) getAttributeInternal(LOVUOMIDVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovDiscTypeVO1.
     */
    public RowSet getLovDiscTypeVO1() {
        return (RowSet) getAttributeInternal(LOVDISCTYPEVO1);
    }
}

