package svcdefectsapp.model.services;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import svcdefectsapp.model.services.common.SvcDefectsAM;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Nov 03 11:53:29 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SvcDefectsAMImpl extends ApplicationModuleImpl implements SvcDefectsAM {
    /**
     * This is the default constructor (do not remove).
     */
    public String cldId() {
        return resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
    }

    public Integer slocId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
    }

    public String orgId() {
        return resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
    }

    public Integer usrId() {

        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
    }

    public String hoOrgId() {

        return resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
    }

    public SvcDefectsAMImpl() {
    }

    /**
     * Container's getter for SvcDfctType.
     * @return SvcDfctType
     */
    public ViewObjectImpl getSvcDfctType() {
        return (ViewObjectImpl) findViewObject("SvcDfctType");
    }

    /**
     * Container's getter for SvcDfct.
     * @return SvcDfct
     */
    public ViewObjectImpl getSvcDfct() {
        return (ViewObjectImpl) findViewObject("SvcDfct");
    }

    /**
     * Container's getter for FkSvcDfctVL1.
     * @return FkSvcDfctVL1
     */
    public ViewLinkImpl getFkSvcDfctVL1() {
        return (ViewLinkImpl) findViewLink("FkSvcDfctVL1");
    }

    /**
     * Container's getter for SvcDfctType1.
     * @return SvcDfctType1
     */
    public ViewObjectImpl getSvcDfctType1() {
        return (ViewObjectImpl) findViewObject("SvcDfctType1");
    }

    /**
     * Container's getter for SvcDfct1.
     * @return SvcDfct1
     */
    public ViewObjectImpl getSvcDfct1() {
        return (ViewObjectImpl) findViewObject("SvcDfct1");
    }

    /**
     * Container's getter for TransSearch1.
     * @return TransSearch1
     */
    public ViewObjectImpl getTransSearch() {
        return (ViewObjectImpl) findViewObject("TransSearch");
    }

    public void searchDfctAction() {
        //this.filterDefectType();
        ViewCriteria vc = this.getSvcDfctType().getViewCriteria("SvcDfctTypeVOCriteria");
        String WId = null;
        ViewObjectImpl srch = this.getTransSearch();
        Row currentRow = srch.getCurrentRow();
        System.out.println("TransDefectTypeeeeeeeeeeeeee-----" + currentRow.getAttribute("TransDfctTypeNm"));
        if (currentRow.getAttribute("TransDfctTypeNm") != null) {
            WId = currentRow.getAttribute("TransDfctTypeNm").toString();
            this.getSvcDfctType().setNamedWhereClauseParam("BindDfctType", WId);
            this.getSvcDfctType().setNamedWhereClauseParam("BindCldId",
                                                           resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
            this.getSvcDfctType().setNamedWhereClauseParam("BindHoOrgId",
                                                           resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString());
            this.getSvcDfctType().setNamedWhereClauseParam("BindSlocId",
                                                           Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString()));
        } else {
            this.getSvcDfctType().setNamedWhereClauseParam("BindDfctType", WId);
            this.getSvcDfctType().setNamedWhereClauseParam("BindCldId",
                                                           resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
            this.getSvcDfctType().setNamedWhereClauseParam("BindHoOrgId",
                                                           resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString());
            this.getSvcDfctType().setNamedWhereClauseParam("BindSlocId",
                                                           Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString()));
        }
        this.getSvcDfctType().applyViewCriteria(vc);
        this.getSvcDfctType().executeQuery();
        //

    }

    public void resetAction() {
        //this.filterDefectType();
        ViewCriteria vc = this.getSvcDfctType().getViewCriteria("SvcDfctTypeVOCriteria");
        /*  this.getWarehouseSearch1().getCurrentRow().setAttribute("WhId", null);
        this.getWarehouseSearch1().executeQuery(); */
        this.getSvcDfctType().setNamedWhereClauseParam("BindDfctType", null);
        this.getSvcDfctType().setNamedWhereClauseParam("BindCldId",
                                                       resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
        this.getSvcDfctType().setNamedWhereClauseParam("BindHoOrgId",
                                                       resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString());
        this.getSvcDfctType().setNamedWhereClauseParam("BindSlocId",
                                                       Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString()));
        this.getSvcDfctType().applyViewCriteria(vc);
        this.getSvcDfctType().executeQuery();
        //

    }

    public String duplicateDfectType(String nm) {
        String nm1 = nm.toUpperCase();
        int count = 0;
        ViewObjectImpl view = this.getSvcDfctType();
        //Row []r1=view.getAllRowsInRange();
        RowQualifier rq = new RowQualifier(view);
        rq.setWhereClause("HoOrgId='" + this.getSvcDfctType().getCurrentRow().getAttribute("HoOrgId") +
                          "' and CldId ='" + this.getSvcDfctType().getCurrentRow().getAttribute("CldId") +
                          "' and SlocId=" + this.getSvcDfctType().getCurrentRow().getAttribute("SlocId") + " ");
        Row[] rr = view.getFilteredRows(rq);
        System.out.println(rq.getExprStr() + "    " + rr.length);
        if (rr.length > 0) {
            for (Row rr1 : rr) {
                String nm2 = rr1.getAttribute("DfctTypeNm").toString();
                if (nm1.equalsIgnoreCase(nm2)) {
                    count = count + 1;
                }
            }
        }
        System.out.println("Count    ::: " + count);
        if (count > 1) {
            return "Y";
        } else {
            return "N";
        }
    }


    public String filterDefectType() {
        ViewObjectImpl vo = this.getSvcDfctType();
        ViewCriteria vc = vo.getViewCriteria("SvcDfctTypeVOCriteria1");
        vo.applyViewCriteria(vc);
        vo.setNamedWhereClauseParam("CldIdBind", resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
        vo.setNamedWhereClauseParam("HoOrgIdBind", resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString());
        vo.setNamedWhereClauseParam("SlocIdBind",
                                    Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString()));
        vo.executeQuery();
        return null;

    }

    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }

    public String duplicateDfectNm(String nm) {
        String nm1 = nm.toUpperCase();
        int count = 0;
        ViewObjectImpl view = this.getSvcDfct1();
        //Row []r1=view.getAllRowsInRange();
        RowQualifier rq = new RowQualifier(view);
        rq.setWhereClause("HoOrgId='" + this.getSvcDfctType().getCurrentRow().getAttribute("HoOrgId") +
                          "' and CldId ='" + this.getSvcDfctType().getCurrentRow().getAttribute("CldId") +
                          "' and SlocId=" + this.getSvcDfctType().getCurrentRow().getAttribute("SlocId") + " ");
        Row[] rr = view.getFilteredRows(rq);
        System.out.println(rq.getExprStr() + "    " + rr.length);
        if (rr.length > 0) {
            for (Row rr1 : rr) {
                String nm2 = rr1.getAttribute("DfctNm").toString();
                if (nm1.equalsIgnoreCase(nm2)) {
                    count = count + 1;
                }
            }
        }
        System.out.println("Count    ::: " + count);
        if (count > 1) {
            return "Y";
        } else {
            return "N";
        }
    }

}

