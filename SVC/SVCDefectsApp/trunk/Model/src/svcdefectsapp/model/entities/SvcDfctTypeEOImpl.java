package svcdefectsapp.model.entities;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Timestamp;

import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import oracle.jbo.AttributeList;
import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Nov 03 14:20:44 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SvcDfctTypeEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CldId,
        SlocId,
        HoOrgId,
        DfctTypeId,
        DfctTypeNm,
        Actv,
        UsrIdCrt,
        CrtDt,
        UsrIdMod,
        ModDt,
        SvcDfct;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }

    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int DFCTTYPEID = AttributesEnum.DfctTypeId.index();
    public static final int DFCTTYPENM = AttributesEnum.DfctTypeNm.index();
    public static final int ACTV = AttributesEnum.Actv.index();
    public static final int USRIDCRT = AttributesEnum.UsrIdCrt.index();
    public static final int CRTDT = AttributesEnum.CrtDt.index();
    public static final int USRIDMOD = AttributesEnum.UsrIdMod.index();
    public static final int MODDT = AttributesEnum.ModDt.index();
    public static final int SVCDFCT = AttributesEnum.SvcDfct.index();

    /**
     * This is the default constructor (do not remove).
     */
    public SvcDfctTypeEOImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("svcdefectsapp.model.entities.SvcDfctTypeEO");
    }

    /**
     * Gets the attribute value for CldId, using the alias name CldId.
     * @return the value of CldId
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CldId.
     * @param value value to set the CldId
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for SlocId, using the alias name SlocId.
     * @return the value of SlocId
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for SlocId.
     * @param value value to set the SlocId
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for HoOrgId, using the alias name HoOrgId.
     * @return the value of HoOrgId
     */
    public String getHoOrgId() {
        return (String) getAttributeInternal(HOORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for HoOrgId.
     * @param value value to set the HoOrgId
     */
    public void setHoOrgId(String value) {
        setAttributeInternal(HOORGID, value);
    }

    /**
     * Gets the attribute value for DfctTypeId, using the alias name DfctTypeId.
     * @return the value of DfctTypeId
     */
    public Integer getDfctTypeId() {
        return (Integer) getAttributeInternal(DFCTTYPEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for DfctTypeId.
     * @param value value to set the DfctTypeId
     */
    public void setDfctTypeId(Integer value) {
        setAttributeInternal(DFCTTYPEID, value);
    }

    /**
     * Gets the attribute value for DfctTypeNm, using the alias name DfctTypeNm.
     * @return the value of DfctTypeNm
     */
    public String getDfctTypeNm() {
        return (String) getAttributeInternal(DFCTTYPENM);
    }

    /**
     * Sets <code>value</code> as the attribute value for DfctTypeNm.
     * @param value value to set the DfctTypeNm
     */
    public void setDfctTypeNm(String value) {
        setAttributeInternal(DFCTTYPENM, value);
    }

    /**
     * Gets the attribute value for Actv, using the alias name Actv.
     * @return the value of Actv
     */
    public String getActv() {
        return (String) getAttributeInternal(ACTV);
    }

    /**
     * Sets <code>value</code> as the attribute value for Actv.
     * @param value value to set the Actv
     */
    public void setActv(String value) {
        setAttributeInternal(ACTV, value);
    }

    /**
     * Gets the attribute value for UsrIdCrt, using the alias name UsrIdCrt.
     * @return the value of UsrIdCrt
     */
    public Integer getUsrIdCrt() {
        return (Integer) getAttributeInternal(USRIDCRT);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdCrt.
     * @param value value to set the UsrIdCrt
     */
    public void setUsrIdCrt(Integer value) {
        setAttributeInternal(USRIDCRT, value);
    }

    /**
     * Gets the attribute value for CrtDt, using the alias name CrtDt.
     * @return the value of CrtDt
     */
    public Timestamp getCrtDt() {
        return (Timestamp) getAttributeInternal(CRTDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for CrtDt.
     * @param value value to set the CrtDt
     */
    public void setCrtDt(Timestamp value) {
        setAttributeInternal(CRTDT, value);
    }

    /**
     * Gets the attribute value for UsrIdMod, using the alias name UsrIdMod.
     * @return the value of UsrIdMod
     */
    public Integer getUsrIdMod() {
        return (Integer) getAttributeInternal(USRIDMOD);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdMod.
     * @param value value to set the UsrIdMod
     */
    public void setUsrIdMod(Integer value) {
        setAttributeInternal(USRIDMOD, value);
    }

    /**
     * Gets the attribute value for ModDt, using the alias name ModDt.
     * @return the value of ModDt
     */
    public Timestamp getModDt() {
        return (Timestamp) getAttributeInternal(MODDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for ModDt.
     * @param value value to set the ModDt
     */
    public void setModDt(Timestamp value) {
        setAttributeInternal(MODDT, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getSvcDfct() {
        return (RowIterator) getAttributeInternal(SVCDFCT);
    }


    /**
     * @param cldId key constituent
     * @param slocId key constituent
     * @param hoOrgId key constituent
     * @param dfctTypeId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(String cldId, Integer slocId, String hoOrgId, Integer dfctTypeId) {
        return new Key(new Object[] { cldId, slocId, hoOrgId, dfctTypeId });
    }

    /**
     * Method to call a Database function
     * @param sqlReturnType
     * @param stmt
     * @param bindVars
     * @return
     */
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                    //System.out.println("___________:"+bindVars[z]);
                }
            }
            st.executeUpdate();
            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                }
            }
        }
    }

    /**
     * For resolving the El
     */
      public Object resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        return valueExp.getValue(elContext);
        
    } 
    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        String cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        String hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        setSlocId(slocId);
        setCldId(cldId.toString());
        setHoOrgId(hoOrgId.toString());
        setUsrIdCrt(userId);
        setCrtDt(new Timestamp(System.currentTimeMillis()));
      //  setCrtDt(new oracle.jbo.domain.Timestamp(System.currentTimeMillis()));
        //setModDt(new oracle.jbo.domain.Timestamp(System.currentTimeMillis()));

        Integer dfctTypeId = 0;
         try {
           dfctTypeId = (Integer) callStoredFunction(Types.INTEGER, "SVC.SVC_GEN_ID(?,?,?,?,?,?)", new Object[] {
                                                     cldId, slocId, hoOrgId, orgId,
                                                     "SVC$DFCT$TYPE", null
           });
          // setDfctTypeId(dfctTypeId);
        } catch (Exception e) {
           FacesMessage message =
               new FacesMessage("There have been an error in seting create parameters in SVC_GEN_ID!");
           message.setSeverity(FacesMessage.SEVERITY_ERROR);
           FacesContext.getCurrentInstance().addMessage(null, message);
        }

        
        setDfctTypeId(dfctTypeId);
        System.out.println("all values are set");
        super.create(attributeList);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
      //  super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        if(operation ==DML_UPDATE){
            Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
            setUsrIdMod(userId);
            setModDt(new Timestamp(System.currentTimeMillis()));
        }
        super.doDML(operation, e);
    }
}

