package svcscpricesetup.model.services;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import svcscpricesetup.model.services.common.SvcScPriceAM;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Jun 25 18:40:31 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SvcScPriceAMImpl extends ApplicationModuleImpl implements SvcScPriceAM {
    /**
     * This is the default constructor (do not remove).
     */
    ADFLogger adfLog = (ADFLogger) ADFLogger.createADFLogger(SvcScPriceAMImpl.class);

    public SvcScPriceAMImpl() {
    }

    String cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
    Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
    String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
    Integer usrId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
    String hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();

    /**
     * Container's getter for SvcScPriceSetup.
     * @return SvcScPriceSetup
     */

    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }

    public ViewObjectImpl getSvcScPriceSetup() {
        return (ViewObjectImpl) findViewObject("SvcScPriceSetup");
    }

    /**
     * Container's getter for SvcScPriceSetupItm.
     * @return SvcScPriceSetupItm
     */
    public ViewObjectImpl getSvcScPriceSetupItm() {
        return (ViewObjectImpl) findViewObject("SvcScPriceSetupItm");
    }

    /**
     * Container's getter for ScPriceSetupToScSetupItmVL1.
     * @return ScPriceSetupToScSetupItmVL1
     */
    public ViewLinkImpl getScPriceSetupToScSetupItmVL1() {
        return (ViewLinkImpl) findViewLink("ScPriceSetupToScSetupItmVL1");
    }

    public void priceNoGenerate() {

        Row curr = this.getSvcScPriceSetup().getCurrentRow();
        String ret = null;
        if (curr != null) {
            //Integer fyid = (Integer) curr.getAttribute("FyId");
            if (curr.getAttribute("SetupNo") != null) {

            } else {
                ret = (String) (callStoredFunction(Types.VARCHAR, "SVC.SVC_GEN_ID(?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                   cldId, slocId, hoOrgId, orgId, "SVC$SC$PRICE$SETUP", null, 23011,
                                                   null, null, null
                }));
                if (ret != null) {
                    curr.setAttribute("SetupNo", ret);
                    // curr.setAttribute("ScNo", ret);
                }
            }
        }
    }


    public String getWfNo(Integer sloc_id, String cld_id, String org_id, Integer doc_no) {
        try {
            //  System.out.println("Getting wfNo.");
            Object obj = callStoredFunction(Types.VARCHAR, "APP.WF_GET_ID(?,?,?,?,?)", new Object[] {
                                            sloc_id, cld_id, org_id, doc_no, 0
            });
            return obj.toString();
        } catch (Exception e) {
            return "0";
        }

    }


    private static int INTEGER = Types.NUMERIC;
    private static int DATE = Types.DATE;
    private static int STRING = Types.VARCHAR;
    private static int NUMBER = Types.NUMERIC;


    //Function call for Get User Level
    public Integer getUsrLvl(Integer SlocId, String CldId, String OrgId, Integer usr_id, String WfNum,
                             String RfqDocId) {
        // System.out.println("Getting user level");
        return Integer.parseInt(callStoredFunction(NUMBER, "APP.WF_GET_USR_LEVEL(?,?,?,?,?,?,?)", new Object[] {
                                                   SlocId, CldId, OrgId, usr_id, WfNum, RfqDocId, 0
    }).toString());


    }


    //Function to insert into TXN table
    public Integer insIntoTxn(Integer sloc_id, String cld_id, String pOrgId, Integer RFQ_DOC_NO, String WfNum,
                              Integer usr_idFrm, Integer usr_idTo, Integer levelTo, Integer levelFrm, String action,
                              String remark, Number amount) {
        // System.out.println("Insert into txn");
        String rfqDocId = getSvcScPriceSetup().getCurrentRow().getAttribute("DocId").toString();
        //  System.out.println("sloc_id "+sloc_id+"cld_id   "+cld_id+"pOrgId   "+pOrgId+"PO_DOC_NO   "+RFQ_DOC_NO+"WfNum "+WfNum+"poDocId "+rfqDocId+"usr_idFrm  "+usr_idFrm+"usr_idTo   "+usr_idTo+"levelFrm "+levelFrm+"levelTo  "+levelTo+"action  "+action+"remark  "+remark+"amount"+amount);
        return Integer.parseInt(callStoredFunction(NUMBER, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                   sloc_id, cld_id, pOrgId, RFQ_DOC_NO, 0, WfNum, rfqDocId, usr_idFrm,
                                                   usr_idTo, levelFrm, levelTo, action, remark, amount
    }).toString());

    }


    //Function to get Pending User

    public Integer pendingCheck(Integer SlocId, String CldId, String OrgId, Integer RfqDocNo) {

        String docIdTxn = getSvcScPriceSetup().getCurrentRow().getAttribute("DocId").toString();
        //System.out.println("DOCIDTXN--"+docIdTxn);
        Object obj = callStoredFunction(NUMBER, "APP.PKG_APP_WF.GET_DOC_WF_CUR_USR(?,?,?,?,?)", new Object[] {
                                        SlocId, CldId, OrgId, RfqDocNo, docIdTxn
        });
        Integer usrId = null;
        if (obj != null) {
            usrId = Integer.parseInt(obj.toString());
        }
        //  System.out.println("User id pending in impl--"+usrId);
        return usrId;

    }

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.executeUpdate();

            return st.getObject(1);
        } catch (SQLException e) {
            e.printStackTrace();
            int end = e.getMessage().indexOf("\n");
            //  throw new JboException(e.getMessage().substring(11, end));
            String msg = e.getMessage();
            FacesMessage ermsg = new FacesMessage(msg);
            ermsg.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, ermsg);
            //  throw new JboException(e);

            return null;
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    public String resetValue() {
        Row curr = this.getSvcScPriceSetup().getCurrentRow();
        String locFlg = curr.getAttribute("LocFlg").toString();
        String gpFlg = curr.getAttribute("GrpFlg").toString();
        String eoflg = curr.getAttribute("EoFlg").toString();

        if (locFlg.equalsIgnoreCase("N")) {
            curr.setAttribute("AddsLocId", null);
            curr.setAttribute("AddsLblId", null);
            curr.setAttribute("TransLocId", null);
            curr.setAttribute("TransLblId", null);
        }
        if (gpFlg.equalsIgnoreCase("N")) {
            curr.setAttribute("TransItmGrp", null);
            curr.setAttribute("GrpId", null);
            curr.setAttribute("ApplyToSubGrp", null);
        }
        if (eoflg.equalsIgnoreCase("N")) {
            //EoId
            curr.setAttribute("EoId", null);
            curr.setAttribute("EoType", null);
            curr.setAttribute("EoCat", null);
            curr.setAttribute("TransEoNm", null);
            curr.setAttribute("ApplyToEoCat", null);
            // curr.setAttribute("EoCat", null);

        }
        return null;
    }

    /**
     * Container's getter for SvcScSearchPrice1.
     * @return SvcScSearchPrice1
     */
    public ViewObjectImpl getSvcScSearchPrice() {
        return (ViewObjectImpl) findViewObject("SvcScSearchPrice");
    }

    /**
     * Container's getter for TransSearch1.
     * @return TransSearch1
     */
    public ViewObjectImpl getTransSearch() {
        return (ViewObjectImpl) findViewObject("TransSearch");
    }

    public void seAuthStat() {
        System.out.println("caling seAuthStat method-------------------");
        
        String wfId = resolvEl("#{pageFlowScope.wfReturn}").toString();
        adfLog.info("----wf Id ---"+wfId);
        if ("A".equalsIgnoreCase(wfId)) {
            Row curr = this.getSvcScPriceSetup().getCurrentRow();
            if (wfId != null) {
                //need to call function here
       //         System.out.println("caling seAuthStat method-------------------");
           Integer      ret = (Integer) (callStoredFunction(Types.INTEGER, "SVC.FN_INS_ITM_PRICE(?,?,?,?,?)", new Object[] {
                                                   cldId, slocId, hoOrgId, orgId, curr.getAttribute("DocId").toString()}));
           
           adfLog.info("--------------docid-----"+curr.getAttribute("DocId"));
                curr.setAttribute("AuthStat", "Y");
                curr.setAttribute("AuthDt", new Timestamp(System.currentTimeMillis()));
                curr.setAttribute("DocStat", 153);
                //curr.setAttribute("DocStat", arg1);
            }

        } else if ("F".equalsIgnoreCase(wfId)) {
            Row curr = this.getSvcScPriceSetup().getCurrentRow();
            if (wfId != null) {
                curr.setAttribute("DocStat", 152);
                //curr.setAttribute("DocStat", arg1);
            }
        }
    }

    public void insertIntoItmPrice() 
    {
        // FN_INS_SC_PRC_SET_ITM
        Row curr = this.getSvcScPriceSetup().getCurrentRow();
        String ret = null;
        if(curr!=null){
        adfLog.info(cldId + " " + slocId + " " + hoOrgId + " " + orgId + curr.getAttribute("DocId") + " " +
                    curr.getAttribute("AddsLocId") + " " + curr.getAttribute("GrpId") + " " +
                    curr.getAttribute("ItmId") + curr.getAttribute("PriceType") + " " + curr.getAttribute("PriceVal") +
                    " " + curr.getAttribute("LocFlg") + " " + curr.getAttribute("EoFlg") + " " +
                    curr.getAttribute("GrpFlg") + " " + curr.getAttribute("ApplyToSubGrp") + " " +
                    curr.getAttribute("EoId") + " " + curr.getAttribute("EoCat"));
        this.getDBTransaction().postChanges();
        ret = (String) (callStoredFunction(Types.VARCHAR, "SVC.FN_INS_SC_PRC_SET_ITM(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                           cldId, slocId, hoOrgId, orgId, curr.getAttribute("DocId"),
                                           curr.getAttribute("AddsLocId"), curr.getAttribute("GrpId"),
                                           curr.getAttribute("ItmId"), curr.getAttribute("PriceType"),
                                           curr.getAttribute("PriceVal"), curr.getAttribute("LocFlg"),
                                           curr.getAttribute("EoFlg"), curr.getAttribute("GrpFlg"),
                                           curr.getAttribute("ApplyToSubGrp"), curr.getAttribute("EoId"), curr.getAttribute("EoCat")
    }));
        }
        adfLog.info("current price" + ret);

        this.getSvcScPriceSetupItm().executeQuery();
    }

    public void search() {
System.out.println("inside search method ");
        String locId = (String) this.getTransSearch().getCurrentRow().getAttribute("TransLocation");
      //  System.out.println("Location Name" + this.getTransSearch().getCurrentRow().getAttribute("TransLocNm"));

        //   String eoId = this.getTransSearch().getCurrentRow().getAttribute("TransEoId").toString();
        //System.out.println("EO Id" + eoId);
        // String itmId = this.getTransSearch().getCurrentRow().getAttribute("TransItmId").toString();
        String lblId = (String) this.getTransSearch().getCurrentRow().getAttribute("TransLblId");
        System.out.println("Label Name" + this.getTransSearch().getCurrentRow().getAttribute("TransLblId"));
        Integer docStat = (Integer) this.getTransSearch().getCurrentRow().getAttribute("TransDocStat");
        System.out.println("Document Status " + docStat);
        String setUpNo = (String) this.getTransSearch().getCurrentRow().getAttribute("TransSetupNo");
        System.out.println("SetUp No" + setUpNo);
        String grpId = (String) this.getTransSearch().getCurrentRow().getAttribute("TransGroupId");
        
        System.out.println("parameters" + this.getTransSearch().getCurrentRow().getAttribute("TransGroupId"));
        adfLog.info(" passed values are -------"+locId+" "+ lblId+ " "+ docStat+" "+ setUpNo +" "+ grpId +" ...");
        ViewObjectImpl scvo = this.getSvcScSearchPrice();
        scvo.setNamedWhereClauseParam("bindCldId", cldId);
        scvo.setNamedWhereClauseParam("bindHoOrgId", hoOrgId);
        scvo.setNamedWhereClauseParam("bindSlocId", slocId);
        scvo.setNamedWhereClauseParam("bindOrgId", orgId);
        // scvo.setNamedWhereClauseParam("bindEoId", eoId);
        scvo.setNamedWhereClauseParam("bindItmId", null);
        scvo.setNamedWhereClauseParam("bindLocId", locId);
        scvo.setNamedWhereClauseParam("bindlblId", lblId);
        scvo.setNamedWhereClauseParam("bindSetupNo", setUpNo);
        scvo.setNamedWhereClauseParam("bindDocStat", docStat);
        scvo.setNamedWhereClauseParam("bindGrpId", grpId);
        scvo.setNamedWhereClauseParam("BindDate", this.getTransSearch().getCurrentRow().getAttribute("TransCrtDt"));
      //  System.out.println("date value----"+this.getTransSearch().getCurrentRow().getAttribute("TransCrtDt"));
        scvo.executeQuery();
    }

    public void reset() {
        ViewObjectImpl scvo = this.getSvcScSearchPrice();
        scvo.setNamedWhereClauseParam("bindCldId", cldId);
        scvo.setNamedWhereClauseParam("bindHoOrgId", hoOrgId);
        scvo.setNamedWhereClauseParam("bindSlocId", -1);
        scvo.setNamedWhereClauseParam("bindOrgId", orgId);
        //scvo.setNamedWhereClauseParam("bindEoId", -1);
        scvo.setNamedWhereClauseParam("bindItmId", null);
        scvo.setNamedWhereClauseParam("bindLocId", null);
        scvo.setNamedWhereClauseParam("bindlblId", null);
        scvo.executeQuery();
        this.getTransSearch().executeQuery();
        
    }

    public void ApplyCriteria() {
        ViewObjectImpl vo = this.getSvcScPriceSetup();
        String docid = resolvEl("#{pageFlowScope.Doc_Id}");
        adfLog.info("current docId is " + docid);
        ViewCriteria vc = vo.getViewCriteria("SvcScPriceSetupVOCriteria");
        vo.applyViewCriteria(vc);
        vo.setNamedWhereClauseParam("bindCldId", cldId);
        vo.setNamedWhereClauseParam("bindSlocId", slocId);
        vo.setNamedWhereClauseParam("bindOrgId", orgId);
        vo.setNamedWhereClauseParam("bindHoOrgId", hoOrgId);
        vo.setNamedWhereClauseParam("bindDocId", docid);
        vo.executeQuery();
    }


    /**
     * Container's getter for LovAddsLbl1.
     * @return LovAddsLbl1
     */
    public ViewObjectImpl getLovAddsLbl() {
        return (ViewObjectImpl) findViewObject("LovAddsLbl");
    }

    /**
     * Container's getter for LovAppLblValue1.
     * @return LovAppLblValue1
     */
    public ViewObjectImpl getLovAppLblValue() {
        return (ViewObjectImpl) findViewObject("LovAppLblValue");
    }

    /**
     * Container's getter for LovCustomer1.
     * @return LovCustomer1
     */
    public ViewObjectImpl getLovCustomer() {
        return (ViewObjectImpl) findViewObject("LovCustomer");
    }

    /**
     * Container's getter for LovItmGrp1.
     * @return LovItmGrp1
     */
    public ViewObjectImpl getLovItmGrp() {
        return (ViewObjectImpl) findViewObject("LovItmGrp");
    }

    /**
     * Container's getter for LovItmId1.
     * @return LovItmId1
     */
    public ViewObjectImpl getLovItmId() {
        return (ViewObjectImpl) findViewObject("LovItmId");
    }

    /**
     * Container's getter for Org1.
     * @return Org1
     */
    public ViewObjectImpl getOrg1() {
        return (ViewObjectImpl) findViewObject("Org1");
    }

    /**
     * Container's getter for LovPriceSetUpStat1.
     * @return LovPriceSetUpStat1
     */
    public ViewObjectImpl getLovPriceSetUpStat1() {
        return (ViewObjectImpl) findViewObject("LovPriceSetUpStat1");
    }
}

