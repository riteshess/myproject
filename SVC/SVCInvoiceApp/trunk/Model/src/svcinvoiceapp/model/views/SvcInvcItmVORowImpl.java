package svcinvoiceapp.model.views;

import java.sql.SQLException;

import oracle.jbo.domain.Timestamp;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.RowSet;
import oracle.jbo.domain.Number;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;

import svcinvoiceapp.model.entities.SvcInvcItmEOImpl;
import svcinvoiceapp.model.services.SVCInvoiceAMImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Oct 30 17:16:18 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SvcInvcItmVORowImpl extends ViewRowImpl {


    public static final int ENTITY_SVCINVCITMEO = 0;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CldId,
        DiscAmtBs,
        DiscAmtSp,
        DiscType,
        DiscVal,
        DocId,
        DocIdSrc,
        FocItm,
        HoOrgId,
        ItmAmtBs,
        ItmAmtSp,
        ItmId,
        ItmPrice,
        ItmQty,
        ItmUom,
        OrgId,
        SlocId,
        SvcItmFlg,
        TaxAmtBs,
        TaxAmtSp,
        TaxableAmtBs,
        TaxableAmtSp,
        transTaxableAmt,
        transItemName,
        transItmUomNm,
        transTotalAmount,
        PmtSchdlDt,
        SvcInvcTr,
        LovItmIdVO1,
        LovDiscTypeVO1,
        LovItmUomVO1;
        static AttributesEnum[] vals = null;
        ;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    protected String resolvEl(String data) {
            FacesContext fc = FacesContext.getCurrentInstance();
            Application app = fc.getApplication();
            ExpressionFactory elFactory = app.getExpressionFactory();
            ELContext elContext = fc.getELContext();
            ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
            String Message = valueExp.getValue(elContext).toString();
            return Message;
        }
   
   

    public  Number roundOffAmt(Number amt) {

        Integer amt_digit = 6;//Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}").toString());

        if (amt != null) {
            if (amt_digit != null) {

                return new Number(amt.round(amt_digit));

            } else {

                return new Number(amt.round(2));

            }
        } else {
            return new Number(0);
        }
    }

    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int DISCAMTBS = AttributesEnum.DiscAmtBs.index();
    public static final int DISCAMTSP = AttributesEnum.DiscAmtSp.index();
    public static final int DISCTYPE = AttributesEnum.DiscType.index();
    public static final int DISCVAL = AttributesEnum.DiscVal.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int DOCIDSRC = AttributesEnum.DocIdSrc.index();
    public static final int FOCITM = AttributesEnum.FocItm.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int ITMAMTBS = AttributesEnum.ItmAmtBs.index();
    public static final int ITMAMTSP = AttributesEnum.ItmAmtSp.index();
    public static final int ITMID = AttributesEnum.ItmId.index();
    public static final int ITMPRICE = AttributesEnum.ItmPrice.index();
    public static final int ITMQTY = AttributesEnum.ItmQty.index();
    public static final int ITMUOM = AttributesEnum.ItmUom.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int SVCITMFLG = AttributesEnum.SvcItmFlg.index();
    public static final int TAXAMTBS = AttributesEnum.TaxAmtBs.index();
    public static final int TAXAMTSP = AttributesEnum.TaxAmtSp.index();
    public static final int TAXABLEAMTBS = AttributesEnum.TaxableAmtBs.index();
    public static final int TAXABLEAMTSP = AttributesEnum.TaxableAmtSp.index();
    public static final int TRANSTAXABLEAMT = AttributesEnum.transTaxableAmt.index();
    public static final int TRANSITEMNAME = AttributesEnum.transItemName.index();
    public static final int TRANSITMUOMNM = AttributesEnum.transItmUomNm.index();
    public static final int TRANSTOTALAMOUNT = AttributesEnum.transTotalAmount.index();
    public static final int PMTSCHDLDT = AttributesEnum.PmtSchdlDt.index();
    public static final int SVCINVCTR = AttributesEnum.SvcInvcTr.index();
    public static final int LOVITMIDVO1 = AttributesEnum.LovItmIdVO1.index();
    public static final int LOVDISCTYPEVO1 = AttributesEnum.LovDiscTypeVO1.index();
    public static final int LOVITMUOMVO1 = AttributesEnum.LovItmUomVO1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public SvcInvcItmVORowImpl() {
    }

    /**
     * Gets SvcInvcItmEO entity object.
     * @return the SvcInvcItmEO
     */
    public SvcInvcItmEOImpl getSvcInvcItmEO() {
        return (SvcInvcItmEOImpl) getEntity(ENTITY_SVCINVCITMEO);
    }

    /**
     * Gets the attribute value for CLD_ID using the alias name CldId.
     * @return the CLD_ID
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as attribute value for CLD_ID using the alias name CldId.
     * @param value value to set the CLD_ID
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for DISC_AMT_BS using the alias name DiscAmtBs.
     * @return the DISC_AMT_BS
     */
    public Number getDiscAmtBs() {
        return roundOffAmt((Number) getAttributeInternal(DISCAMTBS));
    }

    /**
     * Sets <code>value</code> as attribute value for DISC_AMT_BS using the alias name DiscAmtBs.
     * @param value value to set the DISC_AMT_BS
     */
    public void setDiscAmtBs(Number value) {
        setAttributeInternal(DISCAMTBS, value);
    }

    /**
     * Gets the attribute value for DISC_AMT_SP using the alias name DiscAmtSp.
     * @return the DISC_AMT_SP
     */
    public Number getDiscAmtSp() {
        return roundOffAmt((Number) getAttributeInternal(DISCAMTSP));
    }

    /**
     * Sets <code>value</code> as attribute value for DISC_AMT_SP using the alias name DiscAmtSp.
     * @param value value to set the DISC_AMT_SP
     */
    public void setDiscAmtSp(Number value) {
       setAttributeInternal(DISCAMTSP, value);
    }

    /**
     * Gets the attribute value for DISC_TYPE using the alias name DiscType.
     * @return the DISC_TYPE
     */
    public String getDiscType() {
        return (String) getAttributeInternal(DISCTYPE);
    }

    /**
     * Sets <code>value</code> as attribute value for DISC_TYPE using the alias name DiscType.
     * @param value value to set the DISC_TYPE
     */
    public void setDiscType(String value) {
        setAttributeInternal(DISCTYPE, value);
    }

    /**
     * Gets the attribute value for DISC_VAL using the alias name DiscVal.
     * @return the DISC_VAL
     */
    public Number getDiscVal() {
        if(getAttributeInternal(DISCVAL)!=null){
        return (Number) getAttributeInternal(DISCVAL);
        }else{
            setDiscVal(new Number(0));
            setDiscAmtSp(new Number(0));
            setDiscAmtBs(new Number(0));
            return new Number(0);
        }
    }

    /**
     * Sets <code>value</code> as attribute value for DISC_VAL using the alias name DiscVal.
     * @param value value to set the DISC_VAL
     */
    public void setDiscVal(Number value) {
        if (value != null) {
            SVCInvoiceAMImpl am = (SVCInvoiceAMImpl) this.getApplicationModule();
            Number oldTaxableAmt = (Number) am.getSvcInvcItm().getCurrentRow().getAttribute("TaxableAmtSp");
            Number currFact = (Number)am.getSvcInvc1().getCurrentRow().getAttribute("CurrConvFctr");
            //    System.out.println("oldTaxableAmt:::"+oldTaxableAmt);
            Number newTaxableAmt = new Number(0);
            Number newTotalAmt = new Number(0);
            //Number discountValue=getDiscVal();
            //  System.out.println("discountValue:::"+value);
            Number discAmt = getDiscAmtSp();
            //System.out.println("discAmt:::"+discAmt);
            Number taxAmt = new Number(0);
            ViewObjectImpl ItmSrcVo = am.getSvcInvcSrc();
        String taxAftrDiscFlg = "Y";
        if(ItmSrcVo.getCurrentRow().getAttribute("TaxAfterDiscFlg")!=null)
            taxAftrDiscFlg = ItmSrcVo.getCurrentRow().getAttribute("TaxAfterDiscFlg").toString();
            //System.out.println("taxAftrDiscFlg:::"+taxAftrDiscFlg);
            
            String discType = getDiscType();
            //System.out.println("discType:::"+discType);
            if (taxAftrDiscFlg.equalsIgnoreCase("Y")) {
                if (discType.equalsIgnoreCase("A") && getItmQty()!=null &&  getItmPrice()!=null) {
                    newTaxableAmt = roundOffAmt((Number) (getItmQty().multiply(getItmPrice())).minus(value));
                    discAmt = roundOffAmt((Number) (getItmQty().multiply(getItmPrice())).minus(newTaxableAmt));
                    newTotalAmt = newTaxableAmt.add(taxAmt);
                } else if (discType.equalsIgnoreCase("P")  && getItmQty()!=null &&  getItmPrice()!=null) {
                    discAmt =
                        roundOffAmt(((getItmQty().multiply(getItmPrice())).multiply(value)).divide(new Number(100)));
                    newTaxableAmt = roundOffAmt((Number) (getItmQty().multiply(getItmPrice())).minus(discAmt));
                    newTotalAmt = newTaxableAmt.add(taxAmt);
                }
                setDiscAmtSp(discAmt);
                setTaxableAmtSp(newTaxableAmt);
                settransTotalAmount(newTotalAmt);
                setItmAmtSp(newTotalAmt);
                setTaxAmtSp(new Number(0));
                setDiscAmtBs(discAmt.multiply(currFact));
            } else if (taxAftrDiscFlg.equalsIgnoreCase("N")) {
                if (discType.equalsIgnoreCase("A")  && getItmQty()!=null &&  getItmPrice()!=null) {
                    newTaxableAmt = roundOffAmt(getItmQty().multiply(getItmPrice()));
                    discAmt = value;
                    try {
                        newTotalAmt = (Number) ((newTaxableAmt.minus(discAmt)).add(taxAmt));
                    } catch (SQLException sqlex) {
                        sqlex.printStackTrace();
                    }
                } else if (discType.equalsIgnoreCase("P")  && getItmQty()!=null &&  getItmPrice()!=null) {
                    discAmt =
                        roundOffAmt(((getItmQty().multiply(getItmPrice())).multiply(value)).divide(new Number(100)));
                    newTaxableAmt = roundOffAmt(getItmQty().multiply(getItmPrice()));
                    newTotalAmt = (Number) newTaxableAmt.minus(discAmt);
                }
                setDiscAmtSp(discAmt);
                setTaxableAmtSp(newTaxableAmt);
                settransTotalAmount(newTotalAmt);
                setItmAmtSp(newTotalAmt);
                setTaxAmtSp(new Number(0));
                setDiscAmtBs(discAmt.multiply(currFact));
                
            }
        } 
        /*  else {
            setAttributeInternal(DISCVAL, new Number(0));
        } */
        setAttributeInternal(DISCVAL, value);
    }

    /**
     * Gets the attribute value for DOC_ID using the alias name DocId.
     * @return the DOC_ID
     */
    public String getDocId() {
        return (String) getAttributeInternal(DOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for DOC_ID using the alias name DocId.
     * @param value value to set the DOC_ID
     */
    public void setDocId(String value) {
        setAttributeInternal(DOCID, value);
    }

    /**
     * Gets the attribute value for DOC_ID_SRC using the alias name DocIdSrc.
     * @return the DOC_ID_SRC
     */
    public String getDocIdSrc() {
        return (String) getAttributeInternal(DOCIDSRC);
    }

    /**
     * Sets <code>value</code> as attribute value for DOC_ID_SRC using the alias name DocIdSrc.
     * @param value value to set the DOC_ID_SRC
     */
    public void setDocIdSrc(String value) {
        setAttributeInternal(DOCIDSRC, value);
    }

    /**
     * Gets the attribute value for FOC_ITM using the alias name FocItm.
     * @return the FOC_ITM
     */
    public String getFocItm() {
        return (String) getAttributeInternal(FOCITM);
    }

    /**
     * Sets <code>value</code> as attribute value for FOC_ITM using the alias name FocItm.
     * @param value value to set the FOC_ITM
     */
    public void setFocItm(String value) {
        setAttributeInternal(FOCITM, value);
    }

    /**
     * Gets the attribute value for HO_ORG_ID using the alias name HoOrgId.
     * @return the HO_ORG_ID
     */
    public String getHoOrgId() {
        return (String) getAttributeInternal(HOORGID);
    }

    /**
     * Sets <code>value</code> as attribute value for HO_ORG_ID using the alias name HoOrgId.
     * @param value value to set the HO_ORG_ID
     */
    public void setHoOrgId(String value) {
        setAttributeInternal(HOORGID, value);
    }

    /**
     * Gets the attribute value for ITM_AMT_BS using the alias name ItmAmtBs.
     * @return the ITM_AMT_BS
     */
    public Number getItmAmtBs() {
        return roundOffAmt((Number) getAttributeInternal(ITMAMTBS));
    }

    /**
     * Sets <code>value</code> as attribute value for ITM_AMT_BS using the alias name ItmAmtBs.
     * @param value value to set the ITM_AMT_BS
     */
    public void setItmAmtBs(Number value) {
        setAttributeInternal(ITMAMTBS, value);
    }

    /**
     * Gets the attribute value for ITM_AMT_SP using the alias name ItmAmtSp.
     * @return the ITM_AMT_SP
     */
    public Number getItmAmtSp() {
        return roundOffAmt((Number) getAttributeInternal(ITMAMTSP));
    }

    /**
     * Sets <code>value</code> as attribute value for ITM_AMT_SP using the alias name ItmAmtSp.
     * @param value value to set the ITM_AMT_SP
     */
    public void setItmAmtSp(Number value) {
        setAttributeInternal(ITMAMTSP, value);
    }

    /**
     * Gets the attribute value for ITM_ID using the alias name ItmId.
     * @return the ITM_ID
     */
    public String getItmId() {
        return (String) getAttributeInternal(ITMID);
    }

    /**
     * Sets <code>value</code> as attribute value for ITM_ID using the alias name ItmId.
     * @param value value to set the ITM_ID
     */
    public void setItmId(String value) {
        setAttributeInternal(ITMID, value);
    }

    /**
     * Gets the attribute value for ITM_PRICE using the alias name ItmPrice.
     * @return the ITM_PRICE
     */
    public oracle.jbo.domain.Number getItmPrice() {
       
        return roundOffAmt((Number) getAttributeInternal(ITMPRICE));
    }

    /**
     * Sets <code>value</code> as attribute value for ITM_PRICE using the alias name ItmPrice.
     * @param value value to set the ITM_PRICE
     */
    public void setItmPrice(Number value) {
        if(value!=null && getItmQty()!=null){
            Number taxableAmt=roundOffAmt((Number)(value.multiply(getItmQty())));
            settransTaxableAmt(taxableAmt);
        }
        setAttributeInternal(ITMPRICE, value);
    }

    /**
     * Gets the attribute value for ITM_QTY using the alias name ItmQty.
     * @return the ITM_QTY
     */
    public Number getItmQty() {
       
        return (Number) getAttributeInternal(ITMQTY);
    }

    /**
     * Sets <code>value</code> as attribute value for ITM_QTY using the alias name ItmQty.
     * @param value value to set the ITM_QTY
     */
    public void setItmQty(Number value) {
        System.out.println("welcome in setItmQty::"+value);
        if(value!=null && getItmPrice()!=null){
            Number taxableAmt=roundOffAmt((Number)(value.multiply(getItmPrice())));
            settransTaxableAmt(taxableAmt);
        }
        setAttributeInternal(ITMQTY, value);
    }

    /**
     * Gets the attribute value for ITM_UOM using the alias name ItmUom.
     * @return the ITM_UOM
     */
    public String getItmUom() {
        return (String) getAttributeInternal(ITMUOM);
    }

    /**
     * Sets <code>value</code> as attribute value for ITM_UOM using the alias name ItmUom.
     * @param value value to set the ITM_UOM
     */
    public void setItmUom(String value) {
        setAttributeInternal(ITMUOM, value);
    }

    /**
     * Gets the attribute value for ORG_ID using the alias name OrgId.
     * @return the ORG_ID
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as attribute value for ORG_ID using the alias name OrgId.
     * @param value value to set the ORG_ID
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for SLOC_ID using the alias name SlocId.
     * @return the SLOC_ID
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for SLOC_ID using the alias name SlocId.
     * @param value value to set the SLOC_ID
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for SVC_ITM_FLG using the alias name SvcItmFlg.
     * @return the SVC_ITM_FLG
     */
    public String getSvcItmFlg() {
        return (String) getAttributeInternal(SVCITMFLG);
    }

    /**
     * Sets <code>value</code> as attribute value for SVC_ITM_FLG using the alias name SvcItmFlg.
     * @param value value to set the SVC_ITM_FLG
     */
    public void setSvcItmFlg(String value) {
        setAttributeInternal(SVCITMFLG, value);
    }

    /**
     * Gets the attribute value for TAX_AMT_BS using the alias name TaxAmtBs.
     * @return the TAX_AMT_BS
     */
    public Number getTaxAmtBs() {
        return roundOffAmt((Number) getAttributeInternal(TAXAMTBS));
    }

    /**
     * Sets <code>value</code> as attribute value for TAX_AMT_BS using the alias name TaxAmtBs.
     * @param value value to set the TAX_AMT_BS
     */
    public void setTaxAmtBs(Number value) {
        setAttributeInternal(TAXAMTBS, value);
    }

    /**
     * Gets the attribute value for TAX_AMT_SP using the alias name TaxAmtSp.
     * @return the TAX_AMT_SP
     */
    public Number getTaxAmtSp() {
        return roundOffAmt((Number) getAttributeInternal(TAXAMTSP));
    }

    /**
     * Sets <code>value</code> as attribute value for TAX_AMT_SP using the alias name TaxAmtSp.
     * @param value value to set the TAX_AMT_SP
     */
    public void setTaxAmtSp(Number value) {
        setAttributeInternal(TAXAMTSP, value);
    }

    /**
     * Gets the attribute value for TAXABLE_AMT_BS using the alias name TaxableAmtBs.
     * @return the TAXABLE_AMT_BS
     */
    public Number getTaxableAmtBs() {
        return roundOffAmt((Number) getAttributeInternal(TAXABLEAMTBS));
    }

    /**
     * Sets <code>value</code> as attribute value for TAXABLE_AMT_BS using the alias name TaxableAmtBs.
     * @param value value to set the TAXABLE_AMT_BS
     */
    public void setTaxableAmtBs(Number value) {
        setAttributeInternal(TAXABLEAMTBS, value);
    }

    /**
     * Gets the attribute value for TAXABLE_AMT_SP using the alias name TaxableAmtSp.
     * @return the TAXABLE_AMT_SP
     */
    public Number getTaxableAmtSp() {
        return roundOffAmt((Number) getAttributeInternal(TAXABLEAMTSP));
    }

    /**
     * Sets <code>value</code> as attribute value for TAXABLE_AMT_SP using the alias name TaxableAmtSp.
     * @param value value to set the TAXABLE_AMT_SP
     */
    public void setTaxableAmtSp(Number value) {
        setAttributeInternal(TAXABLEAMTSP, value);
    }
    public Object resolvElDC(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp =
        elFactory.createValueExpression(elContext, "#{data." + data + ".dataProvider}", Object.class);
        return valueExp.getValue(elContext);
        }

    /**
     * Gets the attribute value for the calculated attribute transTaxableAmt.
     * @return the transTaxableAmt
     */
    public Number gettransTaxableAmt() {
        

      //  System.out.println("in the getter of  TransSumTaxAmt");
        SVCInvoiceAMImpl am =  (SVCInvoiceAMImpl)this.getApplicationModule();
        RowQualifier rq=new RowQualifier(am.getSvcInvcItm());
               rq.setWhereClause("CldId='"+getCldId()+"' and SlocId="+getSlocId()+" and OrgId='"+getOrgId()+"' and DocId='"+getDocId()+"'");
               Row[] fr=am.getSvcInvcItm().getFilteredRows(rq);
              // System.out.println("fr lentgth:::"+fr.length);
               Number sum=new Number(0);
               if(fr.length>0)
               {
                   for(Row r:fr)
                   {
                       Number ItmQty=new Number(0);
                       Number ItmPrice=new Number(0);
                       if(r.getAttribute("ItmQty")!=null && r.getAttribute("ItmPrice")!=null)
                           ItmQty = (Number)r.getAttribute("ItmQty");
                           ItmPrice = (Number)r.getAttribute("ItmPrice");
                       sum=roundOffAmt(sum.add(ItmQty.multiply(ItmPrice)));
                       System.out.println("sum values are:::"+sum);
                       }
                       return sum;   
                   }
    return  roundOffAmt((Number) getAttributeInternal(TRANSTAXABLEAMT));
    }
     
    public void settransTaxableAmt(Number value) {
        setAttributeInternal(TRANSTAXABLEAMT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute transItemName.
     * @return the transItemName
     */
    public String gettransItemName() {
        if(getAttributeInternal(TRANSITEMNAME)!=null){
            return (String)getAttributeInternal(TRANSITEMNAME);
        }else{
            if(getItmId()!=null){
              SVCInvoiceAMImpl am =  (SVCInvoiceAMImpl)this.getApplicationModule();
              ViewObjectImpl itmvo=am.getLovItmId1();
                itmvo.setNamedWhereClauseParam("bindCldId",getCldId());
                itmvo.setNamedWhereClauseParam("bindSlocId",getSlocId());
                itmvo.setNamedWhereClauseParam("bindHoOrgId",getHoOrgId());
                itmvo.setNamedWhereClauseParam("bindOrgId",getOrgId());
                itmvo.setNamedWhereClauseParam("bindItmId",getItmId());
                itmvo.executeQuery();
                Row [] rr=itmvo.getFilteredRows("ItmId",getItmId());
                if(rr.length>0){
                    return rr[0].getAttribute("ItmDesc").toString();
                }
                
            }
            
        }
        return (String) getAttributeInternal(TRANSITEMNAME);
    }


    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute transItemName.
     * @param value value to set the  transItemName
     */
    public void settransItemName(String value) {
        setAttributeInternal(TRANSITEMNAME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute transItmUomNm.
     * @return the transItmUomNm
     */
    public String gettransItmUomNm() {
        return (String) getAttributeInternal(TRANSITMUOMNM);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute transItmUomNm.
     * @param value value to set the  transItmUomNm
     */
    public void settransItmUomNm(String value) {
        setAttributeInternal(TRANSITMUOMNM, value);
    }

    /**
     * Gets the attribute value for the calculated attribute transTotalAmount.
     * @return the transTotalAmount
     */
    public Number gettransTotalAmount() {
        return roundOffAmt((Number) getAttributeInternal(TRANSTOTALAMOUNT));
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute transTotalAmount.
     * @param value value to set the  transTotalAmount
     */
    public void settransTotalAmount(Number value) {
        setAttributeInternal(TRANSTOTALAMOUNT, value);
    }

    /**
     * Gets the attribute value for PMT_SCHDL_DT using the alias name PmtSchdlDt.
     * @return the PMT_SCHDL_DT
     */
    public Timestamp getPmtSchdlDt() {
        return (Timestamp) getAttributeInternal(PMTSCHDLDT);
    }

    /**
     * Sets <code>value</code> as attribute value for PMT_SCHDL_DT using the alias name PmtSchdlDt.
     * @param value value to set the PMT_SCHDL_DT
     */
    public void setPmtSchdlDt(Timestamp value) {
        setAttributeInternal(PMTSCHDLDT, value);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link SvcInvcTr.
     */
    public RowIterator getSvcInvcTr() {
        return (RowIterator) getAttributeInternal(SVCINVCTR);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovItmIdVO1.
     */
    public RowSet getLovItmIdVO1() {
        return (RowSet) getAttributeInternal(LOVITMIDVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovDiscTypeVO1.
     */
    public RowSet getLovDiscTypeVO1() {
        return (RowSet) getAttributeInternal(LOVDISCTYPEVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovItmUomVO1.
     */
    public RowSet getLovItmUomVO1() {
        return (RowSet) getAttributeInternal(LOVITMUOMVO1);
    }
}

