package svcinvoiceapp.model.views;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.RowSet;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;

import svcinvoiceapp.model.entities.SvcInvcEOImpl;
import svcinvoiceapp.model.services.SVCInvoiceAMImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Oct 29 11:56:08 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SvcInvcVORowImpl extends ViewRowImpl {

    public static final int ENTITY_SVCINVCEO = 0;
    ADFLogger adfLog = (ADFLogger) ADFLogger.createADFLogger(SvcInvcVORowImpl.class);

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        AddsIdBill,
        AuthStat,
        CldId,
        CoaId,
        CrtDt,
        CurrConvFctr,
        CurrIdSp,
        CustType,
        DiscAmtBs,
        DiscAmtSp,
        DocDt,
        DocId,
        DocStat,
        EoAddsText,
        EoId,
        EoNm,
        FyId,
        HoOrgId,
        InvcDt,
        InvcNo,
        InvcType,
        ModDt,
        OrgId,
        SlocId,
        TaxAmtBs,
        TaxAmtSp,
        TotAmtBs,
        TotAmtSp,
        UsrIdCrt,
        UsrIdMod,
        transInvcType,
        transCurrType,
        transCustAdds,
        transCoaNm,
        transDocName,
        LOVSWITCHER,
        transPayDate,
        transPayMode,
        transPayAmtSp,
        transTotalPayAmtSp,
        transDocId,
        transTaxableAmount,
        transCcId,
        transDocDate,
        transRemainingAmount,
        TransPmtAmtOverAll,
        TransPmtSchdlDt,
        TransTotalFoc,
        TransGlNum,
        SvcInvcSrc,
        SvcInvcPmtSchdl,
        SVCInvcCalc,
        LovInvcTypeVO1,
        LovCustomerVO1,
        LovCurrVO1,
        LovCustAddsVO1,
        LovCoaIdVO1,
        LovScDocIdVO1,
        LovWoDocIdVO1,
        LovDocStatusVO1,
        LovPayModeVO1,
        LovOrgVO1,
        LovUsrVO,
        LovScPmtSchdlVO;
        static AttributesEnum[] vals = null;
        ;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int ADDSIDBILL = AttributesEnum.AddsIdBill.index();
    public static final int AUTHSTAT = AttributesEnum.AuthStat.index();
    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int COAID = AttributesEnum.CoaId.index();
    public static final int CRTDT = AttributesEnum.CrtDt.index();
    public static final int CURRCONVFCTR = AttributesEnum.CurrConvFctr.index();
    public static final int CURRIDSP = AttributesEnum.CurrIdSp.index();
    public static final int CUSTTYPE = AttributesEnum.CustType.index();
    public static final int DISCAMTBS = AttributesEnum.DiscAmtBs.index();
    public static final int DISCAMTSP = AttributesEnum.DiscAmtSp.index();
    public static final int DOCDT = AttributesEnum.DocDt.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int DOCSTAT = AttributesEnum.DocStat.index();
    public static final int EOADDSTEXT = AttributesEnum.EoAddsText.index();
    public static final int EOID = AttributesEnum.EoId.index();
    public static final int EONM = AttributesEnum.EoNm.index();
    public static final int FYID = AttributesEnum.FyId.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int INVCDT = AttributesEnum.InvcDt.index();
    public static final int INVCNO = AttributesEnum.InvcNo.index();
    public static final int INVCTYPE = AttributesEnum.InvcType.index();
    public static final int MODDT = AttributesEnum.ModDt.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int TAXAMTBS = AttributesEnum.TaxAmtBs.index();
    public static final int TAXAMTSP = AttributesEnum.TaxAmtSp.index();
    public static final int TOTAMTBS = AttributesEnum.TotAmtBs.index();
    public static final int TOTAMTSP = AttributesEnum.TotAmtSp.index();
    public static final int USRIDCRT = AttributesEnum.UsrIdCrt.index();
    public static final int USRIDMOD = AttributesEnum.UsrIdMod.index();
    public static final int TRANSINVCTYPE = AttributesEnum.transInvcType.index();
    public static final int TRANSCURRTYPE = AttributesEnum.transCurrType.index();
    public static final int TRANSCUSTADDS = AttributesEnum.transCustAdds.index();
    public static final int TRANSCOANM = AttributesEnum.transCoaNm.index();
    public static final int TRANSDOCNAME = AttributesEnum.transDocName.index();
    public static final int LOVSWITCHER = AttributesEnum.LOVSWITCHER.index();
    public static final int TRANSPAYDATE = AttributesEnum.transPayDate.index();
    public static final int TRANSPAYMODE = AttributesEnum.transPayMode.index();
    public static final int TRANSPAYAMTSP = AttributesEnum.transPayAmtSp.index();
    public static final int TRANSTOTALPAYAMTSP = AttributesEnum.transTotalPayAmtSp.index();
    public static final int TRANSDOCID = AttributesEnum.transDocId.index();
    public static final int TRANSTAXABLEAMOUNT = AttributesEnum.transTaxableAmount.index();
    public static final int TRANSCCID = AttributesEnum.transCcId.index();
    public static final int TRANSDOCDATE = AttributesEnum.transDocDate.index();
    public static final int TRANSREMAININGAMOUNT = AttributesEnum.transRemainingAmount.index();
    public static final int TRANSPMTAMTOVERALL = AttributesEnum.TransPmtAmtOverAll.index();
    public static final int TRANSPMTSCHDLDT = AttributesEnum.TransPmtSchdlDt.index();
    public static final int TRANSTOTALFOC = AttributesEnum.TransTotalFoc.index();
    public static final int TRANSGLNUM = AttributesEnum.TransGlNum.index();
    public static final int SVCINVCSRC = AttributesEnum.SvcInvcSrc.index();
    public static final int SVCINVCPMTSCHDL = AttributesEnum.SvcInvcPmtSchdl.index();
    public static final int SVCINVCCALC = AttributesEnum.SVCInvcCalc.index();
    public static final int LOVINVCTYPEVO1 = AttributesEnum.LovInvcTypeVO1.index();
    public static final int LOVCUSTOMERVO1 = AttributesEnum.LovCustomerVO1.index();
    public static final int LOVCURRVO1 = AttributesEnum.LovCurrVO1.index();
    public static final int LOVCUSTADDSVO1 = AttributesEnum.LovCustAddsVO1.index();
    public static final int LOVCOAIDVO1 = AttributesEnum.LovCoaIdVO1.index();
    public static final int LOVSCDOCIDVO1 = AttributesEnum.LovScDocIdVO1.index();
    public static final int LOVWODOCIDVO1 = AttributesEnum.LovWoDocIdVO1.index();
    public static final int LOVDOCSTATUSVO1 = AttributesEnum.LovDocStatusVO1.index();
    public static final int LOVPAYMODEVO1 = AttributesEnum.LovPayModeVO1.index();
    public static final int LOVORGVO1 = AttributesEnum.LovOrgVO1.index();
    public static final int LOVUSRVO = AttributesEnum.LovUsrVO.index();
    public static final int LOVSCPMTSCHDLVO = AttributesEnum.LovScPmtSchdlVO.index();

    /**
     * This is the default constructor (do not remove).
     */
    public SvcInvcVORowImpl() {
    }

    /**
     * Gets SvcInvcEO entity object.
     * @return the SvcInvcEO
     */
    public SvcInvcEOImpl getSvcInvcEO() {
        return (SvcInvcEOImpl) getEntity(ENTITY_SVCINVCEO);
    }

    /**
     * Gets the attribute value for ADDS_ID_BILL using the alias name AddsIdBill.
     * @return the ADDS_ID_BILL
     */
    public String getAddsIdBill() {
        return (String) getAttributeInternal(ADDSIDBILL);
    }

    /**
     * Sets <code>value</code> as attribute value for ADDS_ID_BILL using the alias name AddsIdBill.
     * @param value value to set the ADDS_ID_BILL
     */
    public void setAddsIdBill(String value) {
        setAttributeInternal(ADDSIDBILL, value);
    }

    public Number roundOffAmt(Number amt) {

       Integer amt_digit = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}").toString());

        if (amt != null) {
            if (amt_digit != null) {
                     return new Number(amt.round(amt_digit));

            } else {

                return new Number(amt.round(2));

            }
        } else {
            return new Number(0);
        }
    }

    /**
     * Gets the attribute value for AUTH_STAT using the alias name AuthStat.
     * @return the AUTH_STAT
     */
    public String getAuthStat() {
        return (String) getAttributeInternal(AUTHSTAT);
    }

    /**
     * Sets <code>value</code> as attribute value for AUTH_STAT using the alias name AuthStat.
     * @param value value to set the AUTH_STAT
     */
    public void setAuthStat(String value) {
        setAttributeInternal(AUTHSTAT, value);
    }

    /**
     * Gets the attribute value for CLD_ID using the alias name CldId.
     * @return the CLD_ID
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as attribute value for CLD_ID using the alias name CldId.
     * @param value value to set the CLD_ID
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for COA_ID using the alias name CoaId.
     * @return the COA_ID
     */
    public Integer getCoaId() {
        return (Integer) getAttributeInternal(COAID);
    }

    /**
     * Sets <code>value</code> as attribute value for COA_ID using the alias name CoaId.
     * @param value value to set the COA_ID
     */
    public void setCoaId(Integer value) {
        setAttributeInternal(COAID, value);
    }

    /**
     * Gets the attribute value for CRT_DT using the alias name CrtDt.
     * @return the CRT_DT
     */
    public Timestamp getCrtDt() {
        return (Timestamp) getAttributeInternal(CRTDT);
    }

    /**
     * Sets <code>value</code> as attribute value for CRT_DT using the alias name CrtDt.
     * @param value value to set the CRT_DT
     */
    public void setCrtDt(Timestamp value) {
        setAttributeInternal(CRTDT, value);
    }

    /**
     * Gets the attribute value for CURR_CONV_FCTR using the alias name CurrConvFctr.
     * @return the CURR_CONV_FCTR
     */
    public Number getCurrConvFctr() {
        return (Number) getAttributeInternal(CURRCONVFCTR);
    }

    /**
     * Sets <code>value</code> as attribute value for CURR_CONV_FCTR using the alias name CurrConvFctr.
     * @param value value to set the CURR_CONV_FCTR
     */
    public void setCurrConvFctr(Number value) {
        setAttributeInternal(CURRCONVFCTR, value);
    }

    /**
     * Gets the attribute value for CURR_ID_SP using the alias name CurrIdSp.
     * @return the CURR_ID_SP
     */
    public Integer getCurrIdSp() {


        return (Integer) getAttributeInternal(CURRIDSP);
    }

    /**
     * Sets <code>value</code> as attribute value for CURR_ID_SP using the alias name CurrIdSp.
     * @param value value to set the CURR_ID_SP
     */
    public void setCurrIdSp(Integer value) {
        setAttributeInternal(CURRIDSP, value);
    }

    /**
     * Gets the attribute value for CUST_TYPE using the alias name CustType.
     * @return the CUST_TYPE
     */
    public Integer getCustType() {
        return (Integer) getAttributeInternal(CUSTTYPE);
    }

    /**
     * Sets <code>value</code> as attribute value for CUST_TYPE using the alias name CustType.
     * @param value value to set the CUST_TYPE
     */
    public void setCustType(Integer value) {
        setAttributeInternal(CUSTTYPE, value);
    }

    /**
     * Gets the attribute value for DISC_AMT_BS using the alias name DiscAmtBs.
     * @return the DISC_AMT_BS
     */
    public Number getDiscAmtBs() {
        return roundOffAmt((Number) getAttributeInternal(DISCAMTBS));
    }

    /**
     * Sets <code>value</code> as attribute value for DISC_AMT_BS using the alias name DiscAmtBs.
     * @param value value to set the DISC_AMT_BS
     */
    public void setDiscAmtBs(Number value) {
        setAttributeInternal(DISCAMTBS, value);
    }

    /**
     * Gets the attribute value for DISC_AMT_SP using the alias name DiscAmtSp.
     * @return the DISC_AMT_SP
     */
    public Number getDiscAmtSp() {
        return roundOffAmt((Number) getAttributeInternal(DISCAMTSP));
    }

    /**
     * Sets <code>value</code> as attribute value for DISC_AMT_SP using the alias name DiscAmtSp.
     * @param value value to set the DISC_AMT_SP
     */
    public void setDiscAmtSp(Number value) {
        setAttributeInternal(DISCAMTSP, value);
    }

    /**
     * Gets the attribute value for DOC_DT using the alias name DocDt.
     * @return the DOC_DT
     */
    public Timestamp getDocDt() {
        return (Timestamp) getAttributeInternal(DOCDT);
    }

    /**
     * Sets <code>value</code> as attribute value for DOC_DT using the alias name DocDt.
     * @param value value to set the DOC_DT
     */
    public void setDocDt(Timestamp value) {
        setAttributeInternal(DOCDT, value);
    }

    /**
     * Gets the attribute value for DOC_ID using the alias name DocId.
     * @return the DOC_ID
     */
    public String getDocId() {
        return (String) getAttributeInternal(DOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for DOC_ID using the alias name DocId.
     * @param value value to set the DOC_ID
     */
    public void setDocId(String value) {
        setAttributeInternal(DOCID, value);
    }

    /**
     * Gets the attribute value for DOC_STAT using the alias name DocStat.
     * @return the DOC_STAT
     */
    public Integer getDocStat() {
        return (Integer) getAttributeInternal(DOCSTAT);
    }

    /**
     * Sets <code>value</code> as attribute value for DOC_STAT using the alias name DocStat.
     * @param value value to set the DOC_STAT
     */
    public void setDocStat(Integer value) {
        setAttributeInternal(DOCSTAT, value);
    }

    /**
     * Gets the attribute value for EO_ADDS_TEXT using the alias name EoAddsText.
     * @return the EO_ADDS_TEXT
     */
    public String getEoAddsText() {
        return (String) getAttributeInternal(EOADDSTEXT);
    }

    /**
     * Sets <code>value</code> as attribute value for EO_ADDS_TEXT using the alias name EoAddsText.
     * @param value value to set the EO_ADDS_TEXT
     */
    public void setEoAddsText(String value) {
        setAttributeInternal(EOADDSTEXT, value);
    }

    /**
     * Gets the attribute value for EO_ID using the alias name EoId.
     * @return the EO_ID
     */
    public Integer getEoId() {
        return (Integer) getAttributeInternal(EOID);
    }

    /**
     * Sets <code>value</code> as attribute value for EO_ID using the alias name EoId.
     * @param value value to set the EO_ID
     */
    public void setEoId(Integer value) {
        setAttributeInternal(EOID, value);
    }

    /**
     * Gets the attribute value for EO_NM using the alias name EoNm.
     * @return the EO_NM
     */
    public String getEoNm() {

        if ((String) getAttributeInternal(EONM) == null) {
            Integer eoId = this.getEoId();
            if (eoId != null) {
                SVCInvoiceAMImpl am = (SVCInvoiceAMImpl) this.getApplicationModule();
                ViewObjectImpl vo = am.getLovCustomer1();
                vo.setNamedWhereClauseParam("bindCldId", this.getCldId());
                vo.setNamedWhereClauseParam("bindSlocId", this.getSlocId());
                vo.setNamedWhereClauseParam("bindOrgId", this.getOrgId());
                vo.setNamedWhereClauseParam("bindHoOrgId", this.getHoOrgId());
                vo.executeQuery();
                Row[] filRw = vo.getFilteredRows("InvcType", getInvcType());
                //  Row[] filRw= am.getLovSupplier1().getFilteredRows(new RowQualifier("EoId="+eoId+" and SlocId="+this.getSlocId()+" and OrgId='"+this.getOrgId()+"' and CldId='"+this.getCldId()+"'"));
                if (filRw.length > 0) {
                    return filRw[0].getAttribute("EoNm").toString();
                } else {
                    return (String) getAttributeInternal(EONM);
                }
            } else {
                return (String) getAttributeInternal(EONM);
            }
        }

        return (String) getAttributeInternal(EONM);
    }

    /**
     * Sets <code>value</code> as attribute value for EO_NM using the alias name EoNm.
     * @param value value to set the EO_NM
     */
    public void setEoNm(String value) {
        setAttributeInternal(EONM, value);
    }

    /**
     * Gets the attribute value for FY_ID using the alias name FyId.
     * @return the FY_ID
     */
    public Integer getFyId() {
        return (Integer) getAttributeInternal(FYID);
    }

    /**
     * Sets <code>value</code> as attribute value for FY_ID using the alias name FyId.
     * @param value value to set the FY_ID
     */
    public void setFyId(Integer value) {
        setAttributeInternal(FYID, value);
    }

    /**
     * Gets the attribute value for HO_ORG_ID using the alias name HoOrgId.
     * @return the HO_ORG_ID
     */
    public String getHoOrgId() {
        return (String) getAttributeInternal(HOORGID);
    }

    /**
     * Sets <code>value</code> as attribute value for HO_ORG_ID using the alias name HoOrgId.
     * @param value value to set the HO_ORG_ID
     */
    public void setHoOrgId(String value) {
        setAttributeInternal(HOORGID, value);
    }

    /**
     * Gets the attribute value for INVC_DT using the alias name InvcDt.
     * @return the INVC_DT
     */
    public Timestamp getInvcDt() {
        return (Timestamp) getAttributeInternal(INVCDT);
    }

    /**
     * Sets <code>value</code> as attribute value for INVC_DT using the alias name InvcDt.
     * @param value value to set the INVC_DT
     */
    public void setInvcDt(Timestamp value) {
        setAttributeInternal(INVCDT, value);
    }

    /**
     * Gets the attribute value for INVC_NO using the alias name InvcNo.
     * @return the INVC_NO
     */
    public String getInvcNo() {
        return (String) getAttributeInternal(INVCNO);
    }

    /**
     * Sets <code>value</code> as attribute value for INVC_NO using the alias name InvcNo.
     * @param value value to set the INVC_NO
     */
    public void setInvcNo(String value) {
        setAttributeInternal(INVCNO, value);
    }

    /**
     * Gets the attribute value for INVC_TYPE using the alias name InvcType.
     * @return the INVC_TYPE
     */
    public Integer getInvcType() {
        return (Integer) getAttributeInternal(INVCTYPE);
    }

    /**
     * Sets <code>value</code> as attribute value for INVC_TYPE using the alias name InvcType.
     * @param value value to set the INVC_TYPE
     */
    public void setInvcType(Integer value) {
        setAttributeInternal(INVCTYPE, value);
    }

    /**
     * Gets the attribute value for MOD_DT using the alias name ModDt.
     * @return the MOD_DT
     */
    public Timestamp getModDt() {
        return (Timestamp) getAttributeInternal(MODDT);
    }

    /**
     * Sets <code>value</code> as attribute value for MOD_DT using the alias name ModDt.
     * @param value value to set the MOD_DT
     */
    public void setModDt(Timestamp value) {
        setAttributeInternal(MODDT, value);
    }

    /**
     * Gets the attribute value for ORG_ID using the alias name OrgId.
     * @return the ORG_ID
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as attribute value for ORG_ID using the alias name OrgId.
     * @param value value to set the ORG_ID
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for SLOC_ID using the alias name SlocId.
     * @return the SLOC_ID
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for SLOC_ID using the alias name SlocId.
     * @param value value to set the SLOC_ID
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for TAX_AMT_BS using the alias name TaxAmtBs.
     * @return the TAX_AMT_BS
     */
    public Number getTaxAmtBs() {
        return roundOffAmt((Number) getAttributeInternal(TAXAMTBS));
    }

    /**
     * Sets <code>value</code> as attribute value for TAX_AMT_BS using the alias name TaxAmtBs.
     * @param value value to set the TAX_AMT_BS
     */
    public void setTaxAmtBs(Number value) {
        setAttributeInternal(TAXAMTBS, value);
    }

    /**
     * Gets the attribute value for TAX_AMT_SP using the alias name TaxAmtSp.
     * @return the TAX_AMT_SP
     */
    public Number getTaxAmtSp() {
        return roundOffAmt((Number) getAttributeInternal(TAXAMTSP));
    }

    /**
     * Sets <code>value</code> as attribute value for TAX_AMT_SP using the alias name TaxAmtSp.
     * @param value value to set the TAX_AMT_SP
     */
    public void setTaxAmtSp(Number value) {
        setAttributeInternal(TAXAMTSP, value);
    }

    /**
     * Gets the attribute value for TOT_AMT_BS using the alias name TotAmtBs.
     * @return the TOT_AMT_BS
     */
    public Number getTotAmtBs() {
        return roundOffAmt((Number) getAttributeInternal(TOTAMTBS));
    }

    /**
     * Sets <code>value</code> as attribute value for TOT_AMT_BS using the alias name TotAmtBs.
     * @param value value to set the TOT_AMT_BS
     */
    public void setTotAmtBs(Number value) {
        setAttributeInternal(TOTAMTBS, value);
    }

    /**
     * Gets the attribute value for TOT_AMT_SP using the alias name TotAmtSp.
     * @return the TOT_AMT_SP
     */
    public Number getTotAmtSp() {
        return roundOffAmt((Number) getAttributeInternal(TOTAMTSP));
    }

    /**
     * Sets <code>value</code> as attribute value for TOT_AMT_SP using the alias name TotAmtSp.
     * @param value value to set the TOT_AMT_SP
     */
    public void setTotAmtSp(Number value) {
        setAttributeInternal(TOTAMTSP, value);
    }

    /**
     * Gets the attribute value for USR_ID_CRT using the alias name UsrIdCrt.
     * @return the USR_ID_CRT
     */
    public Integer getUsrIdCrt() {
        return (Integer) getAttributeInternal(USRIDCRT);
    }

    /**
     * Sets <code>value</code> as attribute value for USR_ID_CRT using the alias name UsrIdCrt.
     * @param value value to set the USR_ID_CRT
     */
    public void setUsrIdCrt(Integer value) {
        setAttributeInternal(USRIDCRT, value);
    }

    /**
     * Gets the attribute value for USR_ID_MOD using the alias name UsrIdMod.
     * @return the USR_ID_MOD
     */
    public Integer getUsrIdMod() {
        return (Integer) getAttributeInternal(USRIDMOD);
    }

    /**
     * Sets <code>value</code> as attribute value for USR_ID_MOD using the alias name UsrIdMod.
     * @param value value to set the USR_ID_MOD
     */
    public void setUsrIdMod(Integer value) {
        setAttributeInternal(USRIDMOD, value);
    }

    /**
     * Gets the attribute value for the calculated attribute transInvcType.
     * @return the transInvcType
     */
    public String gettransInvcType() {
        //  System.out.println("getAttributeInternal(TRANSINVCTYPE):::"+getAttributeInternal(TRANSINVCTYPE));
        return (String) getAttributeInternal(TRANSINVCTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute transInvcType.
     * @param value value to set the  transInvcType
     */
    public void settransInvcType(String value) {
        setAttributeInternal(TRANSINVCTYPE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute transCurrType.
     * @return the transCurrType
     */
    public String gettransCurrType() {


        Integer curId = this.getCurrIdSp();

        SVCInvoiceAMImpl am = (SVCInvoiceAMImpl) this.getApplicationModule();
        ViewObjectImpl CurrVo = am.getLovCurr1();

        CurrVo.setNamedWhereClauseParam("bindCldId", this.getCldId());
        CurrVo.setNamedWhereClauseParam("bindOrgId", this.getOrgId());
        CurrVo.setNamedWhereClauseParam("bindHoOrgId", this.getHoOrgId());
        CurrVo.setNamedWhereClauseParam("bindCcId", this.gettransCcId());
        CurrVo.executeQuery();
        Row[] rw = CurrVo.getFilteredRows("CcCurrIdTxn", curId);
        if (rw.length > 0) {

            return rw[0].getAttribute("CurrDescTxn").toString();
        } else {

            return (String) getAttributeInternal(TRANSCURRTYPE);
        }
        // return (String) getAttributeInternal(TRANSCURRTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute transCurrType.
     * @param value value to set the  transCurrType
     */
    public void settransCurrType(String value) {
        setAttributeInternal(TRANSCURRTYPE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute transCustAdds.
     * @return the transCustAdds
     */
    public String gettransCustAdds() {


        SVCInvoiceAMImpl am = (SVCInvoiceAMImpl) this.getApplicationModule();
        ViewObjectImpl CustAddsVo = am.getLovCustAdds1();

        CustAddsVo.setNamedWhereClauseParam("bindCldId", this.getCldId());
        CustAddsVo.setNamedWhereClauseParam("bindSlocId", this.getSlocId());
        CustAddsVo.executeQuery();
        Row[] rw = CustAddsVo.getFilteredRows("AddsId", getAddsIdBill());
        if (rw.length > 0) {

            return rw[0].getAttribute("Adds").toString();
        } else {

            return (String) getAttributeInternal(TRANSCUSTADDS);
        }


        //  return (String) getAttributeInternal(TRANSCUSTADDS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute transCustAdds.
     * @param value value to set the  transCustAdds
     */
    public void settransCustAdds(String value) {
        setAttributeInternal(TRANSCUSTADDS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute transCoaNm.
     * @return the transCoaNm
     */
    public String gettransCoaNm() {
        //  System.out.println("Welcome in gettransCoaNm");

        SVCInvoiceAMImpl am = (SVCInvoiceAMImpl) this.getApplicationModule();
        ViewObjectImpl CoaVo = am.getLovCoaId2();
        //  System.out.println("length before= "+CoaVo.getAllRowsInRange().length);

        // CoaVo.setRangeSize(-1);
        //  System.out.println("length before= "+CoaVo.getAllRowsInRange().length);
        Integer eoId = getEoId();
        Integer coaId = null;
        if (eoId != null) {
            coaId = this.getCoaId();
        }
        /*   System.out.println("coaId::"+coaId);
        System.out.println("this.getCldId():::"+this.getCldId());
        System.out.println("this.getSlocId():::"+this.getSlocId());
        System.out.println("this.getHoOrgId():::"+this.getHoOrgId()+"  "+getCoaId());

      //  System.out.println("this.gettransCcId():::"+this.gettransCcId()); */
        CoaVo.setNamedWhereClauseParam("bindCldId", this.getCldId());
        CoaVo.setNamedWhereClauseParam("bindSlocId", this.getSlocId());
        CoaVo.setNamedWhereClauseParam("bindHoOrgId", this.getHoOrgId());
        // System.out.println("coaId = "+coaId+"eoId =  "+eoId);
        CoaVo.setNamedWhereClauseParam("bindCoaId", coaId);
        CoaVo.executeQuery();
        // System.out.println("length = "+CoaVo.getAllRowsInRange().length);

        Row[] rw = CoaVo.getAllRowsInRange();
        // Row[] rw= CoaVo.getFilteredRows("CoaId", coaId);
        //System.out.println("length = "+rw.length);
        if (rw.length > 0 && coaId != null) {
            //   System.out.println("Welcome in if CoaNm:::"+rw[0].getAttribute("CoaNm").toString());
            return rw[0].getAttribute("CoaNm").toString();
        } else {
            //  System.out.println("welcome in else::CoaNm:"+getAttributeInternal(TRANSCOANM));
            return (String) getAttributeInternal(TRANSCOANM);
        }
        //return (String) getAttributeInternal(TRANSCOANM);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute transCoaNm.
     * @param value value to set the  transCoaNm
     */
    public void settransCoaNm(String value) {


        setAttributeInternal(TRANSCOANM, value);

    }

    /**
     * Gets the attribute value for the calculated attribute transDocName.
     * @return the transDocName
     */
    public String gettransDocName() {
        /*  SVCInvoiceAMImpl am=(SVCInvoiceAMImpl)this.getApplicationModule();
        Integer invcType=0;
        if(getInvcType()!=null){
            invcType=getInvcType();
        }
        ViewObjectImpl lovWoVo = am.getLovWoDocId1();
        if(invcType==96){
        lovWoVo.setNamedWhereClauseParam("bindCldId", this.getCldId());
        lovWoVo.setNamedWhereClauseParam("bindSlocId", this.getSlocId());
        lovWoVo.setNamedWhereClauseParam("bindOrgId", this.getHoOrgId());
        lovWoVo.setNamedWhereClauseParam("bindEoNm", this.getEoNm());
        lovWoVo.executeQuery();
            Row[] rw= lovWoVo.getFilteredRows("DocId", this.gettransDocId());
            if(rw.length>0){
             return rw[0].getAttribute("DocNo").toString();
            }
        } */
        //  adfLog.info("current doc name value is "+getAttributeInternal(TRANSDOCNAME));
        // System.out.println("invc row in "+getAttributeInternal(TRANSDOCNAME));
        return (String) getAttributeInternal(TRANSDOCNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute transDocName.
     * @param value value to set the  transDocName
     */
    public void settransDocName(String value) {
        adfLog.info("Setted value is " + value);
        setAttributeInternal(TRANSDOCNAME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute LOVSWITCHER.
     * @return the LOVSWITCHER
     */
    public String getLOVSWITCHER() {
        return (String) getAttributeInternal(LOVSWITCHER);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute LOVSWITCHER.
     * @param value value to set the  LOVSWITCHER
     */
    public void setLOVSWITCHER(String value) {
        setAttributeInternal(LOVSWITCHER, value);
    }


    /**
     * Gets the attribute value for the calculated attribute transPayDate.
     * @return the transPayDate
     */
    public Timestamp gettransPayDate() {
        return (Timestamp) getAttributeInternal(TRANSPAYDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute transPayDate.
     * @param value value to set the  transPayDate
     */
    public void settransPayDate(Timestamp value) {
        setAttributeInternal(TRANSPAYDATE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute transPayMode.
     * @return the transPayMode
     */
    public Integer gettransPayMode() {
        return (Integer) getAttributeInternal(TRANSPAYMODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute transPayMode.
     * @param value value to set the  transPayMode
     */
    public void settransPayMode(Integer value) {
        setAttributeInternal(TRANSPAYMODE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute transPayAmtSp.
     * @return the transPayAmtSp
     */
    public Number gettransPayAmtSp() {
        Number num = (Number) getAttributeInternal(TRANSPAYAMTSP);
        if (num != null && num.compareTo(0) < 0) {
            return new Number(0);
        }

        return roundOffAmt((Number) getAttributeInternal(TRANSPAYAMTSP));
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute transPayAmtSp.
     * @param value value to set the  transPayAmtSp
     */
    public void settransPayAmtSp(Number value) {
        if (value != null) {
            setAttributeInternal(TRANSPAYAMTSP, value.round(6));
        } else {
            setAttributeInternal(TRANSPAYAMTSP, value);
        }

        //setAttributeInternal(TRANSPAYAMTSP, value);
    }

    /**
     * Gets the attribute value for the calculated attribute transTotalPayAmtSp.
     * @return the transTotalPayAmtSp
     */
    public Number gettransTotalPayAmtSp() {
        Number totalAmt = new Number(0);
        ViewObject item = getDBTransaction().findViewObject("SvcInvcItm");
        RowSetIterator rsi = item.createRowSetIterator(null);
        while (rsi.hasNext()) {
            Row next = rsi.next();
            Object ItmAmtSp = next.getAttribute("ItmAmtSp");
            if (ItmAmtSp != null) {
                totalAmt = totalAmt.add((Number) ItmAmtSp);
            }
        }
        return totalAmt;
        //return roundOffAmt((Number) getAttributeInternal(TRANSTOTALPAYAMTSP));
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute transTotalPayAmtSp.
     * @param value value to set the  transTotalPayAmtSp
     */
    public void settransTotalPayAmtSp(Number value) {
        setAttributeInternal(TRANSTOTALPAYAMTSP, value);
    }

    /**
     * Gets the attribute value for the calculated attribute transDocId.
     * @return the transDocId
     */
    public String gettransDocId() {
        return (String) getAttributeInternal(TRANSDOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute transDocId.
     * @param value value to set the  transDocId
     */
    public void settransDocId(String value) {
        setAttributeInternal(TRANSDOCID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute transTaxableAmount.
     * @return the transTaxableAmount
     */
    public Number gettransTaxableAmount() {
        return roundOffAmt((Number) getAttributeInternal(TRANSTAXABLEAMOUNT));
    }


    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.executeUpdate();

            return st.getObject(1);
        } catch (SQLException e) {

            int end = e.getMessage().indexOf("\n");
            //  throw new JboException(e.getMessage().substring(11, end));
            String msg = e.getMessage();
            FacesMessage ermsg = new FacesMessage(msg);
            ermsg.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, ermsg);
            //  throw new JboException(e);
            return null;
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }


    /**
     * Gets the attribute value for the calculated attribute transCcId.
     * @return the transCcId
     */
    public Integer gettransCcId() {
        Integer ret = (Integer) (callStoredFunction(Types.INTEGER, "MM.MM_GET_ORG_BS_CURR(?,?)", new Object[] {
                                                    this.getCldId(), this.getOrgId()
        }));
        if (ret != null) {

            return ret;
        }
        return (Integer) getAttributeInternal(TRANSCCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute transCcId.
     * @param value value to set the  transCcId
     */
    public void settransCcId(Integer value) {
        setAttributeInternal(TRANSCCID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute transDocDate.
     * @return the transDocDate
     */
    public Timestamp gettransDocDate() {
        return (Timestamp) getAttributeInternal(TRANSDOCDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute transDocDate.
     * @param value value to set the  transDocDate
     */
    public void settransDocDate(Timestamp value) {
        setAttributeInternal(TRANSDOCDATE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute transRemainingAmount.
     * @return the transRemainingAmount
     */
    public Number gettransRemainingAmount() {
        if (getAttributeInternal(TRANSREMAININGAMOUNT) == null) {
            //  Number total = gettransTotalPayAmtSp();
            Number total = getTransPmtAmtOverAll();
            Number totalRemAmt = new Number(0);

            ViewObject pay = getDBTransaction().findViewObject("SvcInvcPmtSchdl");
            RowSetIterator payrsi = pay.createRowSetIterator(null);

            while (payrsi.hasNext()) {
                Row next = payrsi.next();
                Object PayAmtSp = next.getAttribute("PayAmtSp");
                if (PayAmtSp != null) {
                    totalRemAmt = totalRemAmt.add((Number) PayAmtSp);
                }
            }
            payrsi.closeRowSetIterator();
            //System.out.println("total = "+total+" totalRemAmt = "+totalRemAmt);
            return total.subtract(totalRemAmt);
        }
        return roundOffAmt((Number) getAttributeInternal(TRANSREMAININGAMOUNT));
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute transRemainingAmount.
     * @param value value to set the  transRemainingAmount
     */
    public void settransRemainingAmount(Number value) {
        setAttributeInternal(TRANSREMAININGAMOUNT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransPmtAmtOverAll.
     * @return the TransPmtAmtOverAll
     */
    public Number getTransPmtAmtOverAll() {
        Integer glblAmt=Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}").toString());
      //  System.out.println("total payment amount set is "+getAttributeInternal(TRANSPMTAMTOVERALL));
        
        if(getAttributeInternal(TRANSPMTAMTOVERALL)!=null){
        //    System.out.println("total payment amount set is "+getAttributeInternal(TRANSPMTAMTOVERALL));
            setTotAmtSp((Number) ((Number)getAttributeInternal(TRANSPMTAMTOVERALL)).round(glblAmt));
            setTotAmtBs((Number) ((Number)getAttributeInternal(TRANSPMTAMTOVERALL)).multiply(getCurrConvFctr()).round(glblAmt));
            adfLog.info(" over all amt -------------"+(Number) ((Number)getAttributeInternal(TRANSPMTAMTOVERALL)).round(glblAmt));
           return (Number) ((Number)getAttributeInternal(TRANSPMTAMTOVERALL)).round(glblAmt);
        }else{
            return new Number(0);
        }
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransPmtAmtOverAll.
     * @param value value to set the  TransPmtAmtOverAll
     */
    public void setTransPmtAmtOverAll(Number value) {
        if (value != null) {
            setAttributeInternal(TRANSPMTAMTOVERALL, (Number)roundOffAmt(value));
        }
        setAttributeInternal(TRANSPMTAMTOVERALL, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransPmtSchdlDt.
     * @return the TransPmtSchdlDt
     */
    public Timestamp getTransPmtSchdlDt() {
        //    System.out.println("current date value is "+getAttributeInternal(TRANSPMTSCHDLDT));
        return (Timestamp) getAttributeInternal(TRANSPMTSCHDLDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransPmtSchdlDt.
     * @param value value to set the  TransPmtSchdlDt
     */
    public void setTransPmtSchdlDt(Timestamp value) {
        setAttributeInternal(TRANSPMTSCHDLDT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransTotalFoc.
     * @return the TransTotalFoc
     */
    public Number getTransTotalFoc() {
        /*  if (getAttributeInternal(TRANSTOTALFOC) != null) {
            return (Number) getAttributeInternal(TRANSTOTALFOC);
        } else { */
            SVCInvoiceAMImpl am = (SVCInvoiceAMImpl) this.getApplicationModule();
            ViewObjectImpl itmvo = am.getSvcInvcItm1();

            RowQualifier rq = new RowQualifier(itmvo);
            rq.setWhereClause("DocId = '" + getDocId() + "' and FocItm = 'Y'");
            Row[] rr = itmvo.getFilteredRows(rq);
            adfLog.info(" length --------" + rr.length + "----------" + rq.getExprStr() + "-------");
            Number sum = new Number(0);
            if (rr.length > 0) {
                for (Row r : rr) {
                    sum = sum.add((Number) r.getAttribute("ItmAmtSp"));
                    //       adfLog.info("total foc amt is in------------- "+sum);
                }
            }
            adfLog.info("total foc amt is--------------------- " + sum);
            return sum;
      // }
        //  return (Number) getAttributeInternal(TRANSTOTALFOC);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransTotalFoc.
     * @param value value to set the  TransTotalFoc
     */
    public void setTransTotalFoc(Number value) {
        setAttributeInternal(TRANSTOTALFOC, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransGlNum.
     * @return the TransGlNum
     */
    public String getTransGlNum() {
        return (String) getAttributeInternal(TRANSGLNUM);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransGlNum.
     * @param value value to set the  TransGlNum
     */
    public void setTransGlNum(String value) {
        setAttributeInternal(TRANSGLNUM, value);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link SvcInvcSrc.
     */
    public RowIterator getSvcInvcSrc() {
        return (RowIterator) getAttributeInternal(SVCINVCSRC);
    }


    /**
     * Gets the associated <code>RowIterator</code> using master-detail link SvcInvcPmtSchdl.
     */
    public RowIterator getSvcInvcPmtSchdl() {
        return (RowIterator) getAttributeInternal(SVCINVCPMTSCHDL);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link SVCInvcCalc.
     */
    public RowIterator getSVCInvcCalc() {
        return (RowIterator) getAttributeInternal(SVCINVCCALC);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovInvcTypeVO1.
     */
    public RowSet getLovInvcTypeVO1() {
        return (RowSet) getAttributeInternal(LOVINVCTYPEVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovCustomerVO1.
     */
    public RowSet getLovCustomerVO1() {
        return (RowSet) getAttributeInternal(LOVCUSTOMERVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovCurrVO1.
     */
    public RowSet getLovCurrVO1() {
        return (RowSet) getAttributeInternal(LOVCURRVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovCustAddsVO1.
     */
    public RowSet getLovCustAddsVO1() {
        return (RowSet) getAttributeInternal(LOVCUSTADDSVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovCoaIdVO1.
     */
    public RowSet getLovCoaIdVO1() {
        return (RowSet) getAttributeInternal(LOVCOAIDVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovScDocIdVO1.
     */
    public RowSet getLovScDocIdVO1() {
        return (RowSet) getAttributeInternal(LOVSCDOCIDVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovWoDocIdVO1.
     */
    public RowSet getLovWoDocIdVO1() {
        return (RowSet) getAttributeInternal(LOVWODOCIDVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovDocStatusVO1.
     */
    public RowSet getLovDocStatusVO1() {
        return (RowSet) getAttributeInternal(LOVDOCSTATUSVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovPayModeVO1.
     */
    public RowSet getLovPayModeVO1() {
        return (RowSet) getAttributeInternal(LOVPAYMODEVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovOrgVO1.
     */
    public RowSet getLovOrgVO1() {
        return (RowSet) getAttributeInternal(LOVORGVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovUsrVO.
     */
    public RowSet getLovUsrVO() {
        return (RowSet) getAttributeInternal(LOVUSRVO);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovScPmtSchdlVO.
     */
    public RowSet getLovScPmtSchdlVO() {
        return (RowSet) getAttributeInternal(LOVSCPMTSCHDLVO);
    }
}

