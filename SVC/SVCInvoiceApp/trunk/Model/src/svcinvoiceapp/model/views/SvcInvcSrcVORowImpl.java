package svcinvoiceapp.model.views;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.NClobDomain;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;

import svcinvoiceapp.model.entities.SvcInvcSrcEOImpl;
import svcinvoiceapp.model.services.SVCInvoiceAMImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Nov 05 10:48:21 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SvcInvcSrcVORowImpl extends ViewRowImpl {


    public static final int ENTITY_SVCINVCSRCEO = 0;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CldId,
        CurrConvFctr,
        CurrIdSp,
        DiscAmtBs,
        DiscAmtSp,
        DiscType,
        DiscVal,
        DocId,
        DocIdSrc,
        DocTypeSrc,
        HoOrgId,
        OrgId,
        SlocId,
        TaxAfterDiscFlg,
        TaxAmtBs,
        TaxAmtSp,
        TaxRuleFlg,
        TotAmtBs,
        TotAmtSp,
        transDocNo,
        transDocDate,
        TransOcAmtSp,
        TransItmAmtSp,
        TransFinalAmt,
        PmtSchdlDt,
        TransFocSum,
        SvcInvcItm,
        SvcInvcOc;
        static AttributesEnum[] vals = null;
        ;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    /**
     * This is the default constructor (do not remove).
     */
   private static  ADFLogger adfLog=(ADFLogger)ADFLogger.createADFLogger(SvcInvcSrcVORowImpl.class);


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int CURRCONVFCTR = AttributesEnum.CurrConvFctr.index();
    public static final int CURRIDSP = AttributesEnum.CurrIdSp.index();
    public static final int DISCAMTBS = AttributesEnum.DiscAmtBs.index();
    public static final int DISCAMTSP = AttributesEnum.DiscAmtSp.index();
    public static final int DISCTYPE = AttributesEnum.DiscType.index();
    public static final int DISCVAL = AttributesEnum.DiscVal.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int DOCIDSRC = AttributesEnum.DocIdSrc.index();
    public static final int DOCTYPESRC = AttributesEnum.DocTypeSrc.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int TAXAFTERDISCFLG = AttributesEnum.TaxAfterDiscFlg.index();
    public static final int TAXAMTBS = AttributesEnum.TaxAmtBs.index();
    public static final int TAXAMTSP = AttributesEnum.TaxAmtSp.index();
    public static final int TAXRULEFLG = AttributesEnum.TaxRuleFlg.index();
    public static final int TOTAMTBS = AttributesEnum.TotAmtBs.index();
    public static final int TOTAMTSP = AttributesEnum.TotAmtSp.index();
    public static final int TRANSDOCNO = AttributesEnum.transDocNo.index();
    public static final int TRANSDOCDATE = AttributesEnum.transDocDate.index();
    public static final int TRANSOCAMTSP = AttributesEnum.TransOcAmtSp.index();
    public static final int TRANSITMAMTSP = AttributesEnum.TransItmAmtSp.index();
    public static final int TRANSFINALAMT = AttributesEnum.TransFinalAmt.index();
    public static final int PMTSCHDLDT = AttributesEnum.PmtSchdlDt.index();
    public static final int TRANSFOCSUM = AttributesEnum.TransFocSum.index();
    public static final int SVCINVCITM = AttributesEnum.SvcInvcItm.index();
    public static final int SVCINVCOC = AttributesEnum.SvcInvcOc.index();

    public SvcInvcSrcVORowImpl() {
    }
    public  Number roundOffAmt(Number amt) {

        Integer amt_digit = 6;//Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}").toString());

        if (amt != null) {
            if (amt_digit != null) {

                return new Number(amt.round(amt_digit));

            } else {

                return new Number(amt.round(2));

            }
        } else {
            return new Number(0);
        }
    }
    /**
     * Gets SvcInvcSrcEO entity object.
     * @return the SvcInvcSrcEO
     */
    public SvcInvcSrcEOImpl getSvcInvcSrcEO() {
        return (SvcInvcSrcEOImpl) getEntity(ENTITY_SVCINVCSRCEO);
    }

    /**
     * Gets the attribute value for CLD_ID using the alias name CldId.
     * @return the CLD_ID
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as attribute value for CLD_ID using the alias name CldId.
     * @param value value to set the CLD_ID
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for CURR_CONV_FCTR using the alias name CurrConvFctr.
     * @return the CURR_CONV_FCTR
     */
    public Number getCurrConvFctr() {
        return (Number) getAttributeInternal(CURRCONVFCTR);
    }

    /**
     * Sets <code>value</code> as attribute value for CURR_CONV_FCTR using the alias name CurrConvFctr.
     * @param value value to set the CURR_CONV_FCTR
     */
    public void setCurrConvFctr(Number value) {
        setAttributeInternal(CURRCONVFCTR, value);
    }

    /**
     * Gets the attribute value for CURR_ID_SP using the alias name CurrIdSp.
     * @return the CURR_ID_SP
     */
    public Integer getCurrIdSp() {
        return (Integer) getAttributeInternal(CURRIDSP);
    }

    /**
     * Sets <code>value</code> as attribute value for CURR_ID_SP using the alias name CurrIdSp.
     * @param value value to set the CURR_ID_SP
     */
    public void setCurrIdSp(Integer value) {
        setAttributeInternal(CURRIDSP, value);
    }

    /**
     * Gets the attribute value for DISC_AMT_BS using the alias name DiscAmtBs.
     * @return the DISC_AMT_BS
     */
    public Number getDiscAmtBs() {
        return roundOffAmt((Number) getAttributeInternal(DISCAMTBS));
    }

    /**
     * Sets <code>value</code> as attribute value for DISC_AMT_BS using the alias name DiscAmtBs.
     * @param value value to set the DISC_AMT_BS
     */
    public void setDiscAmtBs(Number value) {
        setAttributeInternal(DISCAMTBS, value);
    }

    /**
     * Gets the attribute value for DISC_AMT_SP using the alias name DiscAmtSp.
     * @return the DISC_AMT_SP
     */
    public Number getDiscAmtSp() {
      adfLog.info("current disc amt sp is "+getAttributeInternal(DISCAMTSP));
        return roundOffAmt((Number) getAttributeInternal(DISCAMTSP));
    }

    /**
     * Sets <code>value</code> as attribute value for DISC_AMT_SP using the alias name DiscAmtSp.
     * @param value value to set the DISC_AMT_SP
     */
    public void setDiscAmtSp(Number value) {
        setAttributeInternal(DISCAMTSP, value);
    }

    /**
     * Gets the attribute value for DISC_TYPE using the alias name DiscType.
     * @return the DISC_TYPE
     */
    public String getDiscType() {
        return (String) getAttributeInternal(DISCTYPE);
    }

    /**
     * Sets <code>value</code> as attribute value for DISC_TYPE using the alias name DiscType.
     * @param value value to set the DISC_TYPE
     */
    public void setDiscType(String value) {
        setAttributeInternal(DISCTYPE, value);
    }

    /**
     * Gets the attribute value for DISC_VAL using the alias name DiscVal.
     * @return the DISC_VAL
     */
    public Number getDiscVal() {
        return (Number) getAttributeInternal(DISCVAL);
    }

    /**
     * Sets <code>value</code> as attribute value for DISC_VAL using the alias name DiscVal.
     * @param value value to set the DISC_VAL
     */
    public void setDiscVal(Number value) {
        setAttributeInternal(DISCVAL, value);
    }

    /**
     * Gets the attribute value for DOC_ID using the alias name DocId.
     * @return the DOC_ID
     */
    public String getDocId() {
        return (String) getAttributeInternal(DOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for DOC_ID using the alias name DocId.
     * @param value value to set the DOC_ID
     */
    public void setDocId(String value) {
        setAttributeInternal(DOCID, value);
    }

    /**
     * Gets the attribute value for DOC_ID_SRC using the alias name DocIdSrc.
     * @return the DOC_ID_SRC
     */
    public String getDocIdSrc() {
        return (String) getAttributeInternal(DOCIDSRC);
    }

    /**
     * Sets <code>value</code> as attribute value for DOC_ID_SRC using the alias name DocIdSrc.
     * @param value value to set the DOC_ID_SRC
     */
    public void setDocIdSrc(String value) {
        setAttributeInternal(DOCIDSRC, value);
    }

    /**
     * Gets the attribute value for DOC_TYPE_SRC using the alias name DocTypeSrc.
     * @return the DOC_TYPE_SRC
     */
    public Integer getDocTypeSrc() {
        return (Integer) getAttributeInternal(DOCTYPESRC);
    }

    /**
     * Sets <code>value</code> as attribute value for DOC_TYPE_SRC using the alias name DocTypeSrc.
     * @param value value to set the DOC_TYPE_SRC
     */
    public void setDocTypeSrc(Integer value) {
        setAttributeInternal(DOCTYPESRC, value);
    }

    /**
     * Gets the attribute value for HO_ORG_ID using the alias name HoOrgId.
     * @return the HO_ORG_ID
     */
    public String getHoOrgId() {
        return (String) getAttributeInternal(HOORGID);
    }

    /**
     * Sets <code>value</code> as attribute value for HO_ORG_ID using the alias name HoOrgId.
     * @param value value to set the HO_ORG_ID
     */
    public void setHoOrgId(String value) {
        setAttributeInternal(HOORGID, value);
    }

    /**
     * Gets the attribute value for ORG_ID using the alias name OrgId.
     * @return the ORG_ID
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as attribute value for ORG_ID using the alias name OrgId.
     * @param value value to set the ORG_ID
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for SLOC_ID using the alias name SlocId.
     * @return the SLOC_ID
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for SLOC_ID using the alias name SlocId.
     * @param value value to set the SLOC_ID
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for TAX_AFTER_DISC_FLG using the alias name TaxAfterDiscFlg.
     * @return the TAX_AFTER_DISC_FLG
     */
    public String getTaxAfterDiscFlg() {
        return (String) getAttributeInternal(TAXAFTERDISCFLG);
    }

    /**
     * Sets <code>value</code> as attribute value for TAX_AFTER_DISC_FLG using the alias name TaxAfterDiscFlg.
     * @param value value to set the TAX_AFTER_DISC_FLG
     */
    public void setTaxAfterDiscFlg(String value) {
        setAttributeInternal(TAXAFTERDISCFLG, value);
    }

    /**
     * Gets the attribute value for TAX_AMT_BS using the alias name TaxAmtBs.
     * @return the TAX_AMT_BS
     */
    public Number getTaxAmtBs() {
        return roundOffAmt((Number) getAttributeInternal(TAXAMTBS));
    }

    /**
     * Sets <code>value</code> as attribute value for TAX_AMT_BS using the alias name TaxAmtBs.
     * @param value value to set the TAX_AMT_BS
     */
    public void setTaxAmtBs(Number value) {
        setAttributeInternal(TAXAMTBS, value);
    }

    /**
     * Gets the attribute value for TAX_AMT_SP using the alias name TaxAmtSp.
     * @return the TAX_AMT_SP
     */
    public Number getTaxAmtSp() {
        return roundOffAmt((Number) getAttributeInternal(TAXAMTSP));
    }

    /**
     * Sets <code>value</code> as attribute value for TAX_AMT_SP using the alias name TaxAmtSp.
     * @param value value to set the TAX_AMT_SP
     */
    public void setTaxAmtSp(Number value) {
        setAttributeInternal(TAXAMTSP, value);
    }

    /**
     * Gets the attribute value for TAX_RULE_FLG using the alias name TaxRuleFlg.
     * @return the TAX_RULE_FLG
     */
    public String getTaxRuleFlg() {
        return (String) getAttributeInternal(TAXRULEFLG);
    }

    /**
     * Sets <code>value</code> as attribute value for TAX_RULE_FLG using the alias name TaxRuleFlg.
     * @param value value to set the TAX_RULE_FLG
     */
    public void setTaxRuleFlg(String value) {
        setAttributeInternal(TAXRULEFLG, value);
    }

    /**
     * Gets the attribute value for TOT_AMT_BS using the alias name TotAmtBs.
     * @return the TOT_AMT_BS
     */
    public Number getTotAmtBs() {
        return roundOffAmt((Number) getAttributeInternal(TOTAMTBS));
    }

    /**
     * Sets <code>value</code> as attribute value for TOT_AMT_BS using the alias name TotAmtBs.
     * @param value value to set the TOT_AMT_BS
     */
    public void setTotAmtBs(Number value) {
        setAttributeInternal(TOTAMTBS, value);
    }

    /**
     * Gets the attribute value for TOT_AMT_SP using the alias name TotAmtSp.
     * @return the TOT_AMT_SP
     */
    public Number getTotAmtSp() {
        
    //    System.out.println("in the getter of  getTotAmtSp");
        SVCInvoiceAMImpl am =  (SVCInvoiceAMImpl)this.getApplicationModule();
        RowQualifier rq=new RowQualifier(am.getSvcInvcItm());
               rq.setWhereClause("CldId='"+getCldId()+"' and SlocId="+getSlocId()+" and OrgId='"+getOrgId()+"' and DocId='"+getDocId()+"'");
               Row[] fr=am.getSvcInvcItm().getFilteredRows(rq);
           //    System.out.println("fr lentgth:::"+fr.length);
               Number sum=new Number(0);
               if(fr.length>0)
               {
                   for(Row r:fr)
                   {
                      
                       if(r.getAttribute("ItmAmtSp")!=null)
//                           ItmQty = (Number)r.getAttribute("ItmQty");
//                           ItmPrice = (Number)r.getAttribute("ItmPrice");
                       sum=roundOffAmt(sum.add((Number)r.getAttribute("ItmAmtSp")));
                     //  System.out.println("sum values are:::"+sum);
                       }
                       am.getSvcInvc1().getCurrentRow().setAttribute("TotAmtSp", sum);
                       am.getSvcInvc1().getCurrentRow().setAttribute("transTotalPayAmtSp", sum);
                       return sum;   
                   }
        
       
        return (Number) getAttributeInternal(TOTAMTSP);
    }

    /**
     * Sets <code>value</code> as attribute value for TOT_AMT_SP using the alias name TotAmtSp.
     * @param value value to set the TOT_AMT_SP
     */
    public void setTotAmtSp(Number value) {
        setAttributeInternal(TOTAMTSP, value);
    }

    /**
     * Gets the attribute value for the calculated attribute transDocNo.
     * @return the transDocNo
     */
    public String gettransDocNo() {
    
            if (getDocIdSrc() != null) {
                SVCInvoiceAMImpl am = (SVCInvoiceAMImpl) this.getApplicationModule();
                SvcInvcVOImpl invc = am.getSvcInvc1();
                Row currentRow = invc.getCurrentRow();
                if(currentRow!=null){
                    Object InvcType = currentRow.getAttribute("InvcType");
                    Object eoid = currentRow.getAttribute("EoId");

                    if(InvcType!=null){
                        if(InvcType.equals(95)){
                         //   ViewObjectImpl sc = am.getLovScDocId1();
                            ViewObjectImpl sc = am.getViewSCNo();
                            sc.setNamedWhereClauseParam("BindCldId", getCldId());
                            sc.setNamedWhereClauseParam("BindOrgId", getOrgId());
                            sc.setNamedWhereClauseParam("BindSlocId", getSlocId());
                            sc.setNamedWhereClauseParam("BindEoId", eoid);
                            sc.executeQuery();
                            adfLog.info("current doc id is "+getDocIdSrc());
                            Row[] r = sc.getFilteredRows("DocId", getDocIdSrc());
                            if (r.length > 0) {
                                adfLog.info("current contract no. "+ r[0].getAttribute("ScNo").toString());
                                return r[0].getAttribute("ScNo").toString();
                            }
                        }else{
                            ViewObjectImpl woDoc=am.getLovWoDispDocId();
                            woDoc.setNamedWhereClauseParam("bindCldId", getCldId());
                            woDoc.setNamedWhereClauseParam("bindSlocId", getSlocId());
                            woDoc.setNamedWhereClauseParam("bindOrgId", getOrgId());
                            woDoc.setNamedWhereClauseParam("bindHoOrgId", getHoOrgId());
                            woDoc.setNamedWhereClauseParam("bindDocId", getDocIdSrc());
                            woDoc.executeQuery();
                            Row[] r = am.getLovWoDispDocId().getFilteredRows("DocId", getDocIdSrc());
                            adfLog.info("current doc id is "+getDocIdSrc());
                            if (r.length > 0) {
                                return r[0].getAttribute("DocNo").toString();
                            }
                        }
                    }
                }
            }
        return (String) getAttributeInternal(TRANSDOCNO);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute transDocNo.
     * @param value value to set the  transDocNo
     */
    public void settransDocNo(String value) {
        setAttributeInternal(TRANSDOCNO, value);
    }

    /**
     * Gets the attribute value for the calculated attribute transDocDate.
     * @return the transDocDate
     */
    public Timestamp gettransDocDate() {
        if ((Timestamp) getAttributeInternal(TRANSDOCDATE) != null) {
            return (Timestamp) getAttributeInternal(TRANSDOCDATE);
        } else {
            if (getDocIdSrc() != null) {
                  SVCInvoiceAMImpl am = (SVCInvoiceAMImpl) this.getApplicationModule();
                Row[] r = am.getLovWoDocId1().getFilteredRows("DocId", getDocIdSrc());
                if (r.length > 0) {
                    return (Timestamp)r[0].getAttribute("DocDt");
               }
                    /*  SVCInvoiceAMImpl am = (SVCInvoiceAMImpl) this.getApplicationModule();
                    SvcInvcVOImpl invc = am.getSvcInvc1();
                    Row currentRow = invc.getCurrentRow();
                    if(currentRow!=null){
                        Object InvcType = currentRow.getAttribute("InvcType");
                        Object eoid = currentRow.getAttribute("EoId");

                        if(InvcType!=null){
                            if(InvcType.equals(95)){
                                System.out.println("95");
                                System.out.println("am.getLovScDocId1() = "+am.getLovScDocId1().getRowCount());
                                ViewObjectImpl sc = am.getLovScDocId1();

                                sc.setNamedWhereClauseParam("BindCldId", getCldId());
                                sc.setNamedWhereClauseParam("BindOrgId", getOrgId());
                                sc.setNamedWhereClauseParam("BindSlocId", getSlocId());
                                sc.setNamedWhereClauseParam("BindEoId", eoid);
                                sc.executeQuery();
                                Row[] r = sc.getFilteredRows("DocId", getDocIdSrc());
                                System.out.println("r.length "+r.length);
                                if (r.length > 0) {
                                    return (Timestamp)r[0].getAttribute("DocDt");
                                }
                            }else{
                            
                                
                                System.out.println("96");
                                System.out.println(" am.getLovWoDocId1() = "+ am.getLovWoDocId1().getRowCount());
                                Row[] r = am.getLovWoDocId1().getFilteredRows("DocId", getDocIdSrc());
                                    System.out.println("r.length "+r.length);
                                if (r.length > 0) {
                                    return (Timestamp)r[0].getAttribute("DocDt");
                                }
                            }
                        }
                    }
                   
                }
                } */
            
            }}
       return (Timestamp) getAttributeInternal(TRANSDOCDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute transDocDate.
     * @param value value to set the  transDocDate
     */
    public void settransDocDate(Timestamp value) {
        setAttributeInternal(TRANSDOCDATE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransOcAmtSp.
     * @return the TransOcAmtSp
     */
    public Number getTransOcAmtSp() {
        return (Number) getAttributeInternal(TRANSOCAMTSP);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransOcAmtSp.
     * @param value value to set the  TransOcAmtSp
     */
    public void setTransOcAmtSp(Number value) {
        setAttributeInternal(TRANSOCAMTSP, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransItmAmtSp.
     * @return the TransItmAmtSp
     */
    public Number getTransItmAmtSp() {
        return (Number) getAttributeInternal(TRANSITMAMTSP);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransItmAmtSp.
     * @param value value to set the  TransItmAmtSp
     */
    public void setTransItmAmtSp(Number value) {
        setAttributeInternal(TRANSITMAMTSP, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransFinalAmt.
     * @return the TransFinalAmt
     */
    public Number getTransFinalAmt() {
        if(getAttributeInternal(TRANSFINALAMT)!=null){
            setTotAmtSp((Number)((Number)getAttributeInternal(TRANSFINALAMT)).round(getAmtRoundOff()));
            setTotAmtBs((Number)((Number)getAttributeInternal(TRANSFINALAMT)).multiply(getCurrConvFctr()).round(getAmtRoundOff()));
        }
        return (Number) getAttributeInternal(TRANSFINALAMT);
    }
   
    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransFinalAmt.
     * @param value value to set the  TransFinalAmt
     */
    public void setTransFinalAmt(Number value) {
        if(value!=null){
            setAttributeInternal(TRANSFINALAMT, value.round(getAmtRoundOff()));
        }else{ setAttributeInternal(TRANSFINALAMT, value);}
        
    }

    /**
     * Gets the attribute value for PMT_SCHDL_DT using the alias name PmtSchdlDt.
     * @return the PMT_SCHDL_DT
     */
    public Timestamp getPmtSchdlDt() {
        return (Timestamp) getAttributeInternal(PMTSCHDLDT);
    }

    /**
     * Sets <code>value</code> as attribute value for PMT_SCHDL_DT using the alias name PmtSchdlDt.
     * @param value value to set the PMT_SCHDL_DT
     */
    public void setPmtSchdlDt(Timestamp value) {
        setAttributeInternal(PMTSCHDLDT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransFocSum.
     * @return the TransFocSum
     */
    public Number getTransFocSum() {
        /*         SVCInvoiceAMImpl am=(SVCInvoiceAMImpl)this.getApplicationModule();
        ViewObjectImpl itmvo = am.getSvcInvcItm1();
        
        RowQualifier rq=new RowQualifier(itmvo);
        //doc_id_src need to be filtered
        rq.setWhereClause("DocId = '"+getDocId()+"' and FocItm = 'Y' and DocIdSrc='"+getDocIdSrc()+"'");
        Row [] rr=itmvo.getFilteredRows(rq);
        adfLog.info("total no. of rows are "+rr.length+" exp---"+rq.getExprStr());
        Number sum=new Number(0);
        if(rr.length>0){
            for(Row r : rr){
                sum=sum.add((Number)r.getAttribute("ItmAmtSp"));
               // adfLog.info("total foc amt is in------------- "+sum);
            }
        }
        adfLog.info("total foc amt is "+sum);
return sum; */

        return (Number) getAttributeInternal(TRANSFOCSUM);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransFocSum.
     * @param value value to set the  TransFocSum
     */
    public void setTransFocSum(Number value) {
        setAttributeInternal(TRANSFOCSUM, value);
    }

    private Integer getAmtRoundOff()
     {
         Integer roundOff=Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}").toString()); 
         return roundOff;
     }
    private String resolvEl(String data) {
            FacesContext fc = FacesContext.getCurrentInstance();
            Application app = fc.getApplication();
            ExpressionFactory elFactory = app.getExpressionFactory();
            ELContext elContext = fc.getELContext();
            ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
            String Message = valueExp.getValue(elContext).toString();
            return Message;
        }
    /**
     * Gets the associated <code>RowIterator</code> using master-detail link SvcInvcItm.
     */
    public RowIterator getSvcInvcItm() {
        return (RowIterator) getAttributeInternal(SVCINVCITM);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link SvcInvcOc.
     */
    public RowIterator getSvcInvcOc() {
        return (RowIterator) getAttributeInternal(SVCINVCOC);
    }
}

