package svcinvoiceapp.model.services;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;


import oracle.jbo.server.ViewObjectImpl;

import org.apache.myfaces.trinidad.context.RequestContext;

import svcinvoiceapp.model.services.common.SVCInvoiceAM;
import svcinvoiceapp.model.views.SvcInvcVOImpl;
import svcinvoiceapp.model.views.SvcInvcVORowImpl;
import svcinvoiceapp.model.views.ViewSCNoVOImpl;
import svcinvoiceapp.model.views.searchVOImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Oct 27 18:49:21 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SVCInvoiceAMImpl extends ApplicationModuleImpl implements SVCInvoiceAM {


    static Integer SrNo = 0;

    /**
     * This is the default constructor (do not remove).
     */
    public SVCInvoiceAMImpl() {
    }
    private static ADFLogger _log = (ADFLogger) ADFLogger.createADFLogger(SVCInvoiceAMImpl.class);

    /**
     * Container's getter for search1.
     * @return search1
     */
    Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
    String CldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
    String OrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
    String HoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();

    public searchVOImpl getsearch1() {
        return (searchVOImpl) findViewObject("search1");
    }

    /**
     * Container's getter for SvcInvc1.
     * @return SvcInvc1
     */
    public SvcInvcVOImpl getSvcInvc1() {
        return (SvcInvcVOImpl) findViewObject("SvcInvc1");
    }

    /**
     * Container's getter for LovCustomer1.
     * @return LovCustomer1
     */
    public ViewObjectImpl getLovCustomer1() {
        return (ViewObjectImpl) findViewObject("LovCustomer1");
    }

    /**
     * Container's getter for LovInvcType1.
     * @return LovInvcType1
     */
    public ViewObjectImpl getLovInvcType1() {
        return (ViewObjectImpl) findViewObject("LovInvcType1");
    }


    /**
     * Container's getter for SvcInvcItm1.
     * @return SvcInvcItm1
     */
    public ViewObjectImpl getSvcInvcItm1() {
        return (ViewObjectImpl) findViewObject("SvcInvcItm1");
    }

    /**
     * Container's getter for SvcInvcOc1.
     * @return SvcInvcOc1
     */
    public ViewObjectImpl getSvcInvcOc1() {
        return (ViewObjectImpl) findViewObject("SvcInvcOc1");
    }

    /**
     * Container's getter for SvcInvcPmtSchdl1.
     * @return SvcInvcPmtSchdl1
     */
    public ViewObjectImpl getSvcInvcPmtSchdl1() {
        return (ViewObjectImpl) findViewObject("SvcInvcPmtSchdl1");
    }

    /**
     * Container's getter for SvcInvcSrc1.
     * @return SvcInvcSrc1
     */
    public ViewObjectImpl getSvcInvcSrc1() {
        return (ViewObjectImpl) findViewObject("SvcInvcSrc1");
    }

    /**
     * Container's getter for SvcInvcTrLines1.
     * @return SvcInvcTrLines1
     */
    public ViewObjectImpl getSvcInvcTrLines1() {
        return (ViewObjectImpl) findViewObject("SvcInvcTrLines1");
    }

    /**
     * Container's getter for SvcInvcTr1.
     * @return SvcInvcTr1
     */
    public ViewObjectImpl getSvcInvcTr1() {
        return (ViewObjectImpl) findViewObject("SvcInvcTr1");
    }

    /**
     * Container's getter for LovCurr1.
     * @return LovCurr1
     */
    public ViewObjectImpl getLovCurr1() {
        return (ViewObjectImpl) findViewObject("LovCurr1");
    }

    /**
     * Container's getter for LovCustAdds1.
     * @return LovCustAdds1
     */
    public ViewObjectImpl getLovCustAdds1() {
        return (ViewObjectImpl) findViewObject("LovCustAdds1");
    }

    /**
     * Container's getter for LovCoaId1.
     * @return LovCoaId1
     */
    public ViewObjectImpl getLovCoaId1() {
        return (ViewObjectImpl) findViewObject("LovCoaId1");
    }

    /**
     * Container's getter for LovScDocId1.
     * @return LovScDocId1
     */
    public ViewObjectImpl getLovScDocId1() {
        return (ViewObjectImpl) findViewObject("LovScDocId1");
    }

    /**
     * Container's getter for LovWoDocId1.
     * @return LovWoDocId1
     */
    public ViewObjectImpl getLovWoDocId1() {
        return (ViewObjectImpl) findViewObject("LovWoDocId1");
    }

    /**
     * Container's getter for LovDocStatus1.
     * @return LovDocStatus1
     */
    public ViewObjectImpl getLovDocStatus1() {
        return (ViewObjectImpl) findViewObject("LovDocStatus1");
    }

    /**
     * Container's getter for LovPayMode1.
     * @return LovPayMode1
     */
    public ViewObjectImpl getLovPayMode1() {
        return (ViewObjectImpl) findViewObject("LovPayMode1");
    }

    public void refreshInvoiceCalc(Integer SlocId, String CldId, String HoOrgId, String OrgId) {
        Integer invcType = 96;
        invcType = Integer.parseInt(this.getSvcInvc1().getCurrentRow().getAttribute("InvcType").toString());
        //System.out.println("invcType::::"+invcType);
        String DocId = this.getSvcInvc1().getCurrentRow().getAttribute("DocId").toString();
        this.getDBTransaction().postChanges(); //REMOVE COMMENT TO FETCH EXACT VALUE. BY HEROJIT
        // System.out.println("DocId = "+DocId+" invcType =  "+invcType+" SlocId = "+SlocId+" CldId =  "+CldId+"  HoOrgId = "+HoOrgId+" OrgId = "+OrgId+" ");

        callStoredFunction(Types.VARCHAR, "svc.SVC_INS_INVC_CALC (?,?,?,?,?,?)", new Object[] {
                           SlocId, CldId, HoOrgId, OrgId, DocId, invcType
        });
        this.getSVCInvcCalc1().executeQuery();


    }

    /**
     * Container's getter for SvcInvcSrc2.
     * @return SvcInvcSrc2
     */
    public ViewObjectImpl getSvcInvcSrc() {
        return (ViewObjectImpl) findViewObject("SvcInvcSrc");
    }

    /**
     * Container's getter for FkSvcInvcSrcVL1.
     * @return FkSvcInvcSrcVL1
     */
    public ViewLinkImpl getFkSvcInvcSrcVL1() {
        return (ViewLinkImpl) findViewLink("FkSvcInvcSrcVL1");
    }


    /**
     * Container's getter for SvcInvcPmtSchdl2.
     * @return SvcInvcPmtSchdl2
     */
    public ViewObjectImpl getSvcInvcPmtSchdl() {
        return (ViewObjectImpl) findViewObject("SvcInvcPmtSchdl");
    }

    /**
     * Container's getter for FkSvcInvcPmtSchdlVL1.
     * @return FkSvcInvcPmtSchdlVL1
     */
    public ViewLinkImpl getFkSvcInvcPmtSchdlVL1() {
        return (ViewLinkImpl) findViewLink("FkSvcInvcPmtSchdlVL1");
    }

    /**
     * Container's getter for SvcInvcItm2.
     * @return SvcInvcItm2
     */
    public ViewObjectImpl getSvcInvcItm() {
        return (ViewObjectImpl) findViewObject("SvcInvcItm");
    }

    /**
     * Container's getter for FkSvcInvcItmVL1.
     * @return FkSvcInvcItmVL1
     */
    public ViewLinkImpl getFkSvcInvcItmVL1() {
        return (ViewLinkImpl) findViewLink("FkSvcInvcItmVL1");
    }

    /**
     * Container's getter for SvcInvcOc2.
     * @return SvcInvcOc2
     */
    public ViewObjectImpl getSvcInvcOc() {
        return (ViewObjectImpl) findViewObject("SvcInvcOc");
    }

    /**
     * Container's getter for FkSvcInvcOcVL1.
     * @return FkSvcInvcOcVL1
     */
    public ViewLinkImpl getFkSvcInvcOcVL1() {
        return (ViewLinkImpl) findViewLink("FkSvcInvcOcVL1");
    }

    /**
     * Container's getter for SvcInvcTr2.
     * @return SvcInvcTr2
     */
    public ViewObjectImpl getSvcInvcTr() {
        return (ViewObjectImpl) findViewObject("SvcInvcTr");
    }

    /**
     * Container's getter for FkSvcInvcTrVL1.
     * @return FkSvcInvcTrVL1
     */
    public ViewLinkImpl getFkSvcInvcTrVL1() {
        return (ViewLinkImpl) findViewLink("FkSvcInvcTrVL1");
    }

    /**
     * Container's getter for SvcInvcTrLines2.
     * @return SvcInvcTrLines2
     */
    public ViewObjectImpl getSvcInvcTrLines() {
        return (ViewObjectImpl) findViewObject("SvcInvcTrLines");
    }

    /**
     * Container's getter for FkSvcInvcTrLinesNewVL1.
     * @return FkSvcInvcTrLinesNewVL1
     */
    public ViewLinkImpl getFkSvcInvcTrLinesNewVL1() {
        return (ViewLinkImpl) findViewLink("FkSvcInvcTrLinesNewVL1");
    }


    /**
     * Container's getter for LovItmId1.
     * @return LovItmId1
     */
    public ViewObjectImpl getLovItmId1() {
        return (ViewObjectImpl) findViewObject("LovItmId1");
    }

    /**
     * Container's getter for TaxCalc1.
     * @return TaxCalc1
     */
    public ViewObjectImpl getTaxCalc1() {
        return (ViewObjectImpl) findViewObject("TaxCalc1");
    }

    /**
     * Container's getter for LovDiscType1.
     * @return LovDiscType1
     */
    public ViewObjectImpl getLovDiscType1() {
        return (ViewObjectImpl) findViewObject("LovDiscType1");
    }

    /**
     * Container's getter for transSearch1.
     * @return transSearch1
     */
    public ViewObjectImpl gettransSearch1() {
        return (ViewObjectImpl) findViewObject("transSearch1");
    }

    /**
     * Container's getter for LovCurrencyId1.
     * @return LovCurrencyId1
     */
    public ViewObjectImpl getLovCurrencyId1() {
        return (ViewObjectImpl) findViewObject("LovCurrencyId1");
    }

    /**
     * Container's getter for LovInvc1.
     * @return LovInvc1
     */
    public ViewObjectImpl getLovInvc1() {
        return (ViewObjectImpl) findViewObject("LovInvc1");
    }

    public static Object resolveEL(String el) {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        ELContext elContext = facesContext.getELContext();
        ExpressionFactory expressionFactory = facesContext.getApplication().getExpressionFactory();
        ValueExpression exp = expressionFactory.createValueExpression(elContext, el, Object.class);
        return exp.getValue(elContext);
    }


    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        // System.out.println("stmt:::"+stmt);
        try {
            st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            // System.out.println("st::"+st);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.executeUpdate();

            return st.getObject(1);
        } catch (SQLException e) {
            e.printStackTrace();
            int end = e.getMessage().indexOf("\n");
            //  throw new JboException(e.getMessage().substring(11, end));
            String msg = e.getMessage();
            FacesMessage ermsg = new FacesMessage(msg);
            ermsg.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, ermsg);
            //  throw new JboException(e);

            return null;
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    public String generateDocId(Integer UsrId, String CldId, Integer SlocId, String OrgId) {
        //  System.out.println("welcome in generateDocId impl");
        String docId = (String) (callStoredFunction(Types.VARCHAR, "app.get_txn_id (?,?,?,?,?,?)", new Object[] {
                                                    CldId, SlocId, OrgId, UsrId, new Integer(23008), new Integer(0)
        }));
        // String docId="1234a";
        // System.out.println("calculated docId is::::::"+docId);
        return docId;
    }

    public void setTxnIdForCurrentRow(Integer UsrId, String CldId, Integer SlocId, String OrgId) {
        Row currentRow = this.getSvcInvc1().getCurrentRow();
        String docId = (String) (callStoredFunction(Types.VARCHAR, "app.get_txn_id (?,?,?,?,?,?)", new Object[] {
                                                    CldId, SlocId, OrgId, UsrId, new Integer(23008), new Integer(0)
        })); // app.pkg_app.get_txn_id(p_usr_id,p_org_id,p_sloc_id,18505)
        _log.info("--TxnId new created--" + docId);
        Timestamp ts = new Timestamp(System.currentTimeMillis());
        currentRow.setAttribute("DocId", docId);
        currentRow.setAttribute("DocDt", new Timestamp(System.currentTimeMillis()));
        currentRow.setAttribute("InvcDt", new Timestamp(System.currentTimeMillis()));
        currentRow.setAttribute("CrtDt", new Timestamp(System.currentTimeMillis()));
        getFYid(CldId, OrgId, ts, "A");


    }

    /**
     *
     * @param SlocId
     * @param CldId
     * @param HoOrgId
     * @param OrgId
     * @param TableName
     * @param WhId
     * @param fyId
     * @return
     */

    public String genInvioceNo(Integer SlocId, String CldId, String HoOrgId, String OrgId, String TableName,
                               Integer fyId) {
        //System.out.println("welcome in genInvioceNo::");



        //System.out.println("TableName:::"+TableName);
        SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        //Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        CldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        OrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        HoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        Row cmRow = this.getSvcInvc1().getCurrentRow();
        fyId = (Integer) cmRow.getAttribute("FyId");
        //  System.out.println("fyId is::"+fyId);
        String invcNo = null;
        if (cmRow.getAttribute("InvcNo") != null) {
            // docType =Integer.parseInt(cmRow.getAttribute("CallRefType").toString());
           
        } else {
            invcNo = (String) callStoredFunction(Types.VARCHAR, "SVC.SVC_GEN_ID(?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                 CldId, SlocId, HoOrgId, OrgId, "SVC$INVC", fyId, null, null, null, null
            });
            // System.out.println("invcNo:::"+invcNo);
            _log.info("new id    " + invcNo);
            cmRow.setAttribute("InvcNo", invcNo);
           // invcNo = cmRow.getAttribute("InvcNo").toString();
        }
        return invcNo;
    }

    /**
     *
     * @param CldId
     * @param OrgId
     * @param geDate
     * @param Mode
     * @return
     */

    public Integer getFYid(String CldId, String OrgId, Timestamp geDate, String Mode) {
        Integer fyId = (Integer) (callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID (?,?,?)", new Object[] {
                                                     CldId, OrgId, geDate
        }));
        //  System.out.println("fyId:::"+fyId);
        Financial_year_id = fyId;
        _log.info("-FY RETURNED-" + fyId);
        if (Mode.equalsIgnoreCase("A")) {
            _log.info("Set FyId in case mode is add");
            ViewObjectImpl ge = this.getSvcInvc1();
            if (fyId > 0) {
                ge.getCurrentRow().setAttribute("FyId", fyId);
            }
        } else if (Mode.equalsIgnoreCase("V")) {
            _log.info("In case mode is validation");
        }
        return fyId;
    }

    Integer Financial_year_id = null;

    public void setFinancial_year_id(Integer Financial_year_id) {
        this.Financial_year_id = Financial_year_id;
    }

    public Integer getFinancial_year_id() {
        return Financial_year_id;
    }

    public void setSelectDocIdOnViewPage() {
        Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        String CldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        String OrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        String HoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        String Docid = null;

        SvcInvcVOImpl impl = this.getSvcInvc1();
        try {
            if (resolvEl("#{pageFlowScope.DOC_ID}") != null) {
                Docid = (String) (resolvEl("#{pageFlowScope.DOC_ID}"));
            } else {
                Row r = this.getsearch1().getCurrentRow();
                if (r != null) {
                    Docid = (String) r.getAttribute("DocId");
                }
            }
        } catch (Exception e) {
            FacesMessage message =
                new FacesMessage("There have been an error in calling taskflow 'SVCInvoiceAddEdit'!");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
        }
        impl.setbindCldId(CldId.toString());
        impl.setbindSlocId(SlocId);
        impl.setbindOrgId(OrgId.toString());
        // impl.setbindHoOrgId(HoOrgId.toString());
        //System.out.println("doc id while calling add edit tf = "+Docid);
        if (Docid != null) {
            impl.setbindDocId(Docid.toString());
            impl.executeQuery();
            //System.out.println("DOCID : " + Docid);
        } else {
            FacesMessage message =
                new FacesMessage("There have been an error in calling taskflow 'SVCInvoiceAddEdit'!");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
        }

    }


    public String getCurrentDocId() {
        String DocId = getSvcInvc1().getCurrentRow().getAttribute("DocId").toString();
        if (DocId != null) {
            return DocId;
        } else {
            return null;
        }
    }

    /**
     * For resolving the El
     */
    public Object resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        return valueExp.getValue(elContext);

    }

    public void addInvcDtl() {

        Integer invcType = Integer.parseInt(this.getSvcInvc1().getCurrentRow().getAttribute("InvcType").toString());
        // System.out.println("invcType::::"+invcType);
        String DocId = this.getSvcInvc1().getCurrentRow().getAttribute("DocId").toString();
        //System.out.println("DocId in addInvcDtl:::"+DocId);

        String DocIdSrcSc = null;
        if (this.getSvcInvc1().getCurrentRow().getAttribute("transDocId") != null) {
            DocIdSrcSc = this.getSvcInvc1().getCurrentRow().getAttribute("transDocId").toString();
        }
        //   System.out.println("transDocId::::"+DocIdSrcSc);
        Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        // Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        String CldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        String OrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        String HoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        Number Curr_conv_fctr = (Number) this.getSvcInvc1().getCurrentRow().getAttribute("CurrConvFctr");
        // System.out.println("Curr_conv_fctr::::"+Curr_conv_fctr);CurrConvFctr

        Integer ret = -1;
        if (invcType == 96) { //Work order
            //SVC_INS_INVC_FRM_WO
            _log.info("svc post changes befor  ");
            this.getDBTransaction().postChanges();
            ret = Integer.parseInt(callStoredFunction(Types.VARCHAR, "svc.SVC_INS_INVC_FRM_WO(?,?,?,?,?,?,?)", new Object[] {
                                                      CldId, SlocId, HoOrgId, OrgId, DocId, DocIdSrcSc, Curr_conv_fctr
            }).toString());
            // this.getDBTransaction().postChanges();
            _log.info("invc ffrom wo return " + ret);
            if (ret != null) {
                if (ret == 1) {

                    this.getSvcInvcSrc().executeQuery();
                    this.getSvcInvcItm().executeQuery();
                    this.getSvcInvcOc().executeQuery();
                    this.getSvcInvcTr().executeQuery();
                    this.getSvcInvcTrLines().executeQuery();
                    this.getSvcInvcItm1().executeQuery();

                    Number taxableAmt = null;
                    if (this.getSvcInvcItm().getCurrentRow().getAttribute("ItmQty") != null &&
                        this.getSvcInvcItm().getCurrentRow().getAttribute("ItmPrice") != null) {
                        Number itmQnty = (Number) this.getSvcInvcItm().getCurrentRow().getAttribute("ItmQty");
                        Number itmprc = (Number) this.getSvcInvcItm().getCurrentRow().getAttribute("ItmPrice");
                        taxableAmt = itmQnty.multiply(itmprc);
                        this.getSvcInvcItm().getCurrentRow().setAttribute("transTaxableAmt", roundOffAmt(taxableAmt));
                    } else {
                        taxableAmt = new Number(0);
                        this.getSvcInvcItm().getCurrentRow().setAttribute("transTaxableAmt", new Number(0));
                    }
                }
            }

        } else if (invcType == 95) { // for service contract
            //SVC_INS_INVC_FRM_SC
            this.getDBTransaction().postChanges();
            //  System.out.println("calling function SVC_INS_INVC_FRM_SC");
            _log.info("current date is " + this.getSvcInvc1().getCurrentRow().getAttribute("TransPmtSchdlDt"));
            ret = Integer.parseInt(callStoredFunction(Types.VARCHAR, "svc.SVC_INS_INVC_FRM_SC (?,?,?,?,?,?,?,?)", new Object[] {
                                                      CldId, SlocId, HoOrgId, OrgId, DocId, DocIdSrcSc,
                                                      this.getSvcInvc1().getCurrentRow().getAttribute("TransPmtSchdlDt"),
                                                      Curr_conv_fctr
            }).toString());
            //this.getDBTransaction().postChanges();
            //  System.out.println("successfully called::ret:"+ret);
            _log.info("invc ffrom service contract return " + ret);
            if (ret != null) {
                if (ret == 1) {
                    //   System.out.println("welcome in ret");
                    this.getSvcInvcSrc().executeQuery();
                    this.getSvcInvcItm().executeQuery();
                    this.getSvcInvcOc().executeQuery();
                    this.getSvcInvcTr().executeQuery();
                    this.getSvcInvcTrLines().executeQuery();
                    this.getSvcInvcItm1().executeQuery();
                    //   System.out.println("end executing:::");
                    // String Docname=this.getSvcInvc1().getCurrentRow().getAttribute("transDocName").toString();
                    //this.getSvcInvcSrc().getCurrentRow().setAttribute("transDocNo", Docname);
                    Number itmQnty = (Number) this.getSvcInvcItm().getCurrentRow().getAttribute("ItmQty");
                    Number itmprc = (Number) this.getSvcInvcItm().getCurrentRow().getAttribute("ItmPrice");
                    Number taxableAmt = roundOffAmt(itmQnty.multiply(itmprc));
                    this.getSvcInvcItm().getCurrentRow().setAttribute("transTaxableAmt", taxableAmt);
                    //                         String DocDate=this.getLovScDocId1().getCurrentRow().getAttribute("DocDt").toString();
                    //                         this.getSvcInvcSrc().getCurrentRow().setAttribute("transDocDate", DocDate);

                }
            }

        }

        // code adde to update the total amount
        ViewObjectImpl item = getSvcInvcItm();
        RowSetIterator rsi = item.createRowSetIterator(null);
        Number totalAmount = new Number(0);
        while (rsi.hasNext()) {
            Row next = rsi.next();
            Number itmQnty = (Number) next.getAttribute("ItmQty");
            Number itmprc = (Number) next.getAttribute("ItmPrice");
            Number discAmt = (Number) next.getAttribute("DiscAmtSp");

            Number totalItmAmt = (Number) (itmQnty.multiply(itmprc).minus(discAmt));
            //   System.out.println("totalAmt in impl::::"+totalItmAmt);

            next.setAttribute("ItmAmtSp", roundOffAmt(totalItmAmt));
            totalAmount = totalAmount.add(totalItmAmt);
            //transTotalAmount
        }
        //System.out.println("totalAmount = "+totalAmount);
        rsi.closeRowSetIterator();
        RowSetIterator rsiUpd = item.createRowSetIterator(null);
        while (rsiUpd.hasNext()) {
            Row next = rsiUpd.next();
            next.setAttribute("transTotalAmount", roundOffAmt(totalAmount));

        }

        rsiUpd.closeRowSetIterator();

        SvcInvcVOImpl inv = getSvcInvc1();
        Row currentRow = inv.getCurrentRow();
        if (currentRow != null) {
            currentRow.setAttribute("transTotalPayAmtSp", roundOffAmt(totalAmount));
            currentRow.setAttribute("transRemainingAmount", roundOffAmt(totalAmount));
        }
    }

    public void generateDiscAmtSp(String DocId) {
        //   System.out.println("print DocId in generateDiscAmtSp is:::"+DocId);
        ViewObjectImpl svcItmVo = this.getSvcInvcItm();
        String sql = "select sum(DiscAmtSp) from ";
        svcItmVo.setQuery(sql);
        svcItmVo.executeQuery();

    }

    public String duplicatePmtDateChk() {
        Row curr = this.getSvcInvc1().getCurrentRow();
        if (curr.getAttribute("TransPmtSchdlDt") != null) {
            /*  RowQualifier rq=new RowQualifier(this.getSvcInvcSrc());
            rq.setWhereClausee("arg0");
             */
        ViewObjectImpl srcvo=this.getSvcInvcSrc();
            Row[] rr = srcvo.getFilteredRows("PmtSchdlDt", curr.getAttribute("TransPmtSchdlDt"));
            if (rr.length > 0) {
                RowQualifier rq=new RowQualifier(srcvo);
                rq.setWhereClause("DocIdSrc='"+curr.getAttribute("transDocId")+"' and OrgId='"+OrgId+"' and HoOrgId='"
                                  +HoOrgId+"' and SlocId="+SlocId+" and CldId='"+CldId+"'");
                Row [] rr1=srcvo.getFilteredRows(rq);
                if(rr1.length>0){
                        return "N";
                }else{
                    return "Y";
                }
            } else {
                return "Y";
            }
        }
        return "Y";
    }


    public void calculationDiscAmtValue(Number discAmt) {
        //   System.out.println("discAmt:::in impl::"+discAmt);
        String TaxAfterDiscFlg = this.getSvcInvcSrc().getCurrentRow().getAttribute("TaxAfterDiscFlg").toString();
        //System.out.println("TaxAfterDiscFlg::impl:"+TaxAfterDiscFlg);
        Row row = this.getSvcInvcItm().getCurrentRow();
        String discType = row.getAttribute("DiscType").toString();
        //System.out.println("discType::"+discType);
        // Number discAmt=new Number(0);
        Number value = new Number(0);
        Number discAmtsp = new Number(0);
        Number ItmQty = (Number) row.getAttribute("ItmQty");
        // System.out.println("ItmQty in impl:::"+ItmQty);
        Number ItmPrc = (Number) row.getAttribute("ItmPrice");
        //  System.out.println("ItmPrc in impl:::"+ItmPrc);

        if (TaxAfterDiscFlg.equals("Y")) {
            //    System.out.println("welcome in if impl");
            if (discType.equals("A")) {

                value = (Number) (ItmQty.multiply(ItmPrc)).minus(discAmt);

                //     System.out.println("amount calculation :::"+value);
            } else if (discType.equals("P")) {
                value =
                    (Number) (ItmQty.multiply(ItmPrc).minus((ItmQty.multiply(ItmPrc)).multiply(discAmt).divide(new Number(100))));
                //   System.out.println("percent calculation :::"+value);

            }
        } else {
            //System.out.println("welcome in else");
            value = ItmQty.multiply(ItmPrc);
        }
        if (value != null) {
            discAmtsp = (Number) ItmQty.multiply(ItmPrc).minus(value);
            //  System.out.println("value in impl ::"+value);
            //settransTaxableAmt(value);
            row.setAttribute("transTaxableAmt", roundOffAmt(value));
            row.setAttribute("DiscAmtSp", roundOffAmt(discAmtsp));
            // this.getSvcInvcItm().executeQuery();
        }


    }

    public String isTaxApplicable() {
        Row curr = this.getSvcInvcItm().getCurrentRow();
        String flag = null;
        if (curr.getAttribute("ItmId") != null) {
            ViewObjectImpl itemvo = this.getLovItmId1();
            itemvo.setNamedWhereClauseParam("bindCldId", CldId);
            itemvo.setNamedWhereClauseParam("bindSlocId", SlocId);
            itemvo.setNamedWhereClauseParam("bindHoOrgId", HoOrgId);
            itemvo.setNamedWhereClauseParam("bindOrgId", OrgId);
            itemvo.setNamedWhereClauseParam("bindItmId", null);
            itemvo.executeQuery();
            Row[] rr1 = itemvo.getFilteredRows("ItmId", curr.getAttribute("ItmId"));
            if (rr1.length > 0) {
                String taxFlg = rr1[0].getAttribute("TaxExmptFlg").toString();
                // Adflog.info("tax rule in if part " + rr1[0].getAttribute("TaxRuleId")+"rr1[0].getAttribute "+rr1[0].getAttribute("TaxExmptFlg"));
                if (taxFlg.equalsIgnoreCase("Y")) {
                    return "Y";
                } else {
                    if (rr1[0].getAttribute("TaxRuleId") != null) {
                        return "N";
                    }
                    return "Y";
                }
            }
            // _log.info("tax exmptd flag is "+flag);
        }

        return flag;
    }

    public void invoiceTaxCalculation() {
        //   System.out.println("Welcome in invoiceTaxCalculation");
        String itmId = null;

        itmId = this.getSvcInvcItm().getCurrentRow().getAttribute("ItmId").toString();

        ViewObjectImpl vo = this.getTaxCalc1();
        vo.setNamedWhereClauseParam("bindCldId", CldId);
        vo.setNamedWhereClauseParam("bindSlocId", SlocId);
        vo.setNamedWhereClauseParam("bindHoOrgId", HoOrgId);
        vo.executeQuery();
        Row[] row = null;
        if (itmId != null) {
            RowQualifier rq=new RowQualifier(vo);
            rq.setWhereClause("OrgId='"+OrgId+"' and ItmId='"+itmId+"'");
            row = vo.getFilteredRows(rq);
        }
        Number taxRuleId = new Number(0);
        taxRuleId = (Number) row[0].getAttribute("TaxRuleId");
        // taxRuleId=null;
        if (taxRuleId != null) {
            if (!taxRuleId.equals(0)) {
                Number convFactor = new Number(0);
                convFactor = (Number) this.getSvcInvc1().getCurrentRow().getAttribute("CurrConvFctr");
                String DocId = this.getSvcInvc1().getCurrentRow().getAttribute("DocId").toString();
                ///     System.out.println("DocId in apply tax:::" + DocId);
                String DocIdSrcSc = null;
                if (this.getSvcInvcItm().getCurrentRow().getAttribute("DocIdSrc") != null) {
                    DocIdSrcSc = this.getSvcInvcItm().getCurrentRow().getAttribute("DocIdSrc").toString();
                  System.out.println("DocIdSrcSc in apply tax:::" + DocIdSrcSc);
                }
                Number taxableAmt = new Number(0);
                taxableAmt = (Number) this.getSvcInvcItm().getCurrentRow().getAttribute("TaxableAmtSp");
                String taxExmptFlg = row[0].getAttribute("TaxExmptFlg").toString();
                SvcInvcVOImpl invc = this.getSvcInvc1();
                Row currentRow = invc.getCurrentRow();
                Number transTotalPayAmtSp = new Number(0);
                if (currentRow != null) {
                    transTotalPayAmtSp = (Number) currentRow.getAttribute("transTotalPayAmtSp");
                }
                this.getDBTransaction().postChanges();
                BigDecimal result;
                try {
                   
                    result =
                        (BigDecimal) callStoredFunction(Types.NUMERIC,
                                                        "svc.SVC_INS_INVC_TR_LINES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                        CldId, SlocId, HoOrgId, OrgId, DocId, DocIdSrcSc, itmId,
                                                        taxRuleId, taxableAmt, "I",
                                                        this.getSvcInvcItm().getCurrentRow().getAttribute("PmtSchdlDt"),
                                                        convFactor, taxExmptFlg, "Y"
                    });
                    this.getDBTransaction().postChanges();
                    // System.out.println("result:in impl::" + result);
                    if (result != null) {
                        this.getSvcInvcItm().getCurrentRow().setAttribute("TaxAmtSp", result);
                        Number itmQnty = (Number) this.getSvcInvcItm().getCurrentRow().getAttribute("ItmQty");
                        Number itmprc = (Number) this.getSvcInvcItm().getCurrentRow().getAttribute("ItmPrice");
                        Number discAmt = (Number) this.getSvcInvcItm().getCurrentRow().getAttribute("DiscAmtSp");

                        Number totalAmt = (Number) ((itmQnty.multiply(itmprc).minus(discAmt)).add(new Number(result)));
                        //  System.out.println("totalAmt in impl::::" + totalAmt);
                        this.getSvcInvcItm().getCurrentRow().setAttribute("transTotalAmount", roundOffAmt(totalAmt));
                        // this.getSvcInvc1().getCurrentRow().setAttribute("TotAmtSp", totalAmt);
                        //this.getSvcInvc1().getCurrentRow().setAttribute("transTotalPayAmtSp", totalAmt);
                        this.getSvcInvcItm().getCurrentRow().setAttribute("TaxAmtSp", roundOffAmt(new Number(result)));

                        this.getSvcInvcItm().getCurrentRow().setAttribute("ItmAmtSp", roundOffAmt(totalAmt));
                        if (currentRow != null) {
                            Number res = new Number(result);
                            currentRow.setAttribute("transTotalPayAmtSp", roundOffAmt(transTotalPayAmtSp.add(res)));
                            currentRow.setAttribute("transRemainingAmount", roundOffAmt(transTotalPayAmtSp.add(res)));

                        }

                    }
                } catch (Exception sqlex) {
                    sqlex.printStackTrace();
                }
            } else {
                showFacesMsg("Tax is Not applicable for this Item", "Please Apply Tax on this Item",
                             FacesMessage.SEVERITY_WARN, null);

            }
        } else {
            showFacesMsg("Tax is Not applicable for this Item", "Please Apply Tax on this Item",
                         FacesMessage.SEVERITY_WARN, null);
        }
    }

    public void showFacesMsg(String msgHdr, String msgDtl, javax.faces.application.FacesMessage.Severity msgSeverity,
                             String msgMode) {

        FacesMessage msg = new FacesMessage(msgHdr);
        msg.setDetail(msgDtl);
        msg.setSeverity(msgSeverity);
        FacesContext.getCurrentInstance().addMessage(null, msg);

    }

    public void searchInvoice() {

        String hoOrgId = (String) resolveEL("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        String cldId = (String) resolveEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocId = Integer.parseInt(resolveEL("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());

        ViewObjectImpl vo = this.getsearch1();
        ViewObjectImpl vo1 = this.gettransSearch1();
        Row row = vo1.getCurrentRow();
        /*  System.out.println("row.getAttribute(\"transInvcType\") = "+row.getAttribute("transInvcType"));
        System.out.println("row.getAttribute(\"fromSpAmt\") = "+row.getAttribute("fromSpAmt"));
        System.out.println("row.getAttribute(\"ToSpAmt\") = "+row.getAttribute("ToSpAmt"));
        System.out.println("row.getAttribute(\"transFromDate\") = "+row.getAttribute("transFromDate"));
        System.out.println("row.getAttribute(\"transToDate\") = "+row.getAttribute("transToDate"));
        */
        vo.setNamedWhereClauseParam("bindCldId", cldId);
        vo.setNamedWhereClauseParam("bindSlocId", slocId);
        vo.setNamedWhereClauseParam("bindOrgId", orgId);
        vo.setNamedWhereClauseParam("bindDocId", row.getAttribute("invcId"));
        vo.setNamedWhereClauseParam("bindEoNm", row.getAttribute("transCustomerName"));

        vo.setNamedWhereClauseParam("bindInvcType", row.getAttribute("transInvcType"));
        vo.setNamedWhereClauseParam("bindFrmDt", row.getAttribute("transFromDate"));
        vo.setNamedWhereClauseParam("bindToDt", row.getAttribute("transToDate"));
        //vo.setNamedWhereClauseParam("bindEoIdSrc", row.getAttribute("transEoId"));
        vo.setNamedWhereClauseParam("bindFrTotAmySp", row.getAttribute("fromSpAmt"));
        vo.setNamedWhereClauseParam("bindToTotAmtSp", row.getAttribute("ToSpAmt"));
        vo.setNamedWhereClauseParam("bindCurrId", null);
        vo.setNamedWhereClauseParam("bindFyId", null);
        vo.setNamedWhereClauseParam("bindCoaId", null);
        vo.executeQuery();

    }

    public void resetInvoice() {
        //  System.out.println("welcome in reset action");
        String hoOrgId = (String) resolveEL("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        String cldId = (String) resolveEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocId = Integer.parseInt(resolveEL("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());

        ViewObjectImpl vo = this.getsearch1();
        ViewObjectImpl vo1 = this.gettransSearch1();
        Row row = vo1.getCurrentRow();
        //row.setAttribute("transEoId", null);
        row.setAttribute("transCustomerName", null);
        row.setAttribute("transInvcType", null);
        row.setAttribute("transInvcNo", null);
        row.setAttribute("transCurrencyType", null);
        row.setAttribute("ToSpAmt", null);
        row.setAttribute("fromSpAmt", null);
        row.setAttribute("transFromDate", null);
        row.setAttribute("transToDate", null);

        vo.setNamedWhereClauseParam("bindCldId", cldId);
        vo.setNamedWhereClauseParam("bindSlocId", slocId);
        vo.setNamedWhereClauseParam("bindOrgId", orgId);
        vo.setNamedWhereClauseParam("bindFyId", -1);
        vo.executeQuery();
    }

    /**
     * Method used to get the COA id for the selected EO id(Supplier)
     * return >0 : Coa ID
     *        -2 : coa is not defined for this eo in this organisation
     *        -3 : multiple coa available for this eo in this org
     *        -4 : Other errors
     * */
    public Integer getCoaForEo(String hoOrgId, String eoName) {
        //System.out.println("eoName:::getCoaForEo::"+eoName);
        Row invc = this.getSvcInvc1().getCurrentRow();

        String cldId = invc.getAttribute("CldId").toString();
        String orgId = invc.getAttribute("OrgId").toString();
        Integer sloc = Integer.parseInt(invc.getAttribute("SlocId").toString());

        ViewObjectImpl vo = this.getLovCustomer1();
        vo.setNamedWhereClauseParam("bindCldId", cldId);
        vo.setNamedWhereClauseParam("bindSlocId", sloc);
        vo.setNamedWhereClauseParam("bindOrgId", orgId);
        vo.setNamedWhereClauseParam("bindHoOrgId", hoOrgId);
        vo.executeQuery();

        //Row[] filRw=this.getLovSupplier1().getFilteredRows(new RowQualifier("EoNm='"+eoName+"' and SlocId="+sloc+" and OrgId='"+orgId+"' and CldId='"+cldId+"' and HoOrgId='"+hoOrgId+"'"));
        Row[] filRw = vo.getFilteredRows("EoNm", eoName);
        // System.out.println("length after enterin eo nm "+filRw.length);
        Integer eoId = 0;
        Integer ret = -1;
        if (filRw.length > 0) {
            eoId = (Integer) filRw[0].getAttribute("EoId");
            if (eoId > 0) {
                ret = (Integer) (callStoredFunction(Types.INTEGER, "APP.fn_get_eo_coa_id(?,?,?,?,?)", new Object[] {
                                                    cldId, sloc, hoOrgId, orgId, eoId
                }));
                //   System.out.println("ret  = " + ret + " eoId = " + eoId);
                if (invc.getAttribute("CoaId") == null && ret > 0) {
                    //     System.out.println("before setting coa id");
                    invc.setAttribute("CoaId", ret);
                    SvcInvcVORowImpl invRow = (SvcInvcVORowImpl) this.getSvcInvc1().getCurrentRow();
                    invRow.setCoaId(ret);
                    //  return ret;
                }
            } else {
                // invc.setAttribute("EoId", 0);
                return 0;
            }
        }
        // if -1 then no Eo exists
        // if some value greater than 0 than eo and coa both exist
        // if -2/-3 then no coa/multi coa exist for that eo
        _log.info(eoId + "--EO ID--COA ID--" + ret);
        // System.out.println(eoId+"--EO ID--COA ID--"+ret);
        return ret;
    }

    public void setcoaIdForInvc(Integer coa) {
        _log.info("set coa in AM");
        // System.out.println("coa in impl:::"+coa);
        Row invc = this.getSvcInvc1().getCurrentRow();
        invc.setAttribute("CoaId", coa);
        _log.info("set coa id is " + coa);
    }

    /**
     * Container's getter for LovItmUom1.
     * @return LovItmUom1
     */
    public ViewObjectImpl getLovItmUom1() {
        return (ViewObjectImpl) findViewObject("LovItmUom1");
    }


    public Integer getDocUsrFromWF(String cldId, Integer slcId, String orgId, Integer usrId, String txnId,
                                   Integer docId, Integer docTypId) {
        //   System.out.println("getDocUsrFromWF--- slcId " + slcId + " cldId " + cldId + "  " + " orgId " + orgId +
        //                     " docId " + docId + " tvouId " + txnId + " docTypId " + docTypId);
        Object fnRetVal;
        if (getCurrentDocId() != null) {

            txnId = getCurrentDocId();
            /* System.out.println("getDocUsrFromWF--- slcId " + slcId + " cldId " + cldId + "  " + " orgId " + orgId +
                               " docId " + docId + " tvouId " + tvouId + " docTypId " + docTypId); */
            try {
                fnRetVal = callStoredFunction(Types.INTEGER, "APP.WF_GET_CUR_USR(?,?,?,?,?,?)", new Object[] {
                                              slcId, cldId, orgId, 23008, txnId, 0
                });

                if (fnRetVal != null) {

                    if (fnRetVal.equals(-1)) {
                        /*  showFacesMsg("Error while fetching user work flow details", null, FacesMessage.SEVERITY_ERROR,
                                     null); */
                        //       System.out.println("Error while fetching user work flow details");
                    }

                    return Integer.parseInt(fnRetVal.toString());
                }

            } catch (Exception e) {

                e.printStackTrace();

            }
            // showFacesMsg("Error while fetching user work flow details", null, FacesMessage.SEVERITY_ERROR, null);
            return 0;

        }
        return 0;

    }
    /*  public void showFacesMsg(String msgHdr, String msgDtl, javax.faces.application.FacesMessage.Severity msgSeverity,
                             String msgMode) {

        FacesMessage msg = new FacesMessage(msgHdr);
        msg.setDetail(msgDtl);
        msg.setSeverity(msgSeverity);
        FacesContext.getCurrentInstance().addMessage(null, msg);

    } */
    public Object resolvElDCMsg(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        return valueExp.getValue(elContext);
    }

    public String getWfId(String cldId, Integer slcId, String orgId, Integer docId, Integer docTypId) {
        //  System.out.println("getWfId--- slcId " + slcId + " cldId " + cldId + "  " + " orgId " + orgId + " docId " +
        //                   docId + " docTypId " + docTypId);
        try {
            return callStoredFunction(Types.VARCHAR, "APP.WF_GET_ID(?,?,?,?,?)", new Object[] {
                                      slcId, cldId, orgId, docId, docTypId
        }).toString();
        } catch (Exception e) {
            e.printStackTrace();

            StringBuilder saveMsg = new StringBuilder("<html><body><p><b>Error in getting Work Flow Details. </b></p>");

            saveMsg.append("</body></html>");

            showFacesMsg(saveMsg.toString(), null, FacesMessage.SEVERITY_ERROR, null);

        }
        return "0";
    }

    public String callWfFunctions(String cldId, Integer slcId, String orgId, Integer usrId, String docTxnId,
                                  Integer docId, Integer docTypId) {
        // getDBTransaction().postChanges();
        // System.out.println("callWfFunctions--- slcId " + slcId + " cldId " + cldId + "  " + " orgId " + orgId +
        //             " docId " + docId + " docTxnId " + docTxnId + " docTypId " + docTypId);
        String hoOrgId = (String) resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        genDispNumber(cldId, slcId, hoOrgId, orgId, null, null, null);
        //get the work flow for the document 55
        String wfId = getWfId(cldId, slcId, orgId, 23008, 0);
        // System.out.println("wfId in callWfFunctions = "+wfId+"  getCurrentDocId = "+ getCurrentDocId());
        //String action = "I";
        //String remark = "A";
        //Number amount11 = new Number(0);
        Object level;
        try {
            level = callStoredFunction(Types.INTEGER, "APP.WF_GET_USR_LEVEL(?,?,?,?,?,?,?)", new Object[] {
                                       slcId, cldId, orgId, usrId, wfId, 23008, 0
            });
            // System.out.println("level = "+level);
            callStoredFunction(Types.INTEGER, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                               slcId, cldId, orgId, 23008, 0, wfId, getCurrentDocId(), usrId, usrId, level, level, "I",
                               "A", new Number(0)
            });

        } catch (Exception nfe) {

            showFacesMsg(resolvElDCMsg("#{bundle['MSG.1113']}").toString(), null, FacesMessage.SEVERITY_ERROR, null);

            nfe.printStackTrace();
        }
        //getDBTransaction().postChanges();

        return null;
    }

    public String genDispNumber(String CldId, Integer SlocId, String HoOrgId, String OrgId, Integer FyId, Integer DocId,
                                Integer DocTypId) {
        /*   System.out.println("in disp gen number function CldId = "+CldId+" SlocId = "+SlocId+" HoOrgId = "+HoOrgId+" OrgId = "+OrgId+" Financial_year_id = "+Financial_year_id);
      System.out.println("disp_id = "+disp_id);
     */
        SvcInvcVOImpl inv = getSvcInvc1();
        Row currentRow = inv.getCurrentRow();
        
        String disp_id =null;
        if (currentRow.getAttribute("InvcNo") != null) {
        }else{
            disp_id = (String) callStoredFunction(Types.VARCHAR, "SVC.SVC_GEN_ID(?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                         CldId, SlocId, HoOrgId, OrgId, "SVC$INVC", Financial_year_id,
                                                         23008, 0, null, null
            });
                 currentRow.setAttribute("InvcNo", disp_id);
        }
       return disp_id;
    }

    public String saveAsGL(String CldId, Integer SlocId, String HoOrgId, String OrgId, Integer FyId, String DocTxnId,
                           Integer EoId, Integer CoaId, Integer UsrId, Integer CurrIdSp, Integer currRate) {
        // System.out.println("in save as gl");
        SvcInvcVOImpl inv = getSvcInvc1();
        Row currentRow = inv.getCurrentRow();
        if (currentRow != null) {
            Object date = currentRow.getAttribute("InvcDt");
            EoId = (Integer) currentRow.getAttribute("EoId");
            CoaId = (Integer) currentRow.getAttribute("CoaId");
            CurrIdSp = (Integer) currentRow.getAttribute("CurrIdSp");
            Number pmtAmt = (Number) currentRow.getAttribute("TransPmtAmtOverAll");

            Integer fyId = (Integer) (callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID (?,?,?)", new Object[] {
                                                         CldId, OrgId, date
            }));
            Financial_year_id = fyId;

            refreshInvoiceCalc(SlocId, CldId, HoOrgId, OrgId);
            _log.info("current fy id is " + Financial_year_id + " docid is " + getCurrentDocId());
            /** Insert in to gl if amount is greater than zero amount until it is not handle in function**/
            if (pmtAmt.compareTo(new Number(0)) == 1) {

                callStoredFunction(Types.NUMERIC, "SVC.SVC_INS_GL(?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                   CldId, SlocId, HoOrgId, OrgId, Financial_year_id, getCurrentDocId(), date, EoId,
                                   CoaId, UsrId, CurrIdSp, 1
                });
this.updateSCPayStatus();
                StringBuilder saveMsg =
                    new StringBuilder("<html><body><p><b>Invoice has been successfully Translated to GL</b></p> ");
                saveMsg.append("</body></html>");
                FacesMessage msg = new FacesMessage(saveMsg.toString());
                msg.setSeverity(FacesMessage.SEVERITY_INFO);
                FacesContext.getCurrentInstance().addMessage(null, msg);
            }
            currentRow.setAttribute("AuthStat", "Y");
            currentRow.setAttribute("DocStat", 103);
            getDBTransaction().commit();

            RequestContext.getCurrentInstance().getPageFlowScope().put("Add_Edit_Mode", "V");

        }
        return null;
    }

    /**
     * Container's getter for LovCoaId2.
     * @return LovCoaId2
     */
    public ViewObjectImpl getLovCoaId2() {
        return (ViewObjectImpl) findViewObject("LovCoaId2");
    }

    public void forwardToOtherUser() {
        _log.info("function call " + resolvEl("#{pageFlowScope.wf_return}"));
        if (resolvEl("#{pageFlowScope.wf_return}").equals("F")) {
            SvcInvcVOImpl inv = getSvcInvc1();
            Row currentRow = inv.getCurrentRow();
            if (currentRow != null) {
                currentRow.setAttribute("DocStat", 102);
                getDBTransaction().commit();
                StringBuilder saveMsg =
                    new StringBuilder("<html><body><p><b>Invoice has been successfully forwarded to other user </b></p> ");

                saveMsg.append("</body></html>");
                FacesMessage msg = new FacesMessage(saveMsg.toString());
                msg.setSeverity(FacesMessage.SEVERITY_INFO);
                FacesContext.getCurrentInstance().addMessage(null, msg);
                RequestContext.getCurrentInstance().getPageFlowScope().put("Add_Edit_Mode", "V");
            }
        } else {
            RequestContext.getCurrentInstance().getPageFlowScope().put("Add_Edit_Mode", "V");

        }

    }

    public Number roundOffAmt(Number amt) {
        Integer amt_digit = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}").toString());
        if (amt != null) {
            if (amt_digit != null) {
                return new Number(amt.round(amt_digit));
            } else {
                return new Number(amt.round(2));
            }
        } else {
            return new Number(0);
        }
    }

    public Integer validatePayment() {
        ViewObjectImpl pay = getSvcInvcPmtSchdl();
        RowSetIterator rsi = pay.createRowSetIterator(null);
        Number totalAmount = new Number(0);


        while (rsi.hasNext()) {
            Row next = rsi.next();
            Number PayAmtSp = (Number) next.getAttribute("PayAmtSp");
            if (PayAmtSp != null) {
                totalAmount = (Number) totalAmount.add((Number) PayAmtSp).round(6);
            }
        }
        _log.info("current total sum of sp  amount is " + totalAmount);

        ViewObjectImpl inv = getSvcInvc1();
        Row currentRow = inv.getCurrentRow();
        if (currentRow != null) {
            String docId=currentRow.getAttribute("DocId").toString();
            
            Row [] rr=this.getSvcInvcItm().getFilteredRows("DocId", docId);
            if(rr.length>0){
            
            Number transTotalPayAmtSp = (Number) ((Number) currentRow.getAttribute("TransPmtAmtOverAll")).round(6);
            _log.info("current transtotalpay " + currentRow.getAttribute("TransPmtAmtOverAll") + " comparison is " +
                      transTotalPayAmtSp.compareTo(totalAmount));

            if (totalAmount.compareTo(new Number(0)) == 1) {
                //transTotalPayAmtSp
                if (totalAmount.compareTo(transTotalPayAmtSp) == 0){
                    return 0;
                }
            }else if(transTotalPayAmtSp.compareTo(new Number(0)) == 0){
                    return 0;    
            }
         }
        }
        return 1;
    }

    public String saveAction() {
        ViewObjectImpl pay = getSvcInvcPmtSchdl();
        RowSetIterator rsi = pay.createRowSetIterator(null);
        Number totalAmount = new Number(0);
        while (rsi.hasNext()) {
            Row next = rsi.next();
            Object PayAmtSp = next.getAttribute("PayAmtSp");
            if (PayAmtSp != null) {
                totalAmount = totalAmount.add((Number) PayAmtSp);
            }
        }
        
        //  System.out.println("total Amount ="+totalAmount);
        Row srcRow = getSvcInvcSrc().getCurrentRow();
        Row invRow = getSvcInvc1().getCurrentRow();
        
        
        
        if (srcRow != null) {
            Number conv=(Number)invRow.getAttribute("CurrConvFctr");
            
           /*  srcRow.setAttribute("TotAmtSp", roundOffAmt(totalAmount));
            srcRow.setAttribute("TotAmtBs", roundOffAmt(totalAmount.multiply(conv)));
            invRow.setAttribute("TotAmtSp", roundOffAmt(totalAmount));
            invRow.setAttribute("TotAmtBs", roundOffAmt(totalAmount.multiply(conv)));
     */
            }
        return null;
    }

    /**
     * Container's getter for SVCInvcCalc1.
     * @return SVCInvcCalc1
     */
    public ViewObjectImpl getSVCInvcCalc1() {
        return (ViewObjectImpl) findViewObject("SVCInvcCalc1");
    }

    /**
     * Container's getter for FkSvcInvcCalcVL1.
     * @return FkSvcInvcCalcVL1
     */
    public ViewLinkImpl getFkSvcInvcCalcVL1() {
        return (ViewLinkImpl) findViewLink("FkSvcInvcCalcVL1");
    }

    public String deletePaymentSchedule(Integer slNo) {
        // System.out.println("slNo = "+slNo);
        if (slNo != null) {
            ViewObjectImpl pay = getSvcInvcPmtSchdl();
            int count = pay.getRowCount();
            //   System.out.println("count =-"+count);
            Row[] filteredRows = pay.getFilteredRows("SrNo", slNo);
            Number payAmt = new Number(0);
            if (filteredRows.length > 0) {
                payAmt = (Number) filteredRows[0].getAttribute("PayAmtSp");
                filteredRows[0].remove();
            }
            pay.executeQuery();
           /* SvcInvcVOImpl invc = getSvcInvc1();
            Row currentRow = invc.getCurrentRow();
             if (currentRow != null) {
                Number transRemainingAmount = (Number) currentRow.getAttribute("transRemainingAmount");
                currentRow.setAttribute("transRemainingAmount", roundOffAmt(transRemainingAmount.add(payAmt)));
            } */
            setPaymentAmount();


        }
        return "Y";
    }

    public String validAmount(Number payAmt) {
        if (payAmt != null) {
            SvcInvcVOImpl invc = getSvcInvc1();
            Row currentRow = invc.getCurrentRow();
            if (currentRow != null) {
                Number amt = new Number(0);
                //Object remAmt = currentRow.getAttribute("transRemainingAmount");
                Object remAmt = currentRow.getAttribute("TransPmtAmtOverAll");
                if (remAmt != null) {
                    amt = (Number) remAmt;
                    Number diff = (Number) amt.subtract(payAmt).abs();
                    _log.info("amount difference is " + diff + " comparison is " + diff.compareTo(1.0 / 100.0));

                    if (diff.compareTo(1.0 / 100.0) < 0) {
                        return "Y";
                    } else if (amt.compareTo(payAmt) < 0) {
                        return "N";
                    }
                }
            }
        }
        return "Y";
    }

    public void schedulePaymntAmt() {

        Number payAmt = null;
        Integer paymntMode = null;
        Timestamp paymntDt = new Timestamp();
        Number totalAmt = null;
        String docId = null;
        Number remAmt = new Number(0);
        String hoOrgId = (String) resolveEL("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        String cldId = (String) resolveEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocId = Integer.parseInt(resolveEL("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        
        
        ViewObjectImpl invcVo = this.getSvcInvc1();
        Row row = invcVo.getCurrentRow();
        docId = row.getAttribute("DocId").toString();
        ViewObjectImpl vo = this.getSvcInvcPmtSchdl();
        Row[] r = vo.getFilteredRows("DocId", docId);
        // vo.setNamedWhereClauseParam("DocId", docId);
        vo.executeQuery();
        
        payAmt = (Number) row.getAttribute("transPayAmtSp");
        totalAmt = (Number)roundOffAmt((Number)row.getAttribute("TransPmtAmtOverAll"));
        Number cc = (Number) row.getAttribute("CurrConvFctr");
        paymntMode = (Integer) row.getAttribute("transPayMode");
        paymntDt = (oracle.jbo.domain.Timestamp) row.getAttribute("transPayDate");
        remAmt = (Number) row.getAttribute("transRemainingAmount");
        Number currAmt=getTotalPaymentSchdAmount();
        Number newTtl=(Number)roundOffAmt(currAmt.add(payAmt));
        
        // System.out.println("Payment Amount is in schedulePaymntAmt:::::"+payAmt);
        _log.info("trans payment amount sp " + payAmt + "   "+newTtl+"  "+totalAmt+" total pyamenr amount is " + totalAmt + " conv factor is " +
                  cc + " compare is  " +newTtl.compareTo(totalAmt)+"  "+ payAmt.multiply(cc).round(6) + "  " + totalAmt.multiply(cc).round(6));
        
       if(newTtl.compareTo(totalAmt)==0 || newTtl.compareTo(totalAmt)==-1){
       
        Row paymntRow = vo.createRow();
         if (totalAmt != null) {
            if (r.length == 0) {
                SrNo = 0;
            }
            SrNo = SrNo + 1;
            //    System.out.println("SrNo:::"+SrNo +":hoOrgId: "+hoOrgId+":orgId: "+orgId+":cldId: "+cldId+":slocId: "+slocId);
            paymntRow.setAttribute("HoOrgId", hoOrgId);
            paymntRow.setAttribute("OrgId", orgId);
            paymntRow.setAttribute("CldId", cldId);
            paymntRow.setAttribute("SlocId", slocId);
            paymntRow.setAttribute("SrNo", SrNo);
            paymntRow.setAttribute("PayMode", paymntMode);
            paymntRow.setAttribute("PayDt", paymntDt);
            paymntRow.setAttribute("DocId", docId);
            paymntRow.setAttribute("PayAmtSp", payAmt);
            paymntRow.setAttribute("PayAmtBs", (Number) (payAmt.multiply(cc).round(6)));
            paymntRow.setAttribute("TotAmtSp", totalAmt);
            paymntRow.setAttribute("TotAmtBs", (Number) (totalAmt.multiply(cc).round(6)));
            vo.executeQuery();

            Number totalRemAmt = new Number(0);
            RowSetIterator payrsi = vo.createRowSetIterator(null);
            while (payrsi.hasNext()) {
                Row next = payrsi.next();
                Object PayAmtSp = next.getAttribute("PayAmtSp");
                if (PayAmtSp != null) {
                    totalRemAmt = totalRemAmt.add((Number) PayAmtSp);
                }
            }
            payrsi.closeRowSetIterator();
            _log.info("total remaining amount is ----- - - " + totalAmt.subtract(totalRemAmt) +
                      " remainining amount -- " + totalRemAmt + " payment amount - " + totalAmt);
                    Number zero=new Number(0);
            // row.setAttribute("TransPmtAmtOverAll", totalAmt.subtract(totalRemAmt));
                             row.setAttribute("transPayAmtSp", roundOffAmt(totalAmt.subtract(totalRemAmt)));
            _log.info("row value is " + row.getAttribute("TransPmtAmtOverAll"));

            // row.setAttribute("transRemainingAmount", remAmt.subtract(payAmt));
        }
       }else{
           String msg2 ="Total Payment Amount must be less than total amount.";//+ totalAmt;
           FacesMessage message2 = new FacesMessage(msg2);
           message2.setSeverity(FacesMessage.SEVERITY_ERROR);
           FacesContext.getCurrentInstance().addMessage(null, message2);
       }

    }
    //transPayDate

    public String duplicateDateChk() {
        Row curr = this.getSvcInvc1().getCurrentRow();
        ViewObjectImpl pmtvo = this.getSvcInvcPmtSchdl();

        if (curr != null) {
            if (curr.getAttribute("transPayDate") != null) {
                Timestamp date = (Timestamp) curr.getAttribute("transPayDate");
                Row[] rr = pmtvo.getFilteredRows("PayDt", date);
                _log.info("total payment date is " + rr.length + " date is " + curr.getAttribute("transPayDate"));
                if (rr.length > 0) {
                    return "N";
                }
                return "Y";

            }
        }
        return "Y";
    }

    public void setPaymentAmount() {
        ViewObject InvcVo = this.getSvcInvc1();
        Row currRow = InvcVo.getCurrentRow();

        Number adjustedAmt = getTotalPaymentSchdAmount();
        Number totalAmt = new Number(0);
        Object obj = currRow.getAttribute("TransPmtAmtOverAll");
        Number objFoc=(Number)currRow.getAttribute("TransTotalFoc");
        if (obj != null) {
            totalAmt = (Number) currRow.getAttribute("TransPmtAmtOverAll");
        }
        _log.info("total payment amount sp " + totalAmt + "ajusted amount is " + adjustedAmt +
                  " total adjusted amount is " + totalAmt.subtract(adjustedAmt)+" total foc item is "+objFoc);
        currRow.setAttribute("transPayAmtSp", roundOffAmt(totalAmt.subtract(adjustedAmt)));
        _log.info("total ovel all amount is " + currRow.getAttribute("TransPmtAmtOverAll"));

    }

    public Number getTotalPaymentSchdAmount() {
        Number retValue = new Number(0);
        ViewObjectImpl adjVo = this.getSvcInvcPmtSchdl();
        RowSetIterator itr = adjVo.createRowSetIterator(null);
        while (itr.hasNext()) {
            Row row = itr.next();
            Number number = new Number(0);
            Object obj = row.getAttribute("PayAmtSp");

            if (obj != null) {
                number = (Number) row.getAttribute("PayAmtSp");
            }

            retValue = retValue.add(number);
        }
        itr.closeRowSetIterator();
        return retValue;
    }
    
    public String discAmtValidator(Number discValue){
        if(this.getSvcInvcItm().getCurrentRow()!=null){
            Row currItm=this.getSvcInvcItm().getCurrentRow();
         
           Number itmQty= (Number)currItm.getAttribute("ItmQty");
           Number itmPrice=(Number)currItm.getAttribute("ItmPrice");
           
           Number amt=itmQty.multiply(itmPrice);
            _log.info("current discount value and amt is "+discValue+" amunt is "+amt+" comparison is "+discValue.compareTo(amt)); 
           if(discValue.compareTo(amt)==-1){
               return "Y";
           }else{
               return "N";
           }
           
           
        }
        
        return "Y";
    }

    /**
     * Container's getter for LovWoDispDocId1.
     * @return LovWoDispDocId1
     */
    public ViewObjectImpl getLovWoDispDocId() {
        return (ViewObjectImpl) findViewObject("LovWoDispDocId");
    }


    /**
     * Container's getter for LovCOAOC1.
     * @return LovCOAOC1
     */
    public ViewObjectImpl getLovCOAOC1() {
        return (ViewObjectImpl) findViewObject("LovCOAOC1");
    }
    
    private void updateSCPayStatus(){
        Integer invcType = (Integer)this.getSvcInvc1().getCurrentRow().getAttribute("InvcType");
        
        if(invcType == 95){
            ViewObjectImpl invcPmt = this.getSvcInvcSrc1();
            RowSetIterator rsi = invcPmt.createRowSetIterator(null);
            if(rsi.hasNext()){
                Row rr = rsi.next();
            _log.info("--------------update mehtod ---- "+rr.getAttribute("DocIdSrc"),(Timestamp)rr.getAttribute("PmtSchdlDt"));
                Object ob = callStoredFunction(Types.INTEGER, "SVC.SVC_UPDT_INV_FLG_IN_SC_PMT(?,?,?,?,?)",  new Object[] {
                                                         CldId, SlocId, OrgId, rr.getAttribute("DocIdSrc"),(Timestamp)rr.getAttribute("PmtSchdlDt")
            });
                _log.info("--------------update mehtod ---- "+rr.getAttribute("DocIdSrc"),(Timestamp)rr.getAttribute("PmtSchdlDt")+" "+ob);
            }
            rsi.closeRowSetIterator();
        }
    }

    /**
     * Container's getter for ViewSCNo1.
     * @return ViewSCNo1
     */
    public ViewSCNoVOImpl getViewSCNo() {
        return (ViewSCNoVOImpl) findViewObject("ViewSCNo");
    }
}

