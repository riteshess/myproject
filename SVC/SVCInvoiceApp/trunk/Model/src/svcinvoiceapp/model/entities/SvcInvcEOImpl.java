package svcinvoiceapp.model.entities;

import java.math.BigDecimal;

import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.adf.model.BindingContext;

import oracle.binding.BindingContainer;
import oracle.binding.OperationBinding;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
import java.util.Map;

import svcinvoiceapp.model.services.SVCInvoiceAMImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Oct 27 19:17:45 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SvcInvcEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CldId,
        SlocId,
        HoOrgId,
        OrgId,
        DocId,
        DocDt,
        FyId,
        InvcNo,
        InvcDt,
        InvcType,
        EoId,
        AddsIdBill,
        EoNm,
        EoAddsText,
        CoaId,
        DocStat,
        AuthStat,
        DiscAmtSp,
        TaxAmtSp,
        TotAmtSp,
        DiscAmtBs,
        TaxAmtBs,
        TotAmtBs,
        CurrIdSp,
        CurrConvFctr,
        CustType,
        UsrIdCrt,
        CrtDt,
        UsrIdMod,
        ModDt,
        SvcInvcPmtSchdl,
        SvcInvcSrc;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int DOCDT = AttributesEnum.DocDt.index();
    public static final int FYID = AttributesEnum.FyId.index();
    public static final int INVCNO = AttributesEnum.InvcNo.index();
    public static final int INVCDT = AttributesEnum.InvcDt.index();
    public static final int INVCTYPE = AttributesEnum.InvcType.index();
    public static final int EOID = AttributesEnum.EoId.index();
    public static final int ADDSIDBILL = AttributesEnum.AddsIdBill.index();
    public static final int EONM = AttributesEnum.EoNm.index();
    public static final int EOADDSTEXT = AttributesEnum.EoAddsText.index();
    public static final int COAID = AttributesEnum.CoaId.index();
    public static final int DOCSTAT = AttributesEnum.DocStat.index();
    public static final int AUTHSTAT = AttributesEnum.AuthStat.index();
    public static final int DISCAMTSP = AttributesEnum.DiscAmtSp.index();
    public static final int TAXAMTSP = AttributesEnum.TaxAmtSp.index();
    public static final int TOTAMTSP = AttributesEnum.TotAmtSp.index();
    public static final int DISCAMTBS = AttributesEnum.DiscAmtBs.index();
    public static final int TAXAMTBS = AttributesEnum.TaxAmtBs.index();
    public static final int TOTAMTBS = AttributesEnum.TotAmtBs.index();
    public static final int CURRIDSP = AttributesEnum.CurrIdSp.index();
    public static final int CURRCONVFCTR = AttributesEnum.CurrConvFctr.index();
    public static final int CUSTTYPE = AttributesEnum.CustType.index();
    public static final int USRIDCRT = AttributesEnum.UsrIdCrt.index();
    public static final int CRTDT = AttributesEnum.CrtDt.index();
    public static final int USRIDMOD = AttributesEnum.UsrIdMod.index();
    public static final int MODDT = AttributesEnum.ModDt.index();
    public static final int SVCINVCPMTSCHDL = AttributesEnum.SvcInvcPmtSchdl.index();
    public static final int SVCINVCSRC = AttributesEnum.SvcInvcSrc.index();

    /**
     * This is the default constructor (do not remove).
     */
    public SvcInvcEOImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("svcinvoiceapp.model.entities.SvcInvcEO");
    }


    /**
     * Gets the attribute value for CldId, using the alias name CldId.
     * @return the value of CldId
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
       
    }

    /**
     * Sets <code>value</code> as the attribute value for CldId.
     * @param value value to set the CldId
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for SlocId, using the alias name SlocId.
     * @return the value of SlocId
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
        
    }

    /**
     * Sets <code>value</code> as the attribute value for SlocId.
     * @param value value to set the SlocId
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for HoOrgId, using the alias name HoOrgId.
     * @return the value of HoOrgId
     */
    public String getHoOrgId() {
        return (String) getAttributeInternal(HOORGID);
        
    }

    /**
     * Sets <code>value</code> as the attribute value for HoOrgId.
     * @param value value to set the HoOrgId
     */
    public void setHoOrgId(String value) {
        setAttributeInternal(HOORGID, value);
    }

    /**
     * Gets the attribute value for OrgId, using the alias name OrgId.
     * @return the value of OrgId
     */
    public String getOrgId() {
        
        return (String) getAttributeInternal(ORGID);
        
    }

    /**
     * Sets <code>value</code> as the attribute value for OrgId.
     * @param value value to set the OrgId
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for DocId, using the alias name DocId.
     * @return the value of DocId
     */
    @SuppressWarnings("unchecked")
    public String getDocId() {
         /*  Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        String cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        String hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        OperationBinding operationbinding = getBindings().getOperationBinding("getCurrentDocId");
        System.out.println("operationbinding:::in getdocid:::"+operationbinding);
           operationbinding.getParamsMap().put("UserId",userId);
         operationbinding.getParamsMap().put("CldId",cldId);
         operationbinding.getParamsMap().put("SlocId", slocId);
         operationbinding.getParamsMap().put("OrgId",orgId); 
        operationbinding.execute();
         String docId=null;
        if(operationbinding.getResult()!=null){
            docId=operationbinding.getResult().toString();
            System.out.println("docId:::"+docId);
        }  */
        return (String) getAttributeInternal(DOCID);
       // return docId;
    }

    /**
     * Sets <code>value</code> as the attribute value for DocId.
     * @param value value to set the DocId
     */
    public void setDocId(String value) {
        setAttributeInternal(DOCID, value);
    }

    /**
     * Gets the attribute value for DocDt, using the alias name DocDt.
     * @return the value of DocDt
     */
    public Timestamp getDocDt() {
        return (Timestamp) getAttributeInternal(DOCDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for DocDt.
     * @param value value to set the DocDt
     */
    public void setDocDt(Timestamp value) {
        setAttributeInternal(DOCDT, value);
    }

    /**
     * Gets the attribute value for FyId, using the alias name FyId.
     * @return the value of FyId
     */
    public Integer getFyId() {
        return (Integer) getAttributeInternal(FYID);
    }

    /**
     * Sets <code>value</code> as the attribute value for FyId.
     * @param value value to set the FyId
     */
    public void setFyId(Integer value) {
        setAttributeInternal(FYID, value);
    }

    /**
     * Gets the attribute value for InvcNo, using the alias name InvcNo.
     * @return the value of InvcNo
     */
    public String getInvcNo() {
        return (String) getAttributeInternal(INVCNO);
    }

    /**
     * Sets <code>value</code> as the attribute value for InvcNo.
     * @param value value to set the InvcNo
     */
    public void setInvcNo(String value) {
        setAttributeInternal(INVCNO, value);
    }

    /**
     * Gets the attribute value for InvcDt, using the alias name InvcDt.
     * @return the value of InvcDt
     */
    public Timestamp getInvcDt() {
        return (Timestamp) getAttributeInternal(INVCDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for InvcDt.
     * @param value value to set the InvcDt
     */
    public void setInvcDt(Timestamp value) {
        setAttributeInternal(INVCDT, value);
    }

    /**
     * Gets the attribute value for InvcType, using the alias name InvcType.
     * @return the value of InvcType
     */
    public Integer getInvcType() {
      //  System.out.println("value of invoice type is:::"+getAttributeInternal(INVCTYPE));
        return (Integer) getAttributeInternal(INVCTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for InvcType.
     * @param value value to set the InvcType
     */
    public void setInvcType(Integer value) {
        setAttributeInternal(INVCTYPE, value);
    }

    /**
     * Gets the attribute value for EoId, using the alias name EoId.
     * @return the value of EoId
     */
    public Integer getEoId() {
        return (Integer) getAttributeInternal(EOID);
    }

    /**
     * Sets <code>value</code> as the attribute value for EoId.
     * @param value value to set the EoId
     */
    public void setEoId(Integer value) {
        setAttributeInternal(EOID, value);
    }

    /**
     * Gets the attribute value for AddsIdBill, using the alias name AddsIdBill.
     * @return the value of AddsIdBill
     */
    public String getAddsIdBill() {
        return (String) getAttributeInternal(ADDSIDBILL);
    }

    /**
     * Sets <code>value</code> as the attribute value for AddsIdBill.
     * @param value value to set the AddsIdBill
     */
    public void setAddsIdBill(String value) {
        setAttributeInternal(ADDSIDBILL, value);
    }

    /**
     * Gets the attribute value for EoNm, using the alias name EoNm.
     * @return the value of EoNm
     */
    public String getEoNm() {
        return (String) getAttributeInternal(EONM);
    }

    /**
     * Sets <code>value</code> as the attribute value for EoNm.
     * @param value value to set the EoNm
     */
    public void setEoNm(String value) {
        setAttributeInternal(EONM, value);
    }

    /**
     * Gets the attribute value for EoAddsText, using the alias name EoAddsText.
     * @return the value of EoAddsText
     */
    public String getEoAddsText() {
        return (String) getAttributeInternal(EOADDSTEXT);
    }

    /**
     * Sets <code>value</code> as the attribute value for EoAddsText.
     * @param value value to set the EoAddsText
     */
    public void setEoAddsText(String value) {
        setAttributeInternal(EOADDSTEXT, value);
    }

    /**
     * Gets the attribute value for CoaId, using the alias name CoaId.
     * @return the value of CoaId
     */
    public Integer getCoaId() {
        return (Integer) getAttributeInternal(COAID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CoaId.
     * @param value value to set the CoaId
     */
    public void setCoaId(Integer value) {
        setAttributeInternal(COAID, value);
    }

    /**
     * Gets the attribute value for DocStat, using the alias name DocStat.
     * @return the value of DocStat
     */
    public Integer getDocStat() {
        return (Integer) getAttributeInternal(DOCSTAT);
    }

    /**
     * Sets <code>value</code> as the attribute value for DocStat.
     * @param value value to set the DocStat
     */
    public void setDocStat(Integer value) {
        setAttributeInternal(DOCSTAT, value);
    }

    /**
     * Gets the attribute value for AuthStat, using the alias name AuthStat.
     * @return the value of AuthStat
     */
    public String getAuthStat() {
        return (String) getAttributeInternal(AUTHSTAT);
    }

    /**
     * Sets <code>value</code> as the attribute value for AuthStat.
     * @param value value to set the AuthStat
     */
    public void setAuthStat(String value) {
        setAttributeInternal(AUTHSTAT, value);
    }

    /**
     * Gets the attribute value for DiscAmtSp, using the alias name DiscAmtSp.
     * @return the value of DiscAmtSp
     */
    public oracle.jbo.domain.Number getDiscAmtSp(){
        /*       String DocId=null;
        OperationBinding opGetDocId = getBindings().getOperationBinding("getCurrentDocId");
        System.out.println("operationbinding:::" + opGetDocId);
        opGetDocId.execute();
        if(opGetDocId.getResult()!=null){
            DocId=opGetDocId.getResult().toString();
        }
        OperationBinding operationbinding = getBindings().getOperationBinding("generateDiscAmtSp");
        operationbinding.getParamsMap().put("DocId",DocId);
        operationbinding.execute();
        Number discAmtSp=null;
        if(operationbinding.getResult()!=null){
            discAmtSp=(Number)operationbinding.getResult();
        } */
        
        return (oracle.jbo.domain.Number) getAttributeInternal(DISCAMTSP);
        //return discAmtSp;
    }

    /**
     * Sets <code>value</code> as the attribute value for DiscAmtSp.
     * @param value value to set the DiscAmtSp
     */
    public void setDiscAmtSp(oracle.jbo.domain.Number value) {
        setAttributeInternal(DISCAMTSP, value);
    }

    /**
     * Gets the attribute value for TaxAmtSp, using the alias name TaxAmtSp.
     * @return the value of TaxAmtSp
     */
    public Number getTaxAmtSp() {
        /* String DocId=null;
        OperationBinding opGetDocId = getBindings().getOperationBinding("getCurrentDocId");
        System.out.println("operationbinding:::" + opGetDocId);
        opGetDocId.execute();
        if(opGetDocId.getResult()!=null){
            DocId=opGetDocId.getResult().toString();
        }
        OperationBinding operationbinding = getBindings().getOperationBinding("generateTaxAmtSp");
        operationbinding.getParamsMap().put("DocId",DocId);
        operationbinding.execute();
        Number taxAmtSp=null;
        if(operationbinding.getResult()!=null){
            taxAmtSp=(Number)operationbinding.getResult();
        }
         */
       return (Number) getAttributeInternal(TAXAMTSP);
       // return taxAmtSp;
    }

    /**
     * Sets <code>value</code> as the attribute value for TaxAmtSp.
     * @param value value to set the TaxAmtSp
     */
    public void setTaxAmtSp(Number value) {
        setAttributeInternal(TAXAMTSP, value);
    }

    /**
     * Gets the attribute value for TotAmtSp, using the alias name TotAmtSp.
     * @return the value of TotAmtSp
     */
    public Number getTotAmtSp() {
        /* String DocId=null;
        OperationBinding opGetDocId = getBindings().getOperationBinding("getCurrentDocId");
        System.out.println("operationbinding:::" + opGetDocId);
        opGetDocId.execute();
        if(opGetDocId.getResult()!=null){
            DocId=opGetDocId.getResult().toString();
        }
        OperationBinding operationbinding = getBindings().getOperationBinding("generateTotAmtSp");
        operationbinding.getParamsMap().put("DocId",DocId);
        operationbinding.execute();
        Number totAmtSp=null;
        if(operationbinding.getResult()!=null){
            totAmtSp=(Number)operationbinding.getResult();
        }
         */
        return (Number) getAttributeInternal(TOTAMTSP);
        //return totAmtSp;
    }

    /**
     * Sets <code>value</code> as the attribute value for TotAmtSp.
     * @param value value to set the TotAmtSp
     */
    public void setTotAmtSp(Number value) {
        setAttributeInternal(TOTAMTSP, value);
    }

    /**
     * Gets the attribute value for DiscAmtBs, using the alias name DiscAmtBs.
     * @return the value of DiscAmtBs
     */
    public Number getDiscAmtBs() {
        /* String DocId=null;
        
        OperationBinding opGetDocId = getBindings().getOperationBinding("getCurrentDocId");
        System.out.println("operationbinding:::" + opGetDocId);
        opGetDocId.execute();
        if(opGetDocId.getResult()!=null){
            DocId=opGetDocId.getResult().toString();
        }
        OperationBinding operationbinding = getBindings().getOperationBinding("generateDiscAmtBs");
        operationbinding.getParamsMap().put("DocId",DocId);
        operationbinding.execute();
        Number discAmtBs=null;
        if(operationbinding.getResult()!=null){
            discAmtBs=(Number)operationbinding.getResult();
        }
         */
        return (Number) getAttributeInternal(DISCAMTBS);
        //return discAmtBs;
    }

    /**
     * Sets <code>value</code> as the attribute value for DiscAmtBs.
     * @param value value to set the DiscAmtBs
     */
    public void setDiscAmtBs(Number value) {
        setAttributeInternal(DISCAMTBS, value);
    }

    /**
     * Gets the attribute value for TaxAmtBs, using the alias name TaxAmtBs.
     * @return the value of TaxAmtBs
     */
    public Number getTaxAmtBs() {
        /* String DocId=null;
        OperationBinding opGetDocId = getBindings().getOperationBinding("getCurrentDocId");
        System.out.println("operationbinding:::" + opGetDocId);
        opGetDocId.execute();
        if(opGetDocId.getResult()!=null){
            DocId=opGetDocId.getResult().toString();
        }
        OperationBinding operationbinding = getBindings().getOperationBinding("generateTaxAmtBs");
        operationbinding.getParamsMap().put("DocId",DocId);
        operationbinding.execute();
        Number taxAmtBs=null;
        if(operationbinding.getResult()!=null){
            taxAmtBs=(Number)operationbinding.getResult();
        }
         */
        return (Number) getAttributeInternal(TAXAMTBS);
       // return taxAmtBs;
    }

    /**
     * Sets <code>value</code> as the attribute value for TaxAmtBs.
     * @param value value to set the TaxAmtBs
     */
    public void setTaxAmtBs(Number value) {
        setAttributeInternal(TAXAMTBS, value);
    }

    /**
     * Gets the attribute value for TotAmtBs, using the alias name TotAmtBs.
     * @return the value of TotAmtBs
     */
    public Number getTotAmtBs() {
        /* String DocId=null;
        OperationBinding opGetDocId = getBindings().getOperationBinding("getCurrentDocId");
        System.out.println("operationbinding:::" + opGetDocId);
        opGetDocId.execute();
        if(opGetDocId.getResult()!=null){
            DocId=opGetDocId.getResult().toString();
        }
        OperationBinding operationbinding = getBindings().getOperationBinding("generateTotAmtBs");
        operationbinding.getParamsMap().put("DocId",DocId);
        operationbinding.execute();
        Number totAmtBs=null;
        if(operationbinding.getResult()!=null){
            totAmtBs=(Number)operationbinding.getResult();
        }
         */
       return (Number) getAttributeInternal(TOTAMTBS);
       // return totAmtBs;
    }

    /**
     * Sets <code>value</code> as the attribute value for TotAmtBs.
     * @param value value to set the TotAmtBs
     */
    public void setTotAmtBs(Number value) {
        setAttributeInternal(TOTAMTBS, value);
    }

    /**
     * Gets the attribute value for CurrIdSp, using the alias name CurrIdSp.
     * @return the value of CurrIdSp
     */
    public Integer getCurrIdSp() {
        return (Integer) getAttributeInternal(CURRIDSP);
    }

    /**
     * Sets <code>value</code> as the attribute value for CurrIdSp.
     * @param value value to set the CurrIdSp
     */
    public void setCurrIdSp(Integer value) {
        setAttributeInternal(CURRIDSP, value);
    }

    /**
     * Gets the attribute value for CurrConvFctr, using the alias name CurrConvFctr.
     * @return the value of CurrConvFctr
     */
    public Number getCurrConvFctr() {
        return (Number) getAttributeInternal(CURRCONVFCTR);
    }

    /**
     * Sets <code>value</code> as the attribute value for CurrConvFctr.
     * @param value value to set the CurrConvFctr
     */
    public void setCurrConvFctr(Number value) {
        setAttributeInternal(CURRCONVFCTR, value);
    }

    /**
     * Gets the attribute value for CustType, using the alias name CustType.
     * @return the value of CustType
     */
    public Integer getCustType() {
        return (Integer) getAttributeInternal(CUSTTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for CustType.
     * @param value value to set the CustType
     */
    public void setCustType(Integer value) {
        setAttributeInternal(CUSTTYPE, value);
    }

    /**
     * Gets the attribute value for UsrIdCrt, using the alias name UsrIdCrt.
     * @return the value of UsrIdCrt
     */
    public Integer getUsrIdCrt() {
       return (Integer) getAttributeInternal(USRIDCRT);
       
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdCrt.
     * @param value value to set the UsrIdCrt
     */
    public void setUsrIdCrt(Integer value) {
        setAttributeInternal(USRIDCRT, value);
    }

    /**
     * Gets the attribute value for CrtDt, using the alias name CrtDt.
     * @return the value of CrtDt
     */
    public Timestamp getCrtDt() {
        return (Timestamp) getAttributeInternal(CRTDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for CrtDt.
     * @param value value to set the CrtDt
     */
    public void setCrtDt(Timestamp value) {
        setAttributeInternal(CRTDT, value);
    }

    /**
     * Gets the attribute value for UsrIdMod, using the alias name UsrIdMod.
     * @return the value of UsrIdMod
     */
    public Integer getUsrIdMod() {
        return (Integer) getAttributeInternal(USRIDMOD);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdMod.
     * @param value value to set the UsrIdMod
     */
    public void setUsrIdMod(Integer value) {
        setAttributeInternal(USRIDMOD, value);
    }

    /**
     * Gets the attribute value for ModDt, using the alias name ModDt.
     * @return the value of ModDt
     */
    public Timestamp getModDt() {
        return (Timestamp) getAttributeInternal(MODDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for ModDt.
     * @param value value to set the ModDt
     */
    public void setModDt(Timestamp value) {
        setAttributeInternal(MODDT, value);
    }


    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getSvcInvcPmtSchdl() {
        return (RowIterator) getAttributeInternal(SVCINVCPMTSCHDL);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getSvcInvcSrc() {
        return (RowIterator) getAttributeInternal(SVCINVCSRC);
    }


    /**
     * @param cldId key constituent
     * @param slocId key constituent
     * @param orgId key constituent
     * @param docId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(String cldId, Integer slocId, String orgId, String docId) {
        return new Key(new Object[] { cldId, slocId, orgId, docId });
    }

    /**
     * For resolving the El
     */
      public Object resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        return valueExp.getValue(elContext);
        
    } 
    
    public Object resolvElDC(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp =
        elFactory.createValueExpression(elContext, "#{data." + data + ".dataProvider}", Object.class);
        return valueExp.getValue(elContext);
        }
    
    public BindingContainer getBindings() {
        return BindingContext.getCurrent().getCurrentBindingsEntry();
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    @SuppressWarnings("unchecked")
    protected void create(AttributeList attributeList) {
        
        /* System.out.println("Welcome!!!!!");
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        String cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        String hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        setSlocId(slocId);
        setCldId(cldId.toString());
        setHoOrgId(hoOrgId.toString());
        System.out.println("setUsrIdCrt(userId):::" );
        setUsrIdCrt(userId);
        System.out.println("end setting");
        setOrgId(orgId);
        setAddsIdBill(this.getAddsIdBill());
        setAuthStat("Y");
        setCoaId(12);
        setCurrConvFctr(new Number(13));
        setCurrIdSp(this.getCurrIdSp());
        setCustType(this.getCustType());
        setDocDt(new oracle.jbo.domain.Timestamp(System.currentTimeMillis()));
        setCrtDt(new oracle.jbo.domain.Timestamp(System.currentTimeMillis()));
        setModDt(new oracle.jbo.domain.Timestamp(System.currentTimeMillis()));
        
        OperationBinding operationbinding = getBindings().getOperationBinding("generateDocId");
        System.out.println("operationbinding:::" + operationbinding);
        operationbinding.getParamsMap().put("UsrId", userId);
        operationbinding.getParamsMap().put("CldId", cldId);
        operationbinding.getParamsMap().put("SlocId", slocId);
        operationbinding.getParamsMap().put("OrgId", orgId);
        operationbinding.execute();
        System.out.println("result:::"+operationbinding.getResult());
        String DocId=null;
        if(operationbinding.getResult()!=null){
            DocId=operationbinding.getResult().toString();
            System.out.println("DocId!!!!!"+DocId);
        }
       
        setDocId(DocId);
        setDocStat(12);
        setEoAddsText("dsaadassa");
        setEoId(1);
        setEoNm("sads");
        setInvcType(this.getInvcType());
        setInvcDt(new oracle.jbo.domain.Timestamp(System.currentTimeMillis()));
        setInvcNo(null);
        setFyId(1);
        setDiscAmtBs(new Number(13));
        setDiscAmtSp(new Number(13));
        setTaxAmtBs(new Number(13));
        setTaxAmtSp(new Number(13));
        setTotAmtBs(new Number(13));
        setTotAmtSp(new Number(13));
        setUsrIdMod(null);
         */

        super.create(attributeList);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
       // super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
    }
}

