package svcservicecontract.model.services;

import java.io.File;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import javax.naming.Context;
import javax.naming.InitialContext;

import javax.servlet.ServletException;

import javax.sql.DataSource;

import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRExporter;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.export.JRPdfExporter;
import net.sf.jasperreports.engine.util.JRLoader;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;


import oracle.jbo.server.ViewObjectImpl;

import svcservicecontract.model.services.common.AppModuleAM;
//import java.sql.Timestamp;
//import java.sql.Timestamp;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Oct 13 18:21:11 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AppModuleAMImpl extends ApplicationModuleImpl implements AppModuleAM {
    /**
     * This is the default constructor (do not remove).
     */
    public AppModuleAMImpl() {
    }
    ADFLogger Adflog = (ADFLogger) ADFLogger.createADFLogger(AppModuleAMImpl.class);

    /**
     * Container's getter for SvcScItmFoc1.
     * @return SvcScItmFoc1
     */
    public ViewObjectImpl getSvcScItmFoc1() {
        return (ViewObjectImpl) findViewObject("SvcScItmFoc1");
    }
    String cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
    Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
    String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
    Integer usrId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
    String hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
    private static int INTEGER = Types.NUMERIC;
    private static int DATE = Types.DATE;
    private static int STRING = Types.VARCHAR;
    private static int NUMBER = Types.NUMERIC;

    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }


    public String getCoaForEo(String entityName) {
        Row svccurr = this.getSvcSc1().getCurrentRow();

        String cldId = svccurr.getAttribute("CldId").toString();
        String orgId = svccurr.getAttribute("OrgId").toString();
        Integer sloc = Integer.parseInt(svccurr.getAttribute("SlocId").toString());
        String hoOrgId = svccurr.getAttribute("HoOrgId").toString();

        ViewObjectImpl vo = this.getLovSuppTune1();
        vo.setNamedWhereClauseParam("bindCldId", cldId);
        vo.setNamedWhereClauseParam("bindSlocId", sloc);
        vo.setNamedWhereClauseParam("bindOrgId", orgId);
        vo.setNamedWhereClauseParam("bindEoNm", entityName);
        vo.executeQuery();
        System.out.println("get row cout  :::::: " + vo.getRowCount());
        //Row[] filRw=this.getLovSupplier1().getFilteredRows(new RowQualifier("EoNm='"+eoName+"' and SlocId="+sloc+" and OrgId='"+orgId+"' and CldId='"+cldId+"' and HoOrgId='"+hoOrgId+"'"));
        //Row[] filRw=vo.getFilteredRows("EoNm", eoName);
        RowQualifier rq11 = new RowQualifier(vo);
        rq11.setWhereClause("EoNm= '" + entityName + "'");
        Row[] filRw = vo.getFilteredRows(rq11);
        System.out.println("cld sloc and org " + cldId + sloc + orgId);
        System.out.println("no. of rows found " + entityName + "       " + filRw.length + " experssion is " +
                           rq11.getExprStr());
        Integer eoId = 0;
        Integer ret = -1;
        Integer zero = new Integer(0);
        if (filRw.length > 0) {
            eoId = (Integer) filRw[0].getAttribute("EoId");
            ret = (Integer) (callStoredFunction(Types.INTEGER, "APP.fn_get_eo_coa_id(?,?,?,?,?)", new Object[] {
                                                cldId, sloc, hoOrgId, orgId, eoId
            }));
            if (ret > zero) {
                svccurr.setAttribute("CoaId", ret);
            }
        }
        Adflog.info(eoId + "--EO ID--COA ID  : " + ret);


        return null;
    }

    public String postchange() {
        this.getDBTransaction().postChanges();
        return null;
    }

    public String crtItmSvc() {
        Row rr1 = this.getSvcSc1().getCurrentRow();
        String itmName = null;
        String uombase = null;
        String svcflg = null;
        Adflog.info("item id is " + rr1.getAttribute("TransItmId"));
        if (rr1.getAttribute("TransItmId") != null) {
            ViewObjectImpl itmvo = this.getLovItm1();
            itmvo.setNamedWhereClauseParam("bindCldId", cldId);
            itmvo.setNamedWhereClauseParam("bindHoOrgId", hoOrgId);
            itmvo.setNamedWhereClauseParam("bindSlocId", slocId);
            itmvo.setNamedWhereClauseParam("bindOrgId", orgId);
            itmvo.executeQuery();

            String itmId = rr1.getAttribute("TransItmId").toString();
            Row[] itmrw = itmvo.getFilteredRows("ItmId", itmId);
            if (itmrw.length > 0) {
                itmName = itmrw[0].getAttribute("ItmDesc").toString();
                uombase = itmrw[0].getAttribute("UomBasic").toString();
                svcflg = itmrw[0].getAttribute("SrvcItmFlg").toString();
                //SerializedFlg
            }
            //TransTaxEmptd
            ViewObjectImpl svcItmvo = this.getSvcScItm2();
            Row svcrw = getSvcScItm2().createRow();
            svcrw.setAttribute("ItmId", itmId);
            svcrw.setAttribute("HoOrgId", hoOrgId);
            if(this.isItmExists().equalsIgnoreCase("Y")){
                Adflog.info("------------not setting   Y-------");
                svcrw.setAttribute("PrdFm", new Timestamp(System.currentTimeMillis()));
                svcrw.setAttribute("PrdTo", new Timestamp(System.currentTimeMillis()));                
            }else{
                Adflog.info("------------not setting-------N  ");
            }

            svcrw.setAttribute("OwnSupplied", "N");
            svcrw.setAttribute("DiscType", "P");
            svcrw.setAttribute("ItmNmBill", itmName);
            svcrw.setAttribute("ItmUom", uombase);
            svcrw.setAttribute("SvcItmFlg", svcflg);
            svcrw.setAttribute("TransTaxRuleId", rr1.getAttribute("transtaxRule"));
            svcrw.setAttribute("TranstaxEmpt", rr1.getAttribute("TransTaxEmptd"));
            svcrw.setAttribute("PrdFm", rr1.getAttribute("PrdFm"));
            svcrw.setAttribute("PrdTo", rr1.getAttribute("PrdTo")); //TransStartDt
            svcrw.setAttribute("TransStartDt", rr1.getAttribute("PrdFm"));
            svcrw.setAttribute("TransToDt", rr1.getAttribute("PrdTo"));
            svcItmvo.insertRow(svcrw);
            rr1.setAttribute("TransItmId", null);
            rr1.setAttribute("TransItemNm", null);
            //   isrtIntoItmLocation();

        }
        return null;
    }


    public String isrtIntoItmLocation() {

        // Row curr =this.getSvcSc1().getCurrentRow();

        //   Row svcrw = getSvcScItm2().createRow();
        ViewObjectImpl svcloc = this.getSvcScLoc();

        ViewObjectImpl itmLoc = this.getSvcScItmLoc();

        Row[] rr = svcloc.getFilteredRows("SelectAddsFlg", "Y");
        Adflog.info("total length is " + rr.length);
        if (rr.length > 0) {
            for (Row r : rr) {
                String loc = (String) r.getAttribute("LocAddsId");
                Row[] filteredRows = itmLoc.getFilteredRows("LocAddsId", loc);
                Adflog.info("location length is " + filteredRows.length);

                if (filteredRows.length > 0) {

                } else {
                    Row createRow = itmLoc.createRow();
                    createRow.setAttribute("LocAddsId", r.getAttribute("LocAddsId")); //StrtDt
                    createRow.setAttribute("StrtDt", r.getAttribute("StrtDt"));
                    createRow.setAttribute("EndDt", r.getAttribute("EndDt"));
                    itmLoc.insertRow(createRow);
                }

            }
        }


        return null;
    }

    public String addTaxRule(Integer taxRuleId) {
        String taxRuleFlg = "I";
        if (taxRuleId != null) {

        }


        return null;
    }

    public String isTaxApplicable() {
        Row curr = this.getSvcScItm2().getCurrentRow();
        String flag = null;
        if (curr.getAttribute("ItmId") != null) {
            ViewObjectImpl itemvo = this.getLovItm1();
            itemvo.setNamedWhereClauseParam("bindCldId", cldId);
            itemvo.setNamedWhereClauseParam("bindSlocId", slocId);
            itemvo.setNamedWhereClauseParam("bindHoOrgId", hoOrgId);
            itemvo.setNamedWhereClauseParam("bindOrgId", orgId);
            itemvo.executeQuery();
            Row[] rr1 = itemvo.getFilteredRows("ItmId", curr.getAttribute("ItmId"));
            if (rr1.length > 0) {
                String taxFlg = rr1[0].getAttribute("TaxExmptFlg").toString();
                // Adflog.info("tax rule in if part " + rr1[0].getAttribute("TaxRuleId")+"rr1[0].getAttribute "+rr1[0].getAttribute("TaxExmptFlg"));
                if (taxFlg.equalsIgnoreCase("Y")) {
                    return "Y";
                } else {
                    if (rr1[0].getAttribute("TaxRuleId") != null) {
                        return "N";
                    }
                    return "Y";
                }
            }
            // _log.info("tax exmptd flag is "+flag);
        }

        return flag;
    }

    public String checkTaxPresent() {
        //    Row itmRw=this.getMmInvcItm().getCurrentRow();
        Integer count = ((Long) this.getSvcScTr3().getEstimatedRowCount()).intValue();
        Adflog.info("Est rw count tax:" + count);
        if (count > 0) {
            return "Y";
        } else {
            return "N";
        }
    }

    public Number getTrRuleId() {
        //   StringBuffer hoOrgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}"));
        Row curr = this.getSvcScItm2().getCurrentRow();
        Row svcR = this.getSvcSc1().getCurrentRow();
        Number str = null;
        Number ret = null;
        Integer tax = null;
        Adflog.info("current taxable amount is " + curr.getAttribute("TaxableAmt"));
        if (curr.getAttribute("TaxableAmt") != null) {
            Number taxableAmt = (Number) curr.getAttribute("TaxableAmt");
            String ItmId = curr.getAttribute("ItmId").toString();
            String DocId = curr.getAttribute("DocId").toString();
            Integer taxRule = (Integer) curr.getAttribute("TransTaxRuleId");
            Number convfctr = new Number(1);
            if (svcR.getAttribute("CurrConvFctr") != null)
                convfctr = (Number) svcR.getAttribute("CurrConvFctr");

            String taxExmpt = curr.getAttribute("TranstaxEmpt").toString();
            getDBTransaction().postChanges();
            Adflog.info("parametere are " + taxableAmt + "  " + ItmId + "  " + taxRule + "  " + convfctr + "   " +
                        taxExmpt);
            //     taxEmptdflg
            BigDecimal ret33 =
                (BigDecimal) (callStoredFunction(Types.NUMERIC, "SVC.SVC_INS_SC_TR_LINES(?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                 cldId, slocId, hoOrgId, orgId, DocId, ItmId, taxRule, taxableAmt, "I",
                                                 convfctr, taxExmpt, "Y"
            }));

            if (ret33 != null) {
                try {
                    ret = new Number(ret33);
                } catch (Exception e) {
                    Adflog.info("some error found in typecast tax" + e);
                }
            }
            getDBTransaction().postChanges();

        }
        Adflog.info("return in tr lines is " + ret);
        if (ret != null && ret.compareTo(new Number(0)) > 0) {
            str = ret;
            curr.setAttribute("TaxAmt", str);
            Adflog.info("new tax amtis -------------> " + curr.getAttribute("TaxAmt"));
            Number qty = (Number) curr.getAttribute("ItmQty");
            Number itmPrice = (Number) curr.getAttribute("ItmPrice");
            if (curr.getAttribute("DiscVal") != null) {
                Number discvalue = (Number) curr.getAttribute("DiscVal");
                Number totamt = (Number) ((Number) qty.multiply(itmPrice).add(str).minus(discvalue)).round(6);
                curr.setAttribute("TransTotAmt", totamt);
            } else {
                Number totamt = (Number) ((Number) qty.multiply(itmPrice).add(str)).round(6);
                curr.setAttribute("TransTotAmt", totamt);
            }

        } else {
            ret = new Number(0);
        }
        // getDBTransaction().postChanges();
        return ret;
    }

    public String isItmExists() {
        String flag = "Y";
        String currChk = checkCurrency();

        Adflog.info("currency check " + currChk);
        if ("Y".equalsIgnoreCase(currChk)) {

            Row curr = this.getSvcSc1().getCurrentRow();
            ViewObjectImpl itmvo = this.getSvcScItm2();
            if (curr.getAttribute("TransItmId") != null) {
                String ItmId = curr.getAttribute("TransItmId").toString();
                Row[] rr = itmvo.getFilteredRows("ItmId", ItmId);
                Adflog.info("current row is length" + rr.length);
                if (rr.length > 0) {
                    isrtIntoItmLocation();
                    return "N";
                } else {
                    return "Y";
                }
            }

        } else if ("N".equalsIgnoreCase(currChk)) {
            FacesMessage message = new FacesMessage("Either currency or conversion factor is not defined ");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext fc = FacesContext.getCurrentInstance();
            fc.addMessage(null, message);
            return "P";
        }
        return flag;
    }


    public String checkCurrency() {
        Row curr = this.getSvcSc1().getCurrentRow();

        if (curr != null) {

            if (curr.getAttribute("CurrIdSp") != null &&
                ((Number) curr.getAttribute("CurrConvFctr")).compareTo(new Number(0)) != 0) {
                return "Y";
            } else {
                return "N";
            }
        }

        return null;
    }


    public String generateScNo() {

        Row curr = this.getSvcSc1().getCurrentRow();
        String ret = null;
        if (curr != null) {
            Integer fyid = (Integer) curr.getAttribute("FyId");
            Integer scType = (Integer) curr.getAttribute("ScType");
            
            if(scType.compareTo(21)==0 || scType.compareTo(24)==0){
            if (curr.getAttribute("ScNo") != null) {

            } else {
                ret = (String) (callStoredFunction(Types.VARCHAR, "SVC.SVC_GEN_ID(?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                   cldId, slocId, hoOrgId, orgId, "SVC$SC_QUOT", fyid, 23001, null,
                                                   null, null
                })); //SVC$SC_SS  //SVC$SC_QUOT
                if (ret != null) {
                    curr.setAttribute("QuotNo", ret);
                    curr.setAttribute("ScNo", ret);
                }
            }
            }else if(scType.compareTo(22)==0 || scType.compareTo(23)==0){
                if (curr.getAttribute("ScNo") != null) {

                } else {
                    ret = (String) (callStoredFunction(Types.VARCHAR, "SVC.SVC_GEN_ID(?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                       cldId, slocId, hoOrgId, orgId, "SVC$SC_WTY", fyid, 23001, null, null,
                                                       null
                    }));

                    if (ret != null) {
                        curr.setAttribute("QuotNo", ret);
                        curr.setAttribute("ScNo", ret);
                    }
                }
            }
          Adflog.info("scno generated is " + ret);


        }
        return null;
    }


    public String insrtPmtshdl() {
        ViewObjectImpl svcitmvo = this.getSvcScItm2();
        Row curr = this.getSvcScItm2().getCurrentRow();
        if (curr != null) {
            if (curr.getAttribute("TransPayAmt") != null && curr.getAttribute("TransPayDate") != null) {
                Number sum = new Number(0);
                String ItemName = null;
                ArrayList ar = new ArrayList();
                /**
                 * Code change because  service item contain Quotation and payment schedule record*/
                RowQualifier rq = new RowQualifier(svcitmvo);
                rq.setWhereClause("DocId= '" + curr.getAttribute("DocId") + "' and SvcItmFlg='Y'");
                Row[] filteredrow = svcitmvo.getFilteredRows(rq);
                // Row [] filteredrow=svcitmvo.getFilteredRows("DocId", curr.getAttribute("DocId"));
                if (filteredrow.length > 0) {

                    for (Row r : filteredrow) {
                        if (r.getAttribute("TransTotAmt") != null) {
                            sum = sum.add((Number) r.getAttribute("TransTotAmt"));
                        } else {
                            ar.add(r.getAttribute("ItmNmBill").toString());
                        }
                    }

                }
                if (ar.isEmpty()) {
                    Adflog.info("total payment  amount is " + sum);
                    ViewObjectImpl pmtShdlvo = this.getSvcScPmtSchdl2();
                    Row r = pmtShdlvo.createRow();
                    r.setAttribute("PmtMode", curr.getAttribute("TransPayMode"));
                    r.setAttribute("PmtDt", curr.getAttribute("TransPayDate"));
                    r.setAttribute("PmtAmt", curr.getAttribute("TransPayAmt"));
                    r.setAttribute("PmtAmtBs", curr.getAttribute("TransPayAmt"));
                    r.setAttribute("TotAmt", sum); //TransTotAmt
                    //r.setAttribute("TotAmtBs", arg1);
                    pmtShdlvo.insertRow(r);

                    curr.setAttribute("TransPayMode", null);
                    curr.setAttribute("TransPayDate", null);
                    curr.setAttribute("TransPayAmt", null);
                } else {
                    FacesMessage message = new FacesMessage("Price Empty for these items " + ar);
                    message.setSeverity(FacesMessage.SEVERITY_INFO);
                    FacesContext fc = FacesContext.getCurrentInstance();
                    fc.addMessage(null, message);
                }

            }
        }
        return null;
    }

    public String chkPmtAmt() {
        Row curr = this.getSvcScItm2().getCurrentRow();
Row currMain=this.getSvcSc1().getCurrentRow();

        ViewObjectImpl pmtShdlvo = this.getSvcScPmtSchdl2();
        if (curr != null) {
            Row[] rr1 = pmtShdlvo.getFilteredRows("DocId", curr.getAttribute("DocId"));
            Number sum = new Number(0);
            Number totsum = new Number(0);
            if (rr1.length > 0) {
                for (Row r : rr1) {
                    Number pmtamt = (Number) r.getAttribute("PmtAmt");
                    sum = sum.add(pmtamt);
                }
                if (currMain.getAttribute("TransTotalPmtAmt") != null)
                    totsum = (Number) currMain.getAttribute("TransTotalPmtAmt");

                Adflog.info(totsum.round(2) + "  total payment and sum of amount is " + sum.round(2));
                Adflog.info("total sum comparison is -----------" + sum.round(2).compareTo(totsum.round(2)));
                if (sum.round(2).compareTo(totsum.round(2)) == 0) {
                    return "Y";
                } else {
                    return "N";
                }
            } else {
                return "Y";
            }
        }

        return "Y";
    }

    public String resetDiscAmt() {
        Row curr = this.getSvcScItm2().getCurrentRow();
        if (curr != null) {
            curr.setAttribute("DiscAmt", new Number(0));
            curr.setAttribute("DiscVal", new Number(0));
            Number itmqty = new Number(0);
            Number itmPrice = new Number(0);
            if (curr.getAttribute("ItmPrice") != null)
                itmPrice = (Number) curr.getAttribute("ItmPrice");
            if (curr.getAttribute("ItmQty") != null)
                itmqty = (Number) curr.getAttribute("ItmQty");

            curr.setAttribute("TaxableAmt", (Number) itmPrice.multiply(itmqty));
        }
        return null;
    }

    public String taxablecheck() {
        String chkcurr = checkCurrency();
        Adflog.info("chk currency conv is " + chkcurr);
        if ("Y".equalsIgnoreCase(chkcurr)) {

            Row svcrow = this.getSvcSc1().getCurrentRow();
            ViewObjectImpl svcItmvo = this.getSvcScItm2();
            ViewObjectImpl svcTrvo = this.getSvcScTr3();
            svcTrvo.executeQuery();
            Adflog.info("istaxable amt");
            ArrayList ar = new ArrayList();
            if (svcrow.getAttribute("DocId") != null) {
                Row[] rr1 = svcItmvo.getFilteredRows("DocId", svcrow.getAttribute("DocId"));

                if (rr1.length > 0) {
                    for (Row r : rr1) {
                        Number txblAmt = (Number) r.getAttribute("TaxableAmt");
                        String ItmId = r.getAttribute("ItmId").toString();
                        RowQualifier rq = new RowQualifier(svcTrvo);
                        rq.setWhereClause("DocId= '" + svcrow.getAttribute("DocId") + "' and ItmId= '" + ItmId + "'");
                        Row[] rr2 = svcTrvo.getFilteredRows(rq);
                        Adflog.info("tr get exprtn is  ----------- " + rq.getExprStr() + " length is " + rr2.length);

                        if (rr2.length > 0) {
                            for (Row rr : rr2) {
                                Number trTxblAmt = (Number) rr.getAttribute("TaxableAmtSp");
                                Adflog.info("taxable amt comparison " + txblAmt.compareTo(trTxblAmt) +
                                            " both amount is ------------------- " + trTxblAmt + " " + txblAmt);
                                if (txblAmt.compareTo(trTxblAmt) == 0) {
                                    Adflog.info("taxable amount value is ok for all items " + ItmId);
                                } else {
                                    ViewObjectImpl itmvo = this.getLovItm1();
                                    itmvo.setNamedWhereClauseParam("bindCldId", cldId);
                                    itmvo.setNamedWhereClauseParam("bindSlocId", slocId);
                                    itmvo.setNamedWhereClauseParam("bindHoOrgId", hoOrgId);
                                    itmvo.setNamedWhereClauseParam("bindOrgId", orgId);
                                    itmvo.executeQuery();

                                    Row[] itmR = itmvo.getFilteredRows("ItmId", ItmId);
                                    if (itmR.length > 0)
                                        for (Row itmrr : itmR)
                                            ar.add(itmrr.getAttribute("ItmDesc"));

                                    // ar.add(ItmId);
                                }
                            }
                        }
                    }
                }

            }
            Adflog.info("array list is " + ar);
            if (ar.isEmpty()) {
                return "Y";
            } else {
                FacesMessage message = new FacesMessage("Taxable Amount hase been change Re-Apply Tax " + ar);
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext fc = FacesContext.getCurrentInstance();
                fc.addMessage(null, message);
                return "N";
            }
        } else if ("N".equalsIgnoreCase(chkcurr)) {
            FacesMessage message = new FacesMessage("Either currency or conversion factor is not defined ");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext fc = FacesContext.getCurrentInstance();
            fc.addMessage(null, message);
            return "P";
        }
        return "Y";
    }

    public String setbindvar() {
        ViewObjectImpl srchvo = this.getSrchSvc();
        srchvo.setNamedWhereClauseParam("bindCldId", cldId);
        srchvo.setNamedWhereClauseParam("bindSlocId", slocId);
        srchvo.setNamedWhereClauseParam("bindHoOrgId", hoOrgId);
        srchvo.setNamedWhereClauseParam("bindOrgId", orgId);
        srchvo.executeQuery();

        return null;
    }

    public void filterView() {

        String docid = resolvEl("#{pageFlowScope.Doc_Id}");
        Adflog.info("current docId is " + docid);
        ViewObjectImpl vo = this.getSvcSc1();
        ViewCriteria vc = vo.getViewCriteria("SvcScVOCriteria");
        vo.applyViewCriteria(vc);
        vo.setNamedWhereClauseParam("bindCldId", cldId);
        vo.setNamedWhereClauseParam("bindSlocId", slocId);
        vo.setNamedWhereClauseParam("bindOrgId", orgId);
        vo.setNamedWhereClauseParam("bindHoOrgId", hoOrgId);
        vo.setNamedWhereClauseParam("bindDocId", docid);
        vo.executeQuery();

    }

    public String getWfNo(Integer SlocId, String CldId, String OrgId, Integer DocNo) {
        Row curr = this.getSvcSc1().getCurrentRow();

        // if(curr.getAttribute("ScType")!=null))
        try {
            Object obj = callStoredFunction(Types.VARCHAR, "APP.WF_GET_ID(?,?,?,?,?)", new Object[] {
                                            SlocId, CldId, OrgId, DocNo, curr.getAttribute("ScType")
            });
            return obj.toString();
        } catch (Exception e) {
            return "0";
        }

    }


    public Integer getUsrLvl(Integer SlocId, String CldId, String OrgId, Integer UsrId, String WfNo, String DocNo) {
        Row curr = this.getSvcSc1().getCurrentRow();
        Object obj = callStoredFunction(NUMBER, "APP.WF_GET_USR_LEVEL (?,?,?,?,?,?,?)", new Object[] {
                                        SlocId, CldId, OrgId, UsrId, WfNo, DocNo, curr.getAttribute("ScType")
        });
        if (obj != null) {
            UsrId = Integer.parseInt(obj.toString());
        }

        return (Integer) UsrId;
    }

    public Integer insIntoTxn(Integer SlocId, String CldId, String OrgId, Integer DocNo, String WfNo, Integer usr_idFrm,
                              Integer usr_idTo, Integer levelTo, Integer levelFrm, String action, String remark,
                              Number amount) {
        String DocId = getSvcSc1().getCurrentRow().getAttribute("DocId").toString();
        Row curr = this.getSvcSc1().getCurrentRow();
        // Integer DocNo1 = 23001;
        Adflog.info("DocNo-------" + DocNo + "  DocId----" + DocId + "  WfNo----" + WfNo + "DocNo1-----" + DocNo);
        Object obj = callStoredFunction(NUMBER, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                        SlocId, CldId, OrgId, DocNo, curr.getAttribute("ScType"), WfNo, DocId,
                                        usr_idFrm, usr_idTo, levelFrm, levelTo, action, remark, amount
        });
        Adflog.info("function return a value inthe txn is " + obj);
        Integer temp = Integer.parseInt(obj.toString());
        return temp;

    }

    public Integer pendingCheck(Integer SlocId, String CldId, String OrgId, Integer DocNo) {

        String DocId = getSvcSc1().getCurrentRow().getAttribute("DocId").toString();
        Row curr = this.getSvcSc1().getCurrentRow();
        //System.out.println("DOCIDTXN--"+docIdTxn);
        // Object obj= callStoredFunction(NUMBER, "APP.PKG_APP_WF.GET_DOC_WF_CUR_USR(?,?,?,?,?)", new Object[] { SlocId,CldId,OrgId,DocNo,DocId });
        Object obj = Integer.parseInt(callStoredFunction(NUMBER, "APP.WF_GET_CUR_USR(?,?,?,?,?,?)", new Object[] {
                                                         SlocId, CldId, OrgId, DocNo, DocId, curr.getAttribute("ScType")
        }).toString());

        Integer UsrId = null;
        if (obj != null) {
            UsrId = Integer.parseInt(obj.toString());
        }
        return UsrId;
    }


    public String setauthStat(String wfreturn) {
        Row curr = getSvcSc1().getCurrentRow();
        //   String wfstat=resolvEl("#{pageFlowScope.wfReturn}");
        if ("A".equalsIgnoreCase(wfreturn)) {
            if (curr != null) {
                Integer scType = Integer.parseInt(curr.getAttribute("ScType").toString());

                if(scType.compareTo(21)==0 || scType.compareTo(24)==0){
                curr.setAttribute("AuthStat", "Y");
                curr.setAttribute("DocStat", 58);
                curr.setAttribute("DocStatDt", new Timestamp(System.currentTimeMillis()));
                curr.setAttribute("AuthStatDt", new Timestamp(System.currentTimeMillis()));
                Adflog.info("auth stat is " + curr.getAttribute("AuthStat") + " docStat is " +
                            curr.getAttribute("DocStat"));
                
                }else if(scType.compareTo(22)==0 || scType.compareTo(23)==0){
                    curr.setAttribute("AuthStat", "Y");
                    curr.setAttribute("DocStat", 60);
                    curr.setAttribute("DocStatDt", new Timestamp(System.currentTimeMillis()));
                    curr.setAttribute("AuthStatDt", new Timestamp(System.currentTimeMillis()));
                    Adflog.info("auth stat is " + curr.getAttribute("AuthStat") + " docStat is " +
                                curr.getAttribute("DocStat"));
                }
            }
        } else if ("F".equals(wfreturn)) {
            curr.setAttribute("DocStat", 57);
            curr.setAttribute("DocStatDt", new Timestamp(System.currentTimeMillis()));
        }
        return null;
    }

    public String updateSvcStatus() {
        String flag = null;
        Row curr = this.getSvcSc1().getCurrentRow();
        if (curr != null) {
            Integer docstat = (Integer) curr.getAttribute("DocStat");
            if (docstat == 58) {
                curr.setAttribute("DocStat", 59);
                curr.setAttribute("DocStatDt", new Timestamp(System.currentTimeMillis()));
                this.getDBTransaction().commit();
                return "Y";
            } else {
                return "N";
            }
        }
        return flag;
    }

    public String scNoValuegen() {
        Row curr = this.getSvcSc1().getCurrentRow();
        if (curr != null) {
            Integer docstat = (Integer) curr.getAttribute("DocStat");
            if (docstat == 59) {
                String ret = null;
                Integer fyid = (Integer) curr.getAttribute("FyId");
                ret = (String) (callStoredFunction(Types.VARCHAR, "SVC.SVC_GEN_ID(?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                   cldId, slocId, hoOrgId, orgId, "SVC$SC_SC", fyid, 23001, null, null,
                                                   null
                }));

                if (ret != null)
                    curr.setAttribute("ScNo", ret);
                curr.setAttribute("DocStat", 60);
                curr.setAttribute("DocStatDt", new Timestamp(System.currentTimeMillis()));
                this.getDBTransaction().commit();
                return "Y";
            } else {
                return "N";
            }
        }
        return null;
    }

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.executeUpdate();

            return st.getObject(1);
        } catch (SQLException e) {
            e.printStackTrace();
            int end = e.getMessage().indexOf("\n");
            //  throw new JboException(e.getMessage().substring(11, end));
            String msg = e.getMessage();
            FacesMessage ermsg = new FacesMessage(msg);
            ermsg.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, ermsg);
            //  throw new JboException(e);

            return null;
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    public void srchSvcSc() {
        ViewObjectImpl srchvo = this.getSrchSvc();
        Row curr = getTransSrch().getCurrentRow();

        srchvo.setNamedWhereClauseParam("bindCldId", cldId);
        srchvo.setNamedWhereClauseParam("bindSlocId", slocId);
        srchvo.setNamedWhereClauseParam("bindHoOrgId", hoOrgId);
        srchvo.setNamedWhereClauseParam("bindOrgId", orgId);
        Adflog.info("doc state " + curr.getAttribute("TransDocStat") + " " + curr.getAttribute("TransToDt"));
        if (curr != null) {
            srchvo.setNamedWhereClauseParam("bindDocStat", curr.getAttribute("TransDocStat"));
            srchvo.setNamedWhereClauseParam("bindScType", curr.getAttribute("TransScType"));
            srchvo.setNamedWhereClauseParam("bindTodt", curr.getAttribute("TransToDt"));
            srchvo.setNamedWhereClauseParam("bindeoId", curr.getAttribute("TransEoId"));
            srchvo.setNamedWhereClauseParam("bindscno", curr.getAttribute("TransScNo"));
            srchvo.setNamedWhereClauseParam("binfFrmdt", curr.getAttribute("TransFrmDate"));
            srchvo.executeQuery();
        }

        srchvo.executeQuery();
    }

    public void rstSvcVo() {
        ViewObjectImpl srchvo = this.getSrchSvc();
        Row curr = getTransSrch().getCurrentRow();

        srchvo.setNamedWhereClauseParam("bindCldId", cldId);
        srchvo.setNamedWhereClauseParam("bindSlocId", slocId);
        srchvo.setNamedWhereClauseParam("bindHoOrgId", hoOrgId);
        srchvo.setNamedWhereClauseParam("bindOrgId", orgId);

        if (curr != null) {
            srchvo.setNamedWhereClauseParam("bindDocStat", null);
            srchvo.setNamedWhereClauseParam("bindScType", null);
            srchvo.setNamedWhereClauseParam("bindTodt", null);
            srchvo.setNamedWhereClauseParam("bindeoId", null);
            srchvo.setNamedWhereClauseParam("bindscno", null);
            srchvo.setNamedWhereClauseParam("binfFrmdt", null);
        }

        srchvo.executeQuery();

    }

    public String dplctDtchk() {
        Row curritm = this.getSvcScItm2().getCurrentRow();
        ViewObjectImpl pmtvo = this.getSvcScPmtSchdl2();

        if (curritm != null) {
            if (curritm.getAttribute("TransPayDate") != null) {
                Timestamp date = (Timestamp) curritm.getAttribute("TransPayDate");
                Row[] rr = pmtvo.getFilteredRows("PmtDt", date);
                if (rr.length > 0) {
                    return "N";
                }
                return "Y";

            }
        }
        return "Y";
    }

    public String createAsn() {
        Row currItm = this.getSvcScItm2().getCurrentRow();
        if (currItm != null) {
            if (currItm.getAttribute("TransRqmtArea") != null && currItm.getAttribute("TransEmpCode") != null) {
                Adflog.info("em code is " + currItm.getAttribute("TransEmpCode"));
                this.getDBTransaction().postChanges();
                ViewObjectImpl asnvo = this.getSvcScSvcAsgn3();
                Row r = asnvo.createRow();
                r.setAttribute("RqmtAreaId", currItm.getAttribute("TransRqmtArea"));
                r.setAttribute("EmpCode", currItm.getAttribute("TransEmpCode"));
                r.setAttribute("HoOrgId", hoOrgId);
                r.setAttribute("OrgIdAsgn", orgId);
                //r.setAttribute("arg0", "arg1");
                asnvo.insertRow(r);
                asnvo.executeQuery();
                currItm.setAttribute("TransRqmtArea", null);
                currItm.setAttribute("TransEmpCode", null);
                currItm.setAttribute("TransEmpNm", null);
               
            }
        }
        return null;
    }

    public String duplicateAsnChk() {

        Row currItm = this.getSvcScItm2().getCurrentRow();
        if (currItm != null) {
            if (currItm.getAttribute("TransRqmtArea") != null && currItm.getAttribute("TransEmpCode") != null) {
                ViewObjectImpl asnvo = this.getSvcScSvcAsgn3();

                RowQualifier rq = new RowQualifier(asnvo);
                rq.setWhereClause("EmpCode= " + currItm.getAttribute("TransEmpCode") + " and RqmtAreaId=" +
                                  currItm.getAttribute("TransRqmtArea") + " and ItmId ='" +
                                  currItm.getAttribute("ItmId") + "'");
                Row[] rr1 = asnvo.getFilteredRows(rq);
                if (rr1.length > 0) {
                    return "N";
                } else {
                    return "Y";
                }
            }
        }
        return "Y";
    }


    public String insertFrRenewal() {
        Row scRw = this.getSvcSc1().getCurrentRow();
        String flag = "N";
        if (scRw.getAttribute("TransScNoDocId") != null) {
            //doc_id,sc_rw,

            ViewObjectImpl rnwlvo = this.getRnwlSvcCntrct();

            RowQualifier rq = new RowQualifier(rnwlvo);
            rq.setWhereClause("CldId= '" + cldId + "' and SlocId= " + slocId + " and HoOrgId='" + hoOrgId +
                              "' and OrgId= '" + orgId + "' and DocId= '" + scRw.getAttribute("TransScNoDocId") + "'");
            Row[] rr = rnwlvo.getFilteredRows(rq);
            Adflog.info("rq expression is " + rq.getExprStr());
            if (rr.length > 0) {

                scRw.setAttribute("BillCycle", rr[0].getAttribute("BillCycle"));
                scRw.setAttribute("SvcCycle", rr[0].getAttribute("SvcCycle"));
                scRw.setAttribute("PrdFm", rr[0].getAttribute("PrdFm"));
                scRw.setAttribute("PrdTo", rr[0].getAttribute("PrdTo"));
                scRw.setAttribute("DocIdPrev", scRw.getAttribute("TransScNoDocId"));
                scRw.setAttribute("RepairType", rr[0].getAttribute("RepairType"));
                scRw.setAttribute("DiscType", rr[0].getAttribute("DiscType"));
                scRw.setAttribute("DiscVal", rr[0].getAttribute("DiscVal"));
                scRw.setAttribute("CurrIdSp", rr[0].getAttribute("CurrIdSp")); //TotAmtSp
                scRw.setAttribute("TotAmtSp", rr[0].getAttribute("TotAmtSp"));
                scRw.setAttribute("TotAmtBs", rr[0].getAttribute("TotAmtBs"));
                scRw.setAttribute("CurrConvFctr", rr[0].getAttribute("CurrConvFctr"));
                scRw.setAttribute("TaxAfterDiscFlg", rr[0].getAttribute("TaxAfterDiscFlg"));
                flag = "Y";
            }
            if (rr.length > 0) {
                this.getDBTransaction().postChanges();
                Adflog.info("current row  doc id is " + scRw.getAttribute("DocId"));
                Integer ret = null;
                if ("Y".equalsIgnoreCase(flag)) {
                    ret = (Integer) (callStoredFunction(Types.INTEGER, "SVC.SVC_RENEW_SC(?,?,?,?,?,?,?)", new Object[] {
                                                        cldId, slocId, hoOrgId, orgId, scRw.getAttribute("DocId"),
                                                        rr[0].getAttribute("DocId"), scRw.getAttribute("CtcInitType")
                    }));
                    //this.getDBTransaction().postChanges();//CtcInitType
Adflog.info("--parameters for svc_renew_sc are---- curr"+scRw.getAttribute("DocId")+"--prev --"+rr[0].getAttribute("DocId")+"--"+scRw.getAttribute("CtcInitType"));
                    this.getSvcScItm2().executeQuery();

                    if (ret != null) {
                        Adflog.info("function return after approval is " + ret);
                    } else {

                    }
                }
            }
        }

        return flag;
    }

    public String crtShedule() {
        ViewObjectImpl svcvo = this.getSvcScSvcSchdl2();
        Row curr = this.getSvcSc1().getCurrentRow();
        Row curritm = this.getSvcScItm2().getCurrentRow();
        String dplctChk = duplicateShdlChk();
        if ("Y".equalsIgnoreCase(dplctChk)) {
            if (curr.getAttribute("TransSvcShdlDt") != null && curritm.getAttribute("ItmId") != null) {
                Row shdlRw = svcvo.createRow();
                shdlRw.setAttribute("SvcDt", curr.getAttribute("TransSvcShdlDt"));
                shdlRw.setAttribute("ItmId", curritm.getAttribute("ItmId"));
                svcvo.insertRow(shdlRw);
                svcvo.executeQuery();
                curr.setAttribute("TransSvcShdlDt", null);
                //curr.getAttribute("TransSvcShdlDt")
                return "Y";
            }
        } else if ("N".equalsIgnoreCase(dplctChk)) {
            FacesMessage message = new FacesMessage("Record already Exists");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext fc = FacesContext.getCurrentInstance();
            fc.addMessage(null, message);
            return "N";
        }
        return null;
    }

    public String duplicateShdlChk() {
        ViewObjectImpl shdlvo = this.getSvcScSvcSchdl2();
        Row curr = this.getSvcSc1().getCurrentRow();
        Row curritm = this.getSvcScItm2().getCurrentRow();
        if (curr.getAttribute("TransSvcShdlDt") != null && curritm.getAttribute("ItmId") != null) {

            RowQualifier rq1 = new RowQualifier(shdlvo);
            rq1.setWhereClause("SvcDt= '" + curr.getAttribute("TransSvcShdlDt") + "' and ItmId='" +
                               curritm.getAttribute("ItmId") + "'");
            Row[] shdlRw = shdlvo.getFilteredRows(rq1);
            if (shdlRw.length > 0) {
                return "N";
            } else {
                return "Y";
            }
        }

        return "Y";
    }


    public String autoSrvcSchedule() {
        Row scRw = this.getSvcSc1().getCurrentRow();
        Row scRwitm = this.getSvcScItm2().getCurrentRow();
        Integer ret = null;
        if (scRw.getAttribute("SvcCycle") != null && scRwitm.getAttribute("ItmId") != null &&
            scRw.getAttribute("PrdFm") != null && scRw.getAttribute("PrdTo") != null &&
            scRw.getAttribute("TransSvcShdlDt") != null)
        //TransSvcShdlDt
        {
            this.getDBTransaction().postChanges();
            Adflog.info("--------------inside not null ----------- "+ scRw.getAttribute("TransSvcShdlDt"));
            ret = (Integer) (callStoredFunction(Types.INTEGER, "SVC.SVC_GEN_SC_SVC_SCHDL(?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                cldId, slocId, hoOrgId, orgId, scRw.getAttribute("DocId"),
                                                scRwitm.getAttribute("ItmId"), scRw.getAttribute("SvcCycle"),
                                                scRw.getAttribute("PrdFm"), scRw.getAttribute("PrdTo"),
                                                scRw.getAttribute("TransSvcShdlDt")
            }));

        }
        if (ret != null) {
            this.getSvcScSvcSchdl2().executeQuery();
            //   scRw.getAttribute("TransSvcShdlDt");

            scRw.setAttribute("TransSvcShdlDt", null);
            Adflog.info("return value is " + ret);
        }
        return null;
    }

    public String autoPaymentschedule() {

        Row scRw = this.getSvcSc1().getCurrentRow();
        Row scRwitm = this.getSvcScItm2().getCurrentRow();
        if (scRwitm.getAttribute("TransPayDate") != null && scRw.getAttribute("TransTotalPmtAmt") != null &&
            scRw.getAttribute("BillCycle") != null && scRw.getAttribute("CurrConvFctr") != null) {
            this.getDBTransaction().postChanges();
            Integer ret =
                (Integer) (callStoredFunction(Types.INTEGER, "SVC.SVC_GEN_SC_PMT_SCHDL(?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                              cldId, slocId, hoOrgId, orgId, scRw.getAttribute("DocId"),
                                              scRw.getAttribute("BillCycle"), scRw.getAttribute("PrdFm"),
                                              scRw.getAttribute("PrdTo"), scRwitm.getAttribute("TransPayDate"),
                                              scRw.getAttribute("TransTotalPmtAmt"), scRw.getAttribute("CurrConvFctr")
            }));
            this.getSvcScPmtSchdl2().executeQuery();


        }


        return null;
    }


    public String discAmtValidator(Number discAmt) {
        Row currItm = this.getSvcScItm2().getCurrentRow();
        if (currItm != null) {
            Number itmQty = (Number) currItm.getAttribute("ItmQty");
            Number itmPrice = (Number) currItm.getAttribute("ItmPrice");
            String discType = currItm.getAttribute("DiscType").toString();
            Number tot = itmQty.multiply(itmPrice);

            Adflog.info("item quantity is " + tot + "item price is " + itmPrice + "item quantity is " + itmQty +
                        " and comparison is " + discAmt.compareTo(tot));
            if (discType.equalsIgnoreCase("A")) {
                if (discAmt.compareTo(tot) == 1) {
                    Adflog.info("disc amount has improper amount " + discAmt);
                    return "N";
                } else {
                    Adflog.info("disc amount ok " + discAmt);
                    return "Y";
                }
            } else if (discType.equalsIgnoreCase("P")) {
                if (discAmt.compareTo(new Number(100)) == 1) {
                    Adflog.info("percent wise   improper amount " + discAmt);
                    return "P";
                } else {
                    Adflog.info("percent wise  ok " + discAmt);
                    return "Y";
                }

            }


        }

        return "Y";
    }

    public String deleteAllPmtSchedule() {
        ViewObjectImpl pmtvo = this.getSvcScPmtSchdl2();
        RowSetIterator rwitr = pmtvo.createRowSetIterator(null);
        while (rwitr.hasNext()) {
            Row r = rwitr.next();
            r.remove();
        }
        rwitr.closeRowSetIterator();
        pmtvo.executeQuery();
        return null;
    }

    /**
     * Container's getter for SvcScItm1.
     * @return SvcScItm1
     */
    public ViewObjectImpl getSvcScItm1() {
        return (ViewObjectImpl) findViewObject("SvcScItm1");
    }

    /**
     * Container's getter for SvcScOc1.
     * @return SvcScOc1
     */
    public ViewObjectImpl getSvcScOc1() {
        return (ViewObjectImpl) findViewObject("SvcScOc1");
    }

    /**
     * Container's getter for SvcScPmtSchdl1.
     * @return SvcScPmtSchdl1
     */
    public ViewObjectImpl getSvcScPmtSchdl1() {
        return (ViewObjectImpl) findViewObject("SvcScPmtSchdl1");
    }

    /**
     * Container's getter for SvcScSvcAsgn1.
     * @return SvcScSvcAsgn1
     */
    public ViewObjectImpl getSvcScSvcAsgn1() {
        return (ViewObjectImpl) findViewObject("SvcScSvcAsgn1");
    }

    /**
     * Container's getter for SvcScSvcSchdl1.
     * @return SvcScSvcSchdl1
     */
    public ViewObjectImpl getSvcScSvcSchdl1() {
        return (ViewObjectImpl) findViewObject("SvcScSvcSchdl1");
    }

    /**
     * Container's getter for SvcScTrLines1.
     * @return SvcScTrLines1
     */
    public ViewObjectImpl getSvcScTrLines1() {
        return (ViewObjectImpl) findViewObject("SvcScTrLines1");
    }

    /**
     * Container's getter for SvcScTr1.
     * @return SvcScTr1
     */
    public ViewObjectImpl getSvcScTr1() {
        return (ViewObjectImpl) findViewObject("SvcScTr1");
    }

    /**
     * Container's getter for SvcSc1.
     * @return SvcSc1
     */
    public ViewObjectImpl getSvcSc1() {
        return (ViewObjectImpl) findViewObject("SvcSc1");
    }

    /**
     * Container's getter for SvcScItm2.
     * @return SvcScItm2
     */
    public ViewObjectImpl getSvcScItm2() {
        return (ViewObjectImpl) findViewObject("SvcScItm2");
    }

    /**
     * Container's getter for SvcScItmFoc2.
     * @return SvcScItmFoc2
     */
    public ViewObjectImpl getSvcScItmFoc2() {
        return (ViewObjectImpl) findViewObject("SvcScItmFoc2");
    }

    /**
     * Container's getter for SvcScOc2.
     * @return SvcScOc2
     */
    public ViewObjectImpl getSvcScOc2() {
        return (ViewObjectImpl) findViewObject("SvcScOc2");
    }

    /**
     * Container's getter for SvcScPmtSchdl2.
     * @return SvcScPmtSchdl2
     */
    public ViewObjectImpl getSvcScPmtSchdl2() {
        return (ViewObjectImpl) findViewObject("SvcScPmtSchdl2");
    }

    /**
     * Container's getter for SvcScSvcAsgn2.
     * @return SvcScSvcAsgn2
     */
    public ViewObjectImpl getSvcScSvcAsgn2() {
        return (ViewObjectImpl) findViewObject("SvcScSvcAsgn2");
    }

    /**
     * Container's getter for SvcScSvcSchdl2.
     * @return SvcScSvcSchdl2
     */
    public ViewObjectImpl getSvcScSvcSchdl2() {
        return (ViewObjectImpl) findViewObject("SvcScSvcSchdl2");
    }

    /**
     * Container's getter for SvcScTr2.
     * @return SvcScTr2
     */
    public ViewObjectImpl getSvcScTr2() {
        return (ViewObjectImpl) findViewObject("SvcScTr2");
    }

    /**
     * Container's getter for SvcScTrLines2.
     * @return SvcScTrLines2
     */
    public ViewObjectImpl getSvcScTrLines2() {
        return (ViewObjectImpl) findViewObject("SvcScTrLines2");
    }

    /**
     * Container's getter for FkSvcScItmVL1.
     * @return FkSvcScItmVL1
     */
    public ViewLinkImpl getFkSvcScItmVL1() {
        return (ViewLinkImpl) findViewLink("FkSvcScItmVL1");
    }

    /**
     * Container's getter for FkSvcScItmFocVL1.
     * @return FkSvcScItmFocVL1
     */
    public ViewLinkImpl getFkSvcScItmFocVL1() {
        return (ViewLinkImpl) findViewLink("FkSvcScItmFocVL1");
    }

    /**
     * Container's getter for FkSvcScOcVL1.
     * @return FkSvcScOcVL1
     */
    public ViewLinkImpl getFkSvcScOcVL1() {
        return (ViewLinkImpl) findViewLink("FkSvcScOcVL1");
    }

    /**
     * Container's getter for FkSvcScPmtSchdlVL1.
     * @return FkSvcScPmtSchdlVL1
     */
    public ViewLinkImpl getFkSvcScPmtSchdlVL1() {
        return (ViewLinkImpl) findViewLink("FkSvcScPmtSchdlVL1");
    }

    /**
     * Container's getter for FkSvcScSvcAsgnVL1.
     * @return FkSvcScSvcAsgnVL1
     */
    public ViewLinkImpl getFkSvcScSvcAsgnVL1() {
        return (ViewLinkImpl) findViewLink("FkSvcScSvcAsgnVL1");
    }

    /**
     * Container's getter for FkSvcScSvcSchdlVL1.
     * @return FkSvcScSvcSchdlVL1
     */
    public ViewLinkImpl getFkSvcScSvcSchdlVL1() {
        return (ViewLinkImpl) findViewLink("FkSvcScSvcSchdlVL1");
    }

    /**
     * Container's getter for FkSvcScTrVL1.
     * @return FkSvcScTrVL1
     */
    public ViewLinkImpl getFkSvcScTrVL1() {
        return (ViewLinkImpl) findViewLink("FkSvcScTrVL1");
    }

    /**
     * Container's getter for FkSvcScTrLinesVL1.
     * @return FkSvcScTrLinesVL1
     */
    public ViewLinkImpl getFkSvcScTrLinesVL1() {
        return (ViewLinkImpl) findViewLink("FkSvcScTrLinesVL1");
    }

    /**
     * Container's getter for Dual1.
     * @return Dual1
     */
    public ViewObjectImpl getDual1() {
        return (ViewObjectImpl) findViewObject("Dual1");
    }

    /**
     * Container's getter for LovCoa1.
     * @return LovCoa1
     */
    public ViewObjectImpl getLovCoa1() {
        return (ViewObjectImpl) findViewObject("LovCoa1");
    }

    /**
     * Container's getter for LovAdds1.
     * @return LovAdds1
     */
    public ViewObjectImpl getLovAdds1() {
        return (ViewObjectImpl) findViewObject("LovAdds1");
    }

    /**
     * Container's getter for LovSuppTune1.
     * @return LovSuppTune1
     */
    public ViewObjectImpl getLovSuppTune1() {
        return (ViewObjectImpl) findViewObject("LovSuppTune1");
    }

    /**
     * Container's getter for LovCurr1.
     * @return LovCurr1
     */
    public ViewObjectImpl getLovCurr1() {
        return (ViewObjectImpl) findViewObject("LovCurr1");
    }

    /**
     * Container's getter for SvcScItmFoc3.
     * @return SvcScItmFoc3
     */
    public ViewObjectImpl getSvcScItmFoc3() {
        return (ViewObjectImpl) findViewObject("SvcScItmFoc3");
    }

    /**
     * Container's getter for FkSvcScItmFocVL2.
     * @return FkSvcScItmFocVL2
     */
    public ViewLinkImpl getFkSvcScItmFocVL2() {
        return (ViewLinkImpl) findViewLink("FkSvcScItmFocVL2");
    }

    /**
     * Container's getter for SvcScSvcAsgn3.
     * @return SvcScSvcAsgn3
     */
    public ViewObjectImpl getSvcScSvcAsgn3() {
        return (ViewObjectImpl) findViewObject("SvcScSvcAsgn3");
    }

    /**
     * Container's getter for FkSvcScSvcAsgnVL2.
     * @return FkSvcScSvcAsgnVL2
     */
    public ViewLinkImpl getFkSvcScSvcAsgnVL2() {
        return (ViewLinkImpl) findViewLink("FkSvcScSvcAsgnVL2");
    }


    /**
     * Container's getter for LovItm1.
     * @return LovItm1
     */
    public ViewObjectImpl getLovItm1() {
        return (ViewObjectImpl) findViewObject("LovItm1");
    }


    /**
     * Container's getter for SvcScTr3.
     * @return SvcScTr3
     */
    public ViewObjectImpl getSvcScTr3() {
        return (ViewObjectImpl) findViewObject("SvcScTr3");
    }

    /**
     * Container's getter for FkSvcScTrVL2.
     * @return FkSvcScTrVL2
     */
    public ViewLinkImpl getFkSvcScTrVL2() {
        return (ViewLinkImpl) findViewLink("FkSvcScTrVL2");
    }

    /**
     * Container's getter for SvcScTrLines3.
     * @return SvcScTrLines3
     */
    public ViewObjectImpl getSvcScTrLines3() {
        return (ViewObjectImpl) findViewObject("SvcScTrLines3");
    }

    /**
     * Container's getter for FkSvcScTrLinesVL2.
     * @return FkSvcScTrLinesVL2
     */
    public ViewLinkImpl getFkSvcScTrLinesVL2() {
        return (ViewLinkImpl) findViewLink("FkSvcScTrLinesVL2");
    }

    /**
     * Container's getter for SrchSvc1.
     * @return SrchSvc1
     */
    public ViewObjectImpl getSrchSvc() {
        return (ViewObjectImpl) findViewObject("SrchSvc");
    }

    /**
     * Container's getter for TransSrch1.
     * @return TransSrch1
     */
    public ViewObjectImpl getTransSrch() {
        return (ViewObjectImpl) findViewObject("TransSrch");
    }

    /**
     * Container's getter for LovCstmr1.
     * @return LovCstmr1
     */
    public ViewObjectImpl getLovCstmr() {
        return (ViewObjectImpl) findViewObject("LovCstmr");
    }

    /**
     * Container's getter for LovUom1.
     * @return LovUom1
     */
    public ViewObjectImpl getLovUom() {
        return (ViewObjectImpl) findViewObject("LovUom");
    }

    /**
     * Container's getter for LovEmpCode1.
     * @return LovEmpCode1
     */
    public ViewObjectImpl getLovEmpCode() {
        return (ViewObjectImpl) findViewObject("LovEmpCode");
    }

    /**
     * Container's getter for RnwlSvcCntrct1.
     * @return RnwlSvcCntrct1
     */
    public ViewObjectImpl getRnwlSvcCntrct() {
        return (ViewObjectImpl) findViewObject("RnwlSvcCntrct");
    }

    public String getUsrNm(Integer usrId) {
        ViewObjectImpl usrvo = this.getLovUsr();
        String usrname = null;
        if (usrId != null) {
            usrvo.setNamedWhereClauseParam("bindSlocId", slocId);
            usrvo.setNamedWhereClauseParam("bindUsrId", null);
            usrvo.executeQuery();
            // usrvo.setNamedWhereClauseParam("bind", arg1);
            Row[] rr = usrvo.getFilteredRows("UsrId", usrId);
            if (rr.length > 0) {
                usrname = rr[0].getAttribute("UsrName").toString();
                return rr[0].getAttribute("UsrName").toString();
            }
        }

        return usrname;
    }

    /**
     * Tax check is taxable Y or N
     * Item Quantity in Number itmQty
     * Item Price in Number itmPrice
     * Discount value as discValue
     * Discount Type A/P discType
     *
     * */


    public HashMap getTotalAndTaxableAmt(String taxCheck, Number itmQty, Number itmPrice, Number discValue,
                                         String discType) {

        // adfLog.info("taxcheck " + taxCheck + " itemqty " + itmQty + " itemprice " + itmPrice + " discvalue = " +
        //               discValue + " disctype = " + discType);
        HashMap Hm = new HashMap();
        Number ItemQuantity = new Number(0);
        Number ItemPrice = new Number(0);
        Number discountVal = new Number(0);
        String discountType = "A";
        String taxAfterbefore = "N";

        if (taxCheck != null)
            taxAfterbefore = taxCheck;
        if (itmQty != null)
            ItemQuantity = itmQty;
        if (itmPrice != null)
            ItemPrice = itmPrice;
        if (discValue != null)
            discountVal = discValue;
        if (discType != null)
            discountType = discType;
        Number itmPriceQty = (Number) ItemPrice.multiply(ItemQuantity).round(6);
        Number discAmount = new Number(0);
        Number Hundred = new Number(100);
        Number taxableAmt = new Number(0);
        Number totalAmt = new Number(0);

        if (discountType.equalsIgnoreCase("A")) {
            discAmount = discountVal;

        } else if (discountType.equalsIgnoreCase("P")) {
            discAmount = (Number) itmPriceQty.multiply(discountVal).divide(Hundred).round(6);
        }
        //   adfLog.info("Now discount amount is-------------  " + discAmount);

        if ("Y".equalsIgnoreCase(taxAfterbefore)) {
            taxableAmt = (Number) (((Number) itmPriceQty.minus(discAmount)).round(6));
            totalAmt = (Number) (((Number) itmPriceQty.minus(discAmount)).round(6));


        } else if ("N".equalsIgnoreCase(taxAfterbefore)) {
            taxableAmt = (Number) itmPriceQty.round(6);
            totalAmt = (Number) (((Number) itmPriceQty.minus(discAmount)).round(6));
        }
        Hm.put("TaxableAmount", taxableAmt);
        Hm.put("TotalAmt", totalAmt);
        Hm.put("DiscountAmt", discAmount);

        return Hm;
    }


    /**
     * Container's getter for LovUsr1.
     * @return LovUsr1
     */
    public ViewObjectImpl getLovUsr() {
        return (ViewObjectImpl) findViewObject("LovUsr");
    }

    /**
     * Container's getter for SvcScAttch1.
     * @return SvcScAttch1
     */
    public ViewObjectImpl getSvcScAttch1() {
        return (ViewObjectImpl) findViewObject("SvcScAttch1");
    }

    /**
     * Container's getter for SvcScToSvcScAttchVL1.
     * @return SvcScToSvcScAttchVL1
     */
    public ViewLinkImpl getSvcScToSvcScAttchVL1() {
        return (ViewLinkImpl) findViewLink("SvcScToSvcScAttchVL1");
    }


    public String getUpFilePath(Integer slcId) {
        Object fnRetVal;

        try {
            fnRetVal = callStoredFunction(Types.VARCHAR, "APP.FN_GET_APP_DOC_ATTACH_PATH(?)", new Object[] { slcId });

            if (fnRetVal != null) {

                if (fnRetVal.equals(-1)) {
                    // showFacesMsg("Error while fetching file path details", null, FacesMessage.SEVERITY_ERROR, null);
                }

                return fnRetVal.toString();
            }

        } catch (Exception e) {
            // System.out.println("ERROR IN CALLING FUNCTION FN_GET_APP_DOC_ATTACH_PATH at AMIMPL :" + e.getMessage());
            e.printStackTrace();

        }
        //  showFacesMsg("Error while fetching file path details", null, FacesMessage.SEVERITY_ERROR, null);

        return null;
    }


    public String getUpFileId(String cldId, Integer slcId, String hoOrgId, String orgId) {

        Object fnRetVal;

        try {
            fnRetVal = callStoredFunction(Types.VARCHAR, "APP.FN_APP_GEN_FILE_ATTCH_ID(?,?,?,?,?)", new Object[] {
                                          slcId, cldId, hoOrgId, orgId, "MM$IPO$IDF$ATTCH"
            });

            if (fnRetVal != null) {

                if (fnRetVal.equals(-1)) {
                    //showFacesMsg("Error while fetching file Id details", null, FacesMessage.SEVERITY_ERROR, null);
                }

                return fnRetVal.toString();
            }

        } catch (Exception e) {
            System.out.println("ERROR IN CALLING FUNCTION FN_APP_GEN_FILE_ATTCH_ID at AMIMPL :" + e.getMessage());
            e.printStackTrace();

        }
        //showFacesMsg("Error while fetching file Id details", null, FacesMessage.SEVERITY_ERROR, null);

        return "0";
    }

    public String createAttchmntRow(String contentTyp, String fileNm, String extn) {
        Adflog.info("Inside AMIMPL");
        String path = getUpFilePath(getSlocId());
        System.out.println("path " + path);

        String fileId = getUpFileId(getCldId(), getSlocId(), getHoOrgId(), getOrgId());
        Adflog.info("fileId " + fileId);

        Row r = getSvcScAttch1().createRow();

        Adflog.info("contentTyp " + contentTyp);
        r.setAttribute("HoOrgId", getHoOrgId());
        r.setAttribute("FlExtn", contentTyp);
        r.setAttribute("DispFlNm", fileNm);
        r.setAttribute("FlNm", fileId);
        r.setAttribute("FlPath", path + fileId + extn);

        getSvcScAttch1().insertRow(r);

        this.getDBTransaction().postChanges(); // Used this for increasing fileId else throws too many object error

        return path + fileId;
    }

    /**return array of item who's in not working condition*/
    public String itemNotWorking() {
        ArrayList ar = new ArrayList();
        Row curr = this.getSvcSc1().getCurrentRow();
        ViewObjectImpl scitm = this.getSvcScItm1();
        String flag = null;
        if (curr != null) {
            String docId = curr.getAttribute("DocId").toString();
            RowQualifier rq = new RowQualifier(scitm);
            rq.setWhereClause("DocId= '" + docId + "' and ItmStatOnSs=" + new Integer(31));
            Row[] rr1 = scitm.getFilteredRows(rq);
            if (rr1.length > 0) {
                for (Row r : rr1) {
                    ViewObjectImpl itemvo = this.getLovItm1();
                    itemvo.setNamedWhereClauseParam("bindCldId", cldId);
                    itemvo.setNamedWhereClauseParam("bindSlocId", slocId);
                    itemvo.setNamedWhereClauseParam("bindHoOrgId", hoOrgId);
                    itemvo.setNamedWhereClauseParam("bindOrgId", orgId);
                    itemvo.executeQuery();
                    Row[] rr2 = itemvo.getFilteredRows("ItmId", r.getAttribute("ItmId"));
                    if (rr2.length > 0) {
                        ar.add(rr2[0].getAttribute("ItmDesc"));
                    }
                }
            }
        }
        Adflog.info("array list value is " + ar);
        if (ar.isEmpty()) {
            return "N";
        } else {
            flag = ar.toString();
        }
        return flag;
    }


    public String focItmNameValid(String name) {
        Adflog.info("current length itmDesc " + name);
        ViewObjectImpl itmDescvo = this.getLovItmDesc();
        itmDescvo.setNamedWhereClauseParam("bindCldId", cldId);
        itmDescvo.setNamedWhereClauseParam("bindHoOrgId", hoOrgId);
        itmDescvo.setNamedWhereClauseParam("bindOrgId", orgId);
        itmDescvo.setNamedWhereClauseParam("bindSlocId", slocId);
        itmDescvo.setNamedWhereClauseParam("bindItmDesc", name.toString());
        itmDescvo.executeQuery();
        Row curritm = this.getSvcScItmFoc3().getCurrentRow();
        Row[] rr = itmDescvo.getFilteredRows("ItmDesc", name.toString());
        Adflog.info("current length itmDesc " + rr.length);
        if (rr.length > 0) {
            String ItmId = rr[0].getAttribute("ItmId").toString();
            ViewObjectImpl svcitm = this.getSvcScItmFoc3();
            Adflog.info("current item id found  " + ItmId);
            //Row [] rr1=svcitm.getFilteredRows("ItmIdFoc", ItmId);
            //if(rr1)
            RowSetIterator rwitr = svcitm.createRowSetIterator(null);
            while (rwitr.hasNext()) {
                Row r = rwitr.next();

                if (!r.equals(curritm)) {
                    String prevItmId = r.getAttribute("ItmIdFoc").toString();
                    Adflog.info(prevItmId + " item id matches  " + ItmId.equalsIgnoreCase(prevItmId));
                    if (ItmId.equalsIgnoreCase(prevItmId)) {
                        return "N";
                    }
                } else {

                }
            }
            rwitr.closeRowSetIterator();
            //svcitm.executeQuery();
        }
        return "Y";
    }

    public String asgnmentToAllExec() {
        Row curr = this.getSvcSc1().getCurrentRow();
        ViewObjectImpl itmvo = this.getSvcScItm2();
        ViewObjectImpl asgnvo = this.getSvcScSvcAsgn3();
        Row curritm = this.getSvcScItm2().getCurrentRow();
        if (curr != null && curritm.getAttribute("TransRqmtArea") != null &&
            curritm.getAttribute("TransEmpCode") != null) {
            /* String docId=curr.getAttribute("DocId").toString();
               RowQualifier rq=new RowQualifier(itmvo);
               rq.setWhereClause("CldId='"+cldId+"' and SlocId="+slocId+" and OrgId='"+orgId+"' and HoOrgId='"+hoOrgId+"' and DocId= '"+docId+"'");
               Row [] rr=itmvo.getFilteredRows(rq);
            */


            this.getDBTransaction().postChanges();
            /**becoz  other viewlink for item contains null values*/
            Integer rqmtId = Integer.parseInt(curritm.getAttribute("TransRqmtArea").toString());
            Integer empcode = Integer.parseInt(curritm.getAttribute("TransEmpCode").toString());
           
            Adflog.info("-------------inside not null -----"+rqmtId+ " "+empcode);
            RowSetIterator rowItr = itmvo.createRowSetIterator(null);
            while (rowItr.hasNext()) {
                Row r = rowItr.next();
                String itmId = r.getAttribute("ItmId").toString();
                String docId = r.getAttribute("DocId").toString();
                oracle.jbo.domain.Timestamp prdFrom = (oracle.jbo.domain.Timestamp)r.getAttribute("PrdFm");
                Adflog.info("for the item -------- > " + itmId + " rqmt id is  " + rqmtId + "  empcode " + empcode);
                RowQualifier rq1 = new RowQualifier(asgnvo);
                rq1.setWhereClause("CldId= '" + cldId + "' and SlocId= " + slocId + " and OrgId= '" + orgId +
                                   "' and HoOrgId= '" + hoOrgId + "' and DocId='" + docId + "' and ItmId='" + itmId +
                                   "' and RqmtAreaId=" + rqmtId + " and EmpCode=" + empcode );//+" and PrdFm = '"+prdFrom+"'"
                Row[] rr2 = asgnvo.getFilteredRows(rq1);
                Adflog.info("rowfound in executive  " + rr2.length+ "   ");
                if (rr2.length > 0) {
                    Adflog.info("record already exists");
                    /** skip for duplicate record */
                } else {
                    Adflog.info("going to insert record in different ");
                    Row asgnRw = asgnvo.createRow();
                    asgnRw.setAttribute("CldId", cldId);
                    asgnRw.setAttribute("SlocId", slocId);
                    asgnRw.setAttribute("HoOrgId", hoOrgId);
                    asgnRw.setAttribute("OrgId", orgId);
                    asgnRw.setAttribute("ItmId", itmId);
                    asgnRw.setAttribute("DocId", docId);
                    asgnRw.setAttribute("OrgIdAsgn", orgId);
                    asgnRw.setAttribute("RqmtAreaId", rqmtId);
                    asgnRw.setAttribute("EmpCode", empcode);
                    Adflog.info("before insert in vo ");
                    asgnvo.insertRow(asgnRw);
                    itmvo.getCurrentRow().setAttribute("TransRqmtArea", null);
                    itmvo.getCurrentRow().setAttribute("TransEmpCode", null);
                    itmvo.getCurrentRow().setAttribute("TransEmpNm", null);
                }
            }
            rowItr.closeRowSetIterator();
            asgnvo.executeQuery();
           // this.getSvcScItm2().executeQuery();
            this.getSvcScSvcAsgn3().executeQuery();
        }
        return null;
    }

    public String deleteRecord() {
        ViewObjectImpl asgnvo = this.getSvcScSvcAsgn1();
        // ViewObjectImpl curAsgnvo=this.getSvcScSvcAsgn3();
        Row currItm = this.getSvcScItm2().getCurrentRow();
        String docId = currItm.getAttribute("DocId").toString();
        String itmId = currItm.getAttribute("ItmId").toString();

        RowQualifier rq1 = new RowQualifier(asgnvo);
        rq1.setWhereClause("CldId= '" + cldId + "' and SlocId= " + slocId + " and OrgId= '" + orgId +
                           "' and HoOrgId= '" + hoOrgId + "' and DocId='" + docId + "' and ItmId='" + itmId + "'");
        Row[] rr = asgnvo.getFilteredRows(rq1);
        Adflog.info("row found in executive  " + rr.length);

        if (rr.length > 0) {
            for (Row r : rr) {
                Adflog.info("current row is " + r.getAttribute("EmpCode"));
                r.remove();
            }
        }
        asgnvo.executeQuery();
        //  curAsgnvo.executeQuery();
        this.getDBTransaction().postChanges();
        return null;
    }


    /** code to set install date to all items */
    public String installDateToAll() {
        //   ViewObjectImpl scvo = this.getSvcSc1();
        ViewObjectImpl itmvo = this.getSvcScItm2();
        Row currItm = this.getSvcScItm2().getCurrentRow();
        if (currItm.getAttribute("InstlDt") != null) {
            RowSetIterator itr = itmvo.createRowSetIterator(null);
            while (itr.hasNext()) {
                Row r = itr.next();
                String svcItmFlg =
                    r.getAttribute("SvcItmFlg").toString(); //no install date is required for service items
                Adflog.info(" service item flag value is --- " + svcItmFlg);
                if ("N".equalsIgnoreCase(svcItmFlg)) {
                    if (r.getAttribute("InstlDt") != null) {

                    } else {
                        r.setAttribute("InstlDt", currItm.getAttribute("InstlDt"));
                    }
                }
            }
        }
        return null;
    }

    public String insrtLocation() {
        Row curr = this.getSvcSc1().getCurrentRow();
        if (curr.getAttribute("TransEoLocId") != null && curr.getAttribute("EoId") != null) {
            Row r = this.getSvcScLoc().createRow();
            r.setAttribute("EoId", curr.getAttribute("EoId"));
            r.setAttribute("LocAddsId", curr.getAttribute("TransEoLocId"));
            r.setAttribute("StrtDt", curr.getAttribute("TransLocStrtDt"));
            r.setAttribute("EndDt", curr.getAttribute("TransLocToDt"));
            r.setAttribute("Remarks", curr.getAttribute("TransRmksLoc"));
            getSvcScLoc().insertRow(r);
            this.getDBTransaction().postChanges();
        }
        curr.setAttribute("TransEoLocId", null);
        curr.setAttribute("TransEoLoc", null);
        curr.setAttribute("TransLocStrtDt", null);
        curr.setAttribute("TransLocToDt", null);
        curr.setAttribute("TransRmksLoc", null);


        return null;
    }

    public String dplctLocation() {
        Row curr = this.getSvcSc1().getCurrentRow();
        ViewObjectImpl locvo = getSvcScLoc();
        if (curr.getAttribute("TransEoLocId") != null && curr.getAttribute("EoId") != null) {
            RowQualifier rq = new RowQualifier(locvo);
            rq.setWhereClause("CldId='" + cldId + "' and SlocId=" + slocId + " and OrgId='" + orgId +
                              "' and HoOrgId='" + hoOrgId + "' and LocAddsId='" + curr.getAttribute("TransEoLocId") +
                              "' and EoId=" + curr.getAttribute("EoId"));
            Row[] rr = locvo.getFilteredRows(rq);
            if (rr.length > 0) {
                return "N";
            }
        }
        return "Y";
    }

    public String insrtItemLocation() {
        Row curr = this.getSvcScItm2().getCurrentRow();
        if (curr.getAttribute("TransLocId") != null && curr.getAttribute("TransLocAddsId") != null) {
            Adflog.info("going to insert data in item location ");
            Row r = this.getSvcScItmLoc().createRow();
            r.setAttribute("LocAddsId", curr.getAttribute("TransLocId"));
            r.setAttribute("ItmAddsId", curr.getAttribute("TransLocAddsId")); //for item address insertion
            r.setAttribute("StrtDt", curr.getAttribute("TransStartDt"));
            r.setAttribute("EndDt", curr.getAttribute("TransToDt"));
            r.setAttribute("LocDesc", curr.getAttribute("TransLocDesc"));
            r.setAttribute("ItmQty", curr.getAttribute("ItmQty"));
            getSvcScItmLoc().insertRow(r);
        }
        curr.setAttribute("TransLocId", null);
        curr.setAttribute("TransLocAddsId", null);
        curr.setAttribute("TransStartDt", null);
        curr.setAttribute("TransToDt", null);
        curr.setAttribute("TransLocDesc", null);

        return null;
    }

    public String duplicateItmAddsCheck() {
        Row curr = this.getSvcScItm2().getCurrentRow();
        ViewObjectImpl locvo = getSvcScItmLoc();
        if (curr.getAttribute("TransLocId") != null && curr.getAttribute("TransLocAddsId") != null) {
            RowQualifier rq = new RowQualifier(locvo);
            rq.setWhereClause("CldId='" + cldId + "' and SlocId=" + slocId + " and OrgId='" + orgId +
                              "' and HoOrgId='" + hoOrgId + "' and LocAddsId='" + curr.getAttribute("TransLocId") +
                              "' and ItmAddsId='" + curr.getAttribute("TransLocAddsId") + "' and ItmId='" +
                              curr.getAttribute("ItmId") + "'");
            Row[] rr = locvo.getFilteredRows(rq);
            Adflog.info("item data " + rr.length);
            if (rr.length > 0) {
                return "N";
            }
        }
        return "Y";
    }

    public File generateFile() {
        File PdfFile = null;
        try {
            String docId = this.getSvcSc1().getCurrentRow().getAttribute("DocId").toString();
            String cntrctNo = this.getSvcSc1().getCurrentRow().getAttribute("ScNo").toString();
            Integer fyId = Integer.parseInt(this.getSvcSc1().getCurrentRow().getAttribute("FyId").toString());
            Connection conn = null;
            Context ctx = new InitialContext();
            DataSource ds = (DataSource) ctx.lookup("java:comp/env/jdbc/SVCDS");
            conn = ds.getConnection();
            PreparedStatement ps = conn.prepareStatement("select distinct srvr_Loc_As_Rpt_Path from APP.App$Servr$Loc");

            ResultSet rs = ps.executeQuery();
            String filepath = null;
            while (rs.next()) {
                filepath = rs.getString(1);
            }
            filepath = filepath + "SVC/";
            System.out.println("path is " + filepath);
            JasperReport report = (JasperReport) JRLoader.loadObject(filepath + "SVC_ServiceContract.jasper");
            //InputStream input = new FileInputStream(new File(filepath + "SVC_ServiceContract.jasper"));
            //JasperDesign design = JRXmlLoader.load(input);
            // JasperReport report = JasperCompileManager.compileReport(design);

            Map<String, Object> parameters = new HashMap<String, Object>();
            System.out.println("--" + cldId + "----" + orgId + "------" + hoOrgId);
            parameters.put("Org_Id", orgId);
            parameters.put("Cld_Id", cldId);
            parameters.put("Sloc_Id", slocId);
            parameters.put("Ho_Org_Id", hoOrgId);
            parameters.put("SC_Doc_Id", docId);
            parameters.put("Path", filepath);
            System.out.println("doc----" + docId);
            JasperPrint jasperPrint = null;
            jasperPrint = JasperFillManager.fillReport(report, parameters, conn);
            // String fileName = cntrctNo + ".pdf";
            jasperPrint = JasperFillManager.fillReport(report, parameters, conn);

            File pdfFile = new File(filepath + cntrctNo + "_" + fyId + ".pdf");
            Adflog.info("pdf file value is -------- " + pdfFile);
            JRExporter exporter = null;
            if (true) {
                exporter = new JRPdfExporter();
                exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
                exporter.setParameter(JRExporterParameter.OUTPUT_FILE, pdfFile);
            }

            try {
                exporter.exportReport();
            } catch (JRException e) {
                throw new ServletException(e);
            } catch (Exception ex) {
                ex.printStackTrace();
            }

            finally {
                if (conn != null && rs != null) {

                    conn.close();
                    rs.close();
                }
            }
            return pdfFile;

        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return PdfFile;
    }


    public Map<String, Object> getMailDetail() {
        CallableStatement st = null;
        try {
            st =
                this.getDBTransaction().createCallableStatement("begin  app.PR_ALRT_GET_MAIL_CFG(?,?,?,?,?,?) ;end;",
                                                                0);
            st.setObject(1, null);
            st.registerOutParameter(2, Types.VARCHAR);
            st.registerOutParameter(3, Types.VARCHAR);
            st.registerOutParameter(4, Types.VARCHAR);
            st.registerOutParameter(5, Types.VARCHAR);
            st.registerOutParameter(6, Types.VARCHAR);
            st.executeUpdate();

            HashMap<String, Object> map = new HashMap<>();
            map.put("Server", st.getObject(2).toString());
            map.put("Port", st.getObject(3).toString());
            map.put("Security", st.getObject(4).toString());
            map.put("From", st.getObject(5).toString());
            map.put("Password", st.getObject(6).toString());
            map.put("To", this.getToCustomer());


            return map;
        } catch (SQLException e) {
            e.printStackTrace();
            int end = e.getMessage().indexOf("\n");
            //  throw new JboException(e.getMessage().substring(11, end));
            /*   String msg = e.getMessage();
              FacesMessage ermsg = new FacesMessage(msg);
              ermsg.setSeverity(FacesMessage.SEVERITY_ERROR);
              FacesContext.getCurrentInstance().addMessage(null, ermsg);
             throw new JboException(e);
           } */
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        return null;
    }

    public ArrayList<String> getToCustomer() {
        Row curr = this.getSvcSc1().getCurrentRow();
        ViewObjectImpl custvo = this.getLovCstmr();
        ArrayList<String> al = new ArrayList<>();
        Adflog.info("mail sent to customer id is ---- " + curr.getAttribute("EoId"));
        if (curr.getAttribute("EoId") != null) {
            custvo.setNamedWhereClauseParam("bindCldId", cldId);
            custvo.setNamedWhereClauseParam("bindOrgId", orgId);
            custvo.setNamedWhereClauseParam("bindSlocId", slocId);
            custvo.setNamedWhereClauseParam("bindHoOrgId", hoOrgId);
            custvo.executeQuery();


            RowQualifier rowQualifier = new RowQualifier(custvo);
            rowQualifier.setWhereClause("EoId =" + curr.getAttribute("EoId"));
            Row[] rows = custvo.getFilteredRows(rowQualifier);
            // Adflog.info("current email id is "+rows[0].getAttribute("EmailId"));
            if (rows.length > 0 && rows[0].getAttribute("EmailId") != null) {
                al.add(rows[0].getAttribute("EmailId").toString());
            } else {
                throw new NullPointerException("Customer Email Id not configured correctly");
            }
        }
        Adflog.info("array list ------------- mail sent " + al);
        return al;
    }

    public String setpendingQty(Number qty) {
        Row currItm = this.getSvcScItm2().getCurrentRow();
        currItm.setAttribute("PendQty", qty);
        return null;
    }

    public void setCldId(String cldId) {
        this.cldId = cldId;
    }

    public String getCldId() {
        return cldId;
    }

    public void setSlocId(Integer slocId) {
        this.slocId = slocId;
    }

    public Integer getSlocId() {
        return slocId;
    }

    public void setOrgId(String orgId) {
        this.orgId = orgId;
    }

    public String getOrgId() {
        return orgId;
    }

    public void setUsrId(Integer usrId) {
        this.usrId = usrId;
    }

    public Integer getUsrId() {
        return usrId;
    }

    public void setHoOrgId(String hoOrgId) {
        this.hoOrgId = hoOrgId;
    }

    public String getHoOrgId() {
        return hoOrgId;
    }


    /**
     * Container's getter for LovItmDesc1.
     * @return LovItmDesc1
     */
    public ViewObjectImpl getLovItmDesc() {
        return (ViewObjectImpl) findViewObject("LovItmDesc");
    }

    /**
     * Container's getter for SvcScLoc1.
     * @return SvcScLoc1
     */
    public ViewObjectImpl getSvcScLoc() {
        return (ViewObjectImpl) findViewObject("SvcScLoc");
    }

    /**
     * Container's getter for SvcScLocVL1.
     * @return SvcScLocVL1
     */
    public ViewLinkImpl getSvcScLocVL1() {
        return (ViewLinkImpl) findViewLink("SvcScLocVL1");
    }

    /**
     * Container's getter for LovAppEoAdds1.
     * @return LovAppEoAdds1
     */
    public ViewObjectImpl getLovAppEoAdds() {
        return (ViewObjectImpl) findViewObject("LovAppEoAdds");
    }

    /**
     * Container's getter for SvcScItmLoc1.
     * @return SvcScItmLoc1
     */
    public ViewObjectImpl getSvcScItmLoc() {
        return (ViewObjectImpl) findViewObject("SvcScItmLoc");
    }

    /**
     * Container's getter for ViewLinkVL1.
     * @return ViewLinkVL1
     */
    public ViewLinkImpl getViewLinkVL1() {
        return (ViewLinkImpl) findViewLink("ViewLinkVL1");
    }

    public String selectAllAdds(String check) {
        Row svcSc = this.getSvcSc1().getCurrentRow();
        if (svcSc.getAttribute("EoId") != null) {
            ViewObjectImpl eoAdds = this.getLovAppEoAdds();
            eoAdds.setNamedWhereClauseParam("bindCldId", cldId);
            eoAdds.setNamedWhereClauseParam("bindEoId", (Integer) svcSc.getAttribute("EoId"));
            eoAdds.setNamedWhereClauseParam("bindHoOrgId", hoOrgId);
            eoAdds.setNamedWhereClauseParam("bindOrgId", orgId);
            eoAdds.setNamedWhereClauseParam("bindAddsId", null);
            eoAdds.setNamedWhereClauseParam("bindSlocId", slocId);
            eoAdds.executeQuery();
            Adflog.info("total value is " + cldId + " entity name  " + svcSc.getAttribute("EoId") + " hoOrgId " +
                        hoOrgId + " sloc " + slocId + " orgId " + orgId);
            if (check.equalsIgnoreCase("Y")) {
                RowSetIterator rowItr = eoAdds.createRowSetIterator(null);
                while (rowItr.hasNext()) {
                    Row r = rowItr.next();
                    r.setAttribute("TransAddsValue", "Y");
                    Adflog.info("current address value is " + r.getAttribute("TransAddsValue"));
                }
                rowItr.closeRowSetIterator();
            } else if ("N".equalsIgnoreCase(check)) {
                RowSetIterator rowItr = eoAdds.createRowSetIterator(null);
                while (rowItr.hasNext()) {
                    Row r = rowItr.next();
                    r.setAttribute("TransAddsValue", "N");
                    Adflog.info("current address value is " + r.getAttribute("TransAddsValue"));
                }
                rowItr.closeRowSetIterator();
            }

        }
        return null;
    }

    public void selectAllCstmrAdds(String check) {
        ViewObjectImpl custvo = this.getSvcScLoc();
        if (check.equalsIgnoreCase("Y")) {
            RowSetIterator rowItr = custvo.createRowSetIterator(null);
            while (rowItr.hasNext()) {
                Row r = rowItr.next();
                r.setAttribute("SelectAddsFlg", "Y");
                Adflog.info("current address value is " + r.getAttribute("SelectAddsFlg"));
            }
            rowItr.closeRowSetIterator();
        } else if ("N".equalsIgnoreCase(check)) {
            RowSetIterator rowItr = custvo.createRowSetIterator(null);
            while (rowItr.hasNext()) {
                Row r = rowItr.next();
                r.setAttribute("SelectAddsFlg", "N");
                Adflog.info("current address value is " + r.getAttribute("SelectAddsFlg"));
            }
            rowItr.closeRowSetIterator();
        }

    }

    public void applyAddsFileter() {
        Row svcSc = this.getSvcSc1().getCurrentRow();
        Adflog.info("lov app eo id is " + svcSc.getAttribute("EoId"));
        if (svcSc.getAttribute("EoId") != null) {
            ViewObjectImpl eoAdds = this.getLovAppEoAdds();
            eoAdds.setNamedWhereClauseParam("bindCldId", cldId);
            eoAdds.setNamedWhereClauseParam("bindEoId", (Integer) svcSc.getAttribute("EoId"));
            eoAdds.setNamedWhereClauseParam("bindHoOrgId", hoOrgId);
            eoAdds.setNamedWhereClauseParam("bindOrgId", orgId);
            eoAdds.setNamedWhereClauseParam("bindAddsId", null);
            eoAdds.setNamedWhereClauseParam("bindSlocId", slocId);
            eoAdds.executeQuery();
            Adflog.info("now query is " + eoAdds.getQuery() + "CURRENT EO ID IS " + svcSc.getAttribute("EoId"));

        }
    }

    public void insertIntoSvcLoc() {
        Row svcSc = this.getSvcSc1().getCurrentRow();
        ViewObjectImpl scLoc = this.getSvcScLoc();
        if (svcSc.getAttribute("EoId") != null) {
            ViewObjectImpl eoAdds = this.getLovAppEoAdds();
            /*eoAdds.setNamedWhereClauseParam("bindCldId", cldId);
            eoAdds.setNamedWhereClauseParam("bindEoId", (Integer) svcSc.getAttribute("EoId"));
            eoAdds.setNamedWhereClauseParam("bindHoOrgId", hoOrgId);
            eoAdds.setNamedWhereClauseParam("bindOrgId", orgId);
            eoAdds.setNamedWhereClauseParam("bindAddsId", null);
            eoAdds.setNamedWhereClauseParam("bindSlocId", slocId);
            eoAdds.executeQuery(); */

            Row[] rr = eoAdds.getFilteredRows("TransAddsValue", "Y");
            Adflog.info("current adds length is " + rr.length);
            if (rr.length > 0) {
                for (Row r : rr) {
                    String addsid = (String) r.getAttribute("AddsId");

                    Row[] rr1 = scLoc.getFilteredRows("LocAddsId", addsid);
                    Adflog.info("current addid found or not " + rr1.length);
                    if (rr1.length > 0) {

                    } else {
                        Row ScRw = scLoc.createRow();
                        Adflog.info("current address is insertion " + r.getAttribute("AddsId"));
                        ScRw.setAttribute("LocAddsId", r.getAttribute("AddsId"));
                        ScRw.setAttribute("LocRefId", r.getAttribute("LocRefId"));
                        ScRw.setAttribute("StrtDt", svcSc.getAttribute("PrdFm"));
                        ScRw.setAttribute("EndDt", svcSc.getAttribute("PrdTo"));
                        scLoc.insertRow(ScRw);

                    }
                }
            }
        }

    }

    /**
     * Container's getter for SvcScItmSr1.
     * @return SvcScItmSr1
     */
    public ViewObjectImpl getSvcScItmSr1() {
        return (ViewObjectImpl) findViewObject("SvcScItmSr1");
    }

    /**
     * Container's getter for SvcScItmSrVL1.
     * @return SvcScItmSrVL1
     */
    public ViewLinkImpl getSvcScItmSrVL1() {
        return (ViewLinkImpl) findViewLink("SvcScItmSrVL1");
    }

    public String isSerialNoValid(String SrNo){
        Row itmRw=this.getSvcScItm2().getCurrentRow();
        //Number zero=new Number(0);
        Number numQty=(Number)itmRw.getAttribute("ItmQty");
        String docId = itmRw.getAttribute("DocId").toString();
        String itmId = itmRw.getAttribute("ItmId").toString();
        Timestamp fmTm = (Timestamp) itmRw.getAttribute("PrdFm");
        Adflog.info("Total="+numQty);      
        ViewObjectImpl voSr = this.getSvcScItmSr1();
        RowQualifier rqSr = new RowQualifier(voSr);
        //rqSr.setWhereClause("CldId = '" + getCldId() + "' and OrgId = '"+ getOrgId() + "' and HoOrgId = '" + getHoOrgId()+"' and DocId = '"+ docId +"' and  ItmId = '"+ itmId +"' "  );
        
        rqSr.setWhereClause("CldId = '" + getCldId() + "' and OrgId = '"+ getOrgId() + "' and HoOrgId = '" + getHoOrgId()+"' and DocId = '"+ docId +"' and  ItmId = '"+ itmId
                            +"' and PrdFm = '" +fmTm+"'" );
        Row[] rsr = voSr.getFilteredRows(rqSr);
        
        
        ViewObjectImpl voSrD = this.getSvcScItmSr2();
        RowQualifier rqSrD = new RowQualifier(voSrD);
        rqSrD.setWhereClause("CldId = '" + getCldId() + "' and OrgId = '"+ getOrgId() + "' and HoOrgId = '" + getHoOrgId()+"' and DocId = '"+ docId +"' and  ItmId = '"+ itmId
                            +"' and SrNo = '"+SrNo+"'"  );
        Row[] rsrD = voSr.getFilteredRows(rqSrD);
        
         Integer count = (Integer)rsr.length;
        Adflog.info(numQty.intValue()+"--COUNT------"+count+"  dup count "+rsrD.length+" exp "+rqSrD.getExprStr());
        System.out.println("-----------inside iserialNo---------------------"+count);
        if(numQty.compareTo(new Number(0))==0){
            return "O";
        }else if(count+1 > numQty.intValue()){
           return "I";
        }else if(count <= numQty.intValue()){
        Adflog.info("-------------les------------");
        if(rsrD.length > 0){
            return "D";   
        }else{
            return "Y";
        }
    }else return "N";
    }

    
    public void insertItmSrNo(String srNo){
   ViewObjectImpl voSr = this.getSvcScItmSr1();
    //voSr.executeQuery();
        Row cr = voSr.createRow();
        cr.setAttribute("HoOrgId", getHoOrgId());
        cr.setAttribute("SrNo", srNo);
        cr.setAttribute("ItmQty", new Number(1));
        voSr.insertRow(cr);
        Adflog.info("------------------inside insert to sr--"+srNo);
    
    }
    
    public String checkQtyBfrSave(){
        ViewObjectImpl vo = this.getSvcScItmSr1();
        Row itmRw=this.getSvcScItm1().getCurrentRow();
        String docId = itmRw.getAttribute("DocId").toString();
        String retrn = "L";
        
        RowQualifier rq = new RowQualifier(this.getSvcScItm1());
        rq.setWhereClause("CldId = '" + getCldId() + "' and OrgId = '"+ getOrgId() + "' and HoOrgId = '" + getHoOrgId()+"' and DocId = '"+ docId +"' and TransItmSerialFlg = 'Y'");
        
        Row[] rr = this.getSvcScItm1().getFilteredRows(rq);
        Adflog.info("---length befor save---"+rr.length+"--"+rq.getExprStr());
        if(rr.length>0){
            retrn = this.isSerialNoValid("").toString();
            Adflog.info("------return value before saved.----"+retrn);
            return retrn;
        }else 
            return retrn;
    }

    /**
     * Container's getter for SvcScItmSr2.
     * @return SvcScItmSr2
     */
    public ViewObjectImpl getSvcScItmSr2() {
        return (ViewObjectImpl) findViewObject("SvcScItmSr2");
    }
}

