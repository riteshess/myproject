package bdganalysisapp.model.views;

import bdganalysisapp.model.modules.BdgAnalysisAppAMImpl;

import oracle.jbo.RowSet;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Jan 17 10:07:19 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DualForDataAnalysisVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        Selectobjects0,
        ConstValue,
        OperationVal,
        Operation,
        SelectCrt,
        ConstValueDisp,
        LovOperationVO1;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int SELECTOBJECTS0 = AttributesEnum.Selectobjects0.index();
    public static final int CONSTVALUE = AttributesEnum.ConstValue.index();
    public static final int OPERATIONVAL = AttributesEnum.OperationVal.index();
    public static final int OPERATION = AttributesEnum.Operation.index();
    public static final int SELECTCRT = AttributesEnum.SelectCrt.index();
    public static final int CONSTVALUEDISP = AttributesEnum.ConstValueDisp.index();
    public static final int LOVOPERATIONVO1 = AttributesEnum.LovOperationVO1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public DualForDataAnalysisVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute Selectobjects0.
     * @return the Selectobjects0
     */
    public String getSelectobjects0() {
        return (String) getAttributeInternal(SELECTOBJECTS0);
    }

    /**
     * Gets the attribute value for the calculated attribute ConstValue.
     * @return the ConstValue
     */
    public Number getConstValue() {

        BdgAnalysisAppAMImpl am = (BdgAnalysisAppAMImpl) this.getApplicationModule();
        Number constVal = new Number(0);
        if (am.getBdgOrgSumm().getCurrentRow() != null &&
            am.getBdgOrgSumm().getCurrentRow().getAttribute("BudgAmt") != null)
            constVal = (Number) am.getBdgOrgSumm().getCurrentRow().getAttribute("BudgAmt");
        return constVal;
        //            return (Number) getAttributeInternal(CONSTVALUE);

    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ConstValue.
     * @param value value to set the  ConstValue
     */
    public void setConstValue(Number value) {
        setAttributeInternal(CONSTVALUE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute OperationVal.
     * @return the OperationVal
     */
    public Number getOperationVal() {
        return (Number) getAttributeInternal(OPERATIONVAL);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute OperationVal.
     * @param value value to set the  OperationVal
     */
    public void setOperationVal(Number value) {
        setAttributeInternal(OPERATIONVAL, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Operation.
     * @return the Operation
     */
    public String getOperation() {
        if (getAttributeInternal(OPERATION) != null)
            return (String) getAttributeInternal(OPERATION);
        else
            return "A";
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Operation.
     * @param value value to set the  Operation
     */
    public void setOperation(String value) {
        setAttributeInternal(OPERATION, value);
    }

    /**
     * Gets the attribute value for the calculated attribute SelectCrt.
     * @return the SelectCrt
     */
    public String getSelectCrt() {
        if (getAttributeInternal(SELECTCRT) != null)
            return (String) getAttributeInternal(SELECTCRT);
        else
            return "Selected";
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute SelectCrt.
     * @param value value to set the  SelectCrt
     */
    public void setSelectCrt(String value) {
        setAttributeInternal(SELECTCRT, value);
    }


    /**
     * Gets the attribute value for the calculated attribute ConstValueDisp.
     * @return the ConstValueDisp
     */
    public Number getConstValueDisp() {
        return convertNumberNotation(this.getConstValue());
        // return (Number) getAttributeInternal(CONSTVALUEDISP);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ConstValueDisp.
     * @param value value to set the  ConstValueDisp
     */
    public void setConstValueDisp(Number value) {
        setAttributeInternal(CONSTVALUEDISP, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovOperationVO1.
     */
    public RowSet getLovOperationVO1() {
        return (RowSet) getAttributeInternal(LOVOPERATIONVO1);
    }


    public Number convertNumberNotation(Number amt) {
        BdgAnalysisAppAMImpl amImpl = (BdgAnalysisAppAMImpl) this.getApplicationModule();
        Number notation = new Number(1);
        Number newAmt = new Number(0);
        if (amImpl.getDualForSearchParam() != null)
            if (amImpl.getDualForSearchParam().getCurrentRow() != null)
                if (amImpl.getDualForSearchParam().getCurrentRow().getAttribute("TransAmtNotationId") != null)
                    notation =
                        (Number) amImpl.getDualForSearchParam().getCurrentRow().getAttribute("TransAmtNotationId");
        if (amt != null)
            newAmt = amt;
        return newAmt.divide(notation);
    }
}

