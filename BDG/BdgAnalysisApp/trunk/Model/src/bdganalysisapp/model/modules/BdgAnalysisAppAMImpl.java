package bdganalysisapp.model.modules;

import bdganalysisapp.model.modules.common.BdgAnalysisAppAM;
import bdganalysisapp.model.views.BdgAnalysisHierarchyVwVOImpl;
import bdganalysisapp.model.views.BdgOrgSummVOImpl;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.apache.myfaces.trinidad.context.RequestContext;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Jan 16 18:44:07 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class BdgAnalysisAppAMImpl extends ApplicationModuleImpl implements BdgAnalysisAppAM {
    /**
     * This is the default constructor (do not remove).
     */
    public BdgAnalysisAppAMImpl() {
    }


    public void executeVoOnLoad(String orgId, String cldId, Integer slocId, String hoOrgId, Integer usrId) {
        System.out.println("Inside budget analysis amimpl first method");
        System.out.println("Value of Global Param1=" + resolvElOther("#{pageFlowScope.APP_USR_EMP_CODE}"));
        System.out.println("Value of Global Param2=" + resolvElOther("#{pageFlowScope.P_ANALYSIS_TYPE}"));
        System.out.println("Value of Global Param3=" + resolvElOther("#{pageFlowScope.P_DOC_STRUCT}"));
        System.out.println("Value of Global Param4=" + resolvElOther("#{pageFlowScope.P_DOC_STRUCT_VAL}"));
        System.out.println("Value of Global Param5=" + resolvElOther("#{pageFlowScope.P_IS_CALL_FRM_OTH}"));
        System.out.println("Value of Global Param6=" + resolvElOther("#{pageFlowScope.P_START_DT}"));
        System.out.println("Value of Global Param7=" + resolvElOther("#{pageFlowScope.P_END_DT}"));
        System.out.println("Value of Global Param8=" + resolvElOther("#{pageFlowScope.P_STRUCT_DPND_VAL}"));

        this.getLovUsrIdToEmpCodeMap().setNamedWhereClauseParam("cldIdBind", cldId);
        this.getLovUsrIdToEmpCodeMap().setNamedWhereClauseParam("slocIdBind", slocId);
        this.getLovUsrIdToEmpCodeMap().setNamedWhereClauseParam("hoOrgIdBind", hoOrgId);
        this.getLovUsrIdToEmpCodeMap().setNamedWhereClauseParam("orgIdBind", orgId);
        this.getLovUsrIdToEmpCodeMap().executeQuery();
        Row[] fr = this.getLovUsrIdToEmpCodeMap().getFilteredRows("UsrId", usrId);
        Integer empCode = null;
        if (fr.length > 0) {
            empCode = (Integer) fr[0].getAttribute("EmpCode");
            System.out.println("empCode Login =" + empCode);
            RequestContext.getCurrentInstance().getPageFlowScope().put("APP_USR_EMP_CODE", empCode);
        }

        this.getBdgBudgetAnalysis().setNamedWhereClauseParam("cldIdBindVar", cldId);
        this.getBdgBudgetAnalysis().setNamedWhereClauseParam("slocIdBindVar", slocId);
        this.getBdgBudgetAnalysis().setNamedWhereClauseParam("hoOrgIdBindVar", hoOrgId);
        this.getBdgBudgetAnalysis().setNamedWhereClauseParam("orgIdBindVar", orgId);
        this.getBdgBudgetAnalysis().executeQuery();

        this.getBdgOrgSumm().setNamedWhereClauseParam("cldIdBindVar", cldId);
        this.getBdgOrgSumm().setNamedWhereClauseParam("slocIdBindVar", slocId);
        this.getBdgOrgSumm().setNamedWhereClauseParam("hoOrgIdBindVar", hoOrgId);
        this.getBdgOrgSumm().setNamedWhereClauseParam("orgIdBindVar", orgId);
        this.getBdgOrgSumm().setNamedWhereClauseParam("stDtBindVar", null);
        this.getBdgOrgSumm().setNamedWhereClauseParam("endDtBindVar", null);
        this.getBdgOrgSumm().setNamedWhereClauseParam("eoIdBindVar", -1);
        this.getBdgOrgSumm().executeQuery();

        this.getBdgAnalysisHierarchyVwSelf().setNamedWhereClauseParam("cldIdBindVar", cldId);
        this.getBdgAnalysisHierarchyVwSelf().setNamedWhereClauseParam("slocIdBindVar", slocId);
        this.getBdgAnalysisHierarchyVwSelf().setNamedWhereClauseParam("hoOrgIdBindVar", hoOrgId);
        this.getBdgAnalysisHierarchyVwSelf().setNamedWhereClauseParam("orgIdBindVar", orgId);
        this.getBdgAnalysisHierarchyVwSelf().executeQuery();

        this.getBdgAnalysisHierarchyVwChild().setNamedWhereClauseParam("cldIdBindVar", cldId);
        this.getBdgAnalysisHierarchyVwChild().setNamedWhereClauseParam("slocIdBindVar", slocId);
        this.getBdgAnalysisHierarchyVwChild().setNamedWhereClauseParam("hoOrgIdBindVar", hoOrgId);
        this.getBdgAnalysisHierarchyVwChild().setNamedWhereClauseParam("orgIdBindVar", orgId);
        this.getBdgAnalysisHierarchyVwChild().executeQuery();

        this.getBdgAnalysisHierarchyVwHead().setNamedWhereClauseParam("cldIdBindVar", cldId);
        this.getBdgAnalysisHierarchyVwHead().setNamedWhereClauseParam("slocIdBindVar", slocId);
        this.getBdgAnalysisHierarchyVwHead().setNamedWhereClauseParam("hoOrgIdBindVar", hoOrgId);
        this.getBdgAnalysisHierarchyVwHead().setNamedWhereClauseParam("orgIdBindVar", orgId);
        this.getBdgAnalysisHierarchyVwHead().executeQuery();

        /*  this.getBdgEoBudget().setNamedWhereClauseParam("docIdBind", "-1");
        this.getBdgEoBudget().executeQuery(); */

        this.getBdgOrgStructLvl().setNamedWhereClauseParam("orgIdBindVar", orgId);
        this.getBdgOrgStructLvl().executeQuery();
        System.out.println("Exit from amimpl method");
    }

    public void executeVoOnSearch(Timestamp stDt, Timestamp endDt, Integer eoId) {
        this.getBdgOrgSumm().setNamedWhereClauseParam("stDtBindVar", stDt);
        this.getBdgOrgSumm().setNamedWhereClauseParam("endDtBindVar", endDt);
        this.getBdgOrgSumm().setNamedWhereClauseParam("eoIdBindVar", eoId);

        Row currentRow = this.getDualForSearchParam().getCurrentRow();
        //System.out.println("Currentrow " + currentRow);
        if (currentRow != null) {
            RequestContext.getCurrentInstance().getPageFlowScope().put("P_ANALYSIS_TYPE",
                                                                       currentRow.getAttribute("BdgType"));
            //System.out.println("Currentrow value " + currentRow.getAttribute("BdgType"));
            this.getBdgOrgSumm().setNamedWhereClauseParam("bdgAnalysisType", currentRow.getAttribute("BdgType"));
        }

        this.getBdgOrgSumm().executeQuery();
        //System.out.println("Rows is " + this.getBdgOrgSumm().getAllRowsInRange().length);
    }


    public void executeVoOnTabDiscloure(Integer structId, String structValDepd, String structVal) {
        this.getDualForSearchParam().getCurrentRow().setAttribute("TransStructId", structId);
        this.getBdgOrgSumm().setNamedWhereClauseParam("structIdBind", structId);
        this.getBdgOrgSumm().setNamedWhereClauseParam("structDepdBindVar", structValDepd);
        this.getBdgOrgSumm().setNamedWhereClauseParam("structValBind", structVal);
        this.getBdgOrgSumm().executeQuery();
    }

    public void processForDataAnalysis(Integer structId, String structVal) {
        //Check if Operation Value is Greater than Zero or not.
        //if Operation/Adjustment Value is >0 then check if Any Adjustment for the selected row exist or not.
        //if exist then update record else insert new record.
        Number opVal = new Number(0);
        String opCh = null;
        String crt = null;
        String cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        if (this.getDualForDataAnalysis().getCurrentRow().getAttribute("OperationVal") != null &&
            this.getDualForDataAnalysis().getCurrentRow().getAttribute("Operation") != null &&
            this.getDualForDataAnalysis().getCurrentRow().getAttribute("SelectCrt") != null) {
            opCh = (String) this.getDualForDataAnalysis().getCurrentRow().getAttribute("Operation");
            opVal = (Number) this.getDualForDataAnalysis().getCurrentRow().getAttribute("OperationVal");
            crt = (String) this.getDualForDataAnalysis().getCurrentRow().getAttribute("SelectCrt");
            Row[] rows = null;
            if (crt.equals("Selected")) {
                Row orgSummRow = null;
                orgSummRow = this.getBdgOrgSumm().getCurrentRow();
                updtInsertAnalysisRow(orgSummRow, opCh, opVal, structId, structVal);
            } else if (crt.equals("All")) {
                rows = this.getBdgOrgSumm().getFilteredRows("CldId", cldId);
                for (Row orgSummRow : rows) {
                    updtInsertAnalysisRow(orgSummRow, opCh, opVal, structId, structVal);
                }
            }
        }
    }


    private void updtInsertAnalysisRow(Row orgSummRow, String opCh, Number opVal, Integer structId, String structVal) {
        Row anaRow = null;
        RowQualifier rq = new RowQualifier(this.getBdgBudgetAnalysis());
        rq.setWhereClause("PrdStartDt='" + orgSummRow.getAttribute("PrdStartDt") + "' and PrdEndDt='" +
                          orgSummRow.getAttribute("PrdEndDt") + "' and StructId=" +
                          orgSummRow.getAttribute("StructId") + " and StructVal='" +
                          orgSummRow.getAttribute("StructVal") + "'");
        Row fr[] = this.getBdgBudgetAnalysis().getFilteredRows(rq);
        Number propAmt = new Number(0);
        Number notation = new Number(1);
        if (this.getDualForSearchParam().getCurrentRow().getAttribute("TransAmtNotationId") != null)
            notation = (Number) this.getDualForSearchParam().getCurrentRow().getAttribute("TransAmtNotationId");

        if (fr.length > 0) {
            anaRow = fr[0];
            propAmt = (Number) anaRow.getAttribute("PropAmt");
        } else {
            anaRow = this.getBdgBudgetAnalysis().createRow();
            anaRow.setAttribute("CldId", orgSummRow.getAttribute("CldId"));
            anaRow.setAttribute("SlocId", orgSummRow.getAttribute("SlocId"));
            anaRow.setAttribute("HoOrgId", orgSummRow.getAttribute("OrgId"));
            anaRow.setAttribute("OrgId", orgSummRow.getAttribute("HoOrgId"));
            anaRow.setAttribute("FyId", 7); //orgSummRow.getAttribute("FyId")
            anaRow.setAttribute("StartDt", this.getDualForSearchParam().getCurrentRow().getAttribute("StrtDt"));
            anaRow.setAttribute("EndDt", this.getDualForSearchParam().getCurrentRow().getAttribute("EndDt"));
            anaRow.setAttribute("PrdStartDt", orgSummRow.getAttribute("PrdStartDt"));
            anaRow.setAttribute("PrdEndDt", orgSummRow.getAttribute("PrdEndDt"));
            anaRow.setAttribute("StructId", orgSummRow.getAttribute("StructId"));
            anaRow.setAttribute("StructVal", orgSummRow.getAttribute("StructVal"));
            anaRow.setAttribute("BudgAmt", orgSummRow.getAttribute("BudgAmt"));
            anaRow.setAttribute("PrevAmt", orgSummRow.getAttribute("PrvBudgAmt"));
            anaRow.setAttribute("PropAmt", new Number(0));
            this.getBdgBudgetAnalysis().insertRow(anaRow);
            // anaRow.setAttribute("CurrIdSp", orgSummRow.getAttribute("BudgAmt"));
            // anaRow.setAttribute("CurrConvFctr", orgSummRow.getAttribute("BudgAmt"));
            // anaRow.setAttribute("DocId", orgSummRow.getAttribute("BudgAmt"));
            // anaRow.setAttribute("StructOrgId", orgSummRow.getAttribute("OrgId"));
            //  anaRow.setAttribute("StructRegionId", 0);
            // anaRow.setAttribute("StructEoId", 0);
            propAmt = (Number) orgSummRow.getAttribute("BudgAmt");
        }

        switch (opCh) {
        case "A":
            anaRow.setAttribute("PropAmt", propAmt.add(opVal.multiply(notation)));
            break;
        case "S":
            anaRow.setAttribute("PropAmt", propAmt.subtract(opVal.multiply(notation)));
            break;
        case "M":
            anaRow.setAttribute("PropAmt", propAmt.multiply(opVal.multiply(notation)));
            break;
        case "D":
            anaRow.setAttribute("PropAmt", propAmt.divide(opVal.multiply(notation)));
            break;
        case "IP":
            anaRow.setAttribute("PropAmt", propAmt.add(propAmt.multiply(opVal).divide(new Number(100))));
            break;
        case "DP":
            anaRow.setAttribute("PropAmt", propAmt.subtract(propAmt.multiply(opVal).divide(new Number(100))));
            break;
        default:
        }
    }

    /**
     * Container's getter for DualForSearchParam.
     * @return DualForSearchParam
     */
    public ViewObjectImpl getDualForSearchParam() {
        return (ViewObjectImpl) findViewObject("DualForSearchParam");
    }

    /**
     * Container's getter for DualForDataAnalysis.
     * @return DualForDataAnalysis
     */
    public ViewObjectImpl getDualForDataAnalysis() {
        return (ViewObjectImpl) findViewObject("DualForDataAnalysis");
    }


    /**
     * Container's getter for BdgBudgetAnalysis1.
     * @return BdgBudgetAnalysis1
     */
    public ViewObjectImpl getBdgBudgetAnalysis() {
        return (ViewObjectImpl) findViewObject("BdgBudgetAnalysis");
    }

    /**
     *      Method to Resolve EL expression (D)
     *      D - "EL Expression"
     * */
    private String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = null;
        if (valueExp.getValue(elContext) != null)
            Message = valueExp.getValue(elContext).toString();
        else
            Message = (String) valueExp.getValue(elContext);
        return Message;
    }

    private Object resolvElOther(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        return valueExp.getValue(elContext);
    }


    /**
     * Container's getter for BdgOrgSumm1.
     * @return BdgOrgSumm1
     */
    public BdgOrgSummVOImpl getBdgOrgSumm() {
        return (BdgOrgSummVOImpl) findViewObject("BdgOrgSumm");
    }

    /**
     * Container's getter for DualForSumOfAmt1.
     * @return DualForSumOfAmt1
     */
    public ViewObjectImpl getDualForSumOfAmt() {
        return (ViewObjectImpl) findViewObject("DualForSumOfAmt");
    }

    /**
     * Container's getter for BdgOrgSumm1.
     * @return BdgOrgSumm1
     */
    public BdgOrgSummVOImpl getBdgOrgSummDtl() {
        return (BdgOrgSummVOImpl) findViewObject("BdgOrgSummDtl");
    }

    public void filterEoBdgProdDtl(Integer headEoId, Timestamp strtDt, Timestamp endDt, String regionId,
                                   Integer dtlEoId, String cldId, String hoOrgId, String orgId, Integer slocId) {
        this.getBdgEoBudgetProdDtl().setNamedWhereClauseParam("bindRegionId", regionId);
        this.getBdgEoBudgetProdDtl().setNamedWhereClauseParam("bindDtlEoId", dtlEoId);
        this.getBdgEoBudgetProdDtl().setNamedWhereClauseParam("bindCldId", cldId);
        this.getBdgEoBudgetProdDtl().setNamedWhereClauseParam("bindslocId", slocId);
        this.getBdgEoBudgetProdDtl().setNamedWhereClauseParam("bindHoOrgId", hoOrgId);
        this.getBdgEoBudgetProdDtl().setNamedWhereClauseParam("bindOrgId", orgId);
        this.getBdgEoBudgetProdDtl().setNamedWhereClauseParam("bindHeadEoId", headEoId);
        this.getBdgEoBudgetProdDtl().setNamedWhereClauseParam("bindPrdStrtDt", strtDt);
        this.getBdgEoBudgetProdDtl().setNamedWhereClauseParam("bindPrdEndDt", endDt);
        this.getBdgEoBudgetProdDtl().executeQuery();


        //this.getBdgEoBudgetProdDtl1().setNamedWhereClauseParam("bindRegionId", regionId);
        this.getBdgEoBudgetProdDtl1().setNamedWhereClauseParam("bindCldId", cldId);
        this.getBdgEoBudgetProdDtl1().setNamedWhereClauseParam("bindslocId", slocId);
        this.getBdgEoBudgetProdDtl1().setNamedWhereClauseParam("bindHoOrgId", hoOrgId);
        this.getBdgEoBudgetProdDtl1().setNamedWhereClauseParam("bindOrgId", orgId);
        this.getBdgEoBudgetProdDtl1().setNamedWhereClauseParam("bindHeadEoId", headEoId);
        this.getBdgEoBudgetProdDtl1().setNamedWhereClauseParam("bindPrdStrtDt", strtDt);
        this.getBdgEoBudgetProdDtl1().setNamedWhereClauseParam("bindPrdEndDt", endDt);
        this.getBdgEoBudgetProdDtl().executeQuery();
        /*  this.getBdgEoBudget().setNamedWhereClauseParam("docIdBind", docIdParam);
        this.getBdgEoBudget().executeQuery(); */
    }

    public void filterMtlBdgProdDtl(Integer headEoId, Timestamp strtDt, Timestamp endDt, String regionId,
                                    Integer dtlEoId, String cldId, String hoOrgId, String orgId, Integer slocId) {
        System.out.println("---------> PArameter is = head eo id " + headEoId + " stdt " + strtDt + " end dt " + endDt +
                           " dtl eoId " + dtlEoId);
        this.getBdgMtlBudgetDtlVO1().setNamedWhereClauseParam("bindRegionId", regionId);
        this.getBdgMtlBudgetDtlVO1().setNamedWhereClauseParam("bindCldId", cldId);
        this.getBdgMtlBudgetDtlVO1().setNamedWhereClauseParam("bindslocId", slocId);
        this.getBdgMtlBudgetDtlVO1().setNamedWhereClauseParam("bindHoOrgId", hoOrgId);
        this.getBdgMtlBudgetDtlVO1().setNamedWhereClauseParam("bindOrgId", orgId);
        this.getBdgMtlBudgetDtlVO1().setNamedWhereClauseParam("bindPrdStrtDt", strtDt);
        this.getBdgMtlBudgetDtlVO1().setNamedWhereClauseParam("bindHeadEoId", headEoId);
        this.getBdgMtlBudgetDtlVO1().setNamedWhereClauseParam("bindPrdEndDt", endDt);
        this.getBdgMtlBudgetDtlVO1().setNamedWhereClauseParam("bindDtlEoId", dtlEoId);
        this.getBdgMtlBudgetDtlVO1().executeQuery();


        //this.getBdgMtlBudgetDtlVO2().setNamedWhereClauseParam("bindRegionId", regionId);
        this.getBdgMtlBudgetDtlVO2().setNamedWhereClauseParam("bindCldId", cldId);
        this.getBdgMtlBudgetDtlVO2().setNamedWhereClauseParam("bindslocId", slocId);
        this.getBdgMtlBudgetDtlVO2().setNamedWhereClauseParam("bindHoOrgId", hoOrgId);
        this.getBdgMtlBudgetDtlVO2().setNamedWhereClauseParam("bindOrgId", orgId);
        this.getBdgMtlBudgetDtlVO2().setNamedWhereClauseParam("bindPrdEndDt", strtDt);
        this.getBdgMtlBudgetDtlVO2().setNamedWhereClauseParam("bindPrdStrtDt", endDt);
        this.getBdgMtlBudgetDtlVO2().setNamedWhereClauseParam("bindHeadEoId", headEoId);
        this.getBdgMtlBudgetDtlVO2().executeQuery();

        ViewObjectImpl bdgDetailsVO1 = this.getBdgMtlBdgDetailsVO1();
        bdgDetailsVO1.setNamedWhereClauseParam("BindCldId", cldId);
        bdgDetailsVO1.setNamedWhereClauseParam("BindSlocId", slocId);
        bdgDetailsVO1.setNamedWhereClauseParam("BindHoOrgId", hoOrgId);
        bdgDetailsVO1.setNamedWhereClauseParam("BindOrgId", orgId);
        bdgDetailsVO1.setNamedWhereClauseParam("BindPrdStDt", strtDt);
        bdgDetailsVO1.setNamedWhereClauseParam("BindPrdEndDt", endDt);
        bdgDetailsVO1.setNamedWhereClauseParam("BindEoId", headEoId);
        bdgDetailsVO1.executeQuery();

        Row[] allRowsInRange = bdgDetailsVO1.getAllRowsInRange();
        System.out.println("---------> length is " + allRowsInRange.length + " head eo id " + headEoId + " stdt " +
                           strtDt + " end dt " + endDt + " dtl eoId " + dtlEoId);
        if (allRowsInRange.length > 0) {
            //System.out.println("DocId is " + allRowsInRange[0].getAttribute("DocId"));
            this.getBdgMtlBudgetVO1().setNamedWhereClauseParam("docIdBind", allRowsInRange[0].getAttribute("DocId"));
            this.getBdgMtlBudgetVO1().executeQuery();
        }
    }


    public void filterFinBdgProdDtl(Integer headEoId, Timestamp strtDt, Timestamp endDt, String regionId,
                                    Integer dtlEoId, String cldId, String hoOrgId, String orgId, Integer slocId) {
        System.out.println("Parameters in amimpl are region=" + regionId + " dtlEoId=" + dtlEoId + " cldId=" + cldId);
        System.out.println("headeoid=" + headEoId + " strtdt=" + strtDt + " and EndDt=" + endDt);
        this.getBdgFinBudgetDtlVO1().setNamedWhereClauseParam("bindRegionId", regionId);
        this.getBdgFinBudgetDtlVO1().setNamedWhereClauseParam("bindDtlEoId", dtlEoId);
        this.getBdgFinBudgetDtlVO1().setNamedWhereClauseParam("bindCldId", cldId);
        this.getBdgFinBudgetDtlVO1().setNamedWhereClauseParam("bindslocId", slocId);
        this.getBdgFinBudgetDtlVO1().setNamedWhereClauseParam("bindHoOrgId", hoOrgId);
        this.getBdgFinBudgetDtlVO1().setNamedWhereClauseParam("bindOrgId", orgId);
        this.getBdgFinBudgetDtlVO1().setNamedWhereClauseParam("bindHeadEoId", headEoId);
        this.getBdgFinBudgetDtlVO1().setNamedWhereClauseParam("bindPrdStrtDt", strtDt);
        this.getBdgFinBudgetDtlVO1().setNamedWhereClauseParam("bindPrdEndDt", endDt);
        this.getBdgFinBudgetDtlVO1().executeQuery();


        this.getBdgFinBudgetDtlVO2().setNamedWhereClauseParam("bindCldId", cldId);
        this.getBdgFinBudgetDtlVO2().setNamedWhereClauseParam("bindslocId", slocId);
        this.getBdgFinBudgetDtlVO2().setNamedWhereClauseParam("bindHoOrgId", hoOrgId);
        this.getBdgFinBudgetDtlVO2().setNamedWhereClauseParam("bindOrgId", orgId);
        this.getBdgFinBudgetDtlVO2().setNamedWhereClauseParam("bindHeadEoId", headEoId);
        this.getBdgFinBudgetDtlVO2().setNamedWhereClauseParam("bindPrdEndDt", strtDt);
        this.getBdgFinBudgetDtlVO2().setNamedWhereClauseParam("bindPrdStrtDt", endDt);
        this.getBdgFinBudgetDtlVO2().executeQuery();

        ViewObjectImpl bdgDetailsVO1 = this.getBdgFinBdgDetailsVO1();
        bdgDetailsVO1.setNamedWhereClauseParam("BindCldId", cldId);
        bdgDetailsVO1.setNamedWhereClauseParam("BindSlocId", slocId);
        bdgDetailsVO1.setNamedWhereClauseParam("BindHoOrgId", hoOrgId);
        bdgDetailsVO1.setNamedWhereClauseParam("BindOrgId", orgId);
        bdgDetailsVO1.setNamedWhereClauseParam("BindPrdStDt", strtDt);
        bdgDetailsVO1.setNamedWhereClauseParam("BindPrdEndDt", endDt);
        bdgDetailsVO1.setNamedWhereClauseParam("BindEoId", headEoId);

        bdgDetailsVO1.executeQuery();

        Row[] allRowsInRange = bdgDetailsVO1.getAllRowsInRange();
        /*         System.out.println("---------> length is " + allRowsInRange.length + " head eo id " + headEoId + " stdt " +
                           strtDt + " end dt " + endDt + " dtl eoId " + dtlEoId); */
        if (allRowsInRange.length > 0) {
            //System.out.println("DocId is " + allRowsInRange[0].getAttribute("DocId"));
            this.getBdgFinBudgetVO1().setNamedWhereClauseParam("docIdBind", allRowsInRange[0].getAttribute("DocId"));
            this.getBdgFinBudgetVO1().executeQuery();
        }
    }


    /**
     * Container's getter for BdgAnalysisHierarchyVw1.
     * @return BdgAnalysisHierarchyVw1
     */
    public BdgAnalysisHierarchyVwVOImpl getBdgAnalysisHierarchyVwHead() {
        return (BdgAnalysisHierarchyVwVOImpl) findViewObject("BdgAnalysisHierarchyVwHead");
    }

    /**
     * Container's getter for BdgAnalysisHierarchyVw1.
     * @return BdgAnalysisHierarchyVw1
     */
    public BdgAnalysisHierarchyVwVOImpl getBdgAnalysisHierarchyVwChild() {
        return (BdgAnalysisHierarchyVwVOImpl) findViewObject("BdgAnalysisHierarchyVwChild");
    }

    /**
     * Container's getter for BdgAnalysisHierarchySelfVL1.
     * @return BdgAnalysisHierarchySelfVL1
     */
    public ViewLinkImpl getBdgAnalysisHierarchySelfVL1() {
        return (ViewLinkImpl) findViewLink("BdgAnalysisHierarchySelfVL1");
    }

    /**
     * Container's getter for BdgAnalysisHierarchyVw2.
     * @return BdgAnalysisHierarchyVw2
     */
    public BdgAnalysisHierarchyVwVOImpl getBdgAnalysisHierarchyVwSelf() {
        return (BdgAnalysisHierarchyVwVOImpl) findViewObject("BdgAnalysisHierarchyVwSelf");
    }

    /**
     * Container's getter for BdgAnalysisHierarchySelfVL2.
     * @return BdgAnalysisHierarchySelfVL2
     */
    public ViewLinkImpl getBdgAnalysisHierarchySelfVL2() {
        return (ViewLinkImpl) findViewLink("BdgAnalysisHierarchySelfVL2");
    }

    /**
     * Container's getter for EoBudgAmtVw1.
     * @return EoBudgAmtVw1
     */
    public ViewObjectImpl getEoBudgAmtVw() {
        return (ViewObjectImpl) findViewObject("EoBudgAmtVw");
    }


    /**
     * Container's getter for LovItmVw1.
     * @return LovItmVw1
     */
    public ViewObjectImpl getLovItmVw() {
        return (ViewObjectImpl) findViewObject("LovItmVw");
    }

    /**
     * Container's getter for LovItmUom1.
     * @return LovItmUom1
     */
    public ViewObjectImpl getLovItmUom() {
        return (ViewObjectImpl) findViewObject("LovItmUom");
    }

    /**
     * Container's getter for LovItmGrpNm1.
     * @return LovItmGrpNm1
     */
    public ViewObjectImpl getLovItmGrpNm() {
        return (ViewObjectImpl) findViewObject("LovItmGrpNm");
    }

    /**
     * Container's getter for LovCustNm1.
     * @return LovCustNm1
     */
    public ViewObjectImpl getLovCustNm() {
        return (ViewObjectImpl) findViewObject("LovCustNm");
    }

    /**
     * Container's getter for BdgEoBudget1.
     * @return BdgEoBudget1
     */
    public ViewObjectImpl getBdgEoBudget() {
        return (ViewObjectImpl) findViewObject("BdgEoBudget");
    }

    public void updtBudgetEoProdPrdAmt(Number value, String key, Number notation) {
        System.out.println("Updating Distribution Amount with Key=" + key + " and value=" + value);
        //1.... Update ItmPrdDtlAmt for Current Row
        Number price = new Number(0);
        Number qty = new Number(0);
        Number amt = new Number(0);
        Number convRate = new Number(1);
        if (key.equals("Q")) {
            qty = value;
            if (this.getBdgEoBudgetProdPrdDtl().getCurrentRow().getAttribute("ItmPrice") != null)
                price = (Number) this.getBdgEoBudgetProdPrdDtl().getCurrentRow().getAttribute("ItmPrice");
            amt = price.multiply(qty);
        } else if (key.equals("A")) {
            if (notation == null) {
                notation = new Number(1);
                if (this.getDualForSearchParam().getCurrentRow() != null)
                    if (this.getDualForSearchParam().getCurrentRow().getAttribute("TransAmtNotationId") != null)
                        notation =
                            (Number) this.getDualForSearchParam().getCurrentRow().getAttribute("TransAmtNotationId");
            }
            amt = value.multiply(notation);
        }
        if (this.getBdgEoBudgetProdDtl().getCurrentRow().getAttribute("CurrConvRate") != null)
            convRate = (Number) this.getBdgEoBudgetProdDtl().getCurrentRow().getAttribute("CurrConvRate");

        this.getBdgEoBudgetProdPrdDtl().getCurrentRow().setAttribute("ItmAmtSp", amt);
        this.getBdgEoBudgetProdPrdDtl().getCurrentRow().setAttribute("ItmAmtBs", amt.multiply(convRate));
        this.getBdgEoBudgetProdPrdDtl().getCurrentRow().setAttribute("TransItmAmtSpDisp", convertNumberNotation(amt));
        this.getBdgEoBudgetProdPrdDtl().getCurrentRow().setAttribute("TransItmAmtBsDisp",
                                                                     convertNumberNotation(amt.multiply(convRate)));

        Number sumOfProdPrdAmt = new Number(0);
        Number sumOfQty = new Number(0);
        this.getBdgEoBudgetProdPrdDtl().setRangeSize(-1);
        Row dtlRow[] = this.getBdgEoBudgetProdPrdDtl().getAllRowsInRange();
        for (Row r : dtlRow) {
            if (r.getAttribute("ItmAmtBs") != null)
                sumOfProdPrdAmt = sumOfProdPrdAmt.add((Number) r.getAttribute("ItmAmtBs"));
            if (r.getAttribute("ItmQty") != null)
                sumOfQty = sumOfQty.add((Number) r.getAttribute("ItmQty"));
        }

        System.out.println("In Distribution -> Sum of Qty=" + sumOfQty + " and Sum of Amt=" + sumOfProdPrdAmt);
        this.getBdgEoBudgetProdDtl().getCurrentRow().setAttribute("ItmQty", sumOfQty);
        updtBdgEoProdDtl(sumOfProdPrdAmt, "A", new Number(1));
    }


    public void updtBdgEoProdDtl(Number value, String key, Number notation) {
        System.out.println("Updating Item Amount");
        if (Integer.parseInt(resolvEl("#{pageFlowScope.P_ANALYSIS_TYPE}").toString()) == 1) {
            //1.... Update Item Amt for Current Row
            Number price = new Number(1);
            Number qty = new Number(1);
            Number amt = new Number(0);
            Number convRate = new Number(1);
            if (key.equals("P")) {
                price = value;
                if (this.getBdgEoBudgetProdDtl().getCurrentRow().getAttribute("ItmQty") != null)
                    qty = (Number) this.getBdgEoBudgetProdDtl().getCurrentRow().getAttribute("ItmQty");
                amt = price.multiply(qty);
                System.out.println("Item Price Change-> New amount =" + amt);

            } else if (key.equals("Q")) {
                qty = value;
                if (this.getBdgEoBudgetProdDtl().getCurrentRow().getAttribute("ItmPrice") != null)
                    price = (Number) this.getBdgEoBudgetProdDtl().getCurrentRow().getAttribute("ItmPrice");
                amt = price.multiply(qty);
                System.out.println("Item Quantity Change-> New amount =" + amt);
            } else if (key.equals("A")) {
                if (notation == null) {
                    notation = new Number(1);
                    if (this.getDualForSearchParam().getCurrentRow() != null)
                        if (this.getDualForSearchParam().getCurrentRow().getAttribute("TransAmtNotationId") != null)
                            notation =
                                (Number) this.getDualForSearchParam().getCurrentRow().getAttribute("TransAmtNotationId");
                }
                amt = value.multiply(notation);
            }

            if (this.getBdgEoBudgetProdDtl().getCurrentRow().getAttribute("CurrConvRate") != null)
                convRate = (Number) this.getBdgEoBudgetProdDtl().getCurrentRow().getAttribute("CurrConvRate");

            this.getBdgEoBudgetProdDtl().getCurrentRow().setAttribute("ItmAmtSp", amt);
            this.getBdgEoBudgetProdDtl().getCurrentRow().setAttribute("ItmAmtBs", amt.multiply(convRate));

            this.getBdgEoBudgetProdDtl().getCurrentRow().setAttribute("TransItmAmtSpDisp", convertNumberNotation(amt));
            this.getBdgEoBudgetProdDtl().getCurrentRow().setAttribute("TransItmAmtBsDisp",
                                                                      convertNumberNotation(amt.multiply(convRate)));


            /*  //2.. Delete then Insert Item Period Detail by function
        deleteDistributionDetailPeriodWise(this.getBdgEoBudgetProdDtl().getCurrentRow());
        insertDistributionDetailPeriodWise(this.getBdgEoBudgetProdDtl().getCurrentRow());
        */

        } else if (Integer.parseInt(resolvEl("#{pageFlowScope.P_ANALYSIS_TYPE}").toString()) == 2) {
            //1.... Update Item Amt for Current Row
            Number price = new Number(1);
            Number qty = new Number(1);
            Number amt = new Number(0);
            Number convRate = new Number(1);
            if (key.equals("P")) {
                price = value;
                if (this.getBdgMtlBudgetDtlVO1().getCurrentRow().getAttribute("ItmQty") != null)
                    qty = (Number) this.getBdgMtlBudgetDtlVO1().getCurrentRow().getAttribute("ItmQty");
                amt = price.multiply(qty);
                System.out.println("Item Price Change-> New amount =" + amt);

            } else if (key.equals("Q")) {
                qty = value;
                if (this.getBdgMtlBudgetDtlVO1().getCurrentRow().getAttribute("ItmPrice") != null)
                    price = (Number) this.getBdgMtlBudgetDtlVO1().getCurrentRow().getAttribute("ItmPrice");
                amt = price.multiply(qty);
                System.out.println("Item Quantity Change-> New amount =" + amt);
            } else if (key.equals("A")) {
                if (notation == null) {
                    notation = new Number(1);
                    if (this.getDualForSearchParam().getCurrentRow() != null)
                        if (this.getDualForSearchParam().getCurrentRow().getAttribute("TransAmtNotationId") != null)
                            notation =
                                (Number) this.getDualForSearchParam().getCurrentRow().getAttribute("TransAmtNotationId");
                }
                amt = value.multiply(notation);
            }

            if (this.getBdgMtlBudgetDtlVO1().getCurrentRow().getAttribute("CurrConvRate") != null)
                convRate = (Number) this.getBdgMtlBudgetDtlVO1().getCurrentRow().getAttribute("CurrConvRate");

            this.getBdgMtlBudgetDtlVO1().getCurrentRow().setAttribute("ItmAmtSp", amt);
            this.getBdgMtlBudgetDtlVO1().getCurrentRow().setAttribute("ItmAmtBs", amt.multiply(convRate));

            //this.getBdgMtlBudgetDtlVO1().getCurrentRow().setAttribute("TransItmAmtSpDisp", convertNumberNotation(amt));
            //this.getBdgMtlBudgetDtlVO1().getCurrentRow().setAttribute("TransItmAmtBsDisp",
            //                                                        convertNumberNotation(amt.multiply(convRate)));


            /*  //2.. Delete then Insert Item Period Detail by function
            deleteDistributionDetailPeriodWise(this.getBdgEoBudgetProdDtl().getCurrentRow());
            insertDistributionDetailPeriodWise(this.getBdgEoBudgetProdDtl().getCurrentRow());
            */

        } else if (Integer.parseInt(resolvEl("#{pageFlowScope.P_ANALYSIS_TYPE}").toString()) == 3) {
            //1.... Update Item Amt for Current Row
            Number amt = new Number(0);
            Number convRate = new Number(1);
            notation = new Number(1);
            if (key.equals("A")) {
                if (notation == null) {
                    notation = new Number(1);
                    if (this.getDualForSearchParam().getCurrentRow() != null)
                        if (this.getDualForSearchParam().getCurrentRow().getAttribute("TransAmtNotationId") != null)
                            notation =
                                (Number) this.getDualForSearchParam().getCurrentRow().getAttribute("TransAmtNotationId");
                }
                amt = value.multiply(notation);
            }

            if (this.getBdgFinBudgetDtlVO1().getCurrentRow().getAttribute("CurrConvRate") != null)
                convRate = (Number) this.getBdgFinBudgetDtlVO1().getCurrentRow().getAttribute("CurrConvRate");

            this.getBdgFinBudgetDtlVO1().getCurrentRow().setAttribute("ItmAmtSp", amt);
            this.getBdgFinBudgetDtlVO1().getCurrentRow().setAttribute("ItmAmtBs", amt.multiply(convRate));

            //this.getBdgMtlBudgetDtlVO1().getCurrentRow().setAttribute("TransItmAmtSpDisp", convertNumberNotation(amt));
            //this.getBdgMtlBudgetDtlVO1().getCurrentRow().setAttribute("TransItmAmtBsDisp",
            //                                                        convertNumberNotation(amt.multiply(convRate)));


            /*  //2.. Delete then Insert Item Period Detail by function
                    deleteDistributionDetailPeriodWise(this.getBdgEoBudgetProdDtl().getCurrentRow());
                    insertDistributionDetailPeriodWise(this.getBdgEoBudgetProdDtl().getCurrentRow());
                    */

        }
        //Update Eo Budget and Eo Budget Period(Head)
        this.updtBdgEoBudget();
    }


    private void updtBdgEoBudget() {
        System.out.println("Updating Budget Header Amount");
        if (Integer.parseInt(resolvEl("#{pageFlowScope.P_ANALYSIS_TYPE}").toString()) ==
            1) {
            //1..Update Eo Budget Amt(Header)
            Row[] dtlRow =
                this.getBdgEoBudgetProdDtl1().getFilteredRows("DocId",
                                                              this.getBdgEoBudgetProdDtl().getCurrentRow().getAttribute("DocId"));
            Number amtSumBs = new Number(0);
            Number itmAmtBs = new Number(0);
            for (Row r : dtlRow) {
                if (r.getAttribute("ItmAmtBs") != null)
                    itmAmtBs = (Number) r.getAttribute("ItmAmtBs");
                amtSumBs = amtSumBs.add(itmAmtBs);
            }
            System.out.println("Total Head Budget Amt = " + amtSumBs + " DocId = " +
                               this.getBdgEoBudgetProdDtl().getCurrentRow().getAttribute("DocId"));
            Row[] headRow =
                this.getBdgEoBudget().getFilteredRows("DocId",
                                                      this.getBdgEoBudgetProdDtl().getCurrentRow().getAttribute("DocId"));
            if (headRow.length > 0) {
                headRow[0].setAttribute("BudgAmt", amtSumBs);
                /* //2..Update Eo Budget Period Detail (Delete then Insert)
            deleteBudgetAmtPeriodWise(headRow[0]);
            insertBudgetAmtPeriodWise(headRow[0]);
           */
            } else {
                System.out.println("Row not found in Header");

            }
        } else if (Integer.parseInt(resolvEl("#{pageFlowScope.P_ANALYSIS_TYPE}").toString()) ==
                   2) {
            //1..Update Eo Budget Amt(Header)
            this.getBdgMtlBudgetDtlVO2().setNamedWhereClauseParam("bindCldId",
                                                                  this.getBdgMtlBudgetDtlVO1().getCurrentRow().getAttribute("CldId"));
            this.getBdgMtlBudgetDtlVO2().setNamedWhereClauseParam("bindslocId",
                                                                  this.getBdgMtlBudgetDtlVO1().getCurrentRow().getAttribute("SlocId"));
            this.getBdgMtlBudgetDtlVO2().setNamedWhereClauseParam("bindHoOrgId",
                                                                  this.getBdgMtlBudgetDtlVO1().getCurrentRow().getAttribute("HoOrgId"));
            this.getBdgMtlBudgetDtlVO2().setNamedWhereClauseParam("bindOrgId",
                                                                  this.getBdgMtlBudgetDtlVO1().getCurrentRow().getAttribute("OrgId"));
            this.getBdgMtlBudgetDtlVO2().setNamedWhereClauseParam("bindHeadEoId",
                                                                  resolvEl("#{pageFlowScope.APP_USR_EMP_CODE}"));
            this.getBdgMtlBudgetDtlVO2().setNamedWhereClauseParam("bindPrdStrtDt",
                                                                  this.getBdgMtlBudgetDtlVO1().getCurrentRow().getAttribute("PrdStartDt"));
            this.getBdgMtlBudgetDtlVO2().setNamedWhereClauseParam("bindPrdEndDt",
                                                                  this.getBdgMtlBudgetDtlVO1().getCurrentRow().getAttribute("PrdEndDt"));
            this.getBdgMtlBudgetDtlVO2().executeQuery();

            this.getBdgMtlBudgetDtlVO2().setRangeSize(-1);

            Row[] dtlRow =
                this.getBdgMtlBudgetDtlVO2().getFilteredRows("DocId",
                                                             this.getBdgMtlBudgetDtlVO1().getCurrentRow().getAttribute("DocId"));
            Number amtSumBs = new Number(0);
            Number itmAmtBs = new Number(0);
            for (Row r : dtlRow) {
                if (r.getAttribute("ItmAmtBs") != null)
                    itmAmtBs = (Number) r.getAttribute("ItmAmtBs");
                amtSumBs = amtSumBs.add(itmAmtBs);
            }

            Row[] filteredRows =
                this.getBdgMtlBudgetExpDtlVO1().getFilteredRows("DocId",
                                                                this.getBdgMtlBudgetDtlVO1().getCurrentRow().getAttribute("DocId"));
            for (Row r1 : filteredRows) {
                if (r1.getAttribute("AmtBs") != null)
                    itmAmtBs = (Number) r1.getAttribute("AmtBs");
                amtSumBs = amtSumBs.add(itmAmtBs);
            }

            System.out.println("Total Head Budget Amt = " + amtSumBs + " DocId = " +
                               this.getBdgMtlBudgetDtlVO1().getCurrentRow().getAttribute("DocId"));
            /* Row[] headRow =
                this.getBdgMtlBudgetVO1().getFilteredRows("DocId",
                                                          this.getBdgMtlBudgetDtlVO1().getCurrentRow().getAttribute("DocId"));
             */
            Row headRow = this.getBdgMtlBudgetVO1().getCurrentRow();
            if (headRow != null) {
                headRow.setAttribute("BudgAmt", amtSumBs);
                /* //2..Update Eo Budget Period Detail (Delete then Insert)
            deleteBudgetAmtPeriodWise(headRow[0]);
            insertBudgetAmtPeriodWise(headRow[0]);
            */
            } else {
                System.out.println("Row not found in Header");
            }
        } else if (Integer.parseInt(resolvEl("#{pageFlowScope.P_ANALYSIS_TYPE}").toString()) ==
                   3) {
            //1..Update Eo Budget Amt(Header)
            this.getBdgFinBudgetDtlVO2().setNamedWhereClauseParam("bindCldId",
                                                                  this.getBdgFinBudgetDtlVO1().getCurrentRow().getAttribute("CldId"));
            this.getBdgFinBudgetDtlVO2().setNamedWhereClauseParam("bindslocId",
                                                                  this.getBdgFinBudgetDtlVO1().getCurrentRow().getAttribute("SlocId"));
            this.getBdgFinBudgetDtlVO2().setNamedWhereClauseParam("bindHoOrgId",
                                                                  this.getBdgFinBudgetDtlVO1().getCurrentRow().getAttribute("HoOrgId"));
            this.getBdgFinBudgetDtlVO2().setNamedWhereClauseParam("bindOrgId",
                                                                  this.getBdgFinBudgetDtlVO1().getCurrentRow().getAttribute("OrgId"));
            this.getBdgFinBudgetDtlVO2().setNamedWhereClauseParam("bindHeadEoId",
                                                                  resolvEl("#{pageFlowScope.APP_USR_EMP_CODE}"));
            this.getBdgFinBudgetDtlVO2().setNamedWhereClauseParam("bindPrdStrtDt",
                                                                  this.getBdgFinBudgetDtlVO1().getCurrentRow().getAttribute("PrdStartDt"));
            this.getBdgFinBudgetDtlVO2().setNamedWhereClauseParam("bindPrdEndDt",
                                                                  this.getBdgFinBudgetDtlVO1().getCurrentRow().getAttribute("PrdEndDt"));
            this.getBdgFinBudgetDtlVO2().executeQuery();

            this.getBdgFinBudgetDtlVO2().setRangeSize(-1);

            Row[] dtlRow =
                this.getBdgFinBudgetDtlVO2().getFilteredRows("DocId",
                                                             this.getBdgFinBudgetDtlVO1().getCurrentRow().getAttribute("DocId"));
            Number amtSumBs = new Number(0);
            Number itmAmtBs = new Number(0);
            for (Row r : dtlRow) {
                if (r.getAttribute("ItmAmtBs") != null)
                    itmAmtBs = (Number) r.getAttribute("ItmAmtBs");
                amtSumBs = amtSumBs.add(itmAmtBs);
            }

            /*     Row[] filteredRows =
                this.getBdgFinBudgetExpDtlVO1().getFilteredRows("DocId",
                                                                this.getBdgFinBudgetDtlVO1().getCurrentRow().getAttribute("DocId"));
            for (Row r1 : filteredRows) {
                if (r1.getAttribute("AmtBs") != null)
                    itmAmtBs = (Number) r1.getAttribute("AmtBs");
                amtSumBs = amtSumBs.add(itmAmtBs);
            }

            System.out.println("Total Head Budget Amt = " + amtSumBs + " DocId = " +
                               this.getBdgFinBudgetDtlVO1().getCurrentRow().getAttribute("DocId")); */
            /* Row[] headRow =
                this.getBdgMtlBudgetVO1().getFilteredRows("DocId",
                                                          this.getBdgMtlBudgetDtlVO1().getCurrentRow().getAttribute("DocId"));
             */
            Row headRow = this.getBdgFinBudgetVO1().getCurrentRow();
            if (headRow != null) {
                headRow.setAttribute("BudgAmt", amtSumBs);
                /* //2..Update Eo Budget Period Detail (Delete then Insert)
            deleteBudgetAmtPeriodWise(headRow[0]);
            insertBudgetAmtPeriodWise(headRow[0]);
            */
            } else {
                System.out.println("Row not found in Header");
            }
        }
    }

    /**
     * Method which will update Expense Details whenever user try to change it
     */
    public void updateMtlExpDtl(Number val) {
        ViewObjectImpl bdgMtlBudgetExpDtlVO1 = this.getBdgMtlBudgetExpDtlVO1();
        Row currentRow = bdgMtlBudgetExpDtlVO1.getCurrentRow();
        if (currentRow != null) {
            Number itemAmt = new Number(0);
            Number conv = new Number(0);
            itemAmt = val;
            conv = (Number) currentRow.getAttribute("CurrConvRate");
            currentRow.setAttribute("AmtBs", itemAmt.multiply(conv));


            /// Following code will update Header Budget Amount based on selection

            this.getBdgMtlBudgetDtlVO2().setNamedWhereClauseParam("bindCldId", currentRow.getAttribute("CldId"));
            this.getBdgMtlBudgetDtlVO2().setNamedWhereClauseParam("bindslocId", currentRow.getAttribute("SlocId"));
            this.getBdgMtlBudgetDtlVO2().setNamedWhereClauseParam("bindHoOrgId", currentRow.getAttribute("HoOrgId"));
            this.getBdgMtlBudgetDtlVO2().setNamedWhereClauseParam("bindOrgId", currentRow.getAttribute("OrgId"));
            this.getBdgMtlBudgetDtlVO2().setNamedWhereClauseParam("bindHeadEoId",
                                                                  resolvEl("#{pageFlowScope.APP_USR_EMP_CODE}"));
            this.getBdgMtlBudgetDtlVO2().setNamedWhereClauseParam("bindPrdStrtDt",
                                                                  currentRow.getAttribute("PrdStartDt"));
            this.getBdgMtlBudgetDtlVO2().setNamedWhereClauseParam("bindPrdEndDt", currentRow.getAttribute("PrdEndDt"));
            this.getBdgMtlBudgetDtlVO2().executeQuery();

            this.getBdgMtlBudgetDtlVO2().setRangeSize(-1);

            Row[] dtlRow = this.getBdgMtlBudgetDtlVO2().getFilteredRows("DocId", currentRow.getAttribute("DocId"));
            Number amtSumBs = new Number(0);
            Number itmAmtBs = new Number(0);
            for (Row r : dtlRow) {
                if (r.getAttribute("ItmAmtBs") != null)
                    itmAmtBs = (Number) r.getAttribute("ItmAmtBs");
                amtSumBs = amtSumBs.add(itmAmtBs);
            }

            Row[] filteredRows =
                this.getBdgMtlBudgetExpDtlVO1().getFilteredRows("DocId", currentRow.getAttribute("DocId"));
            for (Row r1 : filteredRows) {
                if (r1.getAttribute("AmtBs") != null)
                    itmAmtBs = (Number) r1.getAttribute("AmtBs");
                amtSumBs = amtSumBs.add(itmAmtBs);
            }

            System.out.println("Total Head Budget Amt = " + amtSumBs + " DocId = " +
                               this.getBdgMtlBudgetDtlVO1().getCurrentRow().getAttribute("DocId"));
            /* Row[] headRow =
            this.getBdgMtlBudgetVO1().getFilteredRows("DocId",
                                                      this.getBdgMtlBudgetDtlVO1().getCurrentRow().getAttribute("DocId"));
         */
            Row headRow = this.getBdgMtlBudgetVO1().getCurrentRow();
            if (headRow != null) {
                headRow.setAttribute("BudgAmt", amtSumBs);
                /* //2..Update Eo Budget Period Detail (Delete then Insert)
        deleteBudgetAmtPeriodWise(headRow[0]);
        insertBudgetAmtPeriodWise(headRow[0]);
        */
            } else {
                System.out.println("Row not found in Header");
            }
        }
    }

    /***
     * Method which will delete records which belong to documentId and Period Id in item period Detail Table
     * BDG$EO$BUDGET$PRD$DTL
     */
    private void deleteBudgetAmtPeriodWise(Row currentRow) {
        /// Function which will delete data first from BDG$EO$BUDGET$PRD$DTL table
        if (currentRow != null) {
            String retVal = null;
            try {

                retVal = (String) this.callStoredFunction(Types.VARCHAR, "FN_DEL_PRD(?,?,?,?,?,?,?,?)", new Object[] {
                                                          currentRow.getAttribute("CldId"),
                                                          currentRow.getAttribute("SlocId"),
                                                          currentRow.getAttribute("OrgId"),
                                                          currentRow.getAttribute("HoOrgId"),
                                                          currentRow.getAttribute("DocId"),
                                                          currentRow.getAttribute("PrdStartDt"),
                                                          currentRow.getAttribute("PrdEndDt"),
                                                          currentRow.getAttribute("EoId")
                });
            } catch (Exception e) {
                e.printStackTrace();
                System.out.println("Error in calling function FN_DEL_PRD in AMIMPL " + e.getMessage());
            }
            System.out.println("Return value is --->" + retVal);
        }
    }


    private void insertBudgetAmtPeriodWise(Row currentRow) {
        String val = null;
        try {
            val = (String) this.callStoredFunction(Types.VARCHAR, "FN_INS_PRD(?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                   currentRow.getAttribute("CldId"), currentRow.getAttribute("SlocId"),
                                                   currentRow.getAttribute("OrgId"), currentRow.getAttribute("HoOrgId"),
                                                   currentRow.getAttribute("DocId"),
                                                   currentRow.getAttribute("PrdStartDt"),
                                                   currentRow.getAttribute("PrdEndDt"), currentRow.getAttribute("EoId"),
                                                   currentRow.getAttribute("DistbPrdBasis"),
                                                   Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString()),
                                                   currentRow.getAttribute("BudgAmt"), 1
            });
            System.out.println("Return value is " + val);
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("ERROR IN CALLING FUNCTION FN_INS_PRD at BdgEoBudgetAmImpl :" + e.getMessage());
        }
    }


    /***
     * Method which will delete records which belong to documentId and Period Id in item period Detail Table
     * BDG$EO$BUDGET$PROD$PRD$DTL
     */
    private void deleteDistributionDetailPeriodWise(Row currentRow) {
        /// Function which will delete data first from BDG$EO$BUDGET$PROD$PRD$DTL table
        if (currentRow != null) {
            String retVal = null;
            try {

                retVal = (String) this.callStoredFunction(Types.VARCHAR, "FN_DEL_PROD_PRD(?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                          currentRow.getAttribute("CldId"),
                                                          currentRow.getAttribute("SlocId"),
                                                          currentRow.getAttribute("OrgId"),
                                                          currentRow.getAttribute("HoOrgId"),
                                                          currentRow.getAttribute("DocId"),
                                                          currentRow.getAttribute("PrdStartDt"),
                                                          currentRow.getAttribute("PrdEndDt"),
                                                          currentRow.getAttribute("CustEoId"),
                                                          currentRow.getAttribute("ItmGrpId"),
                                                          currentRow.getAttribute("ItmId")
                });
            } catch (Exception e) {
                e.printStackTrace();
                System.out.println("Error in calling function FN_DEL_PROD_PRD in AMIMPL " + e.getMessage());
            }
            System.out.println("Return value is --->" + retVal);
            this.getBdgEoBudgetProdPrdDtl().executeQuery();
        }
    }

    private void insertDistributionDetailPeriodWise(Row currentRow) {
        try {
            this.getDBTransaction().postChanges();
            String val = null;
            val =
                (String) this.callStoredFunction(Types.VARCHAR,
                                                 "FN_INS_PROD_PRD(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                 currentRow.getAttribute("CldId"), currentRow.getAttribute("SlocId"),
                                                 currentRow.getAttribute("OrgId"), currentRow.getAttribute("HoOrgId"),
                                                 currentRow.getAttribute("DocId"),
                                                 currentRow.getAttribute("PrdStartDt"),
                                                 currentRow.getAttribute("PrdEndDt"),
                                                 currentRow.getAttribute("CustEoId"),
                                                 currentRow.getAttribute("ItmGrpId"), currentRow.getAttribute("ItmId"),
                                                 currentRow.getAttribute("ItmUom"), currentRow.getAttribute("ItmPrice"),
                                                 currentRow.getAttribute("ItmQty"),
                                                 currentRow.getAttribute("DistbPrdBasis"),
                                                 Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString()),
                                                 currentRow.getAttribute("ItmAmtSp"),
                                                 currentRow.getAttribute("DistbUnit"), currentRow.getAttribute("EoId"),
                                                 currentRow.getAttribute("Region")
            });
            System.out.println("Return value is " + val);
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("ERROR IN CALLING FUNCTION fn_ins_prod_prd at BdgEoBudgetAmImpl :" + e.getMessage());
        }
        this.getBdgEoBudgetProdPrdDtl().executeQuery();
    }

    /**
     * Container's getter for BdgOrgStructLvl1.
     * @return BdgOrgStructLvl1
     */
    public ViewObjectImpl getBdgOrgStructLvl() {
        return (ViewObjectImpl) findViewObject("BdgOrgStructLvl");
    }


    public void filterTreeHeader(Integer structId, String structVal) {
        this.getBdgAnalysisHierarchyVwHead().setNamedWhereClauseParam("docStructBindVar", structId);
        this.getBdgAnalysisHierarchyVwHead().setNamedWhereClauseParam("docStructValBindVar", structVal);
        this.getBdgAnalysisHierarchyVwHead().executeQuery();
    }

    public String getFacetNameToDisclose() {
        Integer structId = new Integer(2);
        if (this.getBdgAnalysisHierarchyVwHead().getCurrentRow() != null)
            if (this.getBdgAnalysisHierarchyVwHead().getCurrentRow().getAttribute("DocStruct") != null)
                structId = (Integer) this.getBdgAnalysisHierarchyVwHead().getCurrentRow().getAttribute("DocStruct");
            else
                System.out.println("Null StructId");
        else
            System.out.println("No current row");
        System.out.println("StructId when back=" + structId);
        if (structId.equals(new Integer(2)))
            return "Form";
        else
            return "Tree";

    }

    public void searchStructValNm(String structValNm) {
        this.getBdgAnalysisHierarchyVwHead().setNamedWhereClauseParam("structValNmBindVar", structValNm);
        this.getBdgAnalysisHierarchyVwHead().executeQuery();
    }

    /**
     * Container's getter for StructVwForBreadCrumb1.
     * @return StructVwForBreadCrumb1
     */
    public ViewObjectImpl getStructVwForBreadCrumb() {
        return (ViewObjectImpl) findViewObject("StructVwForBreadCrumb");
    }


    public void filterOrgSummFromStructVal(String val) {
        this.getBdgOrgSumm().setNamedWhereClauseParam("structValBind", val);
        this.getBdgOrgSumm().executeQuery();
    }


    /**
     * Container's getter for LovUsrIdToEmpCodeMap1.
     * @return LovUsrIdToEmpCodeMap1
     */
    public ViewObjectImpl getLovUsrIdToEmpCodeMap() {
        return (ViewObjectImpl) findViewObject("LovUsrIdToEmpCodeMap");
    }

    public void fetchParamAndCallFilterMethod() {
        //Filter Item Detail Table on the Basis of Selected Employee, Date Range, Region and Login User
        //So get above params
        Integer empCode = null;
        Integer structId = null;
        Timestamp prdStrtDt = null;
        Timestamp prdEndDt = null;
        String region = null;
        Integer loginEoId = null;
        String cldId = null;
        String hoOrgId = null;
        String orgId = null;
        Integer slocId = null;
        if (resolvEl("#{pageFlowScope.P_IS_CALL_FRM_OTH}") != null) {
            cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
            slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
            orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
            hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
            loginEoId = Integer.parseInt(resolvEl("#{pageFlowScope.APP_USR_EMP_CODE}"));
            structId = Integer.parseInt(resolvEl("#{pageFlowScope.P_DOC_STRUCT}"));
            prdStrtDt = new Timestamp(resolvEl("#{pageFlowScope.P_START_DT}"));
            prdEndDt = new Timestamp(resolvEl("#{pageFlowScope.P_END_DT}"));
            region = resolvEl("#{pageFlowScope.P_STRUCT_DPND_VAL}");
            empCode = Integer.parseInt(resolvEl("#{pageFlowScope.P_DOC_STRUCT_VAL}"));
            if (Integer.parseInt(resolvEl("#{pageFlowScope.P_ANALYSIS_TYPE}").toString()) == 1) {
                filterEoBdgProdDtl(loginEoId, prdStrtDt, prdEndDt, region, empCode, cldId, hoOrgId, orgId, slocId);
            } else if (Integer.parseInt(resolvEl("#{pageFlowScope.P_ANALYSIS_TYPE}").toString()) == 2) {
                filterMtlBdgProdDtl(loginEoId, prdStrtDt, prdEndDt, region, empCode, cldId, hoOrgId, orgId, slocId);
            } else if (Integer.parseInt(resolvEl("#{pageFlowScope.P_ANALYSIS_TYPE}").toString()) == 3) {
                filterFinBdgProdDtl(loginEoId, prdStrtDt, prdEndDt, region, empCode, cldId, hoOrgId, orgId, slocId);
            }
        } else {
            if (this.getBdgOrgSumm().getCurrentRow() != null) {
                if (this.getBdgOrgSumm().getCurrentRow().getAttribute("StructId") != null) {
                    structId = (Integer) this.getBdgOrgSumm().getCurrentRow().getAttribute("StructId");
                    if (structId.equals(2)) {
                        empCode =
                            Integer.parseInt(this.getBdgOrgSumm().getCurrentRow().getAttribute("StructVal").toString());
                        prdStrtDt = (Timestamp) this.getBdgOrgSumm().getCurrentRow().getAttribute("PrdStartDt");
                        prdEndDt = (Timestamp) this.getBdgOrgSumm().getCurrentRow().getAttribute("PrdEndDt");
                        region = (String) this.getBdgOrgSumm().getCurrentRow().getAttribute("StructValDepd");
                        loginEoId = Integer.parseInt(resolvEl("#{pageFlowScope.APP_USR_EMP_CODE}").toString());
                        cldId = (String) this.getBdgOrgSumm().getCurrentRow().getAttribute("CldId");
                        hoOrgId = (String) this.getBdgOrgSumm().getCurrentRow().getAttribute("HoOrgId");
                        orgId = (String) this.getBdgOrgSumm().getCurrentRow().getAttribute("OrgId");
                        slocId =
                            Integer.parseInt(this.getBdgOrgSumm().getCurrentRow().getAttribute("SlocId").toString());
                        if (Integer.parseInt(resolvEl("#{pageFlowScope.P_ANALYSIS_TYPE}").toString()) == 1) {
                            filterEoBdgProdDtl(loginEoId, prdStrtDt, prdEndDt, region, empCode, cldId, hoOrgId, orgId,
                                               slocId);
                        } else if (Integer.parseInt(resolvEl("#{pageFlowScope.P_ANALYSIS_TYPE}").toString()) == 2) {
                            filterMtlBdgProdDtl(loginEoId, prdStrtDt, prdEndDt, region, empCode, cldId, hoOrgId, orgId,
                                                slocId);
                        } else if (Integer.parseInt(resolvEl("#{pageFlowScope.P_ANALYSIS_TYPE}").toString()) == 3) {
                            filterFinBdgProdDtl(loginEoId, prdStrtDt, prdEndDt, region, empCode, cldId, hoOrgId, orgId,
                                                slocId);
                        }
                    }
                }
            }

        }

    }

    /**
     * Container's getter for BdgEoBudgetProdDtl1.
     * @return BdgEoBudgetProdDtl1
     */
    public ViewObjectImpl getBdgEoBudgetProdDtl() {
        return (ViewObjectImpl) findViewObject("BdgEoBudgetProdDtl");
    }

    /**
     * Container's getter for BdgEoBudgetProdPrdDtl1.
     * @return BdgEoBudgetProdPrdDtl1
     */
    public ViewObjectImpl getBdgEoBudgetProdPrdDtl() {
        return (ViewObjectImpl) findViewObject("BdgEoBudgetProdPrdDtl");
    }

    /**
     * Container's getter for BdgEoBudgetProdDtlToProdPrdDtlVL1.
     * @return BdgEoBudgetProdDtlToProdPrdDtlVL1
     */
    public ViewLinkImpl getBdgEoBudgetProdDtlToProdPrdDtlVL1() {
        return (ViewLinkImpl) findViewLink("BdgEoBudgetProdDtlToProdPrdDtlVL1");
    }


    /**
     * Method for Call Stored Functions
     */
    private Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    System.out.println("baind val is " + bindVars[z]);
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.executeUpdate();
            return st.getObject(1);
        } catch (SQLException e) {
            int end = e.getMessage().indexOf("\n");
            throw new JboException(e.getMessage());

        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    /**
     * Container's getter for BdgEoBudgetProdDtl1.
     * @return BdgEoBudgetProdDtl1
     */
    public ViewObjectImpl getBdgEoBudgetProdDtl1() {
        return (ViewObjectImpl) findViewObject("BdgEoBudgetProdDtl1");
    }

    public Number convertNumberNotation(Number amt) {
        Number notation = new Number(1);
        Number newAmt = new Number(0);
        if (this.getDualForSearchParam() != null)
            if (this.getDualForSearchParam().getCurrentRow() != null)
                if (this.getDualForSearchParam().getCurrentRow().getAttribute("TransAmtNotationId") != null)
                    notation = (Number) this.getDualForSearchParam().getCurrentRow().getAttribute("TransAmtNotationId");
        if (amt != null)
            newAmt = amt;
        return newAmt.divide(notation);
    }

    private Number convertNotationToBaseNumber(Number amt) {
        Number notation = new Number(1);
        Number newAmt = new Number(0);
        if (this.getDualForSearchParam() != null)
            if (this.getDualForSearchParam().getCurrentRow() != null)
                if (this.getDualForSearchParam().getCurrentRow().getAttribute("TransAmtNotationId") != null)
                    notation = (Number) this.getDualForSearchParam().getCurrentRow().getAttribute("TransAmtNotationId");
        if (amt != null)
            newAmt = amt;
        return newAmt.multiply(notation);
    }


    public String chkUsrDocFreeze() {
        String chk = "Y";
        if (Integer.parseInt(resolvEl("#{pageFlowScope.P_ANALYSIS_TYPE}").toString()) == 1) {
            if (this.getBdgEoBudgetProdDtl().getCurrentRow() != null) {
                if (this.getBdgEoBudgetProdDtl().getCurrentRow().getAttribute("DocId") != null) {
                    Row[] headRow =
                        this.getBdgEoBudget().getFilteredRows("DocId",
                                                              this.getBdgEoBudgetProdDtl().getCurrentRow().getAttribute("DocId"));
                    System.out.println("No. of rows in head=" + headRow.length);
                    if (headRow.length > 0)
                        if (headRow[0].getAttribute("FreezeFlg") != null)
                            chk = (String) headRow[0].getAttribute("FreezeFlg");
                        else
                            chk = "N";
                }
            }
        } else if (Integer.parseInt(resolvEl("#{pageFlowScope.P_ANALYSIS_TYPE}").toString()) == 2) {
            if (this.getBdgMtlBudgetDtlVO1().getCurrentRow() != null) {
                if (this.getBdgMtlBudgetDtlVO1().getCurrentRow().getAttribute("DocId") != null) {
                    Row[] headRow =
                        this.getBdgMtlBudgetVO1().getFilteredRows("DocId",
                                                                  this.getBdgMtlBudgetDtlVO1().getCurrentRow().getAttribute("DocId"));
                    System.out.println("No. of rows in head=" + headRow.length);
                    if (headRow.length > 0)
                        if (headRow[0].getAttribute("FreezeFlg") != null)
                            chk = (String) headRow[0].getAttribute("FreezeFlg");
                        else
                            chk = "N";
                }
            }
        } else if (Integer.parseInt(resolvEl("#{pageFlowScope.P_ANALYSIS_TYPE}").toString()) == 3) {
            if (this.getBdgFinBudgetDtlVO1().getCurrentRow() != null) {
                if (this.getBdgFinBudgetDtlVO1().getCurrentRow().getAttribute("DocId") != null) {
                    Row[] headRow =
                        this.getBdgMtlBudgetVO1().getFilteredRows("DocId",
                                                                  this.getBdgFinBudgetDtlVO1().getCurrentRow().getAttribute("DocId"));
                    System.out.println("No. of rows in head=" + headRow.length);
                    if (headRow.length > 0)
                        if (headRow[0].getAttribute("FreezeFlg") != null)
                            chk = (String) headRow[0].getAttribute("FreezeFlg");
                        else
                            chk = "N";
                }
            }
        }
        System.out.println("Value of chk =" + chk);
        return chk;
    }

    public void resetValues() {
        this.getDualForSearchParam().getCurrentRow().setAttribute("StrtDt", null);
        this.getDualForSearchParam().getCurrentRow().setAttribute("EndDt", null);
        String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        String hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        Integer usrId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        this.executeVoOnLoad(orgId, cldId, slocId, hoOrgId, usrId);
    }

    /**
     * Container's getter for EmpHierarchyView1.
     * @return EmpHierarchyView1
     */
    public ViewObjectImpl getEmpHierarchyView() {
        return (ViewObjectImpl) findViewObject("EmpHierarchyView");
    }

    /**
     * Container's getter for EmpHierarchyView1.
     * @return EmpHierarchyView1
     */
    public ViewObjectImpl getEmpHierarchyViewChild() {
        return (ViewObjectImpl) findViewObject("EmpHierarchyViewChild");
    }

    /**
     * Container's getter for EmpHierarchyToSelfVL1.
     * @return EmpHierarchyToSelfVL1
     */
    public ViewLinkImpl getEmpHierarchyToSelfVL1() {
        return (ViewLinkImpl) findViewLink("EmpHierarchyToSelfVL1");
    }

    public void filterEmpHierarchyVw() {
        if (this.getBdgOrgSumm().getCurrentRow() != null) {
            this.getEmpHierarchyView().setNamedWhereClauseParam("prdStDtBind",
                                                                this.getBdgOrgSumm().getCurrentRow().getAttribute("PrdStartDt"));
            this.getEmpHierarchyView().setNamedWhereClauseParam("prdEndDtBind",
                                                                this.getBdgOrgSumm().getCurrentRow().getAttribute("PrdEndDt"));
            this.getEmpHierarchyView().setNamedWhereClauseParam("eoIdBind",
                                                                Integer.parseInt(resolvEl("#{pageFlowScope.APP_USR_EMP_CODE}").toString()));
            this.getEmpHierarchyView().setNamedWhereClauseParam("cldIdBind",
                                                                this.getBdgOrgSumm().getCurrentRow().getAttribute("CldId"));
            this.getEmpHierarchyView().setNamedWhereClauseParam("hoOrgIdBind",
                                                                this.getBdgOrgSumm().getCurrentRow().getAttribute("HoOrgId"));
            this.getEmpHierarchyView().setNamedWhereClauseParam("orgIdBind",
                                                                this.getBdgOrgSumm().getCurrentRow().getAttribute("OrgId"));
            this.getEmpHierarchyView().setNamedWhereClauseParam("slocIdBind",
                                                                this.getBdgOrgSumm().getCurrentRow().getAttribute("SlocId"));
            this.getEmpHierarchyView().executeQuery();
        } else {
            this.getEmpHierarchyView().setNamedWhereClauseParam("cldIdBind", "-1");
            this.getEmpHierarchyView().executeQuery();
        }
    }

    /**
     * Container's getter for MtlBudgAmtVw1.
     * @return MtlBudgAmtVw1
     */
    public ViewObjectImpl getMtlBudgAmtVwVO1() {
        return (ViewObjectImpl) findViewObject("MtlBudgAmtVwVO1");
    }

    /**
     * Container's getter for BdgMtlBudget1.
     * @return BdgMtlBudget1
     */
    public ViewObjectImpl getBdgMtlBudgetVO1() {
        return (ViewObjectImpl) findViewObject("BdgMtlBudgetVO1");
    }


    /**
     * Container's getter for BdgMtlBudgetDtl1.
     * @return BdgMtlBudgetDtl1
     */
    public ViewObjectImpl getBdgMtlBudgetDtlVO1() {
        return (ViewObjectImpl) findViewObject("BdgMtlBudgetDtlVO1");
    }

    /**
     * Container's getter for BdgMtlBudgetToBdgMtlBudgetDtlVL1.
     * @return BdgMtlBudgetToBdgMtlBudgetDtlVL1
     */
    public ViewLinkImpl getBdgMtlBudgetToBdgMtlBudgetDtlVL1() {
        return (ViewLinkImpl) findViewLink("BdgMtlBudgetToBdgMtlBudgetDtlVL1");
    }

    /**
     * Container's getter for LovCurrIdSp1.
     * @return LovCurrIdSp1
     */
    public ViewObjectImpl getLovCurrIdSpVO1() {
        return (ViewObjectImpl) findViewObject("LovCurrIdSpVO1");
    }

    /**
     * Container's getter for BdgMtlBudgetDtl1.
     * @return BdgMtlBudgetDtl1
     */
    public ViewObjectImpl getBdgMtlBudgetDtlVO2() {
        return (ViewObjectImpl) findViewObject("BdgMtlBudgetDtlVO2");
    }

    /**
     * Container's getter for BdgMtlBdgDetails1.
     * @return BdgMtlBdgDetails1
     */
    public ViewObjectImpl getBdgMtlBdgDetailsVO1() {
        return (ViewObjectImpl) findViewObject("BdgMtlBdgDetailsVO1");
    }

    /**
     * Container's getter for BdgMtlBudgetExpDtl1.
     * @return BdgMtlBudgetExpDtl1
     */
    public ViewObjectImpl getBdgMtlBudgetExpDtlVO1() {
        return (ViewObjectImpl) findViewObject("BdgMtlBudgetExpDtlVO1");
    }

    /**
     * Container's getter for BdgMtlToBdgMtlBdgExpDtlVL1.
     * @return BdgMtlToBdgMtlBdgExpDtlVL1
     */
    public ViewLinkImpl getBdgMtlToBdgMtlBdgExpDtlVL1() {
        return (ViewLinkImpl) findViewLink("BdgMtlToBdgMtlBdgExpDtlVL1");
    }

    /**
     * Container's getter for LovCoaId1.
     * @return LovCoaId1
     */
    public ViewObjectImpl getLovCoaIdVO1() {
        return (ViewObjectImpl) findViewObject("LovCoaIdVO1");
    }

    /**
     * Container's getter for FinBudgetAmtVw1.
     * @return FinBudgetAmtVw1
     */
    public ViewObjectImpl getFinBudgetAmtVw1() {
        return (ViewObjectImpl) findViewObject("FinBudgetAmtVw1");
    }

    /**
     * Container's getter for BdgFinBudget1.
     * @return BdgFinBudget1
     */
    public ViewObjectImpl getBdgFinBudgetVO1() {
        return (ViewObjectImpl) findViewObject("BdgFinBudgetVO1");
    }

    /**
     * Container's getter for BdgFinBudgetDtl1.
     * @return BdgFinBudgetDtl1
     */
    public ViewObjectImpl getBdgFinBudgetDtlVO1() {
        return (ViewObjectImpl) findViewObject("BdgFinBudgetDtlVO1");
    }

    /**
     * Container's getter for BdgFinBudgetToFinBudgetDtlVL1.
     * @return BdgFinBudgetToFinBudgetDtlVL1
     */
    public ViewLinkImpl getBdgFinBudgetToFinBudgetDtlVL1() {
        return (ViewLinkImpl) findViewLink("BdgFinBudgetToFinBudgetDtlVL1");
    }

    /**
     * Container's getter for BdgFinBdgDetails1.
     * @return BdgFinBdgDetails1
     */
    public ViewObjectImpl getBdgFinBdgDetailsVO1() {
        return (ViewObjectImpl) findViewObject("BdgFinBdgDetailsVO1");
    }

    /**
     * Container's getter for BdgFinBudgetDtl1.
     * @return BdgFinBudgetDtl1
     */
    public ViewObjectImpl getBdgFinBudgetDtlVO2() {
        return (ViewObjectImpl) findViewObject("BdgFinBudgetDtlVO2");
    }

    /**
     * Container's getter for LovEmpNm1.
     * @return LovEmpNm1
     */
    public ViewObjectImpl getLovEmpNmVO1() {
        return (ViewObjectImpl) findViewObject("LovEmpNmVO1");
    }

    /**
     * Container's getter for LovLocationId1.
     * @return LovLocationId1
     */
    public ViewObjectImpl getLovLocationIdVO1() {
        return (ViewObjectImpl) findViewObject("LovLocationIdVO1");
    }
}

