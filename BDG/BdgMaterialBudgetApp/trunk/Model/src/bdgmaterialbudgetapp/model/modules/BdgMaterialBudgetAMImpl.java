package bdgmaterialbudgetapp.model.modules;


import adf.utils.ebiz.EbizParams;
import adf.utils.model.ADFModelUtils;
import adf.utils.workflow.WFApprove;

import appCostCenterSevice.model.service.AppCostCenterServiceAMImpl;

import bdgmaterialbudgetapp.model.modules.common.BdgMaterialBudgetAM;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import oracle.jbo.ApplicationModule;
import oracle.jbo.AttributeDef;
import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.client.Configuration;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.apache.myfaces.trinidad.context.RequestContext;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Dec 16 18:28:54 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class BdgMaterialBudgetAMImpl extends ApplicationModuleImpl implements BdgMaterialBudgetAM, WFApprove {
    /**
     * This is the default constructor (do not remove).
     */
    public BdgMaterialBudgetAMImpl() {
    }

    protected String getCldIdValue() {
        return resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
    }

    protected Integer getSlocIdValue() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
    }

    protected String getHoOrgIdValue() {
        return resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
    }

    protected String getOrgIdValue() {
        Row currentRow = this.getBdgMtlBudget().getCurrentRow();
        if (currentRow != null && currentRow.getAttribute("OrgId") != null) {
            return (String) currentRow.getAttribute("OrgId");
        } else {
            return resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        }
    }

    protected Integer getUsrId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
    }

    /**Method to resolve expression- returns String value*/
    protected String resolvEl(String data) {
        String val = null;
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        Object Message = valueExp.getValue(elContext);
        if (Message != null) {
            val = Message.toString();
        }
        return val;
    }

    /**
     * @param sqlReturnType
     * @param stmt
     * @param bindVars
     * @return
     */
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                    System.out.println("bind value is " + bindVars[z]);
                }
            }
            st.executeUpdate();
            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e.getMessage());
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }


    public String genDocTxnId(String cldId, Integer slocId, String orgId, Integer usrId, Integer docId,
                              Integer docTypeId) {
        String docTxnId = null;
        docTxnId = (String) (callStoredFunction(Types.VARCHAR, "APP.get_txn_id (?,?,?,?,?,?)", new Object[] {
                                                cldId, slocId, orgId, usrId, docId, docTypeId
        }));
        System.out.println("Txn Id =" + docTxnId);
        if (docTxnId != null && docTxnId.length() > 0) {
            ViewObjectImpl mtlBdgVo = this.getBdgMtlBudget();
            System.out.println("DocId of current row is =" + mtlBdgVo.getCurrentRow().getAttribute("DocId"));
            mtlBdgVo.getCurrentRow().setAttribute("DocId", docTxnId);
            System.out.println("now DocId of current row is =" + mtlBdgVo.getCurrentRow().getAttribute("DocId"));

        }

        return docTxnId;
    }


    public void filterBdgOnLoad(String docId) {
        this.getBdgMtlBudget().setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        this.getBdgMtlBudget().setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        this.getBdgMtlBudget().setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        this.getBdgMtlBudget().setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
        this.getBdgMtlBudget().setNamedWhereClauseParam("docIdBind", docId);
        this.getBdgMtlBudget().executeQuery();
        System.out.println("BindVar Value=" + docId);

        Row[] bdgRw = this.getBdgMtlBudget().getFilteredRows("DocId", docId);
        if (bdgRw.length > 0) {
            String cldId = (String) bdgRw[0].getAttribute("CldId");
            String hoOrgId = (String) bdgRw[0].getAttribute("HoOrgId");
            Integer usrId = Integer.parseInt(bdgRw[0].getAttribute("UsrIdCreate").toString());
            Integer slocId = Integer.parseInt(bdgRw[0].getAttribute("SlocId").toString());
            this.getViewBdgMtlBudgetDtl().setNamedWhereClauseParam("cldIdBind", cldId);
            this.getViewBdgMtlBudgetDtl().setNamedWhereClauseParam("hoOrgIdBind", hoOrgId);
            this.getViewBdgMtlBudgetDtl().setNamedWhereClauseParam("slocIdBind", slocId);
            this.getViewBdgMtlBudgetDtl().setNamedWhereClauseParam("usrIdBind", usrId);
            this.getViewBdgMtlBudgetDtl().executeQuery();
        }
    }


    public String genDispId(String cldId, Integer slocId, String orgId, Integer usrId, Integer docId,
                            Integer docTypeId) {
        String dispId = null;
        if (this.getBdgMtlBudget().getCurrentRow().getAttribute("BudgetId") != null) {
            dispId = (String) this.getBdgMtlBudget().getCurrentRow().getAttribute("BudgetId");
        } else {
            dispId = (String) (callStoredFunction(Types.VARCHAR, "BDG.FN_GEN_DISP_ID (?,?,?,?,?,?,?,?,?)", new Object[] {
                                                  slocId, cldId, orgId, docId,
                                                  this.getBdgMtlBudget().getCurrentRow().getAttribute("DocId"),
                                                  docTypeId, "BDG$MTL$BUDGET", this.getFyIdOrg(cldId, orgId), 0
            }));
            System.out.println("Disp Id = " + dispId);
            if (dispId != null && dispId.length() > 0) {
                this.getBdgMtlBudget().getCurrentRow().setAttribute("BudgetId", dispId);
            }

        }

        Number itmAmt = new Number(0);
        Number expAmt = new Number(0);
        if (this.getBdgMtlBudget().getCurrentRow().getAttribute("TransSumItmAmtBs") != null)
            itmAmt = (Number) this.getBdgMtlBudget().getCurrentRow().getAttribute("TransSumItmAmtBs");
        if (this.getBdgMtlBudget().getCurrentRow().getAttribute("TransSumExpAmtBs") != null)
            expAmt = (Number) this.getBdgMtlBudget().getCurrentRow().getAttribute("TransSumExpAmtBs");
        this.getBdgMtlBudget().getCurrentRow().setAttribute("BudgAmt", itmAmt.add(expAmt));
        return dispId;
    }

    /**
     * Method used to call function to get the fy id.
     * @param CldId
     * @param OrgId
     * @return FY Id
     */
    public Integer getFyIdOrg(String CldId, String OrgId) {
        Integer fyId = 0;
        if (this.getBdgMtlBudget().getCurrentRow().getAttribute("PrdStartDt") != null) {
            fyId = (Integer) (callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID (?,?,?)", new Object[] {
                                                 CldId, OrgId, new Timestamp(System.currentTimeMillis())
            }));
            if (fyId > 0) {
                this.getBdgMtlBudget().getCurrentRow().setAttribute("FyId", fyId);
            } else {

            }
        }
        System.out.println("Financial Year =" + fyId);
        return fyId;
    }


    public void setItmDetail() {
        this.getBdgMtlBudgetDtl().getCurrentRow().setAttribute("PrdStartDt",
                                                               this.getBdgMtlBudget().getCurrentRow().getAttribute("PrdStartDt"));
        this.getBdgMtlBudgetDtl().getCurrentRow().setAttribute("PrdEndDt",
                                                               this.getBdgMtlBudget().getCurrentRow().getAttribute("PrdEndDt"));
        this.getBdgMtlBudgetDtl().getCurrentRow().setAttribute("ItmSelBasis", "M");
    }

    public void setOcExpDetail() {
        this.getBdgMtlBudgetExpDtl().getCurrentRow().setAttribute("PrdStartDt",
                                                                  this.getBdgMtlBudget().getCurrentRow().getAttribute("PrdStartDt"));
        this.getBdgMtlBudgetExpDtl().getCurrentRow().setAttribute("PrdEndDt",
                                                                  this.getBdgMtlBudget().getCurrentRow().getAttribute("PrdEndDt"));
    }


    public Integer settingFinancialYear(java.sql.Date stDt) {
        this.getLovFyId().setNamedWhereClauseParam("bdgStartDtBind", stDt);
        this.getLovFyId().setNamedWhereClauseParam("bindOrgId",
                                                   this.getBdgMtlBudget().getCurrentRow().getAttribute("OrgId"));
        this.getLovFyId().executeQuery();
        Row[] fr = this.getLovFyId().getAllRowsInRange();
        if (fr.length > 0 && Integer.parseInt(fr[0].getAttribute("FyId").toString()) > 0) {
            this.getBdgMtlBudget().getCurrentRow().setAttribute("BdgFyId", fr[0].getAttribute("FyId"));
            this.getBdgMtlBudget().getCurrentRow().setAttribute("FyStartDt", fr[0].getAttribute("FyStrt"));
            this.getBdgMtlBudget().getCurrentRow().setAttribute("FyEndDt", fr[0].getAttribute("FyEnd"));
            return (Integer) fr[0].getAttribute("FyId");
        } else
            return -1;
    }


    public void filterEmployeeFromView(java.sql.Date stDt, java.sql.Date endDt) {
        String cldId = (String) this.getBdgMtlBudget().getCurrentRow().getAttribute("CldId");
        String orgId = (String) this.getBdgMtlBudget().getCurrentRow().getAttribute("OrgId");
        String hoOrgId = (String) this.getBdgMtlBudget().getCurrentRow().getAttribute("HoOrgId");
        Integer slocId = Integer.parseInt(this.getBdgMtlBudget().getCurrentRow().getAttribute("SlocId").toString());
        Integer bdgFyId = Integer.parseInt(this.getBdgMtlBudget().getCurrentRow().getAttribute("BdgFyId").toString());
        Integer usrIdCreate =
            Integer.parseInt(this.getBdgMtlBudget().getCurrentRow().getAttribute("UsrIdCreate").toString());
        this.getVwBdgEoBudget().setNamedWhereClauseParam("cldIdbind", cldId);
        this.getVwBdgEoBudget().setNamedWhereClauseParam("fyIdBind", bdgFyId);
        this.getVwBdgEoBudget().setNamedWhereClauseParam("hoOrgIdBind", hoOrgId);
        this.getVwBdgEoBudget().setNamedWhereClauseParam("orgIdBind", orgId);
        this.getVwBdgEoBudget().setNamedWhereClauseParam("prdEndDtBind", endDt);
        this.getVwBdgEoBudget().setNamedWhereClauseParam("prdStDtBind", stDt);
        this.getVwBdgEoBudget().setNamedWhereClauseParam("slocIdBind", slocId);
        this.getVwBdgEoBudget().setNamedWhereClauseParam("usrIdBind", usrIdCreate);
        this.getVwBdgEoBudget().executeQuery();
    }

    public void addSlsEoToMtlEo(String selBasis) {
        //   this.getVwBdgEoBudget().executeQuery();
        Row[] fr = this.getVwBdgEoBudget().getAllRowsInRange();
        System.out.println("No. of  Rows in VwSlsProdEo=" + fr.length);
        for (Row row : fr) {
            String exist = "N";
            if (this.getBdgMtlRefSlsEoBdg().getFilteredRows("EoId", row.getAttribute("EoId")).length > 0)
                exist = "Y";
            System.out.println("Eo Exist in Ref ? =" + exist);
            System.out.println("Is Selected=" + row.getAttribute("TransSelectCB"));
            if (selBasis.equals("S") ?
                (row.getAttribute("TransSelectCB") != null &&
                 row.getAttribute("TransSelectCB").toString().equals("true")) : true) {
                //check if already added or not-> if not then add
                if (exist.equals("N")) {
                    //Add
                    Row newRow = this.getBdgMtlRefSlsEoBdg().createRow();
                    newRow.setAttribute("CldId", this.getBdgMtlBudget().getCurrentRow().getAttribute("CldId"));
                    newRow.setAttribute("SlocId", this.getBdgMtlBudget().getCurrentRow().getAttribute("SlocId"));
                    newRow.setAttribute("OrgId", this.getBdgMtlBudget().getCurrentRow().getAttribute("OrgId"));
                    newRow.setAttribute("HoOrgId", this.getBdgMtlBudget().getCurrentRow().getAttribute("HoOrgId"));
                    newRow.setAttribute("BdgFyId", this.getBdgMtlBudget().getCurrentRow().getAttribute("BdgFyId"));
                    newRow.setAttribute("PrdStartDt",
                                        this.getBdgMtlBudget().getCurrentRow().getAttribute("PrdStartDt"));
                    newRow.setAttribute("PrdEndDt", this.getBdgMtlBudget().getCurrentRow().getAttribute("PrdEndDt"));
                    newRow.setAttribute("DocId", this.getBdgMtlBudget().getCurrentRow().getAttribute("DocId"));
                    newRow.setAttribute("EoId", row.getAttribute("EoId"));
                    newRow.setAttribute("BudgAmt", row.getAttribute("EoBudgAmt"));
                    newRow.setAttribute("UsrIdCreate",
                                        this.getBdgMtlBudget().getCurrentRow().getAttribute("UsrIdCreate"));
                    newRow.setAttribute("UsrIdCreateDt",
                                        this.getBdgMtlBudget().getCurrentRow().getAttribute("UsrIdCreateDt"));
                    newRow.setAttribute("FyStartDt", this.getBdgMtlBudget().getCurrentRow().getAttribute("FyStartDt"));
                    newRow.setAttribute("FyEndDt", this.getBdgMtlBudget().getCurrentRow().getAttribute("FyEndDt"));
                    this.getBdgMtlRefSlsEoBdg().insertRow(newRow);
                    System.out.println("Row inserted in EORef");
                }
            } else {
                //check if already added or not->if added then remove
                if (exist.equals("Y")) {
                    Row[] existsRows = this.getBdgMtlRefSlsEoBdg().getFilteredRows("EoId", row.getAttribute("EoId"));
                    existsRows[0].remove();
                    //remove
                }
            }
        }
    }


    public void deleteBomBasisItem() {
        String cldId = (String) this.getBdgMtlBudget().getCurrentRow().getAttribute("CldId");
        String orgId = (String) this.getBdgMtlBudget().getCurrentRow().getAttribute("OrgId");
        String hoOrgId = (String) this.getBdgMtlBudget().getCurrentRow().getAttribute("HoOrgId");
        String docId = (String) this.getBdgMtlBudget().getCurrentRow().getAttribute("DocId");
        Integer slocId = Integer.parseInt(this.getBdgMtlBudget().getCurrentRow().getAttribute("SlocId").toString());
        Integer bdgFyId = Integer.parseInt(this.getBdgMtlBudget().getCurrentRow().getAttribute("BdgFyId").toString());
        Integer delRet = 0;
        delRet = (Integer) (callStoredFunction(Types.INTEGER, "BDG.FN_DEL_BOM_ITM(?,?,?,?,?,?)", new Object[] {
                                               slocId, cldId, hoOrgId, orgId, docId, bdgFyId
        }));
        System.out.println("dEL function Return=" + delRet);

        this.getBdgMtlBudgetDtl().executeQuery();
    }


    //Function to populate data from BOM and SlsBudgetEO to BdgMtlDtl
    public void populateItmFromBOM(String selBasisParam) {

        //this.getBdgMtlBudgetProdPrdDtlVO1().clearCache();
        this.getBdgMtlBudgetProdPrdDtlVO1().executeQuery();

        deleteDistributionDetailPeriodWise();

        this.getBdgMtlBudgetProdPrdDtlVO1().executeQuery();

        String cldId = (String) this.getBdgMtlBudget().getCurrentRow().getAttribute("CldId");
        String orgId = (String) this.getBdgMtlBudget().getCurrentRow().getAttribute("OrgId");
        String hoOrgId = (String) this.getBdgMtlBudget().getCurrentRow().getAttribute("HoOrgId");
        String docId = (String) this.getBdgMtlBudget().getCurrentRow().getAttribute("DocId");
        String selBasis = (String) this.getBdgMtlBudget().getCurrentRow().getAttribute("SelectionBasis");
        Integer slocId = Integer.parseInt(this.getBdgMtlBudget().getCurrentRow().getAttribute("SlocId").toString());
        Integer bdgFyId = Integer.parseInt(this.getBdgMtlBudget().getCurrentRow().getAttribute("BdgFyId").toString());
        Integer usrId = Integer.parseInt(this.getBdgMtlBudget().getCurrentRow().getAttribute("UsrIdCreate").toString());
        java.sql.Date stDt = null;
        java.sql.Date enDt = null;
        try {
            stDt = ((Timestamp) this.getBdgMtlBudget().getCurrentRow().getAttribute("PrdStartDt")).dateValue();
            enDt = ((Timestamp) this.getBdgMtlBudget().getCurrentRow().getAttribute("PrdEndDt")).dateValue();

        } catch (SQLException e) {
            System.out.println("Exception when cast");
        }

        /* //Get All EO Rows
        Row[] fr = this.getBdgMtlRefSlsEoBdg().getFilteredRows("DocId", docId);
        System.out.println("Length is " + fr.length);

        for (Row eoRow : fr) { */
        Integer ret = 0;
        ret = (Integer) (callStoredFunction(Types.INTEGER, "FN_INS_BOM_ITM(?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                            slocId, cldId, hoOrgId, orgId, docId, bdgFyId, stDt, enDt, usrId,
                                            new Timestamp(System.currentTimeMillis())
        }));
        System.out.println(" function Return=" + ret);
        if (ret != null && ret.toString().length() > 0) {
            this.getBdgMtlBudget().getCurrentRow().setAttribute("EoId", ret);

            ViewObjectImpl eoIdVO1 = this.getLOVEoIdVO1();
            eoIdVO1.setNamedWhereClauseParam("BindCldId", cldId);
            eoIdVO1.setNamedWhereClauseParam("BindSlocId", slocId);
            eoIdVO1.setNamedWhereClauseParam("BindHoOrgId", hoOrgId);
            eoIdVO1.setNamedWhereClauseParam("BindEoId", ret);
            eoIdVO1.executeQuery();
            Row[] inRange = eoIdVO1.getAllRowsInRange();
            if (inRange.length > 0) {
                this.getBdgMtlBudget().getCurrentRow().setAttribute("Region", inRange[0].getAttribute("EmpLocId"));
            }
        }
        //}
        this.getDBTransaction().postChanges(); /// placed this to reflect the data in BdgMtlBudgetSummDtlVO1 because of summary

        this.getBdgMtlBudgetDtl().executeQuery();
        this.getBdgMtlBudgetSummDtlVO1().executeQuery();
        this.getBdgMtlBudgetProdPrdDtlVO1().executeQuery();
        this.getBdgMtlProdPrdDtlVO1().executeQuery();

        //insertCostCenterAmtAfterPopulate();

        //insertCcAmtAfterPopulateDistrib(); // done this for checking purpose
    }

    /**
     * Method which will do Post Changes getBdgMtlBudgetSummDtlVO1 when use click on Popup Ok Button
     **/
    public void postDataIntoTable() {
        this.getDBTransaction().postChanges();

        distributeItemDetailPeriodWise();

        //updateManualCostCenterAmtAfterPopulate();

        this.getBdgMtlBudgetDtl().executeQuery();
        this.getBdgMtlBudgetSummDtlVO1().executeQuery();
        this.getBdgMtlBudget().executeQuery();
    }

    /**
     * Method which will remove current row and execute the table
     **/
    public void removeDataFromTable() {
        Row currentRow = this.getBdgMtlBudgetDtl().getCurrentRow();
        if (currentRow != null) {
            currentRow.remove();
        }

        this.getBdgMtlBudgetDtl().executeQuery();
        this.getBdgMtlBudgetSummDtlVO1().executeQuery();
    }

    public String validateFinancialYear(java.sql.Date stDt) {
        this.getLovFyId().setNamedWhereClauseParam("bdgStartDtBind", stDt);
        this.getLovFyId().setNamedWhereClauseParam("bindOrgId",
                                                   this.getBdgMtlBudget().getCurrentRow().getAttribute("OrgId"));
        this.getLovFyId().executeQuery();
        Row[] fr = this.getLovFyId().getAllRowsInRange();
        if (fr.length > 0 && Integer.parseInt(fr[0].getAttribute("FyId").toString()) > 0) {
            return "Y";
        }

        return "N";
    }


    public String validateDuplicateItmId(String itmDesc) {
        if (itmDesc != null) {
            String itmId = null;
            this.getLovItmIdPrf().setNamedWhereClauseParam("cldIdBind",
                                                           this.getBdgMtlBudgetDtl().getCurrentRow().getAttribute("CldId"));
            this.getLovItmIdPrf().setNamedWhereClauseParam("grpIdBind",
                                                           this.getBdgMtlBudgetDtl().getCurrentRow().getAttribute("ItmGrpId"));
            this.getLovItmIdPrf().setNamedWhereClauseParam("hoOrgIdBind",
                                                           this.getBdgMtlBudgetDtl().getCurrentRow().getAttribute("HoOrgId"));
            this.getLovItmIdPrf().setNamedWhereClauseParam("orgIdBind",
                                                           this.getBdgMtlBudgetDtl().getCurrentRow().getAttribute("OrgId"));
            this.getLovItmIdPrf().setNamedWhereClauseParam("slocIdBind",
                                                           this.getBdgMtlBudgetDtl().getCurrentRow().getAttribute("SlocId"));
            this.getLovItmIdPrf().executeQuery();
            Row[] fr = this.getLovItmIdPrf().getFilteredRows("ItmDesc", itmDesc);
            if (fr.length > 0)
                itmId = (String) fr[0].getAttribute("ItmId");
            if (itmId != null) {
                RowQualifier rq = new RowQualifier(this.getBdgMtlBudgetDtl());
                rq.setWhereClause("ItmId='" + itmId + "' and ItmSelBasis='" +
                                  this.getBdgMtlBudgetDtl().getCurrentRow().getAttribute("ItmSelBasis").toString() +
                                  "'");
                Row[] itmDupliRow = this.getBdgMtlBudgetDtl().getFilteredRows(rq);
                //   System.out.println("Same row for same item="+itmDupliRow.length);
                for (Row row : itmDupliRow) {
                    if (row.equals(this.getBdgMtlBudgetDtl().getCurrentRow())) {
                    } else {
                        return "N";
                    }
                }
            }
        }
        return "Y";
    }

    public String validateDuplicateCoaNm(String coaNm) {
        if (coaNm != null) {
            Integer coaId = null;
            this.getLovCoaId().setNamedWhereClauseParam("cldIdBind",
                                                        this.getBdgMtlBudgetExpDtl().getCurrentRow().getAttribute("CldId"));
            this.getLovCoaId().setNamedWhereClauseParam("hoOrgIdBind",
                                                        this.getBdgMtlBudgetExpDtl().getCurrentRow().getAttribute("HoOrgId"));
            this.getLovCoaId().setNamedWhereClauseParam("orgIdBind",
                                                        this.getBdgMtlBudgetExpDtl().getCurrentRow().getAttribute("OrgId"));
            this.getLovCoaId().setNamedWhereClauseParam("slocIdBind",
                                                        this.getBdgMtlBudgetExpDtl().getCurrentRow().getAttribute("SlocId"));
            this.getLovCoaId().executeQuery();
            Row[] fr = this.getLovCoaId().getFilteredRows("CoaNm", coaNm);
            if (fr.length > 0)
                coaId = (Integer) fr[0].getAttribute("CoaId");
            if (coaId != null) {
                Row[] coaDupliRow = this.getBdgMtlBudgetExpDtl().getFilteredRows("CoaId", coaId);
                // System.out.println("Same row for same coa="+coaDupliRow.length);
                for (Row row : coaDupliRow) {
                    if (row.equals(this.getBdgMtlBudgetExpDtl().getCurrentRow())) {
                    } else {
                        return "N";
                    }
                }
            }
        }
        return "Y";
    }

    public String chkDtExistInPeriod(java.sql.Date validDt) {
        this.getLovExistBdgId().setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        this.getLovExistBdgId().setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        this.getLovExistBdgId().setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        this.getLovExistBdgId().setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());

        this.getLovExistBdgId().setNamedWhereClauseParam("bindBdgDt", new Timestamp(validDt));
        this.getLovExistBdgId().setNamedWhereClauseParam("usrIdBind",
                                                         this.getBdgMtlBudget().getCurrentRow().getAttribute("UsrIdCreate"));
        this.getLovExistBdgId().setNamedWhereClauseParam("bdgSetBind",
                                                         this.getBdgMtlBudget().getCurrentRow().getAttribute("BudgetSet"));
        this.getLovExistBdgId().executeQuery();
        Row fr[] = this.getLovExistBdgId().getAllRowsInRange();
        if (fr.length > 0) {
            for (Row r : fr) {
                if ((r.getAttribute("DocId").toString()).equals(this.getBdgMtlBudget().getCurrentRow().getAttribute("DocId").toString())) {
                } else {
                    System.out.println("DocId of exist bdg=" + r.getAttribute("DocId").toString());
                    System.out.println("DocId of curr bdg=" +
                                       this.getBdgMtlBudget().getCurrentRow().getAttribute("DocId").toString());
                    return r.getAttribute("BudgetId").toString();
                }
            }
        }
        return "N";
    }


    public void amendCurrBdgt() {
        String cldId = (String) this.getBdgMtlBudget().getCurrentRow().getAttribute("CldId");
        String orgId = (String) this.getBdgMtlBudget().getCurrentRow().getAttribute("OrgId");
        String hoOrgId = (String) this.getBdgMtlBudget().getCurrentRow().getAttribute("HoOrgId");
        String docId = (String) this.getBdgMtlBudget().getCurrentRow().getAttribute("DocId");
        Integer slocId = Integer.parseInt(this.getBdgMtlBudget().getCurrentRow().getAttribute("SlocId").toString());
        Integer usrId = Integer.parseInt(this.getBdgMtlBudget().getCurrentRow().getAttribute("UsrIdCreate").toString());
        String docTxnId = null;
        docTxnId = (String) (callStoredFunction(Types.VARCHAR, "BDG.FN_AMEND_MTL_BDG(?,?,?,?,?,?,?)", new Object[] {
                                                slocId, cldId, hoOrgId, orgId, docId, usrId,
                                                new Timestamp(System.currentTimeMillis())
        }));
        System.out.println("DocTxnId=" + docTxnId);
        filterBdgOnLoad(docTxnId); // filter vo
    }


    public void updateExceptionalItm() {
        this.getVwBdgEoBudgetExcptn().setNamedWhereClauseParam("bdgFyIdBind",
                                                               this.getBdgMtlBudget().getCurrentRow().getAttribute("BdgFyId"));
        this.getVwBdgEoBudgetExcptn().setNamedWhereClauseParam("cldIdBind",
                                                               this.getBdgMtlBudget().getCurrentRow().getAttribute("CldId"));
        this.getVwBdgEoBudgetExcptn().setNamedWhereClauseParam("hoOrgIdBind",
                                                               this.getBdgMtlBudget().getCurrentRow().getAttribute("HoOrgId"));
        this.getVwBdgEoBudgetExcptn().setNamedWhereClauseParam("orgIdBind",
                                                               this.getBdgMtlBudget().getCurrentRow().getAttribute("OrgId"));
        try {
            if (this.getBdgMtlBudget().getCurrentRow().getAttribute("PrdEndDt") != null) {
                this.getVwBdgEoBudgetExcptn().setNamedWhereClauseParam("prdEndDtBind",
                                                                       ((Timestamp) this.getBdgMtlBudget().getCurrentRow().getAttribute("PrdEndDt")).dateValue());
            }
            if (this.getBdgMtlBudget().getCurrentRow().getAttribute("PrdStartDt") != null) {
                this.getVwBdgEoBudgetExcptn().setNamedWhereClauseParam("prdStDtBind",
                                                                       ((Timestamp) this.getBdgMtlBudget().getCurrentRow().getAttribute("PrdStartDt")).dateValue());
            }
        } catch (SQLException e) {

        }
        this.getVwBdgEoBudgetExcptn().setNamedWhereClauseParam("slocIdBind",
                                                               this.getBdgMtlBudget().getCurrentRow().getAttribute("SlocId"));
        this.getVwBdgEoBudgetExcptn().executeQuery();
    }


    public String getUsrName(Integer usrId) {
        System.out.println("getUsrName");
        this.getLovUsrId().setNamedWhereClauseParam("slocIdBind",
                                                    this.getBdgMtlBudget().getCurrentRow().getAttribute("SlocId"));
        this.getLovUsrId().executeQuery();

        Row[] r = this.getLovUsrId().getFilteredRows("UsrId", usrId);
        if (r.length > 0)
            return (String) r[0].getAttribute("UsrName");
        else
            return null;
    }


    //------------------------WF Methods--------------------------
    private static int INTEGER = Types.NUMERIC;
    private static int DATE = Types.DATE;
    private static int STRING = Types.VARCHAR;
    private static int NUMBER = Types.NUMERIC;

    public String getWfNo(Integer sloc_id, String cld_id, String org_id, Integer doc_no) {


        Object obj = callStoredFunction(Types.VARCHAR, "APP.WF_GET_ID(?,?,?,?,?)", new Object[] {
                                        sloc_id, cld_id, org_id, doc_no, 0
        });

        return (String) obj;
    }

    public Integer pendingCheck(Integer SlocId, String CldId, String OrgId, Integer DocNo) {
        System.out.println("pendingCheck");
        Row curr = this.getBdgMtlBudget().getCurrentRow();
        String docIdTxn = curr.getAttribute("DocId").toString();
        Object obj = callStoredFunction(NUMBER, "APP.WF_GET_CUR_USR(?,?,?,?,?,?)", new Object[] {
                                        SlocId, CldId, OrgId, DocNo, docIdTxn, 0
        });
        Integer usrId = null;
        if (obj != null) {
            usrId = Integer.parseInt(obj.toString());
        }
        return usrId;
    }


    public Integer getUsrLvl(Integer SlocId, String CldId, String OrgId, Integer usr_id, String WfNum, String DocNo) {

        return Integer.parseInt(callStoredFunction(NUMBER, "APP.WF_GET_USR_LEVEL(?,?,?,?,?,?,?)", new Object[] {
                                                   SlocId, CldId, OrgId, usr_id, WfNum, DocNo, 0
    }).toString());


    }

    public Integer insIntoTxn(Integer sloc_id, String cld_id, String pOrgId, Integer DOC_NO, String WfNum,
                              Integer usr_idFrm, Integer usr_idTo, Integer levelTo, Integer levelFrm, String action,
                              String remark, Number amount, String post) {

        Row curr = this.getBdgMtlBudget().getCurrentRow();
        String docIdTxn = curr.getAttribute("DocId").toString();
        return Integer.parseInt(callStoredFunction(NUMBER, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                   sloc_id, cld_id, pOrgId, DOC_NO, 0, WfNum, docIdTxn, usr_idFrm,
                                                   usr_idTo, levelFrm, levelTo, action, remark, amount, post
    }).toString());

    }


    public void wfAction(String ret) {
        System.out.println("wfAction Ret =" + ret);
        if (ret != null) {
            if (ret.equals("F")) {
                this.getBdgMtlBudget().getCurrentRow().setAttribute("BudgetStat", 2);
            } else if (ret.equals("R")) {

            } else if (ret.equals("V")) {

            } else if (ret.equals("A")) {
                this.getBdgMtlBudget().getCurrentRow().setAttribute("BudgetStat", 3);
                this.getBdgMtlBudget().getCurrentRow().setAttribute("FreezeFlg", 'Y');

                sendDateFromTempCcToSlsSoCc();
            }
            this.getDBTransaction().commit();
        }
    }


    public void SearchBdgtMethod(String cldId, Integer slocId, String orgId, String hoOrgId, String bdgId,
                                 java.sql.Date frmDt, java.sql.Date toDt, Integer bdgFyId, Integer bdgStat,
                                 Integer usrId, Integer subOrd) {
        this.getVwSearchMtlBudget().setNamedWhereClauseParam("bdgFyIdBind", bdgFyId);
        this.getVwSearchMtlBudget().setNamedWhereClauseParam("bdgIdBind", bdgId);
        this.getVwSearchMtlBudget().setNamedWhereClauseParam("cldIdBind", cldId);
        this.getVwSearchMtlBudget().setNamedWhereClauseParam("hoOrgIdBind", hoOrgId);
        this.getVwSearchMtlBudget().setNamedWhereClauseParam("orgIdBind", orgId);
        this.getVwSearchMtlBudget().setNamedWhereClauseParam("prdEndDtBind", toDt);
        this.getVwSearchMtlBudget().setNamedWhereClauseParam("prdStDtBind", frmDt);
        this.getVwSearchMtlBudget().setNamedWhereClauseParam("slocIdBind", slocId);
        this.getVwSearchMtlBudget().setNamedWhereClauseParam("bdgStatBind", bdgStat);
        //this.getVwSearchMtlBudget().setNamedWhereClauseParam("subOrdEmpBind", subOrd);
        //this.getVwSearchMtlBudget().setNamedWhereClauseParam("usrIdBind", usrId);
        this.getVwSearchMtlBudget().executeQuery();
    }

    public void resetSearchMethod(String cldId, Integer slocId, String orgId, String hoOrgId, Integer usrId) {

        this.getSearchTransField().getCurrentRow().setAttribute("TransBudgetId", null);
        this.getSearchTransField().getCurrentRow().setAttribute("TransBdgFyId", null);
        this.getSearchTransField().getCurrentRow().setAttribute("TransBdgStDt", null);
        this.getSearchTransField().getCurrentRow().setAttribute("TransBdgEndDt", null);
        this.getSearchTransField().getCurrentRow().setAttribute("TransEmpNm", null);
        this.getSearchTransField().getCurrentRow().setAttribute("TransEmpId", null);
        this.getSearchTransField().getCurrentRow().setAttribute("TransBdgStatus", null);
        this.getSearchTransField().getCurrentRow().setAttribute("TransOrgId", null);

        this.getVwSearchMtlBudget().setNamedWhereClauseParam("bdgFyIdBind", null);
        this.getVwSearchMtlBudget().setNamedWhereClauseParam("bdgIdBind", null);
        this.getVwSearchMtlBudget().setNamedWhereClauseParam("cldIdBind", cldId);
        this.getVwSearchMtlBudget().setNamedWhereClauseParam("hoOrgIdBind", hoOrgId);
        this.getVwSearchMtlBudget().setNamedWhereClauseParam("orgIdBind", orgId);
        this.getVwSearchMtlBudget().setNamedWhereClauseParam("prdEndDtBind", null);
        this.getVwSearchMtlBudget().setNamedWhereClauseParam("prdStDtBind", null);
        this.getVwSearchMtlBudget().setNamedWhereClauseParam("slocIdBind", slocId);
        //this.getVwSearchMtlBudget().setNamedWhereClauseParam("usrIdBind", usrId);
        //this.getVwSearchMtlBudget().setNamedWhereClauseParam("subOrdEmpBind", null);
        this.getVwSearchMtlBudget().setNamedWhereClauseParam("bdgStatBind", null);
        this.getVwSearchMtlBudget().executeQuery();

    }

    /**
     * Container's getter for BdgMtlBudget.
     * @return BdgMtlBudget
     */
    public ViewObjectImpl getBdgMtlBudget() {
        return (ViewObjectImpl) findViewObject("BdgMtlBudget");
    }

    /**
     * Container's getter for BdgMtlBudgetDtl1.
     * @return BdgMtlBudgetDtl1
     */
    public ViewObjectImpl getBdgMtlBudgetDtl() {
        return (ViewObjectImpl) findViewObject("BdgMtlBudgetDtl");
    }

    /**
     * Container's getter for BdgMtlBudgetToDtlVL1.
     * @return BdgMtlBudgetToDtlVL1
     */
    public ViewLinkImpl getBdgMtlBudgetToDtlVL1() {
        return (ViewLinkImpl) findViewLink("BdgMtlBudgetToDtlVL1");
    }

    /**
     * Container's getter for BdgMtlBudgetExpDtl1.
     * @return BdgMtlBudgetExpDtl1
     */
    public ViewObjectImpl getBdgMtlBudgetExpDtl() {
        return (ViewObjectImpl) findViewObject("BdgMtlBudgetExpDtl");
    }

    /**
     * Container's getter for BdgMtlBudgetToExpDtlVL1.
     * @return BdgMtlBudgetToExpDtlVL1
     */
    public ViewLinkImpl getBdgMtlBudgetToExpDtlVL1() {
        return (ViewLinkImpl) findViewLink("BdgMtlBudgetToExpDtlVL1");
    }

    /**
     * Container's getter for ViewBdgMtlBudget1.
     * @return ViewBdgMtlBudget1
     */
    public ViewObjectImpl getViewBdgMtlBudget() {
        return (ViewObjectImpl) findViewObject("ViewBdgMtlBudget");
    }

    /**
     * Container's getter for LovGrpId1.
     * @return LovGrpId1
     */
    public ViewObjectImpl getLovGrpId() {
        return (ViewObjectImpl) findViewObject("LovGrpId");
    }

    /**
     * Container's getter for LovItmIdPrf1.
     * @return LovItmIdPrf1
     */
    public ViewObjectImpl getLovItmIdPrf() {
        return (ViewObjectImpl) findViewObject("LovItmIdPrf");
    }

    /**
     * Container's getter for LovCurrIdSp1.
     * @return LovCurrIdSp1
     */
    public ViewObjectImpl getLovCurrIdSp() {
        return (ViewObjectImpl) findViewObject("LovCurrIdSp");
    }

    /**
     * Container's getter for LovCoaId1.
     * @return LovCoaId1
     */
    public ViewObjectImpl getLovCoaId() {
        return (ViewObjectImpl) findViewObject("LovCoaId");
    }

    /**
     * Container's getter for LovFyId1.
     * @return LovFyId1
     */
    public ViewObjectImpl getLovFyId() {
        return (ViewObjectImpl) findViewObject("LovFyId");
    }

    /**
     * Container's getter for LovOrgId1.
     * @return LovOrgId1
     */
    public ViewObjectImpl getLovOrgId() {
        return (ViewObjectImpl) findViewObject("LovOrgId");
    }


    /**
     * Container's getter for VwBdgEoBudget1.
     * @return VwBdgEoBudget1
     */
    public ViewObjectImpl getVwBdgEoBudget() {
        return (ViewObjectImpl) findViewObject("VwBdgEoBudget");
    }

    /**
     * Container's getter for BdgMtlRefSlsEoBdg1.
     * @return BdgMtlRefSlsEoBdg1
     */
    public ViewObjectImpl getBdgMtlRefSlsEoBdg() {
        return (ViewObjectImpl) findViewObject("BdgMtlRefSlsEoBdg");
    }

    /**
     * Container's getter for MtlBdgToMtlRefSlsEoBdgVL1.
     * @return MtlBdgToMtlRefSlsEoBdgVL1
     */
    public ViewLinkImpl getMtlBdgToMtlRefSlsEoBdgVL1() {
        return (ViewLinkImpl) findViewLink("MtlBdgToMtlRefSlsEoBdgVL1");
    }

    /**
     * Container's getter for VwSearchMtlBudget1.
     * @return VwSearchMtlBudget1
     */
    public ViewObjectImpl getVwSearchMtlBudget() {
        return (ViewObjectImpl) findViewObject("VwSearchMtlBudget");
    }


    /**
     * Container's getter for BdgMtlBudget1.
     * @return BdgMtlBudget1
     */
    public ViewObjectImpl getBdgMtlBudget1() {
        return (ViewObjectImpl) findViewObject("BdgMtlBudget1");
    }

    /**
     * Container's getter for LovExistBdgId1.
     * @return LovExistBdgId1
     */
    public ViewObjectImpl getLovExistBdgId() {
        return (ViewObjectImpl) findViewObject("LovExistBdgId");
    }

    /**
     * Container's getter for VwBdgEoBudgetExcptn1.
     * @return VwBdgEoBudgetExcptn1
     */
    public ViewObjectImpl getVwBdgEoBudgetExcptn() {
        return (ViewObjectImpl) findViewObject("VwBdgEoBudgetExcptn");
    }

    /**
     * Container's getter for SearchTransField1.
     * @return SearchTransField1
     */
    public ViewObjectImpl getSearchTransField() {
        return (ViewObjectImpl) findViewObject("SearchTransField");
    }

    /**
     * Container's getter for LovUsrId1.
     * @return LovUsrId1
     */
    public ViewObjectImpl getLovUsrId() {
        return (ViewObjectImpl) findViewObject("LovUsrId");
    }

    /**
     * Container's getter for LOVBomId1.
     * @return LOVBomId1
     */
    public ViewObjectImpl getLOVBomIdVO1() {
        return (ViewObjectImpl) findViewObject("LOVBomIdVO1");
    }

    /**
     * Container's getter for LOVCustomerName1.
     * @return LOVCustomerName1
     */
    public ViewObjectImpl getLOVCustomerNameVO1() {
        return (ViewObjectImpl) findViewObject("LOVCustomerNameVO1");
    }

    /**
     * Container's getter for LOVEoId1.
     * @return LOVEoId1
     */
    public ViewObjectImpl getLOVEoIdVO1() {
        return (ViewObjectImpl) findViewObject("LOVEoIdVO1");
    }


    /***
     * Method which will delete records which belong to documentId and Period Id in item period Detail Table
     * BDG$Mtl$BUDGET$PROD$PRD$DTL
     * This method is calling befor populating 'populateItmFromBOM()' which is present in AMIMPL
     * and also  befor distributeItemDetailPeriodWise() method present in AMIMpl
     */
    public void deleteDistributionDetailPeriodWise() {
        /// Function which will delete data first from BDG$Mtl$BUDGET$PROD$PRD$DTL table
        /*  p_cld_id varchar2,
            p_sloc_id number,
            p_org_id varchar2,
            p_ho_org_id varchar2,
            p_DOC_ID varchar2,
            p_PRD_START_DT date,
            p_PRD_END_DT date,
            p_CUST_EO_ID number,
            p_ITM_GRP_ID varchar2,
            p_ITM_ID varchar2 */
        ViewObjectImpl bdgMtlBudgetProdDtlVO1 = this.getBdgMtlBudgetDtl();
        Row currentRow = bdgMtlBudgetProdDtlVO1.getCurrentRow();
        if (currentRow != null) {
            String retVal = null;
            try {

                retVal = (String) this.callStoredFunction(Types.VARCHAR, "FN_MATER_DEL_PROD_PRD(?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                          this.getCldIdValue(), this.getSlocIdValue(),
                                                          this.getOrgIdValue(), this.getHoOrgIdValue(),
                                                          currentRow.getAttribute("DocId"),
                                                          currentRow.getAttribute("PrdStartDt"),
                                                          currentRow.getAttribute("PrdEndDt"),
                                                          currentRow.getAttribute("CustEoId"),
                                                          currentRow.getAttribute("ItmGrpId"),
                                                          currentRow.getAttribute("ItmId")
                });
            } catch (Exception e) {
                e.printStackTrace();
                System.out.println("Error in calling function FN_MATER_DEL_PROD_PRD in AMIMPL " + e.getMessage());
            }
            System.out.println("Return value is --->" + retVal);
            this.getBdgMtlBudgetProdPrdDtlVO1().executeQuery();
            this.getBdgMtlProdPrdDtlVO1().executeQuery();
        }
    }


    /**
     * Method to process distribution method into equal, fixed, ascending, descending
     * daily, weekly, quarterly, halfyearly
     */
    public void distributeItemDetailPeriodWise() {
        String val = null;

        ViewObjectImpl bdgMtlBudgetDtlVO1 = this.getBdgMtlBudgetDtl();
        Row currentRow = bdgMtlBudgetDtlVO1.getCurrentRow();
        if (currentRow != null) {
            try {
                /// Function which will insert data into BDG$MTL$BUDGET$PROD$PRD$DTL table
                /* p_cld_id varchar2,
                    p_sloc_id number,
                    p_org_id varchar2,
                    p_ho_org_id varchar2,
                    p_DOC_ID varchar2,
                    p_PRD_START_DT date,
                    p_PRD_END_DT date,
                    p_CUST_EO_ID number,
                    p_ITM_GRP_ID varchar2,
                    p_ITM_ID varchar2,
                    p_ITM_UOM varchar2,
                    p_ITM_PRICE number,
                    p_ITM_QTY number,
                    p_dist_prd_basis number,--1 for daily,2 for weekly,3 for quarterly,4 halfyearly,5 monthly
                    p_usr_id number,
                    p_amt number,
                    p_dist_basis number,
                    p_eo_id Number,
                    p_Region varchar2    )--1 for equal*/

                this.getBdgMtlBudgetProdPrdDtlVO1().clearCache();
                this.getBdgMtlBudgetProdPrdDtlVO1().executeQuery();

                deleteDistributionDetailPeriodWise();
                this.getBdgMtlBudgetProdPrdDtlVO1().executeQuery();

                //this.getDBTransaction().postChanges();

                val =
                    (String) this.callStoredFunction(Types.VARCHAR,
                                                     "FN_MATER_INS_PROD_PRD(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                     this.getCldIdValue(), this.getSlocIdValue(), this.getOrgIdValue(),
                                                     this.getHoOrgIdValue(), currentRow.getAttribute("DocId"),
                                                     currentRow.getAttribute("PrdStartDt"),
                                                     currentRow.getAttribute("PrdEndDt"),
                                                     currentRow.getAttribute("CustEoId"),
                                                     currentRow.getAttribute("ItmGrpId"),
                                                     currentRow.getAttribute("ItmId"),
                                                     currentRow.getAttribute("ItmUom"),
                                                     currentRow.getAttribute("ItmPrice"),
                                                     currentRow.getAttribute("ItmQty"),
                                                     currentRow.getAttribute("DistbPrdBasis"), this.getUsrId(),
                                                     currentRow.getAttribute("ItmAmtSp"),
                                                     currentRow.getAttribute("DistbUnit"),
                                                     this.getBdgMtlBudget().getCurrentRow().getAttribute("EoId"),
                                                     this.getBdgMtlBudget().getCurrentRow().getAttribute("Region")
                });
                System.out.println("Return value is " + val);
            } catch (Exception e) {
                e.printStackTrace();
                System.out.println("ERROR IN CALLING FUNCTION fn_mater_ins_prod_prd at BdgEoBudgetAmImpl :" +
                                   e.getMessage());
            }
            //this.getBdgMtlBudgetProdPrdDtlVO1().executeQuery();
            //this.getBdgMtlProdPrdDtlVO1().executeQuery();

            insertCostCenterAmtAfterDistrib(currentRow);
        }
    }


    /**
     * Method to filter Distribution Detail data based on current row selection in Bdg$MTL$BUDGET$PROD$PRD$DTL
     */
    public void filterDistributionData() {
        ViewObjectImpl bdgMtlBudgetProdPrdDtlVO1 = this.getBdgMtlBudgetProdPrdDtlVO1();
        Row currentRow = bdgMtlBudgetProdPrdDtlVO1.getCurrentRow();
        if (currentRow != null) {
            System.out.println("No or rows is " + bdgMtlBudgetProdPrdDtlVO1.getAllRowsInRange().length +
                               " Data is eoId " + currentRow.getAttribute("CustEoId") + " and ItmGrp " +
                               currentRow.getAttribute("ItmGrpId") + " ItemId " + currentRow.getAttribute("ItmId") +
                               " period Start Date " + currentRow.getAttribute("PrdDtlStartDt") + " End Date " +
                               currentRow.getAttribute("PrdDtlEndDt"));
            ViewObjectImpl bdgMtlProdPrdDtlVO1 = this.getBdgMtlProdPrdDtlVO1();
            bdgMtlProdPrdDtlVO1.executeQuery();
            bdgMtlProdPrdDtlVO1.setRangeSize(-1);
            System.out.println("Now of rows is " + bdgMtlProdPrdDtlVO1.getAllRowsInRange().length);

            bdgMtlProdPrdDtlVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            bdgMtlProdPrdDtlVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            bdgMtlProdPrdDtlVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            bdgMtlProdPrdDtlVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
            bdgMtlProdPrdDtlVO1.setNamedWhereClauseParam("BindDocId", currentRow.getAttribute("DocId"));

            if (currentRow.getAttribute("CustEoId") != null) {
                bdgMtlProdPrdDtlVO1.setNamedWhereClauseParam("BindCustEoId", currentRow.getAttribute("CustEoId"));
            } else {
                bdgMtlProdPrdDtlVO1.setNamedWhereClauseParam("BindCustEoId", 0);
            }
            if (currentRow.getAttribute("ItmGrpId") != null) {
                bdgMtlProdPrdDtlVO1.setNamedWhereClauseParam("BindGrpId", currentRow.getAttribute("ItmGrpId"));
            } else {
                bdgMtlProdPrdDtlVO1.setNamedWhereClauseParam("BindGrpId", "0");
            }
            if (currentRow.getAttribute("ItmId") != null) {
                bdgMtlProdPrdDtlVO1.setNamedWhereClauseParam("BindItmId", currentRow.getAttribute("ItmId"));
            } else {
                bdgMtlProdPrdDtlVO1.setNamedWhereClauseParam("BindItmId", "0");
            }
            bdgMtlProdPrdDtlVO1.setNamedWhereClauseParam("BindPrdDtlStDt", currentRow.getAttribute("PrdDtlStartDt"));
            bdgMtlProdPrdDtlVO1.setNamedWhereClauseParam("BindPrdDtlEndDt", currentRow.getAttribute("PrdDtlEndDt"));

            bdgMtlProdPrdDtlVO1.executeQuery();
            System.out.println("Rows are " + bdgMtlProdPrdDtlVO1.getAllRowsInRange().length);
        }
    }

    /**
     * Container's getter for BdgMtlProdPrdDtl1.
     * @return BdgMtlProdPrdDtl1
     */
    public ViewObjectImpl getBdgMtlProdPrdDtlVO1() {
        return (ViewObjectImpl) findViewObject("BdgMtlProdPrdDtlVO1");
    }

    /**
     * Container's getter for BdgMtlBudgetSummDtl1.
     * @return BdgMtlBudgetSummDtl1
     */
    public ViewObjectImpl getBdgMtlBudgetSummDtlVO1() {
        return (ViewObjectImpl) findViewObject("BdgMtlBudgetSummDtlVO1");
    }

    /**
     * Container's getter for BdgMtlBudgetToSummDtlVL1.
     * @return BdgMtlBudgetToSummDtlVL1
     */
    public ViewLinkImpl getBdgMtlBudgetToSummDtlVL1() {
        return (ViewLinkImpl) findViewLink("BdgMtlBudgetToSummDtlVL1");
    }

    /**
     * Container's getter for BdgMtlBudgetProdPrdDtl1.
     * @return BdgMtlBudgetProdPrdDtl1
     */
    public ViewObjectImpl getBdgMtlBudgetProdPrdDtlVO1() {
        return (ViewObjectImpl) findViewObject("BdgMtlBudgetProdPrdDtlVO1");
    }

    /**
     * Container's getter for BdgMtlDtlToBdgMtlProdPrdDtlVL1.
     * @return BdgMtlDtlToBdgMtlProdPrdDtlVL1
     */
    public ViewLinkImpl getBdgMtlDtlToBdgMtlProdPrdDtlVL1() {
        return (ViewLinkImpl) findViewLink("BdgMtlDtlToBdgMtlProdPrdDtlVL1");
    }

    /**
     * Container's getter for ViewBdgMtlBudgetDtl1.
     * @return ViewBdgMtlBudgetDtl1
     */
    public ViewObjectImpl getViewBdgMtlBudgetDtl() {
        return (ViewObjectImpl) findViewObject("ViewBdgMtlBudgetDtl");
    }

    /**
     * Container's getter for BdgMtlDtlToViewBdgMtlDtlVL1.
     * @return BdgMtlDtlToViewBdgMtlDtlVL1
     */
    public ViewLinkImpl getBdgMtlDtlToViewBdgMtlDtlVL1() {
        return (ViewLinkImpl) findViewLink("BdgMtlDtlToViewBdgMtlDtlVL1");
    }

    /**
     * Following method will set the budget amount base value based on user selection in Specific value
     * In table BdgMtlBudgetProdPrdDtl
     */
    public void changeItemAmtBs(Number val) {
        Number convRate = new Number(0);

        convRate = (Number) this.getBdgMtlBudget().getCurrentRow().getAttribute("CurrConvRate");

        ViewObjectImpl bdgMtlBudgetProdPrdDtlVO1 = this.getBdgMtlBudgetProdPrdDtlVO1();
        Row currentRow = bdgMtlBudgetProdPrdDtlVO1.getCurrentRow();
        if (currentRow != null) {
            currentRow.setAttribute("ItmAmtBs", convRate.multiply(val));
        }
    }

    /**
     * Container's getter for LOVEmployeeName1.
     * @return LOVEmployeeName1
     */
    public ViewObjectImpl getLOVEmployeeNameVO1() {
        return (ViewObjectImpl) findViewObject("LOVEmployeeNameVO1");
    }

    /**
     * Container's getter for LOVLocationNm1.
     * @return LOVLocationNm1
     */
    public ViewObjectImpl getLOVLocationNmVO1() {
        return (ViewObjectImpl) findViewObject("LOVLocationNmVO1");
    }

    /**
     * Container's getter for BdgMtlBudgetExpPrdDtl1.
     * @return BdgMtlBudgetExpPrdDtl1
     */
    public ViewObjectImpl getBdgMtlBudgetExpPrdDtlVO1() {
        return (ViewObjectImpl) findViewObject("BdgMtlBudgetExpPrdDtlVO1");
    }

    /**
     * Container's getter for BdgMtlBudgetExpDtlToBdgMtlBudgetExpPrdDtlVL1.
     * @return BdgMtlBudgetExpDtlToBdgMtlBudgetExpPrdDtlVL1
     */
    public ViewLinkImpl getBdgMtlBudgetExpDtlToBdgMtlBudgetExpPrdDtlVL1() {
        return (ViewLinkImpl) findViewLink("BdgMtlBudgetExpDtlToBdgMtlBudgetExpPrdDtlVL1");
    }

    /**
     * Method to process distribution method into equal, fixed, ascending, descending
     * daily, weekly, quarterly, halfyearly
     */
    public void distributeExpDetailPeriodWise() {
        String val = null;

        ViewObjectImpl bdgMtlBudgetExpDtlVO1 = this.getBdgMtlBudgetExpDtl();
        Row currentRow = bdgMtlBudgetExpDtlVO1.getCurrentRow();
        if (currentRow != null) {
            try {
                /// Function which will insert data into BDG$MTL$BUDGET$EXP$PRD$DTL table
                /* p_cld_id varchar2,
                    p_sloc_id number,
                    p_org_id varchar2,
                    p_ho_org_id varchar2,
                    p_DOC_ID varchar2,
                    p_PRD_START_DT date,
                    p_PRD_END_DT date,
                    p_dist_prd_basis number,--1 for daily,2 for weekly,3 for quarterly,4 halfyearly,5 monthly
                    p_usr_id number,
                    p_COA_ID	NUMBER,
                    p_amt number,
                    p_dist_basis number,  --1 for equal
                    P_EO_ID NUMBER,
                    P_REGION VARCHAR2*/

                this.getBdgMtlBudgetExpPrdDtlVO1().clearCache();
                this.getBdgMtlBudgetExpPrdDtlVO1().executeQuery();

                deleteDistributionExpDetailPeriodWise();

                this.getBdgMtlBudgetExpPrdDtlVO1().executeQuery();

                //this.getDBTransaction().postChanges();

                val =
                    (String) this.callStoredFunction(Types.VARCHAR, "FN_MATER_INS_EXP_PRD(?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                     this.getCldIdValue(), this.getSlocIdValue(), this.getOrgIdValue(),
                                                     this.getHoOrgIdValue(), currentRow.getAttribute("DocId"),
                                                     currentRow.getAttribute("PrdStartDt"),
                                                     currentRow.getAttribute("PrdEndDt"),
                                                     currentRow.getAttribute("DistbPrdBasis"), this.getUsrId(),
                                                     currentRow.getAttribute("CoaId"), currentRow.getAttribute("AmtSp"),
                                                     currentRow.getAttribute("DistbUnit"),
                                                     currentRow.getAttribute("EoId"), currentRow.getAttribute("Region")
                });
                System.out.println("Return value is " + val);
            } catch (Exception e) {
                e.printStackTrace();
                System.out.println("ERROR IN CALLING FUNCTION fn_mater_ins_prod_prd at BdgEoBudgetAmImpl :" +
                                   e.getMessage());
            }
            this.getBdgMtlBudgetExpPrdDtlVO1().executeQuery();
            //this.getBdgMtlBudgetExpDtl().executeQuery();

            generateCostCenterAutomatic();
        }
    }

    /***
     * Method which will delete records which belong to documentId and Period Id in item period Detail Table
     * BDG$Mtl$BUDGET$PROD$PRD$DTL
     * This method is calling befor populating 'populateItmFromBOM()' which is present in AMIMPL
     * and also  befor distributeItemDetailPeriodWise() method present in AMIMpl
     */
    public void deleteDistributionExpDetailPeriodWise() {
        /// Function which will delete data first from BDG$Mtl$BUDGET$PROD$PRD$DTL table
        /*  p_cld_id varchar2,
            p_sloc_id number,
            p_org_id varchar2,
            p_ho_org_id varchar2,
            p_DOC_ID varchar2,
            p_PRD_START_DT date,
            p_PRD_END_DT date,
            p_COA_ID number*/
        ViewObjectImpl bdgMtlBudgetExpDtl = this.getBdgMtlBudgetExpDtl();
        Row currentRow = bdgMtlBudgetExpDtl.getCurrentRow();
        if (currentRow != null) {
            String retVal = null;
            try {

                retVal = (String) this.callStoredFunction(Types.VARCHAR, "FN_MATER_DEL_EXP_PRD(?,?,?,?,?,?,?,?)", new Object[] {
                                                          this.getCldIdValue(), this.getSlocIdValue(),
                                                          this.getOrgIdValue(), this.getHoOrgIdValue(),
                                                          currentRow.getAttribute("DocId"),
                                                          currentRow.getAttribute("PrdStartDt"),
                                                          currentRow.getAttribute("PrdEndDt"),
                                                          currentRow.getAttribute("CoaId")
                });
            } catch (Exception e) {
                e.printStackTrace();
                System.out.println("Error in calling function FN_MATER_DEL_PROD_PRD in AMIMPL " + e.getMessage());
            }
            System.out.println("Return value is --->" + retVal);
            this.getBdgMtlBudgetExpPrdDtlVO1().executeQuery();
            this.getBdgMtlProdPrdDtlVO1().executeQuery();
        }
    }

    /**
     * Method which will update Base vale based on user selection in Specific value in Other Expenese Distribution Method
     */
    public void updateDistribAmt(Number val) {
        ViewObjectImpl bdgMtlBudgetExpDtl = this.getBdgMtlBudgetExpDtl();
        Row currentRow = bdgMtlBudgetExpDtl.getCurrentRow();
        if (currentRow != null) {
            Number currConvRate = (Number) currentRow.getAttribute("CurrConvRate");
            if (currConvRate != null) {
                ViewObjectImpl bdgMtlBudgetExpPrdDtlVO1 = this.getBdgMtlBudgetExpPrdDtlVO1();
                Row row = bdgMtlBudgetExpPrdDtlVO1.getCurrentRow();
                if (row != null) {
                    row.setAttribute("AmtBs", currConvRate.multiply(val));
                }
            }
        }
    }

    /**
     * Method which will update item leve base value based on currency and amount and will set it
     */
    public void updateItemAmtBasedOnSel(Number qty, Number amtSp, Number confctr) {
        if (qty == null) {
            qty = new Number(0);
        }
        if (amtSp == null) {
            amtSp = new Number(0);
        }
        if (confctr == null) {
            confctr = new Number(0);
        }

        ViewObjectImpl bdgMtlBudgetDtl = this.getBdgMtlBudgetDtl();
        Row currentRow = bdgMtlBudgetDtl.getCurrentRow();
        if (currentRow != null) {
            currentRow.setAttribute("ItmAmtSp", amtSp.multiply(qty));
            currentRow.setAttribute("ItmAmtBs", confctr.multiply(amtSp.multiply(qty)));
        }
    }

    /**
     * Method which will set Global Values based accordingly
     */
    public void setGlobalValues() {
        ViewObjectImpl dataVO1 = this.getSearchTransField();
        dataVO1.reset();

        dataVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        dataVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        dataVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        dataVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());

        dataVO1.executeQuery();

        RequestContext.getCurrentInstance().getPageFlowScope().put("P_AMT_NOTATION", new Number(1));
        RequestContext.getCurrentInstance().getPageFlowScope().put("P_NOTATION_DISP", "N");
        RequestContext.getCurrentInstance().getPageFlowScope().put("DISP_AMT_NOTATION", "Basic");
    }

    /**
     *Method which will convert Basic amount to user defined amount on selection
     * @param amt
     * @return
     */
    public Number convertNumberToNotation(Number amt) {
        Number notation = new Number(1);
        Number newAmt = new Number(0);
        if (this.getSearchTransField() != null)
            if (this.getSearchTransField().getCurrentRow() != null)
                if (this.getSearchTransField().getCurrentRow().getAttribute("AmtNotationIdTrans") != null)
                    notation = (Number) this.getSearchTransField().getCurrentRow().getAttribute("AmtNotationIdTrans");
        if (amt != null)
            newAmt = amt;
        return newAmt.divide(notation);
    }

    /**
     *Method which will call from mail authentication method
     * which will update budget status based on user selection
     * @param wfReturn
     */
    protected void updateAuth(String wfReturn) {
        String retVal = wfReturn;
        System.out.println("wf return=" + retVal);
        if ("A".equals(retVal)) {
            this.getBdgMtlBudget().getCurrentRow().setAttribute("BudgetStat", 3);
            this.getBdgMtlBudget().getCurrentRow().setAttribute("FreezeFlg", 'Y');
        } else if ("F".equals(retVal)) {
            this.getBdgMtlBudget().getCurrentRow().setAttribute("BudgetStat", 2);
            System.out.println("forwared");
        }
    }

    @Override
    public void afterWorkFlowFrmLnk(String string, String string2) {
        System.out.println("In approve");

        //RequestContext.getCurrentInstance().getPageFlowScope().put("WF_RET_VALUE", string);

        ViewObjectImpl bdgMtlBudget = getBdgMtlBudget();
        Row[] rw = bdgMtlBudget.getFilteredRows("DocId", string2);
        Row r = rw[0];
        bdgMtlBudget.setCurrentRow(r);
        System.out.println("row is " + r);
        this.updateAuth(string);

        this.getDBTransaction().commit();
    }

    @Override
    public WFApprove getAppAM() {
        String appModuleName = "bdgmaterialbudgetapp.model.modules.BdgMaterialBudgetAM";
        String appModuleConfig = "BdgMaterialBudgetAMLocal";
        return (BdgMaterialBudgetAMImpl) Configuration.createRootApplicationModule(appModuleName, appModuleConfig);
    }

    @Override
    public void releaseAppAM(WFApprove wFApprove) {
        Configuration.releaseRootApplicationModule((ApplicationModule) wFApprove, true);
    }

    public void deleteExpenseDetailAction() {
        deleteDistributionDetailPeriodWise();
        this.getBdgMtlBudgetProdPrdDtlVO1().executeQuery();

        ViewObjectImpl sumDtl = this.getBdgMtlBudgetSummDtlVO1();
        Row currentRow = sumDtl.getCurrentRow();
        if (currentRow != null) {
            ViewObjectImpl prd = this.getBdgMtlBudgetProdPrdDtlVO1();
            RowSetIterator itr = prd.createRowSetIterator(null);
            while (itr.hasNext()) {
                itr.next().remove();
            }
            itr.closeRowSetIterator();
            prd.executeQuery();
            //  Object EO_ID = currentRow.getAttribute("EoId");
            Object CUST_EO_ID = currentRow.getAttribute("CustEoId");
            Object ITM_GRP_ID = currentRow.getAttribute("ItmGrpId");
            Object ITM_ID = currentRow.getAttribute("ItmId");
            //   Object REGION = currentRow.getAttribute("Region");
            ViewObjectImpl bdgMtlBudgetDtl = this.getBdgMtlBudgetDtl();
            RowQualifier rq = new RowQualifier(bdgMtlBudgetDtl);
            //EoId = " + EO_ID + " and
            // and Region = '" + REGION
            rq.setWhereClause("CustEoId = " + CUST_EO_ID + " and ItmGrpId = '" + ITM_GRP_ID + "' and ItmId = '" +
                              ITM_ID + "'");
            Row[] filteredRows = bdgMtlBudgetDtl.getFilteredRows(rq);
            System.out.println("filteredRows length " + filteredRows.length);
            if (filteredRows.length > 0) {
                filteredRows[0].remove();
            }
            bdgMtlBudgetDtl.executeQuery();
        }
        this.getDBTransaction().postChanges();
        sumDtl.executeQuery();

        //    sumDtl.setCurrentRow(sumDtl.getCurrentRow())

        // sumDtl.setCurrentRowAtRangeIndex(arg0)  //sumDtl.getCurrentRowIndex()
        //sumDtl.findAndSetCurrentRowByKey(arg0, arg1);
        //sumDtl.getCurrentRow().getKey()
        // sumDtl.findAndSetCurrentRowByKey(key, int);
    }

    public Key setCurrentRowToEdit() {
        //    deleteDistributionDetailPeriodWise();
        //   this.getBdgMtlBudgetProdPrdDtlVO1().executeQuery();
        ViewObjectImpl sumDtl = this.getBdgMtlBudgetSummDtlVO1();
        Row currentRow = sumDtl.getCurrentRow();
        if (currentRow != null) {
            //  Object EO_ID = currentRow.getAttribute("EoId");
            Object CUST_EO_ID = currentRow.getAttribute("CustEoId");
            Object ITM_GRP_ID = currentRow.getAttribute("ItmGrpId");
            Object ITM_ID = currentRow.getAttribute("ItmId");
            //   Object REGION = currentRow.getAttribute("Region");
            ViewObjectImpl bdgMtlBudgetDtl = this.getBdgMtlBudgetDtl();
            RowQualifier rq = new RowQualifier(bdgMtlBudgetDtl);
            //EoId = " + EO_ID + " and
            // and Region = '" + REGION
            rq.setWhereClause("CustEoId = " + CUST_EO_ID + " and ItmGrpId = '" + ITM_GRP_ID + "' and ItmId = '" +
                              ITM_ID + "'");
            Row[] filteredRows = bdgMtlBudgetDtl.getFilteredRows(rq);
            System.out.println("filteredRows length -->> " + filteredRows.length);
            if (filteredRows.length > 0) {
                Row row = filteredRows[0];
                //   boolean b = bdgMtlBudgetDtl.setCurrentRow(row);
                // System.out.println("set >> " + b);
                System.out.println("itm id is: " + row.getAttribute("ItmId"));
                return row.getKey();
            }
        }
        return null;
    }

    /**
     * Container's getter for MtlBudgetVsActual1.
     * @return MtlBudgetVsActual1
     */
    public ViewObjectImpl getMtlBudgetVsActualVO() {
        return (ViewObjectImpl) findViewObject("MtlBudgetVsActualVO");
    }

    /**
     * Container's getter for AppCcDoc1.
     * @return AppCcDoc1
     */
    public ViewObjectImpl getAppCcDocVO1() {
        return (ViewObjectImpl) findViewObject("AppCcDocVO1");
    }

    /**
     * Container's getter for AppCcVw1.
     * @return AppCcVw1
     */
    public ViewObjectImpl getAppCcVwVO1() {
        return (ViewObjectImpl) findViewObject("AppCcVwVO1");
    }

    /// Following methods were related to Cost Center
    public AppCostCenterServiceAMImpl getAppCcAM() {
        String appModuleName = "appCostCenterSevice.model.service.AppCostCenterServiceAM";
        String appModuleConfig = "AppCostCenterServiceAMLocal";
        return (AppCostCenterServiceAMImpl) Configuration.createRootApplicationModule(appModuleName, appModuleConfig);
    }


    public void releaseAppAM(AppCostCenterServiceAMImpl appCostCenter) {
        Configuration.releaseRootApplicationModule((ApplicationModule) appCostCenter, true);
    }

    @Override
    protected void finalize() throws Throwable {

        releaseAppAM(getAppCcAM());

        super.finalize();
    }
    /// End Of Cost ceneter methods

    /**
     * Method which will let us know whether cost center is applicable for this current document or not
     */
    public Boolean chkCcApplicableOrNot() {
        Boolean val = false;

        ViewObjectImpl appCcDocVO1 = this.getAppCcDocVO1();
        appCcDocVO1.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        appCcDocVO1.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        appCcDocVO1.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        appCcDocVO1.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        appCcDocVO1.setNamedWhereClauseParam("BindDocId", 34003);
        appCcDocVO1.executeQuery();

        Row[] allRowsInRange = appCcDocVO1.getAllRowsInRange();
        if (allRowsInRange.length > 0) {
            val = true;
        }

        return val;
    }

    /**
     * Method which will set Global Parameter Values and will be called before opening AppCostCenterServicesTF
     */
    public void declareGlblValuesForCC() {
        ViewObjectImpl appCcVwVO1 = this.getAppCcVwVO1();
        appCcVwVO1.setRangeSize(-1);

        appCcVwVO1.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        appCcVwVO1.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        appCcVwVO1.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        appCcVwVO1.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        appCcVwVO1.setNamedWhereClauseParam("BindDocId", 34003);

        Row currentRow = this.getBdgMtlBudgetSummDtlVO1().getCurrentRow();
        if (currentRow != null) {
            for (int i = 1; i <= 5; i++) {
                appCcVwVO1.setNamedWhereClauseParam("BindCcPos", i);
                appCcVwVO1.executeQuery();

                Row[] allRowsInRange = appCcVwVO1.getAllRowsInRange();
                if (allRowsInRange.length > 0) {
                    String columnName = null;
                    for (Row r : allRowsInRange) {
                        AttributeDef[] attributeDef = this.getBdgMtlBudgetSummDtlVO1().getAttributeDefs();

                        for (int j = 0; j < attributeDef.length; j++) {
                            /*  System.out.println("j value is " + attributeDef[j].getColumnName());
                               System.out.println("------------ null value is " + r.getAttribute("DbobColNm"));
                               System.out.println("attributeDef[j].getColumnName().equalsIgnoreCase(r.getAttribute(\"DbobColNm\").toString()) " +
                                                  attributeDef[j].getColumnName().equals(r.getAttribute("DbobColNm")));
                               */
                            if (attributeDef[j].getColumnName() != null &&
                                attributeDef[j].getColumnName().equals(r.getAttribute("DbobColNm"))) {
                                columnName = attributeDef[j].getName();
                            }
                        }
                        System.out.println("Column Name is " + columnName);

                        if (columnName != null) {

                            System.out.println("i is " + i + " Cost center Value is " +
                                               currentRow.getAttribute(columnName));


                            RequestContext.getCurrentInstance().getPageFlowScope().put("P_CC_LEVEL" + i,
                                                                                       currentRow.getAttribute(columnName));
                        }
                    }
                } else {
                    System.out.println("i is" + i + " cost center value is null");

                    RequestContext.getCurrentInstance().getPageFlowScope().put("P_CC_LEVEL" + i, null);

                }
            }
        }
    }

    /**
     * Method which will update amount present in cost center table
     */
    public void updateCostCenterAmt() {
        if (chkCcApplicableOrNot()) {
            System.out.println("Inside cost ceneter update amount method");
            ViewObjectImpl impl = this.getBdgMtlBudgetSummDtlVO1();

            AppCostCenterServiceAMImpl amCC = getAppCcAM();

            Row currentRow = impl.getCurrentRow();
            if (currentRow != null && currentRow.getAttribute("CcId") != null &&
                currentRow.getAttribute("ItmAmtSp") != null) {
                System.out.println("Inside Am after cresting object");
                if (amCC != null) {

                    declareGlblValuesForCC();

                    System.out.println("------------------ Not null");
                    Boolean amount =
                        amCC.updateCCAmount(EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                            EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                            currentRow.getAttribute("DocId").toString(), "L", 34003,
                                            EbizParams.GLBL_APP_USR(), currentRow.getAttribute("CcId").toString(),
                                            (Number) currentRow.getAttribute("ItmAmtSp"),
                                            (String) resolvElO("#{pageFlowScope.P_CC_LEVEL1}"),
                                            (String) resolvElO("#{pageFlowScope.P_CC_LEVEL2}"),
                                            (String) resolvElO("#{pageFlowScope.P_CC_LEVEL3}"),
                                            (String) resolvElO("#{pageFlowScope.P_CC_LEVEL4}"),
                                            (String) resolvElO("#{pageFlowScope.P_CC_LEVEL5}"));
                    if (!amount) {
                        ADFModelUtils.showFormattedFacesMessage("Update Cost Center",
                                                                "Please Update Cost Center Values.",
                                                                FacesMessage.SEVERITY_ERROR);
                    }
                }
            }
            System.out.println("After calling Update method");
        }
    }

    /**
     * Method which will set Global Parameter Values and will be called before opening AppCostCenterServicesTF
     */
    protected void declareGlblValuesForCCForAllRows(Row row) {
        ViewObjectImpl appCcVwVO1 = this.getAppCcVwVO1();
        appCcVwVO1.setRangeSize(-1);
        if (row != null) {
            appCcVwVO1.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
            appCcVwVO1.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
            appCcVwVO1.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
            appCcVwVO1.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
            appCcVwVO1.setNamedWhereClauseParam("BindDocId", 34003);

            ViewObjectImpl bdgMtlBudgetSummDtlVO2 = this.getBdgMtlBudgetSummDtlVO2();
            RowQualifier rQ = new RowQualifier(bdgMtlBudgetSummDtlVO2);
            rQ.setWhereClause("CldId ='" + this.getCldIdValue() + "' and SlocId =" + this.getSlocIdValue() +
                              " and HoOrgId ='" + this.getHoOrgIdValue() + "' and OrgId ='" + this.getOrgIdValue() +
                              "' and DocId ='" + this.getBdgMtlBudget().getCurrentRow().getAttribute("DocId") +
                              "' and CustEoId =" + row.getAttribute("CustEoId") + " and ItmGrpId ='" +
                              row.getAttribute("ItmGrpId") + "' and ItmId ='" + row.getAttribute("ItmId") + "'");
            Row[] filteredRows = bdgMtlBudgetSummDtlVO2.getFilteredRows(rQ);

            if (filteredRows.length > 0 && filteredRows[0] != null) {
                for (int i = 1; i <= 5; i++) {
                    appCcVwVO1.setNamedWhereClauseParam("BindCcPos", i);
                    appCcVwVO1.executeQuery();

                    Row[] allRowsInRange = appCcVwVO1.getAllRowsInRange();
                    if (allRowsInRange.length > 0) {
                        String columnName = null;
                        for (Row r : allRowsInRange) {
                            AttributeDef[] attributeDef = this.getBdgMtlBudgetSummDtlVO1().getAttributeDefs();

                            for (int j = 0; j < attributeDef.length; j++) {
                                if (attributeDef[j].getColumnName() != null &&
                                    attributeDef[j].getColumnName().equals(r.getAttribute("DbobColNm"))) {
                                    columnName = attributeDef[j].getName();
                                }
                            }
                            System.out.println("Column Name is " + columnName);

                            if (columnName != null) {

                                System.out.println("i is " + i + " Cost center Value is " +
                                                   filteredRows[0].getAttribute(columnName));


                                RequestContext.getCurrentInstance().getPageFlowScope().put("P_CC_LEVEL" + i,
                                                                                           filteredRows[0].getAttribute(columnName));
                            }
                        }
                    } else {
                        System.out.println("i is" + i + " cost center value is null");

                        RequestContext.getCurrentInstance().getPageFlowScope().put("P_CC_LEVEL" + i, null);

                    }
                }
            }
        }
    }

    /*
     * Method which will update amount present in cost center table

    protected void insertCostCenterAmtAfterPopulate() {
        if (chkCcApplicableOrNot()) {
            System.out.println("Inside cost ceneter update amount method");
            ViewObjectImpl impl = this.getBdgMtlBudgetSummDtlVO1();
            AppCostCenterServiceAMImpl amCC = getAppCcAM();

            for (Row r : impl.getAllRowsInRange()) {
                if (r != null && r.getAttribute("CcId") != null && r.getAttribute("ItmAmtSp") != null) {
                    System.out.println("Inside Am after cresting object");
                    if (amCC != null) {

                        declareGlblValuesForCCForAllRows(r);

                        System.out.println("------------------ Not null");
                        Boolean amount =
                            amCC.updateCCAmount(EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                                EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                                r.getAttribute("DocId").toString(), "L", 34003,
                                                EbizParams.GLBL_APP_USR(), r.getAttribute("CcId").toString(),
                                                (Number) r.getAttribute("ItmAmtSp"),
                                                (String) resolvElO("#{pageFlowScope.P_CC_LEVEL1}"),
                                                (String) resolvElO("#{pageFlowScope.P_CC_LEVEL2}"),
                                                (String) resolvElO("#{pageFlowScope.P_CC_LEVEL3}"),
                                                (String) resolvElO("#{pageFlowScope.P_CC_LEVEL4}"),
                                                (String) resolvElO("#{pageFlowScope.P_CC_LEVEL5}"));
                        if (!amount) {
                            ADFModelUtils.showFormattedFacesMessage("Update Cost Center",
                                                                    "Please Update Cost Center Values.",
                                                                    FacesMessage.SEVERITY_ERROR);
                        }
                    }
                }
            }
            System.out.println("After calling Update method");
        }
    } */

    /*
     * Method which will update amount present in cost center table

    protected void updateManualCostCenterAmtAfterPopulate() {
        if (chkCcApplicableOrNot()) {
            System.out.println("Inside cost ceneter update amount method");
            ViewObjectImpl impl = this.getBdgMtlBudgetDtl();
            Row currentRow = impl.getCurrentRow();
            if (currentRow != null && currentRow.getAttribute("CcId") != null &&
                currentRow.getAttribute("ItmAmtSp") != null) {
                AppCostCenterServiceAMImpl amCC = getAppCcAM();
                System.out.println("Inside Am after cresting object");
                if (amCC != null) {

                    declareGlblValuesForCC();

                    System.out.println("------------------ Not null");
                    Boolean amount =
                        amCC.updateCCAmount(EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                            EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                            currentRow.getAttribute("DocId").toString(), "L", 34003,
                                            EbizParams.GLBL_APP_USR(), currentRow.getAttribute("CcId").toString(),
                                            (Number) currentRow.getAttribute("ItmAmtSp"),
                                            (String) resolvElO("#{pageFlowScope.P_CC_LEVEL1}"),
                                            (String) resolvElO("#{pageFlowScope.P_CC_LEVEL2}"),
                                            (String) resolvElO("#{pageFlowScope.P_CC_LEVEL3}"),
                                            (String) resolvElO("#{pageFlowScope.P_CC_LEVEL4}"),
                                            (String) resolvElO("#{pageFlowScope.P_CC_LEVEL5}"));
                    if (!amount) {
                        ADFModelUtils.showFormattedFacesMessage("Update Cost Center",
                                                                "Please Update Cost Center Values.",
                                                                FacesMessage.SEVERITY_ERROR);
                    }
                }
            }
            System.out.println("After calling Update method");
        }
    }*/

    /**
     * Method which will update amount present in cost center table
     */
    private void insertCostCenterAmtAfterDistrib(Row dtlRow) {
        if (dtlRow != null && chkCcApplicableOrNot()) {
            System.out.println("Inside cost ceneter update amount method");
            ViewObjectImpl impl = this.getBdgMtlBudgetProdPrdDtlVO2();
            RowQualifier rQ = new RowQualifier(impl);

            rQ.setWhereClause("CldId ='" + this.getCldIdValue() + "' and SlocId =" + this.getSlocIdValue() +
                              " and HoOrgId ='" + this.getHoOrgIdValue() + "' and OrgId ='" + this.getOrgIdValue() +
                              "' and DocId ='" + this.getBdgMtlBudget().getCurrentRow().getAttribute("DocId") +
                              "' and CustEoId =" + dtlRow.getAttribute("CustEoId") + " and ItmGrpId ='" +
                              dtlRow.getAttribute("ItmGrpId") + "' and ItmId ='" + dtlRow.getAttribute("ItmId") + "'");


            AppCostCenterServiceAMImpl amCC = getAppCcAM();
            for (Row r : impl.getFilteredRows(rQ)) {
                if (r != null && r.getAttribute("CcId") != null && r.getAttribute("ItmAmtSp") != null) {
                    System.out.println("Inside Am after cresting object");
                    if (amCC != null) {

                        //declareGlblValuesForCC();
                        declareGlblValuesForCCForAllRows(r);

                        System.out.println("------------------ Not null");
                        Boolean amount =
                            amCC.updateCCAmount(EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                                EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                                r.getAttribute("DocId").toString(), "L", 34003,
                                                EbizParams.GLBL_APP_USR(), r.getAttribute("CcId").toString(),
                                                (Number) r.getAttribute("ItmAmtSp"),
                                                (String) resolvElO("#{pageFlowScope.P_CC_LEVEL1}"),
                                                (String) resolvElO("#{pageFlowScope.P_CC_LEVEL2}"),
                                                (String) resolvElO("#{pageFlowScope.P_CC_LEVEL3}"),
                                                (String) resolvElO("#{pageFlowScope.P_CC_LEVEL4}"),
                                                (String) resolvElO("#{pageFlowScope.P_CC_LEVEL5}"));
                        if (!amount) {
                            ADFModelUtils.showFormattedFacesMessage("Update Cost Center",
                                                                    "Please Update Cost Center Values.",
                                                                    FacesMessage.SEVERITY_ERROR);
                        }
                    }
                }
            }
            System.out.println("After calling Update method");
        }
    }

    /**
     * Method which will update amount present in cost center table
     */
    public void insertCcAmtAfterPopulateDistrib() {
        if (chkCcApplicableOrNot()) {
            System.out.println("Inside cost ceneter update amount method");
            ViewObjectImpl impl = this.getBdgMtlBudgetProdPrdDtlVO2();
            impl.setRangeSize(-1);
            impl.executeQuery();
            RowQualifier rQ = new RowQualifier(impl);
            rQ.setWhereClause("CldId ='" + this.getCldIdValue() + "' and SlocId =" + this.getSlocIdValue() +
                              " and HoOrgId ='" + this.getHoOrgIdValue() + "' and OrgId ='" + this.getOrgIdValue() +
                              "' and DocId ='" + this.getBdgMtlBudget().getCurrentRow().getAttribute("DocId") + "'");
            AppCostCenterServiceAMImpl amCC = getAppCcAM();
            for (Row r : impl.getFilteredRows(rQ)) {
                if (r != null && r.getAttribute("CcId") != null && r.getAttribute("ItmAmtSp") != null) {
                    System.out.println("Inside Am after cresting object");
                    if (amCC != null) {

                        //declareGlblValuesForCC();
                        declareGlblValuesForCCForAllRows(r);

                        System.out.println("------------------ Not null");
                        Boolean amount =
                            amCC.updateCCAmount(EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                                EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                                r.getAttribute("DocId").toString(), "L", 34003,
                                                EbizParams.GLBL_APP_USR(), r.getAttribute("CcId").toString(),
                                                (Number) r.getAttribute("ItmAmtSp"),
                                                (String) resolvElO("#{pageFlowScope.P_CC_LEVEL1}"),
                                                (String) resolvElO("#{pageFlowScope.P_CC_LEVEL2}"),
                                                (String) resolvElO("#{pageFlowScope.P_CC_LEVEL3}"),
                                                (String) resolvElO("#{pageFlowScope.P_CC_LEVEL4}"),
                                                (String) resolvElO("#{pageFlowScope.P_CC_LEVEL5}"));
                        if (!amount) {
                            ADFModelUtils.showFormattedFacesMessage("Update Cost Center",
                                                                    "Please Update Cost Center Values.",
                                                                    FacesMessage.SEVERITY_ERROR);
                        }
                    }
                }
            }
            System.out.println("After calling Update method");
        }
    }


    /**
     * Method which will push data of Cost Center from TempCostCenter to SlsSoCostCenter Table
     */
    public void sendDateFromTempCcToSlsSoCc() {
        if (chkCcApplicableOrNot()) {
            callStoredFunction(Types.VARCHAR, "APP.FN_SAVE_COST_CENTER(?,?,?,?,?,?,?,?)", new Object[] {
                               EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                               EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(), 34003, "BDG",
                               "BDG$MTL$BUDGET$COST$CENTER",
                               this.getBdgMtlBudget().getCurrentRow().getAttribute("DocId")
            });
        }
    }

    /**
     * Method which will set Level Id values to null when user click on Other charger cost center
     */
    public void setDfltLvlVlsToNull() {
        for (int i = 1; i <= 5; i++) {
            RequestContext.getCurrentInstance().getPageFlowScope().put("P_CC_LEVEL" + i, null);
        }
    }

    /**
     * Method which will be called when user click on generate Cost Ceneter based on header wise
     */
    private void generateCostCenterAutomatic() {
        if (chkCcApplicableOrNot()) {
            AppCostCenterServiceAMImpl amCC = getAppCcAM();
            /*
        * @param cldId
        * @param slocId
        * @param hoOrgId
        * @param orgId
        * @param tempId
        * @param tempSrc
        * @param docId
        * @param usrId
        * @param tempCcId
        * @param amount
        * @param pCcLevel1
        * @param pCcLevel2
        * @param pCcLevel3
        * @param pCcLevel4
        * @param pCcLevel5
        */
            ViewObjectImpl bdgMtlBudgetExpPrdDtlVO1 = this.getBdgMtlBudgetExpPrdDtlVO1();
            for (Row r : bdgMtlBudgetExpPrdDtlVO1.getAllRowsInRange()) {
                if (r != null) {
                    setDfltLvlVlsToNull();

                    amCC.generateCostCenterApp(EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                               EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                               r.getAttribute("DocId").toString(), "L", 34003,
                                               EbizParams.GLBL_APP_USR(), r.getAttribute("CcId").toString(),
                                               (Number) r.getAttribute("AmtSp"),
                                               (String) resolvElO("#{pageFlowScope.P_CC_LEVEL1}"),
                                               (String) resolvElO("#{pageFlowScope.P_CC_LEVEL2}"),
                                               (String) resolvElO("#{pageFlowScope.P_CC_LEVEL3}"),
                                               (String) resolvElO("#{pageFlowScope.P_CC_LEVEL4}"),
                                               (String) resolvElO("#{pageFlowScope.P_CC_LEVEL5}"));

                }
            }
        }
    }

    /**Method to resolve expression- returns String value*/
    protected Object resolvElO(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        Object message = valueExp.getValue(elContext);

        return message;
    }

    /**
     * Container's getter for BdgMtlBudgetProdPrdDtl1.
     * @return BdgMtlBudgetProdPrdDtl1
     */
    public ViewObjectImpl getBdgMtlBudgetProdPrdDtlVO2() {
        return (ViewObjectImpl) findViewObject("BdgMtlBudgetProdPrdDtlVO2");
    }

    /**
     * Container's getter for BdgMtlBudgetSummDtl1.
     * @return BdgMtlBudgetSummDtl1
     */
    public ViewObjectImpl getBdgMtlBudgetSummDtlVO2() {
        return (ViewObjectImpl) findViewObject("BdgMtlBudgetSummDtlVO2");
    }
}
