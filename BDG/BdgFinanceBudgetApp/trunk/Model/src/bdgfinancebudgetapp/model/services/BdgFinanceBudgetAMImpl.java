package bdgfinancebudgetapp.model.services;

import adf.utils.ebiz.EbizParams;

import appCostCenterSevice.model.service.AppCostCenterServiceAMImpl;

import bdgfinancebudgetapp.model.services.common.BdgFinanceBudgetAM;
import bdgfinancebudgetapp.model.views.TempListShowVORowImpl;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.ApplicationModule;
import oracle.jbo.AttributeDef;
import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.client.Configuration;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.apache.myfaces.trinidad.context.RequestContext;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Mar 16 17:28:48 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class BdgFinanceBudgetAMImpl extends ApplicationModuleImpl implements BdgFinanceBudgetAM {
    /**
     * This is the default constructor (do not remove).
     */
    public BdgFinanceBudgetAMImpl() {
    }

    private String getCldIdValue() {
        return resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
    }

    private Integer getSlocIdValue() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
    }

    private String getHoOrgIdValue() {
        return resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
    }

    private String getOrgIdValue() {
        Row currentRow = this.getBdgFinBudgetVO1().getCurrentRow();
        if (currentRow != null && currentRow.getAttribute("OrgId") != null) {
            return (String) currentRow.getAttribute("OrgId");
        } else {
            return resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        }
    }

    private Integer getUsrId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
    }

    /**Method to resolve expression- returns String value*/
    private String resolvEl(String data) {
        String val = null;
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        Object Message = valueExp.getValue(elContext);
        if (Message != null) {
            val = Message.toString();
        }
        return val;
    }

    /**
     * Container's getter for BdgFinBudgetVO1.
     * @return BdgFinBudgetVO1
     */
    public ViewObjectImpl getBdgFinBudgetVO1() {
        return (ViewObjectImpl) findViewObject("BdgFinBudgetVO1");
    }

    /**
     * Container's getter for BdgFinBudgetDtlVO1.
     * @return BdgFinBudgetDtlVO1
     */
    public ViewObjectImpl getBdgFinBudgetDtlVO1() {
        return (ViewObjectImpl) findViewObject("BdgFinBudgetDtlVO1");
    }

    /**
     * Container's getter for BdgFinBudgetToBdgFinBudgetDtlVL1.
     * @return BdgFinBudgetToBdgFinBudgetDtlVL1
     */
    public ViewLinkImpl getBdgFinBudgetToBdgFinBudgetDtlVL1() {
        return (ViewLinkImpl) findViewLink("BdgFinBudgetToBdgFinBudgetDtlVL1");
    }

    /**
     * Container's getter for LOVCurrId1.
     * @return LOVCurrId1
     */
    public ViewObjectImpl getLOVCurrIdVO1() {
        return (ViewObjectImpl) findViewObject("LOVCurrIdVO1");
    }

    /**
     * Container's getter for LOVEoId1.
     * @return LOVEoId1
     */
    public ViewObjectImpl getLOVEoIdVO1() {
        return (ViewObjectImpl) findViewObject("LOVEoIdVO1");
    }

    /**
     * Container's getter for GetCurrentFYDate1.
     * @return GetCurrentFYDate1
     */
    public ViewObjectImpl getGetCurrentFYDateVO1() {
        return (ViewObjectImpl) findViewObject("GetCurrentFYDateVO1");
    }

    /**
     * Method for Call Stored Functions
     */
    private Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    System.out.println("baind val is " + bindVars[z]);
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.executeUpdate();
            return st.getObject(1);
        } catch (SQLException e) {
            int end = e.getMessage().indexOf("\n");
            throw new JboException(e.getMessage());

        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }


    /**
     * Method which will call after Create Insert has been done for BdgFinanceBudgetAddPage
     */
    public void callAfterInsert() {

        // Method which will set default Currency based on default organization
        generateOrgBsCurr();

        // Method which will set default period start date and end date to next financial year and also region
        setDefaultPeriodDateRegion();
    }


    /** --------------------- To Set Currency Id and Its Conversion Factor Value ------------------- **/
    private void generateOrgBsCurr() {
        Integer currId = 0;
        try {
            currId = (Integer) this.callStoredFunction(Types.INTEGER, "APP.GET_ORG_DEF_CURR_BS1(?,?,?)", new Object[] {
                                                       this.getCldIdValue(), this.getSlocIdValue(), this.getOrgIdValue()
            });
            //System.out.println("Currency Id " + currId);

            this.getBdgFinBudgetVO1().getCurrentRow().setAttribute("CurrIdSp", currId);

            ViewObjectImpl currIdVO1 = this.getLOVCurrIdVO1();
            currIdVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            currIdVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            currIdVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
            currIdVO1.setNamedWhereClauseParam("BindCurrId", currId);
            currIdVO1.executeQuery();

            Row[] allRowsInRange = currIdVO1.getAllRowsInRange();
            if (allRowsInRange.length > 0) {
                this.getBdgFinBudgetVO1().getCurrentRow().setAttribute("CurrConvRate",
                                                                       allRowsInRange[0].getAttribute("CcSell"));
                this.getBdgFinBudgetVO1().getCurrentRow().setAttribute("CurrNameTrans",
                                                                       allRowsInRange[0].getAttribute("CurrDescTxn"));
            }

        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("ERROR IN CALLING FUNCTION at BdgFinBudgetAmImpl:" + e.getMessage());
        }
    }

    /**
     * Method which will set Period Start Date and End Date and also default region of that employee to Default when user click on Create Insert
     */
    protected void setDefaultPeriodDateRegion() {
        ViewObjectImpl bdgFinBudgetVO1 = this.getBdgFinBudgetVO1();
        Row currentRow = bdgFinBudgetVO1.getCurrentRow();
        if (currentRow != null) {
            ViewObjectImpl currentFYDateVO1 = this.getGetCurrentFYDateVO1();
            currentFYDateVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
            currentFYDateVO1.setNamedWhereClauseParam("BindStartDate", new Timestamp(System.currentTimeMillis()));
            currentFYDateVO1.executeQuery();

            currentFYDateVO1.setRangeSize(-1);

            ViewObjectImpl eoIdVO1 = this.getLOVEoIdVO1();
            eoIdVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            eoIdVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            eoIdVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            eoIdVO1.setNamedWhereClauseParam("BindUserId", this.getUsrId());
            eoIdVO1.setNamedWhereClauseParam("BindEoId", Integer.parseInt(resolvEl("#{pageFlowScope.P_EMP_CODE}")));
            eoIdVO1.executeQuery();

            Row[] allRowsInRange = currentFYDateVO1.getAllRowsInRange();
            if (allRowsInRange.length > 0) {
                currentRow.setAttribute("PrdStartDt", allRowsInRange[0].getAttribute("NextFyStrt"));
                currentRow.setAttribute("PrdEndDt", allRowsInRange[0].getAttribute("NextFyEnd"));

                currentRow.setAttribute("FyStartDt", allRowsInRange[0].getAttribute("NextFyStrt"));
                currentRow.setAttribute("FyEndDt", allRowsInRange[0].getAttribute("NextFyEnd"));

                currentRow.setAttribute("BdgFyId", (Integer) allRowsInRange[0].getAttribute("FyId") + 1);

                Row[] inRange = eoIdVO1.getAllRowsInRange();
                if (inRange.length > 0) {
                    currentRow.setAttribute("Region", inRange[0].getAttribute("EmpLocId"));
                }
            }
        }
    }

    /**
     * Method which will set Employee Code from user Id and Set global Parameter for Emp Code
     * #{pageFlowScope.P_EMP_CODE}
     */
    public void setEmployeeCodeToGlobalParam() {

        ViewObjectImpl detailVO1 = this.getGetEmployeeCodeVO1();
        detailVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        detailVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        detailVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        detailVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
        detailVO1.setNamedWhereClauseParam("BindUserId", this.getUsrId());
        detailVO1.executeQuery();

        Row[] allRowsInRange = detailVO1.getAllRowsInRange();
        if (allRowsInRange.length > 0) {
            RequestContext.getCurrentInstance().getPageFlowScope().put("P_EMP_CODE",
                                                                       allRowsInRange[0].getAttribute("EmpCode"));
            System.out.println("Global parameter set to " + allRowsInRange[0].getAttribute("EmpCode"));
        } else {
            RequestContext.getCurrentInstance().getPageFlowScope().put("P_EMP_CODE", 0);
        }
        RequestContext.getCurrentInstance().getPageFlowScope().put("P_AMT_NOTATION", new Number(1));
        RequestContext.getCurrentInstance().getPageFlowScope().put("P_NOTATION_DISP", "N");
        RequestContext.getCurrentInstance().getPageFlowScope().put("DISP_AMT_NOTATION", "Basic");
    }

    /**
     * Container's getter for GetEmployeeCode1.
     * @return GetEmployeeCode1
     */
    public ViewObjectImpl getGetEmployeeCodeVO1() {
        return (ViewObjectImpl) findViewObject("GetEmployeeCodeVO1");
    }

    /**
     * Container's getter for LOVLocationNm1.
     * @return LOVLocationNm1
     */
    public ViewObjectImpl getLOVLocationNmVO1() {
        return (ViewObjectImpl) findViewObject("LOVLocationNmVO1");
    }

    /**
     * Container's getter for LOVCustomerNm1.
     * @return LOVCustomerNm1
     */
    public ViewObjectImpl getLOVCustomerNmVO1() {
        return (ViewObjectImpl) findViewObject("LOVCustomerNmVO1");
    }

    /**
     * Container's getter for LOVItemGrp1.
     * @return LOVItemGrp1
     */
    public ViewObjectImpl getLOVItemGrpVO1() {
        return (ViewObjectImpl) findViewObject("LOVItemGrpVO1");
    }

    /**
     * Container's getter for LOVItemName1.
     * @return LOVItemName1
     */
    public ViewObjectImpl getLOVItemNameVO1() {
        return (ViewObjectImpl) findViewObject("LOVItemNameVO1");
    }

    /**
     * Container's getter for LovCoaId1.
     * @return LovCoaId1
     */
    public ViewObjectImpl getLovCoaIdVO1() {
        return (ViewObjectImpl) findViewObject("LovCoaIdVO1");
    }

    /**
     * Method which will filter BDG$FIN$BUDGET$DTL based on user selection for panelTab
     * 1 - For Sales Budget
     * 2 - For Material Budget
     * 3 - For Others
     */
    public void filterDetailDate(Integer bdgType) {
        ViewObjectImpl bdgFinBudgetDtlVO1 = this.getBdgFinBudgetDtlVO1();
        bdgFinBudgetDtlVO1.setNamedWhereClauseParam("BindBudgetType", bdgType);
        bdgFinBudgetDtlVO1.executeQuery();
    }

    /**
     * Method will Delete the records before inserting the data into BDF$FIN$BUDGET$DTL
     */
    private void deleteDataAccordingly() {
        /*
         * FN_DEL_FIN_ITM(
        P_Cld_Id  VARCHAR2,
        P_Sloc_Id NUMBER,
        P_Ho_Org_Id  VARCHAR2,
        p_Org_Id     VARCHAR2,
        p_Doc_Id     VARCHAR2,
        P_Bdg_Fy_Id      NUMBER)
         */
        String docId = (String) this.getBdgFinBudgetVO1().getCurrentRow().getAttribute("DocId");
        Integer bdgfyId =
            Integer.parseInt(this.getBdgFinBudgetVO1().getCurrentRow().getAttribute("BdgFyId").toString());

        /* Placed this because if user add same COA before and then click on Populate Button then the Page level data present in cache is not been found at database level
        In Order to get the page level data at database end used PostChanges
        */
        this.getDBTransaction().postChanges();

        Integer ret = (Integer) callStoredFunction(Types.INTEGER, "FN_DEL_FIN_ITM(?,?,?,?,?,?)", new Object[] {
                                                   this.getCldIdValue(), this.getSlocIdValue(), this.getHoOrgIdValue(),
                                                   this.getOrgIdValue(), docId, bdgfyId
        });

        System.out.println("return Value is " + ret);
    }

    /**
     * Method which will Insert data when user Click on Populate Items Button
     */
    public void insertDataAccordingly() {
        // Before Inser delete all the related rows
        deleteDataAccordingly();
        /*
         * P_Cld_Id  VARCHAR2,
        P_Sloc_Id NUMBER,
        P_Ho_Org_Id VARCHAR2,
        P_Org_Id  VARCHAR2,
        P_Eo_Id NUMBER,
        P_Region VARCHAR2,
        P_Doc_Id  VARCHAR2,
        P_Fy_Id   NUMBER,
        P_Bdg_Fy_Id NUMBER,
        P_Prd_Strt_Dt DATE,
        P_Prd_End_Dt DATE,
        P_Usr_Id  NUMBER,
        P_Usr_Dt  DATE
         */
        Integer eoId = Integer.parseInt(this.getBdgFinBudgetVO1().getCurrentRow().getAttribute("EoId").toString());
        String region = (String) this.getBdgFinBudgetVO1().getCurrentRow().getAttribute("Region");

        String docId = (String) this.getBdgFinBudgetVO1().getCurrentRow().getAttribute("DocId");
        Integer fyId = Integer.parseInt(this.getBdgFinBudgetVO1().getCurrentRow().getAttribute("FyId").toString());
        Integer bdgFyId =
            Integer.parseInt(this.getBdgFinBudgetVO1().getCurrentRow().getAttribute("BdgFyId").toString());
        Integer usrId =
            Integer.parseInt(this.getBdgFinBudgetVO1().getCurrentRow().getAttribute("UsrIdCreate").toString());
        java.sql.Date stDt = null;
        java.sql.Date enDt = null;
        try {
            stDt = ((Timestamp) this.getBdgFinBudgetVO1().getCurrentRow().getAttribute("PrdStartDt")).dateValue();
            enDt = ((Timestamp) this.getBdgFinBudgetVO1().getCurrentRow().getAttribute("PrdEndDt")).dateValue();

        } catch (SQLException e) {
            e.printStackTrace();
            System.out.println("Exception when cast ");
        }

        BigDecimal ret = (BigDecimal) callStoredFunction(Types.NUMERIC, "FN_INS_FIN_ITM(?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                         this.getCldIdValue(), this.getSlocIdValue(),
                                                         this.getHoOrgIdValue(), this.getOrgIdValue(), eoId, region,
                                                         docId, fyId, bdgFyId, stDt, enDt, usrId,
                                                         new Timestamp(System.currentTimeMillis())
        });

        System.out.println("budget amount return Value is " + ret);
        if (ret != null) {
            try {
                Number bdgAmt = new Number(ret);

                this.getBdgFinBudgetVO1().getCurrentRow().setAttribute("BudgAmt", bdgAmt);

            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

        this.getBdgFinBudgetDtlVO1().executeQuery();

        this.getDBTransaction().postChanges(); /// Done this because to populate data into Material Budget VO

        executeBdgSalesDistributionMethod(docId);
        executeBdgMaterialDistributionMethod(docId);

        executeAllVODataBasedOnSelection(docId,
                                         (Timestamp) this.getBdgFinBudgetVO1().getCurrentRow().getAttribute("PrdStartDt"),
                                         (Timestamp) this.getBdgFinBudgetVO1().getCurrentRow().getAttribute("PrdEndDt"));
    }

    /**
     * Method which will execute the all the data present in Finance dashboard Task Flow and refresh its data accordingly
     */

    private void executeAllVODataBasedOnSelection(String docId, Timestamp stDate, Timestamp endDate) {

        ViewObjectImpl amtDistributionVO1 = this.getBdgSlsBudgAmtDistributionVO1();
        amtDistributionVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        amtDistributionVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        amtDistributionVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        amtDistributionVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
        amtDistributionVO1.setNamedWhereClauseParam("BindStDate", stDate);

        amtDistributionVO1.executeQuery();

        ViewObjectImpl budgetVO1 = this.getMonthlyBudgetVO1();
        budgetVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        budgetVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        budgetVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        budgetVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
        budgetVO1.setNamedWhereClauseParam("BindEmpCode",
                                           this.getBdgFinBudgetVO1().getCurrentRow().getAttribute("EoId"));
        budgetVO1.setNamedWhereClauseParam("BindStartDt", stDate);
        budgetVO1.setNamedWhereClauseParam("BindEndDt", endDate);

        budgetVO1.executeQuery();

        ViewObjectImpl amtCompVO1 = this.getBdgSlsBudgetAmtCompVO1();
        amtCompVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        amtCompVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        amtCompVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        amtCompVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
        amtCompVO1.setNamedWhereClauseParam("BindStDate", stDate);
        amtCompVO1.setNamedWhereClauseParam("BindEoId", this.getBdgFinBudgetVO1().getCurrentRow().getAttribute("EoId"));

        amtCompVO1.executeQuery();

        ViewObjectImpl bdgSalesComparisionVO1 = this.getBdgSalesComparisionVO1();
        bdgSalesComparisionVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        bdgSalesComparisionVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        bdgSalesComparisionVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        bdgSalesComparisionVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
        bdgSalesComparisionVO1.setNamedWhereClauseParam("BindPrdStDt", stDate);

        budgetVO1.executeQuery();


        ViewObjectImpl bdgMtlRegionWiseSummVO1 = this.getBdgMtlRegionWiseSummVO1();
        bdgMtlRegionWiseSummVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        bdgMtlRegionWiseSummVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        bdgMtlRegionWiseSummVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        bdgMtlRegionWiseSummVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
        bdgMtlRegionWiseSummVO1.setNamedWhereClauseParam("BindStDate", stDate);
        bdgMtlRegionWiseSummVO1.setNamedWhereClauseParam("BindEndDate", endDate);

        bdgMtlRegionWiseSummVO1.executeQuery();

        ViewObjectImpl bdgMtlItemComparisonVO1 = this.getBdgMtlItemComparisonVO1();
        bdgMtlItemComparisonVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        bdgMtlItemComparisonVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        bdgMtlItemComparisonVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        bdgMtlItemComparisonVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
        bdgMtlItemComparisonVO1.setNamedWhereClauseParam("BindStDate", stDate);
        bdgMtlItemComparisonVO1.executeQuery();


        ViewObjectImpl impl = this.getBdgMtlRegionWiseSummVO1();
        impl.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        impl.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        impl.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        impl.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
        impl.setNamedWhereClauseParam("BindStDate", stDate);
        impl.setNamedWhereClauseParam("BindEndDate", endDate);

        impl.executeQuery();

        ViewObjectImpl amtMtlCompVO1 = this.getBdgMtlBudgetAmtCompVO1();
        amtMtlCompVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        amtMtlCompVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        amtMtlCompVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        amtMtlCompVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
        amtMtlCompVO1.setNamedWhereClauseParam("BindStDate", stDate);

        amtCompVO1.executeQuery();

        ViewObjectImpl bdgMtlRegionWiseCompVO1 = this.getBdgMtlRegionWiseCompVO1();
        bdgMtlRegionWiseCompVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        bdgMtlRegionWiseCompVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        bdgMtlRegionWiseCompVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        bdgMtlRegionWiseCompVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
        bdgMtlRegionWiseCompVO1.setNamedWhereClauseParam("BindStDate", stDate);
        bdgMtlRegionWiseCompVO1.executeQuery();

        ViewObjectImpl headMtlRegionMonthSummVWVO1 = this.getHeadMtlRegionMonthSummVWVO1();
        headMtlRegionMonthSummVWVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        headMtlRegionMonthSummVWVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        headMtlRegionMonthSummVWVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        headMtlRegionMonthSummVWVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
        headMtlRegionMonthSummVWVO1.setNamedWhereClauseParam("BindStDate", stDate);
        headMtlRegionMonthSummVWVO1.setNamedWhereClauseParam("BindEndDate", endDate);
        headMtlRegionMonthSummVWVO1.executeQuery();

    }

    /**
     * Following method will execute the data based on selected tab and will be called after
     * populate Button is pressed
     */
    public void executeQuerysBasedOnSelection(Integer tabExpanded) {
        this.getMaterialBudgetDtlVO1().executeQuery();

        loadSalesBdgOnStartUp();

        loadMonthlyBdgOnStartUp();

        loadSlsComparisionBdgOnStartUp();

        if (this.getBdgFinBudgetVO1().getCurrentRow() != null) {
            executeVoBasedOnTabDisclosed(tabExpanded);
        }
    }

    /**
     * Container's getter for LOVEmployeeName1.
     * @return LOVEmployeeName1
     */
    public ViewObjectImpl getLOVEmployeeNameVO1() {
        return (ViewObjectImpl) findViewObject("LOVEmployeeNameVO1");
    }

    /**
     *Method set Finincial Start Date and End Date
     */
    public Integer settingFinancialYear(Timestamp stDt) {
        try {
            this.getNextYearFyDateVO1().setNamedWhereClauseParam("BindStartDate", stDt.dateValue());
            this.getNextYearFyDateVO1().setNamedWhereClauseParam("BindOrgId",
                                                                 this.getBdgFinBudgetVO1().getCurrentRow().getAttribute("OrgId"));
            this.getNextYearFyDateVO1().executeQuery();
            Row[] fr = this.getNextYearFyDateVO1().getAllRowsInRange();
            if (fr.length > 0 && Integer.parseInt(fr[0].getAttribute("FyId").toString()) > 0) {
                this.getBdgFinBudgetVO1().getCurrentRow().setAttribute("BdgFyId", fr[0].getAttribute("FyId"));
                this.getBdgFinBudgetVO1().getCurrentRow().setAttribute("FyStartDt", fr[0].getAttribute("FyStrt"));
                this.getBdgFinBudgetVO1().getCurrentRow().setAttribute("FyEndDt", fr[0].getAttribute("FyEnd"));
                return (Integer) fr[0].getAttribute("FyId");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return -1;
    }

    /**
     * Container's getter for NextYearFyDate1.
     * @return NextYearFyDate1
     */
    public ViewObjectImpl getNextYearFyDateVO1() {
        return (ViewObjectImpl) findViewObject("NextYearFyDateVO1");
    }

    /**
     *Method which will check date whether it is present inside financial year or not
     * @param stDt
     * @return
     */
    public String validateFinancialYear(Timestamp stDt) {
        this.getNextYearFyDateVO1().setNamedWhereClauseParam("BindStartDate", stDt);
        this.getNextYearFyDateVO1().setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
        this.getNextYearFyDateVO1().executeQuery();
        Row[] fr = this.getNextYearFyDateVO1().getAllRowsInRange();
        if (fr.length > 0 && Integer.parseInt(fr[0].getAttribute("FyId").toString()) > 0) {
            return "Y";
        }
        return "N";
    }

    /**
     *Method which will check whether data present inside Eo Budget Table or not
     * @param validDt
     * @return
     */

    public String chkDtExistInPeriod(Timestamp validDt) {
        this.getLovExistBdgIdVO1().setNamedWhereClauseParam("BindBdgDt", validDt);
        /* this.getLovExistBdgIdVO1().setNamedWhereClauseParam("BindEoId",
                                                            this.getBdgFinBudgetVO1().getCurrentRow().getAttribute("EoId"));
         */
        this.getLovExistBdgIdVO1().setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        this.getLovExistBdgIdVO1().setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        this.getLovExistBdgIdVO1().setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        this.getLovExistBdgIdVO1().setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());

        this.getLovExistBdgIdVO1().setNamedWhereClauseParam("BindSetId",
                                                            this.getBdgFinBudgetVO1().getCurrentRow().getAttribute("BudgetSet"));
        this.getLovExistBdgIdVO1().executeQuery();
        Row fr[] = this.getLovExistBdgIdVO1().getAllRowsInRange();
        if (fr.length > 0) {
            for (Row r : fr) {
                if ((r.getAttribute("DocId").toString()).equals(this.getBdgFinBudgetVO1().getCurrentRow().getAttribute("DocId").toString())) {
                } else {
                    System.out.println("DocId of exist bdg=" + r.getAttribute("DocId").toString());
                    System.out.println("DocId of curr bdg=" +
                                       this.getBdgFinBudgetVO1().getCurrentRow().getAttribute("DocId").toString());
                    return r.getAttribute("BudgetId").toString();
                }
            }
        }
        return "N";
    }

    /**
     * Container's getter for LovExistBdgId1.
     * @return LovExistBdgId1
     */
    public ViewObjectImpl getLovExistBdgIdVO1() {
        return (ViewObjectImpl) findViewObject("LovExistBdgIdVO1");
    }

    /**
     * Method which will set the values for Item Amount Bs based on SP
     */
    public void setItemAmtBS(Number amtSp) {
        if (amtSp != null) {
            Row currentRow = this.getBdgFinBudgetDtlVO1().getCurrentRow();
            Number conv = (Number) currentRow.getAttribute("CurrConvRate");
            currentRow.setAttribute("ItmAmtSp", amtSp);
            currentRow.setAttribute("ItmAmtBs", amtSp.multiply(conv));
        }
    }

    /**
     * Method which will be called in case of amendment or increase Budget Set or not
     */
    public void amendCurrBdgt() {
        /*
         * p_sloc_id NUMBER,
        P_CLDID    IN VARCHAR2,
        P_HO_ORGID IN VARCHAR2,
        p_org_id         VARCHAR2,
        p_doc_id         VARCHAR2,
        p_usr_id    NUMBER,
        p_usr_dt    DATE,
        P_EO_ID        NUMBER,
        P_REGION       VARCHAR2,
        P_FY_ID        NUMBER,
        P_Bdg_Fy_Id    NUMBER,
        P_Prd_Strt_Dt  DATE,
        P_Prd_End_Dt   DATE
         */

        String docId = (String) this.getBdgFinBudgetVO1().getCurrentRow().getAttribute("DocId");
        /* Integer usrId =
                Integer.parseInt(this.getBdgFinBudgetVO1().getCurrentRow().getAttribute("UsrIdCreate").toString());
             */
        Integer eoId = Integer.parseInt(this.getBdgFinBudgetVO1().getCurrentRow().getAttribute("EoId").toString());
        String region = (String) this.getBdgFinBudgetVO1().getCurrentRow().getAttribute("Region");
        Integer fyId = Integer.parseInt(this.getBdgFinBudgetVO1().getCurrentRow().getAttribute("FyId").toString());
        Integer bdgFyId =
            Integer.parseInt(this.getBdgFinBudgetVO1().getCurrentRow().getAttribute("BdgFyId").toString());
        java.sql.Date stDt = null;
        java.sql.Date enDt = null;
        try {
            stDt = ((Timestamp) this.getBdgFinBudgetVO1().getCurrentRow().getAttribute("PrdStartDt")).dateValue();
            enDt = ((Timestamp) this.getBdgFinBudgetVO1().getCurrentRow().getAttribute("PrdEndDt")).dateValue();

        } catch (SQLException e) {
            e.printStackTrace();
            System.out.println("Exception when cast ");
        }

        String docTxnId = null;
        docTxnId = (String) (callStoredFunction(Types.VARCHAR, "FN_AMEND_FIN_BDG(?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                this.getSlocIdValue(), this.getCldIdValue(), this.getHoOrgIdValue(),
                                                this.getOrgIdValue(), docId, this.getUsrId(),
                                                new Timestamp(System.currentTimeMillis()), eoId, region, fyId, bdgFyId,
                                                stDt, enDt
        }));
        System.out.println("DocTxnId=" + docTxnId);
        filterBdgOnLoad(docTxnId); // filter vo

        this.getBdgFinBudgetDtlVO1().executeQuery();
        this.getBdgFinBudgetVO1().executeQuery();
    }

    /**
     * Method which will check whether user is eligable to edit the Budget Set or not
     */
    public Integer chkBdgSetEligableToEditOrNot() {
        Integer val = 0;
        ViewObjectImpl bdgFinBudgetVO1 = this.getBdgFinBudgetVO1();
        Row currentRow = bdgFinBudgetVO1.getCurrentRow();
        if (currentRow != null) {
            Integer bdgStat = (Integer) currentRow.getAttribute("BudgetStat");
            if (bdgStat == 3) {
                val = 1; // Will let us know budget has been approved and user cannot edit that budget set
            } else if (bdgStat == 2) {
                val = 2; // Budget Set has been forwarded. User cannot edit the budget set
            }
        }
        return val;
    }

    public String getUsrName(Integer usrId) {
        System.out.println("getUsrName");
        this.getLovUsrIdVO1().setNamedWhereClauseParam("slocIdBind", this.getSlocIdValue());
        this.getLovUsrIdVO1().executeQuery();

        Row[] r = this.getLovUsrIdVO1().getFilteredRows("UsrId", usrId);
        if (r.length > 0)
            return (String) r[0].getAttribute("UsrName");
        else
            return null;
    }

    /**
     * Container's getter for LovUsrId1.
     * @return LovUsrId1
     */
    public ViewObjectImpl getLovUsrIdVO1() {
        return (ViewObjectImpl) findViewObject("LovUsrIdVO1");
    }

    /**
     *Following method will filter BDG$FIN$BUDGET Table according to the document Id
     * @param docId
     */
    public void filterBdgOnLoad(String docId) {
        this.getBdgFinBudgetVO1().setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        this.getBdgFinBudgetVO1().setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        this.getBdgFinBudgetVO1().setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        this.getBdgFinBudgetVO1().setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
        this.getBdgFinBudgetVO1().setNamedWhereClauseParam("docIdBind", docId);
        this.getBdgFinBudgetVO1().executeQuery();
        System.out.println("BindVar Value=" + docId);

        executeBdgSalesDistributionMethod(docId);
        executeBdgMaterialDistributionMethod(docId);
    }

    /**
     * Container's getter for TemporaryData1.
     * @return TemporaryData1
     */
    public ViewObjectImpl getTemporaryDataVO1() {
        return (ViewObjectImpl) findViewObject("TemporaryDataVO1");
    }

    /**
     * Container's getter for SearchData1.
     * @return SearchData1
     */
    public ViewObjectImpl getSearchDataVO1() {
        return (ViewObjectImpl) findViewObject("SearchDataVO1");
    }

    /**
     * Method For Search Button in Search Page
     */
    public void searchDataAccordingly() {
        ViewObjectImpl dataVO1 = this.getTemporaryDataVO1();
        Object orgId = dataVO1.getCurrentRow().getAttribute("OrgId");
        Object bdgId = dataVO1.getCurrentRow().getAttribute("BudgetIdTrans");
        Object bdgNm = dataVO1.getCurrentRow().getAttribute("BudgetNmTrans");
        Object fyRange = dataVO1.getCurrentRow().getAttribute("FyRangeTrans");
        Object fromDt = dataVO1.getCurrentRow().getAttribute("FromDateTrans");
        Object endDt = dataVO1.getCurrentRow().getAttribute("ToDateTrans");

        //dataVO1.executeQuery();

        ViewObjectImpl searchDataVO1 = this.getSearchDataVO1();
        searchDataVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        searchDataVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        searchDataVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        searchDataVO1.setNamedWhereClauseParam("BindOrgId", orgId);
        if (bdgId != null) {
            searchDataVO1.setNamedWhereClauseParam("BindBdgId", bdgId);
        } else {
            searchDataVO1.setNamedWhereClauseParam("BindBdgId", null);
        }

        if (fyRange != null) {
            searchDataVO1.setNamedWhereClauseParam("BindBdgFyId", fyRange);
        } else {
            searchDataVO1.setNamedWhereClauseParam("BindBdgFyId", null);
        }

        if (bdgNm != null) {
            searchDataVO1.setNamedWhereClauseParam("BindBdgNm", bdgNm); // Pass BudgetName in Bind Variable
        } else {
            searchDataVO1.setNamedWhereClauseParam("BindBdgNm", null);
        }

        if (fromDt != null) {
            searchDataVO1.setNamedWhereClauseParam("BindStDt", fromDt);
        } else {
            searchDataVO1.setNamedWhereClauseParam("BindStDt", null);
        }

        if (endDt != null) {
            searchDataVO1.setNamedWhereClauseParam("BindEndDt", endDt);
        } else {
            searchDataVO1.setNamedWhereClauseParam("BindEndDt", null);
        }

        searchDataVO1.executeQuery();
    }

    /**
     * Method From Reset Button
     */
    public void resetDataAccordingly() {
        ViewObjectImpl dataVO1 = this.getTemporaryDataVO1();
        dataVO1.reset();
        dataVO1.executeQuery();

        ViewObjectImpl searchDataVO1 = this.getSearchDataVO1();
        searchDataVO1.setNamedWhereClauseParam("BindCldId", "-1");
        searchDataVO1.setNamedWhereClauseParam("BindSlocId", -1);
        searchDataVO1.setNamedWhereClauseParam("BindHoOrgId", "-1");
        searchDataVO1.setNamedWhereClauseParam("BindOrgId", "-1");
        searchDataVO1.setNamedWhereClauseParam("BindBdgId", null);
        searchDataVO1.setNamedWhereClauseParam("BindBdgNm", null);
        searchDataVO1.setNamedWhereClauseParam("BindBdgFyId", null);
        searchDataVO1.setNamedWhereClauseParam("BindStDt", null);
        searchDataVO1.setNamedWhereClauseParam("BindEndDt", null);
        searchDataVO1.executeQuery();

        setBindVariablesTemp();
    }

    /**
     * Method will Set Bind Variables of Search Page and allow users to search data on basis of User Choice
     */
    public void setBindVariablesTemp() {
        ViewObjectImpl dataVO1 = this.getTemporaryDataVO1();
        dataVO1.reset();

        dataVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        dataVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        dataVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        dataVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());

        dataVO1.executeQuery();

        ViewObjectImpl searchDataVO1 = this.getSearchDataVO1();
        searchDataVO1.setNamedWhereClauseParam("BindCldId", "-1");
        searchDataVO1.setNamedWhereClauseParam("BindSlocId", -1);
        searchDataVO1.setNamedWhereClauseParam("BindHoOrgId", "-1");
        searchDataVO1.setNamedWhereClauseParam("BindOrgId", "-1");
        searchDataVO1.executeQuery();
    }

    //------------------------WF Methods--------------------------
    public String getWfNo(Integer sloc_id, String cld_id, String org_id, Integer doc_no) {

        Object obj = callStoredFunction(Types.VARCHAR, "APP.WF_GET_ID(?,?,?,?,?)", new Object[] {
                                        sloc_id, cld_id, org_id, doc_no, 0
        });

        return (String) obj;
    }

    public Integer pendingCheck(Integer SlocId, String CldId, String OrgId, Integer DocNo) {
        System.out.println("pendingCheck");
        Row curr = this.getBdgFinBudgetVO1().getCurrentRow();
        String docIdTxn = curr.getAttribute("DocId").toString();
        Object obj = callStoredFunction(Types.NUMERIC, "APP.WF_GET_CUR_USR(?,?,?,?,?,?)", new Object[] {
                                        SlocId, CldId, OrgId, DocNo, docIdTxn, 0
        });
        Integer usrId = null;
        if (obj != null) {
            usrId = Integer.parseInt(obj.toString());
        }
        return usrId;
    }


    public Integer getUsrLvl(Integer SlocId, String CldId, String OrgId, Integer usr_id, String WfNum, String DocNo) {

        return Integer.parseInt(callStoredFunction(Types.NUMERIC, "APP.WF_GET_USR_LEVEL(?,?,?,?,?,?,?)", new Object[] {
                                                   SlocId, CldId, OrgId, usr_id, WfNum, DocNo, 0
    }).toString());


    }

    public Integer insIntoTxn(Integer sloc_id, String cld_id, String pOrgId, Integer DOC_NO, String WfNum,
                              Integer usr_idFrm, Integer usr_idTo, Integer levelTo, Integer levelFrm, String action,
                              String remark, Number amount, String post) {

        Row curr = this.getBdgFinBudgetVO1().getCurrentRow();
        String docIdTxn = curr.getAttribute("DocId").toString();
        return Integer.parseInt(callStoredFunction(Types.NUMERIC, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                   sloc_id, cld_id, pOrgId, DOC_NO, 0, WfNum, docIdTxn, usr_idFrm,
                                                   usr_idTo, levelFrm, levelTo, action, remark, amount, post
    }).toString());

    }


    public void wfAction(String ret) {
        System.out.println("wfAction Ret =" + ret);
        if (ret != null) {
            if (ret.equals("F")) {
                this.getBdgFinBudgetVO1().getCurrentRow().setAttribute("BudgetStat", 2);
            } else if (ret.equals("R")) {

            } else if (ret.equals("V")) {

            } else if (ret.equals("A")) {
                this.getBdgFinBudgetVO1().getCurrentRow().setAttribute("BudgetStat", 3);
                this.getBdgFinBudgetVO1().getCurrentRow().setAttribute("FreezeFlg", 'Y');

                sendDateFromTempCcToSlsSoCc();
            }
            this.getDBTransaction().commit();
        }
    }
    /// End Of WF Methods

    /**
     * Container's getter for BdgFinBudgetDtl1.
     * @return BdgFinBudgetDtl1
     */
    public ViewObjectImpl getBdgFinBudgetDtlVO2() {
        return (ViewObjectImpl) findViewObject("BdgFinBudgetDtlVO2");
    }


    /**
     * Container's getter for BdgSearchSalesEmpDtl1.
     * @return BdgSearchSalesEmpDtl1
     */
    public ViewObjectImpl getBdgSearchSalesEmpDtlVO1() {
        return (ViewObjectImpl) findViewObject("BdgSearchSalesEmpDtlVO1");
    }

    /**
     * Container's getter for BdgSearchSalesEmpDtl1.
     * @return BdgSearchSalesEmpDtl1
     */
    public ViewObjectImpl getBdgSearchSalesEmpDtlVO2() {
        return (ViewObjectImpl) findViewObject("BdgSearchSalesEmpDtlVO2");
    }

    /**
     * Container's getter for BdgSearchSalesEmpDtlSelfVL1.
     * @return BdgSearchSalesEmpDtlSelfVL1
     */
    public ViewLinkImpl getBdgSearchSalesEmpDtlSelfVL1() {
        return (ViewLinkImpl) findViewLink("BdgSearchSalesEmpDtlSelfVL1");
    }

    /**
     * Methods which will load by default baased on organization
     */
    public void loadSalesBdgOnStartUp() {
        ViewObjectImpl bdgSearchSalesEmpDtlVO1 = this.getBdgSearchSalesEmpDtlVO1();
        bdgSearchSalesEmpDtlVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        bdgSearchSalesEmpDtlVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        bdgSearchSalesEmpDtlVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        bdgSearchSalesEmpDtlVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
        bdgSearchSalesEmpDtlVO1.executeQuery();
    }

    /**
     * Methods which will load by default baased on organization
     */
    public void loadBdgSlsBudgAmtDistribOnStartUp() {
        // System.out.println("*****************8888");
        if (resolvEl("#{pageFlowScope.P_MODE}").equalsIgnoreCase("V")) {
            //  System.out.println("Inside loadBdgSlsBudgAmtDistribOnStartUp");
            ViewObjectImpl amtDistributionVO1 = this.getBdgSlsBudgAmtDistributionVO1();
            amtDistributionVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            amtDistributionVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            amtDistributionVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            amtDistributionVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());

            ViewObjectImpl bdgFinBudgetVO1 = this.getBdgFinBudgetVO1();
            bdgFinBudgetVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            bdgFinBudgetVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            bdgFinBudgetVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            bdgFinBudgetVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
            bdgFinBudgetVO1.setNamedWhereClauseParam("docIdBind", resolvEl("#{pageFlowScope.P_DOC_ID}"));
            bdgFinBudgetVO1.executeQuery();

            Row[] allRowsInRange = bdgFinBudgetVO1.getAllRowsInRange();
            System.out.println("Allrows in loadBdgSlsBudgAmtDistribOnStartUp " + allRowsInRange.length);
            if (allRowsInRange.length > 0) {

                if (allRowsInRange[0].getAttribute("PrdStartDt") != null) {
                    amtDistributionVO1.setNamedWhereClauseParam("BindStDate",
                                                                allRowsInRange[0].getAttribute("PrdStartDt"));
                }
            }
            amtDistributionVO1.executeQuery();

            //System.out.println("Length si s " + amtDistributionVO1.getAllRowsInRange().length);
        } else {
            ViewObjectImpl amtDistributionVO1 = this.getBdgSlsBudgAmtDistributionVO1();
            amtDistributionVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            amtDistributionVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            amtDistributionVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            amtDistributionVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
            amtDistributionVO1.setNamedWhereClauseParam("BindStDate", null);

            amtDistributionVO1.executeQuery();

        }
    }

    /**
     * Container's getter for BdgFinBudgetDtl1.
     * @return BdgFinBudgetDtl1
     */
    public ViewObjectImpl getBdgFinBudgetDtlForSalesVO2() {
        return (ViewObjectImpl) findViewObject("BdgFinBudgetDtlForSalesVO2");
    }

    /**
     * Container's getter for BdgFinBudgetToBdgFinBudgetDtlVL2.
     * @return BdgFinBudgetToBdgFinBudgetDtlVL2
     */
    public ViewLinkImpl getBdgFinBudgetToBdgFinBudgetDtlVL2() {
        return (ViewLinkImpl) findViewLink("BdgFinBudgetToBdgFinBudgetDtlVL2");
    }

    /**
     * Method which will filter data of employee item details acccording to selection
     */
    public void filterEmpDetailInSales(Integer eoId) {
        System.out.println("EoId is " + eoId);
        ViewObjectImpl bdgFinBudgetDtlForSalesVO2 = this.getBdgFinBudgetDtlForSalesVO2();
        bdgFinBudgetDtlForSalesVO2.setNamedWhereClauseParam("BindBudgetType", 1);

        bdgFinBudgetDtlForSalesVO2.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        bdgFinBudgetDtlForSalesVO2.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        bdgFinBudgetDtlForSalesVO2.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        bdgFinBudgetDtlForSalesVO2.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
        if (this.getBdgFinBudgetVO1().getCurrentRow() != null) {
            bdgFinBudgetDtlForSalesVO2.setNamedWhereClauseParam("BindDocId",
                                                                this.getBdgFinBudgetVO1().getCurrentRow().getAttribute("DocId"));

            bdgFinBudgetDtlForSalesVO2.setNamedWhereClauseParam("BindBdgFyId",
                                                                this.getBdgFinBudgetVO1().getCurrentRow().getAttribute("BdgFyId"));
        }
        bdgFinBudgetDtlForSalesVO2.setNamedWhereClauseParam("BindEoId", eoId);
        bdgFinBudgetDtlForSalesVO2.executeQuery();
    }

    /**
     * Container's getter for MonthlyBudget1.
     * @return MonthlyBudget1
     */
    public ViewObjectImpl getMonthlyBudgetVO1() {
        return (ViewObjectImpl) findViewObject("MonthlyBudgetVO1");
    }

    /**
     * Methods which will load by default baased on organization
     */
    public void loadMonthlyBdgOnStartUp() {
        System.out.println("loadMonthlyBdgOnStartUp Mode value is " + resolvEl("#{pageFlowScope.P_MODE}"));
        if (resolvEl("#{pageFlowScope.P_MODE}").equalsIgnoreCase("V")) {

            ViewObjectImpl budgetVO1 = this.getMonthlyBudgetVO1();
            budgetVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            budgetVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            budgetVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            budgetVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());

            ViewObjectImpl bdgFinBudgetVO1 = this.getBdgFinBudgetVO1();
            bdgFinBudgetVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            bdgFinBudgetVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            bdgFinBudgetVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            bdgFinBudgetVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
            bdgFinBudgetVO1.setNamedWhereClauseParam("docIdBind", resolvEl("#{pageFlowScope.P_DOC_ID}"));
            bdgFinBudgetVO1.executeQuery();

            Row[] allRowsInRange = bdgFinBudgetVO1.getAllRowsInRange();
            System.out.println("All Rows is " + allRowsInRange.length + " EoId " +
                               allRowsInRange[0].getAttribute("EoId") + " stDat " +
                               allRowsInRange[0].getAttribute("PrdStartDt") + " end " +
                               allRowsInRange[0].getAttribute("PrdEndDt"));
            if (allRowsInRange.length > 0) {
                if (allRowsInRange[0].getAttribute("EoId") != null) {
                    budgetVO1.setNamedWhereClauseParam("BindEmpCode", allRowsInRange[0].getAttribute("EoId"));
                }

                if (allRowsInRange[0].getAttribute("PrdStartDt") != null) {
                    budgetVO1.setNamedWhereClauseParam("BindStartDt", allRowsInRange[0].getAttribute("PrdStartDt"));
                }

                if (allRowsInRange[0].getAttribute("PrdEndDt") != null) {
                    budgetVO1.setNamedWhereClauseParam("BindEndDt", allRowsInRange[0].getAttribute("PrdEndDt"));
                }
            }
            /*         System.out.println("Current row is " + allRowsInRange[0]);
        System.out.println("Cld Id " + this.getCldIdValue() + " slocid " + this.getSlocIdValue() + "' ho " +
                           this.getHoOrgIdValue() + " org " + this.getOrgIdValue() + " eoId " +
                           allRowsInRange[0].getAttribute("EoId") + " st " +
                           allRowsInRange[0].getAttribute("PrdStartDt") + " end " +
                           allRowsInRange[0].getAttribute("PrdEndDt")); */
            budgetVO1.executeQuery();
            System.out.println("Length is " + budgetVO1.getAllRowsInRange().length);
        } else {
            ViewObjectImpl budgetVO1 = this.getMonthlyBudgetVO1();
            budgetVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            budgetVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            budgetVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            budgetVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
            budgetVO1.setNamedWhereClauseParam("BindEmpCode", null);
            budgetVO1.setNamedWhereClauseParam("BindStartDt", null);
            budgetVO1.setNamedWhereClauseParam("BindEndDt", null);

            budgetVO1.executeQuery();
        }
    }

    /**
     * Method which will call again the VO Based on the tab which is been disclosed
     */
    private void executeVoBasedOnTabDisclosed(Integer tabId) {
        if (tabId == 1) { /// Means Sales Tab has been expanded
            ViewObjectImpl amtDistributionVO1 = this.getBdgSlsBudgAmtDistributionVO1();
            amtDistributionVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            amtDistributionVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            amtDistributionVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            amtDistributionVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
            amtDistributionVO1.setNamedWhereClauseParam("BindStDate",
                                                        this.getBdgFinBudgetVO1().getCurrentRow().getAttribute("PrdStartDt"));

            amtDistributionVO1.executeQuery();


            ViewObjectImpl budgetVO1 = this.getMonthlyBudgetVO1();
            budgetVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            budgetVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            budgetVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            budgetVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
            budgetVO1.setNamedWhereClauseParam("BindEmpCode",
                                               this.getBdgFinBudgetVO1().getCurrentRow().getAttribute("EoId"));
            budgetVO1.setNamedWhereClauseParam("BindStartDt",
                                               this.getBdgFinBudgetVO1().getCurrentRow().getAttribute("PrdStartDt"));
            budgetVO1.setNamedWhereClauseParam("BindEndDt",
                                               this.getBdgFinBudgetVO1().getCurrentRow().getAttribute("PrdEndDt"));

            budgetVO1.executeQuery();


            ViewObjectImpl bdgSalesComparisionVO1 = this.getBdgSalesComparisionVO1();
            bdgSalesComparisionVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            bdgSalesComparisionVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            bdgSalesComparisionVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            bdgSalesComparisionVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
            bdgSalesComparisionVO1.setNamedWhereClauseParam("BindPrdStDt",
                                                            this.getBdgFinBudgetVO1().getCurrentRow().getAttribute("PrdStartDt"));

            budgetVO1.executeQuery();

            ViewObjectImpl amtCompVO1 = this.getBdgSlsBudgetAmtCompVO1();
            amtCompVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            amtCompVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            amtCompVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            amtCompVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
            amtCompVO1.setNamedWhereClauseParam("BindStDate",
                                                this.getBdgFinBudgetVO1().getCurrentRow().getAttribute("PrdStartDt"));
            amtCompVO1.setNamedWhereClauseParam("BindEoId",
                                                this.getBdgFinBudgetVO1().getCurrentRow().getAttribute("EoId"));

            amtCompVO1.executeQuery();

        } else if (tabId == 2) {
            ViewObjectImpl headMtlRegionMonthSummVWVO1 = this.getHeadMtlRegionMonthSummVWVO1();
            headMtlRegionMonthSummVWVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            headMtlRegionMonthSummVWVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            headMtlRegionMonthSummVWVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            headMtlRegionMonthSummVWVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
            headMtlRegionMonthSummVWVO1.setNamedWhereClauseParam("BindStDate",
                                                                 this.getBdgFinBudgetVO1().getCurrentRow().getAttribute("PrdStartDt"));
            headMtlRegionMonthSummVWVO1.setNamedWhereClauseParam("BindEndDate",
                                                                 this.getBdgFinBudgetVO1().getCurrentRow().getAttribute("PrdEndDt"));

            headMtlRegionMonthSummVWVO1.executeQuery();


            ViewObjectImpl bdgMtlRegionWiseSummVO1 = this.getBdgMtlRegionWiseSummVO1();
            bdgMtlRegionWiseSummVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            bdgMtlRegionWiseSummVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            bdgMtlRegionWiseSummVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            bdgMtlRegionWiseSummVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
            bdgMtlRegionWiseSummVO1.setNamedWhereClauseParam("BindStDate",
                                                             this.getBdgFinBudgetVO1().getCurrentRow().getAttribute("PrdStartDt"));
            bdgMtlRegionWiseSummVO1.setNamedWhereClauseParam("BindEndDate",
                                                             this.getBdgFinBudgetVO1().getCurrentRow().getAttribute("PrdEndDt"));

            bdgMtlRegionWiseSummVO1.executeQuery();

            ViewObjectImpl bdgMtlItemComparisonVO1 = this.getBdgMtlItemComparisonVO1();
            bdgMtlItemComparisonVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            bdgMtlItemComparisonVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            bdgMtlItemComparisonVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            bdgMtlItemComparisonVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
            bdgMtlItemComparisonVO1.setNamedWhereClauseParam("BindStDate",
                                                             this.getBdgFinBudgetVO1().getCurrentRow().getAttribute("PrdStartDt"));

            bdgMtlItemComparisonVO1.executeQuery();

            ViewObjectImpl bdgMtlRegionWiseCompVO1 = this.getBdgMtlRegionWiseCompVO1();
            bdgMtlRegionWiseCompVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            bdgMtlRegionWiseCompVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            bdgMtlRegionWiseCompVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            bdgMtlRegionWiseCompVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
            bdgMtlRegionWiseCompVO1.setNamedWhereClauseParam("BindStDate",
                                                             this.getBdgFinBudgetVO1().getCurrentRow().getAttribute("PrdStartDt"));

            bdgMtlRegionWiseCompVO1.executeQuery();

            ViewObjectImpl amtCompVO1 = this.getBdgMtlBudgetAmtCompVO1();
            amtCompVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            amtCompVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            amtCompVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            amtCompVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
            amtCompVO1.setNamedWhereClauseParam("BindStDate",
                                                this.getBdgFinBudgetVO1().getCurrentRow().getAttribute("PrdStartDt"));

            amtCompVO1.executeQuery();

        }
    }

    /**
     * Container's getter for BdgFinBudgetPrdDtl1.
     * @return BdgFinBudgetPrdDtl1
     */
    public ViewObjectImpl getBdgFinBudgetPrdDtlVO1() {
        return (ViewObjectImpl) findViewObject("BdgFinBudgetPrdDtlVO1");
    }

    /**
     * Container's getter for BdgFinBudgetToBdgFinBudgetPrdDtlVL1.
     * @return BdgFinBudgetToBdgFinBudgetPrdDtlVL1
     */
    public ViewLinkImpl getBdgFinBudgetToBdgFinBudgetPrdDtlVL1() {
        return (ViewLinkImpl) findViewLink("BdgFinBudgetToBdgFinBudgetPrdDtlVL1");
    }

    /**
     * Method to process distribution method into equal, fixed, ascending, descending
     * daily, weekly, quarterly, halfyearly
     */
    public void distributeBudgetAmtPeriodWise() {
        String val = null;

        ViewObjectImpl bdgFinBudgetVO1 = this.getBdgFinBudgetVO1();
        Row currentRow = bdgFinBudgetVO1.getCurrentRow();
        if (currentRow != null) {
            try {
                /// Function which will insert data into BDG$EO$BUDGET$PROD$PRD$DTL table
                /* p_cld_id varchar2,
                    p_sloc_id number,
                    p_org_id varchar2,
                    p_ho_org_id varchar2,
                    p_DOC_ID varchar2,
                    p_PRD_START_DT date,
                    p_PRD_END_DT date,
                    p_EO_ID number,
                    p_dist_prd_basis number,--1 for daily,2 for weekly,3 for quarterly,4 halfyearly,5 monthly
                    p_usr_id number,
                    p_BUDG_AMT number,
                    p_dist_basis number)--1 for equal
                    */
                this.getBdgFinBudgetPrdDtlVO1().clearCache();
                this.getBdgFinBudgetPrdDtlVO1().executeQuery();

                deleteBudgetAmtPeriodWise();

                this.getBdgFinBudgetPrdDtlVO1().executeQuery();

                //this.getDBTransaction().postChanges();

                val = (String) this.callStoredFunction(Types.VARCHAR, "FN_FIN_INS_PRD(?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                       this.getCldIdValue(), this.getSlocIdValue(),
                                                       this.getOrgIdValue(), this.getHoOrgIdValue(),
                                                       currentRow.getAttribute("DocId"),
                                                       currentRow.getAttribute("PrdStartDt"),
                                                       currentRow.getAttribute("PrdEndDt"),
                                                       currentRow.getAttribute("EoId"),
                                                       currentRow.getAttribute("DistbPrdBasis"), this.getUsrId(),
                                                       currentRow.getAttribute("TotalAmtTrans"), 1
                });
                System.out.println("Return value is " + val);
            } catch (Exception e) {
                e.printStackTrace();
                System.out.println("ERROR IN CALLING FUNCTION FN_INS_PRD at BdgEoBudgetAmImpl :" + e.getMessage());
            }
            this.getBdgFinBudgetPrdDtlVO1().executeQuery();
        }
    }

    /***
     * Method which will delete records which belong to documentId and Period Id in item period Detail Table
     * BDG$EO$BUDGET$PRD$DTL
     */
    protected void deleteBudgetAmtPeriodWise() {
        /// Function which will delete data first from BDG$EO$BUDGET$PROD$PRD$DTL table
        /*  p_cld_id varchar2,
            p_sloc_id number,
            p_org_id varchar2,
            p_ho_org_id varchar2,
            p_DOC_ID varchar2,
            p_PRD_START_DT date,
            p_PRD_END_DT date,
            p_EO_ID number
             */
        ViewObjectImpl bdgFinBudgetVO1 = this.getBdgFinBudgetVO1();
        Row currentRow = bdgFinBudgetVO1.getCurrentRow();
        if (currentRow != null) {
            String retVal = null;
            try {

                retVal = (String) this.callStoredFunction(Types.VARCHAR, "FN_FIN_DEL_PRD(?,?,?,?,?,?,?,?)", new Object[] {
                                                          this.getCldIdValue(), this.getSlocIdValue(),
                                                          this.getOrgIdValue(), this.getHoOrgIdValue(),
                                                          currentRow.getAttribute("DocId"),
                                                          currentRow.getAttribute("PrdStartDt"),
                                                          currentRow.getAttribute("PrdEndDt"),
                                                          currentRow.getAttribute("EoId")
                });
            } catch (Exception e) {
                e.printStackTrace();
                System.out.println("Error in calling function FN_DEL_PRD in AMIMPL " + e.getMessage());
            }
            System.out.println("Return value is --->" + retVal);
            this.getBdgFinBudgetPrdDtlVO1().executeQuery();
        }
    }

    /**
     * Container's getter for MaterialBudgetDtl1.
     * @return MaterialBudgetDtl1
     */
    public ViewObjectImpl getMaterialBudgetDtlVO1() {
        return (ViewObjectImpl) findViewObject("MaterialBudgetDtlVO1");
    }

    /**
     * Container's getter for BdgFinBudgetToMaterialBudgetDtlVL1.
     * @return BdgFinBudgetToMaterialBudgetDtlVL1
     */
    public ViewLinkImpl getBdgFinBudgetToMaterialBudgetDtlVL1() {
        return (ViewLinkImpl) findViewLink("BdgFinBudgetToMaterialBudgetDtlVL1");
    }

    /**
     * Container's getter for BdgSalesComparision1.
     * @return BdgSalesComparision1
     */
    public ViewObjectImpl getBdgSalesComparisionVO1() {
        return (ViewObjectImpl) findViewObject("BdgSalesComparisionVO1");
    }

    /**
     * Methods which will load by default baased on organization
     */
    public void loadSlsComparisionBdgOnStartUp() {
        System.out.println("Mode value is " + resolvEl("#{pageFlowScope.P_MODE}"));
        if (resolvEl("#{pageFlowScope.P_MODE}").equalsIgnoreCase("V")) {

            ViewObjectImpl budgetVO1 = this.getBdgSalesComparisionVO1();
            budgetVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            budgetVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            budgetVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            budgetVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());

            ViewObjectImpl bdgFinBudgetVO1 = this.getBdgFinBudgetVO1();
            bdgFinBudgetVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            bdgFinBudgetVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            bdgFinBudgetVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            bdgFinBudgetVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
            bdgFinBudgetVO1.setNamedWhereClauseParam("docIdBind", resolvEl("#{pageFlowScope.P_DOC_ID}"));
            bdgFinBudgetVO1.executeQuery();

            Row[] allRowsInRange = bdgFinBudgetVO1.getAllRowsInRange();

            if (allRowsInRange.length > 0) {

                if (allRowsInRange[0].getAttribute("PrdStartDt") != null) {
                    budgetVO1.setNamedWhereClauseParam("BindPrdStDt", allRowsInRange[0].getAttribute("PrdStartDt"));
                }
            }
            /*         System.out.println("Current row is " + allRowsInRange[0]);
        System.out.println("Cld Id " + this.getCldIdValue() + " slocid " + this.getSlocIdValue() + "' ho " +
                           this.getHoOrgIdValue() + " org " + this.getOrgIdValue() + " eoId " +
                           allRowsInRange[0].getAttribute("EoId") + " st " +
                           allRowsInRange[0].getAttribute("PrdStartDt") + " end " +
                           allRowsInRange[0].getAttribute("PrdEndDt")); */
            budgetVO1.executeQuery();
            System.out.println("Length is " + budgetVO1.getAllRowsInRange().length);
        } else {
            ViewObjectImpl budgetVO1 = this.getBdgSalesComparisionVO1();
            budgetVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            budgetVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            budgetVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            budgetVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
            budgetVO1.setNamedWhereClauseParam("BindPrdStDt", null);

            budgetVO1.executeQuery();
        }
    }


    /**
     * Methods which will load by default baased on organization
     */
    public void loadMtlRegionMonthSummBdgOnStartUp() {
        System.out.println("Mode value is " + resolvEl("#{pageFlowScope.P_MODE}"));
        if (resolvEl("#{pageFlowScope.P_MODE}").equalsIgnoreCase("V")) {
            ViewObjectImpl bdgFinBudgetVO1 = this.getBdgFinBudgetVO1();
            bdgFinBudgetVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            bdgFinBudgetVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            bdgFinBudgetVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            bdgFinBudgetVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
            bdgFinBudgetVO1.setNamedWhereClauseParam("docIdBind", resolvEl("#{pageFlowScope.P_DOC_ID}"));
            bdgFinBudgetVO1.executeQuery();

            Row[] allRowsInRange = bdgFinBudgetVO1.getAllRowsInRange();

            ViewObjectImpl headMtlRegionMonthSummVWVO1 = this.getHeadMtlRegionMonthSummVWVO1();
            headMtlRegionMonthSummVWVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            headMtlRegionMonthSummVWVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            headMtlRegionMonthSummVWVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            headMtlRegionMonthSummVWVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());

            if (allRowsInRange.length > 0) {

                if (allRowsInRange[0].getAttribute("PrdStartDt") != null) {
                    headMtlRegionMonthSummVWVO1.setNamedWhereClauseParam("BindStDate",
                                                                         allRowsInRange[0].getAttribute("PrdStartDt"));
                }

                if (allRowsInRange[0].getAttribute("PrdEndDt") != null) {
                    headMtlRegionMonthSummVWVO1.setNamedWhereClauseParam("BindEndDate",
                                                                         allRowsInRange[0].getAttribute("PrdEndDt"));
                }
            }

            headMtlRegionMonthSummVWVO1.executeQuery();

            /*         System.out.println("Current row is " + allRowsInRange[0]);
        System.out.println("Cld Id " + this.getCldIdValue() + " slocid " + this.getSlocIdValue() + "' ho " +
                           this.getHoOrgIdValue() + " org " + this.getOrgIdValue() + " eoId " +
                           allRowsInRange[0].getAttribute("EoId") + " st " +
                           allRowsInRange[0].getAttribute("PrdStartDt") + " end " +
                           allRowsInRange[0].getAttribute("PrdEndDt")); */
            System.out.println("Length is " + headMtlRegionMonthSummVWVO1.getAllRowsInRange().length);
        } else {
            ViewObjectImpl headMtlRegionMonthSummVWVO1 = this.getHeadMtlRegionMonthSummVWVO1();
            headMtlRegionMonthSummVWVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            headMtlRegionMonthSummVWVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            headMtlRegionMonthSummVWVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            headMtlRegionMonthSummVWVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
            headMtlRegionMonthSummVWVO1.setNamedWhereClauseParam("BindStDate", null);
            headMtlRegionMonthSummVWVO1.setNamedWhereClauseParam("BindEndDate", null);

            headMtlRegionMonthSummVWVO1.executeQuery();

            ViewObjectImpl budgetVO1 = this.getBdgMtlRegionMonthSummVO1();
            budgetVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            budgetVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            budgetVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            budgetVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
            budgetVO1.setNamedWhereClauseParam("BindEoId", null);
            budgetVO1.setNamedWhereClauseParam("BindStDate", null);
            budgetVO1.setNamedWhereClauseParam("BindEndDate", null);

            budgetVO1.executeQuery();
        }
    }

    /**
     * Container's getter for BdgMtlRegionWiseSumm1.
     * @return BdgMtlRegionWiseSumm1
     */
    public ViewObjectImpl getBdgMtlRegionWiseSummVO1() {
        return (ViewObjectImpl) findViewObject("BdgMtlRegionWiseSummVO1");
    }

    /**
     * Methods which will load by default baased on organization
     */
    public void loadMtlRegionWiseSummBdgOnStartUp() {
        System.out.println("Mode value is " + resolvEl("#{pageFlowScope.P_MODE}"));
        if (resolvEl("#{pageFlowScope.P_MODE}").equalsIgnoreCase("V")) {

            ViewObjectImpl budgetVO1 = this.getBdgMtlRegionWiseSummVO1();
            budgetVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            budgetVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            budgetVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            budgetVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());

            ViewObjectImpl bdgFinBudgetVO1 = this.getBdgFinBudgetVO1();
            bdgFinBudgetVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            bdgFinBudgetVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            bdgFinBudgetVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            bdgFinBudgetVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
            bdgFinBudgetVO1.setNamedWhereClauseParam("docIdBind", resolvEl("#{pageFlowScope.P_DOC_ID}"));
            bdgFinBudgetVO1.executeQuery();

            Row[] allRowsInRange = bdgFinBudgetVO1.getAllRowsInRange();
            System.out.println("AllWors is loadMtlRegionWiseSummBdgOnStartUp " + allRowsInRange.length);
            if (allRowsInRange.length > 0) {

                if (allRowsInRange[0].getAttribute("PrdStartDt") != null) {
                    budgetVO1.setNamedWhereClauseParam("BindStDate", allRowsInRange[0].getAttribute("PrdStartDt"));
                }

                if (allRowsInRange[0].getAttribute("PrdEndDt") != null) {
                    budgetVO1.setNamedWhereClauseParam("BindEndDate", allRowsInRange[0].getAttribute("PrdEndDt"));
                }
            }
            /*         System.out.println("Current row is " + allRowsInRange[0]);
        System.out.println("Cld Id " + this.getCldIdValue() + " slocid " + this.getSlocIdValue() + "' ho " +
                           this.getHoOrgIdValue() + " org " + this.getOrgIdValue() + " eoId " +
                           allRowsInRange[0].getAttribute("EoId") + " st " +
                           allRowsInRange[0].getAttribute("PrdStartDt") + " end " +
                           allRowsInRange[0].getAttribute("PrdEndDt")); */
            budgetVO1.executeQuery();
            System.out.println("Length is " + budgetVO1.getAllRowsInRange().length);
        } else {
            ViewObjectImpl budgetVO1 = this.getBdgMtlRegionWiseSummVO1();
            budgetVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            budgetVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            budgetVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            budgetVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
            budgetVO1.setNamedWhereClauseParam("BindStDate", null);
            budgetVO1.setNamedWhereClauseParam("BindEndDate", null);

            budgetVO1.executeQuery();
        }
    }


    /**
     * Container's getter for BdgPNL1.
     * @return BdgPNL1
     */
    public ViewObjectImpl getBdgPNLVO2() {
        return (ViewObjectImpl) findViewObject("BdgPNLVO2");
    }

    /**
     * Container's getter for BdgMtlItemComparison1.
     * @return BdgMtlItemComparison1
     */
    public ViewObjectImpl getBdgMtlItemComparisonVO1() {
        return (ViewObjectImpl) findViewObject("BdgMtlItemComparisonVO1");
    }

    /**
     * Methods which will load by default baased on organization
     */
    public void loadMtlItmComparisonBdgOnStartUp() {
        System.out.println("Mode value is " + resolvEl("#{pageFlowScope.P_MODE}"));
        if (resolvEl("#{pageFlowScope.P_MODE}").equalsIgnoreCase("V")) {

            ViewObjectImpl budgetVO1 = this.getBdgMtlItemComparisonVO1();
            budgetVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            budgetVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            budgetVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            budgetVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());

            ViewObjectImpl bdgFinBudgetVO1 = this.getBdgFinBudgetVO1();
            bdgFinBudgetVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            bdgFinBudgetVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            bdgFinBudgetVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            bdgFinBudgetVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
            bdgFinBudgetVO1.setNamedWhereClauseParam("docIdBind", resolvEl("#{pageFlowScope.P_DOC_ID}"));
            bdgFinBudgetVO1.executeQuery();

            Row[] allRowsInRange = bdgFinBudgetVO1.getAllRowsInRange();

            if (allRowsInRange.length > 0) {

                if (allRowsInRange[0].getAttribute("PrdStartDt") != null) {
                    budgetVO1.setNamedWhereClauseParam("BindStDate", allRowsInRange[0].getAttribute("PrdStartDt"));
                }

            }
            /*         System.out.println("Current row is " + allRowsInRange[0]);
        System.out.println("Cld Id " + this.getCldIdValue() + " slocid " + this.getSlocIdValue() + "' ho " +
                           this.getHoOrgIdValue() + " org " + this.getOrgIdValue() + " eoId " +
                           allRowsInRange[0].getAttribute("EoId") + " st " +
                           allRowsInRange[0].getAttribute("PrdStartDt") + " end " +
                           allRowsInRange[0].getAttribute("PrdEndDt")); */
            budgetVO1.executeQuery();
            System.out.println("Length is " + budgetVO1.getAllRowsInRange().length);
        } else {
            ViewObjectImpl budgetVO1 = this.getBdgMtlItemComparisonVO1();
            budgetVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            budgetVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            budgetVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            budgetVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
            budgetVO1.setNamedWhereClauseParam("BindStDate", null);

            budgetVO1.executeQuery();
        }
    }

    /**
     * Container's getter for BdgMtlRegionWiseComp1.
     * @return BdgMtlRegionWiseComp1
     */
    public ViewObjectImpl getBdgMtlRegionWiseCompVO1() {
        return (ViewObjectImpl) findViewObject("BdgMtlRegionWiseCompVO1");
    }

    /**
     * Methods which will load by default baased on organization
     */
    public void loadMtlRegionWiseCompBdgOnStartUp() {
        System.out.println("Mode value is " + resolvEl("#{pageFlowScope.P_MODE}"));
        if (resolvEl("#{pageFlowScope.P_MODE}").equalsIgnoreCase("V")) {

            ViewObjectImpl budgetVO1 = this.getBdgMtlRegionWiseCompVO1();
            budgetVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            budgetVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            budgetVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            budgetVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());

            ViewObjectImpl bdgFinBudgetVO1 = this.getBdgFinBudgetVO1();
            bdgFinBudgetVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            bdgFinBudgetVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            bdgFinBudgetVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            bdgFinBudgetVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
            bdgFinBudgetVO1.setNamedWhereClauseParam("docIdBind", resolvEl("#{pageFlowScope.P_DOC_ID}"));
            bdgFinBudgetVO1.executeQuery();

            Row[] allRowsInRange = bdgFinBudgetVO1.getAllRowsInRange();

            if (allRowsInRange.length > 0) {

                if (allRowsInRange[0].getAttribute("PrdStartDt") != null) {
                    budgetVO1.setNamedWhereClauseParam("BindStDate", allRowsInRange[0].getAttribute("PrdStartDt"));
                }

            }
            /*         System.out.println("Current row is " + allRowsInRange[0]);
        System.out.println("Cld Id " + this.getCldIdValue() + " slocid " + this.getSlocIdValue() + "' ho " +
                           this.getHoOrgIdValue() + " org " + this.getOrgIdValue() + " eoId " +
                           allRowsInRange[0].getAttribute("EoId") + " st " +
                           allRowsInRange[0].getAttribute("PrdStartDt") + " end " +
                           allRowsInRange[0].getAttribute("PrdEndDt")); */
            budgetVO1.executeQuery();
            System.out.println("Length is " + budgetVO1.getAllRowsInRange().length);
        } else {
            ViewObjectImpl budgetVO1 = this.getBdgMtlRegionWiseCompVO1();
            budgetVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            budgetVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            budgetVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            budgetVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
            budgetVO1.setNamedWhereClauseParam("BindStDate", null);

            budgetVO1.executeQuery();
        }
    }

    /**
     * Container's getter for BdgSlsBudgetAmtComp1.
     * @return BdgSlsBudgetAmtComp1
     */
    public ViewObjectImpl getBdgSlsBudgetAmtCompVO1() {
        return (ViewObjectImpl) findViewObject("BdgSlsBudgetAmtCompVO1");
    }

    /**
     * Methods which will load by default baased on organization
     */
    public void loadBdgSlsBudgetAmtCompOnStartUp() {
        System.out.println("Mode value is " + resolvEl("#{pageFlowScope.P_MODE}"));
        if (resolvEl("#{pageFlowScope.P_MODE}").equalsIgnoreCase("V")) {

            ViewObjectImpl budgetVO1 = this.getBdgSlsBudgetAmtCompVO1();
            budgetVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            budgetVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            budgetVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            budgetVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());

            ViewObjectImpl bdgFinBudgetVO1 = this.getBdgFinBudgetVO1();
            bdgFinBudgetVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            bdgFinBudgetVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            bdgFinBudgetVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            bdgFinBudgetVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
            bdgFinBudgetVO1.setNamedWhereClauseParam("docIdBind", resolvEl("#{pageFlowScope.P_DOC_ID}"));
            bdgFinBudgetVO1.executeQuery();

            Row[] allRowsInRange = bdgFinBudgetVO1.getAllRowsInRange();

            if (allRowsInRange.length > 0) {

                if (allRowsInRange[0].getAttribute("EoId") != null) {
                    budgetVO1.setNamedWhereClauseParam("BindEoId", allRowsInRange[0].getAttribute("EoId"));
                }

                if (allRowsInRange[0].getAttribute("PrdStartDt") != null) {
                    budgetVO1.setNamedWhereClauseParam("BindStDate", allRowsInRange[0].getAttribute("PrdStartDt"));
                }

            }
            /*         System.out.println("Current row is " + allRowsInRange[0]);
        System.out.println("Cld Id " + this.getCldIdValue() + " slocid " + this.getSlocIdValue() + "' ho " +
                           this.getHoOrgIdValue() + " org " + this.getOrgIdValue() + " eoId " +
                           allRowsInRange[0].getAttribute("EoId") + " st " +
                           allRowsInRange[0].getAttribute("PrdStartDt") + " end " +
                           allRowsInRange[0].getAttribute("PrdEndDt")); */
            budgetVO1.executeQuery();
            System.out.println("Length is " + budgetVO1.getAllRowsInRange().length);
        } else {
            ViewObjectImpl budgetVO1 = this.getBdgSlsBudgetAmtCompVO1();
            budgetVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            budgetVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            budgetVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            budgetVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
            budgetVO1.setNamedWhereClauseParam("BindStDate", null);
            budgetVO1.setNamedWhereClauseParam("BindEoId", null);

            budgetVO1.executeQuery();
        }
    }

    /**
     * Methods which will load by default baased on organization
     */
    public void loadBdgMtlBudgetAmtCompOnStartUp() {
        System.out.println("Mode value is " + resolvEl("#{pageFlowScope.P_MODE}"));
        if (resolvEl("#{pageFlowScope.P_MODE}").equalsIgnoreCase("V")) {

            ViewObjectImpl budgetVO1 = this.getBdgMtlBudgetAmtCompVO1();
            budgetVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            budgetVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            budgetVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            budgetVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());

            ViewObjectImpl bdgFinBudgetVO1 = this.getBdgFinBudgetVO1();
            bdgFinBudgetVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            bdgFinBudgetVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            bdgFinBudgetVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            bdgFinBudgetVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
            bdgFinBudgetVO1.setNamedWhereClauseParam("docIdBind", resolvEl("#{pageFlowScope.P_DOC_ID}"));
            bdgFinBudgetVO1.executeQuery();

            Row[] allRowsInRange = bdgFinBudgetVO1.getAllRowsInRange();

            if (allRowsInRange.length > 0) {

                if (allRowsInRange[0].getAttribute("PrdStartDt") != null) {
                    budgetVO1.setNamedWhereClauseParam("BindStDate", allRowsInRange[0].getAttribute("PrdStartDt"));
                }

            }
            /*         System.out.println("Current row is " + allRowsInRange[0]);
        System.out.println("Cld Id " + this.getCldIdValue() + " slocid " + this.getSlocIdValue() + "' ho " +
                           this.getHoOrgIdValue() + " org " + this.getOrgIdValue() + " eoId " +
                           allRowsInRange[0].getAttribute("EoId") + " st " +
                           allRowsInRange[0].getAttribute("PrdStartDt") + " end " +
                           allRowsInRange[0].getAttribute("PrdEndDt")); */
            budgetVO1.executeQuery();
            System.out.println("Length is " + budgetVO1.getAllRowsInRange().length);
        } else {
            ViewObjectImpl budgetVO1 = this.getBdgMtlBudgetAmtCompVO1();
            budgetVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            budgetVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            budgetVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            budgetVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
            budgetVO1.setNamedWhereClauseParam("BindStDate", null);

            budgetVO1.executeQuery();
        }
    }

    /**
     * Method which will load the PNL based on selection
     */
    public void loadPNLVWOnPageLoad() {
        ViewObjectImpl bdgExpenseSummVO1 = this.getBdgExpenseSummVO2();
        bdgExpenseSummVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        bdgExpenseSummVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        bdgExpenseSummVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        bdgExpenseSummVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
        bdgExpenseSummVO1.executeQuery();

        ViewObjectImpl bdgIncomeSummVO1 = this.getBdgIncomeSummVO2();
        bdgIncomeSummVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        bdgIncomeSummVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        bdgIncomeSummVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        bdgIncomeSummVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
        bdgIncomeSummVO1.executeQuery();

        ViewObjectImpl bdgOthersExpenseSummVO1 = this.getBdgOthersExpenseSummVO1();
        bdgOthersExpenseSummVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        bdgOthersExpenseSummVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        bdgOthersExpenseSummVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        bdgOthersExpenseSummVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
        bdgOthersExpenseSummVO1.executeQuery();

        ViewObjectImpl bdgOthersIncomeSummVO1 = this.getBdgOthersIncomeSummVO1();
        bdgOthersIncomeSummVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        bdgOthersIncomeSummVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        bdgOthersIncomeSummVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        bdgOthersIncomeSummVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
        bdgOthersIncomeSummVO1.executeQuery();
    }

    public void loadPNLDynamicPage(String cldId, String orgId, Integer slocId, Integer usrId, String hoOrgId) {
        this.getBdgOrgStructure().setNamedWhereClauseParam("orgIdBindVar", orgId);
        this.getBdgOrgStructure().executeQuery();
        this.getLovOrganization().setNamedWhereClauseParam("HoOrgIdBind", hoOrgId);
        this.getLovOrganization().executeQuery();
        System.out.println("Value of global parameter=> is expanded=" + resolvEl("#{pageFlowScope.P_IS_EXPANDED}"));
        //For Sales Target
        this.getBdgFinRevAmtHeadVw().setNamedWhereClauseParam("CldIdBind", this.getCldIdValue());
        this.getBdgFinRevAmtHeadVw().setNamedWhereClauseParam("HoOrgIdBind", this.getHoOrgIdValue());
        this.getBdgFinRevAmtHeadVw().setNamedWhereClauseParam("OrgIdBind", this.getOrgIdValue());
        this.getBdgFinRevAmtHeadVw().setNamedWhereClauseParam("SlocIdBind", this.getSlocIdValue());
        this.getBdgFinRevAmtHeadVw().setNamedWhereClauseParam("DocStructBind", 1);
        if (this.getBdgFinBudgetVO1().getCurrentRow() != null) {
            this.getBdgFinRevAmtHeadVw().setNamedWhereClauseParam("PrdStartDtBind",
                                                                  this.getBdgFinBudgetVO1().getCurrentRow().getAttribute("PrdStartDt"));
            this.getBdgFinRevAmtHeadVw().setNamedWhereClauseParam("PrdEndDtBind",
                                                                  this.getBdgFinBudgetVO1().getCurrentRow().getAttribute("PrdEndDt"));
        }
        this.getBdgFinRevAmtHeadVw().executeQuery();

        //For Material Cost
        this.getBdgFinMtlCostHeadVw().setNamedWhereClauseParam("CldIdBind", this.getCldIdValue());
        this.getBdgFinMtlCostHeadVw().setNamedWhereClauseParam("HoOrgIdBind", this.getHoOrgIdValue());
        this.getBdgFinMtlCostHeadVw().setNamedWhereClauseParam("OrgIdBind", this.getOrgIdValue());
        this.getBdgFinMtlCostHeadVw().setNamedWhereClauseParam("SlocIdBind", this.getSlocIdValue());
        this.getBdgFinMtlCostHeadVw().setNamedWhereClauseParam("DocStructBind", 1);
        if (this.getBdgFinBudgetVO1().getCurrentRow() != null) {
            this.getBdgFinMtlCostHeadVw().setNamedWhereClauseParam("PrdStartDtBind",
                                                                   this.getBdgFinBudgetVO1().getCurrentRow().getAttribute("PrdStartDt"));
            this.getBdgFinMtlCostHeadVw().setNamedWhereClauseParam("PrdEndDtBind",
                                                                   this.getBdgFinBudgetVO1().getCurrentRow().getAttribute("PrdEndDt"));
        }
        this.getBdgFinMtlCostHeadVw().executeQuery();

        //For Other Revenue
        this.getBdgFinOtherRevAmtHead().setNamedWhereClauseParam("CldIdBind", this.getCldIdValue());
        this.getBdgFinOtherRevAmtHead().setNamedWhereClauseParam("HoOrgIdBind", this.getHoOrgIdValue());
        this.getBdgFinOtherRevAmtHead().setNamedWhereClauseParam("OrgIdBind", this.getOrgIdValue());
        this.getBdgFinOtherRevAmtHead().setNamedWhereClauseParam("SlocIdBind", this.getSlocIdValue());
        this.getBdgFinOtherRevAmtHead().setNamedWhereClauseParam("DocStructBind", 1);
        if (this.getBdgFinBudgetVO1().getCurrentRow() != null) {
            this.getBdgFinOtherRevAmtHead().setNamedWhereClauseParam("PrdStartDtBind",
                                                                     this.getBdgFinBudgetVO1().getCurrentRow().getAttribute("PrdStartDt"));
            this.getBdgFinOtherRevAmtHead().setNamedWhereClauseParam("PrdEndDtBind",
                                                                     this.getBdgFinBudgetVO1().getCurrentRow().getAttribute("PrdEndDt"));
        }
        this.getBdgFinOtherRevAmtHead().executeQuery();

        //For Other Expenses
        this.getBdgFinOtherExpAmtHead().setNamedWhereClauseParam("CldIdBind", this.getCldIdValue());
        this.getBdgFinOtherExpAmtHead().setNamedWhereClauseParam("HoOrgIdBind", this.getHoOrgIdValue());
        this.getBdgFinOtherExpAmtHead().setNamedWhereClauseParam("OrgIdBind", this.getOrgIdValue());
        this.getBdgFinOtherExpAmtHead().setNamedWhereClauseParam("SlocIdBind", this.getSlocIdValue());
        this.getBdgFinOtherExpAmtHead().setNamedWhereClauseParam("DocStructBind", 1);
        if (this.getBdgFinBudgetVO1().getCurrentRow() != null) {
            this.getBdgFinOtherExpAmtHead().setNamedWhereClauseParam("PrdStartDtBind",
                                                                     this.getBdgFinBudgetVO1().getCurrentRow().getAttribute("PrdStartDt"));
            this.getBdgFinOtherExpAmtHead().setNamedWhereClauseParam("PrdEndDtBind",
                                                                     this.getBdgFinBudgetVO1().getCurrentRow().getAttribute("PrdEndDt"));
        }
        this.getBdgFinOtherExpAmtHead().executeQuery();
    }

    public void SetHeaderOnStructure(Integer structId) {
        //For Sales Target
        this.getBdgFinRevAmtHeadVw().setNamedWhereClauseParam("DocStructBind", structId);
        if (this.getBdgFinBudgetVO1().getCurrentRow() != null) {
            this.getBdgFinRevAmtHeadVw().setNamedWhereClauseParam("PrdStartDtBind",
                                                                  this.getBdgFinBudgetVO1().getCurrentRow().getAttribute("PrdStartDt"));
            this.getBdgFinRevAmtHeadVw().setNamedWhereClauseParam("PrdEndDtBind",
                                                                  this.getBdgFinBudgetVO1().getCurrentRow().getAttribute("PrdEndDt"));
        }
        this.getBdgFinRevAmtHeadVw().executeQuery();

        //For Material Cost
        this.getBdgFinMtlCostHeadVw().setNamedWhereClauseParam("DocStructBind", structId);
        if (this.getBdgFinBudgetVO1().getCurrentRow() != null) {
            this.getBdgFinMtlCostHeadVw().setNamedWhereClauseParam("PrdStartDtBind",
                                                                   this.getBdgFinBudgetVO1().getCurrentRow().getAttribute("PrdStartDt"));
            this.getBdgFinMtlCostHeadVw().setNamedWhereClauseParam("PrdEndDtBind",
                                                                   this.getBdgFinBudgetVO1().getCurrentRow().getAttribute("PrdEndDt"));
        }
        this.getBdgFinMtlCostHeadVw().executeQuery();

        //For Other Revenue
        this.getBdgFinOtherRevAmtHead().setNamedWhereClauseParam("DocStructBind", structId);
        if (this.getBdgFinBudgetVO1().getCurrentRow() != null) {
            this.getBdgFinOtherRevAmtHead().setNamedWhereClauseParam("PrdStartDtBind",
                                                                     this.getBdgFinBudgetVO1().getCurrentRow().getAttribute("PrdStartDt"));
            this.getBdgFinOtherRevAmtHead().setNamedWhereClauseParam("PrdEndDtBind",
                                                                     this.getBdgFinBudgetVO1().getCurrentRow().getAttribute("PrdEndDt"));
        }
        this.getBdgFinOtherRevAmtHead().executeQuery();


        //For Othere Expenses
        this.getBdgFinOtherExpAmtHead().setNamedWhereClauseParam("DocStructBind", structId);
        if (this.getBdgFinBudgetVO1().getCurrentRow() != null) {
            this.getBdgFinOtherExpAmtHead().setNamedWhereClauseParam("PrdStartDtBind",
                                                                     this.getBdgFinBudgetVO1().getCurrentRow().getAttribute("PrdStartDt"));
            this.getBdgFinOtherExpAmtHead().setNamedWhereClauseParam("PrdEndDtBind",
                                                                     this.getBdgFinBudgetVO1().getCurrentRow().getAttribute("PrdEndDt"));
        }
        this.getBdgFinOtherExpAmtHead().executeQuery();
    }

    public void filterCommonVOForDocStruct(String structId) {
        if (this.getTempListShowVO1().getCurrentRow() != null) {
            this.getTempListShowVO1().getCurrentRow().setAttribute("TransSelectedStructId", structId);
            TempListShowVORowImpl rowimpl = (TempListShowVORowImpl) this.getTempListShowVO1().getCurrentRow();
            rowimpl.getBdgAllStructValVwVO1().setNamedWhereClauseParam("CldIdBind", this.getCldIdValue());
            rowimpl.getBdgAllStructValVwVO1().setNamedWhereClauseParam("HoOrgIdbind", this.getHoOrgIdValue());
            rowimpl.getBdgAllStructValVwVO1().setNamedWhereClauseParam("SlocIdBind", this.getSlocIdValue());
            rowimpl.getBdgAllStructValVwVO1().setNamedWhereClauseParam("StructId", structId);
            rowimpl.getBdgAllStructValVwVO1().executeQuery();
        }
    }

    /**
     * Container's getter for HeadRegionForPNL1.
     * @return HeadRegionForPNL1
     */
    public ViewObjectImpl getHeadRegionForPNLVO1() {
        return (ViewObjectImpl) findViewObject("HeadRegionForPNLVO1");
    }

    /**
     * Container's getter for BdgFinBudgetToHeadRegionForPNLVL1.
     * @return BdgFinBudgetToHeadRegionForPNLVL1
     */
    public ViewLinkImpl getBdgFinBudgetToHeadRegionForPNLVL1() {
        return (ViewLinkImpl) findViewLink("BdgFinBudgetToHeadRegionForPNLVL1");
    }

    /**
     * Container's getter for BdgExpenseSumm1.
     * @return BdgExpenseSumm1
     */
    public ViewObjectImpl getBdgExpenseSummVO2() {
        return (ViewObjectImpl) findViewObject("BdgExpenseSummVO2");
    }

    /**
     * Container's getter for HeadRegionForPNLToBdgExxpenseSummVL1.
     * @return HeadRegionForPNLToBdgExxpenseSummVL1
     */
    public ViewLinkImpl getHeadRegionForPNLToBdgExxpenseSummVL1() {
        return (ViewLinkImpl) findViewLink("HeadRegionForPNLToBdgExxpenseSummVL1");
    }

    /**
     * Container's getter for BdgIncomeSumm1.
     * @return BdgIncomeSumm1
     */
    public ViewObjectImpl getBdgIncomeSummVO2() {
        return (ViewObjectImpl) findViewObject("BdgIncomeSummVO2");
    }

    /**
     * Container's getter for HeadRegionForPNLToBdgIncomeSummVL1.
     * @return HeadRegionForPNLToBdgIncomeSummVL1
     */
    public ViewLinkImpl getHeadRegionForPNLToBdgIncomeSummVL1() {
        return (ViewLinkImpl) findViewLink("HeadRegionForPNLToBdgIncomeSummVL1");
    }


    /**
     * Container's getter for HeadEmpDtlsForPNLSumm1.
     * @return HeadEmpDtlsForPNLSumm1
     */
    public ViewObjectImpl getHeadEmpDtlsForPNLSummVO1() {
        return (ViewObjectImpl) findViewObject("HeadEmpDtlsForPNLSummVO1");
    }

    /**
     * Container's getter for BdgFinBudgetToHeadEmpDtlsForPNLSummVL1.
     * @return BdgFinBudgetToHeadEmpDtlsForPNLSummVL1
     */
    public ViewLinkImpl getBdgFinBudgetToHeadEmpDtlsForPNLSummVL1() {
        return (ViewLinkImpl) findViewLink("BdgFinBudgetToHeadEmpDtlsForPNLSummVL1");
    }

    /**
     * Container's getter for BdgExpenseSumm1.
     * @return BdgExpenseSumm1
     */
    public ViewObjectImpl getBdgExpenseSummVO3() {
        return (ViewObjectImpl) findViewObject("BdgExpenseSummVO3");
    }

    /**
     * Container's getter for HeadEmpDtlsForPNLSummToBdgEmpExpenseDtlVL1.
     * @return HeadEmpDtlsForPNLSummToBdgEmpExpenseDtlVL1
     */
    public ViewLinkImpl getHeadEmpDtlsForPNLSummToBdgEmpExpenseDtlVL1() {
        return (ViewLinkImpl) findViewLink("HeadEmpDtlsForPNLSummToBdgEmpExpenseDtlVL1");
    }

    /**
     * Container's getter for BdgIncomeSumm1.
     * @return BdgIncomeSumm1
     */
    public ViewObjectImpl getBdgIncomeSummVO3() {
        return (ViewObjectImpl) findViewObject("BdgIncomeSummVO3");
    }

    /**
     * Container's getter for HeadEmpDtlsForPNLSummToBdgEmpIncomeDtlVL1.
     * @return HeadEmpDtlsForPNLSummToBdgEmpIncomeDtlVL1
     */
    public ViewLinkImpl getHeadEmpDtlsForPNLSummToBdgEmpIncomeDtlVL1() {
        return (ViewLinkImpl) findViewLink("HeadEmpDtlsForPNLSummToBdgEmpIncomeDtlVL1");
    }


    /**
     * Container's getter for HeadOthersEmpDtlsForPNLSumm1.
     * @return HeadOthersEmpDtlsForPNLSumm1
     */
    public ViewObjectImpl getHeadOthersEmpDtlsForPNLSummVO1() {
        return (ViewObjectImpl) findViewObject("HeadOthersEmpDtlsForPNLSummVO1");
    }

    /**
     * Container's getter for BdgFinBudgetToHeadOthersEmpDtlsForPNLSummVL1.
     * @return BdgFinBudgetToHeadOthersEmpDtlsForPNLSummVL1
     */
    public ViewLinkImpl getBdgFinBudgetToHeadOthersEmpDtlsForPNLSummVL1() {
        return (ViewLinkImpl) findViewLink("BdgFinBudgetToHeadOthersEmpDtlsForPNLSummVL1");
    }

    /**
     * Container's getter for HeadOthersRegionForPNL1.
     * @return HeadOthersRegionForPNL1
     */
    public ViewObjectImpl getHeadOthersRegionForPNLVO1() {
        return (ViewObjectImpl) findViewObject("HeadOthersRegionForPNLVO1");
    }

    /**
     * Container's getter for BdgFinBudgetToHeadOthersRegionForPNLVL1.
     * @return BdgFinBudgetToHeadOthersRegionForPNLVL1
     */
    public ViewLinkImpl getBdgFinBudgetToHeadOthersRegionForPNLVL1() {
        return (ViewLinkImpl) findViewLink("BdgFinBudgetToHeadOthersRegionForPNLVL1");
    }

    /**
     * Container's getter for BdgExpenseSumm1.
     * @return BdgExpenseSumm1
     */
    public ViewObjectImpl getBdgOthersExpenseSummVO1() {
        return (ViewObjectImpl) findViewObject("BdgOthersExpenseSummVO1");
    }

    /**
     * Container's getter for HeadOthersEmpDtlsForPNLSummToBdgEmpExpenseDtlVL1.
     * @return HeadOthersEmpDtlsForPNLSummToBdgEmpExpenseDtlVL1
     */
    public ViewLinkImpl getHeadOthersEmpDtlsForPNLSummToBdgEmpExpenseDtlVL1() {
        return (ViewLinkImpl) findViewLink("HeadOthersEmpDtlsForPNLSummToBdgEmpExpenseDtlVL1");
    }

    /**
     * Container's getter for BdgIncomeSumm1.
     * @return BdgIncomeSumm1
     */
    public ViewObjectImpl getBdgOthersIncomeSummVO1() {
        return (ViewObjectImpl) findViewObject("BdgOthersIncomeSummVO1");
    }

    /**
     * Container's getter for HeadOthersEmpDtlsForPNLSummToBdgEmpIncomeDtlVL1.
     * @return HeadOthersEmpDtlsForPNLSummToBdgEmpIncomeDtlVL1
     */
    public ViewLinkImpl getHeadOthersEmpDtlsForPNLSummToBdgEmpIncomeDtlVL1() {
        return (ViewLinkImpl) findViewLink("HeadOthersEmpDtlsForPNLSummToBdgEmpIncomeDtlVL1");
    }

    /**
     * Container's getter for BdgExpenseSumm1.
     * @return BdgExpenseSumm1
     */
    public ViewObjectImpl getBdgOthersExpenseSummVO2() {
        return (ViewObjectImpl) findViewObject("BdgOthersExpenseSummVO2");
    }

    /**
     * Container's getter for HeadOthersRegionForPNLToBdgExpenseSummVL1.
     * @return HeadOthersRegionForPNLToBdgExpenseSummVL1
     */
    public ViewLinkImpl getHeadOthersRegionForPNLToBdgExpenseSummVL1() {
        return (ViewLinkImpl) findViewLink("HeadOthersRegionForPNLToBdgExpenseSummVL1");
    }

    /**
     * Container's getter for BdgIncomeSumm1.
     * @return BdgIncomeSumm1
     */
    public ViewObjectImpl getBdgOthersIncomeSummVO2() {
        return (ViewObjectImpl) findViewObject("BdgOthersIncomeSummVO2");
    }

    /**
     * Container's getter for HeadOthersRegionForPNLToBdgIncomeSummVL1.
     * @return HeadOthersRegionForPNLToBdgIncomeSummVL1
     */
    public ViewLinkImpl getHeadOthersRegionForPNLToBdgIncomeSummVL1() {
        return (ViewLinkImpl) findViewLink("HeadOthersRegionForPNLToBdgIncomeSummVL1");
    }

    /**
     * Container's getter for HeadCustomerForPNL1.
     * @return HeadCustomerForPNL1
     */
    public ViewObjectImpl getHeadCustomerForPNLVO1() {
        return (ViewObjectImpl) findViewObject("HeadCustomerForPNLVO1");
    }

    /**
     * Container's getter for BdgFinBudgetToHeadCustomerForPNLVL1.
     * @return BdgFinBudgetToHeadCustomerForPNLVL1
     */
    public ViewLinkImpl getBdgFinBudgetToHeadCustomerForPNLVL1() {
        return (ViewLinkImpl) findViewLink("BdgFinBudgetToHeadCustomerForPNLVL1");
    }

    /**
     * Container's getter for HeadOthersCustomerForPNL1.
     * @return HeadOthersCustomerForPNL1
     */
    public ViewObjectImpl getHeadOthersCustomerForPNLVO2() {
        return (ViewObjectImpl) findViewObject("HeadOthersCustomerForPNLVO2");
    }

    /**
     * Container's getter for BdgFinBudgetToHeadOthersCustomerForPNLVL1.
     * @return BdgFinBudgetToHeadOthersCustomerForPNLVL1
     */
    public ViewLinkImpl getBdgFinBudgetToHeadOthersCustomerForPNLVL1() {
        return (ViewLinkImpl) findViewLink("BdgFinBudgetToHeadOthersCustomerForPNLVL1");
    }

    /**
     * Container's getter for BdgExpenseSumm1.
     * @return BdgExpenseSumm1
     */
    public ViewObjectImpl getBdgExpenseSummVO4() {
        return (ViewObjectImpl) findViewObject("BdgExpenseSummVO4");
    }

    /**
     * Container's getter for HeadCustomerForPNLToBdgCustExpenseDtlVL1.
     * @return HeadCustomerForPNLToBdgCustExpenseDtlVL1
     */
    public ViewLinkImpl getHeadCustomerForPNLToBdgCustExpenseDtlVL1() {
        return (ViewLinkImpl) findViewLink("HeadCustomerForPNLToBdgCustExpenseDtlVL1");
    }

    /**
     * Container's getter for BdgIncomeSumm1.
     * @return BdgIncomeSumm1
     */
    public ViewObjectImpl getBdgIncomeSummVO4() {
        return (ViewObjectImpl) findViewObject("BdgIncomeSummVO4");
    }

    /**
     * Container's getter for HeadCustomerForPNLToBdgCustIncomeDtlVL1.
     * @return HeadCustomerForPNLToBdgCustIncomeDtlVL1
     */
    public ViewLinkImpl getHeadCustomerForPNLToBdgCustIncomeDtlVL1() {
        return (ViewLinkImpl) findViewLink("HeadCustomerForPNLToBdgCustIncomeDtlVL1");
    }

    /**
     * Container's getter for BdgExpenseSumm1.
     * @return BdgExpenseSumm1
     */
    public ViewObjectImpl getBdgExpenseSummVO5() {
        return (ViewObjectImpl) findViewObject("BdgExpenseSummVO5");
    }

    /**
     * Container's getter for HeadOthersCustomerForPNLToBdgCustExpenseDtlVL1.
     * @return HeadOthersCustomerForPNLToBdgCustExpenseDtlVL1
     */
    public ViewLinkImpl getHeadOthersCustomerForPNLToBdgCustExpenseDtlVL1() {
        return (ViewLinkImpl) findViewLink("HeadOthersCustomerForPNLToBdgCustExpenseDtlVL1");
    }

    /**
     * Container's getter for BdgIncomeSumm1.
     * @return BdgIncomeSumm1
     */
    public ViewObjectImpl getBdgIncomeSummVO5() {
        return (ViewObjectImpl) findViewObject("BdgIncomeSummVO5");
    }

    /**
     * Container's getter for HeadOthersCustomerForPNLToBdgCustIncomeDtlVL1.
     * @return HeadOthersCustomerForPNLToBdgCustIncomeDtlVL1
     */
    public ViewLinkImpl getHeadOthersCustomerForPNLToBdgCustIncomeDtlVL1() {
        return (ViewLinkImpl) findViewLink("HeadOthersCustomerForPNLToBdgCustIncomeDtlVL1");
    }

    /**
     * Container's getter for TempListShow1.
     * @return TempListShow1
     */
    public ViewObjectImpl getTempListShowVO1() {
        return (ViewObjectImpl) findViewObject("TempListShowVO1");
    }

    /**
     * Method to get value of an attribute from FromShowListTempVO
     * @param arg
     * @return
     */
    public String getRegionIdOnRegionNm(StringBuffer arg) {
        System.out.println("Attribute passed is : " + arg);
        if (arg != null) {
            TempListShowVORowImpl currentRow = (TempListShowVORowImpl) this.getTempListShowVO1().getCurrentRow();
            if (currentRow != null) {
                RowSet idVO = currentRow.getHeadRegionForPNLVO1();
                Row[] filteredRows = idVO.getFilteredRows("RegionName", arg.toString());
                if (filteredRows.length > 0) {
                    if (filteredRows[0].getAttribute("Region") != null) {
                        arg = new StringBuffer(filteredRows[0].getAttribute("Region").toString());
                    }
                }
            }
        }
        System.out.println("Returned is : " + arg);
        return arg.toString();
    }

    public void setInClauseAsBindVar(String menuId, StringBuffer regionInClause, StringBuffer eoIdInClause,
                                     StringBuffer custEoIdInClause) {
        if (regionInClause != null && regionInClause.toString().length() > 0) {

        } else {
            regionInClause = null;
        }

        if (eoIdInClause != null && eoIdInClause.toString().length() > 0) {

        } else {
            eoIdInClause = null;
        }

        if (custEoIdInClause != null && custEoIdInClause.toString().length() > 0) {

        } else {
            custEoIdInClause = null;
        }

        String namedVar = null;
        switch (menuId.toString()) {
        case "1": //regionIdInClause
            System.out.println("Inside case 1");
            namedVar = "regionIdInClause";
            ViewObjectImpl forPNLVO1 = this.getHeadRegionForPNLVO1();
            forPNLVO1.setNamedWhereClauseParam("BindRegionId", regionInClause);
            forPNLVO1.setNamedWhereClauseParam("BindEoId", eoIdInClause);
            forPNLVO1.setNamedWhereClauseParam("BindCustEoId", custEoIdInClause);

            forPNLVO1.executeQuery();
            //System.out.println("No or rows is " + forPNLVO1.getAllRowsInRange().length);

            break;
        case "2": //employeeIdInClause
            System.out.println("Inside case 1");
            namedVar = "employeeIdInClause";
            ViewObjectImpl dtlsForPNLSummVO1 = this.getHeadEmpDtlsForPNLSummVO1();
            dtlsForPNLSummVO1.setNamedWhereClauseParam("BindRegionId", regionInClause);
            dtlsForPNLSummVO1.setNamedWhereClauseParam("BindEoId", eoIdInClause);
            dtlsForPNLSummVO1.setNamedWhereClauseParam("BindCustEoId", custEoIdInClause);

            dtlsForPNLSummVO1.executeQuery();
            //System.out.println("No or rows is " + forPNLVO1.getAllRowsInRange().length);

            break;
        case "3": //customerIdInClause
            System.out.println("Inside case 1");
            namedVar = "customerIdInClause";
            ViewObjectImpl customerForPNLVO1 = this.getHeadCustomerForPNLVO1();
            customerForPNLVO1.setNamedWhereClauseParam("BindRegionId", regionInClause);
            customerForPNLVO1.setNamedWhereClauseParam("BindEoId", eoIdInClause);
            customerForPNLVO1.setNamedWhereClauseParam("BindCustEoId", custEoIdInClause);

            customerForPNLVO1.executeQuery();
            //System.out.println("No or rows is " + forPNLVO1.getAllRowsInRange().length);

            break;
        default:
            System.out.println("Inside Default Case => MenuId=> " + menuId);
            System.out.println("regionInClause=" + regionInClause + " employeeInClause=" + eoIdInClause +
                               " customerInClause= " + custEoIdInClause);
        }
    }


    /**
     * Method to get value of an attribute from FromShowListTempVO
     * @param arg
     * @return
     */
    public String getEmployeeIdOnEmployeeNm(StringBuffer arg) {
        System.out.println("Attribute passed is : " + arg);
        if (arg != null) {
            TempListShowVORowImpl currentRow = (TempListShowVORowImpl) this.getTempListShowVO1().getCurrentRow();
            if (currentRow != null) {
                RowSet idVO = currentRow.getHeadEmpDtlsForPNLSummVO1();
                Row[] filteredRows = idVO.getFilteredRows("EmpNm", arg.toString());
                if (filteredRows.length > 0) {
                    if (filteredRows[0].getAttribute("EoId") != null) {
                        arg = new StringBuffer(filteredRows[0].getAttribute("EoId").toString());
                    }
                }
            }
        }
        System.out.println("Returned is : " + arg);
        return arg.toString();
    }

    /**
     * Method to get value of an attribute from FromShowListTempVO
     * @param arg
     * @return
     */
    public String getCustomerIdOnCustomerNm(StringBuffer arg) {
        System.out.println("Attribute passed is : " + arg);
        if (arg != null) {
            TempListShowVORowImpl currentRow = (TempListShowVORowImpl) this.getTempListShowVO1().getCurrentRow();
            if (currentRow != null) {
                RowSet idVO = currentRow.getHeadCustomerForPNLVO1();
                Row[] filteredRows = idVO.getFilteredRows("EoNm", arg.toString());
                if (filteredRows.length > 0) {
                    if (filteredRows[0].getAttribute("CustEoId") != null) {
                        arg = new StringBuffer(filteredRows[0].getAttribute("CustEoId").toString());
                    }
                }
            }
        }
        System.out.println("Returned is : " + arg);
        return arg.toString();
    }

    /**
     * Method which update Budget amount of Header table field based on use selection in Finance budget and its type
     */
    public void updateBudgetAmt() {
        ViewObjectImpl bdgFinBudgetVO1 = this.getBdgFinBudgetVO1();
        Row currentRow = bdgFinBudgetVO1.getCurrentRow();
        if (currentRow != null) {
            currentRow.setAttribute("BudgAmt", currentRow.getAttribute("TotalAmtTrans"));
        }
    }

    /**
     * Container's getter for BdgSalesDistribution1.
     * @return BdgSalesDistribution1
     */
    public ViewObjectImpl getBdgSalesDistributionVO1() {
        return (ViewObjectImpl) findViewObject("BdgSalesDistributionVO1");
    }

    /**
     * Container's getter for BdgFinBudgetToSalesDistributionVL1.
     * @return BdgFinBudgetToSalesDistributionVL1
     */
    public ViewLinkImpl getBdgFinBudgetToSalesDistributionVL1() {
        return (ViewLinkImpl) findViewLink("BdgFinBudgetToSalesDistributionVL1");
    }

    /**
     * Method which will filter BdgSalesDistributionVO after populating ther data using function or in View mode after
     * filtering the data from view page to detail page
     */
    private void executeBdgSalesDistributionMethod(String docId) {
        ViewObjectImpl bdgFinBudgetVO1 = this.getBdgFinBudgetVO1();
        bdgFinBudgetVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        bdgFinBudgetVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        bdgFinBudgetVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        bdgFinBudgetVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
        bdgFinBudgetVO1.setNamedWhereClauseParam("docIdBind", docId);
        bdgFinBudgetVO1.executeQuery();

        Row[] allRowsInRange = bdgFinBudgetVO1.getAllRowsInRange();

        for (Row currentRow : allRowsInRange) {
            ViewObjectImpl bdgSalesDistributionVO1 = this.getBdgSalesDistributionVO1();
            bdgSalesDistributionVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            bdgSalesDistributionVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            bdgSalesDistributionVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            bdgSalesDistributionVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
            bdgSalesDistributionVO1.setNamedWhereClauseParam("BindEoId", currentRow.getAttribute("EoId"));
            bdgSalesDistributionVO1.setNamedWhereClauseParam("BindPrdStDt", currentRow.getAttribute("PrdStartDt"));
            bdgSalesDistributionVO1.setNamedWhereClauseParam("BindPrdEndDt", currentRow.getAttribute("PrdEndDt"));

            bdgSalesDistributionVO1.executeQuery();
        }
    }

    /**
     * Container's getter for BdgMaterialDistribution1.
     * @return BdgMaterialDistribution1
     */
    public ViewObjectImpl getBdgMaterialDistributionVO1() {
        return (ViewObjectImpl) findViewObject("BdgMaterialDistributionVO1");
    }

    /**
     * Container's getter for BdgFinBudgetToMaterialDistributionVL1.
     * @return BdgFinBudgetToMaterialDistributionVL1
     */
    public ViewLinkImpl getBdgFinBudgetToMaterialDistributionVL1() {
        return (ViewLinkImpl) findViewLink("BdgFinBudgetToMaterialDistributionVL1");
    }

    /**
     * Method which will filter BdgMaterialDistributionVO after populating ther data using function or in View mode after
     * filtering the data from view page to detail page
     */
    private void executeBdgMaterialDistributionMethod(String docId) {
        ViewObjectImpl bdgFinBudgetVO1 = this.getBdgFinBudgetVO1();
        bdgFinBudgetVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        bdgFinBudgetVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        bdgFinBudgetVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        bdgFinBudgetVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
        bdgFinBudgetVO1.setNamedWhereClauseParam("docIdBind", docId);
        bdgFinBudgetVO1.executeQuery();

        Row[] allRowsInRange = bdgFinBudgetVO1.getAllRowsInRange();

        for (Row currentRow : allRowsInRange) {
            ViewObjectImpl bdgMaterialDistributionVO1 = this.getBdgMaterialDistributionVO1();
            bdgMaterialDistributionVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            bdgMaterialDistributionVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            bdgMaterialDistributionVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            bdgMaterialDistributionVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
            bdgMaterialDistributionVO1.setNamedWhereClauseParam("BindEoId", currentRow.getAttribute("EoId"));
            bdgMaterialDistributionVO1.setNamedWhereClauseParam("BindPrdStDt", currentRow.getAttribute("PrdStartDt"));
            bdgMaterialDistributionVO1.setNamedWhereClauseParam("BindPrdEndDt", currentRow.getAttribute("PrdEndDt"));

            bdgMaterialDistributionVO1.executeQuery();
        }
    }

    /**
     * Container's getter for HeadMtlRegionMonthSummVW1.
     * @return HeadMtlRegionMonthSummVW1
     */
    public ViewObjectImpl getHeadMtlRegionMonthSummVWVO1() {
        return (ViewObjectImpl) findViewObject("HeadMtlRegionMonthSummVWVO1");
    }

    /**
     * Container's getter for BdgMtlRegionMonthSumm2.
     * @return BdgMtlRegionMonthSumm2
     */
    public ViewObjectImpl getBdgMtlRegionMonthSummVO1() {
        return (ViewObjectImpl) findViewObject("BdgMtlRegionMonthSummVO1");
    }

    /**
     * Container's getter for HeadMtlRegionMonthToBdgMtlRegionMonthSummVL1.
     * @return HeadMtlRegionMonthToBdgMtlRegionMonthSummVL1
     */
    public ViewLinkImpl getHeadMtlRegionMonthToBdgMtlRegionMonthSummVL1() {
        return (ViewLinkImpl) findViewLink("HeadMtlRegionMonthToBdgMtlRegionMonthSummVL1");
    }

    /**
     * Container's getter for BdgSlsBudgAmtDistribution1.
     * @return BdgSlsBudgAmtDistribution1
     */
    public ViewObjectImpl getBdgSlsBudgAmtDistributionVO1() {
        return (ViewObjectImpl) findViewObject("BdgSlsBudgAmtDistributionVO1");
    }

    /**
     * Container's getter for BdgFinBudgetProdPrdDtl1.
     * @return BdgFinBudgetProdPrdDtl1
     */
    public ViewObjectImpl getBdgFinBudgetProdPrdDtlVO1() {
        return (ViewObjectImpl) findViewObject("BdgFinBudgetProdPrdDtlVO1");
    }

    /**
     * Container's getter for BdgFinBudgetDtlToFinBudgetProdPrdDtlVL1.
     * @return BdgFinBudgetDtlToFinBudgetProdPrdDtlVL1
     */
    public ViewLinkImpl getBdgFinBudgetDtlToFinBudgetProdPrdDtlVL1() {
        return (ViewLinkImpl) findViewLink("BdgFinBudgetDtlToFinBudgetProdPrdDtlVL1");
    }

    /**
     * Method which will update the base value based on user entry in specific value
     */
    public void updateItemDisbAmtBase(Number val) {
        ViewObjectImpl bdgFinBudgetVO1 = this.getBdgFinBudgetVO1();
        Row currentRow = bdgFinBudgetVO1.getCurrentRow();
        if (currentRow != null) {
            Number currConvRate = (Number) currentRow.getAttribute("CurrConvRate");
            if (currConvRate != null) {
                ViewObjectImpl bdgFinBudgetProdPrdDtlVO1 = this.getBdgFinBudgetProdPrdDtlVO1();
                Row row = bdgFinBudgetProdPrdDtlVO1.getCurrentRow();
                if (row != null) {
                    row.setAttribute("ItmAmtBs", currConvRate.multiply(val));
                }
            }
        }
    }

    /**
     * Method to process distribution method into equal, fixed, ascending, descending
     * daily, weekly, quarterly, halfyearly
     */
    public void distributeItemAmtPeriodWise() {
        String val = null;

        ViewObjectImpl bdgFinBudgetDtlVO1 = this.getBdgFinBudgetDtlVO1();
        Row currentRow = bdgFinBudgetDtlVO1.getCurrentRow();
        if (currentRow != null) {
            try {
                /// Function which will insert data into BDG$EO$BUDGET$PROD$PRD$DTL table
                /* p_cld_id varchar2,
                    p_sloc_id number,
                    p_org_id varchar2,
                    p_ho_org_id varchar2,
                    p_DOC_ID varchar2,
                    p_PRD_START_DT date,
                    p_PRD_END_DT date,
                    p_EO_ID number,
                    p_dist_prd_basis number,--1 for daily,2 for weekly,3 for quarterly,4 halfyearly,5 monthly
                    p_usr_id number,
                    p_BUDG_AMT number,
                    p_dist_basis number)--1 for equal
                    */
                this.getBdgFinBudgetProdPrdDtlVO1().clearCache();
                this.getBdgFinBudgetProdPrdDtlVO1().executeQuery();

                deleteItemAmtPeriodWise();

                this.getBdgFinBudgetProdPrdDtlVO1().executeQuery();

                //this.getDBTransaction().postChanges();

                val =
                    (String) this.callStoredFunction(Types.VARCHAR,
                                                     "FN_FIN_INS_PROD_PRD(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                     this.getCldIdValue(), this.getSlocIdValue(), this.getOrgIdValue(),
                                                     this.getHoOrgIdValue(), currentRow.getAttribute("DocId"),
                                                     currentRow.getAttribute("PrdStartDt"),
                                                     currentRow.getAttribute("PrdEndDt"),
                                                     currentRow.getAttribute("CustEoId"),
                                                     currentRow.getAttribute("ItmGrpId"),
                                                     currentRow.getAttribute("ItmId"),
                                                     currentRow.getAttribute("ItmUom"),
                                                     currentRow.getAttribute("ItmPrice"),
                                                     currentRow.getAttribute("ItmQty"),
                                                     currentRow.getAttribute("DistbPrdBasis"), this.getUsrId(),
                                                     currentRow.getAttribute("ItmAmtSp"),
                                                     currentRow.getAttribute("DistbUnit"),
                                                     currentRow.getAttribute("EoId"), currentRow.getAttribute("Region"),
                                                     currentRow.getAttribute("AmtTyp"), currentRow.getAttribute("CoaId")
                });
                System.out.println("Return value is " + val);
            } catch (Exception e) {
                e.printStackTrace();
                System.out.println("ERROR IN CALLING FUNCTION FN_INS_PRD at BdgEoBudgetAmImpl :" + e.getMessage());
            }
            this.getBdgFinBudgetProdPrdDtlVO1().executeQuery();

            generateCostCenterAutomatic();
        }
    }

    /***
     * Method which will delete records which belong to documentId and Period Id in item period Detail Table
     * BDG$EO$BUDGET$PROD$PRD$DTL
     */
    protected void deleteItemAmtPeriodWise() {
        /// Function which will delete data first from BDG$EO$BUDGET$PROD$PRD$DTL table
        /*  p_cld_id varchar2,
            p_sloc_id number,
            p_org_id varchar2,
            p_ho_org_id varchar2,
            p_DOC_ID varchar2,
            p_PRD_START_DT date,
            p_PRD_END_DT date,
            p_EO_ID number
            p_COA_ID number
             */
        ViewObjectImpl bdgFinBudgetDtlVO1 = this.getBdgFinBudgetDtlVO1();
        Row currentRow = bdgFinBudgetDtlVO1.getCurrentRow();
        if (currentRow != null) {
            String retVal = null;
            try {

                retVal =
                    (String) this.callStoredFunction(Types.VARCHAR, "FN_FIN_DEL_PROD_PRD(?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                     this.getCldIdValue(), this.getSlocIdValue(), this.getOrgIdValue(),
                                                     this.getHoOrgIdValue(), currentRow.getAttribute("DocId"),
                                                     currentRow.getAttribute("PrdStartDt"),
                                                     currentRow.getAttribute("PrdEndDt"),
                                                     currentRow.getAttribute("CustEoId"),
                                                     currentRow.getAttribute("ItmGrpId"),
                                                     currentRow.getAttribute("ItmId"), currentRow.getAttribute("EoId"),
                                                     currentRow.getAttribute("Region"), currentRow.getAttribute("CoaId")
                });
            } catch (Exception e) {
                e.printStackTrace();
                System.out.println("Error in calling function FN_DEL_PRD in AMIMPL " + e.getMessage());
            }
            System.out.println("Return value is --->" + retVal);
            this.getBdgFinBudgetProdPrdDtlVO1().executeQuery();
        }
    }

    /**
     * Container's getter for BdgMtlBudgetAmtComp1.
     * @return BdgMtlBudgetAmtComp1
     */
    public ViewObjectImpl getBdgMtlBudgetAmtCompVO1() {
        return (ViewObjectImpl) findViewObject("BdgMtlBudgetAmtCompVO1");
    }

    /**
     * Container's getter for LOVFlexiFlds1.
     * @return LOVFlexiFlds1
     */
    public ViewObjectImpl getLOVFlexiFldsVO1() {
        return (ViewObjectImpl) findViewObject("LOVFlexiFldsVO1");
    }

    /**
     * Container's getter for BdgFinBudgetFlexiFlds1.
     * @return BdgFinBudgetFlexiFlds1
     */
    public ViewObjectImpl getBdgFinBudgetFlexiFldsVO1() {
        return (ViewObjectImpl) findViewObject("BdgFinBudgetFlexiFldsVO1");
    }

    /**
     * Container's getter for BdgFinBudgetToFlexiFldsVL1.
     * @return BdgFinBudgetToFlexiFldsVL1
     */
    public ViewLinkImpl getBdgFinBudgetToFlexiFldsVL1() {
        return (ViewLinkImpl) findViewLink("BdgFinBudgetToFlexiFldsVL1");
    }

    /**
     * Method which will insert no. of rows into flexi fields table
     * getBdgFinBudgetFlexiFldsVO1
     */
    public void getFlexiFieldFilter() {
        ViewObjectImpl grpFlex = this.getBdgFinBudgetFlexiFldsVO1();
        ViewObjectImpl flex = this.getLOVFlexiFldsVO1();
        flex.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        flex.setNamedWhereClauseParam("BindDocId", 34004);
        flex.executeQuery();
        flex.setRangeSize(-1);
        // Integer count = flex.getRowCount();
        // System.out.println("no of field ::" + count);
        //   System.out.println("current row is " + this.getGrpVO().getCurrentRow());
        //  RowSetIterator rr = flex.createRowSetIterator(null);
        Row[] rr = flex.getAllRowsInRange();
        System.out.println("filtered rows length---->" + rr.length);
        if (rr.length > 0) {
            for (Row r : rr) {
                //   System.out.println("total no. of rows found " + r.getAttribute("FldId"));
                Row r1 = grpFlex.createRow();
                r1.setAttribute("FieldId", r.getAttribute("FldId"));
                grpFlex.insertRow(r);
            }
        }
        grpFlex.executeQuery();
    }

    /**
     *Method which will convert Basic amount to user defined amount on selection
     * @param amt
     * @return
     */
    public Number convertNumberToNotation(Number amt) {
        Number notation = new Number(1);
        Number newAmt = new Number(0);
        if (this.getTemporaryDataVO1() != null)
            if (this.getTemporaryDataVO1().getCurrentRow() != null)
                if (this.getTemporaryDataVO1().getCurrentRow().getAttribute("AmtNotationIdTrans") != null)
                    notation = (Number) this.getTemporaryDataVO1().getCurrentRow().getAttribute("AmtNotationIdTrans");
        if (amt != null)
            newAmt = amt;
        return newAmt.divide(notation);
    }

    /**
     * Container's getter for BdgOrgStructure2.
     * @return BdgOrgStructure2
     */
    public ViewObjectImpl getBdgOrgStructure() {
        return (ViewObjectImpl) findViewObject("BdgOrgStructure");
    }

    /**
     * Container's getter for LovOrganization1.
     * @return LovOrganization1
     */
    public ViewObjectImpl getLovOrganization() {
        return (ViewObjectImpl) findViewObject("LovOrganization");
    }

    /**
     * Container's getter for BdgAllStructValVw1.
     * @return BdgAllStructValVw1
     */
    public ViewObjectImpl getBdgAllStructValVw() {
        return (ViewObjectImpl) findViewObject("BdgAllStructValVw");
    }


    public String getFilterIdOnFilterNm(String filterNm) {
        System.out.println("Attribute passed is : " + filterNm);
        if (filterNm != null) {
            Row[] filteredRows = this.getBdgAllStructValVw().getFilteredRows("StructNm", filterNm);
            if (filteredRows.length > 0) {
                if (filteredRows[0].getAttribute("StructVal") != null) {
                    filterNm = filteredRows[0].getAttribute("StructVal").toString();
                }
            }
        }
        System.out.println("Returned is : " + filterNm);
        return filterNm;
    }

    /**
     * Container's getter for BdgFinRevAmtHeadVw1.
     * @return BdgFinRevAmtHeadVw1
     */
    public ViewObjectImpl getBdgFinRevAmtHeadVw() {
        return (ViewObjectImpl) findViewObject("BdgFinRevAmtHeadVw");
    }

    /**
     * Container's getter for BdgFinRevAmtVw1.
     * @return BdgFinRevAmtVw1
     */
    public ViewObjectImpl getBdgFinRevAmtVw() {
        return (ViewObjectImpl) findViewObject("BdgFinRevAmtVw");
    }

    /**
     * Container's getter for BdgFinRevAmtHeadToCOAVL1.
     * @return BdgFinRevAmtHeadToCOAVL1
     */
    public ViewLinkImpl getBdgFinRevAmtHeadToCOAVL1() {
        return (ViewLinkImpl) findViewLink("BdgFinRevAmtHeadToCOAVL1");
    }

    /**
     * Container's getter for BdgFinMtlCostHeadVw1.
     * @return BdgFinMtlCostHeadVw1
     */
    public ViewObjectImpl getBdgFinMtlCostHeadVw() {
        return (ViewObjectImpl) findViewObject("BdgFinMtlCostHeadVw");
    }

    /**
     * Container's getter for BdgFinMtlCostDtlVw1.
     * @return BdgFinMtlCostDtlVw1
     */
    public ViewObjectImpl getBdgFinMtlCostDtlVw() {
        return (ViewObjectImpl) findViewObject("BdgFinMtlCostDtlVw");
    }

    /**
     * Container's getter for BdgFinMtlCostHeadToCOAVL1.
     * @return BdgFinMtlCostHeadToCOAVL1
     */
    public ViewLinkImpl getBdgFinMtlCostHeadToCOAVL1() {
        return (ViewLinkImpl) findViewLink("BdgFinMtlCostHeadToCOAVL1");
    }

    /**
     * Container's getter for BdgFinOtherExpAmtHead1.
     * @return BdgFinOtherExpAmtHead1
     */
    public ViewObjectImpl getBdgFinOtherExpAmtHead() {
        return (ViewObjectImpl) findViewObject("BdgFinOtherExpAmtHead");
    }

    /**
     * Container's getter for BdgFinOtherExpAmtDtl1.
     * @return BdgFinOtherExpAmtDtl1
     */
    public ViewObjectImpl getBdgFinOtherExpAmtDtl() {
        return (ViewObjectImpl) findViewObject("BdgFinOtherExpAmtDtl");
    }

    /**
     * Container's getter for BdgFinOtherExpToCOAVL1.
     * @return BdgFinOtherExpToCOAVL1
     */
    public ViewLinkImpl getBdgFinOtherExpToCOAVL1() {
        return (ViewLinkImpl) findViewLink("BdgFinOtherExpToCOAVL1");
    }

    /**
     * Container's getter for BdgFinOtherRevAmtHead1.
     * @return BdgFinOtherRevAmtHead1
     */
    public ViewObjectImpl getBdgFinOtherRevAmtHead() {
        return (ViewObjectImpl) findViewObject("BdgFinOtherRevAmtHead");
    }

    /**
     * Container's getter for BdgFinOtherRevAmtDtl1.
     * @return BdgFinOtherRevAmtDtl1
     */
    public ViewObjectImpl getBdgFinOtherRevAmtDtl() {
        return (ViewObjectImpl) findViewObject("BdgFinOtherRevAmtDtl");
    }

    /**
     * Container's getter for BdgFinOtherRevToCOAVL1.
     * @return BdgFinOtherRevToCOAVL1
     */
    public ViewLinkImpl getBdgFinOtherRevToCOAVL1() {
        return (ViewLinkImpl) findViewLink("BdgFinOtherRevToCOAVL1");
    }

    public void handlerMethod(String payLoad) {
        /*  AdfFacesContext adfFacesContext = AdfFacesContext.getCurrentInstance();
        Map pageFlowScope = adfFacesContext.getPageFlowScope();
        pageFlowScope.put("P_IS_EXPANDED", payLoad);
        System.out.println("Value of PayLoad in amimpl=" + payLoad);
        RequestContext.getCurrentInstance().getPageFlowScope().put("P_IS_EXPANDED", payLoad); */

    }

    /**
     * Container's getter for AppCcDoc1.
     * @return AppCcDoc1
     */
    public ViewObjectImpl getAppCcDocVO1() {
        return (ViewObjectImpl) findViewObject("AppCcDocVO1");
    }

    /**
     * Container's getter for AppCcVw1.
     * @return AppCcVw1
     */
    public ViewObjectImpl getAppCcVwVO1() {
        return (ViewObjectImpl) findViewObject("AppCcVwVO1");
    }

    /// Following methods were related to Cost Center
    public AppCostCenterServiceAMImpl getAppAM() {
        String appModuleName = "appCostCenterSevice.model.service.AppCostCenterServiceAM";
        String appModuleConfig = "AppCostCenterServiceAMLocal";
        return (AppCostCenterServiceAMImpl) Configuration.createRootApplicationModule(appModuleName, appModuleConfig);
    }


    public void releaseAppAM(AppCostCenterServiceAMImpl appCostCenter) {
        Configuration.releaseRootApplicationModule((ApplicationModule) appCostCenter, true);
    }

    @Override
    protected void finalize() throws Throwable {

        releaseAppAM(getAppAM());

        super.finalize();
    }
    /// End Of Cost ceneter methods

    /**Method to resolve expression- returns String value*/
    protected Object resolvElO(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        Object message = valueExp.getValue(elContext);

        return message;
    }

    /**
     * Method which will let us know whether cost center is applicable for this current document or not
     */
    public Boolean chkCcApplicableOrNot() {
        Boolean val = false;

        ViewObjectImpl appCcDocVO1 = this.getAppCcDocVO1();
        appCcDocVO1.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        appCcDocVO1.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        appCcDocVO1.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        appCcDocVO1.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        appCcDocVO1.setNamedWhereClauseParam("BindDocId", 34004);
        appCcDocVO1.executeQuery();

        Row[] allRowsInRange = appCcDocVO1.getAllRowsInRange();
        if (allRowsInRange.length > 0) {
            val = true;
        }

        return val;
    }

    /**
     * Method which will set Global Parameter Values and will be called before opening AppCostCenterServicesTF
     */
    public void declareGlblValuesForCC() {
        ViewObjectImpl appCcVwVO1 = this.getAppCcVwVO1();
        appCcVwVO1.setRangeSize(-1);

        appCcVwVO1.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        appCcVwVO1.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        appCcVwVO1.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        appCcVwVO1.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        appCcVwVO1.setNamedWhereClauseParam("BindDocId", 34004);

        Row currentRow = this.getBdgFinBudgetDtlVO1().getCurrentRow();
        if (currentRow != null) {
            for (int i = 1; i <= 5; i++) {
                appCcVwVO1.setNamedWhereClauseParam("BindCcPos", i);
                appCcVwVO1.executeQuery();

                Row[] allRowsInRange = appCcVwVO1.getAllRowsInRange();
                if (allRowsInRange.length > 0) {
                    String columnName = null;
                    for (Row r : allRowsInRange) {
                        AttributeDef[] attributeDef = this.getBdgFinBudgetDtlVO1().getAttributeDefs();

                        for (int j = 0; j < attributeDef.length; j++) {
                            /*  System.out.println("j value is " + attributeDef[j].getColumnName());
                               System.out.println("------------ null value is " + r.getAttribute("DbobColNm"));
                               System.out.println("attributeDef[j].getColumnName().equalsIgnoreCase(r.getAttribute(\"DbobColNm\").toString()) " +
                                                  attributeDef[j].getColumnName().equals(r.getAttribute("DbobColNm")));
                               */
                            if (attributeDef[j].getColumnName() != null &&
                                attributeDef[j].getColumnName().equals(r.getAttribute("DbobColNm"))) {
                                columnName = attributeDef[j].getName();
                            }
                        }
                        System.out.println("Column Name is " + columnName);

                        if (columnName != null) {

                            System.out.println("i is " + i + " Cost center Value is " +
                                               currentRow.getAttribute(columnName));


                            RequestContext.getCurrentInstance().getPageFlowScope().put("P_CC_LEVEL" + i,
                                                                                       currentRow.getAttribute(columnName));
                        }
                    }
                } else {
                    System.out.println("i is" + i + " cost center value is null");

                    RequestContext.getCurrentInstance().getPageFlowScope().put("P_CC_LEVEL" + i, null);

                }
            }
        }
    }

    /**
     * Method which will be called when user click on generate Cost Ceneter based on header wise
     */
    private void generateCostCenterAutomatic() {
        if (chkCcApplicableOrNot()) {
            AppCostCenterServiceAMImpl amCC = getAppAM();
            /*
        * @param cldId
        * @param slocId
        * @param hoOrgId
        * @param orgId
        * @param tempId
        * @param tempSrc
        * @param docId
        * @param usrId
        * @param tempCcId
        * @param amount
        * @param pCcLevel1
        * @param pCcLevel2
        * @param pCcLevel3
        * @param pCcLevel4
        * @param pCcLevel5
        */
            ViewObjectImpl bdgFinBudgetProdPrdDtlVO1 = this.getBdgFinBudgetProdPrdDtlVO1();
            for (Row r : bdgFinBudgetProdPrdDtlVO1.getAllRowsInRange()) {
                if (r != null) {
                    declareGlblValuesForCC();

                    amCC.updateCCAmount(EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                        EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                        r.getAttribute("DocId").toString(), "L", 34004, EbizParams.GLBL_APP_USR(),
                                        r.getAttribute("CcId").toString(), (Number) r.getAttribute("ItmAmtSp"),
                                        (String) resolvElO("#{pageFlowScope.P_CC_LEVEL1}"),
                                        (String) resolvElO("#{pageFlowScope.P_CC_LEVEL2}"),
                                        (String) resolvElO("#{pageFlowScope.P_CC_LEVEL3}"),
                                        (String) resolvElO("#{pageFlowScope.P_CC_LEVEL4}"),
                                        (String) resolvElO("#{pageFlowScope.P_CC_LEVEL5}"));

                    /* amCC.generateCostCenterApp(EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                               EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                               r.getAttribute("DocId").toString(), "L", 34004,
                                               EbizParams.GLBL_APP_USR(), r.getAttribute("CcId").toString(),
                                               (Number) r.getAttribute("ItmAmtSp"),
                                               (String) resolvElO("#{pageFlowScope.P_CC_LEVEL1}"),
                                               (String) resolvElO("#{pageFlowScope.P_CC_LEVEL2}"),
                                               (String) resolvElO("#{pageFlowScope.P_CC_LEVEL3}"),
                                               (String) resolvElO("#{pageFlowScope.P_CC_LEVEL4}"),
                                               (String) resolvElO("#{pageFlowScope.P_CC_LEVEL5}")); */

                }
            }
        }
    }

    /**
     * Method which will push data of Cost Center from TempCostCenter to SlsSoCostCenter Table
     */
    public void sendDateFromTempCcToSlsSoCc() {
        if (chkCcApplicableOrNot()) {
            callStoredFunction(Types.VARCHAR, "APP.FN_SAVE_COST_CENTER(?,?,?,?,?,?,?,?)", new Object[] {
                               EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                               EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(), 34004, "BDG",
                               "BDG$FIN$BUDGET$COST$CENTER",
                               this.getBdgFinBudgetVO1().getCurrentRow().getAttribute("DocId")
            });
        }
    }

    public Boolean chkUsrMnuSecAccess(Integer mnuId) {
        this.getUsrSecMnu().setNamedWhereClauseParam("cldIdBind", EbizParams.GLBL_APP_CLD_ID());
        this.getUsrSecMnu().setNamedWhereClauseParam("slocIdBind", EbizParams.GLBL_APP_SERV_LOC());
        this.getUsrSecMnu().setNamedWhereClauseParam("orgIdBind", EbizParams.GLBL_APP_USR_ORG());
        this.getUsrSecMnu().setNamedWhereClauseParam("usrIdBind", EbizParams.GLBL_APP_USR());
        this.getUsrSecMnu().setNamedWhereClauseParam("mnuIdBind", mnuId);
        this.getUsrSecMnu().executeQuery();
        Row[] filtRow = this.getUsrSecMnu().getFilteredRows("UsrMnuId", mnuId);
        if (filtRow.length > 0)
            return true;
        else
            return false;
        /*  String ret =
            (String) ADFModelUtils.callFunction(this.getRootApplicationModule(),
                                                new StringBuilder("APP.FN_CHK_USR_MNU_SEC(?,?,?,?,?)"), new Object[] {
                                                EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                                EbizParams.GLBL_APP_USR_ORG(), EbizParams.GLBL_APP_USR(), rptId
        }, Types.VARCHAR);
        if (ret != null && ret.length() > 0 && ret.toUpperCase().equals("Y"))
            return true;
        else
            return false; */
    }

    /**
     * Container's getter for UsrSecMnu1.
     * @return UsrSecMnu1
     */
    public ViewObjectImpl getUsrSecMnu() {
        return (ViewObjectImpl) findViewObject("UsrSecMnu");
    }

    public String chkDistributedAmtSum() {
        String docId = (String) this.getBdgFinBudgetVO1().getCurrentRow().getAttribute("DocId");
        if (docId != null) {
            Row coaRw[] = this.getBdgFinBudgetDtlVO1().getFilteredRows("DocId", docId);
            for (Row row : coaRw) {
                Number coaAmt = new Number(0);
                if (row.getAttribute("ItmAmtSp") != null)
                    coaAmt = (Number) row.getAttribute("ItmAmtSp");
                coaAmt = (Number) coaAmt.round(EbizParams.GLBL_AMT_DIGIT());
                Number distAmt = new Number(0);
                this.getBdgFinBudgetProdPrdDtlVO2().executeQuery();
                this.getBdgFinBudgetProdPrdDtlVO2().setRangeSize(-1);
                System.out.println("No. of rows before Filter =" +
                                   this.getBdgFinBudgetProdPrdDtlVO2().getAllRowsInRange().length);
                RowQualifier rq = new RowQualifier(this.getBdgFinBudgetProdPrdDtlVO2());
                rq.setWhereClause("DocId='" + docId + "' and CoaId=" + row.getAttribute("CoaId"));
                System.out.println("RQ Expression=" + rq.getExprStr());
                Row distFr[] = this.getBdgFinBudgetProdPrdDtlVO2().getFilteredRows(rq);
                System.out.println("No. of distributed row for this COA=" + distFr.length);
                for (Row distrow : distFr) {
                    Number amt = new Number(0);
                    if (distrow.getAttribute("ItmAmtSp") != null)
                        amt = (Number) distrow.getAttribute("ItmAmtSp");
                    amt = (Number) amt.round(EbizParams.GLBL_AMT_DIGIT());
                    distAmt = distAmt.add(amt);
                }
                System.out.println("COA Amt=" + coaAmt);
                System.out.println("Sum of dist=" + distAmt);
                if (coaAmt.compareTo(distAmt) != 0) {
                    this.getLovCoaIdVO1().setNamedWhereClauseParam("BindCldId", row.getAttribute("CldId"));
                    this.getLovCoaIdVO1().setNamedWhereClauseParam("BindSlocId", row.getAttribute("SlocId"));
                    this.getLovCoaIdVO1().setNamedWhereClauseParam("BindHoOrgId", row.getAttribute("HoOrgId"));
                    this.getLovCoaIdVO1().setNamedWhereClauseParam("BindOrgId", row.getAttribute("OrgId"));
                    this.getLovCoaIdVO1().setNamedWhereClauseParam("BindCoaId", row.getAttribute("CoaId"));
                    this.getLovCoaIdVO1().executeQuery();
                    Row coaNmRw[] = this.getLovCoaIdVO1().getFilteredRows("CoaId", row.getAttribute("CoaId"));
                    if (coaNmRw.length > 0)
                        return (String) coaNmRw[0].getAttribute("CoaNm");
                }
            }
        }
        return "Y";
    }

    /**
     * Container's getter for BdgFinBudgetProdPrdDtl1.
     * @return BdgFinBudgetProdPrdDtl1
     */
    public ViewObjectImpl getBdgFinBudgetProdPrdDtlVO2() {
        return (ViewObjectImpl) findViewObject("BdgFinBudgetProdPrdDtlVO2");
    }
}
