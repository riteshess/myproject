package bdgfinancebudgetapp.model.views;

import bdgfinancebudgetapp.model.services.BdgFinanceBudgetAMImpl;

import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Apr 03 17:01:38 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class HeadPNLDualVWVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CldId,
        SlocId,
        OrgId,
        HoOrgId,
        DocId,
        Name,
        Value,
        totalSumTrans;
        static AttributesEnum[] vals = null;
        ;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int NAME = AttributesEnum.Name.index();
    public static final int VALUE = AttributesEnum.Value.index();
    public static final int TOTALSUMTRANS = AttributesEnum.totalSumTrans.index();

    /**
     * This is the default constructor (do not remove).
     */
    public HeadPNLDualVWVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute CldId.
     * @return the CldId
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Gets the attribute value for the calculated attribute SlocId.
     * @return the SlocId
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Gets the attribute value for the calculated attribute OrgId.
     * @return the OrgId
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Gets the attribute value for the calculated attribute HoOrgId.
     * @return the HoOrgId
     */
    public String getHoOrgId() {
        return (String) getAttributeInternal(HOORGID);
    }

    /**
     * Gets the attribute value for the calculated attribute DocId.
     * @return the DocId
     */
    public String getDocId() {
        return (String) getAttributeInternal(DOCID);
    }

    /**
     * Gets the attribute value for the calculated attribute Name.
     * @return the Name
     */
    public String getName() {
        return (String) getAttributeInternal(NAME);
    }

    /**
     * Gets the attribute value for the calculated attribute Value.
     * @return the Value
     */
    public Integer getValue() {
        return (Integer) getAttributeInternal(VALUE);
    }

    /**
     * Gets the attribute value for the calculated attribute totalSumTrans.
     * @return the totalSumTrans
     */
    public Number gettotalSumTrans() {
        if (getAttributeInternal(TOTALSUMTRANS) == null && getValue() != null) {
            if (getValue() == 3) { /// Gross Amount of Children
                ViewObjectImpl bdgPNLVO2 = this.getAm().getBdgPNLVO2();
                bdgPNLVO2.setNamedWhereClauseParam("BindCldId", this.getCldId());
                bdgPNLVO2.setNamedWhereClauseParam("BindSlocId", this.getSlocId());
                bdgPNLVO2.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgId());
                bdgPNLVO2.setNamedWhereClauseParam("BindOrgId", this.getOrgId());
                bdgPNLVO2.setNamedWhereClauseParam("BindDocId", this.getDocId());
                bdgPNLVO2.setNamedWhereClauseParam("BindBudgetTypeValue", 1);
                bdgPNLVO2.executeQuery();

                bdgPNLVO2.setRangeSize(-1);
                Number val = new Number(0);
                Row[] allRowsInRange = bdgPNLVO2.getAllRowsInRange();
                for (Row r : allRowsInRange) {
                    val = val.add((Number) r.getAttribute("Totbal"));
                }

                return val;
            } else if (getValue() == 4) { /// Net Amount of Children
                ViewObjectImpl bdgPNLVO2 = this.getAm().getBdgPNLVO2();
                bdgPNLVO2.setNamedWhereClauseParam("BindCldId", this.getCldId());
                bdgPNLVO2.setNamedWhereClauseParam("BindSlocId", this.getSlocId());
                bdgPNLVO2.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgId());
                bdgPNLVO2.setNamedWhereClauseParam("BindOrgId", this.getOrgId());
                bdgPNLVO2.setNamedWhereClauseParam("BindDocId", this.getDocId());
                bdgPNLVO2.setNamedWhereClauseParam("BindBudgetTypeValue", 1);
                bdgPNLVO2.executeQuery();

                bdgPNLVO2.setRangeSize(-1);
                Number val = new Number(0);
                Row[] allRowsInRange = bdgPNLVO2.getAllRowsInRange();
                for (Row r : allRowsInRange) {
                    val = val.add((Number) r.getAttribute("Totbal"));
                }

                bdgPNLVO2.setNamedWhereClauseParam("BindCldId", this.getCldId());
                bdgPNLVO2.setNamedWhereClauseParam("BindSlocId", this.getSlocId());
                bdgPNLVO2.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgId());
                bdgPNLVO2.setNamedWhereClauseParam("BindOrgId", this.getOrgId());
                bdgPNLVO2.setNamedWhereClauseParam("BindDocId", this.getDocId());
                bdgPNLVO2.setNamedWhereClauseParam("BindBudgetTypeValue", 3);
                bdgPNLVO2.executeQuery();

                bdgPNLVO2.setRangeSize(-1);
                allRowsInRange = bdgPNLVO2.getAllRowsInRange();
                for (Row r : allRowsInRange) {
                    val = val.add((Number) r.getAttribute("Totbal"));
                }
                return val;
            }
        }
        return (Number) getAttributeInternal(TOTALSUMTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute totalSumTrans.
     * @param value value to set the  totalSumTrans
     */
    public void settotalSumTrans(Number value) {
        setAttributeInternal(TOTALSUMTRANS, value);
    }


    /**
     * Method will return Application Module App
     */
    public BdgFinanceBudgetAMImpl getAm() {
        BdgFinanceBudgetAMImpl am = (BdgFinanceBudgetAMImpl) getApplicationModule();
        return am;
    }
}
