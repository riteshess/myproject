package bdgfinancebudgetapp.model.views;

import bdgfinancebudgetapp.model.services.BdgFinanceBudgetAMImpl;

import java.sql.Timestamp;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;

import java.util.Date;

import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.domain.Number;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Apr 17 11:23:07 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class BdgFinBudgetFlexiFldsVORowImpl extends ViewRowImpl {
    public static final int ENTITY_BDGFINBUDGETFLEXIFLDSEO = 0;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CldId,
        DocId,
        FieldId,
        FieldVal,
        HoOrgId,
        OrgId,
        SlocId,
        TransFldValDate,
        TransFldValBool,
        TransFldValNum,
        TransFldType,
        TransFldReq,
        TransFldLen,
        TransFldValString,
        LOVFlexiFldsVO1;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int FIELDID = AttributesEnum.FieldId.index();
    public static final int FIELDVAL = AttributesEnum.FieldVal.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int TRANSFLDVALDATE = AttributesEnum.TransFldValDate.index();
    public static final int TRANSFLDVALBOOL = AttributesEnum.TransFldValBool.index();
    public static final int TRANSFLDVALNUM = AttributesEnum.TransFldValNum.index();
    public static final int TRANSFLDTYPE = AttributesEnum.TransFldType.index();
    public static final int TRANSFLDREQ = AttributesEnum.TransFldReq.index();
    public static final int TRANSFLDLEN = AttributesEnum.TransFldLen.index();
    public static final int TRANSFLDVALSTRING = AttributesEnum.TransFldValString.index();
    public static final int LOVFLEXIFLDSVO1 = AttributesEnum.LOVFlexiFldsVO1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public BdgFinBudgetFlexiFldsVORowImpl() {
    }

    /**
     * Gets BdgFinBudgetFlexiFldsEO entity object.
     * @return the BdgFinBudgetFlexiFldsEO
     */
    public EntityImpl getBdgFinBudgetFlexiFldsEO() {
        return (EntityImpl) getEntity(ENTITY_BDGFINBUDGETFLEXIFLDSEO);
    }

    /**
     * Gets the attribute value for CLD_ID using the alias name CldId.
     * @return the CLD_ID
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as attribute value for CLD_ID using the alias name CldId.
     * @param value value to set the CLD_ID
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for DOC_ID using the alias name DocId.
     * @return the DOC_ID
     */
    public String getDocId() {
        return (String) getAttributeInternal(DOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for DOC_ID using the alias name DocId.
     * @param value value to set the DOC_ID
     */
    public void setDocId(String value) {
        setAttributeInternal(DOCID, value);
    }

    /**
     * Gets the attribute value for FIELD_ID using the alias name FieldId.
     * @return the FIELD_ID
     */
    public String getFieldId() {
        return (String) getAttributeInternal(FIELDID);
    }

    /**
     * Sets <code>value</code> as attribute value for FIELD_ID using the alias name FieldId.
     * @param value value to set the FIELD_ID
     */
    public void setFieldId(String value) {
        setAttributeInternal(FIELDID, value);
    }

    /**
     * Gets the attribute value for FIELD_VAL using the alias name FieldVal.
     * @return the FIELD_VAL
     */
    public String getFieldVal() {
        return (String) getAttributeInternal(FIELDVAL);
    }

    /**
     * Sets <code>value</code> as attribute value for FIELD_VAL using the alias name FieldVal.
     * @param value value to set the FIELD_VAL
     */
    public void setFieldVal(String value) {
        setAttributeInternal(FIELDVAL, value);
    }

    /**
     * Gets the attribute value for HO_ORG_ID using the alias name HoOrgId.
     * @return the HO_ORG_ID
     */
    public String getHoOrgId() {
        return (String) getAttributeInternal(HOORGID);
    }

    /**
     * Sets <code>value</code> as attribute value for HO_ORG_ID using the alias name HoOrgId.
     * @param value value to set the HO_ORG_ID
     */
    public void setHoOrgId(String value) {
        setAttributeInternal(HOORGID, value);
    }

    /**
     * Gets the attribute value for ORG_ID using the alias name OrgId.
     * @return the ORG_ID
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as attribute value for ORG_ID using the alias name OrgId.
     * @param value value to set the ORG_ID
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for SLOC_ID using the alias name SlocId.
     * @return the SLOC_ID
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for SLOC_ID using the alias name SlocId.
     * @param value value to set the SLOC_ID
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransFldValDate.
     * @return the TransFldValDate
     */
    public Timestamp getTransFldValDate() {
        //System.out.println("inside date flex--" + getTransFldType());
        if (getAttributeInternal(TRANSFLDVALDATE) == null && getFieldVal() != null &&
            getTransFldType().compareTo(756) == 0) {
            try {
                final String OLD_FORMAT = "dd-MM-yyyy HH:mm:ss";
                final String NEW_FORMAT = "yyyy-MM-dd HH:mm:ss.SSS";
                String oldDateString = getFieldVal();
                String newDateString;
                // System.out.println("inside getter date is-->" + oldDateString);
                DateFormat formatter = new SimpleDateFormat(OLD_FORMAT);
                Date d = formatter.parse(oldDateString);
                //System.out.println("inside getter old date is --->" + d);
                ((SimpleDateFormat) formatter).applyPattern(NEW_FORMAT);
                newDateString = formatter.format(d);
                // System.out.println("inside geter new date is--->" + newDateString);

                Timestamp ts = Timestamp.valueOf(newDateString);
                //  System.out.println(ts);
                return (ts);
            } catch (Exception e) {
                // System.out.println("Exception  occured:::" + e);
                e.printStackTrace();
            }
        }
        return (Timestamp) getAttributeInternal(TRANSFLDVALDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransFldValDate.
     * @param value value to set the  TransFldValDate
     */
    public void setTransFldValDate(Timestamp value) {
        if (value != null) {
            //System.out.println("date value inside setter--->" + value);
            final String ui_FORMAT = "yyyy-MM-dd HH:mm:ss.SSS";
            final String db_FORMAT = "dd-MM-yyyy HH:mm:ss";
            DateFormat formatter = new SimpleDateFormat(ui_FORMAT);
            Date d = null;
            try {
                d = formatter.parse(value.toString());
                // System.out.println("formated date --" + d);
            } catch (ParseException e) {
                // System.out.println("exception in date setter---" + e);
            }

            ((SimpleDateFormat) formatter).applyPattern(db_FORMAT);
            String dt = formatter.format(d);
            //System.out.println("date in db format is --" + dt);
            // Timestamp ts = Timestamp.valueOf(dt);
            // String date = ts.toString();
            // System.out.println("date will be set--" + date);
            setFieldVal(dt);
        }
        setAttributeInternal(TRANSFLDVALDATE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransFldValBool.
     * @return the TransFldValBool
     */
    public String getTransFldValBool() {
        if (getAttributeInternal(TRANSFLDVALBOOL) == null && getFieldVal() != null &&
            getTransFldType().compareTo(759) == 0) {
            return (getFieldVal());
        }
        return (String) getAttributeInternal(TRANSFLDVALBOOL);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransFldValBool.
     * @param value value to set the  TransFldValBool
     */
    public void setTransFldValBool(String value) {
        if (value != null) {
            // System.out.println("Value of Boll::" + value);
            setFieldVal(value);
        }
        setAttributeInternal(TRANSFLDVALBOOL, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransFldValNum.
     * @return the TransFldValNum
     */
    public Number getTransFldValNum() {
        if (getAttributeInternal(TRANSFLDVALNUM) == null && getFieldVal() != null &&
            getTransFldType().compareTo(758) == 0) {
            Number val = new Number(0);

            try {
                val = new Number(getFieldVal());
            } catch (Exception e) {
                // System.out.println("Exception  occured::" + e);
                e.printStackTrace();
            }
            return (val);
        }
        return (Number) getAttributeInternal(TRANSFLDVALNUM);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransFldValNum.
     * @param value value to set the  TransFldValNum
     */
    public void setTransFldValNum(Number value) {
        if (value != null) {
            String num = value.toString();
            setFieldVal(num);
        }
        setAttributeInternal(TRANSFLDVALNUM, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransFldType.
     * @return the TransFldType
     */
    public Integer getTransFldType() {
        if (getAttributeInternal(TRANSFLDTYPE) == null && getFieldId() != null) {
            //System.out.println("Value of fldid id:::" + getFldId());
            ViewObjectImpl fld = this.getAm().getLOVFlexiFldsVO1();
            fld.setNamedWhereClauseParam("BindCldId", getCldId());
            fld.setNamedWhereClauseParam("BindDocId", new Number(34004));
            fld.executeQuery();
            Row rr[] = fld.getFilteredRows("FldId", getFieldId());
            if (rr.length > 0) {
                Integer type = (Integer) rr[0].getAttribute("DataType");
                // System.out.println("value of type::" + type);
                return type;
            }
        }
        return (Integer) getAttributeInternal(TRANSFLDTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransFldType.
     * @param value value to set the  TransFldType
     */
    public void setTransFldType(Integer value) {
        setAttributeInternal(TRANSFLDTYPE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransFldReq.
     * @return the TransFldReq
     */
    public String getTransFldReq() {
        if (getAttributeInternal(TRANSFLDREQ) == null && getFieldId() != null) {
            //System.out.println("Value of fldid id:::" + getFldId());
            ViewObjectImpl fld = this.getAm().getLOVFlexiFldsVO1();
            fld.setNamedWhereClauseParam("BindCldId", getCldId());
            fld.setNamedWhereClauseParam("BindDocId", new Number(34004));
            fld.executeQuery();
            Row rr[] = fld.getFilteredRows("FldId", getFieldId());
            if (rr.length > 0) {
                String req = (String) rr[0].getAttribute("Reqd");
                // System.out.println("value of type::" + type);
                return req;
            }
        }
        return (String) getAttributeInternal(TRANSFLDREQ);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransFldReq.
     * @param value value to set the  TransFldReq
     */
    public void setTransFldReq(String value) {
        setAttributeInternal(TRANSFLDREQ, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransFldLen.
     * @return the TransFldLen
     */
    public Integer getTransFldLen() {
        if (getAttributeInternal(TRANSFLDLEN) == null && getFieldId() != null) {
            //System.out.println("Value of fldid id:::" + getFldId());
            ViewObjectImpl fld = this.getAm().getLOVFlexiFldsVO1();
            fld.setNamedWhereClauseParam("BindCldId", getCldId());
            fld.setNamedWhereClauseParam("BindDocId", new Number(34004));
            fld.executeQuery();
            Row rr[] = fld.getFilteredRows("FldId", getFieldId());
            if (rr.length > 0) {
                Integer len = (Integer) rr[0].getAttribute("DataLen");
                // System.out.println("value of type::" + type);
                return len;
            }
        }
        return (Integer) getAttributeInternal(TRANSFLDLEN);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransFldLen.
     * @param value value to set the  TransFldLen
     */
    public void setTransFldLen(Integer value) {
        setAttributeInternal(TRANSFLDLEN, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransFldValString.
     * @return the TransFldValString
     */
    public String getTransFldValString() {
        if (getAttributeInternal(TRANSFLDVALSTRING) == null && getFieldVal() != null &&
            getTransFldType().compareTo(757) == 0) {
            return (getFieldVal());
        }
        return (String) getAttributeInternal(TRANSFLDVALSTRING);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransFldValString.
     * @param value value to set the  TransFldValString
     */
    public void setTransFldValString(String value) {
        if (value != null) {
            setFieldVal(value);
        }
        setAttributeInternal(TRANSFLDVALSTRING, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LOVFlexiFldsVO1.
     */
    public RowSet getLOVFlexiFldsVO1() {
        return (RowSet) getAttributeInternal(LOVFLEXIFLDSVO1);
    }

    /**
     * Method will return Application Module App
     */
    public BdgFinanceBudgetAMImpl getAm() {
        BdgFinanceBudgetAMImpl am = (BdgFinanceBudgetAMImpl) getApplicationModule();
        return am;
    }
}
