package bdgfinancebudgetapp.model.views;

import bdgfinancebudgetapp.model.services.BdgFinanceBudgetAMImpl;

import oracle.jbo.RowIterator;
import oracle.jbo.RowSet;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Apr 06 19:40:06 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class HeadCustomerForPNLVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CldId,
        SlocId,
        OrgId,
        HoOrgId,
        DocId,
        CustEoId,
        EoNm,
        EoIdForChild,
        RegionIdForChild,
        TotalSumExpenseTrans,
        TotalSumIncomeTrans,
        TotalSumExpenseNotaTrans,
        TotalSumIncomeNotaTrans,
        BdgIncomeSumm,
        BdgExpenseSumm;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int CUSTEOID = AttributesEnum.CustEoId.index();
    public static final int EONM = AttributesEnum.EoNm.index();
    public static final int EOIDFORCHILD = AttributesEnum.EoIdForChild.index();
    public static final int REGIONIDFORCHILD = AttributesEnum.RegionIdForChild.index();
    public static final int TOTALSUMEXPENSETRANS = AttributesEnum.TotalSumExpenseTrans.index();
    public static final int TOTALSUMINCOMETRANS = AttributesEnum.TotalSumIncomeTrans.index();
    public static final int TOTALSUMEXPENSENOTATRANS = AttributesEnum.TotalSumExpenseNotaTrans.index();
    public static final int TOTALSUMINCOMENOTATRANS = AttributesEnum.TotalSumIncomeNotaTrans.index();
    public static final int BDGINCOMESUMM = AttributesEnum.BdgIncomeSumm.index();
    public static final int BDGEXPENSESUMM = AttributesEnum.BdgExpenseSumm.index();

    /**
     * This is the default constructor (do not remove).
     */
    public HeadCustomerForPNLVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute CldId.
     * @return the CldId
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Gets the attribute value for the calculated attribute SlocId.
     * @return the SlocId
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Gets the attribute value for the calculated attribute OrgId.
     * @return the OrgId
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Gets the attribute value for the calculated attribute HoOrgId.
     * @return the HoOrgId
     */
    public String getHoOrgId() {
        return (String) getAttributeInternal(HOORGID);
    }

    /**
     * Gets the attribute value for the calculated attribute DocId.
     * @return the DocId
     */
    public String getDocId() {
        return (String) getAttributeInternal(DOCID);
    }

    /**
     * Gets the attribute value for the calculated attribute CustEoId.
     * @return the CustEoId
     */
    public Integer getCustEoId() {
        return (Integer) getAttributeInternal(CUSTEOID);
    }

    /**
     * Gets the attribute value for the calculated attribute EoNm.
     * @return the EoNm
     */
    public String getEoNm() {
        return (String) getAttributeInternal(EONM);
    }

    /**
     * Gets the attribute value for the calculated attribute EoIdForChild.
     * @return the EoIdForChild
     */
    public String getEoIdForChild() {
        return (String) getAttributeInternal(EOIDFORCHILD);
    }

    /**
     * Gets the attribute value for the calculated attribute RegionIdForChild.
     * @return the RegionIdForChild
     */
    public String getRegionIdForChild() {
        return (String) getAttributeInternal(REGIONIDFORCHILD);
    }

    /**
     * Gets the attribute value for the calculated attribute TotalSumExpenseTrans.
     * @return the TotalSumExpenseTrans
     */
    public Number getTotalSumExpenseTrans() {
        return (Number) getAttributeInternal(TOTALSUMEXPENSETRANS);
    }

    /**
     * Gets the attribute value for the calculated attribute TotalSumIncomeTrans.
     * @return the TotalSumIncomeTrans
     */
    public Number getTotalSumIncomeTrans() {
        return (Number) getAttributeInternal(TOTALSUMINCOMETRANS);
    }

    /**
     * Gets the attribute value for the calculated attribute TotalSumExpenseNotaTrans.
     * @return the TotalSumExpenseNotaTrans
     */
    public Number getTotalSumExpenseNotaTrans() {
        if (getAttributeInternal(TOTALSUMEXPENSENOTATRANS) == null && this.getTotalSumExpenseTrans() != null) {
            return this.getAm().convertNumberToNotation(getTotalSumExpenseTrans());
        }
        return (Number) getAttributeInternal(TOTALSUMEXPENSENOTATRANS);
    }

    /**
     * Gets the attribute value for the calculated attribute TotalSumIncomeNotaTrans.
     * @return the TotalSumIncomeNotaTrans
     */
    public Number getTotalSumIncomeNotaTrans() {
        if (getAttributeInternal(TOTALSUMINCOMENOTATRANS) == null && this.getTotalSumIncomeTrans() != null) {
            return this.getAm().convertNumberToNotation(getTotalSumIncomeTrans());
        }
        return (Number) getAttributeInternal(TOTALSUMINCOMENOTATRANS);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link BdgIncomeSumm.
     */
    public RowIterator getBdgIncomeSumm() {
        RowSet rs = (RowSet) getAttributeInternal(BDGINCOMESUMM);
        rs.setNamedWhereClauseParam("BindCldId", this.getCldId());
        rs.setNamedWhereClauseParam("BindSlocId", this.getSlocId());
        rs.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgId());
        rs.setNamedWhereClauseParam("BindOrgId", this.getOrgId());
        rs.setNamedWhereClauseParam("BindCustEoId", this.getCustEoId());
        rs.setNamedWhereClauseParam("BindCustEoIdNot", 0);
        if (this.getRegionIdForChild() != null) {
            rs.setNamedWhereClauseParam("BindRegion", this.getRegionIdForChild());
        }
        if (this.getEoIdForChild() != null) {
            rs.setNamedWhereClauseParam("BindEoId", this.getEoIdForChild());
        }

        rs.executeQuery();
        RowIterator ri = rs.createRowSetIterator(null);
        return ri;
        // return (RowIterator) getAttributeInternal(BDGINCOMESUMM);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link BdgExpenseSumm.
     */
    public RowIterator getBdgExpenseSumm() {
        RowSet rs = (RowSet) getAttributeInternal(BDGEXPENSESUMM);
        rs.setNamedWhereClauseParam("BindCldId", this.getCldId());
        rs.setNamedWhereClauseParam("BindSlocId", this.getSlocId());
        rs.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgId());
        rs.setNamedWhereClauseParam("BindOrgId", this.getOrgId());
        rs.setNamedWhereClauseParam("BindCustEoId", this.getCustEoId());
        rs.setNamedWhereClauseParam("BindCustEoIdNot", 0);
        if (this.getRegionIdForChild() != null) {
            rs.setNamedWhereClauseParam("BindRegion", this.getRegionIdForChild());
        }
        if (this.getEoIdForChild() != null) {
            rs.setNamedWhereClauseParam("BindEoId", this.getEoIdForChild());
        }

        rs.executeQuery();
        RowIterator ri = rs.createRowSetIterator(null);
        return ri;
        //return (RowIterator) getAttributeInternal(BDGEXPENSESUMM);
    }

    /**
     * Method will return Application Module App
     */
    public BdgFinanceBudgetAMImpl getAm() {
        BdgFinanceBudgetAMImpl am = (BdgFinanceBudgetAMImpl) getApplicationModule();
        return am;
    }
}
