package budmis.model.service;


import budmis.model.service.common.BdgMisAppModule;

import java.util.HashSet;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.Row;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.apache.myfaces.trinidad.context.RequestContext;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue May 05 18:28:09 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class BdgMisAppModuleImpl extends ApplicationModuleImpl implements BdgMisAppModule {
    /**
     * This is the default constructor (do not remove).
     */
    public BdgMisAppModuleImpl() {
    }

    /**
     * Container's getter for BdgGrphVO1.
     * @return BdgGrphVO1
     */
    public ViewObjectImpl getBdgGrphVO1() {
        return (ViewObjectImpl) findViewObject("BdgGrphVO1");
    }

    /*--------------------------Getting Graph Name--------------------------------------*/
    public String retriveGraphName(String grphId) {
        String name = "";
        Row fr[] = this.getBdgGrphVO1().getFilteredRows("GrphId", grphId);
        if (fr.length > 0)
            name = (String) fr[0].getAttribute("GrphNm");
        return name;
    }

    /**
     * Container's getter for RevenueVsExpenseVO1.
     * @return RevenueVsExpenseVO1
     */
    public ViewObjectImpl getRevenueVsExpenseVO1() {
        return (ViewObjectImpl) findViewObject("RevenueVsExpenseVO1");
    }

    /*--------------------------------Filter All VO--------------------------------------*/
    public void filterBudgetMisGraphs(String cld_id, String ho_org_id, String org_id, Integer sloc_id, Integer user_id,
                                      Integer doc_type_id) {
        System.out.println("Inside method");
        this.getTransIdNmVO1().executeQuery();
        ViewObjectImpl bdgGrph = this.getBdgGrphUsrDtlVO1();
        bdgGrph.setNamedWhereClauseParam("CldIdBind", cld_id);
        bdgGrph.setNamedWhereClauseParam("SlocIdBind", sloc_id);
        //bdgGrph.setNamedWhereClauseParam("HoOrgIdBind", ho_org_id);
        //bdgGrph.setNamedWhereClauseParam("OrgIdBind", org_id);
        bdgGrph.setNamedWhereClauseParam("GlblDocIdBind", doc_type_id);
        //bdgGrph.setNamedWhereClauseParam("UsrIdBind", user_id);
        bdgGrph.executeQuery();
        System.out.println("No. of Rows=" + bdgGrph.getEstimatedRowCount());

        if (chkGraphAvailablity("1") != null && chkGraphAvailablity("1").equalsIgnoreCase("Y")) {
            ViewObjectImpl pREVyRbDG = this.getPrevBdgIndirectExpenseVsCurrentVo1();
            pREVyRbDG.setNamedWhereClauseParam("CldIdBindVar", cld_id);
            pREVyRbDG.setNamedWhereClauseParam("SlocIdBindVar", sloc_id);
            pREVyRbDG.setNamedWhereClauseParam("HoOrgIdBindVar", ho_org_id);
            pREVyRbDG.setNamedWhereClauseParam("OrgIdBindVar", org_id);
            pREVyRbDG.executeQuery();
        }
        if (chkGraphAvailablity("2") != null && chkGraphAvailablity("2").equalsIgnoreCase("Y")) {
        ViewObjectImpl actualExpense1 = this.getbudgetedVsActualExpense1();
        actualExpense1.setNamedWhereClauseParam("CldIdBind", cld_id);
        actualExpense1.setNamedWhereClauseParam("SlocIdBind", sloc_id);
        actualExpense1.setNamedWhereClauseParam("HoOrgIdBind", ho_org_id);
        actualExpense1.setNamedWhereClauseParam("OrgIdBind", org_id);
        actualExpense1.executeQuery();
        }
        if (chkGraphAvailablity("3") != null && chkGraphAvailablity("3").equalsIgnoreCase("Y")) {
            ViewObjectImpl CrVsEx = this.getCurrentIncomeVsExpense1();
            CrVsEx.setNamedWhereClauseParam("CldIdBindVar", cld_id);
            CrVsEx.setNamedWhereClauseParam("SlocIdBindVar", sloc_id);
            CrVsEx.setNamedWhereClauseParam("HoOrgIdBindVar", ho_org_id);
            CrVsEx.setNamedWhereClauseParam("OrgIdBindVar", org_id);
            CrVsEx.executeQuery();
        }
        if (chkGraphAvailablity("4") != null && chkGraphAvailablity("4").equalsIgnoreCase("Y")) {
        }
        if (chkGraphAvailablity("5") != null && chkGraphAvailablity("5").equalsIgnoreCase("Y")) {
        }
        if (chkGraphAvailablity("6") != null && chkGraphAvailablity("6").equalsIgnoreCase("Y")) {
            ViewObjectImpl prevBdg = this.getPrevYrBudgetVsCurrentYrBudgetVO1();
            prevBdg.setNamedWhereClauseParam("CldIdBindVar", cld_id);
            prevBdg.setNamedWhereClauseParam("SlocIdBindVar", sloc_id);
            prevBdg.setNamedWhereClauseParam("HoOrgIdBindVar", ho_org_id);
            prevBdg.setNamedWhereClauseParam("OrgIdBindVar", org_id);
            prevBdg.executeQuery();
        }
        if (chkGraphAvailablity("7") != null && chkGraphAvailablity("7").equalsIgnoreCase("Y")) {
            ViewObjectImpl bdgVSCurrentYrActualVO1 = this.getCurrentYrBdgVSCurrentYrActualVO1();
            bdgVSCurrentYrActualVO1.setNamedWhereClauseParam("CldIdBindVar", cld_id);
            bdgVSCurrentYrActualVO1.setNamedWhereClauseParam("SlocIdBindVar", sloc_id);
            bdgVSCurrentYrActualVO1.setNamedWhereClauseParam("HoOrgIdBindVar", ho_org_id);
            bdgVSCurrentYrActualVO1.setNamedWhereClauseParam("OrgIdBindVar", org_id);
            bdgVSCurrentYrActualVO1.executeQuery();
        }
        if (chkGraphAvailablity("8") != null && chkGraphAvailablity("8").equalsIgnoreCase("Y")) {
            ViewObjectImpl actualVO1 = this.getPrevBdgVsPrevActualVO1();
            actualVO1.setNamedWhereClauseParam("CldIdBindVar", cld_id);
            actualVO1.setNamedWhereClauseParam("SlocIdBindVar", sloc_id);
            actualVO1.setNamedWhereClauseParam("HoOrgIdBindVar", ho_org_id);
            actualVO1.setNamedWhereClauseParam("OrgIdBindVar", org_id);
            actualVO1.executeQuery();
        }
        if (chkGraphAvailablity("9") != null && chkGraphAvailablity("9").equalsIgnoreCase("Y")) {
            this.getPrvTargetVsCurrentTarget1().executeQuery();
        }
        if (chkGraphAvailablity("10") != null && chkGraphAvailablity("10").equalsIgnoreCase("Y")) {

        ViewObjectImpl actual1 = this.getSalesTargetVsActual1();
        actual1.setNamedWhereClauseParam("CldIdBind", cld_id);
        actual1.setNamedWhereClauseParam("SlocIdBind", sloc_id);
        actual1.setNamedWhereClauseParam("HoOrgIdBind", ho_org_id);
        actual1.setNamedWhereClauseParam("OrgIdBind", org_id);
        actual1.setNamedWhereClauseParam("EmpCodeBind", 2477);
        actual1.executeQuery();
        }
        if (chkGraphAvailablity("11") != null && chkGraphAvailablity("11").equalsIgnoreCase("Y")) {
            ViewObjectImpl actualRevenue1 = this.getbudgetedVsActualRevenue1();
            actualRevenue1.setNamedWhereClauseParam("CldIdBind", cld_id);
            actualRevenue1.setNamedWhereClauseParam("SlocIdBind", sloc_id);
            actualRevenue1.setNamedWhereClauseParam("HoOrgIdBind", ho_org_id);
            actualRevenue1.setNamedWhereClauseParam("OrgIdBind", org_id);
            actualRevenue1.executeQuery();
        }

        if (chkGraphAvailablity("12") != null && chkGraphAvailablity("12").equalsIgnoreCase("Y")) {
            ViewObjectImpl expenseVO1 = this.getRevenueVsExpenseVO1();
            expenseVO1.setNamedWhereClauseParam("CldIdBind", cld_id);
            expenseVO1.setNamedWhereClauseParam("SlocIdBind", sloc_id);
            expenseVO1.setNamedWhereClauseParam("HoOrgIdBind", ho_org_id);
            expenseVO1.setNamedWhereClauseParam("OrgIdBind", org_id);
            expenseVO1.executeQuery();

        }


        /*-----------------Empty Hasset's-------------------*/
        custHS.clear();
        empHS.clear();
        prdHS.clear();
        prdgrpHS.clear();
        regionHS.clear();
        coaHS.clear();
    }

    /**
     * Method which will set Employee Code from user Id and Set global Parameter for Emp Code
     * #{pageFlowScope.P_EMP_CODE}
     */
    public void setEmployeeCodeToGlobalParam(String cld_id, String ho_org_id, String org_id, Integer sloc_id,
                                             Integer user_id, Integer doc_type_id) {

        ViewObjectImpl detailVO1 = this.getEmployeeCodeVO1();
        detailVO1.setNamedWhereClauseParam("BindCldId", cld_id);
        detailVO1.setNamedWhereClauseParam("BindSlocId", sloc_id);
        detailVO1.setNamedWhereClauseParam("BindHoOrgId", ho_org_id);
        detailVO1.setNamedWhereClauseParam("BindOrgId", org_id);
        detailVO1.setNamedWhereClauseParam("BindUserId", user_id);
        detailVO1.executeQuery();

        Row[] allRowsInRange = detailVO1.getAllRowsInRange();
        System.out.println("lenght:::::" + allRowsInRange.length);
        if (allRowsInRange.length > 0) {
            RequestContext.getCurrentInstance().getPageFlowScope().put("GLBL_EMPLOYEE_CODE",
                                                                       allRowsInRange[0].getAttribute("EmpCode"));
        }

        this.filterBudgetMisGraphs(cld_id, ho_org_id, org_id, sloc_id, user_id, doc_type_id);
    }

    public String chkGraphAvailablity(String grphId) {
        System.out.println("no. of rows here=" + this.getBdgGrphUsrDtlVO1().getFilteredRows("GrphId", grphId).length);
        if (this.getBdgGrphUsrDtlVO1().getFilteredRows("GrphId", grphId).length > 0)
            return "Y";
        else
            return "N";
    }

    /*-------------------------------Method for ADD-----------------------------------*/
    HashSet<Object> custHS = new HashSet<Object>();
    HashSet<Object> empHS = new HashSet<Object>();
    HashSet<Object> prdHS = new HashSet<Object>();
    HashSet<Object> prdgrpHS = new HashSet<Object>();
    HashSet<Object> regionHS = new HashSet<Object>();
    HashSet<Object> coaHS = new HashSet<Object>();

    public void addIDName_Func(String val) {
        if ("C".equals(val)) {
            addIdName(this.getTransientVO1().getCurrentRow().getAttribute("TransCustId"),
                      this.getTransientVO1().getCurrentRow().getAttribute("TransCustNm"), "Customer");
            custHS.add(this.getTransientVO1().getCurrentRow().getAttribute("TransCustId"));
        }
        if ("E".equals(val)) {
            addIdName(this.getTransientVO1().getCurrentRow().getAttribute("TransEmpId"),
                      this.getTransientVO1().getCurrentRow().getAttribute("TransEmpNm"), "Employee");
            empHS.add(this.getTransientVO1().getCurrentRow().getAttribute("TransEmpId"));
        }
        if ("P".equals(val)) {
            addIdName(this.getTransientVO1().getCurrentRow().getAttribute("TransProductId"),
                      this.getTransientVO1().getCurrentRow().getAttribute("TransProductNm"), "Product");
            prdHS.add(this.getTransientVO1().getCurrentRow().getAttribute("TransProductId"));
        }
        if ("PG".equals(val)) {
            addIdName(this.getTransientVO1().getCurrentRow().getAttribute("TransProductGrpId"),
                      this.getTransientVO1().getCurrentRow().getAttribute("TransProductGrp"), "Product Group");
            prdgrpHS.add(this.getTransientVO1().getCurrentRow().getAttribute("TransProductGrpId"));
        }
        if ("R".equals(val)) {
            addIdName(this.getTransientVO1().getCurrentRow().getAttribute("TransRegionId"),
                      this.getTransientVO1().getCurrentRow().getAttribute("TransRegionNm"), "Region");
            regionHS.add(this.getTransientVO1().getCurrentRow().getAttribute("TransRegionId"));
        }
        if ("CO".equals(val)) {
            addIdName(this.getTransientVO1().getCurrentRow().getAttribute("TransCoaId"),
                      this.getTransientVO1().getCurrentRow().getAttribute("TransCoaNm"), "COA");
            coaHS.add(this.getTransientVO1().getCurrentRow().getAttribute("TransCoaId"));
        }
    }

    public void addIdName(Object id, Object name, String CheckVal) {
        ViewObjectImpl idNmVO1 = this.getTransIdNmVO1();
        Row createRow = idNmVO1.createRow();
        createRow.setAttribute("ID", id);
        createRow.setAttribute("NAME", name);
        createRow.setAttribute("CheckVal", CheckVal);
        idNmVO1.insertRow(createRow);
    }

    public void deleteFilter_Func(String val) {
        System.out.println("val in delete section---------" + val);
    }

    public void SearchInGraphs_Func(String LinkId, String cld_id, String ho_org_id, String org_id, Integer sloc_id,
                                    Integer user_id, Integer doc_type_id) {
        int emp_code = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_EMPLOYEE_CODE}"));
        System.out.println("Employee code-------" + emp_code);
        System.out.println("Valu in search---------" + LinkId);
        System.out.println("cust" + custHS.size() + "emp" + empHS.size() + "prd" + prdHS.size() + "prdGrp" +
                           prdgrpHS.size() + "Region" + regionHS.size() + "coa" + coaHS.size());
    }

    /**Method to resolve expression- returns String value*/
    protected String resolvEl(String data) {
        String val = null;
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        Object Message = valueExp.getValue(elContext);
        if (Message != null) {
            val = Message.toString();
        }
        return val;
    }


    /**
     * Container's getter for budgetedVsActualRevenue1.
     * @return budgetedVsActualRevenue1
     */
    public ViewObjectImpl getbudgetedVsActualRevenue1() {
        return (ViewObjectImpl) findViewObject("budgetedVsActualRevenue1");
    }

    /**
     * Container's getter for budgetedVsActualExpense1.
     * @return budgetedVsActualExpense1
     */
    public ViewObjectImpl getbudgetedVsActualExpense1() {
        return (ViewObjectImpl) findViewObject("budgetedVsActualExpense1");
    }

    /**
     * Container's getter for SalesTargetVsActual1.
     * @return SalesTargetVsActual1
     */
    public ViewObjectImpl getSalesTargetVsActual1() {
        return (ViewObjectImpl) findViewObject("SalesTargetVsActual1");
    }

    /**
     * Container's getter for TransientVO1.
     * @return TransientVO1
     */
    public ViewObjectImpl getTransientVO1() {
        return (ViewObjectImpl) findViewObject("TransientVO1");
    }

    /**
     * Container's getter for TransIdNmVO1.
     * @return TransIdNmVO1
     */
    public ViewObjectImpl getTransIdNmVO1() {
        return (ViewObjectImpl) findViewObject("TransIdNmVO1");
    }

    /**
     * Container's getter for PrevBdgVsPrevActualVO1.
     * @return PrevBdgVsPrevActualVO1
     */
    public ViewObjectImpl getPrevBdgVsPrevActualVO1() {
        return (ViewObjectImpl) findViewObject("PrevBdgVsPrevActualVO1");
    }

    /**
     * Container's getter for CurrentYrBdgVSCurrentYrActualVO1.
     * @return CurrentYrBdgVSCurrentYrActualVO1
     */
    public ViewObjectImpl getCurrentYrBdgVSCurrentYrActualVO1() {
        return (ViewObjectImpl) findViewObject("CurrentYrBdgVSCurrentYrActualVO1");
    }

    /**
     * Container's getter for PrevYrBudgetVsCurrentYrBudgetVO1.
     * @return PrevYrBudgetVsCurrentYrBudgetVO1
     */
    public ViewObjectImpl getPrevYrBudgetVsCurrentYrBudgetVO1() {
        return (ViewObjectImpl) findViewObject("PrevYrBudgetVsCurrentYrBudgetVO1");
    }

    /**
     * Container's getter for BdgGrphUsrDtlVO1.
     * @return BdgGrphUsrDtlVO1
     */
    public ViewObjectImpl getBdgGrphUsrDtlVO1() {
        return (ViewObjectImpl) findViewObject("BdgGrphUsrDtlVO1");
    }

    /**
     * Container's getter for PrevBdgIndirectExpenseVsCurrentVo1.
     * @return PrevBdgIndirectExpenseVsCurrentVo1
     */
    public ViewObjectImpl getPrevBdgIndirectExpenseVsCurrentVo1() {
        return (ViewObjectImpl) findViewObject("PrevBdgIndirectExpenseVsCurrentVo1");
}

    /**
     * Container's getter for CurrentIncomeVsExpense1.
     * @return CurrentIncomeVsExpense1
     */
    public ViewObjectImpl getCurrentIncomeVsExpense1() {
        return (ViewObjectImpl) findViewObject("CurrentIncomeVsExpense1");
    }

    /**
     * Container's getter for EmployeeCodeVO1.
     * @return EmployeeCodeVO1
     */
    public ViewObjectImpl getEmployeeCodeVO1() {
        return (ViewObjectImpl) findViewObject("EmployeeCodeVO1");
    }

    /**
     * Container's getter for PrvTargetVsCurrentTarget1.
     * @return PrvTargetVsCurrentTarget1
     */
    public ViewObjectImpl getPrvTargetVsCurrentTarget1() {
        return (ViewObjectImpl) findViewObject("PrvTargetVsCurrentTarget1");
    }
}

