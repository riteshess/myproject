package bdgprofilesetupapp.model.modules;

import bdgprofilesetupapp.model.modules.common.BudgetProfileSetupAM;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Dec 09 17:19:09 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class BudgetProfileSetupAMImpl extends ApplicationModuleImpl implements BudgetProfileSetupAM {
    /**
     * This is the default constructor (do not remove).
     */
    public BudgetProfileSetupAMImpl() {
    }

    /**
     * Container's getter for OrgBdgPrf.
     * @return OrgBdgPrf
     */
    public ViewObjectImpl getOrgBdgPrf() {
        return (ViewObjectImpl) findViewObject("OrgBdgPrf");
    }

    public void executeOnPageLoad(String cldId, String hoOrgId, String orgId, Integer slocId) {
        this.getOrgBdgPrf().setNamedWhereClauseParam("cldIdBind", cldId);
        this.getOrgBdgPrf().setNamedWhereClauseParam("slocIdBind", slocId);
        this.getOrgBdgPrf().setNamedWhereClauseParam("orgIdBind", orgId);
        this.getOrgBdgPrf().executeQuery();
    }

    /**
     * Container's getter for OrgBdgPrf1.
     * @return OrgBdgPrf1
     */
    public ViewObjectImpl getOrgBdgPrf1() {
        return (ViewObjectImpl) findViewObject("OrgBdgPrf1");
    }

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.executeUpdate();

            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    throw new JboException(e);
                }
            }
        }
    }


    public Integer checkPrf(Integer sloc, Integer User, String Org, String Cld) {

        System.out.println("IN Amipml---" + "cld--" + Cld + " Sloc--" + sloc + "  org--" + Org + " User----" + User);

        Integer rslt = Integer.parseInt(callStoredFunction(Types.NUMERIC, "APP.FN_INS_ORG_BDG_PRF(?,?,?,?)", new Object[] {
                                                           Cld, sloc, Org, User
        }).toString());
        System.out.println("result is->  " + rslt);

        // Ho Org For this Org-----------------------------
        String HoOrgNm = null;
        ViewObjectImpl hoOrg = this.getLovHoOrgId1();
        hoOrg.setNamedWhereClauseParam("BindOrgId", Org);
        hoOrg.setNamedWhereClauseParam("BindSlocId", sloc);
        hoOrg.setNamedWhereClauseParam("BindCldId", Cld);
        hoOrg.executeQuery();
        Row[] rows = hoOrg.getAllRowsInRange();
        System.out.println("all rows for org--" + rows.length);
        if (rows.length > 0) {
            System.out.println("Inside Org Row----");
            if (rows[0].getAttribute("OrgIdParentL0") != null) {
                System.out.println("Inside Orgparent not null----");
                String parentOrgId = rows[0].getAttribute("OrgIdParentL0").toString();
                System.out.println("Parent Org--" + parentOrgId);
                hoOrg.setNamedWhereClauseParam("BindOrgId", parentOrgId);
                hoOrg.setNamedWhereClauseParam("BindSlocId", sloc);
                hoOrg.setNamedWhereClauseParam("BindCldId", Cld);
                hoOrg.executeQuery();
                System.out.println("after filter by Parent org ID");
                Row[] allrows = hoOrg.getAllRowsInRange();
                System.out.println("all rows for Hoorg--" + allrows.length);
                if (allrows.length > 0) {
                    HoOrgNm = allrows[0].getAttribute("OrgDesc").toString();
                    System.out.println("hoOrg Name Is-----" + HoOrgNm);
                }
            }
        }


        if (rslt != null) {
            if (rslt.toString().equals("-1")) {
                FacesMessage message = new FacesMessage("Please create profile for head office [" + HoOrgNm + "]!");
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext fc = FacesContext.getCurrentInstance();
                fc.addMessage(null, message);
            }

            else if (rslt.toString().equals("-2")) {
                FacesMessage message =
                    new FacesMessage("Profile for head office [" + HoOrgNm + "] has not been freezed!");
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext fc = FacesContext.getCurrentInstance();
                fc.addMessage(null, message);
            } else
                getOrgBdgPrf().executeQuery();
        }
        return rslt;
    }


    public String attributeSetter() {

        Row newRow = this.getOrgBdgPrfDocDtl().createRow();
        newRow.setAttribute("CldId", this.getOrgBdgPrf().getCurrentRow().getAttribute("CldId"));
        newRow.setAttribute("SlocId", this.getOrgBdgPrf().getCurrentRow().getAttribute("SlocId"));
        newRow.setAttribute("OrgId", this.getOrgBdgPrf().getCurrentRow().getAttribute("OrgId"));

        if (this.getOrgBdgPrf().getCurrentRow().getAttribute("TransDocId") != null) {
            newRow.setAttribute("DocId", this.getOrgBdgPrf().getCurrentRow().getAttribute("TransDocId"));

            int max = 0;
            Row[] rows =
                this.getOrgBdgPrfDocDtl().getFilteredRows("DocId",
                                                          this.getOrgBdgPrf().getCurrentRow().getAttribute("TransDocId"));
            for (Row r : rows) {
                int level = 0;
                if (r.getAttribute("DocLevel") != null) {
                    level = Integer.parseInt(r.getAttribute("DocLevel").toString());
                }
                if (level > max)
                    max = level;
            }
            System.out.println("Max doc Level = " + max);
            newRow.setAttribute("DocLevel", max + 1);
        } else {
            newRow.remove();
            return "DocId";
        }

        if (this.getOrgBdgPrf().getCurrentRow().getAttribute("TransDocStruct") != null) {
            String ret = chkDupliStruct((Integer) this.getOrgBdgPrf().getCurrentRow().getAttribute("TransDocStruct"));
            if (ret.equals("N")) {
                newRow.setAttribute("DocStruct", this.getOrgBdgPrf().getCurrentRow().getAttribute("TransDocStruct"));
            } else {
                return "DupliDocStruct";
            }
        } else {
            newRow.remove();
            return "DocStruct";
        }

        if (this.getOrgBdgPrf().getCurrentRow().getAttribute("TransDocStructDpnd") != null) {
            newRow.setAttribute("DocStructDepd",
                                this.getOrgBdgPrf().getCurrentRow().getAttribute("TransDocStructDpnd"));
            newRow.setAttribute("DocDepd", "Y");

        }
        this.getOrgBdgPrfDocDtl().insertRow(newRow);
        return "Y";

    }

    public String chkDupliStruct(Integer structId) {
        if (structId != null) {
            RowQualifier rq = new RowQualifier(this.getOrgBdgPrfDocDtl());
            rq.setWhereClause("DocId=" + this.getOrgBdgPrf().getCurrentRow().getAttribute("TransDocId") +
                              " and  DocStruct=" + structId);
            Row[] fr = this.getOrgBdgPrfDocDtl().getFilteredRows(rq);
            if (fr.length > 0) {
                return "Y";
            }
        }

        return "N";
    }

    public void filterDocStructVO(Integer docId) {
        this.getOrgBdgPrfDocDtl().setNamedWhereClauseParam("docIdBindVar", docId);
        this.getOrgBdgPrfDocDtl().executeQuery();
    }

    /**
     * Container's getter for LovHoOrgId1.
     * @return LovHoOrgId1
     */
    public ViewObjectImpl getLovHoOrgId1() {
        return (ViewObjectImpl) findViewObject("LovHoOrgId1");
    }

    /**
     * Container's getter for OrgBdgPrfDocDtl1.
     * @return OrgBdgPrfDocDtl1
     */
    public ViewObjectImpl getOrgBdgPrfDocDtl() {
        return (ViewObjectImpl) findViewObject("OrgBdgPrfDocDtl");
    }

    /**
     * Container's getter for BdgPrfToDocDtlVL1.
     * @return BdgPrfToDocDtlVL1
     */
    public ViewLinkImpl getBdgPrfToDocDtlVL1() {
        return (ViewLinkImpl) findViewLink("BdgPrfToDocDtlVL1");
    }
}

