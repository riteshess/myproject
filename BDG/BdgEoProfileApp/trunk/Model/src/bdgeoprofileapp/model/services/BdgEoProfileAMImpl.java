package bdgeoprofileapp.model.services;


import adf.utils.ebiz.EbizParams;
import adf.utils.model.ADFModelUtils;

import appCostCenterSevice.model.service.AppCostCenterServiceAMImpl;

import appexcelimpexpapp.model.util.UpdatedData;

import bdgeoprofileapp.model.services.common.BdgEoProfileAM;
import bdgeoprofileapp.model.views.LOVBdgIdAutoSuggestionVOImpl;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.Date;
import java.sql.SQLException;
import java.sql.Types;

import java.text.ParseException;
import java.text.SimpleDateFormat;

import java.util.Calendar;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import oracle.jbo.ApplicationModule;
import oracle.jbo.AttributeDef;
import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.client.Configuration;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.apache.myfaces.trinidad.context.RequestContext;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Dec 17 11:18:27 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class BdgEoProfileAMImpl extends ApplicationModuleImpl implements BdgEoProfileAM {
    /**
     * This is the default constructor (do not remove).
     */
    public BdgEoProfileAMImpl() {
    }

    protected String getCldIdValue() {
        return resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
    }

    protected Integer getSlocIdValue() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
    }

    protected String getHoOrgIdValue() {
        return resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
    }

    protected String getOrgIdValue() {
        Row currentRow = this.getBdgEoBudgetVO1().getCurrentRow();
        if (currentRow != null && currentRow.getAttribute("OrgId") != null) {
            return (String) currentRow.getAttribute("OrgId");
        } else {
            return resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        }
    }

    protected Integer getUsrId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
    }

    /**Method to resolve expression- returns String value*/
    protected String resolvEl(String data) {
        String val = null;
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        Object Message = valueExp.getValue(elContext);
        if (Message != null) {
            val = Message.toString();
        }
        return val;
    }

    /**Method to resolve expression- returns String value*/
    protected Object resolvElO(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        Object message = valueExp.getValue(elContext);

        return message;
    }

    /**
     * Container's getter for BdgEoBudgetVO1.
     * @return BdgEoBudgetVO1
     */
    public ViewObjectImpl getBdgEoBudgetVO1() {
        return (ViewObjectImpl) findViewObject("BdgEoBudgetVO1");
    }

    /**
     * Container's getter for BdgEoBudgetProdDtlVO1.
     * @return BdgEoBudgetProdDtlVO1
     */
    public ViewObjectImpl getBdgEoBudgetProdDtlVO1() {
        return (ViewObjectImpl) findViewObject("BdgEoBudgetProdDtlVO1");
    }

    /**
     * Container's getter for LOVCustomerNmVO1.
     * @return LOVCustomerNmVO1
     */
    public ViewObjectImpl getLOVCustomerNmVO1() {
        return (ViewObjectImpl) findViewObject("LOVCustomerNmVO1");
    }

    /**
     * Container's getter for LOVItemGrpVO1.
     * @return LOVItemGrpVO1
     */
    public ViewObjectImpl getLOVItemGrpVO1() {
        return (ViewObjectImpl) findViewObject("LOVItemGrpVO1");
    }

    /**
     * Container's getter for LOVItemNameVO1.
     * @return LOVItemNameVO1
     */
    public ViewObjectImpl getLOVItemNameVO1() {
        return (ViewObjectImpl) findViewObject("LOVItemNameVO1");
    }

    /**
     * Container's getter for LOVEoIdVO1.
     * @return LOVEoIdVO1
     */
    public ViewObjectImpl getLOVEoIdVO1() {
        return (ViewObjectImpl) findViewObject("LOVEoIdVO1");
    }

    /**
     * Container's getter for BdgEoBudgetToEoBudgetProdDtlVL1.
     * @return BdgEoBudgetToEoBudgetProdDtlVL1
     */
    public ViewLinkImpl getBdgEoBudgetToEoBudgetProdDtlVL1() {
        return (ViewLinkImpl) findViewLink("BdgEoBudgetToEoBudgetProdDtlVL1");
    }

    /**
     * Container's getter for LOVCurrId1.
     * @return LOVCurrId1
     */
    public ViewObjectImpl getLOVCurrIdVO1() {
        return (ViewObjectImpl) findViewObject("LOVCurrIdVO1");
    }

    /**
     * Container's getter for NextYearFyDate1.
     * @return NextYearFyDate1
     */
    public ViewObjectImpl getNextYearFyDateVO1() {
        return (ViewObjectImpl) findViewObject("NextYearFyDateVO1");
    }

    /**
     * Method for Call Stored Functions
     */
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    System.out.println("baind val is " + bindVars[z]);
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.executeUpdate();
            return st.getObject(1);
        } catch (SQLException e) {
            int end = e.getMessage().indexOf("\n");
            throw new JboException(e.getMessage());

        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    /**
     * Function to get Latest EO Price
     */
    public Number getLatestItemPrice(String itemDesc) {
        System.out.println("Inside Latest Price " + itemDesc + " cld " + this.getCldIdValue() + " ho " +
                           this.getHoOrgIdValue() + " sloc " + this.getSlocIdValue());
        String id = null;
        ViewObjectImpl itemVO1 = this.getLOVItemNameVO2();
        itemVO1.setRangeSize(-1);
        // System.out.println("without filter Rows is "+itemVO1.getEstimatedRowCount());
        itemVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        itemVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        itemVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        itemVO1.setNamedWhereClauseParam("BindGrpId", null);
        itemVO1.setNamedWhereClauseParam("BindItemId", null);

        itemVO1.executeQuery();
        // System.out.println("Filtered Rows is "+itemVO1.getEstimatedRowCount());
        // System.out.println("----------------- "+itemVO1.getRowSet());
        RowQualifier rowQualifier = new RowQualifier(itemVO1);
        rowQualifier.setWhereClause("CldId ='" + this.getCldIdValue() + "' and SlocId = " + this.getSlocIdValue() +
                                    " and HoOrgId = '" + this.getHoOrgIdValue() + "' and ItmDesc = '" + itemDesc + "'");
        Row[] r = itemVO1.getFilteredRows(rowQualifier);
        System.out.println("Length of rows is " + r.length);
        if (r.length > 0) {
            id = (String) r[0].getAttribute("ItmId");
            // System.out.println("Id is " + id);
        }
        //  System.out.println("Id is " + id);

        Number itmPrice = new Number(0);
        Number conv = new Number(1);

        Row currentRow = this.getBdgEoBudgetProdDtlVO1().getCurrentRow();
        Integer eoId = 0;
        if (currentRow.getAttribute("CustEoId") != null) {
            eoId = (Integer) currentRow.getAttribute("CustEoId");
        }
        Integer currId = (Integer) currentRow.getAttribute("CurrIdSp");
        conv = (Number) currentRow.getAttribute("CurrConvRate");

        /*
        P_CLDID  VARCHAR2,
       P_SLOCID NUMBER,
       P_ORGID VARCHAR2,
       P_HO_ORGID VARCHAR2,
       P_EO_ID VARCHAR2,
       P_ITMID VARCHAR2,
       P_DOC_DATE DATE,
       P_USR_ID NUMBER,
       P_USR_DT DATE,
       P_CURR_ID NUMBER default 73,
       P_CURR_RATE NUMBER default 1 */

        BigDecimal price =
            (BigDecimal) callStoredFunction(Types.NUMERIC, "SLS.FN_GET_EO_LATEST_PRICE(?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                            this.getCldIdValue(), this.getSlocIdValue(), this.getOrgIdValue(),
                                            this.getHoOrgIdValue(), eoId, id, new Timestamp(System.currentTimeMillis()),
                                            this.getUsrId(), new Timestamp(System.currentTimeMillis()), currId, conv
        });

        try {
            itmPrice =
                new Number(new Number(price).round(Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}"))));
        } catch (SQLException e) {
            e.printStackTrace();
        }
        if (itmPrice.compareTo(-1) == 0) {
            itmPrice = new Number(0);
        }
        currentRow.setAttribute("ItmPrice", itmPrice);
        // System.out.println("Item price is for item id is " + itmPrice + " id " + itemDesc+id);
        return itmPrice;
    }

    /**
     * Method which will set the values for Item Amount Sp and Bs
     */
    public void setItemAmountDetails(Number qty) {

        Row currentRow = this.getBdgEoBudgetProdDtlVO1().getCurrentRow();
        Number conv = (Number) currentRow.getAttribute("CurrConvRate");

        Number value = (Number) currentRow.getAttribute("ItmAmtSp");

        Object itmtype = currentRow.getAttribute("ItmSelType");
        if (itmtype != null && itmtype.equals("I")) {
            if (qty != null) {
                Number itmPrice = (Number) currentRow.getAttribute("ItmPrice");
                currentRow.setAttribute("ItmAmtSp", qty.multiply(itmPrice));
                currentRow.setAttribute("ItmAmtBs", qty.multiply(itmPrice.multiply(conv)));
            }
        } else if (itmtype != null && itmtype.equals("G")) {
            currentRow.setAttribute("ItmAmtBs", (value.multiply(conv)));
        }
    }

    /**
     * Method which will set the values for Item Amount Bs based on SP
     */
    public void setItemAmtBS(Number amtSp) {
        if (amtSp != null) {
            Row currentRow = this.getBdgEoBudgetProdDtlVO1().getCurrentRow();
            Number conv = (Number) currentRow.getAttribute("CurrConvRate");
            currentRow.setAttribute("ItmAmtSp", amtSp);
            currentRow.setAttribute("ItmAmtBs", amtSp.multiply(conv));
        }
    }

    /**
     *Method set Finincial Start Date and End Date
     */
    public Integer settingFinancialYear(Timestamp stDt) {
        try {
            this.getNextYearFyDateVO1().setNamedWhereClauseParam("BindStartDate", stDt.dateValue());
            this.getNextYearFyDateVO1().setNamedWhereClauseParam("BindOrgId",
                                                                 this.getBdgEoBudgetVO1().getCurrentRow().getAttribute("OrgId"));
            this.getNextYearFyDateVO1().executeQuery();
            Row[] fr = this.getNextYearFyDateVO1().getAllRowsInRange();
            if (fr.length > 0 && Integer.parseInt(fr[0].getAttribute("FyId").toString()) > 0) {
                this.getBdgEoBudgetVO1().getCurrentRow().setAttribute("BdgFyId", fr[0].getAttribute("FyId"));
                this.getBdgEoBudgetVO1().getCurrentRow().setAttribute("FyStartDt", fr[0].getAttribute("FyStrt"));
                this.getBdgEoBudgetVO1().getCurrentRow().setAttribute("FyEndDt", fr[0].getAttribute("FyEnd"));
                return (Integer) fr[0].getAttribute("FyId");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return -1;
    }

    /**
     * Container's getter for ViewSummaryDetail1.
     * @return ViewSummaryDetail1
     */
    public ViewObjectImpl getViewSummaryDetailVO1() {
        return (ViewObjectImpl) findViewObject("ViewSummaryDetailVO1");
    }

    /**
     * Method which will set values for View Summary Detail
     */
    public void setBindValuesForSummView() {
        Row currentRow = this.getBdgEoBudgetVO1().getCurrentRow();
        System.out.println("Cld is " + this.getCldIdValue() + " sloc " + this.getSlocIdValue() + " Ho " +
                           this.getHoOrgIdValue() + " org " + this.getOrgIdValue());
        ViewObjectImpl detailVO1 = this.getViewSummaryDetailVO1();
        detailVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        detailVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        detailVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        detailVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
        if (currentRow != null && currentRow.getAttribute("EoId") != null) {
            System.out.println("Eo is " + currentRow.getAttribute("EoId"));
            detailVO1.setNamedWhereClauseParam("BindEoId", currentRow.getAttribute("EoId"));
        }
        detailVO1.executeQuery();
        System.out.println("Count rows is " + detailVO1.getAllRowsInRange().length);
    }

    /**
     * Set Bind Variables for Lovs added in AM
     */
    public void setBindVarAddedInAM() {
        if (resolvElO("#{pageFlowScope.P_EMP_CODE}") == null) {
            FacesMessage msg = new FacesMessage(resolvEl("#{bundle['MSG.2051']}")); //MSG.2051 You are not a valid employee.
            msg.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, msg);
        }

        ViewObjectImpl currIdVO1 = this.getLOVCurrIdVO1();
        currIdVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        currIdVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        currIdVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
        currIdVO1.executeQuery();

        ViewObjectImpl customerNmVO1 = this.getLOVCustomerNmVO1();
        customerNmVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        customerNmVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        customerNmVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        customerNmVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
        customerNmVO1.executeQuery();

        ViewObjectImpl eoIdVO1 = this.getLOVEoIdVO1();
        eoIdVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        eoIdVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        eoIdVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        eoIdVO1.executeQuery();

        ViewObjectImpl grpVO1 = this.getLOVItemGrpVO1();
        grpVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        grpVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        grpVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        grpVO1.executeQuery();

        ViewObjectImpl itmVo1 = this.getLOVItemNameVO1();
        itmVo1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        itmVo1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        itmVo1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        itmVo1.executeQuery();
    }

    /**
     * Container's getter for CopyPrevBudgetAmt1.
     * @return CopyPrevBudgetAmt1
     */
    public ViewObjectImpl getCopyPrevBudgetAmtVO1() {
        return (ViewObjectImpl) findViewObject("CopyPrevBudgetAmtVO1");
    }

    /**
     * Method to copy budget amount from previous year and store it in present year data
     * only for period wise
     */
    public Number copyPreviousSelfBudget() {
        Number val = new Number(0);
        ViewObjectImpl bdgEoBudgetVO1 = this.getBdgEoBudgetVO1();
        Object eoId = bdgEoBudgetVO1.getCurrentRow().getAttribute("EoId");
        //Object bdgGrpId = bdgEoBudgetVO1.getCurrentRow().getAttribute("BdgGrpId");
        Object bdgFyId = bdgEoBudgetVO1.getCurrentRow().getAttribute("BdgFyId");
        Object copyPrdStDt = bdgEoBudgetVO1.getCurrentRow().getAttribute("CopyPrdStartDt");
        Object copyPrdEndDt = bdgEoBudgetVO1.getCurrentRow().getAttribute("CopyPrdEndDt");

        System.out.println("eoId " + eoId + " fy " + bdgFyId + " copyPrdStDt " + copyPrdStDt + " copyPrdEndDt " +
                           copyPrdEndDt);

        ViewObjectImpl amtVO1 = this.getCopyPrevBudgetAmtVO1();
        amtVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        amtVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        amtVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        amtVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
        amtVO1.setNamedWhereClauseParam("BindEoId", eoId);
        //amtVO1.setNamedWhereClauseParam("BindBdgGrpId", bdgGrpId);
        amtVO1.setNamedWhereClauseParam("BindBdgFyId", bdgFyId);
        amtVO1.setNamedWhereClauseParam("BindStartDt", copyPrdStDt);
        amtVO1.setNamedWhereClauseParam("BindEndDt", copyPrdEndDt);
        amtVO1.setNamedWhereClauseParam("BindFyFlg", "P");
        amtVO1.executeQuery();

        Row[] allRowsInRange = amtVO1.getAllRowsInRange();
        System.out.println("All rows " + allRowsInRange.length);
        if (allRowsInRange.length > 0) {
            String docId = null;
            //for (int i = 0; i < allRowsInRange.length; i++) {
            docId = (String) allRowsInRange[0].getAttribute("DocId");
            val = (Number) allRowsInRange[0].getAttribute("BudgAmt");
            //}
            copyPreviousSelfBudgetDetail(docId, bdgFyId, 1);

            bdgEoBudgetVO1.getCurrentRow().setAttribute("BudgAmt", val);
            bdgEoBudgetVO1.getCurrentRow().setAttribute("CopiedBudgAmt", val);

        } else {
            System.out.println("Else part");
            FacesMessage msg = new FacesMessage(resolvEl("#{bundle['MSG.2052']}")); //MSG.2052  No Budget defined for this year.
            msg.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, msg);
        }
        System.out.println("Value is " + val);
        return val;
    }

    /**
     * Insert Data into Detail table using DocId of Main Tables
     */
    public void copyPreviousSelfBudgetDetail(String docId, Object fyId, Integer instance) {
        System.out.println("Inside Detail Part for inserting rows");
        ViewObjectImpl amtDtlVO1 = this.getCopyPreviousBdgAmtDtlVO1();
        amtDtlVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        amtDtlVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        amtDtlVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        amtDtlVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
        amtDtlVO1.setNamedWhereClauseParam("BindDocId", docId);
        amtDtlVO1.setNamedWhereClauseParam("BindBdgFyId", fyId);
        amtDtlVO1.executeQuery();
        amtDtlVO1.setRangeSize(-1);

        Row[] row = amtDtlVO1.getAllRowsInRange();

        System.out.println("Details row count " + row.length);

        if (row.length > 0) {
            ViewObjectImpl bdgEoBudgetProdDtlVO1 = null;
            if (instance == 1) {
                bdgEoBudgetProdDtlVO1 = this.getBdgEoBudgetProdDtlVO1();
            } else if (instance == 2) {
                bdgEoBudgetProdDtlVO1 = this.getBdgEoBudgetProdDtlVO3();
            }
            Row bdgEoDtlRow = null;
            for (int i = 0; i < row.length; i++) {

                bdgEoDtlRow = bdgEoBudgetProdDtlVO1.createRow();
                bdgEoBudgetProdDtlVO1.insertRow(bdgEoDtlRow);

                //bdgEoDtlRow.setAttribute("BdgGrpId", row[i].getAttribute("BdgGrpId"));
                bdgEoDtlRow.setAttribute("CurrIdSp", row[i].getAttribute("CurrIdSp"));
                bdgEoDtlRow.setAttribute("CurrConvRate", row[i].getAttribute("CurrConvRate"));
                bdgEoDtlRow.setAttribute("PrdStartDt", row[i].getAttribute("PrdStartDt"));
                bdgEoDtlRow.setAttribute("PrdEndDt", row[i].getAttribute("PrdEndDt"));
                bdgEoDtlRow.setAttribute("CustEoId", row[i].getAttribute("CustEoId"));
                bdgEoDtlRow.setAttribute("ItmGrpId", row[i].getAttribute("ItmGrpId"));
                bdgEoDtlRow.setAttribute("ItmId", row[i].getAttribute("ItmId"));
                bdgEoDtlRow.setAttribute("ItmUom", row[i].getAttribute("ItmUom"));
                bdgEoDtlRow.setAttribute("ItmPrice", row[i].getAttribute("ItmPrice"));
                bdgEoDtlRow.setAttribute("ItmQty", row[i].getAttribute("ItmQty"));
                bdgEoDtlRow.setAttribute("ItmAmtSp", row[i].getAttribute("ItmAmtSp"));
                bdgEoDtlRow.setAttribute("ItmAmtBs", row[i].getAttribute("ItmAmtBs"));
                bdgEoDtlRow.setAttribute("UsrIdCreate", row[i].getAttribute("UsrIdCreate"));
                bdgEoDtlRow.setAttribute("UsrIdCreateDt", row[i].getAttribute("UsrIdCreateDt"));
                bdgEoDtlRow.setAttribute("UsrIdMod", row[i].getAttribute("UsrIdMod"));
                bdgEoDtlRow.setAttribute("UsrIdModDt", row[i].getAttribute("UsrIdModDt"));
                bdgEoDtlRow.setAttribute("ItmSelType", row[i].getAttribute("ItmSelType"));
            }
        }
        //System.out.println("Before Out");
        this.getBdgEoBudgetProdDtlVO3().executeQuery();
        this.getBdgEoBudgetProdDtlVO1().executeQuery();
    }

    /**
     * Method to include data Finincial Wise in Header Part and Detail Part
     */
    public Boolean InsertDataIntoHeadFyBasis() {
        Boolean retVal = false;
        Number val = new Number(0);
        StringBuilder dispDocIdMsg =
            new StringBuilder("<html><body><p>" + ADFModelUtils.resolvRsrc("MSG.2055")); // MSG.2055 Following Documents have been generated Successfully.
        dispDocIdMsg.append("<p style='color:red'>");

        Timestamp chkPrdStTime = new Timestamp(System.currentTimeMillis());
        Timestamp chkPrdEndTime = new Timestamp(System.currentTimeMillis());

        ViewObjectImpl bdgEoBudgetVO1 = this.getBdgEoBudgetVO1();
        Object eoId = bdgEoBudgetVO1.getCurrentRow().getAttribute("EoId");
        //Object bdgGrpId = bdgEoBudgetVO1.getCurrentRow().getAttribute("BdgGrpId");
        Object bdgFyId = bdgEoBudgetVO1.getCurrentRow().getAttribute("BdgFyId");
        Object copyPrdStDt = bdgEoBudgetVO1.getCurrentRow().getAttribute("CopyPrdStartDt");
        Object copyPrdEndDt = bdgEoBudgetVO1.getCurrentRow().getAttribute("CopyPrdEndDt");
        Timestamp prdStTime = (Timestamp) bdgEoBudgetVO1.getCurrentRow().getAttribute("PrdStartDt");
        Timestamp prdEndTime = (Timestamp) bdgEoBudgetVO1.getCurrentRow().getAttribute("PrdEndDt");
        String prevFyFlg = (String) bdgEoBudgetVO1.getCurrentRow().getAttribute("CopyPrevFyFlg");

        //System.out.println("Inside Insert data on Fy Basis");

        ViewObjectImpl amtVO1 = this.getCopyPrevBudgetAmtVO1();
        amtVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        amtVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        amtVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        amtVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
        amtVO1.setNamedWhereClauseParam("BindEoId", eoId);
        //amtVO1.setNamedWhereClauseParam("BindBdgGrpId", bdgGrpId);
        amtVO1.setNamedWhereClauseParam("BindBdgFyId", bdgFyId);
        amtVO1.setNamedWhereClauseParam("BindStartDt", copyPrdStDt);
        amtVO1.setNamedWhereClauseParam("BindEndDt", copyPrdEndDt);
        if (prevFyFlg.equalsIgnoreCase("P")) {
            amtVO1.setNamedWhereClauseParam("BindFyFlg", "P");
        } else if (prevFyFlg.equalsIgnoreCase("F")) {
            amtVO1.setNamedWhereClauseParam("BindFyFlg", "F");
        }
        amtVO1.executeQuery();
        amtVO1.setRangeSize(-1);
        try {
            Date currPrdStDt = prdStTime.dateValue();
            Date currPrdEndDt = prdEndTime.dateValue();
            Date chkStDate = chkPrdStTime.dateValue();
            Date chkEndDate = chkPrdEndTime.dateValue();
            Row insertRow = null;
            Calendar calendar = Calendar.getInstance();

            Row[] allRowsInRange = amtVO1.getAllRowsInRange();

            System.out.println("Inside Try block " + allRowsInRange.length);

            if (allRowsInRange.length > 0) {
                String docId = null;
                for (int i = 0; i < allRowsInRange.length; i++) {
                    chkPrdStTime = (Timestamp) allRowsInRange[i].getAttribute("PrdStartDt");
                    chkPrdEndTime = (Timestamp) allRowsInRange[i].getAttribute("PrdEndDt");
                    chkStDate = chkPrdStTime.dateValue();
                    chkEndDate = chkPrdEndTime.dateValue();

                    calendar.setTime(chkStDate);
                    chkPrdStTime = new Timestamp(castToJBODate(getDate(calendar, +1)));
                    chkStDate = chkPrdStTime.dateValue();

                    calendar.setTime(chkEndDate);
                    chkPrdEndTime = new Timestamp(castToJBODate(getDate(calendar, +1)));
                    chkEndDate = chkPrdEndTime.dateValue();

                    docId = (String) allRowsInRange[i].getAttribute("DocId");
                    System.out.println("DocId is " + docId);

                    val = (Number) allRowsInRange[i].getAttribute("BudgAmt");
                    if (currPrdStDt.equals(chkStDate) && currPrdEndDt.equals(chkEndDate)) {
                        // Update data in current row
                        copyPreviousSelfBudgetDetail(docId, bdgFyId, 1);

                        bdgEoBudgetVO1.getCurrentRow().setAttribute("BudgAmt", val);
                        bdgEoBudgetVO1.getCurrentRow().setAttribute("CopiedBudgAmt", val);
                        //System.out.println("Befor commit 3");
                        this.getDBTransaction().commit();
                        //System.out.println("After commit 4");

                        dispDocIdMsg.append("<p>" + bdgEoBudgetVO1.getCurrentRow().getAttribute("BudgetId"));
                        dispDocIdMsg.append(" - ");
                        dispDocIdMsg.append(bdgEoBudgetVO1.getCurrentRow().getAttribute("BudgAmt") + "</p>");
                    } else {
                        //System.out.println("Inside Else Part ");
                        // Creates New Row in Header and Store data accordingly
                        ViewObjectImpl bdgEoBudgetVO2 = this.getBdgEoBudgetVO2();
                        bdgEoBudgetVO2.executeQuery();

                        insertRow = bdgEoBudgetVO2.createRow();
                        bdgEoBudgetVO2.insertRow(insertRow);

                        insertRow.setAttribute("OrgId", bdgEoBudgetVO1.getCurrentRow().getAttribute("OrgId"));
                        insertRow.setAttribute("BdgFyId", bdgFyId);
                        //insertRow.setAttribute("BdgGrpId", bdgGrpId);
                        insertRow.setAttribute("BudgAmt", val);
                        insertRow.setAttribute("BudgetMethod", allRowsInRange[i].getAttribute("BudgetMethod"));
                        insertRow.setAttribute("BudgetSet", 0);
                        insertRow.setAttribute("CopiedBudgAmt", val);
                        insertRow.setAttribute("CopyBdgSrcFlg",
                                               bdgEoBudgetVO1.getCurrentRow().getAttribute("CopyBdgSrcFlg"));
                        insertRow.setAttribute("CopyBudgAmtFlg",
                                               bdgEoBudgetVO1.getCurrentRow().getAttribute("CopyBudgAmtFlg"));
                        insertRow.setAttribute("CopyPrdEndDt",
                                               bdgEoBudgetVO1.getCurrentRow().getAttribute("CopyPrdEndDt"));
                        insertRow.setAttribute("CopyPrdStartDt",
                                               bdgEoBudgetVO1.getCurrentRow().getAttribute("CopyPrdStartDt"));
                        insertRow.setAttribute("CopyPrevFyFlg",
                                               bdgEoBudgetVO1.getCurrentRow().getAttribute("CopyPrevFyFlg"));
                        insertRow.setAttribute("CurrConvRate", allRowsInRange[i].getAttribute("CurrConvRate"));
                        insertRow.setAttribute("CurrIdSp", allRowsInRange[i].getAttribute("CurrIdSp"));
                        insertRow.setAttribute("EoId", bdgEoBudgetVO1.getCurrentRow().getAttribute("EoId"));
                        insertRow.setAttribute("FyEndDt", bdgEoBudgetVO1.getCurrentRow().getAttribute("FyEndDt"));
                        insertRow.setAttribute("FyStartDt", bdgEoBudgetVO1.getCurrentRow().getAttribute("FyStartDt"));
                        insertRow.setAttribute("PrdEndDt", chkPrdEndTime);
                        insertRow.setAttribute("PrdStartDt", chkPrdStTime);
                        insertRow.setAttribute("Region", bdgEoBudgetVO1.getCurrentRow().getAttribute("Region"));

                        //bdgEoBudgetVO1.setCurrentRow(insertRow);

                        copyPreviousSelfBudgetDetail(docId, bdgFyId, 2);
                        //System.out.println("Befor commit 1");
                        this.getDBTransaction().commit();
                        //System.out.println("After commit 2");

                        dispDocIdMsg.append("<p>" + insertRow.getAttribute("BudgetId"));
                        dispDocIdMsg.append(" - ");
                        dispDocIdMsg.append(insertRow.getAttribute("BudgAmt") + "</p>");
                    }
                }
                dispDocIdMsg.append("</body></html>");
                FacesMessage msg = new FacesMessage(dispDocIdMsg.toString());
                msg.setSeverity(FacesMessage.SEVERITY_INFO);
                FacesContext.getCurrentInstance().addMessage(null, msg);

                this.getBdgEoBudgetVO2().executeQuery();
                this.getBdgEoBudgetProdDtlVO3().executeQuery();
                //this.getBdgEoBudgetVO1().executeQuery();
                //this.getBdgEoBudgetProdDtlVO1().executeQuery();

                retVal = true;
            } else {
                FacesMessage msg = new FacesMessage(ADFModelUtils.resolvRsrc("MSG.2052")); //MSG.2052  No Budget defined for this year.
                msg.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, msg);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return retVal;
    }


    /**
     * Method which will display date for Copy Previous Tab based on Copy Previous Flag
     */
    public void copyDateBasedOnCondition(String flag) {
        if (flag != null) {
            Date currDt = new Date(System.currentTimeMillis());
            Calendar calendar = Calendar.getInstance();
            calendar.setTime(currDt);
            Row currentRow = this.getBdgEoBudgetVO1().getCurrentRow();
            Timestamp prdStDate = null;
            Timestamp prdEndDt = null;
            if (flag.equalsIgnoreCase("P")) {
                prdStDate = (Timestamp) currentRow.getAttribute("PrdStartDt");
                prdEndDt = (Timestamp) currentRow.getAttribute("PrdEndDt");
            } else if (flag.equalsIgnoreCase("F")) {
                prdStDate = (Timestamp) currentRow.getAttribute("FyStartDt");
                prdEndDt = (Timestamp) currentRow.getAttribute("FyEndDt");
            }
            try {
                if (prdStDate != null && prdEndDt != null) {
                    Date stDate = prdStDate.dateValue();
                    Date endDate = prdEndDt.dateValue();
                    calendar.setTime(stDate);
                    currentRow.setAttribute("CopyPrdStartDt", new Timestamp(castToJBODate(getDate(calendar, -1))));

                    //System.out.println("Previous ST Date is : ---- " + new Timestamp(castToJBODate(getDate(calendar))));
                    calendar.setTime(endDate);
                    //System.out.println("Previous End Date is : ---- " +
                    //                 new Timestamp(castToJBODate(getDate(calendar))));
                    currentRow.setAttribute("CopyPrdEndDt", new Timestamp(castToJBODate(getDate(calendar, -1))));

                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

    /**
     * @return current Date from Calendar in dd/MM/yyyy format
     * adding 1 into month because Calendar month starts from zero
     * and Substracting year with -1
     */
    protected static String getDate(Calendar cal, int val) {
        return "" + cal.get(Calendar.DATE) + "/" + (cal.get(Calendar.MONTH) + 1) + "/" + (cal.get(Calendar.YEAR) + val);
    }

    /**
     *Converts a String to oracle.jbo.domain.Date
     * @param String
     * @return oracle.jbo.domain.Date
     */
    protected oracle.jbo.domain.Date castToJBODate(String aDate) {
        SimpleDateFormat formatter;
        java.util.Date date;
        if (aDate != null) {
            try {
                formatter = new SimpleDateFormat("dd/MM/yyyy");
                date = formatter.parse(aDate);

                java.sql.Date sqlDate = new java.sql.Date(date.getTime());
                oracle.jbo.domain.Date jboDate = new oracle.jbo.domain.Date(sqlDate);

                return jboDate;
            } catch (ParseException e) {
                e.printStackTrace();
            }
        }
        return null;
    }

    /**
     * Container's getter for CopyPreviousBdgAmtDtl1.
     * @return CopyPreviousBdgAmtDtl1
     */
    public ViewObjectImpl getCopyPreviousBdgAmtDtlVO1() {
        return (ViewObjectImpl) findViewObject("CopyPreviousBdgAmtDtlVO1");
    }

    /**
     * Container's getter for BdgEoBudget1.
     * @return BdgEoBudget1
     */
    public ViewObjectImpl getBdgEoBudgetVO2() {
        return (ViewObjectImpl) findViewObject("BdgEoBudgetVO2");
    }


    /**
     * Container's getter for BdgEoBudgetProdDtl1.
     * @return BdgEoBudgetProdDtl1
     */
    public ViewObjectImpl getBdgEoBudgetProdDtlVO3() {
        return (ViewObjectImpl) findViewObject("BdgEoBudgetProdDtlVO3");
    }

    /**
     * Container's getter for BdgEoBudgetToEoBudgetProdDtlVL2.
     * @return BdgEoBudgetToEoBudgetProdDtlVL2
     */
    public ViewLinkImpl getBdgEoBudgetToEoBudgetProdDtlVL2() {
        return (ViewLinkImpl) findViewLink("BdgEoBudgetToEoBudgetProdDtlVL2");
    }

    /**
     * Following method will check whether user is eligable to revise the target or not
     */
    public Boolean chkRevisionAllowedOrNot() {
        Boolean val = false;
        ViewObjectImpl bdgEoBudgetProdDtlVO1 = this.getBdgEoBudgetProdDtlVO1();
        Row[] allRowsInRange = bdgEoBudgetProdDtlVO1.getAllRowsInRange();
        int i = 0;
        for (Row r : allRowsInRange) {
            if (r.getAttribute("ItmAmtSp") != null) {
                i++;
            } else {
                i = -1;
                break;
            }
        }
        if (i > 0) {
            val = true;
        } else {
            val = false;
        }
        return val;
    }

    /**
     * Method for Revise Budget Amount on basis of Method, Type and Value entered by user
     */
    public Number reviseBudgetAmt() {
        Number val = new Number(0);
        Number diffInPercent = new Number(0);
        Row currentRow = this.getBdgEoBudgetVO1().getCurrentRow();
        if (currentRow != null) {
            Integer revisionMethod = (Integer) currentRow.getAttribute("RevisionMeth");
            String revisionType = (String) currentRow.getAttribute("RevisionTyp");
            Number revisionTypeVal = (Number) currentRow.getAttribute("RevisionTypVal");
            Number bdgAmt = (Number) currentRow.getAttribute("BudgAmt");
            System.out.println("rev " + revisionMethod + " type " + revisionType + " val " + revisionTypeVal + " bdg " +
                               bdgAmt);
            if (revisionMethod != null && revisionType != null && revisionTypeVal != null) {
                if (revisionMethod == 1) { // Persimistic Method (Substraction)
                    val = calculateAmountPersimistic(revisionType, revisionTypeVal, bdgAmt);
                } else { // Optimistic Method (Addition)
                    val = calculateAmountOptimistic(revisionType, revisionTypeVal, bdgAmt);
                }
                diffInPercent = (revisionTypeVal.divide(bdgAmt)).multiply(100);

                diffInPercent =
                    (Number) diffInPercent.round(Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}")));

                System.out.println("Different is " + diffInPercent + " *** " + revisionMethod + " ___- " +
                                   revisionType + " &&&& " + revisionTypeVal);

                changeDetailItemAmt(revisionMethod, revisionType, revisionTypeVal,
                                    diffInPercent); //// BdgEoBudgetProdDtlVO2

                changeItemDetailDistribAmt(revisionMethod, revisionType, revisionTypeVal,
                                           diffInPercent); //// BdgEoBudgetProdPrdDtlVO2

                copyItemDtlToBdgDtl();
                /*  reviseBudgetAmtDistribution(revisionMethod, revisionType, revisionTypeVal,
                                            diffInPercent); /////BdgEoBudgetPrdDtlVO1 */

            }
            System.out.println("-------------------");
            System.out.println("rev " + revisionMethod + " type " + revisionType + " val " + revisionTypeVal + " bdg " +
                               bdgAmt);
        }
        val = (Number) val.round(Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}")));

        currentRow.setAttribute("BudgAmt",
                                (((Number) this.getBdgEoBudgetVO1().getCurrentRow().getAttribute("BudgtAmtSpTrans")).multiply((Number) this.getBdgEoBudgetVO1().getCurrentRow().getAttribute("CurrConvRate")).round(Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}")))));

        currentRow.setAttribute("RevisionMethTrans", null);
        currentRow.setAttribute("RevisionTypTrans", null);
        currentRow.setAttribute("RevisionTypValTrans", null);

        String docId = (String) this.getBdgEoBudgetVO1().getCurrentRow().getAttribute("DocId");

        this.getDBTransaction().postChanges();

        filterBdgOnLoad(docId);

        //this.getBdgEoBudgetProdDtlVO1().executeQuery();

        return val;
    }

    /**
     * Method which will revise budget amount distriibution accordingly
     * BdgEoBudgetPrdDtlVO1
     */
    protected void reviseBudgetAmtDistribution(Integer revisionMethod, String type, Number revVal,
                                               Number diffInPercent) {
        Number val = new Number(0);
        ViewObjectImpl bdgEoBudgetPrdDtlVO1 = this.getBdgEoBudgetPrdDtlVO1();
        bdgEoBudgetPrdDtlVO1.setRangeSize(-1);
        Row[] allRowsInRange = bdgEoBudgetPrdDtlVO1.getAllRowsInRange();
        if (allRowsInRange.length > 0) {
            for (int i = 0; i < allRowsInRange.length; i++) {
                //Number itmQty = (Number) allRowsInRange[i].getAttribute("ItmQty");
                Number itmAmtSp = (Number) allRowsInRange[i].getAttribute("BudgAmtSp");
                Number currConvRate = (Number) this.getBdgEoBudgetVO1().getCurrentRow().getAttribute("CurrConvRate");

                if (type.equalsIgnoreCase("A")) {
                    revVal = (diffInPercent.multiply(itmAmtSp)).divide(100);
                }
                System.out.println("Revision value is " + revVal);

                if (revisionMethod == 1) { // Persimistic Method (Substraction)
                    val = calculateAmountPersimistic(type, revVal, itmAmtSp);
                } else { // Optimistic Method (Addition)
                    val = calculateAmountOptimistic(type, revVal, itmAmtSp);
                }
                System.out.println("Item amt sp value is ---->" + val);
                val = (Number) val.round(Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}")));
                allRowsInRange[i].setAttribute("BudgAmtSp", val);
                allRowsInRange[i].setAttribute("BudgAmtBs", val.multiply(currConvRate));
                /* if (itmQty != null) {
                    itmQty = (Number) itmQty.multiply(val.div(itmAmtSp));
                    itmQty = (Number) itmQty.round(Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_QTY_DIGIT}")));
                    System.out.println("Item Qty value is ----> " + itmQty);
                    allRowsInRange[i].setAttribute("ItmQty", itmQty);
                } */
            }
            bdgEoBudgetPrdDtlVO1.executeQuery();
        }
    }


    /**
     * Method to revise detail part according to budget amount
     */
    protected void changeItemDetailDistribAmt(Integer revisionMethod, String type, Number revVal,
                                              Number diffInPercent) {
        Number val = new Number(0);
        ViewObjectImpl bdgEoBudgetProdPrdDtlVO2 = this.getBdgEoBudgetProdPrdDtlVO2();
        bdgEoBudgetProdPrdDtlVO2.setRangeSize(-1);
        Row[] allRowsInRange = bdgEoBudgetProdPrdDtlVO2.getAllRowsInRange();
        if (allRowsInRange.length > 0) {
            for (int i = 0; i < allRowsInRange.length; i++) {
                Number itmQty = (Number) allRowsInRange[i].getAttribute("ItmQty");
                Number itmAmtSp = (Number) allRowsInRange[i].getAttribute("ItmAmtSp");
                Number currConvRate = (Number) this.getBdgEoBudgetVO1().getCurrentRow().getAttribute("CurrConvRate");

                if (type.equalsIgnoreCase("A")) {
                    revVal = (diffInPercent.multiply(itmAmtSp)).divide(100);
                }
                System.out.println("Revision value is " + revVal);

                if (revisionMethod == 1) { // Persimistic Method (Substraction)
                    val = calculateAmountPersimistic(type, revVal, itmAmtSp);
                } else { // Optimistic Method (Addition)
                    val = calculateAmountOptimistic(type, revVal, itmAmtSp);
                }
                System.out.println("Item amt sp value is ---->" + val);
                val = (Number) val.round(Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}")));

                if (itmQty != null && allRowsInRange[i].getAttribute("ItmPrice") != null) {
                    itmQty = (Number) itmQty.multiply(val.div(itmAmtSp));
                    itmQty = (Number) itmQty.round(Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_QTY_DIGIT}")));
                    System.out.println("Item Qty value is ----> " + itmQty);
                    allRowsInRange[i].setAttribute("ItmQty", itmQty);

                    allRowsInRange[i].setAttribute("ItmAmtSp",
                                                   itmQty.multiply((Number) allRowsInRange[i].getAttribute("ItmPrice")));
                    allRowsInRange[i].setAttribute("ItmAmtBs",
                                                   currConvRate.multiply(itmQty.multiply((Number) allRowsInRange[i].getAttribute("ItmPrice"))));
                } else {
                    allRowsInRange[i].setAttribute("ItmAmtSp", val);
                    allRowsInRange[i].setAttribute("ItmAmtBs", val.multiply(currConvRate));
                }
            }
            bdgEoBudgetProdPrdDtlVO2.executeQuery();
        }
    }

    /**
     * Method to revise detail part according to budget amount
     */
    protected void changeDetailItemAmt(Integer revisionMethod, String type, Number revVal, Number diffInPercent) {
        Number val = new Number(0);

        //this.getBdgEoBudgetProdDtlVO1().executeQuery();

        ViewObjectImpl bdgEoBudgetProdDtlVO2 = this.getBdgEoBudgetProdDtlVO2();
        //bdgEoBudgetProdDtlVO2.clearCache();
        bdgEoBudgetProdDtlVO2.executeQuery();

        bdgEoBudgetProdDtlVO2.setRangeSize(-1);
        Row[] allRowsInRange = bdgEoBudgetProdDtlVO2.getAllRowsInRange();
        if (allRowsInRange.length > 0) {
            for (int i = 0; i < allRowsInRange.length; i++) {
                Number itmQty = (Number) allRowsInRange[i].getAttribute("ItmQty");
                Number itmAmtSp = (Number) allRowsInRange[i].getAttribute("ItmAmtSp");
                Number currConvRate = (Number) allRowsInRange[i].getAttribute("CurrConvRate");

                if (type.equalsIgnoreCase("A")) {
                    revVal = (diffInPercent.multiply(itmAmtSp)).divide(100);
                }
                System.out.println("Revision value is " + revVal);

                if (revisionMethod == 1) { // Persimistic Method (Substraction)
                    val = calculateAmountPersimistic(type, revVal, itmAmtSp);
                } else { // Optimistic Method (Addition)
                    val = calculateAmountOptimistic(type, revVal, itmAmtSp);
                }
                System.out.println("Item amt sp value is ---->" + val);
                val = (Number) val.round(Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}")));
                if (itmQty != null && allRowsInRange[i].getAttribute("ItmPrice") != null) {
                    System.out.println("itmQty.compareTo(0) > 0 " + (itmQty.compareTo(0) > 0));

                    itmQty = (Number) itmQty.multiply(val.div(itmAmtSp));
                    itmQty = (Number) itmQty.round(Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_QTY_DIGIT}")));
                    System.out.println("Item Qty value is ----> " + itmQty);
                    allRowsInRange[i].setAttribute("ItmQty", itmQty);

                    allRowsInRange[i].setAttribute("ItmAmtSp",
                                                   itmQty.multiply((Number) allRowsInRange[i].getAttribute("ItmPrice")));
                    allRowsInRange[i].setAttribute("ItmAmtBs",
                                                   currConvRate.multiply(itmQty.multiply((Number) allRowsInRange[i].getAttribute("ItmPrice"))));
                } else {
                    allRowsInRange[i].setAttribute("ItmAmtSp", val);
                    allRowsInRange[i].setAttribute("ItmAmtBs", val.multiply(currConvRate));
                }
                bdgEoBudgetProdDtlVO2.executeQuery();
            }
            //this.getBdgEoBudgetProdDtlVO1().executeQuery();
        }
    }

    /**
     * Calculate Value based on Percentage or Amount Wise and return the value For Persimistic Case
     */
    protected Number calculateAmountPersimistic(String type, Number revVal, Number bdgAmt) {
        Number val = new Number(0);
        if (type.equalsIgnoreCase("P")) { // Percentage Basis
            // val = (revVal / 100) x bdgAmt
            val = (Number) ((revVal.divide(100)).mul(bdgAmt));
            val = bdgAmt.subtract(val);
        } else { // Amount Basis
            val = bdgAmt.subtract(revVal);
        }
        return val;
    }

    /**
     * Calculate Value based on Percentage or Amount Wise and return the value In Optimistic Case
     */
    protected Number calculateAmountOptimistic(String type, Number revVal, Number bdgAmt) {
        Number val = new Number(0);
        if (type.equalsIgnoreCase("P")) { // Percentage Basis
            // val = (revVal / 100) x bdgAmt
            val = (Number) ((revVal.divide(100)).mul(bdgAmt));
            val = bdgAmt.add(val);
        } else { // Amount Basis
            val = bdgAmt.add(revVal);
        }
        return val;
    }


    /**
     * Method which will reset Budget Amount to previous revision Budget amount
     */
    public void resetBdgAmtToPrevious() {
        Row currentRow = this.getBdgEoBudgetVO1().getCurrentRow();
        if (currentRow != null) {
            Integer revisionMethod = (Integer) currentRow.getAttribute("RevisionMeth");
            String revisionType = (String) currentRow.getAttribute("RevisionTyp");
            Number revisionTypeVal = (Number) currentRow.getAttribute("RevisionTypVal");

            System.out.println("Inside reset AMIMPL " + revisionMethod + " --- " + revisionType + " **** " +
                               revisionTypeVal);

            if (revisionMethod != null && revisionType != null && revisionTypeVal != null) {

                if (revisionType.equalsIgnoreCase("P")) { /// Percentage Basis
                    changeBdgAmtToPrevRevPercentBasis(revisionMethod, revisionType, revisionTypeVal);
                } else { /// Amount Basis
                    changeBdgAmtToPrevRevAmtBasis(revisionMethod, revisionType, revisionTypeVal);
                }
                //this.getBdgEoBudgetProdDtlVO1().executeQuery();
                //this.getBdgEoBudgetProdPrdDtlVO1().executeQuery();

                currentRow.setAttribute("RevisionMeth", null);
                currentRow.setAttribute("RevisionTyp", null);
                currentRow.setAttribute("RevisionTypVal", null);

                FacesMessage msg = new FacesMessage(ADFModelUtils.resolvRsrc("MSG.2053")); //MSG.2053  Budget amount have been reset to previous revision method.
                msg.setSeverity(FacesMessage.SEVERITY_INFO);
                FacesContext.getCurrentInstance().addMessage(null, msg);

            } else {
                FacesMessage msg = new FacesMessage(ADFModelUtils.resolvRsrc("MSG.2054")); //MSG.2054  You cannot reset the budget amount
                msg.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, msg);
            }
        }
    }

    /**
     * Method which will change Budget Amount and Item Amount to Previous revision based on user entry
     * In Case of Percentage Basis
     */
    protected void changeBdgAmtToPrevRevPercentBasis(Integer revisionMethod, String revisionType,
                                                     Number revisionTypeVal) {
        System.out.println("Inside changeBdgAmtToPrevRevPercentBasis " + revisionMethod + " ** " + revisionType +
                           " val " + revisionTypeVal);

        Number val = new Number(0);
        Number diffInPercent = new Number(0);

        Row currentRow = this.getBdgEoBudgetVO1().getCurrentRow();

        if (currentRow != null) {

            Number bdgAmt = (Number) currentRow.getAttribute("BudgAmt");

            if (revisionMethod == 1) { // Persimistic Method
                val = (new Number(100).multiply(bdgAmt)).divide(new Number(100).subtract(revisionTypeVal));

            } else { // Optimistic Method
                val = (new Number(100).multiply(bdgAmt)).divide(new Number(100).add(revisionTypeVal));
            }
            //diffInPercent = (revisionTypeVal.divide(val)).multiply(100);

            System.out.println("Before setting Budget Amount value " + val + " ---- " + revisionMethod + " ** " +
                               revisionType + " ^^^^^^^^^ " + revisionTypeVal + " dii " + diffInPercent);

            val = (Number) val.round(Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}")));


            changeItemBdgAmtToPrev(revisionMethod, revisionType, revisionTypeVal, diffInPercent);

            changeItemDistrbBdgAmtToPrev(revisionMethod, revisionType, revisionTypeVal, diffInPercent);

            //changeBdgAmtDistrbToPrev(revisionMethod, revisionType, revisionTypeVal, diffInPercent);
            copyItemDtlToBdgDtl();

            //currentRow.setAttribute("BudgAmt", val);

            currentRow.setAttribute("BudgAmt",
                                    (((Number) this.getBdgEoBudgetVO1().getCurrentRow().getAttribute("BudgtAmtSpTrans")).multiply((Number) this.getBdgEoBudgetVO1().getCurrentRow().getAttribute("CurrConvRate")).round(Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}")))));

            String docId = (String) this.getBdgEoBudgetVO1().getCurrentRow().getAttribute("DocId");

            this.getDBTransaction().postChanges();

            filterBdgOnLoad(docId);
        }
    }


    /**
     * Method which will change the Budget amount and Item amount to previous revision method based on user entry
     * In case of Amount Basis
     */
    protected void changeBdgAmtToPrevRevAmtBasis(Integer revisionMethod, String revisionType, Number revisionTypeVal) {
        System.out.println("Inside changeBdgAmtToPrevRevAmtBasis");

        Number val = new Number(0);
        Number diffInPercent = new Number(0);

        Row currentRow = this.getBdgEoBudgetVO1().getCurrentRow();

        if (currentRow != null) {
            Number bdgAmt = (Number) currentRow.getAttribute("BudgAmt");

            diffInPercent = (revisionTypeVal.divide(bdgAmt)).multiply(100);

            if (revisionMethod == 1) { // Persimistic Method
                /// Now i need to perform Optimistic in case of Persimistic Method
                val = calculateAmountOptimistic(revisionType, revisionTypeVal, bdgAmt);

                revisionMethod = 2;

            } else { // Optimistic Method
                //// Now i need to perform Permistic in case of Optimistic method

                val = calculateAmountPersimistic(revisionType, revisionTypeVal, bdgAmt);

                revisionMethod = 1;
            }
            System.out.println("Before setting Budget Amount value " + val + " ---- " + revisionMethod + " ** " +
                               revisionType + " ^^^^^^^^^ " + revisionTypeVal + " dii " + diffInPercent);

            val = (Number) val.round(Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}")));


            changeItemBdgAmtToPrev(revisionMethod, revisionType, revisionTypeVal,
                                   diffInPercent); //// BdgEoBudgetProdDtlVO2

            changeItemDistrbBdgAmtToPrev(revisionMethod, revisionType, revisionTypeVal,
                                         diffInPercent); // BdgEoBudgetProdPrdDtlVO2

            //changeBdgAmtDistrbToPrev(revisionMethod, revisionType, revisionTypeVal, diffInPercent);
            copyItemDtlToBdgDtl();

            //currentRow.setAttribute("BudgAmt", val);
            currentRow.setAttribute("BudgAmt",
                                    (((Number) this.getBdgEoBudgetVO1().getCurrentRow().getAttribute("BudgtAmtSpTrans")).multiply((Number) this.getBdgEoBudgetVO1().getCurrentRow().getAttribute("CurrConvRate")).round(Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}")))));

            String docId = (String) this.getBdgEoBudgetVO1().getCurrentRow().getAttribute("DocId");

            this.getDBTransaction().postChanges();

            filterBdgOnLoad(docId);

        }
    }

    /**
     * Method which will update Item Budget amount based on
     */
    protected void changeBdgAmtDistrbToPrev(Integer revisionMethod, String type, Number revVal, Number diffInPercent) {
        System.out.println("Inside changeBdgAmtDistrbToPrev");

        Number val = new Number(0);

        ViewObjectImpl bdgEoBudgetPrdDtlVO1 = this.getBdgEoBudgetPrdDtlVO1();

        bdgEoBudgetPrdDtlVO1.setRangeSize(-1);

        Row[] allRowsInRange = bdgEoBudgetPrdDtlVO1.getAllRowsInRange();

        if (allRowsInRange.length > 0) {
            for (int i = 0; i < allRowsInRange.length; i++) {
                //Number itmQty = (Number) allRowsInRange[i].getAttribute("ItmQty");
                Number itmAmtSp = (Number) allRowsInRange[i].getAttribute("BudgAmtSp");
                Number currConvRate = (Number) this.getBdgEoBudgetVO1().getCurrentRow().getAttribute("CurrConvRate");

                System.out.println(" sp " + itmAmtSp + " convfact " + currConvRate);

                if (type.equalsIgnoreCase("A")) {
                    revVal = (diffInPercent.multiply(itmAmtSp)).divide(100);

                    System.out.println("Revision value is " + revVal);

                    if (revisionMethod == 1) { // Persimistic Method (Substraction)
                        val = calculateAmountPersimistic(type, revVal, itmAmtSp);
                    } else { // Optimistic Method (Addition)
                        val = calculateAmountOptimistic(type, revVal, itmAmtSp);
                    }
                } else if (type.equalsIgnoreCase("P")) {
                    if (revisionMethod == 1) { // Persimistic Method (Substraction)
                        val = (new Number(100).multiply(itmAmtSp)).divide(new Number(100).subtract(revVal));
                    } else { // Optimistic Method (Addition)
                        val = (new Number(100).multiply(itmAmtSp)).divide(new Number(100).add(revVal));
                    }
                }

                System.out.println("Item amt sp value is ---->" + val);
                val = (Number) val.round(Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}")));
                allRowsInRange[i].setAttribute("BudgAmtSp", val);
                allRowsInRange[i].setAttribute("BudgAmtBs", val.multiply(currConvRate));
                /* if (itmQty != null) {
                    itmQty = (Number) itmQty.multiply(val.div(itmAmtSp));
                    itmQty = (Number) itmQty.round(Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_QTY_DIGIT}")));
                    System.out.println("Item Qty value is ----> " + itmQty);
                    allRowsInRange[i].setAttribute("ItmQty", itmQty);
                } */
            }
            //bdgEoBudgetPrdDtlVO1.executeQuery();
        }
    }

    /**
     * Method which will update Item Budget amount based on
     */
    protected void changeItemDistrbBdgAmtToPrev(Integer revisionMethod, String type, Number revVal,
                                                Number diffInPercent) {
        System.out.println("Inside changeItemDistrbBdgAmtToPrev");

        Number val = new Number(0);

        ViewObjectImpl bdgEoBudgetProdPrdDtlVO2 = this.getBdgEoBudgetProdPrdDtlVO2();

        bdgEoBudgetProdPrdDtlVO2.setRangeSize(-1);

        Row[] allRowsInRange = bdgEoBudgetProdPrdDtlVO2.getAllRowsInRange();

        if (allRowsInRange.length > 0) {
            for (int i = 0; i < allRowsInRange.length; i++) {
                Number itmQty = (Number) allRowsInRange[i].getAttribute("ItmQty");
                Number itmAmtSp = (Number) allRowsInRange[i].getAttribute("ItmAmtSp");
                Number currConvRate = (Number) this.getBdgEoBudgetVO1().getCurrentRow().getAttribute("CurrConvRate");

                System.out.println("Item Qty is " + itmQty + " sp " + itmAmtSp + " convfact " + currConvRate);

                if (type.equalsIgnoreCase("A")) {
                    revVal = (diffInPercent.multiply(itmAmtSp)).divide(100);

                    System.out.println("Revision value is " + revVal);

                    if (revisionMethod == 1) { // Persimistic Method (Substraction)
                        val = calculateAmountPersimistic(type, revVal, itmAmtSp);
                    } else { // Optimistic Method (Addition)
                        val = calculateAmountOptimistic(type, revVal, itmAmtSp);
                    }
                } else if (type.equalsIgnoreCase("P")) {
                    if (revisionMethod == 1) { // Persimistic Method (Substraction)
                        val = (new Number(100).multiply(itmAmtSp)).divide(new Number(100).subtract(revVal));
                    } else { // Optimistic Method (Addition)
                        val = (new Number(100).multiply(itmAmtSp)).divide(new Number(100).add(revVal));
                    }
                }

                System.out.println("Item amt sp value is ---->" + val);
                val = (Number) val.round(Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}")));
                if (itmQty != null && allRowsInRange[i].getAttribute("ItmPrice") != null) {
                    itmQty = (Number) itmQty.multiply(val.div(itmAmtSp));
                    itmQty = (Number) itmQty.round(Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_QTY_DIGIT}")));
                    System.out.println("Item Qty value is ----> " + itmQty);
                    allRowsInRange[i].setAttribute("ItmQty", itmQty);

                    allRowsInRange[i].setAttribute("ItmAmtSp",
                                                   itmQty.multiply((Number) allRowsInRange[i].getAttribute("ItmPrice")));
                    allRowsInRange[i].setAttribute("ItmAmtBs",
                                                   currConvRate.multiply(itmQty.multiply((Number) allRowsInRange[i].getAttribute("ItmPrice"))));
                } else {
                    allRowsInRange[i].setAttribute("ItmAmtSp", val);
                    allRowsInRange[i].setAttribute("ItmAmtBs", val.multiply(currConvRate));
                }
            }
            bdgEoBudgetProdPrdDtlVO2.executeQuery();
        }
    }

    /**
     * Method which will update Item Budget amount based on
     */
    protected void changeItemBdgAmtToPrev(Integer revisionMethod, String type, Number revVal, Number diffInPercent) {
        System.out.println("Inside changeItemBdgAmtToPrev");

        Number val = new Number(0);

        //this.getBdgEoBudgetProdDtlVO1().executeQuery();

        ViewObjectImpl bdgEoBudgetProdDtlVO2 = this.getBdgEoBudgetProdDtlVO2();
        //bdgEoBudgetProdDtlVO2.clearCache();
        bdgEoBudgetProdDtlVO2.executeQuery();

        bdgEoBudgetProdDtlVO2.setRangeSize(-1);

        Row[] allRowsInRange = bdgEoBudgetProdDtlVO2.getAllRowsInRange();

        if (allRowsInRange.length > 0) {
            for (int i = 0; i < allRowsInRange.length; i++) {
                Number itmQty = (Number) allRowsInRange[i].getAttribute("ItmQty");
                Number itmAmtSp = (Number) allRowsInRange[i].getAttribute("ItmAmtSp");
                Number currConvRate = (Number) allRowsInRange[i].getAttribute("CurrConvRate");

                System.out.println("Item Qty is " + itmQty + " sp " + itmAmtSp + " convfact " + currConvRate);

                if (type.equalsIgnoreCase("A")) {
                    revVal = (diffInPercent.multiply(itmAmtSp)).divide(100);

                    System.out.println("Revision value is " + revVal);

                    if (revisionMethod == 1) { // Persimistic Method (Substraction)
                        val = calculateAmountPersimistic(type, revVal, itmAmtSp);
                    } else { // Optimistic Method (Addition)
                        val = calculateAmountOptimistic(type, revVal, itmAmtSp);
                    }
                } else if (type.equalsIgnoreCase("P")) {
                    if (revisionMethod == 1) { // Persimistic Method (Substraction)
                        val = (new Number(100).multiply(itmAmtSp)).divide(new Number(100).subtract(revVal));
                    } else { // Optimistic Method (Addition)
                        val = (new Number(100).multiply(itmAmtSp)).divide(new Number(100).add(revVal));
                    }
                }

                val = (Number) val.round(Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}")));

                System.out.println("Item amt sp value is ---->" + val);

                if (itmQty != null && allRowsInRange[i].getAttribute("ItmPrice") != null) {
                    itmQty = (Number) itmQty.multiply(val.div(itmAmtSp));
                    itmQty = (Number) itmQty.round(Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_QTY_DIGIT}")));
                    System.out.println("Item Qty value is ----> " + itmQty);
                    allRowsInRange[i].setAttribute("ItmQty", itmQty);

                    allRowsInRange[i].setAttribute("ItmAmtSp",
                                                   itmQty.multiply((Number) allRowsInRange[i].getAttribute("ItmPrice")));
                    allRowsInRange[i].setAttribute("ItmAmtBs",
                                                   currConvRate.multiply(itmQty.multiply((Number) allRowsInRange[i].getAttribute("ItmPrice"))));

                } else {
                    allRowsInRange[i].setAttribute("ItmAmtSp", val);
                    allRowsInRange[i].setAttribute("ItmAmtBs", val.multiply(currConvRate));

                }
                bdgEoBudgetProdDtlVO2.executeQuery();

            }
            //this.getBdgEoBudgetProdDtlVO1().executeQuery();
        }
    }

    /**
     * Method which will update Item amount as Budget Amount
     */
    public void updateBdgAmtValue() {
        Number val = new Number(0);
        Row currentRow = this.getBdgEoBudgetVO1().getCurrentRow();
        /* this.getBdgEoBudgetVO1().executeQuery();
        this.getBdgEoBudgetVO1().setCurrentRow(currentRow); */
        if (currentRow != null && currentRow.getAttribute("AddDetailItemAmtBsTrans") != null) {
            val = (Number) currentRow.getAttribute("AddDetailItemAmtBsTrans");

            val = (Number) val.round(Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}")));

            if (val.compareTo(0) > 0) {
                currentRow.setAttribute("BudgAmt", val);
            }
        }
    }

    /**
     * Method which will update revision Type Value based on user entry
     */
    public void setRevisionTypeVal(Number value) {
        Row currentRow = this.getBdgEoBudgetVO1().getCurrentRow();
        if (currentRow != null) {
            currentRow.setAttribute("RevisionTypVal", value);
        }
    }

    /**
     * Method which will update revision Type Value based on user entry
     */
    public void setRevisionType(String value) {
        Row currentRow = this.getBdgEoBudgetVO1().getCurrentRow();
        if (currentRow != null) {
            currentRow.setAttribute("RevisionTyp", value);
        }
    }

    /**
     * Method which will update revision Type Value based on user entry
     */
    public void setRevisionMethod(Integer value) {
        Row currentRow = this.getBdgEoBudgetVO1().getCurrentRow();
        if (currentRow != null) {
            currentRow.setAttribute("RevisionMeth", value);
        }
    }

    /**
     * Container's getter for ImmediateEmpDetails1.
     * @return ImmediateEmpDetails1
     */
    public ViewObjectImpl getImmediateEmpDetailsVO1() {
        return (ViewObjectImpl) findViewObject("ImmediateEmpDetailsVO1");
    }

    /**
     * Method For Copy Previous data using Function
     */
    public String copyPreviousDataUsingFunction() {
        String val = null;
        System.out.println("Inside copy Previous Data Using Function");
        /* FN_INS_EO_COPY_PREV_BDG(
                P_CLD_ID    VARCHAR2,
                P_SLOC_ID   NUMBER,
                P_HO_ORG_ID VARCHAR2,
                P_ORG_ID    VARCHAR2,
                P_DOC_ID    VARCHAR2,
                P_FY_ID    NUMBER,
                P_EO_ID     NUMBER,
                P_PRD_ST_DT DATE,
                P_PRD_END_DT DATE,
                P_FY_ST_DT DATE,
                P_FY_END_DT DATE,
                P_BDG_GRP_ID NUMBER,
                P_BDG_FY_ID NUMBER,
                P_COPY_PREV_FY_FLG VARCHAR2,
                P_COPY_PRD_STRT_DT DATE,
                P_COPY_PRD_END_DT DATE,
                P_COPY_BDG_SRC_FLG   VARCHAR2,
                P_COPY_BUDG_AMT_FLG VARCHAR2,
                P_USR_ID    NUMBER,
                P_USR_DT    DATE */
        ViewObjectImpl bdgEoBudgetVO1 = this.getBdgEoBudgetVO1();
        Object eoId = bdgEoBudgetVO1.getCurrentRow().getAttribute("EoId");
        //Object bdgGrpId = bdgEoBudgetVO1.getCurrentRow().getAttribute("BdgGrpId");
        Object bdgFyId = bdgEoBudgetVO1.getCurrentRow().getAttribute("BdgFyId");
        Object docId = bdgEoBudgetVO1.getCurrentRow().getAttribute("DocId");
        Object fyId = bdgEoBudgetVO1.getCurrentRow().getAttribute("FyId");
        Object prdStartDt = bdgEoBudgetVO1.getCurrentRow().getAttribute("PrdStartDt");
        Object prdEndDt = bdgEoBudgetVO1.getCurrentRow().getAttribute("PrdEndDt");
        Object fyStartDt = bdgEoBudgetVO1.getCurrentRow().getAttribute("FyStartDt");
        Object fyEndDt = bdgEoBudgetVO1.getCurrentRow().getAttribute("FyEndDt");
        Object copyBdgSrcFlg = bdgEoBudgetVO1.getCurrentRow().getAttribute("CopyBdgSrcFlg");
        Object copyBudgAmtFlg = bdgEoBudgetVO1.getCurrentRow().getAttribute("CopyBudgAmtFlg");
        Object usrIdCreate = bdgEoBudgetVO1.getCurrentRow().getAttribute("UsrIdCreate");
        Object usrIdCreateDt = bdgEoBudgetVO1.getCurrentRow().getAttribute("UsrIdCreateDt");
        Object copyPrevFyFlg = bdgEoBudgetVO1.getCurrentRow().getAttribute("CopyPrevFyFlg");
        Object copyPrdStDt = bdgEoBudgetVO1.getCurrentRow().getAttribute("CopyPrdStartDt");
        Object copyPrdEndDt = bdgEoBudgetVO1.getCurrentRow().getAttribute("CopyPrdEndDt");

        if (copyPrevFyFlg != null) {
            if (copyPrevFyFlg.toString().equalsIgnoreCase("P")) { /// Period Basis
                copyPrdStDt = bdgEoBudgetVO1.getCurrentRow().getAttribute("CopyPrdStartDt");
                copyPrdEndDt = bdgEoBudgetVO1.getCurrentRow().getAttribute("CopyPrdEndDt");
            } else { /// Financial Basis
                ViewObjectImpl fYYearVO1 = this.getLOVFYYearVO1();
                fYYearVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
                fYYearVO1.setNamedWhereClauseParam("BindFyStDate", null);
                fYYearVO1.setNamedWhereClauseParam("BindFyId",
                                                   bdgEoBudgetVO1.getCurrentRow().getAttribute("FYBasisTrans"));
                fYYearVO1.executeQuery();
                Row[] allRowsInRange = fYYearVO1.getAllRowsInRange();
                if (allRowsInRange.length > 0) {
                    copyPrdStDt = allRowsInRange[0].getAttribute("FyStrt");
                    copyPrdEndDt = allRowsInRange[0].getAttribute("FyEnd");
                }
            }
        }

        try {
            val =
                (String) this.callStoredFunction(Types.VARCHAR,
                                                 "FN_INS_EO_COPY_PREV_BDG(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                 this.getCldIdValue(), this.getSlocIdValue(), this.getHoOrgIdValue(),
                                                 this.getOrgIdValue(), docId, fyId, eoId, prdStartDt, prdEndDt,
                                                 fyStartDt, fyEndDt, bdgFyId, copyPrevFyFlg, copyPrdStDt, copyPrdEndDt,
                                                 copyBdgSrcFlg, copyBudgAmtFlg, usrIdCreate, usrIdCreateDt
            });

        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("ERROR IN CALLING FUNCTION FN_INS_EO_COPY_PREV_BDG at BdgEoBudgetAmImpl :" +
                               e.getMessage());
        }
        if (val != null) {
            System.out.println("===========" + val + " Output String Length is : " + val.length());
            if (val.length() == 1) {
                FacesMessage msg = new FacesMessage(ADFModelUtils.resolvRsrc("MSG.2052"));  //MSG.2052  No Budget defined for this year.
                msg.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, msg);
            } else {
                String dispMsg = null;
                dispMsg = val.substring(val.lastIndexOf("@"));
                if (dispMsg.length() > 2) {
                    dispMsg = dispMsg.substring(2);
                    //System.out.println("Display message is " + dispMsg);
                    StringBuilder dispDocIdMsg =
                        new StringBuilder("<html><body><p>" + "Following Documents have been generated Successfully");
                    dispDocIdMsg.append("<p style='color:red'>");
                    dispDocIdMsg.append(dispMsg);
                    dispDocIdMsg.append("</body></html>");

                    FacesMessage msg = new FacesMessage(dispDocIdMsg.toString());
                    msg.setSeverity(FacesMessage.SEVERITY_INFO);
                    FacesContext.getCurrentInstance().addMessage(null, msg);
                }

                if (val.length() > 0) {
                    val = val.substring(0, val.lastIndexOf("@"));
                }

                //System.out.println("Value is " + val);
                bdgEoBudgetVO1.getCurrentRow().setAttribute("BudgAmt", val);
                bdgEoBudgetVO1.getCurrentRow().setAttribute("CopiedBudgAmt", val);
            }
            this.getBdgEoBudgetVO1().executeQuery();
            this.getBdgEoBudgetProdDtlVO1().executeQuery();
            this.getBdgEoBudgetPrdDtlVO1().executeQuery();
        }
        return val;
    }

    /**
     * Method For Copy Previous data using Function in case of Sub Ordinate
     */
    public String copyPreviousDataForSubOrd() {
        String val = null;
        System.out.println("Inside copy previous Sub Ordinate");
        /* FN_INS_EO_SUB_ORD_PREV_BDG(
                P_CLD_ID    VARCHAR2,
                P_SLOC_ID   NUMBER,
                P_HO_ORG_ID VARCHAR2,
                P_ORG_ID    VARCHAR2,
                P_DOC_ID    VARCHAR2,
                P_FY_ID    NUMBER,
                P_EO_ID     NUMBER,
                P_PRD_ST_DT DATE,
                P_PRD_END_DT DATE,
                P_FY_ST_DT DATE,
                P_FY_END_DT DATE,
                P_BDG_GRP_ID NUMBER,
                P_BDG_FY_ID NUMBER,
                P_COPY_PREV_FY_FLG VARCHAR2,
                P_COPY_PRD_STRT_DT DATE,
                P_COPY_PRD_END_DT DATE,
                P_COPY_BDG_SRC_FLG   VARCHAR2,
                P_COPY_BUDG_AMT_FLG VARCHAR2,
                P_USR_ID    NUMBER,
                P_USR_DT    DATE
                P_CURR_ID_SP NUMBER,
                P_CURR_CONV_RATE NUMBER,
                P_BUDGET_METHOD NUMBER,
                P_REGION NUMBER
                P_DISTB_METHD NUMBER,
               P_DISTB_PRD_BASIS NUMBER
              */
        ViewObjectImpl bdgEoBudgetVO1 = this.getBdgEoBudgetVO1();
        Row currentRow = bdgEoBudgetVO1.getCurrentRow();
        if (currentRow != null) {
            Object eoId = currentRow.getAttribute("EoId");
            //Object bdgGrpId = currentRow.getAttribute("BdgGrpId");
            Object bdgFyId = currentRow.getAttribute("BdgFyId");
            Object docId = currentRow.getAttribute("DocId");
            Object fyId = currentRow.getAttribute("FyId");
            Object prdStartDt = currentRow.getAttribute("PrdStartDt");
            Object prdEndDt = currentRow.getAttribute("PrdEndDt");
            Object fyStartDt = currentRow.getAttribute("FyStartDt");
            Object fyEndDt = currentRow.getAttribute("FyEndDt");
            Object copyBdgSrcFlg = currentRow.getAttribute("CopyBdgSrcFlg");
            Object copyBudgAmtFlg = currentRow.getAttribute("CopyBudgAmtFlg");
            Object usrIdCreate = currentRow.getAttribute("UsrIdCreate");
            Object usrIdCreateDt = currentRow.getAttribute("UsrIdCreateDt");
            Object currIdSp = currentRow.getAttribute("CurrIdSp");
            Object currConvRate = currentRow.getAttribute("CurrConvRate");
            Object bdgMethod = currentRow.getAttribute("BudgetMethod");
            Object region = currentRow.getAttribute("Region");
            Object distbMethod = currentRow.getAttribute("DistbMethd");
            Object distbPrdBasis = currentRow.getAttribute("DistbPrdBasis");
            Object copyPrevFyFlg = currentRow.getAttribute("CopyPrevFyFlg");

            Object copyPrdStDt = currentRow.getAttribute("CopyPrdStartDt");
            Object copyPrdEndDt = currentRow.getAttribute("CopyPrdEndDt");

            if (copyPrevFyFlg != null) {
                if (copyPrevFyFlg.toString().equalsIgnoreCase("P")) { /// Period Basis
                    copyPrdStDt = currentRow.getAttribute("CopyPrdStartDt");
                    copyPrdEndDt = currentRow.getAttribute("CopyPrdEndDt");
                } else { /// Financial Basis
                    ViewObjectImpl fYYearVO1 = this.getLOVFYYearVO1();
                    fYYearVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
                    fYYearVO1.setNamedWhereClauseParam("BindFyStDate", null);
                    fYYearVO1.setNamedWhereClauseParam("BindFyId", currentRow.getAttribute("FYBasisTrans"));
                    fYYearVO1.executeQuery();
                    Row[] allRowsInRange = fYYearVO1.getAllRowsInRange();
                    if (allRowsInRange.length > 0) {
                        copyPrdStDt = allRowsInRange[0].getAttribute("FyStrt");
                        copyPrdEndDt = allRowsInRange[0].getAttribute("FyEnd");
                    }
                }
            }


            try {
                val =
                    (String) this.callStoredFunction(Types.VARCHAR,
                                                     "FN_INS_EO_SUB_ORD_PREV_BDG(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                     this.getCldIdValue(), this.getSlocIdValue(),
                                                     this.getHoOrgIdValue(), this.getOrgIdValue(), docId, fyId, eoId,
                                                     prdStartDt, prdEndDt, fyStartDt, fyEndDt, bdgFyId, copyPrevFyFlg,
                                                     copyPrdStDt, copyPrdEndDt, copyBdgSrcFlg, copyBudgAmtFlg,
                                                     usrIdCreate, usrIdCreateDt, currIdSp, currConvRate, bdgMethod,
                                                     region, distbMethod, distbPrdBasis
                });
                System.out.println("DocId is ----- " + docId);
            } catch (Exception e) {
                e.printStackTrace();
                System.out.println("ERROR IN CALLING FUNCTION FN_INS_EO_SUB_ORD_PREV_BDG at BdgEoBudgetAmImpl :" +
                                   e.getMessage());
            }
            if (val != null) {
                System.out.println("===========" + val + " Output String Length is : " + val.length());
                if (val.length() == 1) {
                    FacesMessage msg = new FacesMessage(ADFModelUtils.resolvRsrc("MSG.2052")); //MSG.2052  No Budget defined for this year.
                    msg.setSeverity(FacesMessage.SEVERITY_ERROR);
                    FacesContext.getCurrentInstance().addMessage(null, msg);
                } else {
                    String dispMsg = null;
                    dispMsg = val.substring(val.lastIndexOf("@"));
                    if (dispMsg.length() > 2) {
                        dispMsg = dispMsg.substring(2);
                        System.out.println("Display message is " + dispMsg);
                        StringBuilder dispDocIdMsg =
                            new StringBuilder("<html><body><p>" +
                                              ADFModelUtils.resolvRsrc("MSG.2055")); //MSG.2055` Following Documents have been generated Successfully.
                        dispDocIdMsg.append("<p style='color:red'>");
                        dispDocIdMsg.append(dispMsg);
                        dispDocIdMsg.append("</body></html>");

                        FacesMessage msg = new FacesMessage(dispDocIdMsg.toString());
                        msg.setSeverity(FacesMessage.SEVERITY_INFO);
                        FacesContext.getCurrentInstance().addMessage(null, msg);
                    }

                    if (val.length() > 0) {
                        val = val.substring(0, val.lastIndexOf("@"));
                    }
                    System.out.println("Value is " + val);
                    currentRow.setAttribute("BudgAmt", val);
                    currentRow.setAttribute("CopiedBudgAmt", val);
                }
                //this.getBdgEoBudgetVO1().executeQuery();
                this.getBdgEoBudgetProdDtlVO1().executeQuery();
                this.getBdgEoBudgetPrdDtlVO1().executeQuery();
                this.getBdgEoBudgetPrdDtlVO1().executeQuery();

                System.out.println("Period Detail length is " +
                                   this.getBdgEoBudgetPrdDtlVO1().getAllRowsInRange().length);
            }
        }
        return val;
    }

    /**
     *Method which will check date whether it is present inside financial year or not
     * @param stDt
     * @return
     */
    public String validateFinancialYear(Timestamp stDt) {
        this.getNextYearFyDateVO1().setNamedWhereClauseParam("BindStartDate", stDt);
        this.getNextYearFyDateVO1().setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
        this.getNextYearFyDateVO1().executeQuery();
        Row[] fr = this.getNextYearFyDateVO1().getAllRowsInRange();
        if (fr.length > 0 && Integer.parseInt(fr[0].getAttribute("FyId").toString()) > 0) {
            return "Y";
        }
        return "N";
    }

    /**
     * Container's getter for LovExistBdgId1.
     * @return LovExistBdgId1
     */
    public ViewObjectImpl getLovExistBdgIdVO1() {
        return (ViewObjectImpl) findViewObject("LovExistBdgIdVO1");
    }

    /**
     *Method which will check whether data present inside Eo Budget Table or not
     * @param validDt
     * @return
     */

    public String chkDtExistInPeriod(Timestamp validDt) {
        Object bdgMethod = this.getBdgEoBudgetVO1().getCurrentRow().getAttribute("BudgetMethod");

        this.getLovExistBdgIdVO1().setNamedWhereClauseParam("BindBdgDt", validDt);
        this.getLovExistBdgIdVO1().setNamedWhereClauseParam("BindSetId",
                                                            this.getBdgEoBudgetVO1().getCurrentRow().getAttribute("BudgetSet"));
        if (bdgMethod != null) {
            if (Integer.parseInt(bdgMethod.toString()) == 1) {
                this.getLovExistBdgIdVO1().setNamedWhereClauseParam("BindEoId",
                                                                    this.getBdgEoBudgetVO1().getCurrentRow().getAttribute("EoId"));
            } else {
                this.getLovExistBdgIdVO1().setNamedWhereClauseParam("BindEoId", null);
            }

            this.getLovExistBdgIdVO1().setNamedWhereClauseParam("BindBudgMethod", bdgMethod);
        }
        this.getLovExistBdgIdVO1().executeQuery();
        Row fr[] = this.getLovExistBdgIdVO1().getAllRowsInRange();
        if (fr.length > 0) {
            for (Row r : fr) {
                if ((r.getAttribute("DocId").toString()).equals(this.getBdgEoBudgetVO1().getCurrentRow().getAttribute("DocId").toString())) {
                } else {
                    System.out.println("DocId of exist bdg=" + r.getAttribute("DocId").toString());
                    System.out.println("DocId of curr bdg=" +
                                       this.getBdgEoBudgetVO1().getCurrentRow().getAttribute("DocId").toString());
                    return r.getAttribute("BudgetId").toString();
                }
            }
        }
        return "N";
    }

    /**
     * Method which will be called in case of amendment or increase Budget Set or not
     */
    public void amendCurrBdgt() {
        String cldId = (String) this.getBdgEoBudgetVO1().getCurrentRow().getAttribute("CldId");
        String orgId = (String) this.getBdgEoBudgetVO1().getCurrentRow().getAttribute("OrgId");
        String hoOrgId = (String) this.getBdgEoBudgetVO1().getCurrentRow().getAttribute("HoOrgId");
        String docId = (String) this.getBdgEoBudgetVO1().getCurrentRow().getAttribute("DocId");
        Integer slocId = Integer.parseInt(this.getBdgEoBudgetVO1().getCurrentRow().getAttribute("SlocId").toString());
        /* Integer usrId =
            Integer.parseInt(this.getBdgEoBudgetVO1().getCurrentRow().getAttribute("UsrIdCreate").toString());
         */
        String docTxnId = null;
        docTxnId = (String) (callStoredFunction(Types.VARCHAR, "FN_AMEND_EO_BDG(?,?,?,?,?,?,?)", new Object[] {
                                                slocId, cldId, hoOrgId, orgId, docId, this.getUsrId(),
                                                new Timestamp(System.currentTimeMillis())
        }));
        System.out.println("DocTxnId=" + docTxnId);
        filterBdgOnLoad(docTxnId); // filter vo

        this.getBdgEoBudgetProdPrdDtlVO1().executeQuery();
        this.getBdgEoBudgetProdDtlVO1().executeQuery();
        this.getBdgEoBudgetPrdDtlVO1().executeQuery();
        this.getBdgEoRmksDtlVO1().executeQuery();
        this.getBdgEoBudgetVO1().executeQuery();
    }

    /**
     * Method which will check whether user is eligable to edit the Budget Set or not
     */
    public Integer chkBdgSetEligableToEditOrNot() {
        Integer val = 0;
        ViewObjectImpl bdgEoBudgetVO1 = this.getBdgEoBudgetVO1();
        Row currentRow = bdgEoBudgetVO1.getCurrentRow();
        if (currentRow != null) {
            Integer bdgStat = (Integer) currentRow.getAttribute("BudgetStat");
            if (bdgStat == 3) {
                val = 1; // Will let us know budget has been approved and user cannot edit that budget set
            } else if (bdgStat == 2) {
                val = 2; // Budget Set has been forwarded. User cannot edit the budget set
            } else if (bdgStat == 4) {
                val = 3; // Budget Set has been amended. User cannot edit the budget set
            }
        }
        return val;
    }

    /**
     *Method which will be called on Page Load
     * @param docId
     */
    public void filterBdgOnLoad(String docId) {
        if (docId != null && docId.length() > 0) {
            this.getBdgEoBudgetVO1().setNamedWhereClauseParam("BindDocId", docId);
            this.getBdgEoBudgetVO1().executeQuery();

            Row[] bdgRw = this.getBdgEoBudgetVO1().getFilteredRows("DocId", docId);
            if (bdgRw.length > 0) {
                this.getBdgEoBudgetVO1().setCurrentRow(bdgRw[0]);
                System.out.println("BindVar Value=" + docId);
            }
        } else {
            this.getBdgEoBudgetVO1().removeViewCriteria("BdgEoBudgetVOCriteria");
            this.getBdgEoBudgetVO1().executeQuery();
        }

        if (resolvElO("#{pageFlowScope.P_AMT_NOTATION}") == null) {
            RequestContext.getCurrentInstance().getPageFlowScope().put("P_AMT_NOTATION", new Number(1));
            RequestContext.getCurrentInstance().getPageFlowScope().put("P_NOTATION_DISP", "N");
            RequestContext.getCurrentInstance().getPageFlowScope().put("DISP_AMT_NOTATION", "Basic");
        }
    }

    /**
     * Container's getter for SearchData1.
     * @return SearchData1
     */
    public ViewObjectImpl getSearchDataVO1() {
        return (ViewObjectImpl) findViewObject("SearchDataVO1");
    }

    /**
     * Method which will set Currency Id on basis of Create Inser or VCL of Organization
     */

    /** --------------------- To Set Currency Id and Its Conversion Factor Value ------------------- **/
    public void generateOrgBsCurr() {
        Integer currId = 0;
        try {
            currId = (Integer) this.callStoredFunction(Types.INTEGER, "APP.GET_ORG_DEF_CURR_BS1(?,?,?)", new Object[] {
                                                       this.getCldIdValue(), this.getSlocIdValue(), this.getOrgIdValue()
            });

            this.getBdgEoBudgetVO1().getCurrentRow().setAttribute("CurrIdSp", currId);

            ViewObjectImpl currIdVO1 = this.getLOVCurrIdVO1();
            currIdVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            currIdVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            currIdVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
            currIdVO1.setNamedWhereClauseParam("BindCurrId", currId);
            currIdVO1.executeQuery();

            Row[] allRowsInRange = currIdVO1.getAllRowsInRange();
            if (allRowsInRange.length > 0) {
                this.getBdgEoBudgetVO1().getCurrentRow().setAttribute("CurrConvRate",
                                                                      allRowsInRange[0].getAttribute("CcSell"));
                this.getBdgEoBudgetVO1().getCurrentRow().setAttribute("CurrNameTrans",
                                                                      allRowsInRange[0].getAttribute("CurrDescTxn"));
            }

        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("ERROR IN CALLING FUNCTION at BdgEoBudgetEOImpl:" + e.getMessage());
        }

        // Method which will set default period start date and end date to next financial year and also region
        setDefaultPeriodDate();
    }

    /**
     * Method which will set Period Start Date and End Date and also default region of that employee to Default when user click on Create Insert
     */
    protected void setDefaultPeriodDate() {
        ViewObjectImpl bdgEoBudgetVO1 = this.getBdgEoBudgetVO1();
        Row currentRow = bdgEoBudgetVO1.getCurrentRow();
        if (currentRow != null) {
            ViewObjectImpl currentFYDateVO1 = this.getGetCurrentFYDateVO1();
            currentFYDateVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
            currentFYDateVO1.setNamedWhereClauseParam("BindStartDate", new Timestamp(System.currentTimeMillis()));
            currentFYDateVO1.executeQuery();

            currentFYDateVO1.setRangeSize(-1);

            ViewObjectImpl eoIdVO1 = this.getLOVEoIdVO1();
            eoIdVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            eoIdVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            eoIdVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            eoIdVO1.setNamedWhereClauseParam("BindUserId", this.getUsrId());
            eoIdVO1.setNamedWhereClauseParam("BindEoId", Integer.parseInt(resolvEl("#{pageFlowScope.P_EMP_CODE}")));
            eoIdVO1.executeQuery();

            Row[] allRowsInRange = currentFYDateVO1.getAllRowsInRange();
            if (allRowsInRange.length > 0) {
                currentRow.setAttribute("PrdStartDt", allRowsInRange[0].getAttribute("NextFyStrt"));
                currentRow.setAttribute("PrdEndDt", allRowsInRange[0].getAttribute("NextFyEnd"));

                currentRow.setAttribute("FyStartDt", allRowsInRange[0].getAttribute("NextFyStrt"));
                currentRow.setAttribute("FyEndDt", allRowsInRange[0].getAttribute("NextFyEnd"));

                currentRow.setAttribute("BdgFyId", (Integer) allRowsInRange[0].getAttribute("FyId") + 1);

                Row[] inRange = eoIdVO1.getAllRowsInRange();
                if (inRange.length > 0) {
                    currentRow.setAttribute("Region", inRange[0].getAttribute("EmpLocId"));
                }
            }
        }
    }

    /**
     * Method which will check whether Copy Previous Function is allowed for current Financial Year Or Not
     */
    public Boolean chkCopyPreviousAllowedOrNot() {
        System.out.println("Inside method");
        Boolean val = true;
        ViewObjectImpl bdgEoBudgetVO1 = this.getBdgEoBudgetVO1();
        Row currentRow = bdgEoBudgetVO1.getCurrentRow();
        if (currentRow != null) {
            Object fyStartDt = currentRow.getAttribute("FyStartDt");
            Object fyEndDt = currentRow.getAttribute("FyEndDt");
            ViewObjectImpl allowedVO1 = this.getChkCopyPrevAllowedVO1();
            allowedVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            allowedVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            allowedVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            allowedVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
            allowedVO1.setNamedWhereClauseParam("BindFyStDate", fyStartDt);
            allowedVO1.setNamedWhereClauseParam("BindFyEndDate", fyEndDt);
            allowedVO1.executeQuery();

            Row[] allRowsInRange = allowedVO1.getAllRowsInRange();
            if (allRowsInRange.length > 0) {
                val = false;
            }
        }
        System.out.println("Value is " + val);
        return val;
    }

    /**
     * Container's getter for ChkCopyPrevAllowed1.
     * @return ChkCopyPrevAllowed1
     */
    public ViewObjectImpl getChkCopyPrevAllowedVO1() {
        return (ViewObjectImpl) findViewObject("ChkCopyPrevAllowedVO1");
    }

    /**
     * Container's getter for LOVUserName1.
     * @return LOVUserName1
     */
    public ViewObjectImpl getLOVUserNameVO1() {
        return (ViewObjectImpl) findViewObject("LOVUserNameVO1");
    }

    /**
     * Container's getter for TemporaryData1.
     * @return TemporaryData1
     */
    public ViewObjectImpl getTemporaryDataVO1() {
        return (ViewObjectImpl) findViewObject("TemporaryDataVO1");
    }

    /**
     * Method will Set Bind Variables of Search Page and allow users to search data on basis of User Choice
     */
    public void setBindVariablesTemp() {
        ViewObjectImpl dataVO1 = this.getTemporaryDataVO1();
        dataVO1.reset();

        dataVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        dataVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        dataVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        dataVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());

        dataVO1.executeQuery();

        ViewObjectImpl searchDataVO1 = this.getSearchDataVO1();
        searchDataVO1.setNamedWhereClauseParam("BindCldId", "-1");
        searchDataVO1.setNamedWhereClauseParam("BindSlocId", -1);
        searchDataVO1.setNamedWhereClauseParam("BindHoOrgId", "-1");
        searchDataVO1.setNamedWhereClauseParam("BindOrgId", "-1");
        searchDataVO1.executeQuery();

        ViewObjectImpl empHierarchyVO1 = this.getViewEmpHierarchyVO1();
        empHierarchyVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        empHierarchyVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        empHierarchyVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        empHierarchyVO1.executeQuery();

        ViewObjectImpl dataProductVO1 = this.getTemporaryProductDataVO1();
        dataProductVO1.reset();

        dataProductVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        dataProductVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        dataProductVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        dataProductVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
        dataProductVO1.setNamedWhereClauseParam("BindUserId", this.getUsrId());
        dataProductVO1.executeQuery();
    }

    /**
     * Set Bind Variable of Hierarchy View based on User Selection
     */
    public void setBindVarForEmpHierarchyView() {
        ViewObjectImpl dataVO1 = this.getTemporaryDataVO1();
        Object empNm = dataVO1.getCurrentRow().getAttribute("EmployeeNameTrans");

        ViewObjectImpl headEmpHierarchyVO1 = this.getViewHeadEmpHierarchyVO1();
        ViewCriteria criteria = headEmpHierarchyVO1.getViewCriteria("ViewHeadEmpHierarchyVOCriteria");
        headEmpHierarchyVO1.applyViewCriteria(criteria);

        headEmpHierarchyVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        headEmpHierarchyVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        headEmpHierarchyVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        headEmpHierarchyVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
        headEmpHierarchyVO1.setNamedWhereClauseParam("BindEoId", resolvEl("#{pageFlowScope.P_EMP_CODE}"));
        headEmpHierarchyVO1.executeQuery();

        System.out.println("Length is " + headEmpHierarchyVO1.getAllRowsInRange().length);

        ViewObjectImpl empHierarchyVO1 = this.getViewEmpHierarchyVO1();
        empHierarchyVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        empHierarchyVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        empHierarchyVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        if (empNm != null) {
            empHierarchyVO1.setNamedWhereClauseParam("BindEoName", empNm);
        } else {
            empHierarchyVO1.setNamedWhereClauseParam("BindEoName", null);
        }

        empHierarchyVO1.executeQuery();
        System.out.println("---> " + empHierarchyVO1.getAllRowsInRange().length);
    }

    /**
     * Method For Search Button in Search Page
     */
    public void searchDataAccordingly() {
        ViewObjectImpl dataVO1 = this.getTemporaryDataVO1();
        Object orgId = dataVO1.getCurrentRow().getAttribute("OrgId");
        Object bdgId = dataVO1.getCurrentRow().getAttribute("BudgetIdTrans");
        Object empNm = dataVO1.getCurrentRow().getAttribute("EmployeeNameTrans");
        Object fyRange = dataVO1.getCurrentRow().getAttribute("FyRangeTrans");
        Object fromDt = dataVO1.getCurrentRow().getAttribute("FromDateTrans");
        Object endDt = dataVO1.getCurrentRow().getAttribute("ToDateTrans");

        //dataVO1.executeQuery();

        ViewObjectImpl searchDataVO1 = this.getSearchDataVO1();
        searchDataVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        searchDataVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        searchDataVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        searchDataVO1.setNamedWhereClauseParam("BindOrgId", orgId);
        searchDataVO1.setNamedWhereClauseParam("BindUserId", this.getUsrId());

        if (resolvElO("#{pageFlowScope.P_BUDG_METHOD}") != null) {
            if (resolvEl("#{pageFlowScope.P_BUDG_METHOD}").equalsIgnoreCase("S")) {
                searchDataVO1.setNamedWhereClauseParam("BindBudgMethod", 1);
            } else {
                searchDataVO1.setNamedWhereClauseParam("BindBudgMethod", 2);
            }
        }

        if (bdgId != null) {
            searchDataVO1.setNamedWhereClauseParam("BindBdgId", bdgId);
        } else {
            searchDataVO1.setNamedWhereClauseParam("BindBdgId", null);
        }

        if (fyRange != null) {
            searchDataVO1.setNamedWhereClauseParam("BindBdgFyId", fyRange);
        } else {
            searchDataVO1.setNamedWhereClauseParam("BindBdgFyId", null);
        }

        if (empNm != null) {
            searchDataVO1.setNamedWhereClauseParam("BindEoId", empNm); // Pass EoName in Bind Variable
        } else {
            searchDataVO1.setNamedWhereClauseParam("BindEoId", null);
        }

        if (fromDt != null) {
            searchDataVO1.setNamedWhereClauseParam("BindStDt", fromDt);
        } else {
            searchDataVO1.setNamedWhereClauseParam("BindStDt", null);
        }

        if (endDt != null) {
            searchDataVO1.setNamedWhereClauseParam("BindEndDt", endDt);
        } else {
            searchDataVO1.setNamedWhereClauseParam("BindEndDt", null);
        }

        searchDataVO1.executeQuery();
    }

    /**
     * Method From Reset Button
     */
    public void resetDataAccordingly() {
        ViewObjectImpl dataVO1 = this.getTemporaryDataVO1();
        dataVO1.reset();
        dataVO1.executeQuery();

        ViewObjectImpl searchDataVO1 = this.getSearchDataVO1();
        searchDataVO1.setNamedWhereClauseParam("BindCldId", "-1");
        searchDataVO1.setNamedWhereClauseParam("BindSlocId", -1);
        searchDataVO1.setNamedWhereClauseParam("BindHoOrgId", "-1");
        searchDataVO1.setNamedWhereClauseParam("BindOrgId", "-1");
        searchDataVO1.setNamedWhereClauseParam("BindBdgId", null);
        searchDataVO1.setNamedWhereClauseParam("BindEoId", null);
        searchDataVO1.setNamedWhereClauseParam("BindBdgFyId", null);
        searchDataVO1.setNamedWhereClauseParam("BindStDt", null);
        searchDataVO1.setNamedWhereClauseParam("BindEndDt", null);
        searchDataVO1.executeQuery();

        setBindVariablesTemp();
    }

    /**
     * Method which will let us know whether Valid fields were entered in Detail part or not
     */
    public Boolean ckhMandatoryFieldsEntered() {
        Boolean val = false;
        Row currentRow = this.getBdgEoBudgetProdDtlVO1().getCurrentRow();
        if (currentRow != null) {
            //Object custName = currentRow.getAttribute("CustomerNameTrans");
            Object itmGrpNm = currentRow.getAttribute("ItemGrpNmTrans");
            Object itmNm = currentRow.getAttribute("ItemNmTrans");
            Object itmSelType = currentRow.getAttribute("ItmSelType");

            if (itmSelType != null && itmSelType.toString().equalsIgnoreCase("I") && itmNm != null) {
                val = true;
            } else if (itmSelType != null && itmSelType.toString().equalsIgnoreCase("G") && itmGrpNm != null) {
                val = true;
            }

        } else {
            val = true;
        }
        return val;
    }

    /**
     * Method which will throw a validation message if all the mandatory fields were not entered properly
     * will check item quantity and item amount sp
     * when user click on back button
     */
    public Boolean chkQtyAndAmtEnteredOrNot() {
        Boolean val = false;

        Row currentRow = this.getBdgEoBudgetVO1().getCurrentRow();

        if (currentRow != null && !((Boolean) currentRow.getAttribute("ImmSubOrdinateTrans"))) {
            Integer condition = 0;
            StringBuilder dispDocIdMsg =
                new StringBuilder("<html><body><p>" + ADFModelUtils.resolvRsrc("MSG.2060")); // MSG.2060 Mandatory fields were missing for following items.
            dispDocIdMsg.append("<b style='color:black'>");

            ViewObjectImpl bdgEoBudgetProdDtlVO1 = this.getBdgEoBudgetProdDtlVO1();
            Row[] allRowsInRange = bdgEoBudgetProdDtlVO1.getAllRowsInRange();

            System.out.println("allRowsInRange length is " + allRowsInRange.length);

            for (Row r : allRowsInRange) {
                if (r.getAttribute("ItmAmtSp") != null) {
                } else {
                    System.out.println("Inside condition = 1");
                    condition = 1;
                    dispDocIdMsg.append("<p> " + r.getAttribute("DispGrpNmTrans") + "</p>");

                }
            }
            if (condition == 1) {
                dispDocIdMsg.append("</body></html>");
                FacesMessage msg = new FacesMessage(dispDocIdMsg.toString());
                msg.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, msg);
            } else {
                val = true;
            }

        } else {
            val = true;
        }

        return val;
    }

    /**
     * Method which will let us know whether Valid fields were entered in Detail part or not
     */
    public Boolean ckhItemDistrbDoneOrNot() {
        Boolean val = false;
        Row[] r = this.getBdgEoBudgetProdPrdDtlVO1().getAllRowsInRange();
        if (r != null && r.length > 0) {
            val = true;
        } else {
            val = true;
        }
        return val;
    }

    /**
     * Following method will check duplicate Validation for Customer, Item Group and Item Name
     * Based on user entry
     */
    public Boolean chkProductDuplicateValidator(String custName, String itemGrpName, String itemName) {
        Boolean val = false;
        Integer custId = 0;
        String itemGrpId = "0";
        String itemId = "0";
        Integer eoId = 0;

        ViewObjectImpl bdgEoBudgetProdDtlVO1 = this.getBdgEoBudgetProdDtlVO1();
        Row currentRow = bdgEoBudgetProdDtlVO1.getCurrentRow();

        if (currentRow != null) {
            eoId = (Integer) currentRow.getAttribute("EoId");

            if (eoId != null) {
                if (custName != null) {
                    ViewObjectImpl custVO1 = this.getLOVCustomerNmVO2();
                    custVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
                    custVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
                    custVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
                    custVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
                    custVO1.setNamedWhereClauseParam("BindEoId", null);
                    custVO1.executeQuery();

                    Row[] r = custVO1.getFilteredRows("EoNm", custName);
                    if (r.length > 0) {
                        custId = (Integer) r[0].getAttribute("EoId");
                    }
                } else {
                    custId = 0;
                }

                if (itemGrpName != null) {
                    ViewObjectImpl groupVO1 = this.getLOVItemGrpVO2();
                    groupVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
                    groupVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
                    groupVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
                    groupVO1.setNamedWhereClauseParam("BindGrpId", null);
                    groupVO1.executeQuery();

                    Row[] r = groupVO1.getFilteredRows("GrpNm", itemGrpName);
                    System.out.println("R.length in AMIMPL chkProductDuplicateValidator method is -- >" + r.length);
                    if (r.length > 0) {
                        itemGrpId = (String) r[0].getAttribute("GrpId");
                    }
                } else {
                    itemGrpId = "0";
                }

                if (itemName != null) {
                    ViewObjectImpl itemVO1 = this.getLOVItemNameVO2();
                    itemVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
                    itemVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
                    itemVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
                    itemVO1.setNamedWhereClauseParam("BindGrpId", null);
                    itemVO1.setNamedWhereClauseParam("BindItemId", null);

                    itemVO1.executeQuery();

                    RowQualifier rowQualifier = new RowQualifier(itemVO1);
                    rowQualifier.setWhereClause("ItmDesc ='" + itemName + "'");

                    Row[] r = itemVO1.getFilteredRows(rowQualifier);

                    if (r.length > 0) {
                        itemId = (String) r[0].getAttribute("ItmId");

                        itemGrpId = (String) r[0].getAttribute("GrpId");
                        currentRow.setAttribute("ItmGrpId", r[0].getAttribute("GrpId"));
                    }
                } else {
                    itemId = "0";
                }

                /* System.out.println("------------------------");
                printEstimatedRows(); */

                ViewObjectImpl bdgEoBudgetProdDtlVO4 = this.getBdgEoBudgetProdDtlVO4();

                /* System.out.println("*************");
                printEstimatedRows(); */

                //bdgEoBudgetProdDtlVO4.clearCache();

                /* System.out.println("&&&&&&&&&&&&&&&&");
                printEstimatedRows(); */

                bdgEoBudgetProdDtlVO4.executeQuery();
                System.out.println("Length is " + bdgEoBudgetProdDtlVO4.getAllRowsInRange().length);
                /* bdgEoBudgetProdDtlVO2.setRangeSize(-1);

                for (Row roo : bdgEoBudgetProdDtlVO2.getAllRowsInRange()) {
                    System.out.println("Cld " + roo.getAttribute("CldId") + " sloc " + roo.getAttribute("SlocId") +
                                       " ho " + roo.getAttribute("HoOrgId") + " orrg " + roo.getAttribute("OrgId") +
                                       " eoId " + roo.getAttribute("EoId") + " custeoId " +
                                       roo.getAttribute("CustEoId") + " grpId " + roo.getAttribute("ItmGrpId") +
                                       " itmid " + roo.getAttribute("ItmId"));
                } */

                RowQualifier rQ = new RowQualifier(bdgEoBudgetProdDtlVO4);
                rQ.setWhereClause("CldId ='" + this.getCldIdValue() + "' and SlocId =" + this.getSlocIdValue() +
                                  " and HoOrgId ='" + this.getHoOrgIdValue() + "' and OrgId ='" + this.getOrgIdValue() +
                                  "' and EoId =" + eoId + " and CustEoId =" + custId + " and ItmGrpId ='" + itemGrpId +
                                  "' and ItmId ='" + itemId + "'");
                Row[] r1 = bdgEoBudgetProdDtlVO4.getFilteredRows(rQ);

                /* System.out.println("^^^^ Length is " + r1.length + " custEoId " + custId + " eoId " + eoId + " grpId " +
                                   itemGrpId + " itemId " + itemId);

                System.out.println("------------ " + currentRow); */

                for (Row row : r1) {
                    /* System.out.println("***********  " + row + " ** " + row.getKey().equals(currentRow.getKey()) +
                                       " **** " + (row.getKey() == currentRow.getKey()));
                    System.out.println("row.getAt " + row.getAttribute("DocId") + " current " +
                                       currentRow.getAttribute("DocId"));
                     */
                    if (!row.getKey().equals(currentRow.getKey())) {
                        val = true;
                        return val;
                    } else {
                        val = false;
                    }
                }
            }
        }
        return val;
    }


    /**
     * Method will let us know whether user can create new budget set or not
     */
    public Boolean chkUserBdgSet() {
        Boolean val = true;
        ViewObjectImpl bdgEoBudgetVO1 = this.getBdgEoBudgetVO1();
        Row currentRow = bdgEoBudgetVO1.getCurrentRow();
        if (currentRow != null) {
            Integer eoId = (Integer) currentRow.getAttribute("EoId");
            Integer loginId = Integer.parseInt(resolvEl("#{pageFlowScope.P_EMP_CODE}"));
            //System.out.println("EoId is " + eoId + " Login Id is " + loginId);
            if (!eoId.equals(loginId)) {
                val = false;
            }
        }
        //System.out.println("&&&&&&&&&&&&&&&&&&&& Valuue is " + val);
        return val;
    }

    /**
     * Method which will Chech whether user can edit Budget Set Or not
     */
    public Integer chkUserLevelForBdgSet() {
        Integer val = 0;

        ViewObjectImpl bdgEoBudgetVO1 = this.getBdgEoBudgetVO1();
        Row currentRow = bdgEoBudgetVO1.getCurrentRow();

        Integer eoId = (Integer) currentRow.getAttribute("EoId");
        Integer loginId = Integer.parseInt(resolvEl("#{pageFlowScope.P_EMP_CODE}"));

        ViewObjectImpl getImmediateSubOrdVO1 = this.getGetImmediateSubOrdVO1();
        getImmediateSubOrdVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        getImmediateSubOrdVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        getImmediateSubOrdVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        getImmediateSubOrdVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
        getImmediateSubOrdVO1.setNamedWhereClauseParam("BindMgrCode", loginId);

        getImmediateSubOrdVO1.setRangeSize(-1);

        //System.out.println("EoId is " + eoId + " loginId is " + loginId);

        Row[] allRowsInRange = getImmediateSubOrdVO1.getAllRowsInRange();
        for (int i = 0; i < allRowsInRange.length; i++) {
            //System.out.println("all rows " + allRowsInRange[i].getAttribute("EmpCode"));
            if (eoId.equals(allRowsInRange[i].getAttribute("EmpCode")) || eoId.equals(loginId)) {
                val = 1;
            }
        }
        //System.out.println("Value is " + val);
        return val;
    }

    /**
     * Method which will check whether Budget Set has been freezed or not
     */
    public Boolean chkBudgetFreezedOrNot() {
        Boolean val = false;

        Row currentRow = this.getBdgEoBudgetVO1().getCurrentRow();
        if (currentRow != null) {
            String flg = (String) currentRow.getAttribute("FreezeFlg");
            if (flg != null && flg.equalsIgnoreCase("Y")) {
                val = true;
            }
        }

        return val;
    }


    /**
     * Container's getter for HeadEmpDetail1.
     * @return HeadEmpDetail1
     */
    public ViewObjectImpl getHeadEmpDetailVO1() {
        return (ViewObjectImpl) findViewObject("HeadEmpDetailVO1");
    }

    /**
     * Container's getter for EmpBudgetStruct1.
     * @return EmpBudgetStruct1
     */
    public ViewObjectImpl getEmpBudgetStructVO1() {
        return (ViewObjectImpl) findViewObject("EmpBudgetStructVO1");
    }

    /**
     * Container's getter for HeadEmpDtlToEmpBdgStructVL1.
     * @return HeadEmpDtlToEmpBdgStructVL1
     */
    public ViewLinkImpl getHeadEmpDtlToEmpBdgStructVL1() {
        return (ViewLinkImpl) findViewLink("HeadEmpDtlToEmpBdgStructVL1");
    }

    /**
     * Container's getter for EmpBudgetDetail1.
     * @return EmpBudgetDetail1
     */
    public ViewObjectImpl getEmpBudgetDetailVO1() {
        return (ViewObjectImpl) findViewObject("EmpBudgetDetailVO1");
    }

    /**
     * Container's getter for EmpBdgStructToEmpBdgDtlVL1.
     * @return EmpBdgStructToEmpBdgDtlVL1
     */
    public ViewLinkImpl getEmpBdgStructToEmpBdgDtlVL1() {
        return (ViewLinkImpl) findViewLink("EmpBdgStructToEmpBdgDtlVL1");
    }

    /**
     * Container's getter for StructDetail1.
     * @return StructDetail1
     */
    public ViewObjectImpl getStructDetailVO1() {
        return (ViewObjectImpl) findViewObject("StructDetailVO1");
    }

    /**
     * Container's getter for EmpBdgStructToStructDtlVL1.
     * @return EmpBdgStructToStructDtlVL1
     */
    public ViewLinkImpl getEmpBdgStructToStructDtlVL1() {
        return (ViewLinkImpl) findViewLink("EmpBdgStructToStructDtlVL1");
    }

    /**
     * Container's getter for EmpBudgetDetail1.
     * @return EmpBudgetDetail1
     */
    public ViewObjectImpl getEmpBudgetDetailVO2() {
        return (ViewObjectImpl) findViewObject("EmpBudgetDetailVO2");
    }

    /**
     * Container's getter for EmpBdgDtlToEmpBdgDtlSelfVL1.
     * @return EmpBdgDtlToEmpBdgDtlSelfVL1
     */
    public ViewLinkImpl getEmpBdgDtlToEmpBdgDtlSelfVL1() {
        return (ViewLinkImpl) findViewLink("EmpBdgDtlToEmpBdgDtlSelfVL1");
    }

    /**
     * Container's getter for StructDetail1.
     * @return StructDetail1
     */
    public ViewObjectImpl getStructDetailVO2() {
        return (ViewObjectImpl) findViewObject("StructDetailVO2");
    }

    /**
     * Container's getter for StructDtlToStructDtlSelfVL1.
     * @return StructDtlToStructDtlSelfVL1
     */
    public ViewLinkImpl getStructDtlToStructDtlSelfVL1() {
        return (ViewLinkImpl) findViewLink("StructDtlToStructDtlSelfVL1");
    }

    /**
     * Method which will return region Id based on Employee Code and return it
     */
    protected String getRegionId(Integer empCode) {
        String id = null;
        ViewObjectImpl impl = this.getLOVSubOrdinateRegionVO1();
        impl.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        impl.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        impl.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        impl.setNamedWhereClauseParam("BindEmpId", empCode);

        impl.executeQuery();

        Row[] allRowsInRange = impl.getAllRowsInRange();
        if (allRowsInRange.length > 0) {
            id = (String) allRowsInRange[0].getAttribute("ParamId");
        }

        return id;
    }


    /**
     * Method which will set target amount for Immediate Subordinates based on Budget Amount entered by employee
     */
    public void setTargetAmount() {
        ViewObjectImpl bdgEoBudgetVO1 = this.getBdgEoBudgetVO1();
        RowQualifier rQ = new RowQualifier(bdgEoBudgetVO1);

        rQ.setWhereClause("CldId ='" + this.getCldIdValue() + "' and SlocId = " + this.getSlocIdValue() +
                          " and HoOrgId = '" + this.getHoOrgIdValue() + "' and EoId = " +
                          resolvEl("#{pageFlowScope.P_EO_ID}") + " and DocId ='" +
                          resolvEl("#{pageFlowScope.P_DOC_ID}") + "'");
        Row[] filteredRows = bdgEoBudgetVO1.getFilteredRows(rQ);

        //Row currentRow = this.getBdgEoBudgetVO1().getCurrentRow();
        if (filteredRows.length > 0) {
            String dispId = null;
            StringBuilder dispDocIdMsg =
                new StringBuilder("<html><body><p>" + "Following Budget Sets have been created Successfully");
            dispDocIdMsg.append("<b style='color:black'>");

            Timestamp prdStDate = (Timestamp) filteredRows[0].getAttribute("PrdStartDt");
            Timestamp prdEndDate = (Timestamp) filteredRows[0].getAttribute("PrdEndDt");
            Integer fyId = (Integer) filteredRows[0].getAttribute("FyId");
            Integer bdgFyId = (Integer) filteredRows[0].getAttribute("BdgFyId");
            Timestamp fyStDate = (Timestamp) filteredRows[0].getAttribute("FyStartDt");
            Timestamp fyEndDate = (Timestamp) filteredRows[0].getAttribute("FyEndDt");
            String region = (String) filteredRows[0].getAttribute("Region");
            //Integer bdgGrpId = (Integer) filteredRows[0].getAttribute("BdgGrpId");
            Integer bdgMethod = (Integer) filteredRows[0].getAttribute("BudgetMethod");
            Integer currIdSp = (Integer) filteredRows[0].getAttribute("CurrIdSp");
            Number convRate = (Number) filteredRows[0].getAttribute("CurrConvRate");
            String bdgName = (String) filteredRows[0].getAttribute("BudgetNm");

            ViewObjectImpl dtlVO3 = this.getEmpBudgetDetailVO3();
            RowSetIterator rsi = dtlVO3.createRowSetIterator(null);
            Integer empCode = null;
            while (rsi.hasNext()) {
                Row next = rsi.next();
                System.out.println("Employee Asigned amt = " + next.getAttribute("EmpAssignedAmtTrans"));
                if (next.getAttribute("EmpAssignedAmtTrans") != null) {
                    empCode = (Integer) next.getAttribute("EmpCode");

                    region = getRegionId(empCode);

                    dispId =
                        createEoBudget(fyId, bdgFyId, prdStDate, prdEndDate, fyStDate, fyEndDate,
                                       (Number) next.getAttribute("EmpAssignedAmtTrans"), empCode, region, bdgMethod,
                                       currIdSp, convRate, bdgName);
                }
                if (dispId != null) {
                    dispDocIdMsg.append("<p> " + next.getAttribute("EmpNm") + " - " + dispId + "</p>");
                }
            }
            if (rsi != null) {
                rsi.closeRowSetIterator();
            }
            dispDocIdMsg.append("</body></html>");
            FacesMessage msg = new FacesMessage(dispDocIdMsg.toString());
            msg.setSeverity(FacesMessage.SEVERITY_INFO);
            FacesContext.getCurrentInstance().addMessage(null, msg);
        }
    }

    /**
     * Method which will create new Documents along with Disp Id for entered Budget Amount on Popup
     * If Document is already present then it will update the existing document budget amount
     */
    protected String createEoBudget(Integer fyId, Integer bdgFyId, Timestamp prdStDate, Timestamp prdEndDate,
                                    Timestamp fyStDate, Timestamp fyEndDate, Number trgBdgAmt, Integer eoId,
                                    String region, Integer bdgMethod, Integer currIdSp, Number convRate,
                                    String bdgName) {
        String dispId = null;
        System.out.println("Target amt = " + trgBdgAmt);
        ViewObjectImpl bdgEoDetailVO1 = this.getGetBdgEoDetailVO1();
        bdgEoDetailVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        bdgEoDetailVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        bdgEoDetailVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        bdgEoDetailVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
        bdgEoDetailVO1.setNamedWhereClauseParam("BindEoId", eoId);
        //bdgEoDetailVO1.setNamedWhereClauseParam("BindFyId", fyId);
        bdgEoDetailVO1.setNamedWhereClauseParam("BindBdgFyId", bdgFyId);
        bdgEoDetailVO1.setNamedWhereClauseParam("BindPrdStDate", prdStDate);
        bdgEoDetailVO1.setNamedWhereClauseParam("BindPrdEndDate", prdEndDate);
        bdgEoDetailVO1.executeQuery();

        bdgEoDetailVO1.setRangeSize(-1);

        ViewObjectImpl bdgEoBudgetVO2 = this.getBdgEoBudgetVO2();
        bdgEoBudgetVO2.executeQuery();

        Row[] allRowsInRange = bdgEoDetailVO1.getAllRowsInRange();
        //System.out.println("%%%%%%%%%%%% " + allRowsInRange.length);
        if (allRowsInRange.length > 0) {
            for (Row r : allRowsInRange) {
                Object docId = r.getAttribute("DocId");
                Object bdgId = r.getAttribute("BudgetId");

                RowQualifier rQ = new RowQualifier(bdgEoBudgetVO2);
                rQ.setWhereClause("CldId ='" + this.getCldIdValue() + "' and SlocId = " + this.getSlocIdValue() +
                                  " and HoOrgId = '" + this.getHoOrgIdValue() + "' and DocId ='" + docId +
                                  "' and BudgetId ='" + bdgId + "'");
                Row[] filteredRows = bdgEoBudgetVO2.getFilteredRows(rQ);

                for (Row row : filteredRows) {
                    row.setAttribute("MgrBudgAmt", trgBdgAmt);

                    if (row.getAttribute("BudgAmt") == null) {
                        row.setAttribute("BudgAmt", trgBdgAmt);
                        //row.setAttribute("BudgAmt", new Number(0));
                    }

                    dispId = (String) bdgId;

                    this.getDBTransaction().commit(); /// Placed this to display Document Id on Page after inserting row
                }
            }
        } else { // Create New
            System.out.println("Inside create Row " + eoId);
            Row bdgEoDtl2 = bdgEoBudgetVO2.createRow();
            bdgEoBudgetVO2.insertRow(bdgEoDtl2);

            bdgEoDtl2.setAttribute("OrgId", this.getOrgIdValue());
            bdgEoDtl2.setAttribute("PrdStartDt", prdStDate);
            bdgEoDtl2.setAttribute("PrdEndDt", prdEndDate);
            bdgEoDtl2.setAttribute("FyStartDt", fyStDate);
            bdgEoDtl2.setAttribute("FyEndDt", fyEndDate);
            bdgEoDtl2.setAttribute("EoId", eoId);
            bdgEoDtl2.setAttribute("BdgFyId", bdgFyId);
            bdgEoDtl2.setAttribute("Region", region);
            //bdgEoDtl2.setAttribute("BdgGrpId", bdgGrpId);
            bdgEoDtl2.setAttribute("MgrBudgAmt", trgBdgAmt);
            //bdgEoDtl2.setAttribute("BudgAmt", trgBdgAmt);
            bdgEoDtl2.setAttribute("BudgAmt", new Number(0));
            bdgEoDtl2.setAttribute("BudgetMethod", bdgMethod);
            bdgEoDtl2.setAttribute("CurrIdSp", currIdSp);
            bdgEoDtl2.setAttribute("CurrConvRate", convRate);
            bdgEoDtl2.setAttribute("BudgetNm", bdgName);

            this.getDBTransaction().commit(); /// Placed this to display Document Id on Page after inserting row

            dispId = (String) bdgEoDtl2.getAttribute("BudgetId");
        }
        this.getBdgEoBudgetVO2().executeQuery();

        return dispId;
    }


    /**
     * Container's getter for GetBdgEoDetail1.
     * @return GetBdgEoDetail1
     */
    public ViewObjectImpl getGetBdgEoDetailVO1() {
        return (ViewObjectImpl) findViewObject("GetBdgEoDetailVO1");
    }

    /**
     * Set Target Amount on basis of Hierarchy popup data entry
     */
    public void setCurrentBdgAmt(Number amt) {
        ViewObjectImpl bdgEoBudgetVO1 = this.getBdgEoBudgetVO1();
        RowQualifier rQ = new RowQualifier(bdgEoBudgetVO1);

        rQ.setWhereClause("CldId ='" + this.getCldIdValue() + "' and SlocId = " + this.getSlocIdValue() +
                          " and HoOrgId = '" + this.getHoOrgIdValue() + "' and EoId = " +
                          resolvEl("#{pageFlowScope.P_EO_ID}") + " and DocId ='" +
                          resolvEl("#{pageFlowScope.P_DOC_ID}") + "'");
        Row[] filteredRows = bdgEoBudgetVO1.getFilteredRows(rQ);
        if (filteredRows.length > 0) {
            filteredRows[0].setAttribute("BudgAmt", amt);
        }
    }

    /**
     * Set Bind Variables for hierarchy component
     */
    public void setBindVarForHierarchyPage() {
        System.out.println("Inside Hierarchi VO");

        ViewObjectImpl basedOnLocVO1 = this.getGetImmEmpBasedOnLocVO1();
        basedOnLocVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        basedOnLocVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        basedOnLocVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        basedOnLocVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
        basedOnLocVO1.executeQuery();

        ViewObjectImpl bdgEoBudgetVO1 = this.getBdgEoBudgetVO1();
        RowQualifier rowQua = new RowQualifier(bdgEoBudgetVO1);

        rowQua.setWhereClause("CldId ='" + this.getCldIdValue() + "' and SlocId = " + this.getSlocIdValue() +
                              " and HoOrgId = '" + this.getHoOrgIdValue() + "' and EoId = " +
                              resolvEl("#{pageFlowScope.P_EO_ID}") + " and DocId ='" +
                              resolvEl("#{pageFlowScope.P_DOC_ID}") + "'");
        Row[] fr = bdgEoBudgetVO1.getFilteredRows(rowQua);

        //Row currentRow = this.getBdgEoBudgetVO1().getCurrentRow();
        if (fr.length > 0) {
            ViewObjectImpl detailVO1 = this.getHeadEmpDetailVO1();
            ViewCriteria criteria = detailVO1.getViewCriteria("HeadEmpDetailVOCriteria");
            detailVO1.applyViewCriteria(criteria);
            System.out.println(fr[0].getAttribute("EoId") + " Estimate Row count for head before setting bind var" +
                               detailVO1.getFilteredRows("CldId", this.getCldIdValue()).length);
            detailVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            detailVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            detailVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            detailVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
            detailVO1.setNamedWhereClauseParam("BindEmpCode", fr[0].getAttribute("EoId"));
            detailVO1.setNamedWhereClauseParam("BindEmpName", null);
            detailVO1.executeQuery();
            System.out.println("Estimate Row count for head after setting bind var " +
                               detailVO1.getFilteredRows("CldId", this.getCldIdValue()).length);
        }
    }

    /**
     * Container's getter for EmpBudgetDetail1.
     * @return EmpBudgetDetail1
     */
    public ViewObjectImpl getEmpBudgetDetailVO3() {
        return (ViewObjectImpl) findViewObject("EmpBudgetDetailVO3");
    }

    /**
     * Container's getter for HeadEmpDtlToEmpBdgDtlVL1.
     * @return HeadEmpDtlToEmpBdgDtlVL1
     */
    public ViewLinkImpl getHeadEmpDtlToEmpBdgDtlVL1() {
        return (ViewLinkImpl) findViewLink("HeadEmpDtlToEmpBdgDtlVL1");
    }


    /**
     * Method will be called when user click on Approve Budget or Reject Budget on PopUp in Hierarchy View Page
     */
    public void approveRejectBudget(Integer statusType) {
        //System.out.println("In AMIMPL Apprrove/Reject");
        ViewObjectImpl bdgEoBudgetVO1 = this.getBdgEoBudgetVO1();
        RowQualifier rowQua = new RowQualifier(bdgEoBudgetVO1);

        rowQua.setWhereClause("CldId ='" + this.getCldIdValue() + "' and SlocId = " + this.getSlocIdValue() +
                              " and HoOrgId = '" + this.getHoOrgIdValue() + "' and EoId = " +
                              resolvEl("#{pageFlowScope.P_EO_ID}") + " and DocId ='" +
                              resolvEl("#{pageFlowScope.P_DOC_ID}") + "'");
        Row[] fr = bdgEoBudgetVO1.getFilteredRows(rowQua);

        ViewObjectImpl bdgEoBudgetVO2 = this.getGetBdgEoDetailVO1();
        //System.out.println("1st Fr Length is " + fr.length);
        if (fr.length > 0) {
            Object bdgFyId = fr[0].getAttribute("BdgFyId");
            Object prdStDt = fr[0].getAttribute("PrdStartDt");
            Object prdEndDt = fr[0].getAttribute("PrdEndDt");
            Object bdgAmt = fr[0].getAttribute("BudgAmt");

            Row currentRow = this.getEmpBudgetDetailVO3().getCurrentRow();

            bdgEoBudgetVO2.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            bdgEoBudgetVO2.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            bdgEoBudgetVO2.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            bdgEoBudgetVO2.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
            bdgEoBudgetVO2.setNamedWhereClauseParam("BindEoId", currentRow.getAttribute("EmpCode"));
            bdgEoBudgetVO2.setNamedWhereClauseParam("BindBdgFyId", bdgFyId);
            bdgEoBudgetVO2.setNamedWhereClauseParam("BindPrdStDate", prdStDt);
            bdgEoBudgetVO2.setNamedWhereClauseParam("BindPrdEndDate", prdEndDt);
            bdgEoBudgetVO2.setNamedWhereClauseParam("BindBdgStatus", 1);
            bdgEoBudgetVO2.executeQuery();

            Row[] filteredRows = bdgEoBudgetVO2.getAllRowsInRange();
            //System.out.println("2nd Length is " + filteredRows.length);
            Number val = new Number(0);

            if (bdgAmt != null) {
                val = (Number) bdgAmt;
            }

            if (filteredRows.length > 0) {
                ViewObjectImpl budgetVO2 = this.getBdgEoBudgetVO2();
                budgetVO2.executeQuery();

                RowQualifier rQ = new RowQualifier(bdgEoBudgetVO2);
                rQ.setWhereClause("CldId = '" + this.getCldIdValue() + "' and HoOrgId = '" + this.getHoOrgIdValue() +
                                  "' and SlocId =" + this.getSlocIdValue() + " and DocId ='" +
                                  filteredRows[0].getAttribute("DocId") + "' and EoId =" +
                                  currentRow.getAttribute("EmpCode"));
                Row[] row = budgetVO2.getFilteredRows(rQ);
                //System.out.println("3rd length si " + row.length);
                if (row.length > 0) {
                    row[0].setAttribute("BudgetStat", statusType);

                    row[0].setAttribute("Remarks", currentRow.getAttribute("BdgRemarksTrans"));

                    if (statusType == 3) {
                        if (currentRow.getAttribute("UpdateBdgAmtCBTrans") != null &&
                            currentRow.getAttribute("UpdateBdgAmtCBTrans").toString().equalsIgnoreCase("Y")) {
                            fr[0].setAttribute("BudgAmt",
                                               val.add((Number) currentRow.getAttribute("DispDiffInAmtTrans"))); /// Update Current Row value
                        }
                        row[0].setAttribute("MgrBudgAmt",
                                            ((Number) row[0].getAttribute("MgrBudgAmt")).add((Number) currentRow.getAttribute("DispDiffInAmtTrans"))); // Update Manager Value for the target amount

                        sendDateFromTempCcToBdgCc((String) row[0].getAttribute("DocId")); /// Method which will push data from temp cost center to Bdg Cost Center table
                    }

                    if (currentRow.getAttribute("BdgRemarksTrans") != null) {
                        ViewObjectImpl bdgEoRmksDtlVO1 = this.getBdgEoRmksDtlVO1();
                        Row createRow = bdgEoRmksDtlVO1.createRow();
                        bdgEoRmksDtlVO1.insertRow(createRow);
                        createRow.setAttribute("OrgId", row[0].getAttribute("OrgId"));
                        createRow.setAttribute("BudgetSet", row[0].getAttribute("BudgetSet"));
                        createRow.setAttribute("DocId", row[0].getAttribute("DocId"));
                        createRow.setAttribute("EoId", row[0].getAttribute("EoId"));
                        createRow.setAttribute("PrdStartDt", row[0].getAttribute("PrdStartDt"));
                        createRow.setAttribute("PrdEndDt", row[0].getAttribute("PrdEndDt"));
                        createRow.setAttribute("Remarks", currentRow.getAttribute("BdgRemarksTrans"));
                    }

                    this.getDBTransaction().commit(); // Placed this to change color on popup

                    this.getEmpBudgetDetailVO3().executeQuery();

                    this.getHeadEmpDetailVO1().executeQuery();

                }
            }
        }
    }

    /**
     * Method which will tell whether user can save and forward the record or not
     */
    public Boolean chkSaveAndForwardEligableOrNot() {
        Boolean val = false;
        ViewObjectImpl bdgEoBudgetProdDtlVO1 = this.getBdgEoBudgetProdDtlVO1();
        Row[] allRowsInRange = bdgEoBudgetProdDtlVO1.getAllRowsInRange();
        if (allRowsInRange.length > 0) {
            val = true;
        }

        return val;
    }

    /**
     * Method which will check whether user has done distribution or not and also check its total with budget amount
     */
    public Integer chkDistributionDoneOrNot() {
        Integer val = 0;

        ViewObjectImpl bdgEoBudgetPrdDtlVO1 = this.getBdgEoBudgetPrdDtlVO1();
        RowSetIterator rsi = bdgEoBudgetPrdDtlVO1.createRowSetIterator(null);
        if (rsi.getAllRowsInRange().length > 0) {
            val = 0;
        } else {
            val = 1; ////   Will let us know that no distribution has been created forr this current budget
        }
        if (rsi != null) {
            rsi.closeRowSetIterator();
        }
        return val;
    }

    /**
     * Method which will chcek whether budget amount is there or not
     */
    public Boolean chkBudgetAmount() {
        Boolean val = false;

        ViewObjectImpl bdgEoBudgetVO1 = this.getBdgEoBudgetVO1();
        Row currentRow = bdgEoBudgetVO1.getCurrentRow();
        if (currentRow != null) {
            Number bdgAmt = (Number) currentRow.getAttribute("BudgAmt");
            Boolean immediateSubOrdinate = (Boolean) currentRow.getAttribute("ImmSubOrdinateTrans");

            System.out.println("immediateSubOrdinate is " + immediateSubOrdinate);
            if (!immediateSubOrdinate) {
                if (bdgAmt != null && bdgAmt.compareTo(0) > 0) {
                    val = true;
                }
            } else {
                val = true;
            }
        }

        return val;
    }

    /**
     * Change Mode value to Forwarded on basis
     */
    public void changeBdgStatus() {
        Row currentRow = this.getBdgEoBudgetVO1().getCurrentRow();
        currentRow.setAttribute("BudgetStat", 2);
        //System.out.println("Inside change status page");
    }

    /**
     * Container's getter for EmpSubOrdComplete1.
     * @return EmpSubOrdComplete1
     */
    public ViewObjectImpl getEmpSubOrdCompleteVO1() {
        return (ViewObjectImpl) findViewObject("EmpSubOrdCompleteVO1");
    }

    /**
     * Method which will chaange the status to freeze/unfreeze when higher level person click on freeze button
     * Freeze will be dont to all the employees present under that employee
     * Unfreeze will be done to immediate employees only
     */
    public void freezeUnfreezeDocument(String val) {
        if (val != null) {
            Row currentRow = this.getBdgEoBudgetVO1().getCurrentRow();
            if (currentRow != null) {
                //System.out.println("Va- " + val);

                if (val.equalsIgnoreCase("Y") || val.equalsIgnoreCase("true")) { // will freeze all subordinates belongs to that employee
                    ViewObjectImpl bdgEoBudgetVO2 = this.getBdgEoBudgetVO2();
                    bdgEoBudgetVO2.executeQuery();

                    //System.out.println("Inside If Loop");
                    ViewObjectImpl completeVO1 = this.getEmpSubOrdCompleteVO1();

                    completeVO1.setRangeSize(-1);

                    completeVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
                    completeVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
                    completeVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
                    completeVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
                    completeVO1.setNamedWhereClauseParam("BindEmpId", currentRow.getAttribute("EoId"));
                    completeVO1.setNamedWhereClauseParam("BindPrdStDate", currentRow.getAttribute("PrdStartDt"));
                    completeVO1.setNamedWhereClauseParam("BindPrdEndDate", currentRow.getAttribute("PrdEndDt"));
                    completeVO1.executeQuery();

                    Row[] allRowsInRange = completeVO1.getAllRowsInRange();
                    //System.out.println("All rows " + allRowsInRange.length);
                    if (allRowsInRange.length > 0) {
                        RowQualifier rQ = new RowQualifier(bdgEoBudgetVO2);

                        for (int i = 0; i < allRowsInRange.length; i++) {
                            rQ.setWhereClause("CldId ='" + this.getCldIdValue() + "' and SlocId =" +
                                              this.getSlocIdValue() + " and HoOrgId ='" + this.getHoOrgIdValue() +
                                              "' and OrgId ='" + this.getOrgIdValue() + "' and DocId ='" +
                                              allRowsInRange[i].getAttribute("DocId") + "' and EoId =" +
                                              allRowsInRange[i].getAttribute("EoId") + " and FyId =" +
                                              allRowsInRange[i].getAttribute("FyId"));
                            Row[] filteredRows = bdgEoBudgetVO2.getFilteredRows(rQ);
                            //System.out.println("Filtered rows - " + filteredRows.length);
                            if (filteredRows.length > 0) {
                                for (int j = 0; j < filteredRows.length; j++) {
                                    filteredRows[j].setAttribute("FreezeFlg", "Y");
                                }
                            }
                        }
                    }
                    currentRow.setAttribute("BudgetStat", 3);

                    if (currentRow.getAttribute("MgrBudgAmt") != null) {
                        currentRow.setAttribute("MgrBudgAmt", currentRow.getAttribute("BudgAmt"));
                    }

                    sendDateFromTempCcToSlsSoCc(); /// Method which will push data from temp cost center to bdg cost center table

                    bdgEoBudgetVO2.executeQuery();

                } else { // Will unfreeze immediate employee only
                    ViewObjectImpl bdgEoBudgetVO2 = this.getBdgEoBudgetVO2();
                    bdgEoBudgetVO2.executeQuery();

                    //System.out.println("Inside else part");
                    ViewObjectImpl dtlVO1 = this.getImmediateSubOrdDtlVO1();

                    dtlVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
                    dtlVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
                    dtlVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
                    dtlVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
                    dtlVO1.setNamedWhereClauseParam("BindEmpId", currentRow.getAttribute("EoId"));
                    dtlVO1.setNamedWhereClauseParam("BindPrdStDate", currentRow.getAttribute("PrdStartDt"));
                    dtlVO1.setNamedWhereClauseParam("BindPrdEndDate", currentRow.getAttribute("PrdEndDt"));
                    dtlVO1.executeQuery();

                    dtlVO1.setRangeSize(-1);

                    Row[] allRowsInRange = dtlVO1.getAllRowsInRange();
                    //System.out.println("Else loop all " + allRowsInRange.length);
                    if (allRowsInRange.length > 0) {
                        RowQualifier rQ = new RowQualifier(bdgEoBudgetVO2);
                        for (int i = 0; i < allRowsInRange.length; i++) {
                            rQ.setWhereClause("CldId ='" + this.getCldIdValue() + "' and SlocId =" +
                                              this.getSlocIdValue() + " and HoOrgId ='" + this.getHoOrgIdValue() +
                                              "' and OrgId ='" + this.getOrgIdValue() + "' and DocId ='" +
                                              allRowsInRange[i].getAttribute("DocId") + "' and EoId =" +
                                              allRowsInRange[i].getAttribute("EoId") + " and FyId =" +
                                              allRowsInRange[i].getAttribute("FyId"));
                            Row[] filteredRows = bdgEoBudgetVO2.getFilteredRows(rQ);
                            //System.out.println("Else fil " + filteredRows.length);
                            if (filteredRows.length > 0) {
                                for (int j = 0; j < filteredRows.length; j++) {
                                    filteredRows[j].setAttribute("FreezeFlg", "N");
                                }
                            }
                        }
                    }
                    bdgEoBudgetVO2.executeQuery();
                }
            }
        }
    }

    /**
     * Method which will set the bind variables of VO which will display on PopUp before
     */
    public void setImmediateSubOrdDtlVOBindVar() {
        Row currentRow = this.getBdgEoBudgetVO1().getCurrentRow();
        if (currentRow != null) {

            ViewObjectImpl dtlVO1 = this.getImmediateSubOrdDtlVO1();

            dtlVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            dtlVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            dtlVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            dtlVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
            dtlVO1.setNamedWhereClauseParam("BindEmpId", currentRow.getAttribute("EoId"));
            dtlVO1.setNamedWhereClauseParam("BindPrdStDate", currentRow.getAttribute("PrdStartDt"));
            dtlVO1.setNamedWhereClauseParam("BindPrdEndDate", currentRow.getAttribute("PrdEndDt"));
            dtlVO1.executeQuery();
        }
    }

    /**
     * Method which will execute Header View
     */
    public void executeHeadView() {
        Row currentRow = this.getBdgEoBudgetVO1().getCurrentRow();

        this.getBdgEoBudgetVO1().executeQuery();

        this.getBdgEoBudgetVO1().setCurrentRow(currentRow);
    }

    /**
     * Method which will unfreeze documents based on selection for immediate subordinates
     */
    public void unfreezeDocuments() {
        ViewObjectImpl bdgEoBudgetVO1 = this.getBdgEoBudgetVO1();
        Row currentRow = bdgEoBudgetVO1.getCurrentRow();
        if (currentRow != null) {
            ViewObjectImpl dtlVO1 = this.getImmediateSubOrdDtlVO1();
            if (dtlVO1.getAllRowsInRange().length > 0) {
                RowSetIterator rsi = dtlVO1.createRowSetIterator(null);
                while (rsi.hasNext()) {
                    Row next = rsi.next();
                    Object freezeFlg = next.getAttribute("FreezeFlag");
                    Object freezeRemarks = next.getAttribute("FreezeRemarksTrans");
                    ViewObjectImpl bdgEoBudgetVO2 = this.getBdgEoBudgetVO2();
                    bdgEoBudgetVO2.executeQuery();

                    RowQualifier rQ = new RowQualifier(bdgEoBudgetVO2);

                    if (freezeFlg != null) {
                        if (freezeFlg.toString().equalsIgnoreCase("N") ||
                            freezeFlg.toString().equalsIgnoreCase("false")) {
                            rQ.setWhereClause("CldId ='" + this.getCldIdValue() + "' and SlocId =" +
                                              this.getSlocIdValue() + " and HoOrgId ='" + this.getHoOrgIdValue() +
                                              "' and OrgId ='" + this.getOrgIdValue() + "' and DocId ='" +
                                              next.getAttribute("DocId") + "' and EoId =" + next.getAttribute("EoId") +
                                              " and FyId =" + next.getAttribute("FyId"));
                            Row[] filteredRows = bdgEoBudgetVO2.getFilteredRows(rQ);
                            //System.out.println("Else fil " + filteredRows.length);
                            if (filteredRows.length > 0) {
                                for (int j = 0; j < filteredRows.length; j++) {
                                    filteredRows[j].setAttribute("FreezeFlg", "N");
                                    filteredRows[j].setAttribute("FrzRemarks", freezeRemarks);

                                    if (freezeRemarks != null) {
                                        ViewObjectImpl bdgEoRmksDtlVO1 = this.getBdgEoRmksDtlVO1();
                                        Row createRow = bdgEoRmksDtlVO1.createRow();
                                        bdgEoRmksDtlVO1.insertRow(createRow);
                                        createRow.setAttribute("OrgId", filteredRows[j].getAttribute("OrgId"));
                                        createRow.setAttribute("BudgetSet", filteredRows[j].getAttribute("BudgetSet"));
                                        createRow.setAttribute("DocId", filteredRows[j].getAttribute("DocId"));
                                        createRow.setAttribute("EoId", filteredRows[j].getAttribute("EoId"));
                                        createRow.setAttribute("PrdStartDt",
                                                               filteredRows[j].getAttribute("PrdStartDt"));
                                        createRow.setAttribute("PrdEndDt", filteredRows[j].getAttribute("PrdEndDt"));
                                        createRow.setAttribute("FrzRemarks", freezeRemarks);
                                    }
                                }
                            }
                        }
                    }
                }
                if (rsi != null) {
                    rsi.closeRowSetIterator();
                }
            }
            if (chkManagerForCurrentuser()) { ///// Method which will check whether manager is there or not for that user who login

                if (currentRow != null && currentRow.getAttribute("FreezeFlg") != null &&
                    (currentRow.getAttribute("FreezeFlg").toString().equalsIgnoreCase("Y") ||
                     currentRow.getAttribute("FreezeFlg").toString().equalsIgnoreCase("true"))) {
                    currentRow.setAttribute("FreezeFlg", "N");
                    currentRow.setAttribute("BudgetStat", 1);
                }
            }
        }
    }

    /**
     * Method which will chech whether the user have any manager or not
     * If not there then it will return true
     * If manager is there then it will return false
     */
    protected Boolean chkManagerForCurrentuser() {
        ViewObjectImpl codeVO1 = this.getGetEmployeeCodeVO1();
        codeVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        codeVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        codeVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        codeVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
        codeVO1.setNamedWhereClauseParam("BindUserId", this.getUsrId());

        codeVO1.executeQuery();

        Row[] allRowsInRange = codeVO1.getAllRowsInRange();
        if (allRowsInRange.length > 0) {
            Object mgrCode = allRowsInRange[0].getAttribute("MgrCode");
            if (mgrCode != null) {
                return false;
            } else {
                return true;
            }
        }
        return false;
    }


    /**
     * Container's getter for ImmediateSubOrdDtl1.
     * @return ImmediateSubOrdDtl1
     */
    public ViewObjectImpl getImmediateSubOrdDtlVO1() {
        return (ViewObjectImpl) findViewObject("ImmediateSubOrdDtlVO1");
    }


    /**
     * Method which will authorize immediate sub ordinate Document to approve or reject
     */
    public void authorizeDocument(Integer val) {
        Row currentRow = this.getBdgEoBudgetVO1().getCurrentRow();
        if (currentRow != null) {
            if (val != null) {
                currentRow.setAttribute("BudgetStat", val);

                if (val == 3 && currentRow.getAttribute("MgrBudgAmt") != null) {
                    currentRow.setAttribute("MgrBudgAmt", currentRow.getAttribute("BudgAmt"));
                }

                if (currentRow.getAttribute("RemarksTrans") != null) {
                    currentRow.setAttribute("Remarks", currentRow.getAttribute("RemarksTrans"));

                    ViewObjectImpl bdgEoRmksDtlVO1 = this.getBdgEoRmksDtlVO1();
                    Row createRow = bdgEoRmksDtlVO1.createRow();
                    bdgEoRmksDtlVO1.insertRow(createRow);
                    createRow.setAttribute("OrgId", currentRow.getAttribute("OrgId"));
                    createRow.setAttribute("BudgetSet", currentRow.getAttribute("BudgetSet"));
                    createRow.setAttribute("DocId", currentRow.getAttribute("DocId"));
                    createRow.setAttribute("EoId", currentRow.getAttribute("EoId"));
                    createRow.setAttribute("PrdStartDt", currentRow.getAttribute("PrdStartDt"));
                    createRow.setAttribute("PrdEndDt", currentRow.getAttribute("PrdEndDt"));
                    createRow.setAttribute("Remarks", currentRow.getAttribute("RemarksTrans"));
                }
            }
        }
    }

    /**
     * Following method will check the whether other budget set of same employee in same period has been approved before or not
     * If approveed it will make it to draft mode and forwaard the current document
     */
    public void changeStatusFromApprovedToDraft() {
        Row currentRow = this.getBdgEoBudgetVO1().getCurrentRow();
        if (currentRow != null) {
            ViewObjectImpl budgetSetsVO1 = this.getGetSelfEOBudgetSetsVO1();
            budgetSetsVO1.setRangeSize(-1);

            budgetSetsVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            budgetSetsVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            budgetSetsVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            budgetSetsVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
            budgetSetsVO1.setNamedWhereClauseParam("BindEoId", currentRow.getAttribute("EoId"));
            budgetSetsVO1.setNamedWhereClauseParam("BindPrdStDate", currentRow.getAttribute("PrdStartDt"));
            budgetSetsVO1.setNamedWhereClauseParam("BindPrdEndDate", currentRow.getAttribute("PrdEndDt"));
            budgetSetsVO1.executeQuery();

            ViewObjectImpl bdgEoBudgetVO2 = this.getBdgEoBudgetVO2();
            bdgEoBudgetVO2.executeQuery();

            RowQualifier rQ = new RowQualifier(bdgEoBudgetVO2);
            Row[] allRowsInRange = budgetSetsVO1.getAllRowsInRange();
            for (int i = 0; i < allRowsInRange.length; i++) {
                rQ.setWhereClause("CldId ='" + this.getCldIdValue() + "' and SlocId =" + this.getSlocIdValue() +
                                  " and HoOrgId ='" + this.getHoOrgIdValue() + "' and OrgId ='" + this.getOrgIdValue() +
                                  "' and DocId ='" + allRowsInRange[i].getAttribute("DocId") + "' and EoId =" +
                                  allRowsInRange[i].getAttribute("EoId") + " and FyId =" +
                                  allRowsInRange[i].getAttribute("FyId"));
                Row[] filteredRows = bdgEoBudgetVO2.getFilteredRows(rQ);
                for (int j = 0; j < filteredRows.length; j++) {
                    Integer status = (Integer) filteredRows[j].getAttribute("BudgetStat");
                    if (status == 3) {
                        filteredRows[j].setAttribute("BudgetStat", 4);
                    }
                }
            }
        }
    }

    /**
     * Method which will check whether budget set of same employee and same period which is already forwarded state or not
     */
    public Boolean chkBudgetForwardedStatus() {
        Boolean val = true;

        Row currentRow = this.getBdgEoBudgetVO1().getCurrentRow();
        if (currentRow != null) {

            ViewObjectImpl bdgEoBudgetVO2 = this.getBdgEoBudgetVO2();
            bdgEoBudgetVO2.executeQuery();

            RowQualifier rQ = new RowQualifier(bdgEoBudgetVO2);
            rQ.setWhereClause("CldId ='" + this.getCldIdValue() + "' and SlocId =" + this.getSlocIdValue() +
                              " and HoOrgId ='" + this.getHoOrgIdValue() + "' and OrgId ='" + this.getOrgIdValue() +
                              "' and EoId =" + currentRow.getAttribute("EoId") + " and BdgFyId =" +
                              currentRow.getAttribute("BdgFyId") + " and PrdStartDt ='" +
                              currentRow.getAttribute("PrdStartDt") + "' and PrdEndDt ='" +
                              currentRow.getAttribute("PrdEndDt") + "' and BudgetStat =2");

            Row[] filteredRows = bdgEoBudgetVO2.getFilteredRows(rQ);
            System.out.println("^^^^^^^^^^^^^^^^ " + filteredRows.length);
            if (filteredRows.length > 0) {
                val = false;
            }
        }
        System.out.println("chkBudgetForwardedStatus return value is " + val);
        return val;
    }

    /**
     * Container's getter for GetEmployeeCode1.
     * @return GetEmployeeCode1
     */
    public ViewObjectImpl getGetEmployeeCodeVO1() {
        return (ViewObjectImpl) findViewObject("GetEmployeeCodeVO1");
    }

    /**
     * Method which will set Employee Code from user Id and Set global Parameter for Emp Code
     * #{pageFlowScope.P_EMP_CODE}
     */
    public void setEmployeeCodeToGlobalParam() {

        ViewObjectImpl detailVO1 = this.getGetEmployeeCodeVO1();
        detailVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        detailVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        detailVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        detailVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
        detailVO1.setNamedWhereClauseParam("BindUserId", this.getUsrId());
        detailVO1.executeQuery();

        Row[] allRowsInRange = detailVO1.getAllRowsInRange();
        if (allRowsInRange.length > 0) {
            if (allRowsInRange[0].getAttribute("EmpCode") != null) {
                RequestContext.getCurrentInstance().getPageFlowScope().put("P_EMP_CODE",
                                                                           allRowsInRange[0].getAttribute("EmpCode"));
                //System.out.println("Global parameter set to " + allRowsInRange[0].getAttribute("EmpCode"));
            } else {
                FacesMessage msg = new FacesMessage(ADFModelUtils.resolvRsrc("MSG.2051")); //MSG.2051 You are not a valid employee.
                msg.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, msg);
            }
        }
        RequestContext.getCurrentInstance().getPageFlowScope().put("P_AMT_NOTATION", new Number(1));
        RequestContext.getCurrentInstance().getPageFlowScope().put("P_NOTATION_DISP", "N");
        RequestContext.getCurrentInstance().getPageFlowScope().put("DISP_AMT_NOTATION", "Basic");

    }

    /**
     * Container's getter for GetImmediateSubOrd1.
     * @return GetImmediateSubOrd1
     */
    public ViewObjectImpl getGetImmediateSubOrdVO1() {
        return (ViewObjectImpl) findViewObject("GetImmediateSubOrdVO1");
    }

    /**
     * Method which will post data accordingly
     */
    public void postDataAccordingly() {
        this.getDBTransaction().postChanges();
    }

    /***
     * Method which will delete records which belong to documentId and Period Id in item period Detail Table
     * BDG$EO$BUDGET$PROD$PRD$DTL
     */
    public void deleteDistributionDetailPeriodWise() {
        /// Function which will delete data first from BDG$EO$BUDGET$PROD$PRD$DTL table
        /*  p_cld_id varchar2,
        p_sloc_id number,
        p_org_id varchar2,
        p_ho_org_id varchar2,
        p_DOC_ID varchar2,
        p_PRD_START_DT date,
        p_PRD_END_DT date,
        p_CUST_EO_ID number,
        p_ITM_GRP_ID varchar2,
        p_ITM_ID varchar2 */
        ViewObjectImpl bdgEoBudgetProdDtlVO1 = this.getBdgEoBudgetProdDtlVO1();
        Row currentRow = bdgEoBudgetProdDtlVO1.getCurrentRow();
        if (currentRow != null) {
            String retVal = null;
            try {

                retVal = (String) this.callStoredFunction(Types.VARCHAR, "FN_DEL_PROD_PRD(?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                          this.getCldIdValue(), this.getSlocIdValue(),
                                                          this.getOrgIdValue(), this.getHoOrgIdValue(),
                                                          currentRow.getAttribute("DocId"),
                                                          currentRow.getAttribute("PrdStartDt"),
                                                          currentRow.getAttribute("PrdEndDt"),
                                                          currentRow.getAttribute("CustEoId"),
                                                          currentRow.getAttribute("ItmGrpId"),
                                                          currentRow.getAttribute("ItmId"),
                                                          currentRow.getAttribute("EoId"),
                                                          currentRow.getAttribute("Region")
                });
            } catch (Exception e) {
                e.printStackTrace();
                System.out.println("Error in calling function FN_DEL_PROD_PRD in AMIMPL " + e.getMessage());
            }
            System.out.println("Return value is --->" + retVal);
            this.getBdgEoBudgetProdPrdDtlVO1().executeQuery();
        }
    }

    /**
     * Method to process distribution method into equal, fixed, ascending, descending
     * daily, weekly, quarterly, halfyearly
     */
    public void distributeItemDetailPeriodWise() {
        String val = null;

        ViewObjectImpl bdgEoBudgetProdDtlVO1 = this.getBdgEoBudgetProdDtlVO1();
        Row currentRow = bdgEoBudgetProdDtlVO1.getCurrentRow();
        if (currentRow != null && currentRow.getAttribute("ItmAmtSp") != null) {
            try {
                /// Function which will insert data into BDG$EO$BUDGET$PROD$PRD$DTL table
                /* p_cld_id varchar2,
                p_sloc_id number,
                p_org_id varchar2,
                p_ho_org_id varchar2,
                p_DOC_ID varchar2,
                p_PRD_START_DT date,
                p_PRD_END_DT date,
                p_CUST_EO_ID number,
                p_ITM_GRP_ID varchar2,
                p_ITM_ID varchar2,
                p_ITM_UOM varchar2,
                p_ITM_PRICE number,
                p_ITM_QTY number,
                p_dist_prd_basis number,--1 for daily,2 for weekly,3 for quarterly,4 halfyearly,5 monthly
                p_usr_id number,
                p_amt number,
                p_dist_basis number,
                p_eo_id Number,
                p_Region varchar2    )--1 for equal*/

                this.getBdgEoBudgetProdPrdDtlVO1().clearCache();
                this.getBdgEoBudgetProdPrdDtlVO1().executeQuery();

                deleteDistributionDetailPeriodWise();

                this.getBdgEoBudgetProdPrdDtlVO1().executeQuery();

                //this.getDBTransaction().postChanges();

                val =
                    (String) this.callStoredFunction(Types.VARCHAR,
                                                     "FN_INS_PROD_PRD(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                     this.getCldIdValue(), this.getSlocIdValue(), this.getOrgIdValue(),
                                                     this.getHoOrgIdValue(), currentRow.getAttribute("DocId"),
                                                     currentRow.getAttribute("PrdStartDt"),
                                                     currentRow.getAttribute("PrdEndDt"),
                                                     currentRow.getAttribute("CustEoId"),
                                                     currentRow.getAttribute("ItmGrpId"),
                                                     currentRow.getAttribute("ItmId"),
                                                     currentRow.getAttribute("ItmUom"),
                                                     currentRow.getAttribute("ItmPrice"),
                                                     currentRow.getAttribute("ItmQty"),
                                                     currentRow.getAttribute("DistbPrdBasis"), this.getUsrId(),
                                                     currentRow.getAttribute("ItmAmtSp"),
                                                     currentRow.getAttribute("DistbMethd"),
                                                     currentRow.getAttribute("EoId"), currentRow.getAttribute("Region"),
                                                     currentRow.getAttribute("CurrConvRate")
                });
                System.out.println("Return value is <<---->>>>> " + val);
            } catch (Exception e) {
                e.printStackTrace();
                System.out.println("ERROR IN CALLING FUNCTION fn_ins_prod_prd at BdgEoBudgetAmImpl :" + e.getMessage());
            }
            this.getBdgEoBudgetProdPrdDtlVO1().executeQuery();
        } else {
            FacesMessage msg = new FacesMessage(ADFModelUtils.resolvRsrc("MSG.2056"));//Without Item amount you cannot distribute the amount
            msg.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, msg);
        }

        insertCostCenterAmtAfterDistrib();
    }


    /**
     * Method to process distribution method into equal, fixed, ascending, descending
     * daily, weekly, quarterly, halfyearly
     */
    public void distributeBudgetAmtPeriodWise() {
        String val = null;

        RowSetIterator rsi = this.getBdgEoBudgetProdDtlVO1().createRowSetIterator(null);

        if (rsi.getAllRowsInRange().length > 0) {
            ViewObjectImpl bdgEoBudgetVO1 = this.getBdgEoBudgetVO1();
            Row currentRow = bdgEoBudgetVO1.getCurrentRow();
            if (currentRow != null && currentRow.getAttribute("BudgAmt") != null) {
                try {
                    /// Function which will insert data into BDG$EO$BUDGET$PROD$PRD$DTL table
                    /* p_cld_id varchar2,
                p_sloc_id number,
                p_org_id varchar2,
                p_ho_org_id varchar2,
                p_DOC_ID varchar2,
                p_PRD_START_DT date,
                p_PRD_END_DT date,
                p_EO_ID number,
                p_dist_prd_basis number,--1 for daily,2 for weekly,3 for quarterly,4 halfyearly,5 monthly
                p_usr_id number,
                p_BUDG_AMT number,
                p_dist_basis number)--1 for equal
                */
                    this.getDBTransaction().postChanges();

                    this.getBdgEoBudgetPrdDtlVO1().clearCache();
                    this.getBdgEoBudgetPrdDtlVO1().executeQuery();

                    deleteBudgetAmtPeriodWise();

                    this.getBdgEoBudgetPrdDtlVO1().executeQuery();

                    //this.getDBTransaction().postChanges();

                    val = (String) this.callStoredFunction(Types.VARCHAR, "FN_INS_PRD(?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                           this.getCldIdValue(), this.getSlocIdValue(),
                                                           this.getOrgIdValue(), this.getHoOrgIdValue(),
                                                           currentRow.getAttribute("DocId"),
                                                           currentRow.getAttribute("PrdStartDt"),
                                                           currentRow.getAttribute("PrdEndDt"),
                                                           currentRow.getAttribute("EoId"),
                                                           currentRow.getAttribute("DistbPrdBasis"), this.getUsrId(),
                                                           currentRow.getAttribute("BudgAmt"), 1
                    });
                    System.out.println("Return value is " + val);

                    FacesMessage msg = new FacesMessage(ADFModelUtils.resolvRsrc("MSG.2057")); //MSG.2057 Target distributed accordingly
                    msg.setSeverity(FacesMessage.SEVERITY_INFO);
                    FacesContext.getCurrentInstance().addMessage(null, msg);
                } catch (Exception e) {
                    e.printStackTrace();
                    System.out.println("ERROR IN CALLING FUNCTION FN_INS_PRD at BdgEoBudgetAmImpl :" + e.getMessage());
                }
                this.getBdgEoBudgetPrdDtlVO1().executeQuery();
            } else {
                FacesMessage msg = new FacesMessage(ADFModelUtils.resolvRsrc("MSG.2058")); //MSG.2058 Without Target amount you cannot distribute the amount
                msg.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, msg);
            }
        } else {
            FacesMessage msg = new FacesMessage(ADFModelUtils.resolvRsrc("MSG.2007")); // MSG.2007 Please add atleast one item.
            msg.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, msg);
        }
    }

    /***
     * Method which will delete records which belong to documentId and Period Id in item period Detail Table
     * BDG$EO$BUDGET$PRD$DTL
     */
    protected void deleteBudgetAmtPeriodWise() {
        /// Function which will delete data first from BDG$EO$BUDGET$PROD$PRD$DTL table
        /*  p_cld_id varchar2,
        p_sloc_id number,
        p_org_id varchar2,
        p_ho_org_id varchar2,
        p_DOC_ID varchar2,
        p_PRD_START_DT date,
        p_PRD_END_DT date,
        p_EO_ID number
         */
        ViewObjectImpl bdgEoBudgetVO1 = this.getBdgEoBudgetVO1();
        Row currentRow = bdgEoBudgetVO1.getCurrentRow();
        if (currentRow != null) {
            String retVal = null;
            try {

                retVal = (String) this.callStoredFunction(Types.VARCHAR, "FN_DEL_PRD(?,?,?,?,?,?,?,?)", new Object[] {
                                                          this.getCldIdValue(), this.getSlocIdValue(),
                                                          this.getOrgIdValue(), this.getHoOrgIdValue(),
                                                          currentRow.getAttribute("DocId"),
                                                          currentRow.getAttribute("PrdStartDt"),
                                                          currentRow.getAttribute("PrdEndDt"),
                                                          currentRow.getAttribute("EoId")
                });
            } catch (Exception e) {
                e.printStackTrace();
                System.out.println("Error in calling function FN_DEL_PRD in AMIMPL " + e.getMessage());
            }
            System.out.println("Return value is --->" + retVal);
            this.getBdgEoBudgetPrdDtlVO1().executeQuery();
        }
    }


    /**
     * Container's getter for BdgEoBudgetProdPrdDtl1.
     * @return BdgEoBudgetProdPrdDtl1
     */
    public ViewObjectImpl getBdgEoBudgetProdPrdDtlVO1() {
        return (ViewObjectImpl) findViewObject("BdgEoBudgetProdPrdDtlVO1");
    }

    /**
     * Container's getter for BdgEoBudgetProdDtlToEoBudgetProdPrdDtlVL1.
     * @return BdgEoBudgetProdDtlToEoBudgetProdPrdDtlVL1
     */
    public ViewLinkImpl getBdgEoBudgetProdDtlToEoBudgetProdPrdDtlVL1() {
        return (ViewLinkImpl) findViewLink("BdgEoBudgetProdDtlToEoBudgetProdPrdDtlVL1");
    }

    /**
     * Method which will set BdgEoBudgetProdDtlVo
     * Item Grp Id to "0" if it is null
     * Item Id to "0" if it is null
     * CustEoId to 0 if it is null
     */
    public void setAttributeValues() {
        ViewObjectImpl bdgEoBudgetProdDtlVO1 = this.getBdgEoBudgetProdDtlVO1();
        Row currentRow = bdgEoBudgetProdDtlVO1.getCurrentRow();
        if (currentRow != null) {
            if (currentRow.getAttribute("CustEoId") == null) {
                currentRow.setAttribute("CustEoId", 0);
            }
            if (currentRow.getAttribute("ItmGrpId") == null) {
                currentRow.setAttribute("ItmGrpId", "0");
            }
            if (currentRow.getAttribute("ItmId") == null) {
                currentRow.setAttribute("ItmId", "0");
            }
        }
    }

    /**
     * Container's getter for GetSelfEOBudgetSets1.
     * @return GetSelfEOBudgetSets1
     */
    public ViewObjectImpl getGetSelfEOBudgetSetsVO1() {
        return (ViewObjectImpl) findViewObject("GetSelfEOBudgetSetsVO1");
    }


    /**
     * Container's getter for LOVBdgIdAutoSuggestion1.
     * @return LOVBdgIdAutoSuggestion1
     */
    public LOVBdgIdAutoSuggestionVOImpl getLOVBdgIdAutoSuggestionVO1() {
        return (LOVBdgIdAutoSuggestionVOImpl) findViewObject("LOVBdgIdAutoSuggestionVO1");
    }

    /**
     * Container's getter for BdgEoBudgetPrdDtl1.
     * @return BdgEoBudgetPrdDtl1
     */
    public ViewObjectImpl getBdgEoBudgetPrdDtlVO1() {
        return (ViewObjectImpl) findViewObject("BdgEoBudgetPrdDtlVO1");
    }

    /**
     * Container's getter for BdgEoBudgetToBdgEoBudgetPrdDtlVL1.
     * @return BdgEoBudgetToBdgEoBudgetPrdDtlVL1
     */
    public ViewLinkImpl getBdgEoBudgetToBdgEoBudgetPrdDtlVL1() {
        return (ViewLinkImpl) findViewLink("BdgEoBudgetToBdgEoBudgetPrdDtlVL1");
    }


    /**
     * Container's getter for BdgEoRmksDtl1.
     * @return BdgEoRmksDtl1
     */
    public ViewObjectImpl getBdgEoRmksDtlVO1() {
        return (ViewObjectImpl) findViewObject("BdgEoRmksDtlVO1");
    }

    /**
     * Method will show history of remarks on popup and will be called according on Fetch Listener
     */
    public void showRemarksHistory(String docId) {
        if (docId != null) {
            ViewObjectImpl bdgEoRmksDtlVO1 = this.getBdgEoRmksDtlVO1();
            ViewCriteria criteria = bdgEoRmksDtlVO1.getViewCriteria("BdgEoRmksDtlVOCriteria");
            bdgEoRmksDtlVO1.appendViewCriteria(criteria);
            bdgEoRmksDtlVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            bdgEoRmksDtlVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            bdgEoRmksDtlVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            bdgEoRmksDtlVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
            bdgEoRmksDtlVO1.setNamedWhereClauseParam("BindDocId", docId);
            bdgEoRmksDtlVO1.executeQuery();
        }
    }

    /**
     * Container's getter for GetEmpPreviousBdgAmt1.
     * @return GetEmpPreviousBdgAmt1
     */
    public ViewObjectImpl getGetEmpPreviousBdgAmtVO1() {
        return (ViewObjectImpl) findViewObject("GetEmpPreviousBdgAmtVO1");
    }

    /**
     * Container's getter for ImmediateEmpDetails1.
     * @return ImmediateEmpDetails1
     */
    public ViewObjectImpl getImmediateEmpDetailsVO2() {
        return (ViewObjectImpl) findViewObject("ImmediateEmpDetailsVO2");
    }

    /**
     * Method which will iterate rows and insert immediate subordinate item details into current user item details
     */
    public void insertImmediateSubItemDetails() {
        ViewObjectImpl bdgEoBudgetVO1 = this.getBdgEoBudgetVO1();
        Row currentRow = bdgEoBudgetVO1.getCurrentRow();
        if (currentRow != null) {
            Object docId = currentRow.getAttribute("DocId");
            Integer count = 0;
            String retVal = null;

            //ViewObjectImpl detailsVO2 = this.getImmediateEmpDetailsVO2();

            ViewObjectImpl detailsVO2 = this.getEmpImmediateDtlVO1();

            RowSetIterator rsi = detailsVO2.createRowSetIterator(null);
            if (rsi.getAllRowsInRange().length > 0) {
                while (rsi.hasNext()) {
                    Row next = rsi.next();
                    Object cbValue = next.getAttribute("SelectCBTrans");
                    System.out.println("Cb Value is " + cbValue);
                    if (cbValue != null &&
                        (cbValue.toString().equalsIgnoreCase("Y") || cbValue.toString().equalsIgnoreCase("true"))) {

                        /*  P_CLD_ID    VARCHAR2,
                            P_SLOC_ID   NUMBER,
                            P_HO_ORG_ID VARCHAR2,
                            P_ORG_ID    VARCHAR2,
                            P_SRC_DOC_ID  VARCHAR2,
                            P_ITM_DOC_ID    VARCHAR2,
                            P_ITM_EO_ID     NUMBER,
                            P_ITM_PRD_ST_DT DATE,
                            P_ITM_PRD_END_DT DATE */

                        try {
                            retVal =
                                (String) this.callStoredFunction(Types.VARCHAR,
                                                                 "FN_INS_SUB_PROD_DTL(?,?,?,?,?,?,?,?,?)", new Object[] {
                                                                 this.getCldIdValue(), this.getSlocIdValue(),
                                                                 this.getHoOrgIdValue(), this.getOrgIdValue(), docId,
                                                                 next.getAttribute("DocId"), next.getAttribute("EoId"),
                                                                 next.getAttribute("PrdStartDt"),
                                                                 next.getAttribute("PrdEndDt"),
                            });
                        } catch (Exception e) {
                            e.printStackTrace();
                            System.out.println("Error in calling function FN_INS_SUB_PROD_DTL in AMIMPL " +
                                               e.getMessage());
                        }
                        if (retVal != null && retVal.equalsIgnoreCase("N")) {
                            count++;
                        }
                        System.out.println("Return value is " + retVal);
                    }
                }
                if (rsi != null) {
                    rsi.closeRowSetIterator();
                }
                if (count > 0) {
                    FacesMessage msg = new FacesMessage(ADFModelUtils.resolvRsrc("MSG.2059")); // MSG.2059 Unable to insert data into Item detail.
                    msg.setSeverity(FacesMessage.SEVERITY_ERROR);
                    FacesContext.getCurrentInstance().addMessage(null, msg);
                } else {

                    FacesMessage msg = new FacesMessage(ADFModelUtils.resolvRsrc("MSG.613")); //MSG.613  Data inserted successfully.
                    msg.setSeverity(FacesMessage.SEVERITY_INFO);
                    FacesContext.getCurrentInstance().addMessage(null, msg);
                }

                this.getBdgEoBudgetProdDtlVO1().executeQuery();
                updateBdgAmtValue();

                copyItemDtlToBdgDtl();
            }
        }
    }

    /**
     * Method which will set EmpImmediateDtlVO1 Bind Variables and will be caalled from Fetch Listener of PopUp p6
     */
    public void setImmediateEmpDtlBindVar() {
        ViewObjectImpl bdgEoBudgetVO1 = this.getBdgEoBudgetVO1();
        Row currentRow = bdgEoBudgetVO1.getCurrentRow();
        if (currentRow != null) {
            ViewObjectImpl detailsVO2 = this.getEmpImmediateDtlVO1();
            detailsVO2.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            detailsVO2.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            detailsVO2.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            detailsVO2.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
            //detailsVO2.setNamedWhereClauseParam("BindBdgGrpId", currentRow.getAttribute("BdgGrpId"));
            detailsVO2.setNamedWhereClauseParam("BindBdgFyId", currentRow.getAttribute("BdgFyId"));
            detailsVO2.setNamedWhereClauseParam("BindStartDt", currentRow.getAttribute("PrdStartDt"));
            detailsVO2.setNamedWhereClauseParam("BindEndDt", currentRow.getAttribute("PrdEndDt"));
            detailsVO2.setNamedWhereClauseParam("BindUserId", this.getUsrId());

            detailsVO2.executeQuery();
        }
    }

    /**
     * Method which will change item quantity and amount of BDG$EO$BUDGET$PROD$DTL based on user entry in  BDG$EO$BUDGET$PROD$PRD$DTL
     */
    public void changeItemDistbQtyAndAmount(Number qty) {
        if (qty != null) {
            ViewObjectImpl bdgEoBudgetProdDtlVO1 = this.getBdgEoBudgetProdDtlVO1();
            Row productDtlRow = bdgEoBudgetProdDtlVO1.getCurrentRow();
            if (productDtlRow != null) {
                Number amt = new Number(0);

                ViewObjectImpl bdgEoBudgetProdPrdDtlVO1 = this.getBdgEoBudgetProdPrdDtlVO1();
                Row periodDtlRow = bdgEoBudgetProdPrdDtlVO1.getCurrentRow();

                if (periodDtlRow != null) {
                    Number periodItmPrice = (Number) periodDtlRow.getAttribute("ItmPrice");

                    amt = periodItmPrice.multiply(qty);

                    periodDtlRow.setAttribute("ItmAmtSp", amt);
                    periodDtlRow.setAttribute("ItmAmtBs", amt);
                }
            }
        }
    }

    /**
     * Method which will update the current row vallues based on user entry in Item Distribution
     */
    public void updateProductDtlValue() {
        ViewObjectImpl bdgEoBudgetProdDtlVO1 = this.getBdgEoBudgetProdDtlVO1();
        Row productDtlRow = bdgEoBudgetProdDtlVO1.getCurrentRow();
        if (productDtlRow != null) {
            ViewObjectImpl bdgEoBudgetProdPrdDtlVO1 = this.getBdgEoBudgetProdPrdDtlVO1();
            RowSetIterator periodDtlRsi = bdgEoBudgetProdPrdDtlVO1.createRowSetIterator(null);
            Number periodQtyTotal = new Number(0);
            Number periodAmtTotal = new Number(0);
            Number periodQty = new Number(0);
            Number periodAmt = new Number(0);
            while (periodDtlRsi.hasNext()) {
                Row next = periodDtlRsi.next();
                periodQty = (Number) next.getAttribute("ItmQty");
                if (periodQty != null) {
                    periodQtyTotal = periodQtyTotal.add(periodQty);
                }
                periodAmt = (Number) next.getAttribute("ItmAmtSp");
                if (periodAmt != null) {
                    periodAmtTotal = periodAmtTotal.add(periodAmt);
                }
            }
            if (periodDtlRsi != null) {
                periodDtlRsi.closeRowSetIterator();
            }

            if (productDtlRow.getAttribute("ItmQty") != null) {
                productDtlRow.setAttribute("ItmQty", periodQtyTotal);
            }

            productDtlRow.setAttribute("ItmAmtSp", periodAmtTotal);
            productDtlRow.setAttribute("ItmAmtBs",
                                       periodAmtTotal.multiply((Number) productDtlRow.getAttribute("CurrConvRate")));
        }
    }

    /**
     * Method which will change amount of BDG$EO$BUDGET$PROD$DTL based on user entry in  BDG$EO$BUDGET$PROD$PRD$DTL
     */
    public void changeItemDistAmt(Number amt) {
        if (amt != null) {
            ViewObjectImpl bdgEoBudgetProdDtlVO1 = this.getBdgEoBudgetProdDtlVO1();
            Row productDtlRow = bdgEoBudgetProdDtlVO1.getCurrentRow();
            if (productDtlRow != null) {

                ViewObjectImpl bdgEoBudgetProdPrdDtlVO1 = this.getBdgEoBudgetProdPrdDtlVO1();
                Row currentRow = bdgEoBudgetProdPrdDtlVO1.getCurrentRow();
                /// Method will set Item Amount values when user change or enter amount manually in distribution table
                if (currentRow != null) {
                    currentRow.setAttribute("ItmAmtSp", amt);
                    currentRow.setAttribute("ItmAmtBs", amt);
                }

                RowSetIterator periodDtlRsi = bdgEoBudgetProdPrdDtlVO1.createRowSetIterator(null);
                Number periodAmtTotal = new Number(0);
                Number periodAmt = new Number(0);
                while (periodDtlRsi.hasNext()) {
                    Row next = periodDtlRsi.next();

                    periodAmt = (Number) next.getAttribute("ItmAmtSp");
                    if (periodAmt != null) {
                        periodAmtTotal = periodAmtTotal.add(periodAmt);
                    }
                }
                if (periodDtlRsi != null) {
                    periodDtlRsi.closeRowSetIterator();
                }
                productDtlRow.setAttribute("ItmAmtSp", periodAmtTotal);
                productDtlRow.setAttribute("ItmAmtBs", periodAmtTotal);
            }
        }
        //this.getBdgEoBudgetProdDtlVO1().executeQuery();
        //this.getBdgEoBudgetVO1().executeQuery();
    }

    /**
     * Container's getter for LOVLocationNm1.
     * @return LOVLocationNm1
     */
    public ViewObjectImpl getLOVLocationNmVO1() {
        return (ViewObjectImpl) findViewObject("LOVLocationNmVO1");
    }

    /**
     * Method which will calculate and display amount based on percentage entered by user
     */
    public void calculateAmtBasedOnPerccent(Number percentage) {
        ViewObjectImpl bdgEoBudgetVO1 = this.getBdgEoBudgetVO1();
        Row bdgEoBudgetRow = bdgEoBudgetVO1.getCurrentRow();
        if (bdgEoBudgetRow != null) {
            Number bdgAmt = (Number) bdgEoBudgetRow.getAttribute("BudgAmt");

            ViewObjectImpl bdgEoBudgetPrdDtlVO1 = this.getBdgEoBudgetPrdDtlVO1();
            Row bdgEoBudgetPrdDtlRow = bdgEoBudgetPrdDtlVO1.getCurrentRow();
            if (bdgEoBudgetPrdDtlRow != null) {

                //percentage = percentage.divide(100);
                bdgAmt = bdgAmt.multiply(percentage);

                bdgEoBudgetPrdDtlRow.setAttribute("BudgAmtSp", bdgAmt);
                bdgEoBudgetPrdDtlRow.setAttribute("BudgAmtBs", bdgAmt);
            }
        }
    }

    /**
     * Check whether distributed Budget Amount is same as Original Budget Amount
     */
    public Integer chkDistributionBdgAmt() {
        Integer val = 0;
        Number originalBdgAmt = new Number(0);
        Number disbBdgAmt = new Number(0);

        ViewObjectImpl bdgEoBudgetPrdDtlVO1 = this.getBdgEoBudgetPrdDtlVO1();
        Row[] allRowsInRange = bdgEoBudgetPrdDtlVO1.getAllRowsInRange();
        if (allRowsInRange.length > 0) {
            RowSetIterator rsi = bdgEoBudgetPrdDtlVO1.createRowSetIterator(null);
            while (rsi.hasNext()) {
                Row next = rsi.next();
                disbBdgAmt = disbBdgAmt.add((Number) next.getAttribute("BudgAmtSp"));
            }
            if (rsi != null) {
                rsi.closeRowSetIterator();
            }
            Row currentRow = this.getBdgEoBudgetVO1().getCurrentRow();
            if (currentRow != null) {
                originalBdgAmt = (Number) currentRow.getAttribute("BudgAmt");
            }
            disbBdgAmt = (Number) disbBdgAmt.round(0);
            originalBdgAmt = (Number) originalBdgAmt.round(0);

            System.out.println(disbBdgAmt + " amt difference is " + originalBdgAmt);
            if (disbBdgAmt.compareTo(originalBdgAmt) > 0) {
                val = 1; // Distribution Budget amount is greater than Actual budget amount
            } else if (disbBdgAmt.compareTo(originalBdgAmt) < 0) {
                val = -1; //Distribution Budget amount is less than Actual budget amount
            } else if (disbBdgAmt.compareTo(originalBdgAmt) == 0) {
                val = 0; // Distribution Budget amount is equal to Actual budget amount
            }
        }
        return val;
    }

    /**
     *Method which will convert date from string format
     * @param str
     * @return
     */
    private java.util.Date getConvertDate(String str) {
        java.util.Date d = null;
        SimpleDateFormat format = new SimpleDateFormat("dd-MMM-yyyy");
        try {
            d = format.parse(str);
            System.out.println("Date parsed=" + d);
        } catch (Exception e) {
            System.out.println("Error during parse");
            e.printStackTrace();
        }
        return d;
    }


    /**
     * Container's getter for GetCurrentFYDate1.
     * @return GetCurrentFYDate1
     */
    public ViewObjectImpl getGetCurrentFYDateVO1() {
        return (ViewObjectImpl) findViewObject("GetCurrentFYDateVO1");
    }

    /**
     * Method which will insert data from exceel document to tables
     */

    /**
     * Method which will insert data from exceel document to tables -amimpl
     */
    public void insertIntoTableFromExcel(List list) {
        if (list != null) {
            String tableName = this.resolvEl("#{pageFlowScope.P_TAB_NAME}");
            Object el = this.resolvElO("#{pageFlowScope.IMP_DATA_LIST}");
            System.out.println("El is: " + el);
            if (el != null) {
                System.out.println("el is not null");
                List data = (List) el;
                ListIterator<List> iterator = data.listIterator();
                int i = 1;
                if (tableName != null && tableName.equalsIgnoreCase("BDG$EO$BUDGET$PRD$DTL")) {
                    while (iterator.hasNext()) {
                        System.out.println("Itr count=" + i);
                        List row = (List) iterator.next();
                        System.out.println("Length of row=" + row.size());
                        Row newRow = this.getBdgEoBudgetPrdDtlVO1().createRow();
                        System.out.println("value at index 0=" + row.get(0));
                        newRow.setAttribute("CldId", row.get(0));
                        System.out.println("value at index 1=" + row.get(1));
                        newRow.setAttribute("SlocId", row.get(1));
                        System.out.println("value at index 2=" + row.get(2));
                        newRow.setAttribute("OrgId", row.get(2));
                        System.out.println("value at index 3=" + row.get(3));
                        newRow.setAttribute("HoOrgId", row.get(3));
                        System.out.println("value at index 4=" + row.get(4));
                        newRow.setAttribute("PrdStartDt", getConvertDate((String) row.get(4)));
                        System.out.println("value at index 5=" + row.get(5));
                        newRow.setAttribute("PrdEndDt", getConvertDate((String) row.get(5)));
                        System.out.println("value at index 6=" + row.get(6));
                        newRow.setAttribute("PrdDtlStartDt", getConvertDate((String) row.get(6)));
                        System.out.println("value at index 7=" + row.get(7));
                        newRow.setAttribute("PrdDtlEndDt", getConvertDate((String) row.get(7)));
                        System.out.println("value at index 8=" + row.get(8));
                        newRow.setAttribute("DocId", row.get(8));
                        System.out.println("value at index 9=" + row.get(9));
                        newRow.setAttribute("EoId", row.get(9));
                        System.out.println("value at index 10=" + row.get(10));
                        newRow.setAttribute("BudgAmtSp", row.get(10));
                        System.out.println("value at index 11=" + row.get(11));
                        newRow.setAttribute("BudgAmtBs", row.get(11));
                        System.out.println("value at index 12=" + row.get(12));
                        newRow.setAttribute("UsrIdCreate", row.get(12));
                        System.out.println("value at index 13=" + row.get(13));
                        newRow.setAttribute("UsrIdCreateDt", row.get(13));
                        System.out.println("value at index 14=" + row.get(14));
                        newRow.setAttribute("UsrIdMod", row.get(14));
                        System.out.println("value at index 15=" + row.get(15));
                        newRow.setAttribute("UsrIdModDt", row.get(15));

                        i++;
                    }
                } else if (tableName != null && tableName.equalsIgnoreCase("BDG$EO$BUDGET$PROD$DTL")) {
                    while (iterator.hasNext()) {
                        System.out.println("Itr count=" + i);
                        List row = (List) iterator.next();
                        System.out.println("Length of row=" + row.size());
                        Row newRow = this.getBdgEoBudgetProdDtlVO1().createRow();
                        System.out.println("value at index 0=" + row.get(0));
                        newRow.setAttribute("CldId", row.get(0));
                        System.out.println("value at index 1=" + row.get(1));
                        newRow.setAttribute("SlocId", row.get(1));
                        System.out.println("value at index 2=" + row.get(2));
                        newRow.setAttribute("OrgId", row.get(2));
                        System.out.println("value at index 3=" + row.get(3));
                        newRow.setAttribute("HoOrgId", row.get(3));
                        System.out.println("value at index 4=" + row.get(4));
                        newRow.setAttribute("BdgFyId", row.get(4));
                        System.out.println("value at index 5=" + row.get(5));
                        newRow.setAttribute("BdgGrpId", row.get(5));
                        System.out.println("value at index 6=" + row.get(6));
                        newRow.setAttribute("DocId", row.get(6));
                        System.out.println("value at index 7=" + row.get(7));
                        newRow.setAttribute("CurrIdSp", row.get(7));
                        System.out.println("value at index 8=" + row.get(8));
                        newRow.setAttribute("CurrConvRate", row.get(8));
                        System.out.println("value at index 9=" + row.get(9));
                        newRow.setAttribute("PrdStartDt", getConvertDate((String) row.get(9)));
                        System.out.println("value at index 10=" + row.get(10));
                        newRow.setAttribute("PrdEndDt", getConvertDate((String) row.get(10)));
                        System.out.println("value at index 11=" + row.get(11));
                        newRow.setAttribute("CustEoId", row.get(11));
                        System.out.println("value at index 12=" + row.get(12));
                        newRow.setAttribute("ItmGrpId", row.get(12));
                        System.out.println("value at index 13=" + row.get(13));
                        newRow.setAttribute("ItmId", row.get(13));
                        System.out.println("value at index 14=" + row.get(14));
                        newRow.setAttribute("ItmUom", row.get(14));
                        System.out.println("value at index 15=" + row.get(15));
                        newRow.setAttribute("ItmPrice", row.get(15));
                        System.out.println("value at index 16=" + row.get(16));
                        newRow.setAttribute("ItmQty", row.get(16));
                        System.out.println("value at index 17=" + row.get(17));
                        newRow.setAttribute("ItmAmtSp", row.get(17));
                        System.out.println("value at index 18=" + row.get(18));
                        newRow.setAttribute("ItmAmtBs", row.get(18));
                        System.out.println("value at index 19=" + row.get(19));
                        newRow.setAttribute("UsrIdCreate", row.get(19));
                        System.out.println("value at index 20=" + row.get(20));
                        newRow.setAttribute("UsrIdCreateDt", row.get(20));
                        System.out.println("value at index 21=" + row.get(21));
                        newRow.setAttribute("UsrIdMod", row.get(21));
                        System.out.println("value at index 22=" + row.get(22));
                        newRow.setAttribute("UsrIdModDt", row.get(22));
                        System.out.println("value at index 23=" + row.get(23));
                        newRow.setAttribute("ItmSelType", row.get(23));
                        System.out.println("value at index 24=" + row.get(24));
                        newRow.setAttribute("EoId", row.get(24));
                        System.out.println("value at index 25=" + row.get(25));
                        newRow.setAttribute("DistbMethd", row.get(25));
                        System.out.println("value at index 26=" + row.get(26));
                        newRow.setAttribute("DistbUnit", row.get(26));
                        System.out.println("value at index 27=" + row.get(27));
                        newRow.setAttribute("DistbPrdBasis", row.get(27));
                        System.out.println("value at index 28=" + row.get(28));
                        newRow.setAttribute("Region", row.get(28));

                        this.getBdgEoBudgetProdDtlVO1().insertRow(newRow);
                        this.getBdgEoBudgetProdDtlVO1().setCurrentRow(newRow);
                        this.distributeItemDetailPeriodWise();
                        i++;
                    }
                } else if (tableName != null && tableName.equalsIgnoreCase("BDG$EO$BUDGET$PROD$PRD$DTL")) {
                    while (iterator.hasNext()) {
                        System.out.println("Itr count=" + i);
                        List row = (List) iterator.next();
                        System.out.println("Length of row=" + row.size());
                        Row newRow = this.getBdgEoBudgetProdPrdDtlVO1().createRow();
                        System.out.println("value at index 0=" + row.get(0));
                        newRow.setAttribute("CldId", row.get(0));
                        System.out.println("value at index 1=" + row.get(1));
                        newRow.setAttribute("SlocId", row.get(1));
                        System.out.println("value at index 2=" + row.get(2));
                        newRow.setAttribute("OrgId", row.get(2));
                        System.out.println("value at index 3=" + row.get(3));
                        newRow.setAttribute("HoOrgId", row.get(3));
                        System.out.println("value at index 4=" + row.get(4));
                        newRow.setAttribute("DocId", row.get(4));
                        System.out.println("value at index 5=" + row.get(5));
                        newRow.setAttribute("PrdStartDt", getConvertDate((String) row.get(5)));
                        System.out.println("value at index 6=" + row.get(6));
                        newRow.setAttribute("PrdEndDt", getConvertDate((String) row.get(6)));
                        System.out.println("value at index 7=" + row.get(7));
                        newRow.setAttribute("PrdDtlStartDt", getConvertDate((String) row.get(7)));
                        System.out.println("value at index 8=" + row.get(8));
                        newRow.setAttribute("PrdDtlEndDt", getConvertDate((String) row.get(8)));
                        System.out.println("value at index 9=" + row.get(9));
                        newRow.setAttribute("CustEoId", row.get(9));
                        System.out.println("value at index 10=" + row.get(10));
                        newRow.setAttribute("ItmGrpId", row.get(10));
                        System.out.println("value at index 11=" + row.get(11));
                        newRow.setAttribute("ItmId", row.get(11));
                        System.out.println("value at index 12=" + row.get(12));
                        newRow.setAttribute("ItmUom", row.get(12));
                        System.out.println("value at index 13=" + row.get(13));
                        newRow.setAttribute("ItmPrice", row.get(13));
                        System.out.println("value at index 14=" + row.get(14));
                        newRow.setAttribute("ItmQty", row.get(14));
                        System.out.println("value at index 15=" + row.get(15));
                        newRow.setAttribute("ItmAmtSp", row.get(15));
                        System.out.println("value at index 16=" + row.get(16));
                        newRow.setAttribute("ItmAmtBs", row.get(16));
                        System.out.println("value at index 17=" + row.get(17));
                        newRow.setAttribute("UsrIdCreate", row.get(17));
                        System.out.println("value at index 18=" + row.get(18));
                        newRow.setAttribute("UsrIdCreateDt", row.get(18));
                        System.out.println("value at index 19=" + row.get(19));
                        newRow.setAttribute("UsrIdMod", row.get(19));
                        System.out.println("value at index 20=" + row.get(20));
                        newRow.setAttribute("UsrIdModDt", row.get(20));
                        System.out.println("value at index 21=" + row.get(21));
                        newRow.setAttribute("EoId", row.get(21));
                        System.out.println("value at index 22=" + row.get(22));
                        newRow.setAttribute("Region", row.get(22));
                        i++;
                    }
                }
            }
        }
        // this.getDBTransaction().commit();

        this.getBdgEoBudgetPrdDtlVO1().executeQuery();
        this.getBdgEoBudgetProdDtlVO1().executeQuery();
        this.getBdgEoBudgetProdPrdDtlVO1().executeQuery();
    }

    /**
     * Method which will update data into table from excel
     */
    public void updateDataFromExcel() {
        Object updatedRows = resolvElO("#{pageFlowScope.UPDATED_ROWS}");
        System.out.println("row :" + updatedRows);
        if (updatedRows != null) {
            System.out.println("rows are not null");
            //   List<UpdatedData> list = (List<UpdatedData>) updatedRows;
            List list = (List) updatedRows;
            Iterator<UpdatedData> iterator = list.iterator();
            while (iterator.hasNext()) {
                UpdatedData data = iterator.next();
                Map Pkeys = data.getPrimaryKeys();
                Map column = data.getUpdatedColumn();
                System.out.println("Pkeys are: " + Pkeys);
                System.out.println("Column data are: " + column);
                ViewObjectImpl bdgEoBudgetVO1 = this.getBdgEoBudgetVO1();
                System.out.println("Row count is: " + bdgEoBudgetVO1.getRowCount());

            }
        }
    }

    /**
     * Container's getter for LOVSubOrdinateRegion1.
     * @return LOVSubOrdinateRegion1
     */
    public ViewObjectImpl getLOVSubOrdinateRegionVO1() {
        return (ViewObjectImpl) findViewObject("LOVSubOrdinateRegionVO1");
    }


    /**
     *Method which will convert Basic amount to user defined amount on selection
     * @param amt
     * @return
     */
    public Number convertNumberToNotation(Number amt) {
        Number notation = new Number(1);
        Number newAmt = new Number(0);
        if (this.getTemporaryDataVO1() != null)
            if (this.getTemporaryDataVO1().getCurrentRow() != null)
                if (this.getTemporaryDataVO1().getCurrentRow().getAttribute("AmtNotationIdTrans") != null)
                    notation = (Number) this.getTemporaryDataVO1().getCurrentRow().getAttribute("AmtNotationIdTrans");
        if (amt != null)
            newAmt = amt;
        return newAmt.divide(notation);
    }

    /*     private Number convertNotationToBaseNumber(Number amt) {
        Number notation = new Number(1);
        Number newAmt = new Number(0);
        if (this.getTemporaryDataVO1() != null)
            if (this.getTemporaryDataVO1().getCurrentRow() != null)
                if (this.getTemporaryDataVO1().getCurrentRow().getAttribute("AmtNotationIdTrans") != null)
                    notation = (Number) this.getTemporaryDataVO1().getCurrentRow().getAttribute("AmtNotationIdTrans");
        if (amt != null)
            newAmt = amt;
        return newAmt.multiply(notation);
    } */

    /**
     * Container's getter for LOVFYYear1.
     * @return LOVFYYear1
     */
    public ViewObjectImpl getLOVFYYearVO1() {
        return (ViewObjectImpl) findViewObject("LOVFYYearVO1");
    }

    /**
     * Container's getter for LOVEmployeeName1.
     * @return LOVEmployeeName1
     */
    public ViewObjectImpl getLOVEmployeeNameVO1() {
        return (ViewObjectImpl) findViewObject("LOVEmployeeNameVO1");
    }

    /**
     * Container's getter for LOVItemName1.
     * @return LOVItemName1
     */
    public ViewObjectImpl getLOVItemNameVO2() {
        return (ViewObjectImpl) findViewObject("LOVItemNameVO2");
    }

    /**
     * Container's getter for LOVCustomerNm1.
     * @return LOVCustomerNm1
     */
    public ViewObjectImpl getLOVCustomerNmVO2() {
        return (ViewObjectImpl) findViewObject("LOVCustomerNmVO2");
    }

    /**
     * Container's getter for LOVItemGrp1.
     * @return LOVItemGrp1
     */
    public ViewObjectImpl getLOVItemGrpVO2() {
        return (ViewObjectImpl) findViewObject("LOVItemGrpVO2");
    }

    /**
     * Container's getter for EmpImmediateDtl1.
     * @return EmpImmediateDtl1
     */
    public ViewObjectImpl getEmpImmediateDtlVO1() {
        return (ViewObjectImpl) findViewObject("EmpImmediateDtlVO1");
    }

    /**
     * Method which will validate the employee name
     * whether userr is eligable to add the selected employee details or not
     */
    public Boolean chkUserEligableToAddOrNot(String name) {
        Boolean val = false;

        ViewObjectImpl eoVO1 = this.getLOVEoIdVO1();
        eoVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        eoVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        eoVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        eoVO1.setNamedWhereClauseParam("BindUserId", this.getUsrId());
        eoVO1.setNamedWhereClauseParam("BindEoId", Integer.parseInt(resolvEl("#{pageFlowScope.P_EMP_CODE}")));
        eoVO1.executeQuery();

        eoVO1.setRangeSize(-1);

        RowQualifier rQ = new RowQualifier(eoVO1);
        rQ.setWhereClause("EoNm ='" + name + "'");
        Row[] filteredRows = eoVO1.getFilteredRows(rQ);

        if (filteredRows.length > 0) {
            if (filteredRows[0].getAttribute("EoId").equals(resolvElO("#{pageFlowScope.P_EMP_CODE}"))) {
                val = true;
            }
        }

        return val;
    }

    /**
     * Container's getter for ViewHeadEmpHierarchy1.
     * @return ViewHeadEmpHierarchy1
     */
    public ViewObjectImpl getViewHeadEmpHierarchyVO1() {
        return (ViewObjectImpl) findViewObject("ViewHeadEmpHierarchyVO1");
    }

    /**
     * Container's getter for ViewEmpHierarchy1.
     * @return ViewEmpHierarchy1
     */
    public ViewObjectImpl getViewEmpHierarchyVO1() {
        return (ViewObjectImpl) findViewObject("ViewEmpHierarchyVO1");
    }

    /**
     * Container's getter for ViewHeadEmpHierarchyToViewEmpHierarchyVL1.
     * @return ViewHeadEmpHierarchyToViewEmpHierarchyVL1
     */
    public ViewLinkImpl getViewHeadEmpHierarchyToViewEmpHierarchyVL1() {
        return (ViewLinkImpl) findViewLink("ViewHeadEmpHierarchyToViewEmpHierarchyVL1");
    }

    /**
     * Container's getter for ViewEmpHierarchy1.
     * @return ViewEmpHierarchy1
     */
    public ViewObjectImpl getViewEmpHierarchyVO2() {
        return (ViewObjectImpl) findViewObject("ViewEmpHierarchyVO2");
    }

    /**
     * Container's getter for ViewEmpHierarchySelfVL1.
     * @return ViewEmpHierarchySelfVL1
     */
    public ViewLinkImpl getViewEmpHierarchySelfVL1() {
        return (ViewLinkImpl) findViewLink("ViewEmpHierarchySelfVL1");
    }

    /**
     * Container's getter for EmpBudgetDetailForSearch1.
     * @return EmpBudgetDetailForSearch1
     */
    public ViewObjectImpl getEmpBudgetDetailForSearchVO4() {
        return (ViewObjectImpl) findViewObject("EmpBudgetDetailForSearchVO4");
    }

    /**
     * Budget Name Duplicate Check Validator
     */
    public Boolean chkBudgetNameDuplicate(String name) {
        Boolean val = false;

        ViewObjectImpl bdgEoVO1 = this.getBdgEoBudgetVO1();
        RowQualifier rQ = new RowQualifier(bdgEoVO1);
        rQ.setWhereClause("CldId ='" + this.getCldIdValue() + "' and SlocId =" + this.getSlocIdValue() +
                          " and HoOrgId ='" + this.getHoOrgIdValue() + "' and BudgetNm ='" + name + "'");
        Row[] filteredRows = bdgEoVO1.getFilteredRows(rQ);

        /*Row[] filteredRows = bdgEoVO1.getFilteredRows("BudgetNm", name.toUpperCase());*/

        if (filteredRows.length > 0 && filteredRows[0] != bdgEoVO1.getCurrentRow()) {
            val = true;
        }
        return val;
    }

    /**
     * Container's getter for TemporaryProductData1.
     * @return TemporaryProductData1
     */
    public ViewObjectImpl getTemporaryProductDataVO1() {
        return (ViewObjectImpl) findViewObject("TemporaryProductDataVO1");
    }

    /**
     * Method which will search Item detail Based on User entry
     */
    public void searchItemDetail() {
        ViewObjectImpl bdgEoBudgetProdDtlVO1 = this.getBdgEoBudgetProdDtlVO1();
        Row currentRow = bdgEoBudgetProdDtlVO1.getCurrentRow();
        Object custEoId = null;
        Object itmGrpId = null;
        Object itmId = null;
        Object itmAmtSp = null;

        if (currentRow != null) {
            custEoId = currentRow.getAttribute("CustEoId");
            itmGrpId = currentRow.getAttribute("ItmGrpId");
            itmId = currentRow.getAttribute("ItmId");
            itmAmtSp = currentRow.getAttribute("ItmAmtSp");
        }

        if (((custEoId != null && custEoId.toString().length() > 0) ||
             (itmGrpId != null && itmGrpId.toString().length() > 0) ||
             (itmId != null && itmId.toString().length() > 0)) && (itmAmtSp != null) || currentRow == null) {

            Row tempRow = this.getTemporaryProductDataVO1().getCurrentRow();
            if (tempRow != null) {
                ViewCriteria criteria = bdgEoBudgetProdDtlVO1.getViewCriteria("BdgEoBudgetProdDtlVOCriteria");
                bdgEoBudgetProdDtlVO1.applyViewCriteria(criteria);

                bdgEoBudgetProdDtlVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
                bdgEoBudgetProdDtlVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
                bdgEoBudgetProdDtlVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
                bdgEoBudgetProdDtlVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());

                if (tempRow.getAttribute("EmpIdTrans") != null &&
                    tempRow.getAttribute("EmpIdTrans").toString().length() > 0) {
                    bdgEoBudgetProdDtlVO1.setNamedWhereClauseParam("BindEoId", tempRow.getAttribute("EmpIdTrans"));
                } else {
                    bdgEoBudgetProdDtlVO1.setNamedWhereClauseParam("BindEoId", null);
                }

                if (tempRow.getAttribute("CustIdTrans") != null &&
                    tempRow.getAttribute("CustIdTrans").toString().length() > 0) {
                    bdgEoBudgetProdDtlVO1.setNamedWhereClauseParam("BindCustEoId", tempRow.getAttribute("CustIdTrans"));
                } else {
                    bdgEoBudgetProdDtlVO1.setNamedWhereClauseParam("BindCustEoId", null);
                }

                if (tempRow.getAttribute("GrpIdTrans") != null &&
                    tempRow.getAttribute("GrpIdTrans").toString().length() > 0) {
                    bdgEoBudgetProdDtlVO1.setNamedWhereClauseParam("BindGrpId", tempRow.getAttribute("GrpIdTrans"));
                } else {
                    bdgEoBudgetProdDtlVO1.setNamedWhereClauseParam("BindGrpId", null);
                }

                if (tempRow.getAttribute("IdItemTrans") != null &&
                    tempRow.getAttribute("IdItemTrans").toString().length() > 0) {
                    bdgEoBudgetProdDtlVO1.setNamedWhereClauseParam("BindItemId", tempRow.getAttribute("IdItemTrans"));
                } else {
                    bdgEoBudgetProdDtlVO1.setNamedWhereClauseParam("BindItemId", null);
                }

                if (tempRow.getAttribute("RgnIdTrans") != null &&
                    tempRow.getAttribute("RgnIdTrans").toString().length() > 0) {
                    bdgEoBudgetProdDtlVO1.setNamedWhereClauseParam("BindRegion", tempRow.getAttribute("RgnIdTrans"));
                } else {
                    bdgEoBudgetProdDtlVO1.setNamedWhereClauseParam("BindRegion", null);
                }
                System.out.println("Filtered rows is " + bdgEoBudgetProdDtlVO1.getAllRowsInRange().length);
                bdgEoBudgetProdDtlVO1.executeQuery();

            }
        }
    }


    /**
     * Method which will reset Item detail Based on User selection
     */
    public void resetItemDetail() {
        this.getTemporaryProductDataVO1().executeQuery();

        //this.getBdgEoBudgetProdDtlVO1().clearCache();

        searchItemDetail();
    }

    /**
     * Container's getter for BdgEoBudgetProdDtl1.
     * @return BdgEoBudgetProdDtl1
     */
    public ViewObjectImpl getBdgEoBudgetProdDtlVO2() {
        return (ViewObjectImpl) findViewObject("BdgEoBudgetProdDtlVO2");
    }

    /**
     * Container's getter for BdgEoBudgetToEoBudgetProdDtlVL3.
     * @return BdgEoBudgetToEoBudgetProdDtlVL3
     */
    public ViewLinkImpl getBdgEoBudgetToEoBudgetProdDtlVL3() {
        return (ViewLinkImpl) findViewLink("BdgEoBudgetToEoBudgetProdDtlVL3");
    }

    /**
     * Method which will copy the data from distributed item amount to budget amount
     * BDG$EO$BUDGET$PROD$PRD$DTL to BDG$EO$BUDGET$PRD$DTL
     */
    public void copyItemDtlToBdgDtl() {
        ViewObjectImpl bdgEoBudgetProdPrdDtlVO2 = this.getBdgEoBudgetProdPrdDtlVO2();

        bdgEoBudgetProdPrdDtlVO2.setRangeSize(-1);

        ViewObjectImpl bdgPrdDtl = this.getBdgEoBudgetPrdDtlVO1();
        for (Row delRow : bdgPrdDtl.getAllRowsInRange()) {
            delRow.remove();
        }
        bdgPrdDtl.executeQuery();

        Number amtSp = new Number(0);
        Number amtBs = new Number(0);

        for (Row r : bdgEoBudgetProdPrdDtlVO2.getAllRowsInRange()) {

            amtSp = new Number(0);
            amtBs = new Number(0);

            RowQualifier rQ = new RowQualifier(bdgPrdDtl);
            rQ.setWhereClause("CldId ='" + this.getCldIdValue() + "' and SlocId =" + this.getSlocIdValue() +
                              " and HoOrgId ='" + this.getHoOrgIdValue() + "' and OrgId ='" + this.getOrgIdValue() +
                              "' and DocId ='" + r.getAttribute("DocId") + "' and PrdDtlStartDt ='" +
                              r.getAttribute("PrdDtlStartDt") + "' and PrdDtlEndDt ='" + r.getAttribute("PrdDtlEndDt") +
                              "'");
            Row[] filteredRows = bdgPrdDtl.getFilteredRows(rQ);
            if (filteredRows.length > 0) { // Will Update The record present in BDG$EO$BUDGET$PRD$DTL

                amtSp = ((Number) filteredRows[0].getAttribute("BudgAmtSp")).add((Number) r.getAttribute("ItmAmtSp"));
                amtBs = ((Number) filteredRows[0].getAttribute("BudgAmtBs")).add((Number) r.getAttribute("ItmAmtBs"));

                filteredRows[0].setAttribute("BudgAmtSp", amtSp);
                filteredRows[0].setAttribute("BudgAmtBs", amtBs);

            } else { // Will insert new row into budget BDG$EO$BUDGET$PRD$DTL

                Row createRow = bdgPrdDtl.createRow();
                createRow.setAttribute("EoId", Integer.parseInt(resolvEl("#{pageFlowScope.P_EMP_CODE}")));
                createRow.setAttribute("PrdStartDt", r.getAttribute("PrdStartDt"));
                createRow.setAttribute("PrdEndDt", r.getAttribute("PrdEndDt"));
                createRow.setAttribute("PrdDtlStartDt", r.getAttribute("PrdDtlStartDt"));
                createRow.setAttribute("PrdDtlEndDt", r.getAttribute("PrdDtlEndDt"));
                createRow.setAttribute("BudgAmtSp", r.getAttribute("ItmAmtSp"));
                createRow.setAttribute("BudgAmtBs", r.getAttribute("ItmAmtBs"));
                createRow.setAttribute("UsrIdCreate", r.getAttribute("UsrIdCreate"));
                createRow.setAttribute("UsrIdCreateDt", r.getAttribute("UsrIdCreateDt"));
                bdgPrdDtl.insertRow(createRow);

            }
        }
        bdgPrdDtl.executeQuery();
    }

    /**
     * Container's getter for BdgEoBudgetProdPrdDtl1.
     * @return BdgEoBudgetProdPrdDtl1
     */
    public ViewObjectImpl getBdgEoBudgetProdPrdDtlVO2() {
        return (ViewObjectImpl) findViewObject("BdgEoBudgetProdPrdDtlVO2");
    }

    /**
     * Container's getter for BdgEoBudgetToBdgEoBudgetProdPrdDtlVL1.
     * @return BdgEoBudgetToBdgEoBudgetProdPrdDtlVL1
     */
    public ViewLinkImpl getBdgEoBudgetToBdgEoBudgetProdPrdDtlVL1() {
        return (ViewLinkImpl) findViewLink("BdgEoBudgetToBdgEoBudgetProdPrdDtlVL1");
    }

    /**
     * Container's getter for BdgEoBudgetProdDtl1.
     * @return BdgEoBudgetProdDtl1
     */
    public ViewObjectImpl getBdgEoBudgetProdDtlVO4() {
        return (ViewObjectImpl) findViewObject("BdgEoBudgetProdDtlVO4");
    }

    /**
     * Container's getter for BdgEoBudgetToEoBudgetProdDtlVL4.
     * @return BdgEoBudgetToEoBudgetProdDtlVL4
     */
    public ViewLinkImpl getBdgEoBudgetToEoBudgetProdDtlVL4() {
        return (ViewLinkImpl) findViewLink("BdgEoBudgetToEoBudgetProdDtlVL4");
    }

    /**
     * Container's getter for EmpTargetVsActual1.
     * @return EmpTargetVsActual1
     */
    public ViewObjectImpl getEmpTargetVsActualVO() {
        return (ViewObjectImpl) findViewObject("EmpTargetVsActualVO");
    }

    /**
     * Container's getter for BdgEoBudgetPrdDtl1.
     * @return BdgEoBudgetPrdDtl1
     */
    public ViewObjectImpl getBdgEoBudgetPrdDtlVO2() {
        return (ViewObjectImpl) findViewObject("BdgEoBudgetPrdDtlVO2");
    }

    /**
     * Container's getter for BdgEoBudgetToBdgEoBudgetPrdDtlVL2.
     * @return BdgEoBudgetToBdgEoBudgetPrdDtlVL2
     */
    public ViewLinkImpl getBdgEoBudgetToBdgEoBudgetPrdDtlVL2() {
        return (ViewLinkImpl) findViewLink("BdgEoBudgetToBdgEoBudgetPrdDtlVL2");
    }

    /**
     * Method which will estimate the rows present in instances
     */
    public void printEstimatedRows() {
        System.out.println("getBdgEoBudgetProdDtlVO1 " + this.getBdgEoBudgetProdDtlVO1().getEstimatedRowCount());
        System.out.println("getBdgEoBudgetProdDtlVO2 " + this.getBdgEoBudgetProdDtlVO2().getEstimatedRowCount());
        System.out.println("getBdgEoBudgetProdDtlVO3 " + this.getBdgEoBudgetProdDtlVO3().getEstimatedRowCount());
        System.out.println("getBdgEoBudgetProdDtlVO4 " + this.getBdgEoBudgetProdDtlVO4().getEstimatedRowCount());

        System.out.println("getBdgEoBudgetVO1 " + this.getBdgEoBudgetVO1().getEstimatedRowCount());
        System.out.println("getBdgEoBudgetVO2 " + this.getBdgEoBudgetVO2().getEstimatedRowCount());
    }

    /**
     * Container's getter for GetImmEmpBasedOnLoc1.
     * @return GetImmEmpBasedOnLoc1
     */
    public ViewObjectImpl getGetImmEmpBasedOnLocVO1() {
        return (ViewObjectImpl) findViewObject("GetImmEmpBasedOnLocVO1");
    }

    //------------------------WF Methods--------------------------
    private static int NUMBER = Types.NUMERIC;

    public String getWfNo(Integer sloc_id, String cld_id, String org_id, Integer doc_no) {


        Object obj = callStoredFunction(Types.VARCHAR, "APP.WF_GET_ID(?,?,?,?,?)", new Object[] {
                                        sloc_id, cld_id, org_id, doc_no, 0
        });

        return (String) obj;
    }

    public Integer pendingCheck(Integer SlocId, String CldId, String OrgId, Integer DocNo) {
        System.out.println("pendingCheck");
        Row curr = this.getBdgEoBudgetVO1().getCurrentRow();
        String docIdTxn = curr.getAttribute("DocId").toString();
        Object obj = callStoredFunction(NUMBER, "APP.WF_GET_CUR_USR(?,?,?,?,?,?)", new Object[] {
                                        SlocId, CldId, OrgId, DocNo, docIdTxn, 0
        });
        Integer usrId = null;
        if (obj != null) {
            usrId = Integer.parseInt(obj.toString());
        }
        return usrId;
    }


    public Integer getUsrLvl(Integer SlocId, String CldId, String OrgId, Integer usr_id, String WfNum, String DocNo) {

        return Integer.parseInt(callStoredFunction(NUMBER, "APP.WF_GET_USR_LEVEL(?,?,?,?,?,?,?)", new Object[] {
                                                   SlocId, CldId, OrgId, usr_id, WfNum, DocNo, 0
    }).toString());


    }

    public Integer insIntoTxn(Integer sloc_id, String cld_id, String pOrgId, Integer DOC_NO, String WfNum,
                              Integer usr_idFrm, Integer usr_idTo, Integer levelTo, Integer levelFrm, String action,
                              String remark, Number amount, String post) {

        Row curr = this.getBdgEoBudgetVO1().getCurrentRow();
        String docIdTxn = curr.getAttribute("DocId").toString();
        return Integer.parseInt(callStoredFunction(NUMBER, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                   sloc_id, cld_id, pOrgId, DOC_NO, 0, WfNum, docIdTxn, usr_idFrm,
                                                   usr_idTo, levelFrm, levelTo, action, remark, amount, post
    }).toString());

    }


    public void wfAction(String ret) {
        System.out.println("wfAction Ret =" + ret);
        if (ret != null) {
            if (ret.equals("F")) {
                this.getBdgEoBudgetVO1().getCurrentRow().setAttribute("BudgetStat", 2);
            } else if (ret.equals("R")) {

            } else if (ret.equals("V")) {

            } else if (ret.equals("A")) {

                changeStatusFromApprovedToDraft();

                this.getBdgEoBudgetVO1().getCurrentRow().setAttribute("BudgetStat", 3);
                this.getBdgEoBudgetVO1().getCurrentRow().setAttribute("FreezeFlg", 'Y');

                sendDateFromTempCcToSlsSoCc();

            }
            this.getDBTransaction().commit();
        }
    }

    public String getUsrName(Integer usrId) {
        System.out.println("getUsrName");
        this.getLOVUserNameVO1().setNamedWhereClauseParam("BindSlocId",
                                                          this.getBdgEoBudgetVO1().getCurrentRow().getAttribute("SlocId"));
        this.getLOVUserNameVO1().setNamedWhereClauseParam("BindUsrId", usrId);
        this.getLOVUserNameVO1().executeQuery();

        Row[] r = this.getLOVUserNameVO1().getAllRowsInRange();
        if (r.length > 0)
            return (String) r[0].getAttribute("UsrName");
        else
            return null;
    }
    //// End of Workflow methods

    /// Following methods were related to Cost Center
    public AppCostCenterServiceAMImpl getAppAM() {
        String appModuleName = "appCostCenterSevice.model.service.AppCostCenterServiceAM";
        String appModuleConfig = "AppCostCenterServiceAMLocal";
        return (AppCostCenterServiceAMImpl) Configuration.createRootApplicationModule(appModuleName, appModuleConfig);
    }


    public void releaseAppAM(AppCostCenterServiceAMImpl appCostCenter) {
        Configuration.releaseRootApplicationModule((ApplicationModule) appCostCenter, true);
    }

    @Override
    protected void finalize() throws Throwable {

        releaseAppAM(getAppAM());

        super.finalize();
    }
    /// End Of Cost ceneter methods

    /**
     * Method which will let us know whether cost center is applicable for this current document or not
     */
    public Boolean chkCcApplicableOrNot() {
        Boolean val = false;

        ViewObjectImpl appCcDocVO1 = this.getAppCcDocVO1();
        appCcDocVO1.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        appCcDocVO1.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        appCcDocVO1.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        appCcDocVO1.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        appCcDocVO1.setNamedWhereClauseParam("BindDocId", 34002);
        appCcDocVO1.executeQuery();

        Row[] allRowsInRange = appCcDocVO1.getAllRowsInRange();
        if (allRowsInRange.length > 0) {
            val = true;
        }

        return val;
    }

    /**
     * Method which will set Global Parameter Values and will be called before opening AppCostCenterServicesTF
     */
    public void declareGlblValuesForCC() {
        ViewObjectImpl appCcVwVO1 = this.getAppCcVwVO1();
        appCcVwVO1.setRangeSize(-1);

        appCcVwVO1.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        appCcVwVO1.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        appCcVwVO1.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        appCcVwVO1.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        appCcVwVO1.setNamedWhereClauseParam("BindDocId", 34002);

        Row currentRow = this.getBdgEoBudgetProdDtlVO1().getCurrentRow();
        if (currentRow != null) {
            for (int i = 1; i <= 5; i++) {
                appCcVwVO1.setNamedWhereClauseParam("BindCcPos", i);
                appCcVwVO1.executeQuery();

                Row[] allRowsInRange = appCcVwVO1.getAllRowsInRange();
                if (allRowsInRange.length > 0) {
                    String columnName = null;
                    for (Row r : allRowsInRange) {
                        AttributeDef[] attributeDef = this.getBdgEoBudgetProdDtlVO1().getAttributeDefs();

                        for (int j = 0; j < attributeDef.length; j++) {
                            /*  System.out.println("j value is " + attributeDef[j].getColumnName());
                               System.out.println("------------ null value is " + r.getAttribute("DbobColNm"));
                               System.out.println("attributeDef[j].getColumnName().equalsIgnoreCase(r.getAttribute(\"DbobColNm\").toString()) " +
                                                  attributeDef[j].getColumnName().equals(r.getAttribute("DbobColNm")));
                               */
                            if (attributeDef[j].getColumnName() != null &&
                                attributeDef[j].getColumnName().equals(r.getAttribute("DbobColNm"))) {
                                columnName = attributeDef[j].getName();
                            }
                        }
                        System.out.println("Column Name is " + columnName);

                        if (columnName != null) {

                            System.out.println("i is " + i + " Cost center Value is " +
                                               currentRow.getAttribute(columnName));


                            RequestContext.getCurrentInstance().getPageFlowScope().put("P_CC_LEVEL" + i,
                                                                                       currentRow.getAttribute(columnName));
                        }
                    }
                } else {
                    System.out.println("i is" + i + " cost center value is null");

                    RequestContext.getCurrentInstance().getPageFlowScope().put("P_CC_LEVEL" + i, null);

                }
            }
        }
    }

    /**
     * Method which will call cost center bean
     */
    public void deleteCostCenterItem() {
        if (chkCcApplicableOrNot()) {
            System.out.println("Inside delete method");

            ViewObjectImpl impl = this.getBdgEoBudgetProdDtlVO1();
            Row currentRow = impl.getCurrentRow();
            AppCostCenterServiceAMImpl amCC = getAppAM();

            if (currentRow != null && currentRow.getAttribute("CcId") != null) {
                System.out.println("Inside Am after cresting object");
                if (amCC != null) {
                    System.out.println("------------------ Not null");
                    amCC.deleteCCLines(EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                       EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                       currentRow.getAttribute("DocId").toString(), "L", 34002,
                                       EbizParams.GLBL_APP_USR(), currentRow.getAttribute("CcId").toString(),
                                       new Number(0), (String) resolvElO("#{pageFlowScope.P_CC_LEVEL1}"),
                                       (String) resolvElO("#{pageFlowScope.P_CC_LEVEL2}"),
                                       (String) resolvElO("#{pageFlowScope.P_CC_LEVEL3}"),
                                       (String) resolvElO("#{pageFlowScope.P_CC_LEVEL4}"),
                                       (String) resolvElO("#{pageFlowScope.P_CC_LEVEL5}"));
                }
            }
            System.out.println("After calling delete method");
        }
    }

    /**
     * Method which will update amount present in cost center table
     */
    public void updateCostCenterAmt() {
        if (chkCcApplicableOrNot()) {
            System.out.println("Inside cost ceneter update amount method");
            ViewObjectImpl impl = this.getBdgEoBudgetProdDtlVO1();
            Row currentRow = impl.getCurrentRow();
            AppCostCenterServiceAMImpl amCC = getAppAM();

            if (currentRow != null && currentRow.getAttribute("CcId") != null &&
                currentRow.getAttribute("ItmAmtSp") != null) {
                System.out.println("Inside Am after cresting object");
                if (amCC != null) {

                    declareGlblValuesForCC();

                    System.out.println("------------------ Not null");
                    Boolean amount =
                        amCC.updateCCAmount(EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                            EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                            currentRow.getAttribute("DocId").toString(), "L", 34002,
                                            EbizParams.GLBL_APP_USR(), currentRow.getAttribute("CcId").toString(),
                                            (Number) currentRow.getAttribute("ItmAmtSp"),
                                            (String) resolvElO("#{pageFlowScope.P_CC_LEVEL1}"),
                                            (String) resolvElO("#{pageFlowScope.P_CC_LEVEL2}"),
                                            (String) resolvElO("#{pageFlowScope.P_CC_LEVEL3}"),
                                            (String) resolvElO("#{pageFlowScope.P_CC_LEVEL4}"),
                                            (String) resolvElO("#{pageFlowScope.P_CC_LEVEL5}"));
                    if (!amount) {
                        String msg = resolvEl("#{bundle['MSG.1979']}"); // MSG.1979  Please Update Cost Center.
                        ADFModelUtils.showFormattedFacesMessage(msg, msg,

                                                                FacesMessage.SEVERITY_ERROR);
                    }
                }
            }
            System.out.println("After calling Update method");
        }
    }

    /**
     * Method which will update amount present in cost center table
     */
    public void updateCostCenterAmtAfterRevise() {
        if (chkCcApplicableOrNot()) {
            System.out.println("Inside cost ceneter update amount method");
            ViewObjectImpl impl = this.getBdgEoBudgetProdDtlVO1();
            AppCostCenterServiceAMImpl amCC = getAppAM();

            for (Row r : impl.getAllRowsInRange()) {

                if (r != null && r.getAttribute("CcId") != null && r.getAttribute("ItmAmtSp") != null) {
                    System.out.println("Inside Am after cresting object");
                    if (amCC != null) {

                        declareGlblValuesForCC();

                        System.out.println("------------------ Not null");
                        Boolean amount =
                            amCC.updateCCAmount(EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                                EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                                r.getAttribute("DocId").toString(), "L", 34002,
                                                EbizParams.GLBL_APP_USR(), r.getAttribute("CcId").toString(),
                                                (Number) r.getAttribute("ItmAmtSp"),
                                                (String) resolvElO("#{pageFlowScope.P_CC_LEVEL1}"),
                                                (String) resolvElO("#{pageFlowScope.P_CC_LEVEL2}"),
                                                (String) resolvElO("#{pageFlowScope.P_CC_LEVEL3}"),
                                                (String) resolvElO("#{pageFlowScope.P_CC_LEVEL4}"),
                                                (String) resolvElO("#{pageFlowScope.P_CC_LEVEL5}"));
                        if (!amount) {
                            String msg = resolvEl("#{bundle['MSG.1979']}"); //MSG.1979  Please Update Cost Center.
                            ADFModelUtils.showFormattedFacesMessage(msg, msg,

                                                                    FacesMessage.SEVERITY_ERROR);
                            break;
                        }
                    }
                }
            }
            System.out.println("After calling Update method");
        }
    }

    /**
     * Method which will update amount present in cost center table
     */
    public void updateCostCenterAmtAfterDistrib() {
        if (chkCcApplicableOrNot()) {
            System.out.println("Inside cost ceneter update amount method");
            ViewObjectImpl impl = this.getBdgEoBudgetProdPrdDtlVO1();
            Row currentRow = impl.getCurrentRow();
            AppCostCenterServiceAMImpl amCC = getAppAM();

            if (currentRow != null && currentRow.getAttribute("CcId") != null &&
                currentRow.getAttribute("ItmAmtSp") != null) {
                System.out.println("Inside Am after cresting object");
                if (amCC != null) {

                    declareGlblValuesForCC();

                    System.out.println("------------------ Not null");
                    Boolean amount =
                        amCC.updateCCAmount(EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                            EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                            currentRow.getAttribute("DocId").toString(), "L", 34002,
                                            EbizParams.GLBL_APP_USR(), currentRow.getAttribute("CcId").toString(),
                                            (Number) currentRow.getAttribute("ItmAmtSp"),
                                            (String) resolvElO("#{pageFlowScope.P_CC_LEVEL1}"),
                                            (String) resolvElO("#{pageFlowScope.P_CC_LEVEL2}"),
                                            (String) resolvElO("#{pageFlowScope.P_CC_LEVEL3}"),
                                            (String) resolvElO("#{pageFlowScope.P_CC_LEVEL4}"),
                                            (String) resolvElO("#{pageFlowScope.P_CC_LEVEL5}"));
                    if (!amount) {
                        String msg = resolvEl("#{bundle['MSG.1979']}"); //MSG.1979  Please Update Cost Center.
                        ADFModelUtils.showFormattedFacesMessage(msg, msg,

                                                                FacesMessage.SEVERITY_ERROR);
                    }
                }
            }
            System.out.println("After calling Update method");
        }
    }

    /**
     * Method which will update amount present in cost center table
     */
    private void insertCostCenterAmtAfterDistrib() {
        if (chkCcApplicableOrNot()) {
            System.out.println("Inside cost ceneter update amount method");
            ViewObjectImpl impl = this.getBdgEoBudgetProdPrdDtlVO1();
            AppCostCenterServiceAMImpl amCC = getAppAM();

            for (Row r : impl.getAllRowsInRange()) {
                if (r != null && r.getAttribute("CcId") != null && r.getAttribute("ItmAmtSp") != null) {
                    System.out.println("Inside Am after cresting object");
                    if (amCC != null) {

                        declareGlblValuesForCC();

                        System.out.println("------------------ Not null");
                        Boolean amount =
                            amCC.updateCCAmount(EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                                EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                                r.getAttribute("DocId").toString(), "L", 34002,
                                                EbizParams.GLBL_APP_USR(), r.getAttribute("CcId").toString(),
                                                (Number) r.getAttribute("ItmAmtSp"),
                                                (String) resolvElO("#{pageFlowScope.P_CC_LEVEL1}"),
                                                (String) resolvElO("#{pageFlowScope.P_CC_LEVEL2}"),
                                                (String) resolvElO("#{pageFlowScope.P_CC_LEVEL3}"),
                                                (String) resolvElO("#{pageFlowScope.P_CC_LEVEL4}"),
                                                (String) resolvElO("#{pageFlowScope.P_CC_LEVEL5}"));
                        if (!amount) {
                            String msg = resolvEl("#{bundle['MSG.1979']}");  //MSG.1979  Please Update Cost Center.
                            ADFModelUtils.showFormattedFacesMessage(msg, msg,

                                                                    FacesMessage.SEVERITY_ERROR);
                        }
                    }
                }
            }
            System.out.println("After calling Update method");
        }
    }

    /**
     * Method which will push data of Cost Center from TempCostCenter to SlsSoCostCenter Table
     */
    public void sendDateFromTempCcToSlsSoCc() {
        if (chkCcApplicableOrNot()) {
            callStoredFunction(Types.VARCHAR, "APP.FN_SAVE_COST_CENTER(?,?,?,?,?,?,?,?)", new Object[] {
                               EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                               EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(), 34002, "BDG",
                               "BDG$EO$BUDGET$COST$CENTER",
                               this.getBdgEoBudgetVO1().getCurrentRow().getAttribute("DocId")
            });
        }
    }

    /**
     * Method which will push data of Cost Center from TempCostCenter to SlsSoCostCenter Table
     */
    private void sendDateFromTempCcToBdgCc(String docId) {
        if (chkCcApplicableOrNot() && docId != null) {
            callStoredFunction(Types.VARCHAR, "APP.FN_SAVE_COST_CENTER(?,?,?,?,?,?,?,?)", new Object[] {
                               EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                               EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(), 34002, "BDG",
                               "BDG$EO$BUDGET$COST$CENTER", docId
            });
        }
    }


    /**
     * Container's getter for AppCcDoc1.
     * @return AppCcDoc1
     */
    public ViewObjectImpl getAppCcDocVO1() {
        return (ViewObjectImpl) findViewObject("AppCcDocVO1");
    }

    /**
     * Container's getter for AppCcVw1.
     * @return AppCcVw1
     */
    public ViewObjectImpl getAppCcVwVO1() {
        return (ViewObjectImpl) findViewObject("AppCcVwVO1");
    }
}
