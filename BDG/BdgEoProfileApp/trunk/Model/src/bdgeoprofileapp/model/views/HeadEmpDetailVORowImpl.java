package bdgeoprofileapp.model.views;

import bdgeoprofileapp.model.services.BdgEoProfileAMImpl;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.RowSet;
import oracle.jbo.domain.Number;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Jan 09 10:51:12 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class HeadEmpDetailVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CldId,
        SlocId,
        HoOrgId,
        OrgId,
        EmpCode,
        EmpNm,
        MgrCode,
        MgrNm,
        EmpId,
        UsrId,
        ImgPath,
        TargetAmtTrans,
        CurrNameTrans,
        ManagerTrans,
        TransPrvTargetAmt,
        TransPrvActualAmt,
        TransPrvDiffAmt,
        TransPrvDiffType,
        EmpRelDocIdTrans,
        EmpBudgetStruct,
        EmpBudgetDetail;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int EMPCODE = AttributesEnum.EmpCode.index();
    public static final int EMPNM = AttributesEnum.EmpNm.index();
    public static final int MGRCODE = AttributesEnum.MgrCode.index();
    public static final int MGRNM = AttributesEnum.MgrNm.index();
    public static final int EMPID = AttributesEnum.EmpId.index();
    public static final int USRID = AttributesEnum.UsrId.index();
    public static final int IMGPATH = AttributesEnum.ImgPath.index();
    public static final int TARGETAMTTRANS = AttributesEnum.TargetAmtTrans.index();
    public static final int CURRNAMETRANS = AttributesEnum.CurrNameTrans.index();
    public static final int MANAGERTRANS = AttributesEnum.ManagerTrans.index();
    public static final int TRANSPRVTARGETAMT = AttributesEnum.TransPrvTargetAmt.index();
    public static final int TRANSPRVACTUALAMT = AttributesEnum.TransPrvActualAmt.index();
    public static final int TRANSPRVDIFFAMT = AttributesEnum.TransPrvDiffAmt.index();
    public static final int TRANSPRVDIFFTYPE = AttributesEnum.TransPrvDiffType.index();
    public static final int EMPRELDOCIDTRANS = AttributesEnum.EmpRelDocIdTrans.index();
    public static final int EMPBUDGETSTRUCT = AttributesEnum.EmpBudgetStruct.index();
    public static final int EMPBUDGETDETAIL = AttributesEnum.EmpBudgetDetail.index();

    /**
     * This is the default constructor (do not remove).
     */
    public HeadEmpDetailVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute CldId.
     * @return the CldId
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Gets the attribute value for the calculated attribute SlocId.
     * @return the SlocId
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Gets the attribute value for the calculated attribute HoOrgId.
     * @return the HoOrgId
     */
    public String getHoOrgId() {
        return (String) getAttributeInternal(HOORGID);
    }

    /**
     * Gets the attribute value for the calculated attribute OrgId.
     * @return the OrgId
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Gets the attribute value for the calculated attribute EmpCode.
     * @return the EmpCode
     */
    public Integer getEmpCode() {
        return (Integer) getAttributeInternal(EMPCODE);
    }

    /**
     * Gets the attribute value for the calculated attribute EmpNm.
     * @return the EmpNm
     */
    public String getEmpNm() {
        return (String) getAttributeInternal(EMPNM);
    }

    /**
     * Gets the attribute value for the calculated attribute MgrCode.
     * @return the MgrCode
     */
    public Integer getMgrCode() {
        return (Integer) getAttributeInternal(MGRCODE);
    }

    /**
     * Gets the attribute value for the calculated attribute MgrNm.
     * @return the MgrNm
     */
    public String getMgrNm() {
        return (String) getAttributeInternal(MGRNM);
    }

    /**
     * Gets the attribute value for the calculated attribute EmpId.
     * @return the EmpId
     */
    public String getEmpId() {
        return (String) getAttributeInternal(EMPID);
    }

    /**
     * Gets the attribute value for the calculated attribute UsrId.
     * @return the UsrId
     */
    public Integer getUsrId() {
        return (Integer) getAttributeInternal(USRID);
    }

    /**
     * Gets the attribute value for the calculated attribute ImgPath.
     * @return the ImgPath
     */
    public String getImgPath() {
        return (String) getAttributeInternal(IMGPATH);
    }

    /**
     * Gets the attribute value for the calculated attribute TargetAmtTrans.
     * @return the TargetAmtTrans
     */
    public Number getTargetAmtTrans() {
        if (getAttributeInternal(TARGETAMTTRANS) == null && this.getEmpCode() != null) {
            ViewObjectImpl bdgEoBudgetVO2 = this.getAm().getBdgEoBudgetVO2();
            RowQualifier rQ = new RowQualifier(bdgEoBudgetVO2);

            /* rQ.setWhereClause("CldId ='" + this.getCldId() + "' and SlocId = " + this.getSlocId() + " and HoOrgId = '" +
                              this.getHoOrgId() + "' and EoId = " + resolvEl("#{pageFlowScope.P_EO_ID}") +
                              " and DocId ='" + resolvEl("#{pageFlowScope.P_DOC_ID}") + "'"); */
            //System.out.println("getEmpRelDocIdTrans " + getEmpRelDocIdTrans());
            rQ.setWhereClause("CldId ='" + this.getCldId() + "' and SlocId = " + this.getSlocId() + " and HoOrgId = '" +
                              this.getHoOrgId() + "' and EoId = " + this.getEmpCode() + " and DocId ='" +
                              getEmpRelDocIdTrans() + "'");

            Row[] filteredRows = bdgEoBudgetVO2.getFilteredRows(rQ);

            if (filteredRows.length > 0) {
                if (filteredRows[0].getAttribute("MgrBudgAmt") != null) {
                    return (Number) filteredRows[0].getAttribute("MgrBudgAmt");
                } else {
                    return (Number) filteredRows[0].getAttribute("BudgAmt");
                }
            }
        }
        return (Number) getAttributeInternal(TARGETAMTTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TargetAmtTrans.
     * @param value value to set the  TargetAmtTrans
     */
    public void setTargetAmtTrans(Number value) {
        setAttributeInternal(TARGETAMTTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CurrNameTrans.
     * @return the CurrNameTrans
     */
    public String getCurrNameTrans() {
        if (getAttributeInternal(CURRNAMETRANS) == null) {
            ViewObjectImpl bdgEoBudgetVO1 = this.getAm().getBdgEoBudgetVO1();
            RowQualifier rQ = new RowQualifier(bdgEoBudgetVO1);

            rQ.setWhereClause("CldId ='" + this.getCldId() + "' and SlocId = " + this.getSlocId() + " and HoOrgId = '" +
                              this.getHoOrgId() + "' and EoId = " + resolvEl("#{pageFlowScope.P_EO_ID}") +
                              " and DocId ='" + resolvEl("#{pageFlowScope.P_DOC_ID}") + "'");
            Row[] filteredRows = bdgEoBudgetVO1.getFilteredRows(rQ);

            if (filteredRows.length > 0) {
                ViewObjectImpl currVO1 = getAm().getLOVCurrIdVO1();
                currVO1.setNamedWhereClauseParam("BindCldId", this.getCldId());
                currVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocId());
                currVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgId());
                currVO1.setNamedWhereClauseParam("BindCurrId", filteredRows[0].getAttribute("CurrIdSp"));
                currVO1.executeQuery();
                Row[] allRowsInRange = currVO1.getAllRowsInRange();

                if (allRowsInRange.length > 0) {
                    return (String) allRowsInRange[0].getAttribute("CurrDescTxn");
                }
            }
        }
        return (String) getAttributeInternal(CURRNAMETRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CurrNameTrans.
     * @param value value to set the  CurrNameTrans
     */
    public void setCurrNameTrans(String value) {
        setAttributeInternal(CURRNAMETRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ManagerTrans.
     * @return the ManagerTrans
     */
    public String getManagerTrans() {
        if (getAttributeInternal(MANAGERTRANS) == null) {
            //// Following VO will check whether Current User who login have any supervisor or not
            ViewObjectImpl codeVO1 = this.getAm().getGetEmployeeCodeVO1();
            codeVO1.setNamedWhereClauseParam("BindCldId", this.getCldId());
            codeVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocId());
            codeVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgId());
            codeVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgId());
            codeVO1.setNamedWhereClauseParam("BindUserId", this.resolvEl("#{pageFlowScope.GLBL_APP_USR}"));

            codeVO1.executeQuery();

            Row[] allRowsInRange = codeVO1.getAllRowsInRange();
            if (allRowsInRange.length > 0) {

                //// Following Code will checck whether manager Id is present for User who login
                Object mgrCode = allRowsInRange[0].getAttribute("MgrCode");
                if (mgrCode != null) {
                    return "Y";
                } else {
                    return "N";
                }
            } else {
                return "N";
            }
        }
        return "Y";
        //return (String) getAttributeInternal(MANAGERTRANS);
    }


    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ManagerTrans.
     * @param value value to set the  ManagerTrans
     */
    public void setManagerTrans(String value) {
        setAttributeInternal(MANAGERTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransPrvTargetAmt.
     * @return the TransPrvTargetAmt
     */
    public Number getTransPrvTargetAmt() {
        if (getAttributeInternal(TRANSPRVTARGETAMT) != null)
            return (Number) getAttributeInternal(TRANSPRVTARGETAMT);
        else {
            this.getAm().getEmpTargetVsActualVO().setNamedWhereClauseParam("CldIdBind", this.getCldId());
            this.getAm().getEmpTargetVsActualVO().setNamedWhereClauseParam("SlocIdBind", this.getSlocId());
            this.getAm().getEmpTargetVsActualVO().setNamedWhereClauseParam("OrgIdBind", this.getOrgId());
            this.getAm().getEmpTargetVsActualVO().setNamedWhereClauseParam("HoOrgIdBind", this.getHoOrgId());
            this.getAm().getEmpTargetVsActualVO().setNamedWhereClauseParam("EmpCodeBind", this.getEmpCode());
            ViewObjectImpl bdgEoBudgetVO1 = this.getAm().getBdgEoBudgetVO1();
            RowQualifier rQ = new RowQualifier(bdgEoBudgetVO1);

            rQ.setWhereClause("CldId ='" + this.getCldId() + "' and SlocId = " + this.getSlocId() + " and HoOrgId = '" +
                              this.getHoOrgId() + "' and EoId = " + resolvEl("#{pageFlowScope.P_EO_ID}") +
                              " and DocId ='" + resolvEl("#{pageFlowScope.P_DOC_ID}") + "'");
            Row[] filteredRows = bdgEoBudgetVO1.getFilteredRows(rQ);

            if (filteredRows.length > 0) {
                this.getAm().getEmpTargetVsActualVO().setNamedWhereClauseParam("PrdStrtDtBind",
                                                                               filteredRows[0].getAttribute("PrdStartDt"));
                this.getAm().getEmpTargetVsActualVO().setNamedWhereClauseParam("PrdEndDtBind",
                                                                               filteredRows[0].getAttribute("PrdEndDt"));
            }
            this.getAm().getEmpTargetVsActualVO().executeQuery();
            Row[] rows = this.getAm().getEmpTargetVsActualVO().getAllRowsInRange();
            if (rows.length > 0)
                return (Number) rows[0].getAttribute("BudgAmt");
            else
                return new Number(0);
        }
    }


    /**
     * Gets the attribute value for the calculated attribute TransPrvActualAmt.
     * @return the TransPrvActualAmt
     */
    public Number getTransPrvActualAmt() {
        if (getAttributeInternal(TRANSPRVACTUALAMT) != null)
            return (Number) getAttributeInternal(TRANSPRVACTUALAMT);
        else {
            this.getAm().getEmpTargetVsActualVO().setNamedWhereClauseParam("CldIdBind", this.getCldId());
            this.getAm().getEmpTargetVsActualVO().setNamedWhereClauseParam("SlocIdBind", this.getSlocId());
            this.getAm().getEmpTargetVsActualVO().setNamedWhereClauseParam("OrgIdBind", this.getOrgId());
            this.getAm().getEmpTargetVsActualVO().setNamedWhereClauseParam("HoOrgIdBind", this.getHoOrgId());
            this.getAm().getEmpTargetVsActualVO().setNamedWhereClauseParam("EmpCodeBind", this.getEmpCode());
            ViewObjectImpl bdgEoBudgetVO1 = this.getAm().getBdgEoBudgetVO1();
            RowQualifier rQ = new RowQualifier(bdgEoBudgetVO1);

            rQ.setWhereClause("CldId ='" + this.getCldId() + "' and SlocId = " + this.getSlocId() + " and HoOrgId = '" +
                              this.getHoOrgId() + "' and EoId = " + resolvEl("#{pageFlowScope.P_EO_ID}") +
                              " and DocId ='" + resolvEl("#{pageFlowScope.P_DOC_ID}") + "'");
            Row[] filteredRows = bdgEoBudgetVO1.getFilteredRows(rQ);

            if (filteredRows.length > 0) {
                this.getAm().getEmpTargetVsActualVO().setNamedWhereClauseParam("PrdStrtDtBind",
                                                                               filteredRows[0].getAttribute("PrdStartDt"));
                this.getAm().getEmpTargetVsActualVO().setNamedWhereClauseParam("PrdEndDtBind",
                                                                               filteredRows[0].getAttribute("PrdEndDt"));
            }
            this.getAm().getEmpTargetVsActualVO().executeQuery();
            Row[] rows = this.getAm().getEmpTargetVsActualVO().getAllRowsInRange();
            if (rows.length > 0)
                return (Number) rows[0].getAttribute("ActualAmt");
            else
                return new Number(0);
        }
    }

    /**
     * Gets the attribute value for the calculated attribute TransPrvDiffAmt.
     * @return the TransPrvDiffAmt
     */
    public Number getTransPrvDiffAmt() {
        if (getAttributeInternal(TRANSPRVDIFFAMT) != null)
            return (Number) getAttributeInternal(TRANSPRVDIFFAMT);
        else {
            this.getAm().getEmpTargetVsActualVO().setNamedWhereClauseParam("CldIdBind", this.getCldId());
            this.getAm().getEmpTargetVsActualVO().setNamedWhereClauseParam("SlocIdBind", this.getSlocId());
            this.getAm().getEmpTargetVsActualVO().setNamedWhereClauseParam("OrgIdBind", this.getOrgId());
            this.getAm().getEmpTargetVsActualVO().setNamedWhereClauseParam("HoOrgIdBind", this.getHoOrgId());
            this.getAm().getEmpTargetVsActualVO().setNamedWhereClauseParam("EmpCodeBind", this.getEmpCode());
            ViewObjectImpl bdgEoBudgetVO1 = this.getAm().getBdgEoBudgetVO1();
            RowQualifier rQ = new RowQualifier(bdgEoBudgetVO1);

            rQ.setWhereClause("CldId ='" + this.getCldId() + "' and SlocId = " + this.getSlocId() + " and HoOrgId = '" +
                              this.getHoOrgId() + "' and EoId = " + resolvEl("#{pageFlowScope.P_EO_ID}") +
                              " and DocId ='" + resolvEl("#{pageFlowScope.P_DOC_ID}") + "'");
            Row[] filteredRows = bdgEoBudgetVO1.getFilteredRows(rQ);

            if (filteredRows.length > 0) {
                this.getAm().getEmpTargetVsActualVO().setNamedWhereClauseParam("PrdStrtDtBind",
                                                                               filteredRows[0].getAttribute("PrdStartDt"));
                this.getAm().getEmpTargetVsActualVO().setNamedWhereClauseParam("PrdEndDtBind",
                                                                               filteredRows[0].getAttribute("PrdEndDt"));
            }
            this.getAm().getEmpTargetVsActualVO().executeQuery();
            Row[] rows = this.getAm().getEmpTargetVsActualVO().getAllRowsInRange();
            if (rows.length > 0)
                return (Number) rows[0].getAttribute("DiffAmt");
            else
                return new Number(0);
        }

    }


    /**
     * Gets the attribute value for the calculated attribute TransPrvDiffType.
     * @return the TransPrvDiffType
     */
    public Integer getTransPrvDiffType() {
        if (getAttributeInternal(TRANSPRVDIFFTYPE) != null)
            return (Integer) getAttributeInternal(TRANSPRVDIFFTYPE);
        else {
            this.getAm().getEmpTargetVsActualVO().setNamedWhereClauseParam("CldIdBind", this.getCldId());
            this.getAm().getEmpTargetVsActualVO().setNamedWhereClauseParam("SlocIdBind", this.getSlocId());
            this.getAm().getEmpTargetVsActualVO().setNamedWhereClauseParam("OrgIdBind", this.getOrgId());
            this.getAm().getEmpTargetVsActualVO().setNamedWhereClauseParam("HoOrgIdBind", this.getHoOrgId());
            this.getAm().getEmpTargetVsActualVO().setNamedWhereClauseParam("EmpCodeBind", this.getEmpCode());
            ViewObjectImpl bdgEoBudgetVO1 = this.getAm().getBdgEoBudgetVO1();
            RowQualifier rQ = new RowQualifier(bdgEoBudgetVO1);

            rQ.setWhereClause("CldId ='" + this.getCldId() + "' and SlocId = " + this.getSlocId() + " and HoOrgId = '" +
                              this.getHoOrgId() + "' and EoId = " + resolvEl("#{pageFlowScope.P_EO_ID}") +
                              " and DocId ='" + resolvEl("#{pageFlowScope.P_DOC_ID}") + "'");
            Row[] filteredRows = bdgEoBudgetVO1.getFilteredRows(rQ);

            if (filteredRows.length > 0) {
                this.getAm().getEmpTargetVsActualVO().setNamedWhereClauseParam("PrdStrtDtBind",
                                                                               filteredRows[0].getAttribute("PrdStartDt"));
                this.getAm().getEmpTargetVsActualVO().setNamedWhereClauseParam("PrdEndDtBind",
                                                                               filteredRows[0].getAttribute("PrdEndDt"));
            }
            this.getAm().getEmpTargetVsActualVO().executeQuery();
            Row[] rows = this.getAm().getEmpTargetVsActualVO().getAllRowsInRange();
            if (rows.length > 0)
                return (Integer) rows[0].getAttribute("DiffAmtType");
            else
                return new Integer(0);
        }
    }


    /**
     * Gets the attribute value for the calculated attribute EmpRelDocIdTrans.
     * @return the EmpRelDocIdTrans
     */
    public String getEmpRelDocIdTrans() {
        /*  System.out.println("EmpCode is " + this.getEmpCode());
        System.out.println("Resolve Eo " + resolvEl("#{pageFlowScope.P_EO_ID}"));
        System.out.println("Doc is " + resolvEl("#{pageFlowScope.P_DOC_ID}"));
        System.out.println("*************8 " + this.getEmpCode().equals(resolvEl("#{pageFlowScope.P_EO_ID}")));
        */
        if (resolvEl("#{pageFlowScope.P_DOC_ID}") != null && this.getEmpCode() != null &&
            !this.getEmpCode().equals(resolvEl("#{pageFlowScope.P_EO_ID}"))) {
            ViewObjectImpl bdgEoBudgetVO2 = this.getAm().getBdgEoBudgetVO2();
            RowQualifier rQ = new RowQualifier(bdgEoBudgetVO2);

            rQ.setWhereClause("CldId ='" + this.getCldId() + "' and SlocId =" + this.getSlocId() + " and HoOrgId ='" +
                              this.getHoOrgId() + "' and DocId ='" + resolvEl("#{pageFlowScope.P_DOC_ID}") + "'");
            Row[] filteredRows = bdgEoBudgetVO2.getFilteredRows(rQ);

            if (filteredRows.length > 0) {
                Object prdStartDt = filteredRows[0].getAttribute("PrdStartDt");
                Object prdEndDt = filteredRows[0].getAttribute("PrdEndDt");

                RowQualifier newRq = new RowQualifier(bdgEoBudgetVO2);
                newRq.setWhereClause("CldId ='" + this.getCldId() + "' and SlocId =" + this.getSlocId() +
                                     " and HoOrgId ='" + this.getHoOrgId() + "' and EoId =" + this.getEmpCode() +
                                     " and PrdStartDt ='" + prdStartDt + "' and PrdEndDt ='" + prdEndDt + "'");

                Row[] row = bdgEoBudgetVO2.getFilteredRows(newRq);
                if (row.length > 0 && row[0].getAttribute("DocId") != null) {
                    return (String) row[0].getAttribute("DocId");
                }
            }
        }
        return resolvEl("#{pageFlowScope.P_DOC_ID}");
        //return (String) getAttributeInternal(EMPRELDOCIDTRANS);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link EmpBudgetStruct.
     */
    public RowIterator getEmpBudgetStruct() {
        System.out.println("Accessor row count of struct " +
                           ((RowIterator) getAttributeInternal(EMPBUDGETSTRUCT)).getAllRowsInRange().length);
        RowSet rs = (RowSet) getAttributeInternal(EMPBUDGETSTRUCT);
        rs.setNamedWhereClauseParam("BindEmpCode", this.getEmpCode());
        rs.executeQuery();
        System.out.println("EmpCode = " + this.getEmpCode() + " and Rows =" +
                           rs.getFilteredRows("CldId", this.getCldId()).length);
        RowIterator ri = rs.createRowSetIterator(null);
        return ri;
        //return (RowIterator) getAttributeInternal(EMPBUDGETSTRUCT);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link EmpBudgetDetail.
     */
    public RowIterator getEmpBudgetDetail() {
        return (RowIterator) getAttributeInternal(EMPBUDGETDETAIL);
    }

    /**
     * Generalized function to call object of application module.
     */
    public BdgEoProfileAMImpl getAm() {
        BdgEoProfileAMImpl am = (BdgEoProfileAMImpl) getApplicationModule();
        return am;
    }

    /**Method to resolve expression- returns String value*/
    protected String resolvEl(String data) {
        String val = null;
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        Object Message = valueExp.getValue(elContext);
        if (Message != null) {
            val = Message.toString();
        }
        return val;
    }
}
