package bdgeoprofileapp.model.views;

import bdgeoprofileapp.model.services.BdgEoProfileAMImpl;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.Row;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Jan 21 12:48:47 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ImmediateSubOrdDtlVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CldId,
        SlocId,
        OrgId,
        HoOrgId,
        BudgetSet,
        FyId,
        PrdStartDt,
        PrdEndDt,
        BudgAmt,
        DocId,
        BudgetId,
        EoId,
        FreezeFlag,
        EmpNameTrans,
        FreezeRemarksTrans;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int BUDGETSET = AttributesEnum.BudgetSet.index();
    public static final int FYID = AttributesEnum.FyId.index();
    public static final int PRDSTARTDT = AttributesEnum.PrdStartDt.index();
    public static final int PRDENDDT = AttributesEnum.PrdEndDt.index();
    public static final int BUDGAMT = AttributesEnum.BudgAmt.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int BUDGETID = AttributesEnum.BudgetId.index();
    public static final int EOID = AttributesEnum.EoId.index();
    public static final int FREEZEFLAG = AttributesEnum.FreezeFlag.index();
    public static final int EMPNAMETRANS = AttributesEnum.EmpNameTrans.index();
    public static final int FREEZEREMARKSTRANS = AttributesEnum.FreezeRemarksTrans.index();

    /**
     * This is the default constructor (do not remove).
     */
    public ImmediateSubOrdDtlVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute CldId.
     * @return the CldId
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Gets the attribute value for the calculated attribute SlocId.
     * @return the SlocId
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Gets the attribute value for the calculated attribute OrgId.
     * @return the OrgId
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Gets the attribute value for the calculated attribute HoOrgId.
     * @return the HoOrgId
     */
    public String getHoOrgId() {
        return (String) getAttributeInternal(HOORGID);
    }

    /**
     * Gets the attribute value for the calculated attribute BudgetSet.
     * @return the BudgetSet
     */
    public Integer getBudgetSet() {
        return (Integer) getAttributeInternal(BUDGETSET);
    }

    /**
     * Gets the attribute value for the calculated attribute FyId.
     * @return the FyId
     */
    public Integer getFyId() {
        return (Integer) getAttributeInternal(FYID);
    }

    /**
     * Gets the attribute value for the calculated attribute PrdStartDt.
     * @return the PrdStartDt
     */
    public Timestamp getPrdStartDt() {
        return (Timestamp) getAttributeInternal(PRDSTARTDT);
    }

    /**
     * Gets the attribute value for the calculated attribute PrdEndDt.
     * @return the PrdEndDt
     */
    public Timestamp getPrdEndDt() {
        return (Timestamp) getAttributeInternal(PRDENDDT);
    }

    /**
     * Gets the attribute value for the calculated attribute BudgAmt.
     * @return the BudgAmt
     */
    public Number getBudgAmt() {
        return (Number) getAttributeInternal(BUDGAMT);
    }

    /**
     * Gets the attribute value for the calculated attribute DocId.
     * @return the DocId
     */
    public String getDocId() {
        return (String) getAttributeInternal(DOCID);
    }

    /**
     * Gets the attribute value for the calculated attribute BudgetId.
     * @return the BudgetId
     */
    public String getBudgetId() {
        return (String) getAttributeInternal(BUDGETID);
    }

    /**
     * Gets the attribute value for the calculated attribute EoId.
     * @return the EoId
     */
    public Integer getEoId() {
        return (Integer) getAttributeInternal(EOID);
    }


    /**
     * Gets the attribute value for the calculated attribute FreezeFlag.
     * @return the FreezeFlag
     */
    public String getFreezeFlag() {
        return (String) getAttributeInternal(FREEZEFLAG);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute FreezeFlag.
     * @param value value to set the  FreezeFlag
     */
    public void setFreezeFlag(String value) {
        setAttributeInternal(FREEZEFLAG, value);
    }

    /**
     * Gets the attribute value for the calculated attribute EmpNameTrans.
     * @return the EmpNameTrans
     */
    public String getEmpNameTrans() {
        if (getAttributeInternal(EMPNAMETRANS) == null && this.getEoId() != null) {
            ViewObjectImpl eoVO1 = getAm().getLOVEoIdVO1();
            eoVO1.setNamedWhereClauseParam("BindCldId", this.getCldId());
            eoVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocId());
            eoVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgId());
            eoVO1.setNamedWhereClauseParam("BindUserId", resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
            eoVO1.setNamedWhereClauseParam("BindEoId", this.getEoId());
            eoVO1.executeQuery();
            Row[] allRowsInRange = eoVO1.getAllRowsInRange();

            if (allRowsInRange.length > 0) {
                return (String) allRowsInRange[0].getAttribute("EoNm");
            }
        }
        return (String) getAttributeInternal(EMPNAMETRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute EmpNameTrans.
     * @param value value to set the  EmpNameTrans
     */
    public void setEmpNameTrans(String value) {
        setAttributeInternal(EMPNAMETRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute FreezeRemarksTrans.
     * @return the FreezeRemarksTrans
     */
    public String getFreezeRemarksTrans() {
        return (String) getAttributeInternal(FREEZEREMARKSTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute FreezeRemarksTrans.
     * @param value value to set the  FreezeRemarksTrans
     */
    public void setFreezeRemarksTrans(String value) {
        setAttributeInternal(FREEZEREMARKSTRANS, value);
    }

    /**
     * Method will return Application Module App
     */
    public BdgEoProfileAMImpl getAm() {
        BdgEoProfileAMImpl am = (BdgEoProfileAMImpl) getApplicationModule();
        return am;
    }

    /**Method to resolve expression- returns String value*/
    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }
}

