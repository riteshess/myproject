package bdgeoprofileapp.model.views;

import bdgeoprofileapp.model.services.BdgEoProfileAMImpl;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Feb 06 12:53:13 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SearchDataVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CldId,
        SlocId,
        OrgId,
        OrgDesc,
        HoOrgId,
        BudgetSet,
        PrdStartDt,
        PrdEndDt,
        DocId,
        BudgetId,
        BudgetNm,
        EoId,
        EoNm,
        BudgetMethod,
        Region,
        BudgAmt,
        CurrIdSp,
        CurrDescTxn,
        BdgGrpId,
        BudgetStat,
        BudgetStatVal,
        PendingAt,
        MgrCode,
        BudgAmtNotaTrans,
        ImmediateEmpColorTrans;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int ORGDESC = AttributesEnum.OrgDesc.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int BUDGETSET = AttributesEnum.BudgetSet.index();
    public static final int PRDSTARTDT = AttributesEnum.PrdStartDt.index();
    public static final int PRDENDDT = AttributesEnum.PrdEndDt.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int BUDGETID = AttributesEnum.BudgetId.index();
    public static final int BUDGETNM = AttributesEnum.BudgetNm.index();
    public static final int EOID = AttributesEnum.EoId.index();
    public static final int EONM = AttributesEnum.EoNm.index();
    public static final int BUDGETMETHOD = AttributesEnum.BudgetMethod.index();
    public static final int REGION = AttributesEnum.Region.index();
    public static final int BUDGAMT = AttributesEnum.BudgAmt.index();
    public static final int CURRIDSP = AttributesEnum.CurrIdSp.index();
    public static final int CURRDESCTXN = AttributesEnum.CurrDescTxn.index();
    public static final int BDGGRPID = AttributesEnum.BdgGrpId.index();
    public static final int BUDGETSTAT = AttributesEnum.BudgetStat.index();
    public static final int BUDGETSTATVAL = AttributesEnum.BudgetStatVal.index();
    public static final int PENDINGAT = AttributesEnum.PendingAt.index();
    public static final int MGRCODE = AttributesEnum.MgrCode.index();
    public static final int BUDGAMTNOTATRANS = AttributesEnum.BudgAmtNotaTrans.index();
    public static final int IMMEDIATEEMPCOLORTRANS = AttributesEnum.ImmediateEmpColorTrans.index();

    /**
     * This is the default constructor (do not remove).
     */
    public SearchDataVORowImpl() {
    }


    /**
     * Gets the attribute value for the calculated attribute CldId.
     * @return the CldId
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Gets the attribute value for the calculated attribute SlocId.
     * @return the SlocId
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Gets the attribute value for the calculated attribute OrgId.
     * @return the OrgId
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Gets the attribute value for the calculated attribute OrgDesc.
     * @return the OrgDesc
     */
    public String getOrgDesc() {
        return (String) getAttributeInternal(ORGDESC);
    }

    /**
     * Gets the attribute value for the calculated attribute HoOrgId.
     * @return the HoOrgId
     */
    public String getHoOrgId() {
        return (String) getAttributeInternal(HOORGID);
    }

    /**
     * Gets the attribute value for the calculated attribute BudgetSet.
     * @return the BudgetSet
     */
    public Integer getBudgetSet() {
        return (Integer) getAttributeInternal(BUDGETSET);
    }

    /**
     * Gets the attribute value for the calculated attribute PrdStartDt.
     * @return the PrdStartDt
     */
    public Timestamp getPrdStartDt() {
        return (Timestamp) getAttributeInternal(PRDSTARTDT);
    }

    /**
     * Gets the attribute value for the calculated attribute PrdEndDt.
     * @return the PrdEndDt
     */
    public Timestamp getPrdEndDt() {
        return (Timestamp) getAttributeInternal(PRDENDDT);
    }

    /**
     * Gets the attribute value for the calculated attribute DocId.
     * @return the DocId
     */
    public String getDocId() {
        return (String) getAttributeInternal(DOCID);
    }

    /**
     * Gets the attribute value for the calculated attribute BudgetId.
     * @return the BudgetId
     */
    public String getBudgetId() {
        return (String) getAttributeInternal(BUDGETID);
    }

    /**
     * Gets the attribute value for the calculated attribute BudgetNm.
     * @return the BudgetNm
     */
    public String getBudgetNm() {
        return (String) getAttributeInternal(BUDGETNM);
    }

    /**
     * Gets the attribute value for the calculated attribute EoId.
     * @return the EoId
     */
    public Integer getEoId() {
        return (Integer) getAttributeInternal(EOID);
    }

    /**
     * Gets the attribute value for the calculated attribute EoNm.
     * @return the EoNm
     */
    public String getEoNm() {
        return (String) getAttributeInternal(EONM);
    }

    /**
     * Gets the attribute value for the calculated attribute BudgetMethod.
     * @return the BudgetMethod
     */
    public Integer getBudgetMethod() {
        return (Integer) getAttributeInternal(BUDGETMETHOD);
    }

    /**
     * Gets the attribute value for the calculated attribute Region.
     * @return the Region
     */
    public String getRegion() {
        return (String) getAttributeInternal(REGION);
    }

    /**
     * Gets the attribute value for the calculated attribute BudgAmt.
     * @return the BudgAmt
     */
    public Number getBudgAmt() {
        return (Number) getAttributeInternal(BUDGAMT);
    }

    /**
     * Gets the attribute value for the calculated attribute CurrIdSp.
     * @return the CurrIdSp
     */
    public Integer getCurrIdSp() {
        return (Integer) getAttributeInternal(CURRIDSP);
    }

    /**
     * Gets the attribute value for the calculated attribute CurrDescTxn.
     * @return the CurrDescTxn
     */
    public String getCurrDescTxn() {
        return (String) getAttributeInternal(CURRDESCTXN);
    }

    /**
     * Gets the attribute value for the calculated attribute BdgGrpId.
     * @return the BdgGrpId
     */
    public Integer getBdgGrpId() {
        return (Integer) getAttributeInternal(BDGGRPID);
    }

    /**
     * Gets the attribute value for the calculated attribute BudgetStat.
     * @return the BudgetStat
     */
    public Integer getBudgetStat() {
        return (Integer) getAttributeInternal(BUDGETSTAT);
    }

    /**
     * Gets the attribute value for the calculated attribute BudgetStatVal.
     * @return the BudgetStatVal
     */
    public String getBudgetStatVal() {
        return (String) getAttributeInternal(BUDGETSTATVAL);
    }

    /**
     * Gets the attribute value for the calculated attribute PendingAt.
     * @return the PendingAt
     */
    public String getPendingAt() {
        return (String) getAttributeInternal(PENDINGAT);
    }

    /**
     * Gets the attribute value for the calculated attribute MgrCode.
     * @return the MgrCode
     */
    public Integer getMgrCode() {
        return (Integer) getAttributeInternal(MGRCODE);
    }

    /**
     * Gets the attribute value for the calculated attribute BudgAmtNotaTrans.
     * @return the BudgAmtNotaTrans
     */
    public Number getBudgAmtNotaTrans() {
        if (getAttributeInternal(BUDGAMTNOTATRANS) == null && this.getBudgAmt() != null) {
            return this.getAm().convertNumberToNotation(getBudgAmt());
        }
        return (Number) getAttributeInternal(BUDGAMTNOTATRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute BudgAmtNotaTrans.
     * @param value value to set the  BudgAmtNotaTrans
     */
    public void setBudgAmtNotaTrans(Number value) {
        setAttributeInternal(BUDGAMTNOTATRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ImmediateEmpColorTrans.
     * @return the ImmediateEmpColorTrans
     */
    public Integer getImmediateEmpColorTrans() {
        if (getAttributeInternal(IMMEDIATEEMPCOLORTRANS) == null) {
            if (resolvEl("#{pageFlowScope.P_EMP_CODE}") != null && this.getBudgetStat() == 2 &&
                this.getMgrCode() != null) {
                if (Integer.parseInt(resolvEl("#{pageFlowScope.P_EMP_CODE}").toString()) == this.getMgrCode()) {
                    return 1;
                }
            } else {
                return 0;
            }
        }
        return 0;
        //return (Integer) getAttributeInternal(IMMEDIATEEMPCOLORTRANS);
    }

    /**
     * Method will return Application Module App
     */
    public BdgEoProfileAMImpl getAm() {
        BdgEoProfileAMImpl am = (BdgEoProfileAMImpl) getApplicationModule();
        return am;
    }

    /**Method to resolve expression- returns String value*/
    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }
}
