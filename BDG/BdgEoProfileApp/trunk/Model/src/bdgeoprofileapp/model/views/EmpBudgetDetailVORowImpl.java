package bdgeoprofileapp.model.views;

import bdgeoprofileapp.model.services.BdgEoProfileAMImpl;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.Number;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Jan 09 11:03:42 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class EmpBudgetDetailVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CldId,
        SlocId,
        HoOrgId,
        OrgId,
        EmpCode,
        EmpNm,
        MgrCode,
        MgrNm,
        EmpId,
        UsrId,
        ImagePath,
        EmpAssignedAmtTrans,
        EmpBudgAmtTrans,
        BdgStatusTrans,
        BdgRemarksTrans,
        DispBudgetedAmtTrans,
        DispTargetAmtTrans,
        DispDiffInAmtTrans,
        UpdateBdgAmtCBTrans,
        DispEmpNameTrans,
        DisplayFieeldsTrans,
        EmpPreviousBdgAmtTrans,
        DiffInTargetAndBdgAmtTrans,
        DiffInTargetAndBdgColorTrans,
        TransPrvBudgetAmt,
        TransPrvActualAmt,
        TransPrvDiffAmt,
        TransPrvDiffType,
        CldIdEmpBudgetDetail_2;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int EMPCODE = AttributesEnum.EmpCode.index();
    public static final int EMPNM = AttributesEnum.EmpNm.index();
    public static final int MGRCODE = AttributesEnum.MgrCode.index();
    public static final int MGRNM = AttributesEnum.MgrNm.index();
    public static final int EMPID = AttributesEnum.EmpId.index();
    public static final int USRID = AttributesEnum.UsrId.index();
    public static final int IMAGEPATH = AttributesEnum.ImagePath.index();
    public static final int EMPASSIGNEDAMTTRANS = AttributesEnum.EmpAssignedAmtTrans.index();
    public static final int EMPBUDGAMTTRANS = AttributesEnum.EmpBudgAmtTrans.index();
    public static final int BDGSTATUSTRANS = AttributesEnum.BdgStatusTrans.index();
    public static final int BDGREMARKSTRANS = AttributesEnum.BdgRemarksTrans.index();
    public static final int DISPBUDGETEDAMTTRANS = AttributesEnum.DispBudgetedAmtTrans.index();
    public static final int DISPTARGETAMTTRANS = AttributesEnum.DispTargetAmtTrans.index();
    public static final int DISPDIFFINAMTTRANS = AttributesEnum.DispDiffInAmtTrans.index();
    public static final int UPDATEBDGAMTCBTRANS = AttributesEnum.UpdateBdgAmtCBTrans.index();
    public static final int DISPEMPNAMETRANS = AttributesEnum.DispEmpNameTrans.index();
    public static final int DISPLAYFIEELDSTRANS = AttributesEnum.DisplayFieeldsTrans.index();
    public static final int EMPPREVIOUSBDGAMTTRANS = AttributesEnum.EmpPreviousBdgAmtTrans.index();
    public static final int DIFFINTARGETANDBDGAMTTRANS = AttributesEnum.DiffInTargetAndBdgAmtTrans.index();
    public static final int DIFFINTARGETANDBDGCOLORTRANS = AttributesEnum.DiffInTargetAndBdgColorTrans.index();
    public static final int TRANSPRVBUDGETAMT = AttributesEnum.TransPrvBudgetAmt.index();
    public static final int TRANSPRVACTUALAMT = AttributesEnum.TransPrvActualAmt.index();
    public static final int TRANSPRVDIFFAMT = AttributesEnum.TransPrvDiffAmt.index();
    public static final int TRANSPRVDIFFTYPE = AttributesEnum.TransPrvDiffType.index();
    public static final int CLDIDEMPBUDGETDETAIL_2 = AttributesEnum.CldIdEmpBudgetDetail_2.index();

    /**
     * This is the default constructor (do not remove).
     */
    public EmpBudgetDetailVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute CldId.
     * @return the CldId
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Gets the attribute value for the calculated attribute SlocId.
     * @return the SlocId
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Gets the attribute value for the calculated attribute HoOrgId.
     * @return the HoOrgId
     */
    public String getHoOrgId() {
        return (String) getAttributeInternal(HOORGID);
    }

    /**
     * Gets the attribute value for the calculated attribute OrgId.
     * @return the OrgId
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Gets the attribute value for the calculated attribute EmpCode.
     * @return the EmpCode
     */
    public Integer getEmpCode() {
        return (Integer) getAttributeInternal(EMPCODE);
    }

    /**
     * Gets the attribute value for the calculated attribute EmpNm.
     * @return the EmpNm
     */
    public String getEmpNm() {
        return (String) getAttributeInternal(EMPNM);
    }

    /**
     * Gets the attribute value for the calculated attribute MgrCode.
     * @return the MgrCode
     */
    public Integer getMgrCode() {
        return (Integer) getAttributeInternal(MGRCODE);
    }

    /**
     * Gets the attribute value for the calculated attribute MgrNm.
     * @return the MgrNm
     */
    public String getMgrNm() {
        return (String) getAttributeInternal(MGRNM);
    }

    /**
     * Gets the attribute value for the calculated attribute EmpId.
     * @return the EmpId
     */
    public String getEmpId() {
        return (String) getAttributeInternal(EMPID);
    }

    /**
     * Gets the attribute value for the calculated attribute UsrId.
     * @return the UsrId
     */
    public Integer getUsrId() {
        return (Integer) getAttributeInternal(USRID);
    }

    /**
     * Gets the attribute value for the calculated attribute ImagePath.
     * @return the ImagePath
     */
    public String getImagePath() {
        return (String) getAttributeInternal(IMAGEPATH);
    }

    /**
     * Gets the attribute value for the calculated attribute EmpAssignedAmtTrans.
     * @return the EmpAssignedAmtTrans
     */
    public Number getEmpAssignedAmtTrans() {
        if (getAttributeInternal(EMPASSIGNEDAMTTRANS) == null && this.getEmpCode() != null) {
            ViewObjectImpl bdgEoBudgetVO1 = this.getAm().getBdgEoBudgetVO1();
            RowQualifier rowQua = new RowQualifier(bdgEoBudgetVO1);

            rowQua.setWhereClause("CldId ='" + this.getCldId() + "' and SlocId = " + this.getSlocId() +
                                  " and HoOrgId = '" + this.getHoOrgId() + "' and EoId = " +
                                  resolvEl("#{pageFlowScope.P_EO_ID}") + " and DocId ='" +
                                  resolvEl("#{pageFlowScope.P_DOC_ID}") + "'");
            Row[] fr = bdgEoBudgetVO1.getFilteredRows(rowQua);

            ViewObjectImpl bdgEoBudgetVO2 = this.getAm().getGetBdgEoDetailVO1();

            if (fr.length > 0) {
                Object bdgFyId = fr[0].getAttribute("BdgFyId");
                Object prdStDt = fr[0].getAttribute("PrdStartDt");
                Object prdEndDt = fr[0].getAttribute("PrdEndDt");

                bdgEoBudgetVO2.setNamedWhereClauseParam("BindCldId", this.getCldId());
                bdgEoBudgetVO2.setNamedWhereClauseParam("BindSlocId", this.getSlocId());
                bdgEoBudgetVO2.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgId());
                bdgEoBudgetVO2.setNamedWhereClauseParam("BindOrgId", this.getOrgId());
                bdgEoBudgetVO2.setNamedWhereClauseParam("BindEoId", this.getEmpCode());
                bdgEoBudgetVO2.setNamedWhereClauseParam("BindBdgFyId", bdgFyId);
                bdgEoBudgetVO2.setNamedWhereClauseParam("BindPrdStDate", prdStDt);
                bdgEoBudgetVO2.setNamedWhereClauseParam("BindPrdEndDate", prdEndDt);
                bdgEoBudgetVO2.setNamedWhereClauseParam("BindBdgStatus", 0);
                bdgEoBudgetVO2.executeQuery();

                /* RowQualifier rQ = new RowQualifier(bdgEoBudgetVO2);
                //rQ.setWhereClause("EoId =" + this.getEmpCode() + " and FyId =" + fyId + " and BdgFyId =" + bdgFyId);
                rQ.setWhereClause("EoId =" + this.getEmpCode() + " and BdgFyId =" + bdgFyId);
                 */
                Row[] filteredRows = bdgEoBudgetVO2.getAllRowsInRange();
                //System.out.println("***** Fil " + filteredRows.length);
                if (filteredRows.length > 0) {
                    return (Number) filteredRows[0].getAttribute("MgrBudgAmt");
                }
            }
        }
        return (Number) getAttributeInternal(EMPASSIGNEDAMTTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute EmpAssignedAmtTrans.
     * @param value value to set the  EmpAssignedAmtTrans
     */
    public void setEmpAssignedAmtTrans(Number value) {
        setAttributeInternal(EMPASSIGNEDAMTTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute EmpAmtTrans.
     * @return the EmpAmtTrans
     */
    public Number getEmpBudgAmtTrans() {
        if (getAttributeInternal(EMPBUDGAMTTRANS) == null && this.getEmpCode() != null) {
            ViewObjectImpl bdgEoBudgetVO1 = this.getAm().getBdgEoBudgetVO1();
            RowQualifier rowQua = new RowQualifier(bdgEoBudgetVO1);

            rowQua.setWhereClause("CldId ='" + this.getCldId() + "' and SlocId = " + this.getSlocId() +
                                  " and HoOrgId = '" + this.getHoOrgId() + "' and EoId = " +
                                  resolvEl("#{pageFlowScope.P_EO_ID}") + " and DocId ='" +
                                  resolvEl("#{pageFlowScope.P_DOC_ID}") + "'");
            Row[] fr = bdgEoBudgetVO1.getFilteredRows(rowQua);

            ViewObjectImpl bdgEoBudgetVO2 = this.getAm().getGetBdgEoDetailVO1();
            if (fr.length > 0) {
                Object bdgFyId = fr[0].getAttribute("BdgFyId");
                Object prdStDt = fr[0].getAttribute("PrdStartDt");
                Object prdEndDt = fr[0].getAttribute("PrdEndDt");

                bdgEoBudgetVO2.setNamedWhereClauseParam("BindCldId", this.getCldId());
                bdgEoBudgetVO2.setNamedWhereClauseParam("BindSlocId", this.getSlocId());
                bdgEoBudgetVO2.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgId());
                bdgEoBudgetVO2.setNamedWhereClauseParam("BindOrgId", this.getOrgId());
                bdgEoBudgetVO2.setNamedWhereClauseParam("BindEoId", this.getEmpCode());
                bdgEoBudgetVO2.setNamedWhereClauseParam("BindBdgFyId", bdgFyId);
                bdgEoBudgetVO2.setNamedWhereClauseParam("BindPrdStDate", prdStDt);
                bdgEoBudgetVO2.setNamedWhereClauseParam("BindPrdEndDate", prdEndDt);
                bdgEoBudgetVO2.setNamedWhereClauseParam("BindBdgStatus", 1);
                bdgEoBudgetVO2.executeQuery();

                /* RowQualifier rQ = new RowQualifier(bdgEoBudgetVO2);
                //rQ.setWhereClause("EoId =" + this.getEmpCode() + " and FyId =" + fyId + " and BdgFyId =" + bdgFyId);
                rQ.setWhereClause("EoId =" + this.getEmpCode() + " and BdgFyId =" + bdgFyId);
                 */
                Row[] filteredRows = bdgEoBudgetVO2.getAllRowsInRange();
                /* Integer status = 0;
                for (int i = 0; i < filteredRows.length; i++) {
                    status = (Integer) filteredRows[i].getAttribute("BudgetStat");
                    if (status != null && (status == 2 || status == 3)) {
                        return (Number) filteredRows[i].getAttribute("BudgAmt");
                    }
                } */
                Integer status = 0;

                /// Following loop will check whether any approved Budget Set is present or not
                /// If buget set is approved then it will display its value
                for (Row row : filteredRows) {
                    status = (Integer) row.getAttribute("BudgetStat");
                    if (status != null && status == 3) {
                        return (Number) row.getAttribute("BudgAmt");
                    }
                }

                /// Following loop will check whether any budget set is in forwarded or not
                /// If forwarded then it will display its value
                /// This loop will run after checking approved budget set is present or not
                for (Row row : filteredRows) {
                    status = (Integer) row.getAttribute("BudgetStat");
                    if (status != null && status == 2) {
                        return (Number) row.getAttribute("BudgAmt");
                    }
                }
            }
        }
        return (Number) getAttributeInternal(EMPBUDGAMTTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute EmpAmtTrans.
     * @param value value to set the  EmpAmtTrans
     */
    public void setEmpBudgAmtTrans(Number value) {
        setAttributeInternal(EMPBUDGAMTTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute BdgStatusTrans.
     * @return the BdgStatusTrans
     */
    public Integer getBdgStatusTrans() {
        if (getAttributeInternal(BDGSTATUSTRANS) == null) {
            ViewObjectImpl bdgEoBudgetVO1 = this.getAm().getBdgEoBudgetVO1();
            RowQualifier rowQua = new RowQualifier(bdgEoBudgetVO1);

            rowQua.setWhereClause("CldId ='" + this.getCldId() + "' and SlocId = " + this.getSlocId() +
                                  " and HoOrgId = '" + this.getHoOrgId() + "' and EoId = " +
                                  resolvEl("#{pageFlowScope.P_EO_ID}") + " and DocId ='" +
                                  resolvEl("#{pageFlowScope.P_DOC_ID}") + "'");
            Row[] fr = bdgEoBudgetVO1.getFilteredRows(rowQua);

            ViewObjectImpl bdgEoBudgetVO2 = this.getAm().getGetBdgEoDetailVO1();
            if (fr.length > 0) {
                Object bdgFyId = fr[0].getAttribute("BdgFyId");
                Object prdStDt = fr[0].getAttribute("PrdStartDt");
                Object prdEndDt = fr[0].getAttribute("PrdEndDt");

                bdgEoBudgetVO2.setNamedWhereClauseParam("BindCldId", this.getCldId());
                bdgEoBudgetVO2.setNamedWhereClauseParam("BindSlocId", this.getSlocId());
                bdgEoBudgetVO2.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgId());
                bdgEoBudgetVO2.setNamedWhereClauseParam("BindOrgId", this.getOrgId());
                bdgEoBudgetVO2.setNamedWhereClauseParam("BindEoId", this.getEmpCode());
                bdgEoBudgetVO2.setNamedWhereClauseParam("BindBdgFyId", bdgFyId);
                bdgEoBudgetVO2.setNamedWhereClauseParam("BindPrdStDate", prdStDt);
                bdgEoBudgetVO2.setNamedWhereClauseParam("BindPrdEndDate", prdEndDt);
                bdgEoBudgetVO2.setNamedWhereClauseParam("BindBdgStatus", null);
                bdgEoBudgetVO2.executeQuery();

                /* RowQualifier rQ = new RowQualifier(bdgEoBudgetVO2);
                //rQ.setWhereClause("EoId =" + this.getEmpCode() + " and FyId =" + fyId + " and BdgFyId =" + bdgFyId);
                rQ.setWhereClause("EoId =" + this.getEmpCode() + " and BdgFyId =" + bdgFyId);
                 */
                Row[] filteredRows = bdgEoBudgetVO2.getAllRowsInRange();
                /* if (filteredRows.length > 0) {
                    return (Integer) filteredRows[0].getAttribute("BudgetStat");
                } */

                Integer status = 0;

                /// Following loop will check whether any approved Budget Set is present or not
                /// If buget set is approved then it will display its value
                for (Row row : filteredRows) {
                    status = (Integer) row.getAttribute("BudgetStat");
                    if (status != null && status == 3) {
                        return (Integer) row.getAttribute("BudgetStat");
                    }
                }

                /// Following loop will check whether any budget set is in forwarded or not
                /// If forwarded then it will display its value
                /// This loop will run after checking approved budget set is present or not
                for (Row row : filteredRows) {
                    status = (Integer) row.getAttribute("BudgetStat");
                    if (status != null && status == 2) {
                        return (Integer) row.getAttribute("BudgetStat");
                    }
                }
            }
        }
        return (Integer) getAttributeInternal(BDGSTATUSTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute BdgStatusTrans.
     * @param value value to set the  BdgStatusTrans
     */
    public void setBdgStatusTrans(Integer value) {
        setAttributeInternal(BDGSTATUSTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute BdgRemarksTrans.
     * @return the BdgRemarksTrans
     */
    public String getBdgRemarksTrans() {
        /* if (getAttributeInternal(BDGREMARKSTRANS) == null && this.getEmpCode() != null) {
            ViewObjectImpl bdgEoBudgetVO1 = this.getAm().getBdgEoBudgetVO1();
            RowQualifier rowQua = new RowQualifier(bdgEoBudgetVO1);

            rowQua.setWhereClause("CldId ='" + this.getCldId() + "' and SlocId = " + this.getSlocId() +
                                  " and HoOrgId = '" + this.getHoOrgId() + "' and EoId = " +
                                  resolvEl("#{pageFlowScope.P_EO_ID}") + " and DocId ='" +
                                  resolvEl("#{pageFlowScope.P_DOC_ID}") + "'");
            Row[] fr = bdgEoBudgetVO1.getFilteredRows(rowQua);

            ViewObjectImpl bdgEoBudgetVO2 = this.getAm().getGetBdgEoDetailVO1();
            if (fr.length > 0) {
                Object bdgFyId = fr[0].getAttribute("BdgFyId");
                Object prdStDt = fr[0].getAttribute("PrdStartDt");
                Object prdEndDt = fr[0].getAttribute("PrdEndDt");

                bdgEoBudgetVO2.setNamedWhereClauseParam("BindCldId", this.getCldId());
                bdgEoBudgetVO2.setNamedWhereClauseParam("BindSlocId", this.getSlocId());
                bdgEoBudgetVO2.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgId());
                bdgEoBudgetVO2.setNamedWhereClauseParam("BindOrgId", this.getOrgId());
                bdgEoBudgetVO2.setNamedWhereClauseParam("BindEoId", this.getEmpCode());
                bdgEoBudgetVO2.setNamedWhereClauseParam("BindBdgFyId", bdgFyId);
                bdgEoBudgetVO2.setNamedWhereClauseParam("BindPrdStDate", prdStDt);
                bdgEoBudgetVO2.setNamedWhereClauseParam("BindPrdEndDate", prdEndDt);
                bdgEoBudgetVO2.setNamedWhereClauseParam("BindBdgStatus", 1);
                bdgEoBudgetVO2.executeQuery();

                Row[] filteredRows = bdgEoBudgetVO2.getAllRowsInRange();
                if (filteredRows.length > 0) {
                    return (String) filteredRows[0].getAttribute("Remarks");
                }
            }
        } */
        return (String) getAttributeInternal(BDGREMARKSTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute BdgRemarksTrans.
     * @param value value to set the  BdgRemarksTrans
     */
    public void setBdgRemarksTrans(String value) {
        setAttributeInternal(BDGREMARKSTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute DispBudgetedAmtTrans.
     * @return the DispBudgetedAmtTrans
     */
    public Number getDispBudgetedAmtTrans() {
        if (getAttributeInternal(DISPBUDGETEDAMTTRANS) == null && this.getEmpBudgAmtTrans() != null) {
            return this.getEmpBudgAmtTrans();
        }
        return (Number) getAttributeInternal(DISPBUDGETEDAMTTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute DispBudgetedAmtTrans.
     * @param value value to set the  DispBudgetedAmtTrans
     */
    public void setDispBudgetedAmtTrans(Number value) {
        setAttributeInternal(DISPBUDGETEDAMTTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute DispTargetAmtTrans.
     * @return the DispTargetAmtTrans
     */
    public Number getDispTargetAmtTrans() {
        if (getAttributeInternal(DISPTARGETAMTTRANS) == null && this.getEmpAssignedAmtTrans() != null) {
            return this.getEmpAssignedAmtTrans();
        }
        return (Number) getAttributeInternal(DISPTARGETAMTTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute DispTargetAmtTrans.
     * @param value value to set the  DispTargetAmtTrans
     */
    public void setDispTargetAmtTrans(Number value) {
        setAttributeInternal(DISPTARGETAMTTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute DispDiffInAmtTrans.
     * @return the DispDiffInAmtTrans
     */
    public Number getDispDiffInAmtTrans() {
        if (getAttributeInternal(DISPDIFFINAMTTRANS) == null && this.getEmpAssignedAmtTrans() != null &&
            this.getEmpBudgAmtTrans() != null) {
            return this.getEmpBudgAmtTrans().subtract(this.getEmpAssignedAmtTrans());
        }
        return (Number) getAttributeInternal(DISPDIFFINAMTTRANS);
    }

    /**
     * Gets the attribute value for the calculated attribute UpdateBdgAmtCBTrans.
     * @return the UpdateBdgAmtCBTrans
     */
    public String getUpdateBdgAmtCBTrans() {
        return (String) getAttributeInternal(UPDATEBDGAMTCBTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute UpdateBdgAmtCBTrans.
     * @param value value to set the  UpdateBdgAmtCBTrans
     */
    public void setUpdateBdgAmtCBTrans(String value) {
        setAttributeInternal(UPDATEBDGAMTCBTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute DispEmpNameTrans.
     * @return the DispEmpNameTrans
     */
    public String getDispEmpNameTrans() {
        if (getAttributeInternal(DISPEMPNAMETRANS) == null && this.getEmpNm() != null) {
            return this.getEmpNm();
        }
        return (String) getAttributeInternal(DISPEMPNAMETRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute DispEmpNameTrans.
     * @param value value to set the  DispEmpNameTrans
     */
    public void setDispEmpNameTrans(String value) {
        setAttributeInternal(DISPEMPNAMETRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute DisplayFieeldsTrans.
     * @return the DisplayFieeldsTrans
     */
    public String getDisplayFieeldsTrans() {
        if (getAttributeInternal(DISPLAYFIEELDSTRANS) == null && this.getDispDiffInAmtTrans() != null) {
            if (this.getDispDiffInAmtTrans().compareTo(0) > 0) {
                return "Y";
            } else {
                return "N";
            }
        }
        return (String) getAttributeInternal(DISPLAYFIEELDSTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute DisplayFieeldsTrans.
     * @param value value to set the  DisplayFieeldsTrans
     */
    public void setDisplayFieeldsTrans(String value) {
        setAttributeInternal(DISPLAYFIEELDSTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute EmpPreviousBdgAmtTrans.
     * @return the EmpPreviousBdgAmtTrans
     */
    public Number getEmpPreviousBdgAmtTrans() {
        if (getAttributeInternal(EMPPREVIOUSBDGAMTTRANS) == null && this.getEmpCode() != null) {
            ViewObjectImpl bdgEoBudgetVO1 = this.getAm().getBdgEoBudgetVO1();
            RowQualifier rowQua = new RowQualifier(bdgEoBudgetVO1);

            rowQua.setWhereClause("CldId ='" + this.getCldId() + "' and SlocId = " + this.getSlocId() +
                                  " and HoOrgId = '" + this.getHoOrgId() + "' and EoId = " +
                                  resolvEl("#{pageFlowScope.P_EO_ID}") + " and DocId ='" +
                                  resolvEl("#{pageFlowScope.P_DOC_ID}") + "'");
            Row[] fr = bdgEoBudgetVO1.getFilteredRows(rowQua);

            ViewObjectImpl bdgEoBudgetVO2 = this.getAm().getGetEmpPreviousBdgAmtVO1();
            if (fr.length > 0) {
                Object bdgFyId = fr[0].getAttribute("BdgFyId");
                Object prdStDt = fr[0].getAttribute("PrdStartDt");
                Object prdEndDt = fr[0].getAttribute("PrdEndDt");

                bdgEoBudgetVO2.setNamedWhereClauseParam("BindCldId", this.getCldId());
                bdgEoBudgetVO2.setNamedWhereClauseParam("BindSlocId", this.getSlocId());
                bdgEoBudgetVO2.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgId());
                bdgEoBudgetVO2.setNamedWhereClauseParam("BindOrgId", this.getOrgId());
                bdgEoBudgetVO2.setNamedWhereClauseParam("BindEoId", this.getEmpCode());
                bdgEoBudgetVO2.setNamedWhereClauseParam("BindBdgFyId", bdgFyId);
                bdgEoBudgetVO2.setNamedWhereClauseParam("BindPrdStDate", prdStDt);
                bdgEoBudgetVO2.setNamedWhereClauseParam("BindPrdEndDate", prdEndDt);
                bdgEoBudgetVO2.executeQuery();

                /* RowQualifier rQ = new RowQualifier(bdgEoBudgetVO2);
                //rQ.setWhereClause("EoId =" + this.getEmpCode() + " and FyId =" + fyId + " and BdgFyId =" + bdgFyId);
                rQ.setWhereClause("EoId =" + this.getEmpCode() + " and BdgFyId =" + bdgFyId);
                 */
                Row[] filteredRows = bdgEoBudgetVO2.getAllRowsInRange();

                if (filteredRows.length > 0) {
                    return (Number) filteredRows[0].getAttribute("BudgAmt");
                }
            }
        }
        return (Number) getAttributeInternal(EMPPREVIOUSBDGAMTTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute EmpPreviousBdgAmtTrans.
     * @param value value to set the  EmpPreviousBdgAmtTrans
     */
    public void setEmpPreviousBdgAmtTrans(Number value) {
        setAttributeInternal(EMPPREVIOUSBDGAMTTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute DiffInTargetAndBdgAmtTrans.
     * @return the DiffInTargetAndBdgAmtTrans
     */
    public Number getDiffInTargetAndBdgAmtTrans() {
        if (getAttributeInternal(DIFFINTARGETANDBDGAMTTRANS) == null && this.getEmpBudgAmtTrans() != null) {
            if (this.getEmpBudgAmtTrans() != null && this.getEmpAssignedAmtTrans() != null) {
                if (getEmpAssignedAmtTrans().compareTo(getEmpBudgAmtTrans()) >= 0) {
                    return getEmpAssignedAmtTrans().subtract(getEmpBudgAmtTrans());
                } else {
                    return getEmpBudgAmtTrans().subtract(getEmpAssignedAmtTrans());
                }
            } else if (this.getEmpBudgAmtTrans() != null && this.getEmpAssignedAmtTrans() == null) {
                return getEmpBudgAmtTrans();
            } else if (this.getEmpBudgAmtTrans() == null && this.getEmpAssignedAmtTrans() != null) {
                return getEmpAssignedAmtTrans();
            }
        }
        return (Number) getAttributeInternal(DIFFINTARGETANDBDGAMTTRANS);
    }

    /**
     * Gets the attribute value for the calculated attribute DiffInTargetAndBdgColorTrans.
     * @return the DiffInTargetAndBdgColorTrans
     */
    public Integer getDiffInTargetAndBdgColorTrans() {
        if (getAttributeInternal(DIFFINTARGETANDBDGCOLORTRANS) == null && this.getEmpBudgAmtTrans() != null) {
            if (this.getEmpBudgAmtTrans() != null && this.getEmpAssignedAmtTrans() != null) {
                if (getEmpAssignedAmtTrans().compareTo(getEmpBudgAmtTrans()) >= 0) {
                    return 1;
                } else {
                    return -1;
                }
            } else if (this.getEmpBudgAmtTrans() != null && this.getEmpAssignedAmtTrans() == null) {
                return -1;
            } else if (this.getEmpBudgAmtTrans() == null && this.getEmpAssignedAmtTrans() != null) {
                return 1;
            }
        } else {
            return 0;
        }
        return (Integer) getAttributeInternal(DIFFINTARGETANDBDGCOLORTRANS);
    }

    /**
     * Gets the attribute value for the calculated attribute TransPrvBudgetAmt.
     * @return the TransPrvBudgetAmt
     */
    public Number getTransPrvBudgetAmt() {
        if (getAttributeInternal(TRANSPRVBUDGETAMT) != null)
            return (Number) getAttributeInternal(TRANSPRVBUDGETAMT);
        else {
            this.getAm().getEmpTargetVsActualVO().setNamedWhereClauseParam("CldIdBind", this.getCldId());
            this.getAm().getEmpTargetVsActualVO().setNamedWhereClauseParam("SlocIdBind", this.getSlocId());
            this.getAm().getEmpTargetVsActualVO().setNamedWhereClauseParam("OrgIdBind", this.getOrgId());
            this.getAm().getEmpTargetVsActualVO().setNamedWhereClauseParam("HoOrgIdBind", this.getHoOrgId());
            this.getAm().getEmpTargetVsActualVO().setNamedWhereClauseParam("EmpCodeBind", this.getEmpCode());
            ViewObjectImpl bdgEoBudgetVO1 = this.getAm().getBdgEoBudgetVO1();
            RowQualifier rQ = new RowQualifier(bdgEoBudgetVO1);

            rQ.setWhereClause("CldId ='" + this.getCldId() + "' and SlocId = " + this.getSlocId() + " and HoOrgId = '" +
                              this.getHoOrgId() + "' and EoId = " + resolvEl("#{pageFlowScope.P_EO_ID}") +
                              " and DocId ='" + resolvEl("#{pageFlowScope.P_DOC_ID}") + "'");
            Row[] filteredRows = bdgEoBudgetVO1.getFilteredRows(rQ);

            if (filteredRows.length > 0) {
                this.getAm().getEmpTargetVsActualVO().setNamedWhereClauseParam("PrdStrtDtBind",
                                                                               filteredRows[0].getAttribute("PrdStartDt"));
                this.getAm().getEmpTargetVsActualVO().setNamedWhereClauseParam("PrdEndDtBind",
                                                                               filteredRows[0].getAttribute("PrdEndDt"));
            }
            this.getAm().getEmpTargetVsActualVO().executeQuery();
            Row[] rows = this.getAm().getEmpTargetVsActualVO().getAllRowsInRange();
            if (rows.length > 0)
                return (Number) rows[0].getAttribute("BudgAmt");
            else
                return new Number(0);
        }

    }

    /**
     * Gets the attribute value for the calculated attribute TransPrvActualAmt.
     * @return the TransPrvActualAmt
     */
    public Number getTransPrvActualAmt() {
        if (getAttributeInternal(TRANSPRVACTUALAMT) != null)
            return (Number) getAttributeInternal(TRANSPRVACTUALAMT);
        else {
            this.getAm().getEmpTargetVsActualVO().setNamedWhereClauseParam("CldIdBind", this.getCldId());
            this.getAm().getEmpTargetVsActualVO().setNamedWhereClauseParam("SlocIdBind", this.getSlocId());
            this.getAm().getEmpTargetVsActualVO().setNamedWhereClauseParam("OrgIdBind", this.getOrgId());
            this.getAm().getEmpTargetVsActualVO().setNamedWhereClauseParam("HoOrgIdBind", this.getHoOrgId());
            this.getAm().getEmpTargetVsActualVO().setNamedWhereClauseParam("EmpCodeBind", this.getEmpCode());
            ViewObjectImpl bdgEoBudgetVO1 = this.getAm().getBdgEoBudgetVO1();
            RowQualifier rQ = new RowQualifier(bdgEoBudgetVO1);

            rQ.setWhereClause("CldId ='" + this.getCldId() + "' and SlocId = " + this.getSlocId() + " and HoOrgId = '" +
                              this.getHoOrgId() + "' and EoId = " + resolvEl("#{pageFlowScope.P_EO_ID}") +
                              " and DocId ='" + resolvEl("#{pageFlowScope.P_DOC_ID}") + "'");
            Row[] filteredRows = bdgEoBudgetVO1.getFilteredRows(rQ);

            if (filteredRows.length > 0) {
                this.getAm().getEmpTargetVsActualVO().setNamedWhereClauseParam("PrdStrtDtBind",
                                                                               filteredRows[0].getAttribute("PrdStartDt"));
                this.getAm().getEmpTargetVsActualVO().setNamedWhereClauseParam("PrdEndDtBind",
                                                                               filteredRows[0].getAttribute("PrdEndDt"));
            }
            this.getAm().getEmpTargetVsActualVO().executeQuery();
            Row[] rows = this.getAm().getEmpTargetVsActualVO().getAllRowsInRange();
            if (rows.length > 0)
                return (Number) rows[0].getAttribute("ActualAmt");
            else
                return new Number(0);
        }

    }

    /**
     * Gets the attribute value for the calculated attribute TransPrvDiffAmt.
     * @return the TransPrvDiffAmt
     */
    public Number getTransPrvDiffAmt() {
        if (getAttributeInternal(TRANSPRVDIFFAMT) != null)
            return (Number) getAttributeInternal(TRANSPRVDIFFAMT);
        else {
            this.getAm().getEmpTargetVsActualVO().setNamedWhereClauseParam("CldIdBind", this.getCldId());
            this.getAm().getEmpTargetVsActualVO().setNamedWhereClauseParam("SlocIdBind", this.getSlocId());
            this.getAm().getEmpTargetVsActualVO().setNamedWhereClauseParam("OrgIdBind", this.getOrgId());
            this.getAm().getEmpTargetVsActualVO().setNamedWhereClauseParam("HoOrgIdBind", this.getHoOrgId());
            this.getAm().getEmpTargetVsActualVO().setNamedWhereClauseParam("EmpCodeBind", this.getEmpCode());
            ViewObjectImpl bdgEoBudgetVO1 = this.getAm().getBdgEoBudgetVO1();
            RowQualifier rQ = new RowQualifier(bdgEoBudgetVO1);

            rQ.setWhereClause("CldId ='" + this.getCldId() + "' and SlocId = " + this.getSlocId() + " and HoOrgId = '" +
                              this.getHoOrgId() + "' and EoId = " + resolvEl("#{pageFlowScope.P_EO_ID}") +
                              " and DocId ='" + resolvEl("#{pageFlowScope.P_DOC_ID}") + "'");
            Row[] filteredRows = bdgEoBudgetVO1.getFilteredRows(rQ);

            if (filteredRows.length > 0) {
                this.getAm().getEmpTargetVsActualVO().setNamedWhereClauseParam("PrdStrtDtBind",
                                                                               filteredRows[0].getAttribute("PrdStartDt"));
                this.getAm().getEmpTargetVsActualVO().setNamedWhereClauseParam("PrdEndDtBind",
                                                                               filteredRows[0].getAttribute("PrdEndDt"));
            }
            this.getAm().getEmpTargetVsActualVO().executeQuery();
            Row[] rows = this.getAm().getEmpTargetVsActualVO().getAllRowsInRange();
            if (rows.length > 0)
                return (Number) rows[0].getAttribute("DiffAmt");
            else
                return new Number(0);
        }

    }

    /**
     * Gets the attribute value for the calculated attribute TransPrvDiffType.
     * @return the TransPrvDiffType
     */
    public Integer getTransPrvDiffType() {
        if (getAttributeInternal(TRANSPRVDIFFTYPE) != null)
            return (Integer) getAttributeInternal(TRANSPRVDIFFTYPE);
        else {
            this.getAm().getEmpTargetVsActualVO().setNamedWhereClauseParam("CldIdBind", this.getCldId());
            this.getAm().getEmpTargetVsActualVO().setNamedWhereClauseParam("SlocIdBind", this.getSlocId());
            this.getAm().getEmpTargetVsActualVO().setNamedWhereClauseParam("OrgIdBind", this.getOrgId());
            this.getAm().getEmpTargetVsActualVO().setNamedWhereClauseParam("HoOrgIdBind", this.getHoOrgId());
            this.getAm().getEmpTargetVsActualVO().setNamedWhereClauseParam("EmpCodeBind", this.getEmpCode());
            ViewObjectImpl bdgEoBudgetVO1 = this.getAm().getBdgEoBudgetVO1();
            RowQualifier rQ = new RowQualifier(bdgEoBudgetVO1);

            rQ.setWhereClause("CldId ='" + this.getCldId() + "' and SlocId = " + this.getSlocId() + " and HoOrgId = '" +
                              this.getHoOrgId() + "' and EoId = " + resolvEl("#{pageFlowScope.P_EO_ID}") +
                              " and DocId ='" + resolvEl("#{pageFlowScope.P_DOC_ID}") + "'");
            Row[] filteredRows = bdgEoBudgetVO1.getFilteredRows(rQ);

            if (filteredRows.length > 0) {
                this.getAm().getEmpTargetVsActualVO().setNamedWhereClauseParam("PrdStrtDtBind",
                                                                               filteredRows[0].getAttribute("PrdStartDt"));
                this.getAm().getEmpTargetVsActualVO().setNamedWhereClauseParam("PrdEndDtBind",
                                                                               filteredRows[0].getAttribute("PrdEndDt"));
            }
            this.getAm().getEmpTargetVsActualVO().executeQuery();
            Row[] rows = this.getAm().getEmpTargetVsActualVO().getAllRowsInRange();
            if (rows.length > 0)
                return (Integer) rows[0].getAttribute("DiffAmtType");
            else
                return new Integer(0);
        }
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link CldIdEmpBudgetDetail_2.
     */
    public RowIterator getCldIdEmpBudgetDetail_2() {
        return (RowIterator) getAttributeInternal(CLDIDEMPBUDGETDETAIL_2);
    }

    /**
     * Generalized function to call object of application module.
     */
    public BdgEoProfileAMImpl getAm() {
        BdgEoProfileAMImpl am = (BdgEoProfileAMImpl) getApplicationModule();
        am.getBdgEoBudgetVO2().executeQuery();
        return am;
    }

    /**Method to resolve expression- returns String value*/
    protected String resolvEl(String data) {
        String val = null;
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        Object Message = valueExp.getValue(elContext);
        if (Message != null) {
            val = Message.toString();
        }
        return val;
    }
}
