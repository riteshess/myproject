package bdgeoprofileapp.model.views;

import bdgeoprofileapp.model.services.BdgEoProfileAMImpl;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.Number;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat May 16 11:32:08 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class StructDetailVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CldId,
        SlocId,
        OrgId,
        DocStruct,
        ParamId,
        ParamNm,
        DocStructDepd,
        DependStructVal,
        TragetAmtTrans,
        BudgAmtTrans,
        CldIdStructDetail_2;
        static AttributesEnum[] vals = null; ;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int DOCSTRUCT = AttributesEnum.DocStruct.index();
    public static final int PARAMID = AttributesEnum.ParamId.index();
    public static final int PARAMNM = AttributesEnum.ParamNm.index();
    public static final int DOCSTRUCTDEPD = AttributesEnum.DocStructDepd.index();
    public static final int DEPENDSTRUCTVAL = AttributesEnum.DependStructVal.index();
    public static final int TRAGETAMTTRANS = AttributesEnum.TragetAmtTrans.index();
    public static final int BUDGAMTTRANS = AttributesEnum.BudgAmtTrans.index();
    public static final int CLDIDSTRUCTDETAIL_2 = AttributesEnum.CldIdStructDetail_2.index();

    /**
     * This is the default constructor (do not remove).
     */
    public StructDetailVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute CldId.
     * @return the CldId
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Gets the attribute value for the calculated attribute SlocId.
     * @return the SlocId
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Gets the attribute value for the calculated attribute OrgId.
     * @return the OrgId
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Gets the attribute value for the calculated attribute DocStruct.
     * @return the DocStruct
     */
    public String getDocStruct() {
        return (String) getAttributeInternal(DOCSTRUCT);
    }

    /**
     * Gets the attribute value for the calculated attribute ParamId.
     * @return the ParamId
     */
    public String getParamId() {
        return (String) getAttributeInternal(PARAMID);
    }

    /**
     * Gets the attribute value for the calculated attribute ParamNm.
     * @return the ParamNm
     */
    public String getParamNm() {
        return (String) getAttributeInternal(PARAMNM);
    }

    /**
     * Gets the attribute value for the calculated attribute DocStructDepd.
     * @return the DocStructDepd
     */
    public String getDocStructDepd() {
        return (String) getAttributeInternal(DOCSTRUCTDEPD);
    }

    /**
     * Gets the attribute value for the calculated attribute DependStructVal.
     * @return the DependStructVal
     */
    public String getDependStructVal() {
        return (String) getAttributeInternal(DEPENDSTRUCTVAL);
    }

    /**
     * Gets the attribute value for the calculated attribute TragetAmtTrans.
     * @return the TragetAmtTrans
     */
    public Number getTragetAmtTrans() {
        if (this.getDocStruct() != null) {
            if (this.getDocStruct().equalsIgnoreCase("3") && this.getParamId() != null) { /// Filter based on Location
                ViewObjectImpl bdgEoBudgetVO1 = this.getAm().getBdgEoBudgetVO1();
                RowQualifier rowQua = new RowQualifier(bdgEoBudgetVO1);

                rowQua.setWhereClause("CldId ='" + this.getCldId() + "' and SlocId = " + this.getSlocId() +
                                      " and EoId = " + resolvElO("#{pageFlowScope.P_EO_ID}") + " and DocId ='" +
                                      resolvElO("#{pageFlowScope.P_DOC_ID}") + "'");
                Row[] fr = bdgEoBudgetVO1.getFilteredRows(rowQua);
                if (fr.length > 0) {
                    Object prdStDt = fr[0].getAttribute("PrdStartDt");
                    Object prdEndDt = fr[0].getAttribute("PrdEndDt");

                    ViewObjectImpl basedOnLocVO1 = this.getAm().getGetImmEmpBasedOnLocVO1();
                    basedOnLocVO1.setRangeSize(-1);
                    basedOnLocVO1.executeQuery();

                    rowQua = new RowQualifier(basedOnLocVO1);

                    rowQua.setWhereClause("PrdStartDt ='" + prdStDt + "' and PrdEndDt ='" + prdEndDt +
                                          "' and MgrCode =" + resolvElO("#{pageFlowScope.P_EO_ID}"));
                    Row[] filteredRows = basedOnLocVO1.getFilteredRows(rowQua);

                    ViewObjectImpl bdgEoBudgetVO2 = this.getAm().getBdgEoBudgetVO2();
                    bdgEoBudgetVO2.setRangeSize(-1);
                    bdgEoBudgetVO2.executeQuery();

                    RowQualifier rQ = new RowQualifier(bdgEoBudgetVO2);
                    Number val = new Number(0);
                    for (Row r : filteredRows) {
                        rQ.setWhereClause("CldId ='" + this.getCldId() + "' and SlocId = " + this.getSlocId() +
                                          " and OrgId = '" + this.getOrgId() + "' and DocId ='" +
                                          r.getAttribute("DocId") + "' and PrdStartDt ='" + prdStDt +
                                          "' and PrdEndDt ='" + prdEndDt + "' and Region ='" + this.getParamId() + "'");

                        Row[] row = bdgEoBudgetVO2.getFilteredRows(rQ);

                        for (Row r1 : row) {
                            val = val.add((Number) r1.getAttribute("MgrBudgAmt"));
                        }
                    }
                    return val;
                }

            } //// End of DocStruct() == 3 for location

        }
        return (Number) getAttributeInternal(TRAGETAMTTRANS);
    }

    /**
     * Gets the attribute value for the calculated attribute BudgAmtTrans.
     * @return the BudgAmtTrans
     */
    public Number getBudgAmtTrans() {
        if (this.getDocStruct() != null) {
            if (this.getDocStruct().equalsIgnoreCase("3") && this.getParamId() != null) { /// Filter based on Location
                ViewObjectImpl bdgEoBudgetVO1 = this.getAm().getBdgEoBudgetVO1();
                RowQualifier rowQua = new RowQualifier(bdgEoBudgetVO1);

                rowQua.setWhereClause("CldId ='" + this.getCldId() + "' and SlocId = " + this.getSlocId() +
                                      " and EoId = " + resolvElO("#{pageFlowScope.P_EO_ID}") + " and DocId ='" +
                                      resolvElO("#{pageFlowScope.P_DOC_ID}") + "'");
                Row[] fr = bdgEoBudgetVO1.getFilteredRows(rowQua);
                if (fr.length > 0) {
                    Object prdStDt = fr[0].getAttribute("PrdStartDt");
                    Object prdEndDt = fr[0].getAttribute("PrdEndDt");

                    ViewObjectImpl basedOnLocVO1 = this.getAm().getGetImmEmpBasedOnLocVO1();
                    basedOnLocVO1.setRangeSize(-1);
                    basedOnLocVO1.executeQuery();

                    rowQua = new RowQualifier(basedOnLocVO1);

                    rowQua.setWhereClause("PrdStartDt ='" + prdStDt + "' and PrdEndDt ='" + prdEndDt +
                                          "' and MgrCode =" + resolvElO("#{pageFlowScope.P_EO_ID}"));
                    Row[] filteredRows = basedOnLocVO1.getFilteredRows(rowQua);

                    ViewObjectImpl bdgEoBudgetVO2 = this.getAm().getBdgEoBudgetVO2();
                    bdgEoBudgetVO2.setRangeSize(-1);
                    bdgEoBudgetVO2.executeQuery();

                    RowQualifier rQ = new RowQualifier(bdgEoBudgetVO2);
                    Number val = new Number(0);
                    for (Row r : filteredRows) {
                        rQ.setWhereClause("CldId ='" + this.getCldId() + "' and SlocId = " + this.getSlocId() +
                                          " and OrgId = '" + this.getOrgId() + "' and DocId ='" +
                                          r.getAttribute("DocId") + "' and PrdStartDt ='" + prdStDt +
                                          "' and PrdEndDt ='" + prdEndDt + "' and Region ='" + this.getParamId() + "'");

                        Row[] row = bdgEoBudgetVO2.getFilteredRows(rQ);

                        for (Row r1 : row) {
                            val = val.add((Number) r1.getAttribute("BudgAmt"));
                        }
                    }
                    return val;
                }

            } //// End of DocStruct() == 3 for location

        }
        return (Number) getAttributeInternal(BUDGAMTTRANS);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link CldIdStructDetail_2.
     */
    public RowIterator getCldIdStructDetail_2() {
        return (RowIterator) getAttributeInternal(CLDIDSTRUCTDETAIL_2);
    }


    /**
     * Method will return Application Module App
     */
    public BdgEoProfileAMImpl getAm() {
        BdgEoProfileAMImpl am = (BdgEoProfileAMImpl) getApplicationModule();
        return am;
    }

    /**Method to resolve expression- returns String value*/
    public Object resolvElO(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        Object Message = valueExp.getValue(elContext);
        return Message;
    }
}
